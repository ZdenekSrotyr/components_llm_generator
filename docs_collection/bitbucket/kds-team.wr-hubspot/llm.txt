Directory structure:
└── kds_consulting_team-kds-team.wr-hubspot/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── object_properties_doc_generator.py
    ├── requirements.txt
    ├── .travis.yml
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   ├── objects_properties.md
    │   └── imgs/
    ├── example/
    │   ├── component.py
    │   ├── component_config/
    │   │   ├── component_long_description.md
    │   │   ├── component_short_description.md
    │   │   ├── configSchema.json
    │   │   ├── configuration_description.md
    │   │   ├── stack_parameters.json
    │   │   └── sample-config/
    │   │       ├── config.json
    │   │       ├── in/
    │   │       │   ├── state.json
    │   │       │   ├── files/
    │   │       │   │   └── order1.xml
    │   │       │   └── tables/
    │   │       │       ├── test.csv
    │   │       │       └── test.csv.manifest
    │   │       └── out/
    │   │           ├── files/
    │   │           │   └── order1.xml
    │   │           └── tables/
    │   │               └── test.csv
    │   ├── data/
    │   │   ├── adasd.js
    │   │   ├── config.json
    │   │   ├── in/
    │   │   │   ├── state.json
    │   │   │   ├── files/
    │   │   │   │   └── order1.xml
    │   │   │   └── tables/
    │   │   │       ├── test.csv
    │   │   │       └── test.csv.manifest
    │   │   └── out/
    │   │       ├── files/
    │   │       │   └── order1.xml
    │   │       └── tables/
    │   │           ├── companies.csv
    │   │           ├── companies.csv.manifest
    │   │           └── test.csv
    │   └── hs/
    │       ├── __init__.py
    │       ├── hs_client.py
    │       └── hs_result.py
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── client.py
    │   ├── component.py
    │   ├── endpoint_mapping.py
    │   └── exceptions.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
File: README.md
================================================
# Keboola Hubspot Writer  
  
The HubSpot CRM helps companies grow traffic, convert leads, get insights to close more deals, etc.  
Keboola Hubspot Writer will provide users the assistance to maintain and manage their contacts within Hubspot.  
  
## Requirement  
There are two ways to authorize for Hubspot API.

 1. **Hapikey** - Your Hubspot API key, This will be soon deprecated, see more ([here](https://developers.hubspot.com/changelog/upcoming-api-key-sunset))  
 2. **Private App Token** - See how to create and assign permissions ([here](https://developers.hubspot.com/docs/api/private-apps))
  
## Configuration  
  
First fill in Authorization configuration. Then click ADD ROW button and fill in the name by which you can easily identify the configuration row. Next fill in the Desired object you want to manipulate and then select the action you want to perform with this object. 
The writer will fetch all input tables and convert each row into the required request format based on the requirements of the endpoint. Each writer will write to `one` endpoint.   
  
#### Column names
* The following file contains list of available columns/properties of Hubspot objects (not contains manually created properties) [Available objects properties](https://bitbucket.org/kds_consulting_team/kds-team.wr-hubspot/src/master/docs/objects_properties.md)

| Batch endpoint | Object          | Object Action    | Description| Required Columns                                                          |  
|----------------|-----------------|------------------||---------------------------------------------------------------------------|  
| Yes            | Contact         | Create           | A list of contact properties that you want to set for the new contact record. Each entry in the list must include the internal name of the property, and the value that you want to set for that property. Note: You must include at least one property for the new contact, or you will receive an error.                                                                                                                                                                                                                                                                                    |                                                                           |
| No             | Contact         | Add to List      | It is required to have both `vids` and `emails` columns in the input data file. The code will prioritize the values input for `vids`. Example, if there are inputs for both `emails` and `vids` in the same row, the code will prioritize `vids` pushing this value into the request and ignore the value in `emails`. Please note that you cannot manually add contacts to dynamic lists. To determine whether a list is dynamic or static, when you get a list, you will see a flag called dynamic that equates to true or false. Up to 500 total contacts can be added in a single request. | `list_id, vids, emails`                                                   |
| Yes            | Contact         | Update           | This endpoint is used to update existing contacts, and it requires `vid` in the input data file. `vid` cannot be empty. The rest of the columns other than vid will be used as a request parameter to update the contact property. If either the property or the contact does not exist, the update request for that specific contact will fail.                                                                                                                                                                                                                                              | `vid`                                                                     | 
| No             | Contact         | Update by Email  | Like the `Update Contact` endpoint, this endpoint is used to update existing contacts, and it requires `email` in the "inputdata" file. The rest of the columns will be used to update the contact's properties                                                                                                                                                                                                                                                                                                                                                                               | `email`                                                                   |  
| Yes            | Contact         | Remove from List | Please note that you cannot manually remove contacts from dynamic lists - they can only be updated by the contacts system based on the properties of the list itself. To determine whether a list is dynamic or static, when you get a list, you will see a flag called dynamic that equates to true or false.                                                                                                                                                                                                                                                                                | `list_id, vids`                                                           |   
| Yes            | Company         | Create           | Creates companies with defined properties if any are present| `name`                                                                    |  
| Yes            | Company         | Update           | Updates companies identified by `company_id` with defined properties| `company_id`                                                              |
| Yes            | Company         | Remove           | Deletes companies identified by `company_id`| `company_id`                                                              |
| No             | Company         | Add to List      | Adds companies to lists| `list_id, vids`                                                           |
| No             | Company         | Remove from List | Removes companies from lists| `list_id, vids`                                                           |
| No             | Contact List    | Create           | Creates contact lists. All list created via this component will `NOT` be dynamic.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             | `name`                                                                    |
| No             | Custom List     | Create           | Creates company/deal lists. Single table can contain multiple types indicated by column object_type. At the moment we support `company` and `deal`. All list created will have processing type `MANUAL`.                                                                                                                                                                                                                                                                                                                                                                                      | `name, object_type`                                                       |
| Yes            | Deal            | Create           | Creates deals with defined properties if any are present| `hubspot_owner_id`                                                        |  
| Yes            | Deal            | Update           | Updates deals identified by `deal_id` with defined properties| `deal_id`                                                                 |
| Yes            | Deal            | Remove           | Deletes deals identified by `deal_id`| `deal_id`                                                                 |
| No             | Deal            | Add to List      | Adds deals to lists| `list_id, vids`                                                           |
| No             | Deal            | Remove from List | Removes deals from lists| `list_id, vids`                                                           |
| No             | Association     | Create           | Create association between objects (see more on object types in [HubSpot documentation](https://developers.hubspot.com/docs/api/crm/understanding-the-crm#object-type-id))                                                                                                                                                                                                                                                                                                                                                                                                                    | `from_id,to_id,from_object_type,to_object_type`                           |
| No             | Association     | Remove           | Remove association between objects (see more on object types in [HubSpot documentation](https://developers.hubspot.com/docs/api/crm/understanding-the-crm#object-type-id))                                                                                                                                                                                                                                                                                                                                                                                                                    | `from_id,to_id,from_object_type,to_object_type`                           |
| Yes            | Line item       | Create           | Create a new Line item, it have to associated to a deals, quotes, invoices, payment links or subscription (more information in [HubSpot documentation](https://developers.hubspot.com/docs/api/crm/line-items#:~:text=To%20create%20a%20line%20item,hs_product_id%20in%20the%20post%20body.))                                                                                                                                                                                                                                                                                                 | `name, price, quantity, association_id, association_category,association_type_id` |
| Yes            | Line item       | Remove           | Remove Line item identified by `line_item_id`| `line_item_id`                                                            |
| No             | Secondary Email | Add              | Adds secondary email to contact (This endpoint is experimental| `vid, secondary_email`                                                    |
| No             | Secondary Email | Update           | Updates secondary email of contact (This endpoint is experimental| `vid, secondary_email_old, secondary_email`                               |
| No             | Secondary Email | Remove           | Deletes secondary email of contact (This endpoint is experimental)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | `vid, secondary_email`                                                    |
| No             | Custom object   | Create           | Create a custom object record, for defining the object type, is possible to use the object_type or the writer can use the input table name.   (see more on object types in [HubSpot documentation](https://developers.hubspot.com/beta-docs/guides/api/crm/objects/custom-objects))                                                                                                                                                                                                                                                                                                                                                                                                              | `object_type`                                                             |





================================================
File: Dockerfile
================================================
FROM python:3.8.9-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
File: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
            - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:$TEST_TAG
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
File: change_log.md
================================================
**0.1.2**

- use batch request processing for Contact and Companies object, for create/update actions

**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog



================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "asigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "asigning travis tag"
	export TAG="$TRAVIS_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
File: object_properties_doc_generator.py
================================================
import requests

OBJECTS = ["contact", "company", "list", "deal", "ticket", "product", "quote", "line_item", "tax", "call",
           "communication", "email", "meeting", "note", "postal_mail", "task", "custom_list", "association",
           "secondary_email"]
TOKEN = 'TODO'


# get all properties for each object
def get_properties(hubspot_object):
    url = f'https://api.hubapi.com/crm/v3/objects/{hubspot_object}/properties'
    querystring = {"limit": "100"}
    headers = {
        'Authorization': f'Bearer {TOKEN}',
        'Content-Type': 'application/json'
    }
    response = requests.request("GET", url, headers=headers, params=querystring)
    return response.json()


# create markdown file with hubspot object name and his properties in one file
def create_file(md):
    filename = 'docs/objects_properties.md'
    with open(filename, 'w+') as file:
        file.writelines(md)


# create markdown lines for each property
def md_lines(hubspot_object, properties):
    lines = [f'## {hubspot_object} \n\n']
    for prop in properties:
        lines.append(f'#### {prop} \n')
    return lines


object_lines = ['# Available properties/columns of Hubspot standard objects \n\n']
for h_object in OBJECTS:
    print(f'Getting properties for {h_object}')
    prop = get_properties(h_object)
    if isinstance(prop, dict):
        if prop.get('status') == 'error':
            print(f'Error: {prop.get("message")}')
            continue
    print(f'Properties for {h_object} received: {prop}')
    object_lines.extend(md_lines(h_object, prop))

create_file(object_lines)



================================================
File: requirements.txt
================================================
mock==4.0.3
freezegun==1.2.1
keboola.component==1.6.8
requests==2.28.1
urllib3==1.26.11


================================================
File: .travis.yml
================================================
sudo: false

services:
  - docker

jobs:
  include:
    - stage: tests
      script:
        - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
        - docker run $APP_IMAGE python -m unittest discover
      # push test image to ECR - uncomment for testing before deployment
      #  - docker pull quay.io/keboola/developer-portal-cli-v2:latest
      #  - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
      #  - docker tag $APP_IMAGE:latest $REPOSITORY:test
      #  - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
      #  - docker push $REPOSITORY:test
      #  - docker pull quay.io/keboola/syrup-cli:latest
    - stage: deploy_dev_portal
      if: branch = master
      script: "./scripts/update_dev_portal_properties.sh"

before_script:
  - export APP_IMAGE=keboola-component
  - docker -v
  - docker build -t $APP_IMAGE .
  - chmod +x ./scripts/update_dev_portal_properties.sh
  - chmod +x ./deploy.sh

after_success:
  - docker images

deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh
  on:
    tags: true
    branch: master



================================================
File: component_config/component_long_description.md
================================================
# Keboola Hubspot Writer  
  
The HubSpot CRM helps companies grow traffic, convert leads, get insights to close more deals, etc.  
Keboola Hubspot Writer will provide users the assistance to maintain and manage their contacts within Hubspot.  
  
## Requirement  
There are two ways to authorize for Hubspot API.

 1. **Hapikey** - Your Hubspot API key, This will be soon deprecated, see more ([here](https://developers.hubspot.com/changelog/upcoming-api-key-sunset))  
 2. **Private App Token** - See how to create and assign permissions ([here](https://developers.hubspot.com/docs/api/private-apps))
  
## Configuration  
  
First fill in Authorization configuration. Then click ADD ROW button and fill in the name by which you can easily identify the configuration row. Next fill in the Desired object you want to manipulate and then select the action you want to perform with this object. 
The writer will fetch all input tables and convert each row into the required request format based on the requirements of the endpoint. Each writer will write to `one` endpoint.   
  

| Batch endpoint | Object       | Object Action    | Description| Required Columns |  
|----------------|--------------|------------------||-|  
| Yes            | Contact      | Create           | A list of contact properties that you want to set for the new contact record. Each entry in the list must include the internal name of the property, and the value that you want to set for that property. Note: You must include at least one property for the new contact, or you will receive an error.                                                                                                                                                                                                                                                                                   | |
| No             | Contact      | Add to List      | It is required to have both `vids` and `emails` columns in the input data file. The code will prioritize the values input for `vids`. Example, if there are inputs for both `emails` and `vids` in the same row, the code will prioritize `vids` pushing this value into the request and ignore the value in `emails`. Please note that you cannot manually add contacts to dynamic lists. To determine whether a list is dynamic or static, when you get a list, you will see a flag called dynamic that equates to true or false. Up to 500 total contacts can be added in a single request. | `list_id, vids, emails` |
| Yes            | Contact      | Update           | This endpoint is used to update existing contacts, and it requires `vid` in the input data file. `vid` cannot be empty. The rest of the columns other than vid will be used as a request parameter to update the contact property. If either the property or the contact does not exist, the update request for that specific contact will fail.                                                                                                                                                                                                                                             | `vid` | 
| No             | Contact      | Update by Email  | Like the `Update Contact` endpoint, this endpoint is used to update existing contacts, and it requires `email` in the "inputdata" file. The rest of the columns will be used to update the contact's properties                                                                                                                                                                                                                                                                                                                                                                              | `email` |  
| Yes            | Contact      | Remove from List | Please note that you cannot manually remove contacts from dynamic lists - they can only be updated by the contacts system based on the properties of the list itself. To determine whether a list is dynamic or static, when you get a list, you will see a flag called dynamic that equates to true or false.                                                                                                                                                                                                                                                                               | `list_id, vids` |   
| Yes            | Company      | Create           | Creates companies with defined properties if any are present| `name` |  
| Yes            | Company      | Update           | Updates companies identified by `company_id` with defined properties| `company_id` |
| Yes            | Company      | Remove           | Deletes companies identified by `company_id`| `company_id` |
| No             | Company      | Add to List      | Adds companies to lists| `list_id, vids` |
| No             | Company      | Remove from List | Removes companies from lists| `list_id, vids` |
| No             | Contact List | Create           | Creates contact lists. All list created via this component will `NOT` be dynamic.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            | `name` |
| No             | Custom List  | Create           | Creates company/deal lists. Single table can contain multiple types indicated by column object_type. At the moment we support `company` and `deal`. All list created will have processing type `MANUAL`.                                                                                                                                                                                                                                                                                                                                                                                     | `name, object_type` |
| Yes            | Deal         | Create           | Creates deals with defined properties if any are present.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    | `hubspot_owner_id` |  
| Yes            | Deal         | Update           | Updates deals identified by `deal_id` with defined properties| `deal_id` |
| Yes            | Deal         | Remove           | Deletes deals identified by `deal_id`| `deal_id` |
| No             | Deal         | Add to List      | Adds deals to lists| `list_id, vids` |
| No             | Deal         | Remove from List | Removes deals from lists| `list_id, vids` |
| No             | Association  | Create           | Create association between objects (see more on object types in [HubSpot documentation](https://developers.hubspot.com/docs/api/crm/understanding-the-crm#object-type-id| `from_id,to_id,from_object_type,to_object_type` |
| No             | Association  | Remove           | Remove association between objects (see more on object types in [HubSpot documentation](https://developers.hubspot.com/docs/api/crm/understanding-the-crm#object-type-id))                                                                                                                                                                                                                                                                                                                                                                                                                 | `from_id,to_id,from_object_type,to_object_type` |
| Yes            | Line item    | Create           | Create a new Line item, it have to associated to a deals, quotes, invoices, payment links or subscription (more information in [HubSpot documentation](https://developers.hubspot.com/docs/api/crm/line-items#:~:text=To%20create%20a%20line%20item,hs_product_id%20in%20the%20post%20body.))                                                                                                                                                                                                                                                                                                | `name, price, quantity, association_id, association_category,association_type_id` |
| Yes            | Line item    | Remove           | Remove Line item identified by `line_item_id`                                                                                                                                                                                                                                                                                                                                                                           | `line_item_id` |


================================================
File: component_config/component_short_description.md
================================================
The HubSpot CRM helps companies grow traffic, convert leads, get insights to close more deals, etc


================================================
File: component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Writer configuration",
  "required": [
    "hubspot_object"
  ],
  "properties": {
    "hubspot_object": {
      "enum": [
        "contact",
        "company",
        "list",
        "deal",
        "custom_list",
        "line_item",
        "association",
        "secondary_email",
        "custom_object"
      ],
      "type": "string",
      "title": "Object",
      "propertyOrder": 200,
      "options": {
        "enum_titles": [
          "Contact",
          "Company",
          "Contact List",
          "Deal",
          "Custom List",
          "Line Item",
          "Association",
          "Secondary Email",
          "Custom Object"
        ]
      }
    },
    "contact_action": {
      "enum": [
        "create",
        "add_to_list",
        "update",
        "update_by_email",
        "remove_from_list"
      ],
      "type": "string",
      "title": "Object Action",
      "propertyOrder": 210,
      "options": {
        "enum_titles": [
          "Create ",
          "Add to List",
          "Update",
          "Update by Email",
          "Remove from List"
        ],
        "dependencies": {
          "hubspot_object": "contact"
        }
      }
    },
    "company_action": {
      "enum": [
        "create",
        "update",
        "remove",
        "add_to_list",
        "remove_from_list"
      ],
      "type": "string",
      "title": "Object Action",
      "propertyOrder": 211,
      "options": {
        "enum_titles": [
          "Create",
          "Update",
          "Remove",
          "Add to List",
          "Remove from List"
        ],
        "dependencies": {
          "hubspot_object": "company"
        }
      }
    },
    "list_action": {
      "enum": [
        "create"
      ],
      "type": "string",
      "title": "Object Action",
      "propertyOrder": 212,
      "options": {
        "enum_titles": [
          "Create"
        ],
        "dependencies": {
          "hubspot_object": "list"
        }
      }
    },
    "custom_list_action": {
      "enum": [
        "create"
      ],
      "type": "string",
      "title": "Object Action",
      "propertyOrder": 211,
      "options": {
        "enum_titles": [
          "Create"
        ],
        "dependencies": {
          "hubspot_object": "custom_list"
        }
      }
    },
    "deal_action": {
      "enum": [
        "create",
        "update",
        "remove",
        "add_to_list"
      ],
      "type": "string",
      "title": "Object Action",
      "propertyOrder": 211,
      "options": {
        "enum_titles": [
          "Create",
          "Update",
          "Remove",
          "Add to list"
        ],
        "dependencies": {
          "hubspot_object": "deal"
        }
      }
    },
    "call_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "call"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "communication_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "communication"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "email_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "email"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "line_item_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "line_item"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "meeting_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "meeting"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "note_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "note"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "postal_mail_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "postal_mail"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "product_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "product"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "quote_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "quote"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "task_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "task"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "tax_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "tax"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "ticket_action": {
      "enum": [
        "create",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "ticket"
        },
        "enum_titles": [
          "Create",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "association_action": {
      "enum": [
        "create",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "association"
        },
        "enum_titles": [
          "Create",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "secondary_email_action": {
      "enum": [
        "add",
        "update",
        "remove"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "secondary_email"
        },
        "enum_titles": [
          "Add",
          "Update",
          "Remove"
        ]
      },
      "propertyOrder": 211,
      "title": "Object Action",
      "type": "string"
    },
    "custom_object_action": {
      "enum": [
        "create"
      ],
      "options": {
        "dependencies": {
          "hubspot_object": "custom_object"
        },
        "enum_titles": [
          "Create"
        ]
      },
      "propertyOrder": 212,
      "title": "Object Action",
      "type": "string"
    },
    "custom_object_use_table_as_type": {
      "format": "checkbox",
       "default": false,
      "options": {
        "dependencies": {
          "hubspot_object": "custom_object"
        }
      },
      "propertyOrder": 213,
      "title": "Use table name as custom object type",
      "type": "boolean"
    }
  }
}


================================================
File: component_config/configSchema.json
================================================
{
   "type": "object",
   "title": "Authorization configuration",
   "properties": {
      "#private_app_token": {
         "type": "string",
         "title": "Private App Token",
         "description": "Your private app token. More info <a href=\"https://developers.hubspot.com/docs/api/migrate-an-api-key-integration-to-a-private-app\">here</a>",
         "format": "password",
         "propertyOrder": 200,
         "options": {
            "dependencies": {
               "authentication_type": [
                  "Private App Token"
               ]
            }
         }
      }
   }
}


================================================
File: component_config/configuration_description.md
================================================
### Requirement
Your Hubspot API token, for more information see here ([how-do-i-get-my-hubspot-api-key](https://knowledge.hubspot.com/integrations/how-do-i-get-my-hubspot-api-key))

### Configuration

The writer will fetch all input tables and convert each row into the required request format based on the requirements of the endpoint. Each writer will write to `one` endpoint. 

| Batch endpoint | Object | Object Action | Description | Required Columns |  
|-|-|-|-|-|  
| Yes | Contact | Create | A list of contact properties that you want to set for the new contact record. Each entry in the list must include the internal name of the property, and the value that you want to set for that property. Note: You must include at least one property for the new contact, or you will receive an error. | |
| No | Contact | Add to List | It is required to have both `vids` and `emails` columns in the input data file. The code will prioritize the values input for `vids`. Example, if there are inputs for both `emails` and `vids` in the same row, the code will prioritize `vids` pushing this value into the request and ignore the value in `emails`. Please note that you cannot manually add contacts to dynamic lists. To determine whether a list is dynamic or static, when you get a list, you will see a flag called dynamic that equates to true or false. Up to 500 total contacts can be added in a single request. | `list_id, vids, emails` |
| Yes | Contact | Update | This endpoint is used to update existing contacts, and it requires `vid` in the input data file. `vid` cannot be empty. The rest of the columns other than vid will be used as a request parameter to update the contact property. If either the property or the contact does not exist, the update request for that specific contact will fail. | `vid` | 
| No | Contact | Update by Email | Like the `Update Contact` endpoint, this endpoint is used to update existing contacts, and it requires `email` in the "inputdata" file. The rest of the columns will be used to update the contact's properties | `email` |  
| Yes | Contact | Remove from List | Please note that you cannot manually remove contacts from dynamic lists - they can only be updated by the contacts system based on the properties of the list itself. To determine whether a list is dynamic or static, when you get a list, you will see a flag called dynamic that equates to true or false. | `list_id, vids` |   
| Yes | Company | Create | Creates companies with defined properties if any are present. | `name` |  
| Yes | Company | Update | Updates companies identified by `company_id` with defined properties. | `company_id` |
| Yes | Company | Remove | Deletes companies identified by `company_id`. | `company_id` |
| No | Company | Add to List | Adds companies to lists | `list_id, vids` |
| No | Company | Remove from List | Removes companies from lists | `list_id, vids` |
| No | Contact List | Create | Creates contact lists. All list created via this component will `NOT` be dynamic. | `name` |
| No | Custom List | Create | Creates company/deal lists. Single table can contain multiple types indicated by column object_type. At the moment we support `company` and `deal`. All list created will have processing type `MANUAL`. | `name, object_type` |
| Yes | Deal | Create | Creates deals with defined properties if any are present. | `hubspot_owner_id` |  
| Yes | Deal | Update | Updates deals identified by `deal_id` with defined properties. | `deal_id` |
| Yes | Deal | Remove | Deletes deals identified by `deal_id`. | `deal_id` |
| No | Deal | Add to List | Adds deals to lists | `list_id, vids` |
| No | Deal | Remove from List | Removes deals from lists | `list_id, vids` |


================================================
File: component_config/stack_parameters.json
================================================
{}


================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: docs/objects_properties.md
================================================
# Available properties/columns of Hubspot standard objects 

## contact 

#### address 
#### annualrevenue 
#### associatedcompanyid 
#### associatedcompanylastupdated 
#### city 
#### closedate 
#### company 
#### company_size 
#### country 
#### createdate 
#### currentlyinworkflow 
#### date_of_birth 
#### days_to_close 
#### degree 
#### email 
#### engagements_last_meeting_booked 
#### engagements_last_meeting_booked_campaign 
#### engagements_last_meeting_booked_medium 
#### engagements_last_meeting_booked_source 
#### fax 
#### field_of_study 
#### first_conversion_date 
#### first_conversion_event_name 
#### first_deal_created_date 
#### firstname 
#### followercount 
#### gender 
#### graduation_date 
#### hs_additional_emails 
#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_contact_vids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_analytics_average_page_views 
#### hs_analytics_first_referrer 
#### hs_analytics_first_timestamp 
#### hs_analytics_first_touch_converting_campaign 
#### hs_analytics_first_url 
#### hs_analytics_first_visit_timestamp 
#### hs_analytics_last_referrer 
#### hs_analytics_last_timestamp 
#### hs_analytics_last_touch_converting_campaign 
#### hs_analytics_last_url 
#### hs_analytics_last_visit_timestamp 
#### hs_analytics_num_event_completions 
#### hs_analytics_num_page_views 
#### hs_analytics_num_visits 
#### hs_analytics_revenue 
#### hs_analytics_source 
#### hs_analytics_source_data_1 
#### hs_analytics_source_data_2 
#### hs_associated_target_accounts 
#### hs_avatar_filemanager_key 
#### hs_buying_role 
#### hs_calculated_form_submissions 
#### hs_calculated_merged_vids 
#### hs_calculated_mobile_number 
#### hs_calculated_phone_number 
#### hs_calculated_phone_number_area_code 
#### hs_calculated_phone_number_country_code 
#### hs_calculated_phone_number_region_code 
#### hs_clicked_linkedin_ad 
#### hs_contact_enrichment_opt_out 
#### hs_contact_enrichment_opt_out_timestamp 
#### hs_content_membership_email 
#### hs_content_membership_email_confirmed 
#### hs_content_membership_follow_up_enqueued_at 
#### hs_content_membership_notes 
#### hs_content_membership_registered_at 
#### hs_content_membership_registration_domain_sent_to 
#### hs_content_membership_registration_email_sent_at 
#### hs_content_membership_status 
#### hs_conversations_visitor_email 
#### hs_count_is_unworked 
#### hs_count_is_worked 
#### hs_country_region_code 
#### hs_created_by_conversations 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_currently_enrolled_in_prospecting_agent 
#### hs_data_privacy_ads_consent 
#### hs_date_entered_customer 
#### hs_date_entered_evangelist 
#### hs_date_entered_lead 
#### hs_date_entered_marketingqualifiedlead 
#### hs_date_entered_opportunity 
#### hs_date_entered_other 
#### hs_date_entered_salesqualifiedlead 
#### hs_date_entered_subscriber 
#### hs_date_exited_customer 
#### hs_date_exited_evangelist 
#### hs_date_exited_lead 
#### hs_date_exited_marketingqualifiedlead 
#### hs_date_exited_opportunity 
#### hs_date_exited_other 
#### hs_date_exited_salesqualifiedlead 
#### hs_date_exited_subscriber 
#### hs_document_last_revisited 
#### hs_email_bad_address 
#### hs_email_bounce 
#### hs_email_click 
#### hs_email_customer_quarantined_reason 
#### hs_email_delivered 
#### hs_email_domain 
#### hs_email_first_click_date 
#### hs_email_first_open_date 
#### hs_email_first_reply_date 
#### hs_email_first_send_date 
#### hs_email_hard_bounce_reason 
#### hs_email_hard_bounce_reason_enum 
#### hs_email_is_ineligible 
#### hs_email_last_click_date 
#### hs_email_last_email_name 
#### hs_email_last_open_date 
#### hs_email_last_reply_date 
#### hs_email_last_send_date 
#### hs_email_open 
#### hs_email_optout 
#### hs_email_optout_434720870 
#### hs_email_optout_434720871 
#### hs_email_quarantined 
#### hs_email_quarantined_reason 
#### hs_email_recipient_fatigue_recovery_time 
#### hs_email_replied 
#### hs_email_sends_since_last_engagement 
#### hs_emailconfirmationstatus 
#### hs_facebook_ad_clicked 
#### hs_facebook_click_id 
#### hs_facebookid 
#### hs_feedback_last_nps_follow_up 
#### hs_feedback_last_nps_rating 
#### hs_feedback_last_survey_date 
#### hs_feedback_show_nps_web_survey 
#### hs_first_engagement_object_id 
#### hs_first_order_closed_date 
#### hs_first_outreach_date 
#### hs_first_subscription_create_date 
#### hs_google_click_id 
#### hs_googleplusid 
#### hs_has_active_subscription 
#### hs_ip_timezone 
#### hs_is_contact 
#### hs_is_enriched 
#### hs_is_unworked 
#### hs_journey_stage 
#### hs_language 
#### hs_last_sales_activity_date 
#### hs_last_sales_activity_timestamp 
#### hs_last_sales_activity_type 
#### hs_lastmodifieddate 
#### hs_latest_disqualified_lead_date 
#### hs_latest_meeting_activity 
#### hs_latest_open_lead_date 
#### hs_latest_qualified_lead_date 
#### hs_latest_sequence_ended_date 
#### hs_latest_sequence_enrolled 
#### hs_latest_sequence_enrolled_date 
#### hs_latest_sequence_finished_date 
#### hs_latest_sequence_unenrolled_date 
#### hs_latest_source 
#### hs_latest_source_data_1 
#### hs_latest_source_data_2 
#### hs_latest_source_timestamp 
#### hs_latest_subscription_create_date 
#### hs_lead_status 
#### hs_legal_basis 
#### hs_lifecyclestage_customer_date 
#### hs_lifecyclestage_evangelist_date 
#### hs_lifecyclestage_lead_date 
#### hs_lifecyclestage_marketingqualifiedlead_date 
#### hs_lifecyclestage_opportunity_date 
#### hs_lifecyclestage_other_date 
#### hs_lifecyclestage_salesqualifiedlead_date 
#### hs_lifecyclestage_subscriber_date 
#### hs_linkedin_ad_clicked 
#### hs_linkedin_url 
#### hs_linkedinid 
#### hs_marketable_reason_id 
#### hs_marketable_reason_type 
#### hs_marketable_status 
#### hs_marketable_until_renewal 
#### hs_membership_has_accessed_private_content 
#### hs_membership_last_private_content_access_date 
#### hs_merged_object_ids 
#### hs_mobile_sdk_push_tokens 
#### hs_notes_last_activity 
#### hs_notes_next_activity 
#### hs_notes_next_activity_type 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_persona 
#### hs_pinned_engagement_id 
#### hs_pipeline 
#### hs_predictivecontactscore 
#### hs_predictivecontactscore_tmp 
#### hs_predictivecontactscore_v2 
#### hs_predictivecontactscorebucket 
#### hs_predictivescoringtier 
#### hs_predictivescoringtier_tmp 
#### hs_prospecting_agent_actively_enrolled_count 
#### hs_quarantined_emails 
#### hs_read_only 
#### hs_recent_closed_order_date 
#### hs_registered_member 
#### hs_registration_method 
#### hs_role 
#### hs_sa_first_engagement_date 
#### hs_sa_first_engagement_descr 
#### hs_sa_first_engagement_object_type 
#### hs_sales_email_last_clicked 
#### hs_sales_email_last_opened 
#### hs_sales_email_last_replied 
#### hs_searchable_calculated_international_mobile_number 
#### hs_searchable_calculated_international_phone_number 
#### hs_searchable_calculated_mobile_number 
#### hs_searchable_calculated_phone_number 
#### hs_seniority 
#### hs_sequences_actively_enrolled_count 
#### hs_sequences_enrolled_count 
#### hs_sequences_is_enrolled 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_social_facebook_clicks 
#### hs_social_google_plus_clicks 
#### hs_social_last_engagement 
#### hs_social_linkedin_clicks 
#### hs_social_num_broadcast_clicks 
#### hs_social_twitter_clicks 
#### hs_source_object_id 
#### hs_source_portal_id 
#### hs_state_code 
#### hs_sub_role 
#### hs_testpurge 
#### hs_testrollback 
#### hs_time_between_contact_creation_and_deal_close 
#### hs_time_between_contact_creation_and_deal_creation 
#### hs_time_in_customer 
#### hs_time_in_evangelist 
#### hs_time_in_lead 
#### hs_time_in_marketingqualifiedlead 
#### hs_time_in_opportunity 
#### hs_time_in_other 
#### hs_time_in_salesqualifiedlead 
#### hs_time_in_subscriber 
#### hs_time_to_first_engagement 
#### hs_time_to_move_from_lead_to_customer 
#### hs_time_to_move_from_marketingqualifiedlead_to_customer 
#### hs_time_to_move_from_opportunity_to_customer 
#### hs_time_to_move_from_salesqualifiedlead_to_customer 
#### hs_time_to_move_from_subscriber_to_customer 
#### hs_timezone 
#### hs_twitterid 
#### hs_unique_creation_key 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_v2_cumulative_time_in_customer 
#### hs_v2_cumulative_time_in_evangelist 
#### hs_v2_cumulative_time_in_lead 
#### hs_v2_cumulative_time_in_marketingqualifiedlead 
#### hs_v2_cumulative_time_in_opportunity 
#### hs_v2_cumulative_time_in_other 
#### hs_v2_cumulative_time_in_salesqualifiedlead 
#### hs_v2_cumulative_time_in_subscriber 
#### hs_v2_date_entered_customer 
#### hs_v2_date_entered_evangelist 
#### hs_v2_date_entered_lead 
#### hs_v2_date_entered_marketingqualifiedlead 
#### hs_v2_date_entered_opportunity 
#### hs_v2_date_entered_other 
#### hs_v2_date_entered_salesqualifiedlead 
#### hs_v2_date_entered_subscriber 
#### hs_v2_date_exited_customer 
#### hs_v2_date_exited_evangelist 
#### hs_v2_date_exited_lead 
#### hs_v2_date_exited_marketingqualifiedlead 
#### hs_v2_date_exited_opportunity 
#### hs_v2_date_exited_other 
#### hs_v2_date_exited_salesqualifiedlead 
#### hs_v2_date_exited_subscriber 
#### hs_v2_latest_time_in_customer 
#### hs_v2_latest_time_in_evangelist 
#### hs_v2_latest_time_in_lead 
#### hs_v2_latest_time_in_marketingqualifiedlead 
#### hs_v2_latest_time_in_opportunity 
#### hs_v2_latest_time_in_other 
#### hs_v2_latest_time_in_salesqualifiedlead 
#### hs_v2_latest_time_in_subscriber 
#### hs_was_imported 
#### hs_whatsapp_phone_number 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
#### hubspotscore 
#### industry 
#### ip_city 
#### ip_country 
#### ip_country_code 
#### ip_latlon 
#### ip_state 
#### ip_state_code 
#### ip_zipcode 
#### job_function 
#### jobtitle 
#### kloutscoregeneral 
#### lastmodifieddate 
#### lastname 
#### lifecyclestage 
#### linkedinbio 
#### linkedinconnections 
#### marital_status 
#### message 
#### military_status 
#### mobilephone 
#### notes_last_contacted 
#### notes_last_updated 
#### notes_next_activity_date 
#### num_associated_deals 
#### num_contacted_notes 
#### num_conversion_events 
#### num_notes 
#### num_unique_conversion_events 
#### numemployees 
#### owneremail 
#### ownername 
#### phone 
#### photo 
#### recent_conversion_date 
#### recent_conversion_event_name 
#### recent_deal_amount 
#### recent_deal_close_date 
#### relationship_status 
#### salutation 
#### school 
#### seniority 
#### start_date 
#### state 
#### surveymonkeyeventlastupdated 
#### total_revenue 
#### twitterbio 
#### twitterhandle 
#### twitterprofilephoto 
#### webinareventlastupdated 
#### website 
#### work_email 
#### zip 
## company 

#### about_us 
#### address 
#### address2 
#### annualrevenue 
#### city 
#### closedate 
#### country 
#### createdate 
#### days_to_close 
#### description 
#### domain 
#### engagements_last_meeting_booked 
#### engagements_last_meeting_booked_campaign 
#### engagements_last_meeting_booked_medium 
#### engagements_last_meeting_booked_source 
#### facebook_company_page 
#### facebookfans 
#### first_contact_createdate 
#### first_contact_createdate_timestamp_earliest_value_78b50eea 
#### first_conversion_date 
#### first_conversion_event_name 
#### first_deal_created_date 
#### founded_year 
#### googleplus_page 
#### hs_additional_domains 
#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_analytics_first_timestamp 
#### hs_analytics_first_touch_converting_campaign 
#### hs_analytics_first_visit_timestamp 
#### hs_analytics_last_timestamp 
#### hs_analytics_last_timestamp_timestamp_latest_value_4e16365a 
#### hs_analytics_last_touch_converting_campaign 
#### hs_analytics_last_touch_converting_campaign_timestamp_latest_value_81a64e30 
#### hs_analytics_last_visit_timestamp 
#### hs_analytics_last_visit_timestamp_timestamp_latest_value_999a0fce 
#### hs_analytics_latest_source 
#### hs_analytics_latest_source_data_1 
#### hs_analytics_latest_source_data_2 
#### hs_analytics_latest_source_timestamp 
#### hs_analytics_num_page_views 
#### hs_analytics_num_page_views_cardinality_sum_e46e85b0 
#### hs_analytics_num_visits 
#### hs_analytics_num_visits_cardinality_sum_53d952a6 
#### hs_analytics_source 
#### hs_analytics_source_data_1 
#### hs_analytics_source_data_2 
#### hs_annual_revenue_currency_code 
#### hs_avatar_filemanager_key 
#### hs_country_code 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_csm_sentiment 
#### hs_customer_success_ticket_sentiment 
#### hs_date_entered_customer 
#### hs_date_entered_evangelist 
#### hs_date_entered_lead 
#### hs_date_entered_marketingqualifiedlead 
#### hs_date_entered_opportunity 
#### hs_date_entered_other 
#### hs_date_entered_salesqualifiedlead 
#### hs_date_entered_subscriber 
#### hs_date_exited_customer 
#### hs_date_exited_evangelist 
#### hs_date_exited_lead 
#### hs_date_exited_marketingqualifiedlead 
#### hs_date_exited_opportunity 
#### hs_date_exited_other 
#### hs_date_exited_salesqualifiedlead 
#### hs_date_exited_subscriber 
#### hs_employee_range 
#### hs_ideal_customer_profile 
#### hs_industry_group 
#### hs_is_enriched 
#### hs_is_target_account 
#### hs_keywords 
#### hs_last_booked_meeting_date 
#### hs_last_logged_call_date 
#### hs_last_open_task_date 
#### hs_last_sales_activity_date 
#### hs_last_sales_activity_timestamp 
#### hs_last_sales_activity_type 
#### hs_lastmodifieddate 
#### hs_latest_createdate_of_active_subscriptions 
#### hs_latest_meeting_activity 
#### hs_lead_status 
#### hs_linkedin_handle 
#### hs_logo_url 
#### hs_merged_object_ids 
#### hs_notes_last_activity 
#### hs_notes_next_activity 
#### hs_notes_next_activity_type 
#### hs_num_blockers 
#### hs_num_child_companies 
#### hs_num_contacts_with_buying_roles 
#### hs_num_decision_makers 
#### hs_num_open_deals 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_parent_company_id 
#### hs_pinned_engagement_id 
#### hs_pipeline 
#### hs_predictivecontactscore_v2 
#### hs_predictivecontactscore_v2_next_max_max_d4e58c1e 
#### hs_quick_context 
#### hs_read_only 
#### hs_revenue_range 
#### hs_sales_email_last_replied 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_source_object_id 
#### hs_target_account 
#### hs_target_account_probability 
#### hs_target_account_recommendation_snooze_time 
#### hs_target_account_recommendation_state 
#### hs_time_in_customer 
#### hs_time_in_evangelist 
#### hs_time_in_lead 
#### hs_time_in_marketingqualifiedlead 
#### hs_time_in_opportunity 
#### hs_time_in_other 
#### hs_time_in_salesqualifiedlead 
#### hs_time_in_subscriber 
#### hs_total_deal_value 
#### hs_unique_creation_key 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
#### hubspotscore 
#### industry 
#### is_public 
#### lifecyclestage 
#### linkedin_company_page 
#### linkedinbio 
#### name 
#### notes_last_contacted 
#### notes_last_updated 
#### notes_next_activity_date 
#### num_associated_contacts 
#### num_associated_deals 
#### num_contacted_notes 
#### num_conversion_events 
#### num_conversion_events_cardinality_sum_d095f14b 
#### num_notes 
#### numberofemployees 
#### owneremail 
#### ownername 
#### phone 
#### recent_conversion_date 
#### recent_conversion_date_timestamp_latest_value_72856da1 
#### recent_conversion_event_name 
#### recent_conversion_event_name_timestamp_latest_value_66c820bf 
#### recent_deal_amount 
#### recent_deal_close_date 
#### state 
#### timezone 
#### total_money_raised 
#### total_revenue 
#### twitterbio 
#### twitterfollowers 
#### twitterhandle 
#### type 
#### web_technologies 
#### website 
#### zip 
## deal 

#### amount 
#### amount_in_home_currency 
#### closed_lost_reason 
#### closed_won_reason 
#### closedate 
#### createdate 
#### days_to_close 
#### deal_currency_code 
#### dealname 
#### dealstage 
#### dealtype 
#### description 
#### engagements_last_meeting_booked 
#### engagements_last_meeting_booked_campaign 
#### engagements_last_meeting_booked_medium 
#### engagements_last_meeting_booked_source 
#### hs_acv 
#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_collaborator_owner_ids 
#### hs_all_deal_split_owner_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_analytics_latest_source 
#### hs_analytics_latest_source_company 
#### hs_analytics_latest_source_contact 
#### hs_analytics_latest_source_data_1 
#### hs_analytics_latest_source_data_1_company 
#### hs_analytics_latest_source_data_1_contact 
#### hs_analytics_latest_source_data_2 
#### hs_analytics_latest_source_data_2_company 
#### hs_analytics_latest_source_data_2_contact 
#### hs_analytics_latest_source_timestamp 
#### hs_analytics_latest_source_timestamp_company 
#### hs_analytics_latest_source_timestamp_contact 
#### hs_analytics_source 
#### hs_analytics_source_data_1 
#### hs_analytics_source_data_2 
#### hs_arr 
#### hs_associated_deal_registration_deal_type 
#### hs_associated_deal_registration_product_interests 
#### hs_campaign 
#### hs_closed_amount 
#### hs_closed_amount_in_home_currency 
#### hs_closed_deal_close_date 
#### hs_closed_deal_create_date 
#### hs_closed_won_count 
#### hs_closed_won_date 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_date_entered_appointmentscheduled 
#### hs_date_entered_closedlost 
#### hs_date_entered_closedwon 
#### hs_date_entered_contractsent 
#### hs_date_entered_decisionmakerboughtin 
#### hs_date_entered_presentationscheduled 
#### hs_date_entered_qualifiedtobuy 
#### hs_date_exited_appointmentscheduled 
#### hs_date_exited_closedlost 
#### hs_date_exited_closedwon 
#### hs_date_exited_contractsent 
#### hs_date_exited_decisionmakerboughtin 
#### hs_date_exited_presentationscheduled 
#### hs_date_exited_qualifiedtobuy 
#### hs_days_to_close_raw 
#### hs_deal_amount_calculation_preference 
#### hs_deal_registration_mrr 
#### hs_deal_registration_mrr_currency_code 
#### hs_deal_score 
#### hs_deal_stage_probability 
#### hs_deal_stage_probability_shadow 
#### hs_exchange_rate 
#### hs_forecast_amount 
#### hs_forecast_probability 
#### hs_has_empty_conditional_stage_properties 
#### hs_is_active_shared_deal 
#### hs_is_closed 
#### hs_is_closed_count 
#### hs_is_closed_lost 
#### hs_is_closed_won 
#### hs_is_deal_split 
#### hs_is_in_first_deal_stage 
#### hs_is_open_count 
#### hs_lastmodifieddate 
#### hs_latest_approval_status 
#### hs_latest_approval_status_approval_id 
#### hs_latest_meeting_activity 
#### hs_likelihood_to_close 
#### hs_line_item_global_term_hs_discount_percentage 
#### hs_line_item_global_term_hs_discount_percentage_enabled 
#### hs_line_item_global_term_hs_recurring_billing_period 
#### hs_line_item_global_term_hs_recurring_billing_period_enabled 
#### hs_line_item_global_term_hs_recurring_billing_start_date 
#### hs_line_item_global_term_hs_recurring_billing_start_date_enabled 
#### hs_line_item_global_term_recurringbillingfrequency 
#### hs_line_item_global_term_recurringbillingfrequency_enabled 
#### hs_manual_forecast_category 
#### hs_merged_object_ids 
#### hs_mrr 
#### hs_next_step 
#### hs_next_step_updated_at 
#### hs_notes_last_activity 
#### hs_notes_next_activity 
#### hs_notes_next_activity_type 
#### hs_num_associated_active_deal_registrations 
#### hs_num_associated_deal_registrations 
#### hs_num_associated_deal_splits 
#### hs_num_of_associated_line_items 
#### hs_num_target_accounts 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_open_deal_create_date 
#### hs_pinned_engagement_id 
#### hs_predicted_amount 
#### hs_predicted_amount_in_home_currency 
#### hs_priority 
#### hs_projected_amount 
#### hs_projected_amount_in_home_currency 
#### hs_read_only 
#### hs_sales_email_last_replied 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_source_object_id 
#### hs_tag_ids 
#### hs_tcv 
#### hs_time_in_appointmentscheduled 
#### hs_time_in_closedlost 
#### hs_time_in_closedwon 
#### hs_time_in_contractsent 
#### hs_time_in_decisionmakerboughtin 
#### hs_time_in_presentationscheduled 
#### hs_time_in_qualifiedtobuy 
#### hs_unique_creation_key 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_v2_cumulative_time_in_appointmentscheduled 
#### hs_v2_cumulative_time_in_closedlost 
#### hs_v2_cumulative_time_in_closedwon 
#### hs_v2_cumulative_time_in_contractsent 
#### hs_v2_cumulative_time_in_decisionmakerboughtin 
#### hs_v2_cumulative_time_in_presentationscheduled 
#### hs_v2_cumulative_time_in_qualifiedtobuy 
#### hs_v2_date_entered_appointmentscheduled 
#### hs_v2_date_entered_closedlost 
#### hs_v2_date_entered_closedwon 
#### hs_v2_date_entered_contractsent 
#### hs_v2_date_entered_decisionmakerboughtin 
#### hs_v2_date_entered_presentationscheduled 
#### hs_v2_date_entered_qualifiedtobuy 
#### hs_v2_date_exited_appointmentscheduled 
#### hs_v2_date_exited_closedlost 
#### hs_v2_date_exited_closedwon 
#### hs_v2_date_exited_contractsent 
#### hs_v2_date_exited_decisionmakerboughtin 
#### hs_v2_date_exited_presentationscheduled 
#### hs_v2_date_exited_qualifiedtobuy 
#### hs_v2_latest_time_in_appointmentscheduled 
#### hs_v2_latest_time_in_closedlost 
#### hs_v2_latest_time_in_closedwon 
#### hs_v2_latest_time_in_contractsent 
#### hs_v2_latest_time_in_decisionmakerboughtin 
#### hs_v2_latest_time_in_presentationscheduled 
#### hs_v2_latest_time_in_qualifiedtobuy 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
#### notes_last_contacted 
#### notes_last_updated 
#### notes_next_activity_date 
#### num_associated_contacts 
#### num_contacted_notes 
#### num_notes 
#### pipeline 
## ticket 

#### closed_date 
#### content 
#### created_by 
#### createdate 
#### first_agent_reply_date 
#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_associated_contact_companies 
#### hs_all_associated_contact_emails 
#### hs_all_associated_contact_firstnames 
#### hs_all_associated_contact_lastnames 
#### hs_all_associated_contact_mobilephones 
#### hs_all_associated_contact_phones 
#### hs_all_conversation_mentions 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_applied_sla_rule_config_at 
#### hs_applied_sla_rule_config_id 
#### hs_assigned_team_ids 
#### hs_assignment_method 
#### hs_auto_generated_from_thread_id 
#### hs_conversations_originating_message_id 
#### hs_conversations_originating_thread_id 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_custom_inbox 
#### hs_date_entered_1 
#### hs_date_entered_2 
#### hs_date_entered_3 
#### hs_date_entered_4 
#### hs_date_exited_1 
#### hs_date_exited_2 
#### hs_date_exited_3 
#### hs_date_exited_4 
#### hs_email_subject 
#### hs_external_object_ids 
#### hs_feedback_last_ces_follow_up 
#### hs_feedback_last_ces_rating 
#### hs_feedback_last_survey_date 
#### hs_file_upload 
#### hs_first_agent_message_sent_at 
#### hs_help_desk_onboarding_ticket 
#### hs_helpdesk_sort_timestamp 
#### hs_in_helpdesk 
#### hs_inbox_id 
#### hs_is_latest_message_failed 
#### hs_is_latest_message_hidden_from_all 
#### hs_is_visible_in_help_desk 
#### hs_last_closed_date 
#### hs_last_email_activity 
#### hs_last_email_date 
#### hs_last_message_from_visitor 
#### hs_last_message_received_at 
#### hs_last_message_sent_at 
#### hs_lastactivitydate 
#### hs_lastcontacted 
#### hs_lastmodifieddate 
#### hs_latest_message_attachment_types 
#### hs_latest_message_is_forwarded_email 
#### hs_latest_message_is_thread_comment 
#### hs_latest_message_seen_by_agent_ids 
#### hs_latest_message_text 
#### hs_latest_message_visible_to_visitor 
#### hs_latest_message_visible_to_visitor_sent_at 
#### hs_merged_object_ids 
#### hs_most_relevant_sla_status 
#### hs_most_relevant_sla_type 
#### hs_msteams_message_id 
#### hs_nextactivitydate 
#### hs_notes_last_activity 
#### hs_notes_next_activity 
#### hs_notes_next_activity_type 
#### hs_num_associated_companies 
#### hs_num_associated_conversations 
#### hs_num_times_contacted 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_originating_channel_instance_id 
#### hs_originating_email_engagement_id 
#### hs_originating_generic_channel_id 
#### hs_pinned_engagement_id 
#### hs_pipeline 
#### hs_pipeline_stage 
#### hs_primary_company 
#### hs_primary_company_id 
#### hs_primary_company_name 
#### hs_read_only 
#### hs_resolution 
#### hs_sales_email_last_replied 
#### hs_seen_by_agent_ids 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_sla_operating_hours 
#### hs_source_object_id 
#### hs_tag_ids 
#### hs_thread_ids_to_restore 
#### hs_ticket_category 
#### hs_ticket_id 
#### hs_ticket_language_ai_tag 
#### hs_ticket_priority 
#### hs_time_in_1 
#### hs_time_in_2 
#### hs_time_in_3 
#### hs_time_in_4 
#### hs_time_to_close_in_operating_hours 
#### hs_time_to_close_sla_at 
#### hs_time_to_close_sla_status 
#### hs_time_to_first_response_in_operating_hours 
#### hs_time_to_first_response_sla_at 
#### hs_time_to_first_response_sla_status 
#### hs_time_to_next_response_sla_at 
#### hs_time_to_next_response_sla_status 
#### hs_unique_creation_key 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
#### last_engagement_date 
#### last_reply_date 
#### notes_last_contacted 
#### notes_last_updated 
#### notes_next_activity_date 
#### nps_follow_up_answer 
#### nps_follow_up_question_version 
#### nps_score 
#### num_contacted_notes 
#### num_notes 
#### source_ref 
#### source_thread_id 
#### source_type 
#### subject 
#### tags 
#### time_to_close 
#### time_to_first_agent_reply 
## product 

#### amount 
#### createdate 
#### description 
#### discount 
#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_avatar_filemanager_key 
#### hs_cost_of_goods_sold 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_discount_percentage 
#### hs_folder 
#### hs_folder_id 
#### hs_folder_name 
#### hs_images 
#### hs_lastmodifieddate 
#### hs_merged_object_ids 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_product_type 
#### hs_read_only 
#### hs_recurring_billing_period 
#### hs_recurring_billing_start_date 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_sku 
#### hs_tax_category 
#### hs_unique_creation_key 
#### hs_updated_by_user_id 
#### hs_url 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
#### name 
#### price 
#### quantity 
#### recurringbillingfrequency 
#### tax 
## quote 

#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_allowed_payment_methods 
#### hs_approver_id 
#### hs_archived 
#### hs_associated_deal_owner_id 
#### hs_collect_billing_address 
#### hs_collect_shipping_address 
#### hs_comments 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_currency 
#### hs_dealless_quote 
#### hs_display_tcv_on_quote 
#### hs_domain 
#### hs_esign_date 
#### hs_esign_enabled 
#### hs_esign_num_signers_completed 
#### hs_esign_num_signers_required 
#### hs_expiration_date 
#### hs_expiration_template_path 
#### hs_feedback 
#### hs_language 
#### hs_lastmodifieddate 
#### hs_legacy_stripe_migrated 
#### hs_line_item_global_term_hs_discount_percentage 
#### hs_line_item_global_term_hs_discount_percentage_enabled 
#### hs_line_item_global_term_hs_recurring_billing_period 
#### hs_line_item_global_term_hs_recurring_billing_period_enabled 
#### hs_line_item_global_term_hs_recurring_billing_start_date 
#### hs_line_item_global_term_hs_recurring_billing_start_date_enabled 
#### hs_line_item_global_term_recurringbillingfrequency 
#### hs_line_item_global_term_recurringbillingfrequency_enabled 
#### hs_locale 
#### hs_locked 
#### hs_logo_url 
#### hs_manually_signed 
#### hs_merged_object_ids 
#### hs_num_associated_deals 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_payment_date 
#### hs_payment_enabled 
#### hs_payment_status 
#### hs_payment_type 
#### hs_pdf_download_link 
#### hs_pdf_generation_status 
#### hs_primary_color 
#### hs_proposal_domain 
#### hs_proposal_slug 
#### hs_proposal_template_path 
#### hs_public_url_key 
#### hs_quote_amount 
#### hs_quote_link 
#### hs_quote_number 
#### hs_quote_owner_id 
#### hs_quote_total_preference 
#### hs_read_only 
#### hs_render_status 
#### hs_sales_email_last_replied 
#### hs_sender_company_address 
#### hs_sender_company_address2 
#### hs_sender_company_city 
#### hs_sender_company_country 
#### hs_sender_company_domain 
#### hs_sender_company_image_url 
#### hs_sender_company_name 
#### hs_sender_company_state 
#### hs_sender_company_zip 
#### hs_sender_email 
#### hs_sender_firstname 
#### hs_sender_image_url 
#### hs_sender_jobtitle 
#### hs_sender_lastname 
#### hs_sender_phone 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_show_countersignature_box 
#### hs_show_signature_box 
#### hs_sign_status 
#### hs_slug 
#### hs_status 
#### hs_store_payment_method_at_checkout 
#### hs_tcv 
#### hs_template 
#### hs_template_type 
#### hs_terms 
#### hs_test_mode 
#### hs_timezone 
#### hs_title 
#### hs_unique_creation_key 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
#### notes_last_contacted 
#### notes_last_updated 
#### notes_next_activity_date 
#### num_contacted_notes 
#### num_notes 
## line_item 

#### amount 
#### createdate 
#### description 
#### discount 
#### hs_acv 
#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_allow_buyer_selected_quantity 
#### hs_arr 
#### hs_auto_tax_amount 
#### hs_billing_period_end_date 
#### hs_billing_period_start_date 
#### hs_billing_start_delay_days 
#### hs_billing_start_delay_months 
#### hs_billing_start_delay_type 
#### hs_buyer_selected_quantity_max 
#### hs_buyer_selected_quantity_min 
#### hs_cost_of_goods_sold 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_discount_percentage 
#### hs_external_id 
#### hs_images 
#### hs_is_editable_price 
#### hs_is_optional 
#### hs_lastmodifieddate 
#### hs_line_item_currency_code 
#### hs_margin 
#### hs_margin_acv 
#### hs_margin_arr 
#### hs_margin_mrr 
#### hs_margin_tcv 
#### hs_merged_object_ids 
#### hs_mrr 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_position_on_quote 
#### hs_post_tax_amount 
#### hs_pre_discount_amount 
#### hs_product_id 
#### hs_product_type 
#### hs_read_only 
#### hs_recurring_billing_end_date 
#### hs_recurring_billing_number_of_payments 
#### hs_recurring_billing_period 
#### hs_recurring_billing_start_date 
#### hs_recurring_billing_terms 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_sku 
#### hs_sync_amount 
#### hs_tax_amount 
#### hs_tax_category 
#### hs_tax_label 
#### hs_tax_rate 
#### hs_tax_rate_group_id 
#### hs_tcv 
#### hs_term_in_months 
#### hs_total_discount 
#### hs_unique_creation_key 
#### hs_updated_by_user_id 
#### hs_url 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_variant_id 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
#### name 
#### price 
#### quantity 
#### recurringbillingfrequency 
#### tax 
## tax 

#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_label 
#### hs_lastmodifieddate 
#### hs_merged_object_ids 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_read_only 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_sort_order 
#### hs_type 
#### hs_unique_creation_key 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_value 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
## call 

#### hs_activity_type 
#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_at_mentioned_owner_ids 
#### hs_attachment_ids 
#### hs_body_preview 
#### hs_body_preview_html 
#### hs_body_preview_is_truncated 
#### hs_call_app_id 
#### hs_call_authed_url_provider 
#### hs_call_body 
#### hs_call_callee_object_id 
#### hs_call_callee_object_type 
#### hs_call_deal_stage_during_call 
#### hs_call_direction 
#### hs_call_disposition 
#### hs_call_duration 
#### hs_call_external_account_id 
#### hs_call_external_id 
#### hs_call_from_number 
#### hs_call_from_number_nickname 
#### hs_call_has_transcript 
#### hs_call_has_voicemail 
#### hs_call_meeting_id 
#### hs_call_ms_teams_payload 
#### hs_call_primary_deal 
#### hs_call_recording_duration 
#### hs_call_recording_url 
#### hs_call_source 
#### hs_call_status 
#### hs_call_suggested_next_actions 
#### hs_call_summary 
#### hs_call_summary_execution_id 
#### hs_call_title 
#### hs_call_to_number 
#### hs_call_to_number_nickname 
#### hs_call_transcript_audio_num_channels 
#### hs_call_transcript_tracked_terms 
#### hs_call_transcription_id 
#### hs_call_video_meeting_type 
#### hs_call_video_recording_url 
#### hs_call_zoom_meeting_uuid 
#### hs_calls_service_call_id 
#### hs_connected_count 
#### hs_created_by 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_engagement_source 
#### hs_engagement_source_id 
#### hs_follow_up_action 
#### hs_gdpr_deleted 
#### hs_lastmodifieddate 
#### hs_merged_object_ids 
#### hs_modified_by 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_product_name 
#### hs_queue_membership_ids 
#### hs_read_only 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_timestamp 
#### hs_unique_creation_key 
#### hs_unique_id 
#### hs_unknown_visitor_conversation 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_voicemail_count 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
## communication 

#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_at_mentioned_owner_ids 
#### hs_attachment_ids 
#### hs_body_preview 
#### hs_body_preview_html 
#### hs_body_preview_is_truncated 
#### hs_communication_body 
#### hs_communication_channel_type 
#### hs_communication_conversation_associations_synced_at 
#### hs_communication_conversation_object_id 
#### hs_communication_conversations_channel_ids 
#### hs_communication_conversations_channel_instance_ids 
#### hs_communication_conversations_first_message_at 
#### hs_communication_conversations_thread_id 
#### hs_communication_logged_from 
#### hs_created_by 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_engagement_source 
#### hs_engagement_source_id 
#### hs_gdpr_deleted 
#### hs_lastmodifieddate 
#### hs_merged_object_ids 
#### hs_modified_by 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_read_only 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_timestamp 
#### hs_unique_creation_key 
#### hs_unique_id 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
## email 

#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_at_mentioned_owner_ids 
#### hs_attachment_ids 
#### hs_body_preview 
#### hs_body_preview_html 
#### hs_body_preview_is_truncated 
#### hs_created_by 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_direction_and_unique_id 
#### hs_email_associated_contact_id 
#### hs_email_attached_video_id 
#### hs_email_attached_video_name 
#### hs_email_attached_video_opened 
#### hs_email_attached_video_watched 
#### hs_email_bcc_email 
#### hs_email_bcc_firstname 
#### hs_email_bcc_lastname 
#### hs_email_bcc_raw 
#### hs_email_bounce_error_detail_message 
#### hs_email_bounce_error_detail_status_code 
#### hs_email_cc_email 
#### hs_email_cc_firstname 
#### hs_email_cc_lastname 
#### hs_email_cc_raw 
#### hs_email_click_count 
#### hs_email_click_rate 
#### hs_email_direction 
#### hs_email_encoded_email_associations_request 
#### hs_email_error_message 
#### hs_email_facsimile_send_id 
#### hs_email_from_email 
#### hs_email_from_firstname 
#### hs_email_from_lastname 
#### hs_email_from_raw 
#### hs_email_has_inline_images_stripped 
#### hs_email_headers 
#### hs_email_html 
#### hs_email_logged_from 
#### hs_email_media_processing_status 
#### hs_email_member_of_forwarded_subthread 
#### hs_email_message_id 
#### hs_email_migrated_via_portal_data_migration 
#### hs_email_ms_teams_payload 
#### hs_email_open_count 
#### hs_email_open_rate 
#### hs_email_pending_inline_image_ids 
#### hs_email_post_send_status 
#### hs_email_recipient_drop_reasons 
#### hs_email_reply_count 
#### hs_email_reply_rate 
#### hs_email_send_event_id 
#### hs_email_send_event_id_created 
#### hs_email_sender_email 
#### hs_email_sender_firstname 
#### hs_email_sender_lastname 
#### hs_email_sender_raw 
#### hs_email_sent_count 
#### hs_email_sent_via 
#### hs_email_status 
#### hs_email_stripped_attachment_count 
#### hs_email_subject 
#### hs_email_text 
#### hs_email_thread_id 
#### hs_email_thread_summary 
#### hs_email_to_email 
#### hs_email_to_firstname 
#### hs_email_to_lastname 
#### hs_email_to_raw 
#### hs_email_tracker_key 
#### hs_email_validation_skipped 
#### hs_engagement_source 
#### hs_engagement_source_id 
#### hs_follow_up_action 
#### hs_gdpr_deleted 
#### hs_incoming_email_is_out_of_office 
#### hs_lastmodifieddate 
#### hs_merged_object_ids 
#### hs_modified_by 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_owner_ids_bcc 
#### hs_owner_ids_cc 
#### hs_owner_ids_from 
#### hs_owner_ids_to 
#### hs_product_name 
#### hs_queue_membership_ids 
#### hs_read_only 
#### hs_scs_association_status 
#### hs_scs_audit_id 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_timestamp 
#### hs_unique_creation_key 
#### hs_unique_id 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
## meeting 

#### hs_activity_type 
#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_at_mentioned_owner_ids 
#### hs_attachment_ids 
#### hs_attendee_owner_ids 
#### hs_body_preview 
#### hs_body_preview_html 
#### hs_body_preview_is_truncated 
#### hs_booking_instance_id 
#### hs_contact_first_outreach_date 
#### hs_created_by 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_engagement_source 
#### hs_engagement_source_id 
#### hs_external_calendar_id 
#### hs_follow_up_action 
#### hs_follow_up_tasks_remaining 
#### hs_gdpr_deleted 
#### hs_guest_emails 
#### hs_i_cal_uid 
#### hs_include_description_in_reminder 
#### hs_internal_meeting_notes 
#### hs_lastmodifieddate 
#### hs_meeting_body 
#### hs_meeting_calendar_event_hash 
#### hs_meeting_change_id 
#### hs_meeting_created_from_link_id 
#### hs_meeting_end_time 
#### hs_meeting_external_url 
#### hs_meeting_location 
#### hs_meeting_location_type 
#### hs_meeting_ms_teams_payload 
#### hs_meeting_outcome 
#### hs_meeting_payments_session_id 
#### hs_meeting_pre_meeting_prospect_reminders 
#### hs_meeting_source 
#### hs_meeting_source_id 
#### hs_meeting_start_time 
#### hs_meeting_title 
#### hs_meeting_web_conference_meeting_id 
#### hs_merged_object_ids 
#### hs_modified_by 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_outcome_canceled_count 
#### hs_outcome_completed_count 
#### hs_outcome_no_show_count 
#### hs_outcome_rescheduled_count 
#### hs_outcome_scheduled_count 
#### hs_product_name 
#### hs_queue_membership_ids 
#### hs_read_only 
#### hs_roster_object_coordinates 
#### hs_scheduled_tasks 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_time_to_book_meeting_from_first_contact 
#### hs_timestamp 
#### hs_timezone 
#### hs_unique_creation_key 
#### hs_unique_id 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_video_conference_url 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
## note 

#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_at_mentioned_owner_ids 
#### hs_attachment_ids 
#### hs_body_preview 
#### hs_body_preview_html 
#### hs_body_preview_is_truncated 
#### hs_created_by 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_engagement_source 
#### hs_engagement_source_id 
#### hs_follow_up_action 
#### hs_gdpr_deleted 
#### hs_lastmodifieddate 
#### hs_merged_object_ids 
#### hs_modified_by 
#### hs_note_body 
#### hs_note_ms_teams_payload 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_product_name 
#### hs_queue_membership_ids 
#### hs_read_only 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_timestamp 
#### hs_unique_creation_key 
#### hs_unique_id 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
## postal_mail 

#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_at_mentioned_owner_ids 
#### hs_attachment_ids 
#### hs_body_preview 
#### hs_body_preview_html 
#### hs_body_preview_is_truncated 
#### hs_created_by 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_engagement_source 
#### hs_engagement_source_id 
#### hs_gdpr_deleted 
#### hs_lastmodifieddate 
#### hs_merged_object_ids 
#### hs_modified_by 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_postal_mail_body 
#### hs_postal_mail_type 
#### hs_queue_membership_ids 
#### hs_read_only 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_timestamp 
#### hs_unique_creation_key 
#### hs_unique_id 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 
## task 

#### hs_all_accessible_team_ids 
#### hs_all_assigned_business_unit_ids 
#### hs_all_owner_ids 
#### hs_all_team_ids 
#### hs_at_mentioned_owner_ids 
#### hs_attachment_ids 
#### hs_body_preview 
#### hs_body_preview_html 
#### hs_body_preview_is_truncated 
#### hs_calendar_event_id 
#### hs_created_by 
#### hs_created_by_user_id 
#### hs_createdate 
#### hs_date_entered_60b5c368_04c4_4d32_9b4a_457e159f49b7_13292096 
#### hs_date_entered_61bafb31_e7fa_46ed_aaa9_1322438d6e67_1866552342 
#### hs_date_entered_af0e6a5c_2ea3_4c72_b69f_7c6cb3fdb591_1652950531 
#### hs_date_entered_dd5826e4_c976_4654_a527_b59ada542e52_2144133616 
#### hs_date_entered_fc8148fb_3a2d_4b59_834e_69b7859347cb_1813133675 
#### hs_date_exited_60b5c368_04c4_4d32_9b4a_457e159f49b7_13292096 
#### hs_date_exited_61bafb31_e7fa_46ed_aaa9_1322438d6e67_1866552342 
#### hs_date_exited_af0e6a5c_2ea3_4c72_b69f_7c6cb3fdb591_1652950531 
#### hs_date_exited_dd5826e4_c976_4654_a527_b59ada542e52_2144133616 
#### hs_date_exited_fc8148fb_3a2d_4b59_834e_69b7859347cb_1813133675 
#### hs_engagement_source 
#### hs_engagement_source_id 
#### hs_follow_up_action 
#### hs_gdpr_deleted 
#### hs_lastmodifieddate 
#### hs_marketing_task_category 
#### hs_marketing_task_category_id 
#### hs_merged_object_ids 
#### hs_modified_by 
#### hs_msteams_message_id 
#### hs_object_id 
#### hs_object_source 
#### hs_object_source_detail_1 
#### hs_object_source_detail_2 
#### hs_object_source_detail_3 
#### hs_object_source_id 
#### hs_object_source_label 
#### hs_object_source_user_id 
#### hs_pipeline 
#### hs_pipeline_stage 
#### hs_product_name 
#### hs_queue_membership_ids 
#### hs_read_only 
#### hs_repeat_status 
#### hs_scheduled_tasks 
#### hs_shared_team_ids 
#### hs_shared_user_ids 
#### hs_task_body 
#### hs_task_campaign_guid 
#### hs_task_completion_count 
#### hs_task_completion_date 
#### hs_task_contact_timezone 
#### hs_task_family 
#### hs_task_for_object_type 
#### hs_task_is_all_day 
#### hs_task_is_completed 
#### hs_task_is_completed_call 
#### hs_task_is_completed_email 
#### hs_task_is_completed_linked_in 
#### hs_task_is_completed_sequence 
#### hs_task_is_overdue 
#### hs_task_is_past_due_date 
#### hs_task_last_contact_outreach 
#### hs_task_last_sales_activity_timestamp 
#### hs_task_missed_due_date 
#### hs_task_missed_due_date_count 
#### hs_task_ms_teams_payload 
#### hs_task_priority 
#### hs_task_probability_to_complete 
#### hs_task_relative_reminders 
#### hs_task_reminders 
#### hs_task_repeat_interval 
#### hs_task_send_default_reminder 
#### hs_task_sequence_enrollment_active 
#### hs_task_sequence_step_enrollment_id 
#### hs_task_sequence_step_order 
#### hs_task_status 
#### hs_task_subject 
#### hs_task_template_id 
#### hs_task_type 
#### hs_time_in_60b5c368_04c4_4d32_9b4a_457e159f49b7_13292096 
#### hs_time_in_61bafb31_e7fa_46ed_aaa9_1322438d6e67_1866552342 
#### hs_time_in_af0e6a5c_2ea3_4c72_b69f_7c6cb3fdb591_1652950531 
#### hs_time_in_dd5826e4_c976_4654_a527_b59ada542e52_2144133616 
#### hs_time_in_fc8148fb_3a2d_4b59_834e_69b7859347cb_1813133675 
#### hs_timestamp 
#### hs_unique_creation_key 
#### hs_unique_id 
#### hs_updated_by_user_id 
#### hs_user_ids_of_all_notification_followers 
#### hs_user_ids_of_all_notification_unfollowers 
#### hs_user_ids_of_all_owners 
#### hs_was_imported 
#### hubspot_owner_assigneddate 
#### hubspot_owner_id 
#### hubspot_team_id 




================================================
File: example/component.py
================================================
'''
Template Component main class.

'''

import logging
import os
import sys
from datetime import datetime
from pathlib import Path

from kbc.env_handler import KBCEnvHandler
from kbc.result import KBCTableDef
from kbc.result import ResultWriter

# global constants'
SUPPORTED_ENDPOINTS = ['companies', 'deals']

# configuration variables
KEY_API_TOKEN = '#api_token'
KEY_PERIOD_FROM = 'period_from'
KEY_ENDPOINTS = 'endpoints'

KEY_COMPANY_PROPERTIES = 'company_properties'
KEY_DEAL_PROPERTIES = 'deal_properties'

# #### Keep for debug
KEY_STDLOG = 'stdlogging'
KEY_DEBUG = 'debug'
MANDATORY_PARS = [KEY_ENDPOINTS, KEY_API_TOKEN]
MANDATORY_IMAGE_PARS = []

# for easier local project setup
DEFAULT_DATA_DIR = Path(__file__).resolve().parent.parent.joinpath('data').as_posix() \
    if not os.environ.get('KBC_DATADIR') else None

APP_VERSION = '0.0.1'


class Component(KBCEnvHandler):

    def __init__(self, debug=False):
        KBCEnvHandler.__init__(self, MANDATORY_PARS, log_level=logging.DEBUG if debug else logging.INFO,
                               data_path=DEFAULT_DATA_DIR)
        # override debug from config
        if self.cfg_params.get(KEY_DEBUG):
            debug = True
        if debug:
            logging.getLogger().setLevel(logging.DEBUG)
        logging.info('Running version %s', APP_VERSION)
        logging.info('Loading configuration...')

        try:
            self.validate_config()
            self.validate_image_parameters(MANDATORY_IMAGE_PARS)
        except ValueError as e:
            logging.exception(e)
            exit(1)
        # ####### EXAMPLE TO REMOVE
        # intialize instance parameteres
        token = self.cfg_params[KEY_API_TOKEN]
        self.hs_client = HubspotClient(token)
        # ####### EXAMPLE TO REMOVE END

    def run(self):
        '''
        Main execution code
        '''
        params = self.cfg_params  # noqa

        # ####### EXAMPLE TO REMOVE
        if params.get(KEY_PERIOD_FROM):
            start_date, end_date = self.get_date_period_converted(params.get(KEY_PERIOD_FROM),
                                                                  datetime.utcnow().strftime('%Y-%m-%d'))
            recent = True
        else:
            start_date = None
            recent = False

        endpoints = params.get(KEY_ENDPOINTS, SUPPORTED_ENDPOINTS)

        if 'companies' in endpoints:
            logging.info('Extracting Companies')
            self.extract_companies(recent)

        if 'deals' in endpoints:
            logging.info("Extracting deals")
            self.extract_deals(start_date)

        logging.info("Extraction finished")
        # ####### EXAMPLE TO REMOVE END

    # ####### EXAMPLE TO REMOVE (ALL BELOW UNTIL END MARKER)
    def extract_deals(self, start_time):
        logging.info('Extracting Companies from HubSpot CRM')
        fields = self._parse_props(self.cfg_params.get(KEY_DEAL_PROPERTIES))

        if not fields:
            expected_deal_cols = hs_client.DEAL_DEFAULT_COLS + self._build_property_cols(
                hs_client.DEAL_DEFAULT_PROPERTIES)
        else:
            expected_deal_cols = hs_client.DEAL_DEFAULT_COLS + self._build_property_cols(fields)

        deal_writer = DealsWriter(self.tables_out_path, expected_deal_cols)

        self._get_n_process_results(self.hs_client.get_deals, deal_writer, start_time, fields)

    def extract_companies(self, recent):
        fields = self._parse_props(self.cfg_params.get(KEY_COMPANY_PROPERTIES))
        if not fields:
            expected_company_cols = hs_client.COMPANIES_DEFAULT_COLS + self._build_property_cols(
                hs_client.COMPANY_DEFAULT_PROPERTIES)
        else:
            expected_company_cols = hs_client.COMPANIES_DEFAULT_COLS + self._build_property_cols(fields)
        # table def
        companies_table = KBCTableDef(name='companies', columns=expected_company_cols, pk=hs_result.COMPANY_PK)
        # writer setup
        comp_writer = ResultWriter(result_dir_path=self.tables_out_path, table_def=companies_table, fix_headers=True)
        self._get_n_process_results(self.hs_client.get_companies, comp_writer, recent, fields)

    def _parse_props(self, param):
        """
        Helper method to prepare dataset parameters query.

        :param param:
        :return:
        """
        cols = []
        if param:
            cols = [p.strip() for p in param.split(",")]
        return cols

    def _get_n_process_results(self, ds_getter, writer, *fpars):
        """
               Generic method to get simple objects
               :param ds_getter: dataset method to call
               :param writer: result writer instance
               :param *fpars: positional arguments for the ds_getter function.
               :return:
               """
        with writer:
            for res in ds_getter(*fpars):
                if isinstance(res, list):
                    writer.write_all(res)
                else:
                    writer.write(res)

        # store manifest
        logging.info("Storing manifest files.")
        self.create_manifests(writer.collect_results())

    def _build_property_cols(self, properties):
        # get flattened property cols
        prop_cols = []
        for p in properties:
            prop_cols.append('properties.' + p + '.source')
            prop_cols.append('properties.' + p + '.sourceId')
            prop_cols.append('properties.' + p + '.timestamp')
            prop_cols.append('properties.' + p + '.value')
            prop_cols.append('properties.' + p + '.versions')
        return prop_cols


# ####### EXAMPLE TO REMOVE END

"""
        Main entrypoint
"""
if __name__ == "__main__":
    if len(sys.argv) > 1:
        debug_arg = sys.argv[1]
    else:
        debug_arg = False
    try:
        comp = Component(debug_arg)
        comp.run()
    except Exception as e:
        logging.exception(e)
        exit(1)



================================================
File: example/component_config/component_long_description.md
================================================
Testing functional sample extractor for purposes of the python component template. 
Implements partial Hubspot extractor using the public sandbox token.


================================================
File: example/component_config/component_short_description.md
================================================
Testing functional sample extractor for purposes of the python component template. 


================================================
File: example/component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "extractor configuration",
  "required": [
    "project_id",
    "#api_token",
    "period_from",
    "period_to",
    "relative_period",
    "metrics",
    "backfill_mode"
  ],
  "properties": {
    "project_id": {
      "type": "string",
      "title": "Project ID",
      "propertyOrder": 100
    },
    "#api_token": {
      "type": "string",
      "title": "API token",
      "format": "password",
      "propertyOrder": 200
    },
    "period_from": {
      "type": "string",
      "format": "date",
      "title": "Period from date [including]",
      "propertyOrder": 300
    },
    "period_to": {
      "type": "string",
      "format": "date",
      "title": "Period to date [excluding]",
      "propertyOrder": 400
    },
    "relative_period": {
      "type": "string",
      "title": "Relative period from now (utc)",
      "description": "Relative period in format: '5 hours ago', 'yesterday','3 days ago', '4 months ago', '2 years ago', 'today'. Overrides `from` and `to` parameters.",
      "propertyOrder": 450
    },
    "backfill_mode": {
      "type": "number",
      "title": "Backfill mode",
      "description": "If backfill mode is enabled, each consecutive run of the component will continue from the end of the last run period, until current date is reached. The From and To date parameters are used to define Start date of the back-fill and also relative window of each run.",
      "propertyOrder": 455,
      "enum": [
        0,
        1
      ],
      "default": 0,
      "options": {
        "enum_titles": [
          "No",
          "Yes"
        ]
      }
    },
    "metrics": {
      "type": "array",
      "title": "Example array of group of string objects",
      "description": "Group of string objects alligned in grid",
      "items": {
        "format": "grid",
        "type": "object",
        "title": "Items of array, multiple objects",
        "required": [
          "metric",
          "modificator"
        ],
        "properties": {
          "metric": {
            "enum": [
              "NoVt",
              "TotTm",
              "NoPV"
            ],
            "type": "string",
            "default": "NoPV",
            "title": "Metric",
            "description": "First object, enum of strings",
            "propertyOrder": 1000
          },
          "modificator": {
            "enum": [
              "none",
              "change",
              "share",
              "share_in_total",
              "change_in_percentage"
            ],
            "type": "string",
            "title": "Mdificator",
            "description": "Second object",
            "default": "daily",
            "propertyOrder": 2000
          }
        }
      }
    }
  }
}



================================================
File: example/component_config/configuration_description.md
================================================
Testing configuration description.


================================================
File: example/component_config/stack_parameters.json
================================================
{}


================================================
File: example/component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: example/component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
File: example/component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: example/component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: example/component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: example/component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: example/component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: example/data/adasd.js
================================================
{
	"storage": {
		"input": {
			"files": [],
			"tables": [{
					"source": "in.c-test.test",
					"destination": "test.csv",
					"limit": 50,
					"columns": [],
					"where_values": [],
					"where_operator": "eq"
				}
			]
		},
		"output": {
			"files": [],
			"tables": []
		}
	},
	"parameters": {
		"#api_token": "demo",
		"period_from": "yesterday",
		"endpoints": [
			"deals",
			"companies"
		],
		"company_properties": "",
		"deal_properties": "",
		"debug": true
	},
	"image_parameters": {
		"syrup_url": "https://syrup.keboola.com/"
	},
	"authorization": {
		"oauth_api": {
			"id": "OAUTH_API_ID",
			"credentials": {
				"id": "main",
				"authorizedFor": "Myself",
				"creator": {
					"id": "1234",
					"description": "me@keboola.com"
				},
				"created": "2016-01-31 00:13:30",
				"#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
				"oauthVersion": "2.0",
				"appKey": "000000004C184A49",
				"#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
			}
		}
	}
}



================================================
File: example/data/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"XXXX_REFRESH_TOKEN\"}",
        "oauthVersion": "2.0",
        "appKey": "1234567890",
        "#appSecret": "APP-SECRET"
      }
    }
  }
}



================================================
File: example/data/in/state.json
================================================
{"data_delta": "10222018"}


================================================
File: example/data/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: example/data/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: example/data/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: example/data/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: example/data/out/tables/companies.csv
================================================
additionalDomains,companyId,isDeleted,mergeAudits,portalId,properties.about_us.source,properties.about_us.sourceId,properties.about_us.timestamp,properties.about_us.value,properties.about_us.versions,properties.annualrevenue.source,properties.annualrevenue.sourceId,properties.annualrevenue.timestamp,properties.annualrevenue.value,properties.annualrevenue.versions,properties.city.source,properties.city.sourceId,properties.city.timestamp,properties.city.value,properties.city.versions,properties.country.source,properties.country.sourceId,properties.country.timestamp,properties.country.value,properties.country.versions,properties.createdate.source,properties.createdate.sourceId,properties.createdate.timestamp,properties.createdate.value,properties.createdate.versions,properties.description.source,properties.description.sourceId,properties.description.timestamp,properties.description.value,properties.description.versions,properties.facebook_company_page.source,properties.facebook_company_page.sourceId,properties.facebook_company_page.timestamp,properties.facebook_company_page.value,properties.facebook_company_page.versions,properties.founded_year.source,properties.founded_year.sourceId,properties.founded_year.timestamp,properties.founded_year.value,properties.founded_year.versions,properties.hs_lastmodifieddate.source,properties.hs_lastmodifieddate.sourceId,properties.hs_lastmodifieddate.timestamp,properties.hs_lastmodifieddate.value,properties.hs_lastmodifieddate.versions,properties.hs_lead_status.source,properties.hs_lead_status.sourceId,properties.hs_lead_status.timestamp,properties.hs_lead_status.value,properties.hs_lead_status.versions,properties.hubspot_owner_id.source,properties.hubspot_owner_id.sourceId,properties.hubspot_owner_id.timestamp,properties.hubspot_owner_id.value,properties.hubspot_owner_id.versions,properties.industry.source,properties.industry.sourceId,properties.industry.timestamp,properties.industry.value,properties.industry.versions,properties.linkedin_company_page.source,properties.linkedin_company_page.sourceId,properties.linkedin_company_page.timestamp,properties.linkedin_company_page.value,properties.linkedin_company_page.versions,properties.linkedinbio.source,properties.linkedinbio.sourceId,properties.linkedinbio.timestamp,properties.linkedinbio.value,properties.linkedinbio.versions,properties.name.source,properties.name.sourceId,properties.name.timestamp,properties.name.value,properties.name.versions,properties.notes_last_updated.source,properties.notes_last_updated.sourceId,properties.notes_last_updated.timestamp,properties.notes_last_updated.value,properties.notes_last_updated.versions,properties.numberofemployees.source,properties.numberofemployees.sourceId,properties.numberofemployees.timestamp,properties.numberofemployees.value,properties.numberofemployees.versions,properties.phone.source,properties.phone.sourceId,properties.phone.timestamp,properties.phone.value,properties.phone.versions,properties.twitterhandle.source,properties.twitterhandle.sourceId,properties.twitterhandle.timestamp,properties.twitterhandle.value,properties.twitterhandle.versions,properties.website.source,properties.website.sourceId,properties.website.timestamp,properties.website.value,properties.website.versions,stateChanges
[],527830518,False,[],62515,API,CompaniesBatchMutation,1557130626732,Thumbs up!,"[{'name': 'about_us', 'value': 'Thumbs up!', 'timestamp': 1557130626732, 'sourceId': 'CompaniesBatchMutation', 'source': 'API', 'sourceVid': [], 'requestId': 'bd52152d-fd4b-4b1a-ae9e-0da7a5f9e501'}]",BIDEN,BidenPropertyMappings,1503560053211,1000000000,"[{'name': 'annualrevenue', 'value': '1000000000', 'timestamp': 1503560053211, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1569396065226,New York,"[{'name': 'city', 'value': 'New York', 'timestamp': 1569396065226, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1503560053211,United States,"[{'name': 'country', 'value': 'United States', 'timestamp': 1503560053211, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",API,API,1503560052902,1503560052902,"[{'name': 'createdate', 'value': '1503560052902', 'timestamp': 1503560052902, 'sourceId': 'API', 'source': 'API', 'sourceVid': []}]",API,,1503560052902,A company description,"[{'name': 'description', 'value': 'A company description', 'timestamp': 1503560052902, 'source': 'API', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1503560053211,https://www.facebook.com/ABCNetwork,"[{'name': 'facebook_company_page', 'value': 'https://www.facebook.com/ABCNetwork', 'timestamp': 1503560053211, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1552584354789,1923,"[{'name': 'founded_year', 'value': '1923', 'timestamp': 1552584354789, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",CALCULATED,,1580038088034,1580038088034,"[{'name': 'hs_lastmodifieddate', 'value': '1580038088034', 'timestamp': 1580038088034, 'source': 'CALCULATED', 'sourceVid': []}]",,,,,,,,,,,,,,,,BIDEN,BidenPropertyMappings,1552584354789,https://www.linkedin.com/company/the-walt-disney-company,"[{'name': 'linkedin_company_page', 'value': 'https://www.linkedin.com/company/the-walt-disney-company', 'timestamp': 1552584354789, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1579508590479,The official Shark Tank site on ABC offers a deeper look at the hit TV series with exclusive content and show information. You can watch full episodes of Shark Tank free online.,"[{'name': 'linkedinbio', 'value': 'The official Shark Tank site on ABC offers a deeper look at the hit TV series with exclusive content and show information. You can watch full episodes of Shark Tank free online.', 'timestamp': 1579508590479, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",API,,1503560052902,Test123,"[{'name': 'name', 'value': 'Test123', 'timestamp': 1503560052902, 'source': 'API', 'sourceVid': []}]",,,,,,BIDEN,BidenPropertyMappings,1552584354789,10000,"[{'name': 'numberofemployees', 'value': '10000', 'timestamp': 1552584354789, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1521917867709,+1 818-560-1000,"[{'name': 'phone', 'value': '+1 818-560-1000', 'timestamp': 1521917867709, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1580038088034,GeneralHospital,"[{'name': 'twitterhandle', 'value': 'GeneralHospital', 'timestamp': 1580038088034, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",CALCULATED,,1503560052902,abc.com,"[{'name': 'website', 'value': 'abc.com', 'timestamp': 1503560052902, 'source': 'CALCULATED', 'sourceVid': []}]",[]
[],527976950,False,[],62515,API,CompaniesBatchMutation,1557130626732,Thumbs up!,"[{'name': 'about_us', 'value': 'Thumbs up!', 'timestamp': 1557130626732, 'sourceId': 'CompaniesBatchMutation', 'source': 'API', 'sourceVid': [], 'requestId': 'bd52152d-fd4b-4b1a-ae9e-0da7a5f9e501'}]",BIDEN,BidenPropertyMappings,1503578537098,1000000000,"[{'name': 'annualrevenue', 'value': '1000000000', 'timestamp': 1503578537098, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1569396065225,New York,"[{'name': 'city', 'value': 'New York', 'timestamp': 1569396065225, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1503578537098,United States,"[{'name': 'country', 'value': 'United States', 'timestamp': 1503578537098, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",API,API,1503578536919,1503578536919,"[{'name': 'createdate', 'value': '1503578536919', 'timestamp': 1503578536919, 'sourceId': 'API', 'source': 'API', 'sourceVid': []}]",API,,1503578536919,A company,"[{'name': 'description', 'value': 'A company', 'timestamp': 1503578536919, 'source': 'API', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1503578537098,https://www.facebook.com/ABCNetwork,"[{'name': 'facebook_company_page', 'value': 'https://www.facebook.com/ABCNetwork', 'timestamp': 1503578537098, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1552584354848,1923,"[{'name': 'founded_year', 'value': '1923', 'timestamp': 1552584354848, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",CALCULATED,,1580038088026,1580038088026,"[{'name': 'hs_lastmodifieddate', 'value': '1580038088026', 'timestamp': 1580038088026, 'source': 'CALCULATED', 'sourceVid': []}]",,,,,,,,,,,,,,,,BIDEN,BidenPropertyMappings,1552584354848,https://www.linkedin.com/company/the-walt-disney-company,"[{'name': 'linkedin_company_page', 'value': 'https://www.linkedin.com/company/the-walt-disney-company', 'timestamp': 1552584354848, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1579508590479,The official Shark Tank site on ABC offers a deeper look at the hit TV series with exclusive content and show information. You can watch full episodes of Shark Tank free online.,"[{'name': 'linkedinbio', 'value': 'The official Shark Tank site on ABC offers a deeper look at the hit TV series with exclusive content and show information. You can watch full episodes of Shark Tank free online.', 'timestamp': 1579508590479, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",API,,1503578536919,Test***,"[{'name': 'name', 'value': 'Test***', 'timestamp': 1503578536919, 'source': 'API', 'sourceVid': []}]",,,,,,BIDEN,BidenPropertyMappings,1552584354848,10000,"[{'name': 'numberofemployees', 'value': '10000', 'timestamp': 1552584354848, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1521917867888,+1 818-560-1000,"[{'name': 'phone', 'value': '+1 818-560-1000', 'timestamp': 1521917867888, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",BIDEN,BidenPropertyMappings,1580038088026,GeneralHospital,"[{'name': 'twitterhandle', 'value': 'GeneralHospital', 'timestamp': 1580038088026, 'sourceId': 'BidenPropertyMappings', 'source': 'BIDEN', 'sourceVid': []}]",CALCULATED,,1503578536919,abc.com,"[{'name': 'website', 'value': 'abc.com', 'timestamp': 1503578536919, 'source': 'CALCULATED', 'sourceVid': []}]",[]



================================================
File: example/data/out/tables/companies.csv.manifest
================================================
{"primary_key": ["companyId"], "incremental": true}


================================================
File: example/data/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: example/hs/__init__.py
================================================



================================================
File: example/hs/hs_client.py
================================================
import json
from collections.abc import Iterable

from kbc.client_base import HttpClientBase

COMPANIES_DEFAULT_COLS = ["additionalDomains", "companyId", "isDeleted", "mergeAudits", "portalId", "stateChanges"]
COMPANY_DEFAULT_PROPERTIES = ['about_us', 'name', 'phone', 'facebook_company_page', 'city', 'country', 'website',
                              'industry', 'annualrevenue', 'linkedin_company_page',
                              'hs_lastmodifieddate', 'hubspot_owner_id', 'notes_last_updated', 'description',
                              'createdate', 'numberofemployees', 'hs_lead_status', 'founded_year',
                              'twitterhandle',
                              'linkedinbio']

DEAL_DEFAULT_COLS = ["associations.associatedCompanyIds",
                     "associations.associatedDealIds",
                     "associations.associatedVids",
                     "dealId",
                     "imports",
                     "isDeleted",
                     "portalId",
                     "properties.dealstage.source",
                     "properties.dealstage.sourceId",
                     "properties.dealstage.timestamp",
                     "properties.dealstage.value",
                     "properties.dealstage.versions",
                     "properties.hs_object_id.source",
                     "properties.hs_object_id.sourceId",
                     "properties.hs_object_id.timestamp",
                     "properties.hs_object_id.value",
                     "properties.hs_object_id.versions",
                     "stateChanges"]
DEAL_DEFAULT_PROPERTIES = ['authority', 'budget', 'campaign_source', 'hs_analytics_source', 'hs_campaign',
                           'hs_lastmodifieddate', 'need', 'timeframe', 'dealname', 'amount', 'closedate', 'pipeline',
                           'createdate', 'engagements_last_meeting_booked', 'dealtype', 'hs_createdate', 'description',
                           'start_date', 'closed_lost_reason', 'closed_won_reason', 'end_date', 'lead_owner',
                           'tech_owner', 'service_amount', 'contract_type',
                           'hubspot_owner_id',
                           'partner_name', 'notes_last_updated']

# endpoints

DEALS_ALL = 'deals/v1/deal/paged'
DEALS_RECENT = 'deals/v1/deal/recent/modified'

COMPANIES_ALL = 'companies/v2/companies/paged'
COMPANIES_RECENT = 'companies/v2/companies/recent/modified'

MAX_RETRIES = 10
BASE_URL = 'https://api.hubapi.com/'

COMPANY_PROPERTIES = 'properties/v1/companies/properties/'


class HubspotClient(HttpClientBase):
    """
    Basic HTTP client taking care of core HTTP communication with the API service.

    It exttends the kbc.client_base.HttpClientBase class, setting up the specifics for Hubspot service and adding
    methods for handling pagination.

    """

    def __init__(self, token):
        HttpClientBase.__init__(self, base_url=BASE_URL, max_retries=MAX_RETRIES, backoff_factor=0.3,
                                status_forcelist=(429, 500, 502, 504), default_params={"hapikey": token})

    def _get_paged_result_pages(self, endpoint, parameters, res_obj_name, limit_attr, offset_req_attr, offset_resp_attr,
                                has_more_attr, offset, limit):
        """
        Generic pagination getter method returning Iterable instance that can be used in for loops.

        :param endpoint:
        :param parameters:
        :param res_obj_name:
        :param limit_attr:
        :param offset_req_attr:
        :param offset_resp_attr:
        :param has_more_attr:
        :param offset:
        :param limit:
        :return:
        """
        has_more = True
        while has_more:

            parameters[offset_req_attr] = offset
            parameters[limit_attr] = limit

            req = self.get_raw(self.base_url + endpoint, params=parameters)
            resp_text = str.encode(req.text, 'utf-8')
            req_response = json.loads(resp_text)

            if req_response[has_more_attr]:
                has_more = True
            else:
                has_more = False
            offset = req_response[offset_resp_attr]

            yield req_response[res_obj_name]

    def get_companies(self, recent=False, fields=None):

        offset = 0
        if not fields:
            company_properties = COMPANY_DEFAULT_PROPERTIES
        else:
            company_properties = fields

        parameters = {'properties': company_properties}

        if recent:
            return self._get_paged_result_pages(COMPANIES_RECENT, parameters, 'results', 'count', 'offset', 'offset',
                                                'hasMore', offset, 200)
        else:
            return self._get_paged_result_pages(COMPANIES_ALL, parameters, 'companies', 'limit', 'offset', 'offset',
                                                'has-more', offset, 250)

    def get_company_properties(self):
        req = self.get_raw(self.base_url + COMPANY_PROPERTIES)
        req_response = req.json()
        return req_response

    def get_deals(self, start_time=None, fields=None) -> Iterable:
        """
        Get either all available deals or recent ones specified by start_time.

        API supports more options, possible to extend in the future
        :type fields: list list of deal properties to get
        :param start_time: datetime
        :return: generator object with all available pages
        """
        offset = 0
        if not fields:
            deal_properties = DEAL_DEFAULT_PROPERTIES
        else:
            deal_properties = fields

        parameters = {'properties': deal_properties, 'propertiesWithHistory': 'dealstage',
                      'includeAssociations': 'true'}
        if start_time:
            parameters['since'] = int(start_time.timestamp() * 1000)
            return self._get_paged_result_pages(DEALS_RECENT, parameters, 'results', 'count', 'offset', 'offset',
                                                'hasMore',
                                                offset, 100)
        else:
            return self._get_paged_result_pages(DEALS_ALL, parameters, 'deals', 'limit', 'offset', 'offset', 'hasMore',
                                                offset, 250)



================================================
File: example/hs/hs_result.py
================================================
from kbc.result import KBCTableDef
from kbc.result import ResultWriter

# Pkeys
COMPANY_PK = ['companyId']
DEAL_PK = ['dealId']
DEAL_STAGE_HIST_PK = ['Deal_ID', 'sourceVid', 'sourceId', 'timestamp']

"""
Class extending the kbc.result.ResultWriter class to add some additional functionality.

In particular it is used to process more complex nested objects while using
the functionality the base ResultWriter provides. The class overrides constructor and core write methods.



"""


class DealsWriter(ResultWriter):
    """
    Overridden constructor method of ResultWriter. It creates extra ResultWriter instance that handles processing of
    the nested object 'deals_stage_history'. That writer is then called from within the write method.
    """

    def __init__(self, out_path, columns, buffer=8192):
        # specify result table
        deal_res_table = KBCTableDef('deals', columns, DEAL_PK)
        ResultWriter.__init__(self, out_path, deal_res_table, fix_headers=True, buffer_size=buffer)

        ext_user_table = KBCTableDef('deals_stage_history', [], DEAL_STAGE_HIST_PK)
        self.deals_stage_history_wr = ResultWriter(out_path, ext_user_table,
                                                   exclude_fields=['properties.dealstage.versions'],
                                                   flatten_objects=False,
                                                   user_value_cols={'Deal_ID'}, buffer_size=buffer)

    """
    Overridden write method that is modified to process the nested object separately using newly created nested writer.
    """

    def write(self, data, file_name=None, user_values=None, object_from_arrays=False, write_header=True):
        # write ext users
        d_stage_history = data.get('properties').get('dealstage').get('versions')
        if d_stage_history and str(
                d_stage_history) != 'nan' and len(d_stage_history) > 0:
            self.deals_stage_history_wr.write_all(d_stage_history,
                                                  user_values={'Deal_ID': self._get_pkey_values(data, {})})
            self.results = {**self.results, **self.deals_stage_history_wr.results}

        super().write(data)



================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi


================================================
File: src/client.py
================================================
from abc import ABC, abstractmethod
import csv
from functools import wraps
import time
from collections import defaultdict

from requests.models import Response
from requests import Session, get
from requests.adapters import HTTPAdapter
from urllib3.util import Retry
from requests.exceptions import RequestException, HTTPError

from exceptions import UserException
from endpoint_mapping import ENDPOINT_MAPPING
from typing import Literal, Union

import logging

BATCH_SIZE = 100
LOGGING_INTERVAL = 200
SLEEP_INTERVAL = 0.1  # https://developers.hubspot.com/docs/api/usage-details#rate-limits
ERRORS_TABLE_COLUMNS = ['status', 'category', 'message', 'context']


def batched(batch_size=BATCH_SIZE, logging_interval=LOGGING_INTERVAL, sleep_interval=SLEEP_INTERVAL):
    def wrapper(func):
        @wraps(func)
        def inner(self, data_reader, *args, **kwargs):
            data_batch = []
            for i, record in enumerate(data_reader, start=1):
                data_batch.append(record)
                if not i % batch_size:
                    func(self, data_batch, *args, **kwargs)
                    data_batch = []
                if not i % logging_interval:
                    logging.info(f'Processed {i} rows.')
            if data_batch:
                func(self, data_batch, *args, **kwargs)

        return inner

    return wrapper


def get_rows_by_list_id(data_reader):
    rows_by_list_id = defaultdict(list)
    for row in data_reader:
        if not row['list_id']:
            raise UserException('Column [list_id] cannot be empty.')
        rows_by_list_id[row['list_id']].append(row)
    return rows_by_list_id


def get_vids_from_rows(rows):
    vids = []
    for row in rows:
        if not row['vids']:
            raise UserException(f"Cannot process list with empty records in [vids] column. {row}")
        vids.append(row['vids'])
    return vids


class HubSpotClient(ABC):
    """Template for classes handling communication with Hubspot API"""

    def __init__(self, endpoint: str, config_params: dict, error_writer: csv.DictWriter, table_name: str):
        # Base parameters for the requests
        self.base_url = 'https://api.hubapi.com/'
        self.endpoint = endpoint
        self.base_params = {}
        self.config_params = config_params
        self.base_headers = {'Authorization': f'Bearer {self.config_params.get("#private_app_token")}'}
        self.error_writer = error_writer
        self.table_name = table_name

        self.s = Session()
        self.s.mount('https://',
                     HTTPAdapter(
                         max_retries=Retry(
                             total=5,
                             backoff_factor=0.3,  # {backoff factor} * (2 ** ({number of total retries} - 1))
                             status_forcelist=[429, 500, 502, 503, 504, 521, 524],
                             allowed_methods=frozenset(['POST', 'PUT', 'DELETE', 'PATCH']))))

    @abstractmethod
    def process_requests(self, data_reader) -> None:
        """
        Handles the assembly of URLs to call and request bodies to send.
        Args:
            data_reader: csv.DictReader with loaded csv
        Returns:
            None
        """

    def log_batch_errors(self, response):
        self.error_writer.errors = True
        for error in response.json()['errors']:
            self.error_writer.writerow(error)

    def log_errors(self, response):
        self.error_writer.errors = True
        try:
            error = response.json()
            error_row = {
                field: error.get(field)
                for field in ERRORS_TABLE_COLUMNS
            }
        except Exception as e:
            error_row = {
                'status': response.status_code,
                'category': 'unknown',
                'message': f" Response: {response.text}  Exception: {str(e)}",
            }
        self.error_writer.writerow(error_row)

    def make_request(self, url: str, request_body: Union[dict, None],
                     method: Literal["post", "put", "delete"],
                     sleep_interval: Union[int, float] = SLEEP_INTERVAL) -> Response:
        """
        Makes Post/Put/Delete calls to target url.
        Args:
            url: complete target url
            request_body: dict that will be sent in POST
            method: post/put/delete defined in endpoint_mapping.py
            sleep_interval: interval to sleep in seconds between requests

        Returns:
            response
        """

        if method not in ["post", "put", "delete", "patch"]:
            raise UserException(f"Method {method} not allowed.")

        response = self.s.request(method, url, headers=self.base_headers,
                                  params=self.base_params, json=request_body)
        try:
            response.raise_for_status()
        except RequestException:
            self.log_errors(response)

        time.sleep(sleep_interval)
        return response

    def make_batch_request(self, inputs: list):
        """
        Makes a batch request with the HubSpot specified data body.
        Args:
            inputs: list of individual HubsSpot objects to be created/updated
        Returns:
            None
        """
        url = f'{self.base_url}{ENDPOINT_MAPPING[self.endpoint]["endpoint"]}'
        method = ENDPOINT_MAPPING[self.endpoint]["method"]
        response = self.make_request(url=url, request_body={'inputs': inputs}, method=method)

        if response.status_code == 207:
            logging.error(f"{method} request to {url} partially failed with status code 207")
            self.log_batch_errors(response)


class CreateContact(HubSpotClient):
    """Creates contacts in batches"""

    @batched()
    def process_requests(self, data_reader):
        inputs = [{"properties": {k: str(v) for k, v in row.items()}} for row in data_reader]
        self.make_batch_request(inputs)


class CreateContactList(HubSpotClient):
    """Creates a new contact list"""

    def process_requests(self, data_reader):
        for row in data_reader:
            request_body = {
                'name': str(row['name'])
            }
            self.make_request(
                url=f'{self.base_url}{ENDPOINT_MAPPING[self.endpoint]["endpoint"]}',
                request_body=request_body,
                method=ENDPOINT_MAPPING[self.endpoint]["method"])


class AddSecondaryEmail(HubSpotClient):
    """Adds a secondary email to a contact"""

    def process_requests(self, data_reader):
        for row in data_reader:
            self.make_request(
                url=f'{self.base_url}{ENDPOINT_MAPPING[self.endpoint]["endpoint"]}'
                    f'{row["vid"]}/email/{row["secondary_email"]}',
                request_body=None,
                method=ENDPOINT_MAPPING[self.endpoint]["method"])


class UpdateSecondaryEmail(HubSpotClient):
    """Updates a secondary email of a contact"""

    def process_requests(self, data_reader):
        for row in data_reader:
            request_body = {
                "targetSecondaryEmail": row["secondary_email_old"],
                "updatedSecondaryEmail": row["secondary_email"]
            }
            self.make_request(
                url=f'{self.base_url}{ENDPOINT_MAPPING[self.endpoint]["endpoint"]}{row["vid"]}',
                request_body=request_body,
                method=ENDPOINT_MAPPING[self.endpoint]["method"])


class RemoveSecondaryEmail(HubSpotClient):
    """Removes a secondary email from a contact"""

    def process_requests(self, data_reader):
        for row in data_reader:
            self.make_request(
                url=f'{self.base_url}{ENDPOINT_MAPPING[self.endpoint]["endpoint"]}'
                    f'{row["vid"]}/email/{row["secondary_email"]}',
                request_body=None,
                method=ENDPOINT_MAPPING[self.endpoint]["method"])


class CreateCustomList(HubSpotClient):
    """Creates list for custom objects specified in the input table via object_type column"""

    def process_requests(self, data_reader):
        object_types_to_id = {
            'contact': '0-1',
            'company': '0-2',
            'deal': '0-3'
        }
        for row in data_reader:
            request_body = {
                'name': str(row['name']),
                'processingType': 'MANUAL',
                'objectTypeId': object_types_to_id[row['object_type']]
            }
            self.make_request(
                url=f'{self.base_url}{ENDPOINT_MAPPING[self.endpoint]["endpoint"]}',
                request_body=request_body,
                method=ENDPOINT_MAPPING[self.endpoint]["method"])


class AddContactToList(HubSpotClient):
    """Adds contacts to list"""

    def process_requests(self, data_reader):
        rows_by_list_id = get_rows_by_list_id(data_reader)

        for list_id, rows in rows_by_list_id.items():
            vids = []
            emails = []
            for row in rows:
                if row["vids"]:
                    vids.append(row["vids"])
                else:
                    emails.append(row["emails"])

            endpoint_path = ENDPOINT_MAPPING[self.endpoint]['endpoint'].format(list_id=list_id)
            self.make_request(
                url=f'{self.base_url}{endpoint_path}',
                request_body={"vids": vids, "emails": emails},
                method=ENDPOINT_MAPPING[self.endpoint]["method"])


class RemoveContactFromList(HubSpotClient):
    """Removes contacts from lists"""

    def process_requests(self, data_reader):
        rows_by_list_id = get_rows_by_list_id(data_reader)

        for list_id, rows in rows_by_list_id.items():
            vids = get_vids_from_rows(rows)

            endpoint_path = ENDPOINT_MAPPING[self.endpoint]['endpoint'].format(list_id=list_id)
            self.make_request(
                url=f'{self.base_url}{endpoint_path}',
                request_body={'vids': vids},
                method=ENDPOINT_MAPPING[self.endpoint]["method"])


class UpdateContact(HubSpotClient):
    """Updates contacts"""

    @batched()
    def process_requests(self, data_reader):
        inputs = []
        for row in data_reader:
            if not row["vid"]:
                raise UserException(f"Cannot process list with empty records in [vid] column. {row}")

            inputs.append({
                "id": row.pop('vid'),
                "properties": {k: str(v) for k, v in row.items()}
            })
        self.make_batch_request(inputs)


class UpdateContactByEmail(HubSpotClient):
    """Updates contacts using email as ID"""

    def process_requests(self, data_reader):
        for row in data_reader:
            if not row["email"]:
                raise UserException(f"Cannot process list with empty records in [email] column. {row}")

            email = row.pop('email')
            request_body = {'properties': [{'property': k, 'value': str(v)} for k, v in row.items()]}
            endpoint_path = ENDPOINT_MAPPING[self.endpoint]['endpoint'].format(email=email)
            self.make_request(
                url=f'{self.base_url}{endpoint_path}',
                request_body=request_body,
                method=ENDPOINT_MAPPING[self.endpoint]["method"])


class CreateCompany(HubSpotClient):
    """Creates company"""

    @batched()
    def process_requests(self, data_reader):
        inputs = []
        for row in data_reader:
            if not row["name"]:
                raise UserException(f"Cannot process company with empty records in [name] column. {row}")
            properties = {k: str(v) for k, v in row.items()}
            inputs.append({"properties": properties})
        self.make_batch_request(inputs)


class AddObjectToList(HubSpotClient):
    """Parent class for adding Objects to list using List ID and Object ID"""

    def process_requests(self, data_reader) -> None:
        rows_by_list_id = get_rows_by_list_id(data_reader)

        for list_id, rows in rows_by_list_id.items():
            vids = get_vids_from_rows(rows)

            endpoint_path = ENDPOINT_MAPPING[self.endpoint]['endpoint'].format(list_id=list_id)
            self.make_request(
                url=f'{self.base_url}{endpoint_path}',
                request_body={'recordIdsToAdd': vids},
                method=ENDPOINT_MAPPING[self.endpoint]["method"])


class AddCompanyToList(AddObjectToList):
    """Adds companies to list"""


class AddDealToList(AddObjectToList):
    """Adds deals to list"""


class RemoveObjectFromList(HubSpotClient):
    """Parent class for removing Objects from list using List ID and Object ID"""

    def process_requests(self, data_reader):
        rows_by_list_id = get_rows_by_list_id(data_reader)

        for list_id, rows in rows_by_list_id.items():
            vids = get_vids_from_rows(rows)

            endpoint_path = ENDPOINT_MAPPING[self.endpoint]['endpoint'].format(list_id=list_id)
            self.make_request(
                url=f'{self.base_url}{endpoint_path}',
                request_body={'recordIdsToRemove': vids},
                method=ENDPOINT_MAPPING[self.endpoint]["method"])


class RemoveCompanyFromList(RemoveObjectFromList):
    """Removes companies from list"""


class RemoveDealFromList(RemoveObjectFromList):
    """Removes deals from list"""


class UpdateCompany(HubSpotClient):
    """Updates company using company ID"""

    @batched()
    def process_requests(self, data_reader):
        inputs = []
        for row in data_reader:
            if not row["company_id"]:
                raise UserException(f"Cannot process list with empty records in [company_id] column. {row}")

            inputs.append({
                "id": row.pop("company_id"),
                "properties": {k: str(v) for k, v in row.items()}
            })
        self.make_batch_request(inputs)


class CreateDeal(HubSpotClient):
    """Creates deals"""

    @batched()
    def process_requests(self, data_reader):
        # /crm/v3/objects/deals/batch/create
        inputs = []
        for row in data_reader:
            if not row["hubspot_owner_id"]:
                raise UserException(f"Cannot process deal with empty record in [hubspot_owner_id] column. {row}")

            inputs.append({"properties": row})
        self.make_batch_request(inputs)


class CreateAssociatedObject(HubSpotClient):
    """Parent class to CRM objects with association - creates objects"""

    @batched()
    def process_requests(self, data_reader):
        inputs = []
        for row in data_reader:
            if not row["association_id"]:
                raise UserException(f"Cannot process object with empty record in [association_id] column. {row}")
            associations = [{
                'to': {'id': str(row.pop('association_id'))},
                'types': [{
                    'associationCategory': row.pop('association_category'),
                    'associationTypeId': row.pop('association_type_id')
                }]
            }]
            inputs.append({"associations": associations, "properties": row})
        self.make_batch_request(inputs)


class CreateTicket(CreateAssociatedObject):
    """Creates tickets"""


class CreateProduct(CreateAssociatedObject):
    """Creates products"""


class CreateQuote(CreateAssociatedObject):
    """Creates quotes"""


class CreateTax(CreateAssociatedObject):
    """Creates taxes"""


class CreateCall(CreateAssociatedObject):
    """Creates calls"""


class CreateCommunication(CreateAssociatedObject):
    """Creates communications"""


class CreateLineItem(CreateAssociatedObject):
    """Creates line items"""


class CreateEmail(CreateAssociatedObject):
    """Creates emails"""


class CreateMeeting(CreateAssociatedObject):
    """Creates meetings"""


class CreateNote(CreateAssociatedObject):
    """Creates notes"""


class CreatePostalMail(CreateAssociatedObject):
    """Creates postal_mails"""


class CreateTask(CreateAssociatedObject):
    """Creates tasks"""


class UpdateObject(HubSpotClient, ABC):
    """Parent class to CRM objects - updates objects"""

    @property
    @abstractmethod
    def object_type(self) -> str:
        pass

    @batched()
    def process_requests(self, data_reader):
        inputs = []
        for row in data_reader:
            if not row[f"{self.object_type}_id"]:
                raise UserException(f"Cannot process {self.object_type} with empty records "
                                    f"in [{self.object_type}_id] column. {row}")

            inputs.append({
                "id": str(row.pop(f'{self.object_type}_id')),
                "properties": row
            })
        self.make_batch_request(inputs)


class UpdateDeal(UpdateObject):
    """Updates Deal using deal_id"""

    @property
    def object_type(self) -> str:
        return 'deal'


class UpdateTicket(UpdateObject):
    """Updates Ticket using ticket_id"""

    @property
    def object_type(self) -> str:
        return 'ticket'


class UpdateProduct(UpdateObject):
    """Updates Product using product_id"""

    @property
    def object_type(self) -> str:
        return 'product'


class UpdateQuote(UpdateObject):
    """Updates Quote using quote_id"""

    @property
    def object_type(self) -> str:
        return 'quote'


class UpdateLineItem(UpdateObject):
    """Updates Line item using line_item_id"""

    @property
    def object_type(self) -> str:
        return 'line_item'


class UpdateTax(UpdateObject):
    """Updates Tax using tax_id"""

    @property
    def object_type(self) -> str:
        return 'tax'


class UpdateCall(UpdateObject):
    """Updates Call using call_id"""

    @property
    def object_type(self) -> str:
        return 'call'


class UpdateCommunication(UpdateObject):
    """Updates Communication using communication_id"""

    @property
    def object_type(self) -> str:
        return 'communication'


class UpdateEmail(UpdateObject):
    """Updates Email using email_id"""

    @property
    def object_type(self) -> str:
        return 'email'


class UpdateMeeting(UpdateObject):
    """Updates Meeting using meeting_id"""

    @property
    def object_type(self) -> str:
        return 'meeting'


class UpdateNote(UpdateObject):
    """Updates Note using note_id"""

    @property
    def object_type(self) -> str:
        return 'note'


class UpdatePostalMail(UpdateObject):
    """Updates PostalMail using postal_mail_id"""

    @property
    def object_type(self) -> str:
        return 'postal_mail'


class UpdateTask(UpdateObject):
    """Updates Task using task_id"""

    @property
    def object_type(self) -> str:
        return 'task'


class RemoveObject(HubSpotClient, ABC):
    """Parent class to CRM/engagement objects - removes CRM/engagement Object using Object ID"""

    @property
    @abstractmethod
    def object_type(self) -> str:
        pass

    @batched()
    def process_requests(self, data_reader):
        inputs = [{"id": str(row[f"{self.object_type}_id"])} for row in data_reader]
        self.make_batch_request(inputs)


class RemoveCompany(RemoveObject):
    """Removes Company using company_id"""

    @property
    def object_type(self) -> str:
        return 'company'


class RemoveDeal(RemoveObject):
    """Removes Deal using deal_id"""

    @property
    def object_type(self) -> str:
        return 'deal'


class RemoveTicket(RemoveObject):
    """Removes Ticket using ticket_id"""

    @property
    def object_type(self) -> str:
        return 'ticket'


class RemoveProduct(RemoveObject):
    """Removes Product using product_id"""

    @property
    def object_type(self) -> str:
        return 'product'


class RemoveQuote(RemoveObject):
    """Removes Quote using quote_id"""

    @property
    def object_type(self) -> str:
        return 'quote'


class RemoveLineItem(RemoveObject):
    """Removes Line item using line_item_id"""

    @property
    def object_type(self) -> str:
        return 'line_item'


class RemoveTax(RemoveObject):
    """Removes Tax item using tax_id"""

    @property
    def object_type(self) -> str:
        return 'tax'


class RemoveCall(RemoveObject):
    """Removes Call using call_id"""

    @property
    def object_type(self) -> str:
        return 'call'


class RemoveCommunication(RemoveObject):
    """Removes Communication using communication_id"""

    @property
    def object_type(self) -> str:
        return 'communication'


class RemoveEmail(RemoveObject):
    """Removes Email using email_id"""

    @property
    def object_type(self) -> str:
        return 'email'


class RemoveMeeting(RemoveObject):
    """Removes Meeting using meeting_id"""

    @property
    def object_type(self) -> str:
        return 'meeting'


class RemoveNote(RemoveObject):
    """Removes Note using note_id"""

    @property
    def object_type(self) -> str:
        return 'note'


class RemovePostalMail(RemoveObject):
    """Removes PostalMail using postal_mail_id"""

    @property
    def object_type(self) -> str:
        return 'postal_mail'


class RemoveTask(RemoveObject):
    """Removes Task using task_id"""

    @property
    def object_type(self) -> str:
        return 'task'


class AssociationCreate(HubSpotClient):
    """Creates associations between objects in batches"""

    def process_requests(self, data_reader):
        inputs = [{k: str(v) for k, v in row.items()} for row in data_reader]

        for line in inputs:
            endpoint_path = ENDPOINT_MAPPING[self.endpoint]['endpoint'].format(
                from_object_type=line.get("from_object_type"),
                to_object_type=line.get("to_object_type"))

            self.make_request(url=f'{self.base_url}{endpoint_path}',
                              request_body={'inputs': [{'from': line['from_id'], 'to': line['to_id']}]},
                              method=ENDPOINT_MAPPING[self.endpoint]["method"])


class AssociationRemove(HubSpotClient):
    """Creates associations between objects in batches"""

    def process_requests(self, data_reader):
        inputs = [{k: str(v) for k, v in row.items()} for row in data_reader]

        for line in inputs:
            endpoint_path = ENDPOINT_MAPPING[self.endpoint]['endpoint'].format(
                from_object_type=line.get("from_object_type"),
                to_object_type=line.get("to_object_type"))

            self.make_request(url=f'{self.base_url}{endpoint_path}',
                              request_body={'inputs': [{'from': line['from_id'], 'to': [line['to_id']]}]},
                              method=ENDPOINT_MAPPING[self.endpoint]["method"])


class CreateCustomObject(HubSpotClient):
    """Creates custom objects"""

    def process_requests(self, data_reader):
        for row in data_reader:
            if self.config_params.get("custom_object_use_table_as_type", False):
                object_type = self.table_name
            else:
                if "object_type" not in row:
                    raise UserException(f"Object_type column is missing in the input table. {row}")
                if not row["object_type"]:
                    raise UserException(f"Cannot process list with empty records in [object_type] column. {row}")
                object_type = row["object_type"]

            row_endpoint = ENDPOINT_MAPPING[self.endpoint]['endpoint'].format(
                object_type=object_type
            )
            properties = {k: str(v) for k, v in row.items() if k != "object_type"}
            self.make_request(url=f'{self.base_url}{row_endpoint}',
                              request_body={"properties": properties},
                              method=ENDPOINT_MAPPING[self.endpoint]["method"])


def test_credentials(token: str) -> bool:
    """
    Uses 'https://api.hubapi.com/contacts/v1/lists/all/contacts/recent' endpoint to check the validity of token.
    Returns:
        True if auth check succeeds
    Raises:
        UserException when auth fails.
    """
    # Authentication Check to ensure the API token is valid
    auth_url = 'https://api.hubapi.com/contacts/v1/lists/all/contacts/recent'
    auth_param = {'count': 1}
    auth_headers = {'Authorization': f'Bearer {token}'}

    try:
        auth_test = get(auth_url, params=auth_param, headers=auth_headers)
        auth_test.raise_for_status()
    except HTTPError as e:
        raise UserException(f"Cannot reach Hubspot API, please check your credentials. "
                            f"Error code: {auth_test.status_code}. "
                            f"Message: {auth_test.json()['message']}") from e

    if auth_test.status_code not in (200, 201):
        raise UserException(f"Auth check was not successful. Error: {auth_test.json()}")
    return True


def get_factory(endpoint: str, config_params: dict, error_writer: csv.DictWriter, table_name: str) -> HubSpotClient:
    """Constructs an exporter factory based on endpoint selection

    Args:
        endpoint: Hubspot API endpoint set in config.json
        config_params: Parameters from config.json
        error_writer: csv.DictWriter for request errors
        table_name: name of the input table
    """

    endpoints = {
        "contact_create": CreateContact,
        "list_create": CreateContactList,
        "custom_list_create": CreateCustomList,
        "custom_object_create": CreateCustomObject,
        "contact_add_to_list": AddContactToList,
        "contact_remove_from_list": RemoveContactFromList,
        "contact_update": UpdateContact,
        "contact_update_by_email": UpdateContactByEmail,
        "company_create": CreateCompany,
        "company_update": UpdateCompany,
        "company_remove": RemoveCompany,
        "company_add_to_list": AddCompanyToList,
        "company_remove_from_list": RemoveCompanyFromList,
        "deal_create": CreateDeal,
        "deal_update": UpdateDeal,
        "deal_remove": RemoveDeal,
        "deal_add_to_list": AddDealToList,
        "deal_remove_from_list": RemoveDealFromList,
        "ticket_create": CreateTicket,
        "ticket_update": UpdateTicket,
        "ticket_remove": RemoveTicket,
        "product_create": CreateProduct,
        "product_update": UpdateProduct,
        "product_remove": RemoveProduct,
        "quote_create": CreateQuote,
        "quote_update": UpdateQuote,
        "quote_remove": RemoveQuote,
        "line_item_create": CreateLineItem,
        "line_item_update": UpdateLineItem,
        "line_item_remove": RemoveLineItem,
        "tax_create": CreateTax,
        "tax_update": UpdateTax,
        "tax_remove": RemoveTax,
        "call_create": CreateCall,
        "call_update": UpdateCall,
        "call_remove": RemoveCall,
        "communication_create": CreateCommunication,
        "communication_update": UpdateCommunication,
        "communication_remove": RemoveCommunication,
        "email_create": CreateEmail,
        "email_update": UpdateEmail,
        "email_remove": RemoveEmail,
        "meeting_create": CreateMeeting,
        "meeting_update": UpdateMeeting,
        "meeting_remove": RemoveMeeting,
        "note_create": CreateNote,
        "note_update": UpdateNote,
        "note_remove": RemoveNote,
        "postal_mail_create": CreatePostalMail,
        "postal_mail_update": UpdatePostalMail,
        "postal_mail_remove": RemovePostalMail,
        "task_create": CreateTask,
        "task_update": UpdateTask,
        "task_remove": RemoveTask,
        "association_create": AssociationCreate,
        "association_remove": AssociationRemove,
        "secondary_email_add": AddSecondaryEmail,
        "secondary_email_update": UpdateSecondaryEmail,
        "secondary_email_remove": RemoveSecondaryEmail
    }

    if endpoint in endpoints:
        return endpoints[endpoint](endpoint, config_params, error_writer, table_name)
    raise UserException(f"Unknown endpoint option: {endpoint}.")


def run(endpoint: str, data_reader: csv.DictReader, error_writer: csv.DictWriter, config_params: dict,
        input_table_name) -> None:
    """
    Main entrypoint to call.
    Args:
        config_params: Config parameters
        endpoint: Hubspot API endpoint
        data_reader: csv.DictReader object with data from input csv
        error_writer: csv.DictWriter object to log 207 status_code events
        input_table_name: name of the input table

    Returns:
        None
    """
    factory = get_factory(endpoint, config_params, error_writer, input_table_name)
    factory.process_requests(data_reader=data_reader)



================================================
File: src/component.py
================================================
"""
Hubspot Writer
"""
import csv
import logging

from keboola.component import dao
from keboola.component.base import ComponentBase

import client as hubspot_client
from endpoint_mapping import ENDPOINT_MAPPING, LEGACY_ENDPOINT_MAPPING_CONVERSION
from exceptions import UserException

# configuration variables
KEY_OBJECT = 'hubspot_object'

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [
    KEY_OBJECT
]
HUBSPOT_OBJECTS = ("contact", "company", "list", "deal", "ticket", "product", "quote", "line_item", "tax", "call",
                   "communication", "email", "meeting", "note", "postal_mail", "task", "custom_list", "association",
                   "secondary_email", "custom_object")


def coalesce(*arg):
    return next((a for a in arg if a is not None), None)


class Component(ComponentBase):
    def __init__(self):
        super().__init__()

        self.params = self.configuration.parameters

    def run(self):
        """
        Main execution code
        """
        authentication_type = self.params.get("authentication_type", "Private App Token")

        if authentication_type != "Private App Token":
            raise ValueError(f"Invalid authentication type: {authentication_type}")

        # Input tables
        in_tables = self.get_input_tables_definitions()

        if len(in_tables) < 1:
            raise UserException("No input table!")

        input_table = in_tables[0]

        # Input checks
        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        hubspot_client.test_credentials(self.params["#private_app_token"])
        self.validate_user_input(input_table)

        output_table = self.create_out_table_definition('errors.csv', write_always=True)

        logging.info(f"Processing input table: {input_table.name}")

        with open(input_table.full_path) as input_file, open(output_table.full_path, 'w', newline='') as output_file:
            reader = csv.DictReader(input_file)
            error_writer = csv.DictWriter(output_file, fieldnames=hubspot_client.ERRORS_TABLE_COLUMNS)
            error_writer.writeheader()
            error_writer.errors = False
            hubspot_client.run(self.endpoint, reader, error_writer, self.params, input_table.name)

            if error_writer.errors:
                self.write_manifest(output_table)
                raise UserException(
                    'There were errors during some requests handling - check errors.csv for more details.')

    @property
    def hubspot_object(self) -> str:
        return self.params.get(KEY_OBJECT)

    @property
    def endpoint(self) -> str:
        if self.hubspot_object in LEGACY_ENDPOINT_MAPPING_CONVERSION:
            return LEGACY_ENDPOINT_MAPPING_CONVERSION[self.hubspot_object]
        else:
            return f"{self.hubspot_object}_{self.action}"

    @property
    def action(self) -> str:
        action = coalesce(*(self.params.get(f"{hubspot_object}_action") for hubspot_object in HUBSPOT_OBJECTS))

        if action is None and self.hubspot_object not in list(LEGACY_ENDPOINT_MAPPING_CONVERSION.keys()):
            raise UserException("A valid Object action must be provided.")
        return action

    def validate_user_input(self, table: dao.TableDefinition):

        # 1 - Ensure an endpoint is selected and valid
        if self.endpoint not in ENDPOINT_MAPPING:
            raise UserException(f"{self.endpoint} is not a valid endpoint.")

        # 2 - Ensure all required columns are in the input files for the respective endpoint.
        # Comparing this information with the file's manifest
        required_columns = ENDPOINT_MAPPING[self.endpoint]["required_column"]
        table_columns = table.column_names
        missing_columns = [column for column in required_columns if column not in table_columns]

        if missing_columns:
            raise UserException(f"Missing columns {missing_columns} in input table {table.name}")


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
File: src/endpoint_mapping.py
================================================
ENDPOINT_MAPPING = {
    'contact_create': {
        'endpoint': 'crm/v3/objects/contacts/batch/create',
        'required_column': [],
        'method': 'post'
    },
    'list_create': {
        'endpoint': 'contacts/v1/lists',
        'required_column': ['name'],
        'method': 'post'
    },
    'custom_list_create': {
        'endpoint': 'crm/v3/lists',
        'required_column': ['name', 'object_type'],
        'method': 'post'
    },
    'custom_object_create': {
        'endpoint': 'crm/v3/objects/{object_type}',
        'required_column': [],
        'method': 'post'
    },
    'contact_add_to_list': {
        'endpoint': 'contacts/v1/lists/{list_id}/add',
        'required_column': ['list_id', 'vids', 'emails'],
        'method': 'post'
    },
    'contact_remove_from_list': {
        'endpoint': 'contacts/v1/lists/{list_id}/remove',
        'required_column': ['list_id', 'vids'],
        'method': 'post'
    },
    'company_add_to_list': {
        'endpoint': 'crm/v3/lists/{list_id}/memberships/add-and-remove',
        'required_column': ['list_id', 'vids'],
        'method': 'put'
    },
    'company_remove_from_list': {
        'endpoint': 'crm/v3/lists/{list_id}/memberships/add-and-remove',
        'required_column': ['list_id', 'vids'],
        'method': 'put'
    },
    'contact_update': {
        'endpoint': 'crm/v3/objects/contacts/batch/update',
        'required_column': ['vid'],
        'method': 'post'
    },
    'contact_update_by_email': {
        'endpoint': 'contacts/v1/contact/email/{email}/profile',
        'required_column': ['email'],
        'method': 'post'
    },
    'company_create': {
        'endpoint': 'crm/v3/objects/companies/batch/create',
        'required_column': ['name'],
        'method': 'post'
    },
    'company_update': {
        'endpoint': 'crm/v3/objects/companies/batch/update',
        'required_column': ['company_id'],
        'method': 'post'
    },
    'company_remove': {
        'endpoint': 'crm/v3/objects/companies/batch/archive',
        'required_column': ['company_id'],
        'method': 'post'
    },
    'deal_create': {
        'endpoint': 'crm/v3/objects/deals/batch/create',
        'required_column': ['hubspot_owner_id'],
        'method': 'post'
    },
    'deal_update': {
        'endpoint': 'crm/v3/objects/deals/batch/update',
        'required_column': ['deal_id'],
        'method': 'post'
    },
    'deal_remove': {
        'endpoint': 'crm/v3/objects/deals/batch/archive',
        'required_column': ['deal_id'],
        'method': 'post'
    },
    'deal_add_to_list': {
        'endpoint': 'crm/v3/lists/{list_id}/memberships/add-and-remove',
        'required_column': ['list_id', 'vids'],
        'method': 'put'
    },
    'deal_remove_from_list': {
        'endpoint': 'crm/v3/lists/{list_id}/memberships/add-and-remove',
        'required_column': ['list_id', 'vids'],
        'method': 'put'
    },
    'ticket_create': {
        'endpoint': 'crm/v3/objects/tickets/batch/create',
        'required_column': ['association_id', 'association_category', 'association_type_id'],
        'method': 'post'
    },
    'ticket_update': {
        'endpoint': 'crm/v3/objects/tickets/batch/update',
        'required_column': ['ticket_id'],
        'method': 'post'
    },
    'ticket_remove': {
        'endpoint': 'crm/v3/objects/tickets/batch/archive',
        'required_column': ['ticket_id'],
        'method': 'post'
    },
    'product_create': {
        'endpoint': 'crm/v3/objects/products/batch/create',
        'required_column': ['association_id', 'association_category', 'association_type_id'],
        'method': 'post'
    },
    'product_update': {
        'endpoint': 'crm/v3/objects/products/batch/update',
        'required_column': ['product_id'],
        'method': 'post'
    },
    'product_remove': {
        'endpoint': 'crm/v3/objects/products/batch/archive',
        'required_column': ['product_id'],
        'method': 'post'
    },
    'quote_create': {
        'endpoint': 'crm/v3/objects/quotes/batch/create',
        'required_column': ['association_id', 'association_category', 'association_type_id'],
        'method': 'post'
    },
    'quote_update': {
        'endpoint': 'crm/v3/objects/quotes/batch/update',
        'required_column': ['quote_id'],
        'method': 'post'
    },
    'quote_remove': {
        'endpoint': 'crm/v3/objects/quotes/batch/archive',
        'required_column': ['quote_id'],
        'method': 'post'
    },
    'line_item_create': {
        'endpoint': 'crm/v3/objects/line_items/batch/create',
        'required_column': ['name', 'price', 'quantity', 'association_id', 'association_category',
                            'association_type_id'],
        'method': 'post'
    },
    'line_item_update': {
        'endpoint': 'crm/v3/objects/line_items/batch/update',
        'required_column': ['line_item_id'],
        'method': 'post'
    },
    'line_item_remove': {
        'endpoint': 'crm/v3/objects/line_items/batch/archive',
        'required_column': ['line_item_id'],
        'method': 'post'
    },
    'tax_create': {
        'endpoint': 'crm/v3/objects/taxes/batch/create',
        'required_column': ['association_id', 'association_category', 'association_type_id'],
        'method': 'post'
    },
    'tax_update': {
        'endpoint': 'crm/v3/objects/taxes/batch/update',
        'required_column': ['tax_id'],
        'method': 'post'
    },
    'tax_remove': {
        'endpoint': 'crm/v3/objects/taxes/batch/archive',
        'required_column': ['tax_id'],
        'method': 'post'
    },
    'call_create': {
        'endpoint': 'crm/v3/objects/calls/batch/create',
        'required_column': ['association_id', 'association_category', 'association_type_id'],
        'method': 'post'
    },
    'call_update': {
        'endpoint': 'crm/v3/objects/calls/batch/update',
        'required_column': ['call_id'],
        'method': 'post'
    },
    'call_remove': {
        'endpoint': 'crm/v3/objects/calls/batch/archive',
        'required_column': ['call_id'],
        'method': 'post'
    },
    'communication_create': {
        'endpoint': 'crm/v3/objects/communications/batch/create',
        'required_column': ['association_id', 'association_category', 'association_type_id'],
        'method': 'post'
    },
    'communication_update': {
        'endpoint': 'crm/v3/objects/communications/batch/update',
        'required_column': ['communication_id'],
        'method': 'post'
    },
    'communication_remove': {
        'endpoint': 'crm/v3/objects/communications/batch/archive',
        'required_column': ['communication_id'],
        'method': 'post'
    },
    'email_create': {
        'endpoint': 'crm/v3/objects/emails/batch/create',
        'required_column': ['association_id', 'association_category', 'association_type_id'],
        'method': 'post'
    },
    'email_update': {
        'endpoint': 'crm/v3/objects/emails/batch/update',
        'required_column': ['email_id'],
        'method': 'post'
    },
    'email_remove': {
        'endpoint': 'crm/v3/objects/emails/batch/archive',
        'required_column': ['email_id'],
        'method': 'post'
    },
    'meeting_create': {
        'endpoint': 'crm/v3/objects/meetings/batch/create',
        'required_column': ['association_id', 'association_category', 'association_type_id'],
        'method': 'post'
    },
    'meeting_update': {
        'endpoint': 'crm/v3/objects/meetings/batch/update',
        'required_column': ['meeting_id'],
        'method': 'post'
    },
    'meeting_remove': {
        'endpoint': 'crm/v3/objects/meetings/batch/archive',
        'required_column': ['meeting_id'],
        'method': 'post'
    },
    'note_create': {
        'endpoint': 'crm/v3/objects/notes/batch/create',
        'required_column': ['association_id', 'association_category', 'association_type_id'],
        'method': 'post'
    },
    'note_update': {
        'endpoint': 'crm/v3/objects/notes/batch/update',
        'required_column': ['note_id'],
        'method': 'post'
    },
    'note_remove': {
        'endpoint': 'crm/v3/objects/notes/batch/archive',
        'required_column': ['note_id'],
        'method': 'post'
    },
    'postal_mail_create': {
        'endpoint': 'crm/v3/objects/postal_mail/batch/create',
        'required_column': ['association_id', 'association_category', 'association_type_id'],
        'method': 'post'
    },
    'postal_mail_update': {
        'endpoint': 'crm/v3/objects/postal_mail/batch/update',
        'required_column': ['postal_mail_id'],
        'method': 'post'
    },
    'postal_mail_remove': {
        'endpoint': 'crm/v3/objects/postal_mail/batch/archive',
        'required_column': ['postal_mail_id'],
        'method': 'post'
    },
    'task_create': {
        'endpoint': 'crm/v3/objects/tasks/batch/create',
        'required_column': ['association_id', 'association_category', 'association_type_id'],
        'method': 'post'
    },
    'task_update': {
        'endpoint': 'crm/v3/objects/tasks/batch/update',
        'required_column': ['task_id'],
        'method': 'post'
    },
    'task_remove': {
        'endpoint': 'crm/v3/objects/tasks/batch/archive',
        'required_column': ['task_id'],
        'method': 'post'
    },
    'association_create': {
        'endpoint': 'crm/v4/associations/{from_object_type}/{to_object_type}/batch/associate/default',
        'required_column': ['from_id', 'to_id', 'from_object_type', 'to_object_type'],
        'method': 'post'
    },
    'association_remove': {
        'endpoint': 'crm/v4/associations/{from_object_type}/{to_object_type}/batch/archive',
        'required_column': ['from_id', 'to_id', 'from_object_type', 'to_object_type'],
        'method': 'post'
    },
    'secondary_email_add': {
        'endpoint': 'contacts/v1/secondary-email/',
        'required_column': ['vid', 'secondary_email'],
        'method': 'put'
    },
    'secondary_email_update': {
        'endpoint': 'contacts/v1/secondary-email/',
        'required_column': ['vid', 'secondary_email_old', 'secondary_email'],
        'method': 'patch'
    },
    'secondary_email_remove': {
        'endpoint': 'contacts/v1/secondary-email/',
        'required_column': ['vid', 'secondary_email'],
        'method': 'delete'
    }
}

# for backward compatibility
LEGACY_ENDPOINT_MAPPING_CONVERSION = {'create_contact': 'contact_create',
                                      'create_list': 'list_create',
                                      'add_contact_to_list': 'contact_add_to_list',
                                      'remove_contact_from_list': 'contact_remove_from_list',
                                      'update_contact': 'contact_update',
                                      'update_contact_by_email': 'contact_update_by_email'}



================================================
File: src/exceptions.py
================================================
class UserException(Exception):
    pass



================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


