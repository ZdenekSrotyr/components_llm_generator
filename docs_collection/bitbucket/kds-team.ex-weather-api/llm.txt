Directory structure:
└── kds_consulting_team-kds-team.ex-weather-api/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── TEMPLATE_README.md
    ├── bitbucket-pipelines.yml
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   ├── table_handler.py
    │   ├── client/
    │   │   ├── __init__.py
    │   │   └── client.py
    │   └── schemas/
    │       ├── failed_fetches.json
    │       ├── weather_astronomical.json
    │       ├── weather_daily.json
    │       └── weather_hourly.json
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
File: README.md
================================================
# Weather API extractor

[Weather API](https://www.weatherapi.com) is a service that provides data of Real Time, Forecasted, Future, Marine and Historical Weather

This component enables users to extract forecast and historical weather data from the [Weather API](https://www.weatherapi.com).

## Prerequisites

To utilize the [Weather API](https://www.weatherapi.com) you must first register and get an API token.
You should subscribe to the plan based on your expected consumption.

## Configuration

* Authentication (authentication) :
    * Api Token (#api_token) : Weather API token
* Fetching Settings (fetching_settings) :
    * Fetch Parameter From (fetch_parameter_from) : Choose one of ['config_parameters', 'input_table'], if 'config_parameters' the fetching parameters should be set and will be used for fetching. 
The 'input_table' is to be used if you want to use an input table to fetch data with a list of parameters, see the input table section for more information
    * Request Type (request_type) : One of ['forecast', 'history']. 
With 'forecast' the forecast data for the upcoming days will be fetched (use 'forecast_days' to set how many days in the future you wish to fetch data for).
With 'history' historical forecast data is fetched for a selected date that is set with the 'historical_date' parameter.
    * Location Query (location_query) : Query parameter for location. It could be Latitude and Longitude (Decimal degree) e.g 48.8567,2.3508, or city name e.g. Paris
    * Forecast Days (forecast_days) : Number of days of forecast required.
    * Historical Date (historical_date) : Date to fetch historical data from, either exact date in YYYY-MM-DD format or relative date e.g: last week.
    * Continue On Failure (continue_on_failure) : Boolean value, if set to True, when an error occurs in fetching, the fetching will continue and failed responses will be saved in the **failed_fetches.csv** file. 
  If set to False the component run will end with an error as soon as a single request fails.
* Destination Settings (destination_settings) :
    * Load Type (load_type) : one of ['full_load', 'incremental_load'] If set to Incremental load, the result tables will be updated based on primary key. 
Full load overwrites the destination table each time.


### Sample Configuration

```json
{
  "parameters": {
    "authentication": {
      "#api_token": "YOUR API TOKEN"
    },
    "fetching_settings": {
      "fetch_parameter_from": "config_parameters",
      "request_type": "forecast",
      "location_query": "Paris",
      "forecast_days": 10
    },
    "destination_settings": {
      "load_type": "incremental_load"
    }
  },
  "action": "run"
}

```

## Input

If the 'fetch_parameter_from' is set to 'input_table', a single input table can be used to set parameters for fetching.

* The table must contain a 'location' column, or a 'latitude' and 'longitude' column to define the location to fetch for.
* If Request Type is set to 'forecast', a 'forecast_days' column can be added, that defines the 'forecast_days' from the configuration, If it is not added, the 'forecast_days' defaults to 10.
* If Request Type is set to 'history', a 'historical_date' column must be added, that defines the 'historical_date' from the configuration.

Each row in the input table is a single request to the API.

## Output

There are 4 output tables:

### weather_astronomical.csv

Contains daily astronomical future and historical forecasts.

### weather_daily.csv

Contains daily future and historical forecasts.

### weather_hourly.csv

Contains hourly future and historical forecasts.

### failed_fetches.csv

If continue on failure parameter is set to True, then this table will get filled with errors that occurred during fetching.

## Development

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone https://bitbucket.org/kds_consulting_team/kds-team.ex-pirate-weather/src/master/ kds-team.ex-pirate-weather
cd kds-team.ex-pirate-weather
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## Integration

For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)



================================================
File: Dockerfile
================================================
FROM python:3.11-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
File: TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
File: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
File: requirements.txt
================================================
keboola.component==1.4.0
keboola.utils
keboola.http-client
mock~=5.0.2
freezegun~=1.2.2
https://github.com/bakobako/dataconf/zipball/main#egg=dataconf
requests==2.28.2
dateparser==1.1.8
keboola.csvwriter==1.0.1


================================================
File: component_config/component_long_description.md
================================================
This component enables users to extract forecast and historical weather data from the [Weather API](https://www.weatherapi.com).

Weather API is offered as a free and paid service.

The component can fetch data according to a single parameter or multiple from the input table.

Each row in the input table is a single request to the API.


================================================
File: component_config/component_short_description.md
================================================
Weather API is a service that provides data of Real Time, Forecasted, Future, Marine and Historical Weather


================================================
File: component_config/configRowSchema.json
================================================
{}


================================================
File: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "extractor configuration",
  "required": [],
  "properties": {
    "authentication": {
      "type": "object",
      "title": "Authentication Settings",
      "properties": {
        "#api_token": {
          "type": "string",
          "format": "password",
          "title": "API Token",
          "description": "API token from you Weather API account",
          "propertyOrder": 10
        },
        "test_connection": {
          "type": "button",
          "format": "test-connection",
          "propertyOrder": 60
        }
      },
      "propertyOrder": 10
    },
    "fetching_settings": {
      "type": "object",
      "title": "Fetching Settings",
      "properties": {
        "fetch_parameter_from": {
          "title": "Parameters From",
          "description": "Select which way you prefer to input the fetching parameter, either by inputting them via the configuration or via an input table.",
          "type": "string",
          "format": "select",
          "required": true,
          "enum": [
            "config_parameters",
            "input_table"
          ],
          "options": {
            "enum_titles": [
              "Configuration Parameters",
              "Using An Input Table"
            ]
          },
          "default": "config_parameters",
          "propertyOrder": 10
        },
        "request_type": {
          "type": "string",
          "format": "select",
          "title": "Request Type",
          "default": "si",
          "required": true,
          "enum": [
            "forecast",
            "history"
          ],
          "options": {
            "enum_titles": [
              "Forecast",
              "History"
            ]
          },
          "propertyOrder": 20
        },
        "location_query": {
          "title": "Location",
          "type": "string",
          "required": true,
          "description": "Query parameter for location. It could be Latitude and Longitude (Decimal degree) e.g 48.8567,2.3508, or city name e.g. Paris",
          "default": "New York",
          "propertyOrder": 30,
          "options": {
            "dependencies": {
              "fetch_parameter_from": "config_parameters"
            }
          }
        },
        "forecast_days": {
          "title": "Forecast Days",
          "type": "integer",
          "required": true,
          "description": "Number of days of forecast required.",
          "minimum": 1,
          "maximum": 14,
          "default": "10",
          "propertyOrder": 40,
          "options": {
            "dependencies": {
              "fetch_parameter_from": "config_parameters",
              "request_type": "forecast"
            }
          }
        },
        "historical_date": {
          "title": "Historical Date",
          "type": "string",
          "required": true,
          "description": "Date to fetch historical data from, either exact date in YYYY-MM-DD format or relative date e.g: last week.",
          "default": "2022-09-09",
          "propertyOrder": 50,
          "options": {
            "dependencies": {
              "fetch_parameter_from": "config_parameters",
              "request_type": "history"
            }
          }
        },
        "continue_on_failure": {
          "title": "Continue On Failure",
          "type": "boolean",
          "format": "checkbox",
          "description": "If selected, if a request for a  specific loaction/time fails, the component continues to run and ends with a success. If not, the component fails",
          "default": true,
          "propertyOrder": 70,
          "options": {
            "dependencies": {
              "fetch_parameter_from": "input_table"
            }
          }
        }
      },
      "propertyOrder": 20
    },
    "destination_settings": {
      "type": "object",
      "title": "Destination Settings",
      "properties": {
        "load_type": {
          "type": "string",
          "enum": [
            "full_load",
            "incremental_load"
          ],
          "options": {
            "enum_titles": [
              "Full Load",
              "Incremental Load"
            ]
          },
          "default": "incremental_load",
          "format": "checkbox",
          "title": "Load Type",
          "description": "If Full load is used, the destination table will be overwritten every run. If incremental load is used, data will be upserted into the destination table.",
          "propertyOrder": 20
        }
      },
      "propertyOrder": 30
    }
  }
}



================================================
File: component_config/configuration_description.md
================================================
[Weather API](https://www.weatherapi.com) is a service that provides data of Real Time, Forecasted, Future, Marine and Historical Weather
This component enables users to extract forecast and historical weather data from the [Weather API](https://www.weatherapi.com).

If the **Parameters From** is set to **Configuration Parameters** set the fetching parameters in the configuration parameters.

If the **Parameters From** is set to **Using An Input Table**, a single input table can be used to set parameters for fetching.

* The table must contain a 'location' column, or a 'latitude' and 'longitude' column to define the location to fetch for.
* If Request Type is set to 'forecast', a 'forecast_days' column can be added, that defines the 'forecast_days' from the configuration, If it is not added, the 'forecast_days' defaults to 10.
* If Request Type is set to 'history', a 'historical_date' column must be added, that defines the 'historical_date' from the configuration.

Each row in the input table is a single request to the API.


================================================
File: component_config/logger
================================================
gelf


================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"




================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
File: src/component.py
================================================
import csv
import logging
import time
from typing import Iterator

import dateparser
from keboola.component.base import ComponentBase, sync_action
from keboola.component.dao import TableDefinition
from keboola.component.exceptions import UserException
from keboola.csvwriter import ElasticDictWriter

from client import WeatherApiClient, WeatherApiClientException
from configuration import Configuration, FetchParameterFrom, RequestType, LoadType
from table_handler import TableHandler


class Component(ComponentBase):

    def __init__(self):
        self._configuration: Configuration
        self.client: WeatherApiClient
        self._table_handlers: dict[str, TableHandler] = {}
        self.extraction_start = int(time.time())
        super().__init__()

    def run(self) -> None:
        self._init_configuration()
        self._init_client()
        self._init_table_handlers()

        for fetching_parameters in self.get_fetching_parameters():
            logging.info(f"Fetching data with parameters : {fetching_parameters}")
            self.fetch_and_write_data_with_parameters(fetching_parameters)

        self.close_table_handlers()

    def _init_configuration(self) -> None:
        self.validate_configuration_parameters(Configuration.get_dataclass_required_parameters())
        self._configuration: Configuration = Configuration.load_from_dict(self.configuration.parameters)

    def _init_client(self) -> None:
        self.client = WeatherApiClient(self._configuration.authentication.pswd_api_token)

    def _init_table_handlers(self) -> None:
        self._init_table_handler_by_schema_name("weather_daily")
        self._init_table_handler_by_schema_name("weather_hourly")
        self._init_table_handler_by_schema_name("weather_astronomical")

        if self._configuration.fetching_settings.continue_on_failure:
            self._init_table_handler_by_schema_name("failed_fetches")

    def _init_table_handler_by_schema_name(self, schema_name: str) -> None:
        schema = self.get_table_schema_by_name(schema_name)
        table_definition = self.create_out_table_definition_from_schema(schema)
        # get previous columns from state file
        last_state = self.get_state_file()
        if last_state and last_state.get("last_columns", {}).get('schema_name'):
            table_definition.columns = last_state["last_columns"][schema_name]

        if self._configuration.destination_settings.load_type == LoadType.INCREMENTAL_LOAD:
            table_definition.incremental = True

        writer = ElasticDictWriter(table_definition.full_path, fieldnames=table_definition.columns)
        self._table_handlers[schema_name] = TableHandler(table_definition, writer)

    def close_table_handlers(self) -> None:
        custom_columns = {}
        for table_handler in self._table_handlers:
            self._table_handlers[table_handler].close()
            self.write_manifest(self._table_handlers[table_handler].table_definition)
            custom_columns[table_handler] = self._table_handlers[table_handler].table_definition.columns
        self.write_state_file({"last_columns": custom_columns})

    def fetch_and_write_data_with_parameters(self, fetching_parameters: dict) -> None:
        request_type = self._configuration.fetching_settings.request_type
        try:
            if request_type == RequestType.HISTORY:
                self.fetch_and_write_history_data(**fetching_parameters)
            elif request_type == RequestType.FORECAST:
                self.fetch_and_write_forecast_data(**fetching_parameters)
        except (TypeError, UserException, ValueError) as failed_fetch_exc:
            if self._configuration.fetching_settings.continue_on_failure:
                self.write_error(fetching_parameters, failed_fetch_exc)
            else:
                raise UserException(failed_fetch_exc) from failed_fetch_exc

    def get_fetching_parameters(self) -> Iterator:
        if self.fetch_from_config_params():
            return self.get_fetching_parameters_from_configuration()
        else:
            return self.get_fetching_parameters_from_input_table()

    def fetch_from_config_params(self):
        return self._configuration.fetching_settings.fetch_parameter_from == FetchParameterFrom.CONFIG_PARAMETERS

    def get_fetching_parameters_from_configuration(self) -> Iterator:
        request_type = self._configuration.fetching_settings.request_type
        location = self._configuration.fetching_settings.location_query
        fetching_parameters = {"location": location}

        if request_type == RequestType.FORECAST:
            forecast_days = self._configuration.fetching_settings.forecast_days
            fetching_parameters["forecast_days"] = forecast_days

        if request_type == RequestType.HISTORY:
            historical_date_raw = self._configuration.fetching_settings.historical_date
            historical_date = self.parse_date(historical_date_raw)
            fetching_parameters["historical_date"] = historical_date
        yield fetching_parameters

    def get_fetching_parameters_from_input_table(self) -> Iterator:
        input_table = self._get_single_input_table()
        with open(input_table.full_path) as in_table:
            reader = csv.DictReader(in_table)
            for row in reader:
                yield self.process_input_row(row)

    def process_input_row(self, row: dict):
        request_type = self._configuration.fetching_settings.request_type

        if "location" in row:
            location = row["location"]
        elif "latitude" in row and "longitude" in row:
            location = f"{row['latitude']},{row['longitude']}"
        else:
            raise UserException("Input Table Error : Input table must contain either a 'location' column "
                                "or a 'latitude' and 'longitude' column")
        fetching_parameters = {"location": location}

        if "forecast_days" in row and request_type == RequestType.FORECAST:
            try:
                fetching_parameters["forecast_days"] = int(row['forecast_days'])
            except ValueError:
                logging.warning(f"Could not parse {row['forecast_days']} to int, falling back to default '10'")
                fetching_parameters["forecast_days"] = 10
        elif request_type == RequestType.FORECAST:
            fetching_parameters["forecast_days"] = 10

        if "historical_date" in row and request_type == RequestType.HISTORY:
            try:
                historical_date = self.parse_date(row['historical_date'])
            except UserException:
                historical_date = row['historical_date']
            fetching_parameters["historical_date"] = historical_date

        return fetching_parameters

    def _get_single_input_table(self) -> TableDefinition:
        input_tables = self.get_input_tables_definitions()
        if len(input_tables) != 1:
            raise UserException("Input Table Error : Only 1 table should be specified in the input mapping")
        return input_tables[0]

    def fetch_and_write_history_data(self, location: str, historical_date: str) -> None:
        historical_forecast = self.get_history_data(location, historical_date)
        self.write_forecast_data(historical_forecast)

    def get_history_data(self, location: str, historical_date: str) -> dict:
        try:
            return self.client.get_history(location, historical_date)
        except WeatherApiClientException as weather_api_exc:
            message = self.get_api_exception_message(weather_api_exc)
            raise UserException(message) from weather_api_exc

    def fetch_and_write_forecast_data(self, location: str, forecast_days: int) -> None:
        forecast = self.get_forecast_data(location, forecast_days)
        self.write_forecast_data(forecast)

    def get_forecast_data(self, location: str, forecast_days: int) -> dict:
        try:
            return self.client.get_forecast(location, forecast_days)
        except WeatherApiClientException as weather_api_exc:
            message = self.get_api_exception_message(weather_api_exc)
            raise UserException(message) from weather_api_exc

    def get_api_exception_message(self, weather_api_exc: WeatherApiClientException) -> str:
        try:
            message = weather_api_exc.args[0].args[0]
            if "403" in weather_api_exc.args[0].args[0]:
                message = "Authorization Error : Invalid API token"
            elif "400" in weather_api_exc.args[0].args[0]:
                if self._configuration.fetching_settings.request_type == RequestType.FORECAST:
                    message = "Parameters Error : Invalid Location or Days parameter"
                elif self._configuration.fetching_settings.request_type == RequestType.HISTORY:
                    message = "Parameters Error : Invalid Location or Historical Date parameter"
            return message
        except (IndexError, KeyError):
            return f"Error : {weather_api_exc}"

    def write_forecast_data(self, forecast: dict) -> None:
        daily_data, hourly_data, astro_data = self.parse_forecast_data(forecast)
        self._table_handlers["weather_daily"].write_rows(daily_data)
        self._table_handlers["weather_hourly"].write_rows(hourly_data)
        self._table_handlers["weather_astronomical"].write_rows(astro_data)

    def write_error(self, parameters: dict, error: Exception) -> None:
        self._table_handlers["failed_fetches"].write_row({"parameters": str(parameters),
                                                          "error": error,
                                                          "fetching_timestamp": self.extraction_start})

    def parse_forecast_data(self, forecast: dict) -> tuple[list[dict], list[dict], list[dict]]:
        daily = []
        hourly = []
        astro = []

        latitude = forecast["location"]["lat"]
        longitude = forecast["location"]["lon"]
        location_name = forecast["location"]["name"]
        forecast_days = forecast["forecast"]["forecastday"]

        for forecast_day in forecast_days:
            date = forecast_day["date"]
            condition = forecast_day["day"].pop("condition")["text"]
            daily.append({"latitude": latitude,
                          "longitude": longitude,
                          "location_name": location_name,
                          "extraction_timestamp": self.extraction_start,
                          "date": date,
                          "condition": condition,
                          **forecast_day["day"]})

            astro.append({"latitude": latitude,
                          "longitude": longitude,
                          "location_name": location_name,
                          "extraction_timestamp": self.extraction_start,
                          "date": date,
                          **forecast_day["astro"]})

            for hour in forecast_day["hour"]:
                date = forecast_day["date"]
                condition = hour.pop("condition")["text"]
                hourly.append({"latitude": latitude,
                               "longitude": longitude,
                               "location_name": location_name,
                               "extraction_timestamp": self.extraction_start,
                               "date": date,
                               "condition": condition,
                               **hour})

        return daily, hourly, astro

    @staticmethod
    def parse_date(date_str: str) -> str:
        try:
            date_obj = dateparser.parse(date_str)
            if date_obj is None:
                raise ValueError("Invalid date string")
            return date_obj.strftime("%Y-%m-%d")
        except ValueError as e:
            raise UserException(f"Parameters Error : Could not parse to date : {date_str}") from e

    @sync_action("testConnection")
    def test_connection(self):
        self._init_configuration()
        self._init_client()
        try:
            self.client.get_forecast("Paris", 1)
        except WeatherApiClientException as weather_api_exc:
            raise UserException("Authorization Error : Invalid API token") from weather_api_exc


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
File: src/configuration.py
================================================
import dataclasses
import json
from dataclasses import dataclass
from enum import Enum
from typing import List

import dataconf


class ConfigurationBase:
    @staticmethod
    def _convert_private_value(value: str):
        return value.replace('"#', '"pswd_')

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith("pswd_"):
            return value.replace("pswd_", "#", 1)
        else:
            return value

    @classmethod
    def load_from_dict(cls, configuration: dict):
        """
        Initialize the configuration dataclass object from dictionary.
        Args:
            configuration: Dictionary loaded from json configuration.

        Returns:

        """
        json_conf = json.dumps(configuration)
        json_conf = ConfigurationBase._convert_private_value(json_conf)
        return dataconf.loads(json_conf, cls, ignore_unexpected=True)

    @classmethod
    def get_dataclass_required_parameters(cls) -> List[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: List[str]

        """
        return [cls._convert_private_value_inv(f.name)
                for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING
                and f.default_factory == dataclasses.MISSING]


@dataclass
class Authentication(ConfigurationBase):
    pswd_api_token: str


class FetchParameterFrom(str, Enum):
    CONFIG_PARAMETERS = "config_parameters"
    INPUT_TABLE = "input_table"


class RequestType(str, Enum):
    FORECAST = "forecast"
    HISTORY = "history"


@dataclass
class FetchingSettings(ConfigurationBase):
    fetch_parameter_from: FetchParameterFrom = FetchParameterFrom.CONFIG_PARAMETERS
    request_type: RequestType = RequestType.FORECAST
    location_query: str = "New York"
    forecast_days: int = 10
    historical_date: str = "2022-09-09"
    continue_on_failure: bool = False


class LoadType(str, Enum):
    FULL_LOAD = "full_load"
    INCREMENTAL_LOAD = "incremental_load"


@dataclass
class DestinationSettings(ConfigurationBase):
    load_type: LoadType = LoadType.INCREMENTAL_LOAD


@dataclass
class Configuration(ConfigurationBase):
    authentication: Authentication
    fetching_settings: FetchingSettings
    destination_settings: DestinationSettings



================================================
File: src/table_handler.py
================================================
from keboola.component.dao import TableDefinition
from keboola.csvwriter import ElasticDictWriter


class TableHandler:
    def __init__(self, table_definition: TableDefinition, writer: ElasticDictWriter):
        self.table_definition = table_definition
        self.writer = writer

    def close(self) -> None:
        self.writer.close()
        self.table_definition.columns = self.writer.fieldnames

    def write_rows(self, rows: list[dict]) -> None:
        self.writer.writerows(rows)

    def write_row(self, row: dict) -> None:
        self.writer.writerow(row)



================================================
File: src/client/__init__.py
================================================
from .client import WeatherApiClient, WeatherApiClientException  # noqa


================================================
File: src/client/client.py
================================================
from keboola.http_client import HttpClient
from requests.exceptions import HTTPError

BASE_URL = "https://api.weatherapi.com/v1"

ENDPOINT_HISTORY = "history.json"
ENDPOINT_FORECAST = "forecast.json"


class WeatherApiClientException(Exception):
    pass


class WeatherApiClient(HttpClient):
    def __init__(self, token):
        self.token = token
        super().__init__(BASE_URL)

    def get_endpoint(self, endpoint: str, params: dict) -> dict:
        try:
            return self.get(endpoint_path=endpoint, params=params)
        except HTTPError as http_err:
            raise WeatherApiClientException(http_err) from http_err

    def get_forecast(self, location_query: str, days: int) -> dict:
        parameters = {"key": self.token, "q": location_query, "days": days}
        return self.get_endpoint(ENDPOINT_FORECAST, parameters)

    def get_history(self, location_query: str, historical_date: str) -> dict:
        parameters = {"key": self.token, "q": location_query, "dt": historical_date}
        return self.get_endpoint(ENDPOINT_HISTORY, parameters)



================================================
File: src/schemas/failed_fetches.json
================================================
{
  "name": "failed_fetches",
  "description": "",
  "primary_keys": [
    "parameters",
    "fetching_timestamp"
  ],
  "fields": [
    {
      "name": "parameters",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "error",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "fetching_timestamp",
      "description": "",
      "base_type": "INTEGER"
    }
  ]
}


================================================
File: src/schemas/weather_astronomical.json
================================================
{
  "name": "weather_astronomical",
  "description": "",
  "primary_keys": [
    "latitude",
    "longitude",
    "date"
  ],
  "fields": [
    {
      "name": "latitude",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "longitude",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "date",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "location_name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "sunrise",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "sunset",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "moonrise",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "moonset",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "moon_phase",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "moon_illumination",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "is_moon_up",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "is_sun_up",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "extraction_timestamp",
      "description": "",
      "base_type": "STRING"
    }
  ]
}


================================================
File: src/schemas/weather_daily.json
================================================
{
  "name": "weather_daily",
  "description": "",
  "primary_keys": [
    "latitude",
    "longitude",
    "date"
  ],
  "fields": [
    {
      "name": "latitude",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "longitude",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "date",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "location_name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "maxtemp_c",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "maxtemp_f",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "mintemp_c",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "mintemp_f",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "avgtemp_c",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "avgtemp_f",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "maxwind_mph",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "maxwind_kph",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "totalprecip_mm",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "totalprecip_in",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "totalsnow_cm",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "avgvis_km",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "avgvis_miles",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "avghumidity",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "daily_will_it_rain",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "daily_chance_of_rain",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "daily_will_it_snow",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "daily_chance_of_snow",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "condition",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "uv",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "extraction_timestamp",
      "description": "",
      "base_type": "STRING"
    }
  ]
}


================================================
File: src/schemas/weather_hourly.json
================================================
{
  "name": "weather_hourly",
  "description": "",
  "primary_keys": [
    "latitude",
    "longitude",
    "date",
    "time"
  ],
  "fields": [
    {
      "name": "latitude",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "longitude",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "date",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "time",
      "description": "",
      "base_type": "STRING"
    },
        {
      "name": "location_name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "condition",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "time_epoch",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "temp_c",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "temp_f",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "is_day",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "wind_mph",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "wind_kph",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "wind_degree",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "wind_dir",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "pressure_mb",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "pressure_in",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "precip_mm",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "precip_in",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "snow_cm",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "humidity",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "cloud",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "feelslike_c",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "feelslike_f",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "windchill_c",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "windchill_f",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "heatindex_c",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "heatindex_f",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "dewpoint_c",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "dewpoint_f",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "will_it_rain",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "chance_of_rain",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "will_it_snow",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "chance_of_snow",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "vis_km",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "vis_miles",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "gust_mph",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "gust_kph",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "uv",
      "description": "",
      "base_type": "FLOAT"
    },
    {
      "name": "extraction_timestamp",
      "description": "",
      "base_type": "STRING"
    }
  ]
}


================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


