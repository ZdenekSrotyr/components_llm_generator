Directory structure:
└── kds_consulting_team-kds-team.ex-monday/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── bitbucket-pipelines.yml
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── .travis.yml
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── junk.json
    │   ├── mapping_parser/
    │   │   ├── mapping.json
    │   │   └── parser.py
    │   └── monday/
    │       ├── client.py
    │       └── graphql_queries/
    │           ├── activity_logs.gql
    │           ├── boards.gql
    │           ├── items.gql
    │           ├── me.gql
    │           ├── tags.gql
    │           ├── teams.gql
    │           ├── updates.gql
    │           └── users.gql
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            ├── build_n_test.yml
            └── deploy.yml

================================================
File: README.md
================================================
KBC Component
=============

Description

**Table of contents:**

[TOC]

Functionality notes
===================

Prerequisites
=============

Get the API token, register application, etc.

Features
========

| **Feature**             | **Note**                                      |
|-------------------------|-----------------------------------------------|
| Generic UI form         | Dynamic UI form                               |
| Row Based configuration | Allows structuring the configuration in rows. |
| oAuth                   | oAuth authentication enabled                  |
| Incremental loading     | Allows fetching data in new increments.       |
| Backfill mode           | Support for seamless backfill setup.          |
| Date range filter       | Specify date range.                           |

Supported endpoints
===================

If you need more endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/)

Configuration
=============

Param 1
-------

Param 2
-------

Output
======

List of tables, foreign keys, schema.

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the docker-compose file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)



================================================
File: Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
File: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
File: requirements.txt
================================================
keboola.component==1.3.5
# various util methods, e.g. relative date generation ('1 day ago'=> date)
keboola.utils
# Convenient library providing base for HTTP clients
# keboola.http-client
mock
freezegun
dateparser
requests
pandas


================================================
File: .travis.yml
================================================
sudo: false

services:
  - docker

jobs:
  include:
    - stage: tests
      script:
        - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
        - docker run $APP_IMAGE python -m unittest discover
      # push test image to ECR - uncomment for testing before deployment
      #  - docker pull quay.io/keboola/developer-portal-cli-v2:latest
      #  - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
      #  - docker tag $APP_IMAGE:latest $REPOSITORY:test
      #  - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
      #  - docker push $REPOSITORY:test
      #  - docker pull quay.io/keboola/syrup-cli:latest
    - stage: deploy_dev_portal
      if: branch = master
      script: "./scripts/update_dev_portal_properties.sh"

before_script:
  - export APP_IMAGE=keboola-component
  - docker -v
  - docker build -t $APP_IMAGE .
  - chmod +x ./scripts/update_dev_portal_properties.sh
  - chmod +x ./deploy.sh

after_success:
  - docker images

deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh
  on:
    tags: true
    branch: master



================================================
File: component_config/component_long_description.md
================================================
Testing functional sample extractor for purposes of the python component template. 
Implements partial Hubspot extractor using the public sandbox token.


================================================
File: component_config/component_short_description.md
================================================
Testing functional sample extractor for purposes of the python component template. 


================================================
File: component_config/configRowSchema.json
================================================
{
    "type": "object",
    "title": "Row Configuration",
    "required": [
        "endpoint",
        "incrementalLoad"
    ],
    "properties": {
        "endpoint": {
            "type": "string",
            "title": "Endpoint",
            "enum": [
                "activity_logs",
                "boards",
                "tags",
                "teams",
                "updates",
                "users"
            ],
            "default": "boards",
            "propertyOrder": 100
        },
        "incrementalLoad": {
            "type": "boolean",
            "title": "Incremental Load",
            "default": true,
            "propertyOrder": 200
        },
        "from_date": {
            "type": "string",
            "title": "From Date",
            "options": {
                "dependencies": {
                    "endpoint": "activity_logs"
                }
            },
            "description": "[Required] - Example: 2021-01-01, 1 day ago, 2 weeks ago",
            "propertyOrder": 300
        },
        "to_date": {
            "type": "string",
            "title": "To Date",
            "options": {
                "dependencies": {
                    "endpoint": "activity_logs"
                }
            },
            "description": "[Required] - Example: 2021-01-01, 1 day ago, 2 weeks ago",
            "propertyOrder": 400
        },
        "board_kind": {
            "title": "The board's kind",
            "type": "string",
            "enum": [
                "public",
                "private",
                "share"
            ],
            "options": {
                "dependencies": {
                    "endpoint": "boards"
                }
            },
            "default": "public",
            "propertyOrder": 500
        },
        "state": {
            "title": "State",
            "description": "The state of the board",
            "type": "string",
            "enum": [
                "all",
                "active",
                "archived",
                "deleted"
            ],
            "options": {
                "dependencies": {
                    "endpoint": "boards"
                }
            },
            "default": "active",
            "propertyOrder": 600
        }
    }
}


================================================
File: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Authentication",
  "required": [
    "#api_key"
  ],
  "properties": {
    "#api_key": {
      "type": "string",
      "format": "password",
      "title": "API Token"
    }
  }
}



================================================
File: component_config/configuration_description.md
================================================
Testing configuration description.


================================================
File: component_config/logger
================================================
gelf


================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"




================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
File: src/component.py
================================================
"""
kds-team.ex-monday
"""

import logging
import dateparser

from keboola.component.base import ComponentBase
from keboola.component.exceptions import UserException

from monday.client import Monday
from mapping_parser.parser import MappingParser

# configuration variables
KEY_API_TOKEN = '#api_key'
KEY_ENDPOINT = 'endpoint'
KEY_INCREMENTAL = 'incrementalLoad'

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [
    KEY_API_TOKEN,
    KEY_ENDPOINT,
    KEY_INCREMENTAL
]
REQUIRED_IMAGE_PARS = []


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def validate_input_parameters(params, additional_parameters):

        additional_parameters_out = additional_parameters.copy()

        # 1 - check empty configurations
        if params == {}:
            raise UserException('Component is not configured.')

        # 2 - check if api token is entered
        api_token = params.get(KEY_API_TOKEN)
        if not api_token:
            raise UserException('API token is not set.')

        # 3 - check endpoint
        endpoint = params.get(KEY_ENDPOINT)
        if not endpoint:
            raise UserException('Endpoint is not set.')

        # 4 - check additional parameters for specific endpoints
        if endpoint == 'activity_logs':
            from_date = additional_parameters.get('from_date')
            to_date = additional_parameters.get('to_date')

            if not from_date or not to_date:
                raise UserException('[From Date] and [To Date] is required for activity_logs endpoint.')

            from_date_form = dateparser.parse(from_date)
            to_date_form = dateparser.parse(to_date)
            day_diff = (to_date_form - from_date_form).days

            if day_diff < 0:
                raise UserException(
                    '[From Date] cannot exceed [To Date]')

            additional_parameters_out['from_date'] = from_date_form.strftime(
                "%Y-%m-%d")
            additional_parameters_out['to_date'] = to_date_form.strftime(
                "%Y-%m-%d")

        elif endpoint == 'boards':
            state = additional_parameters.get('state')
            board_kind = additional_parameters.get('board_kind')

            if not state or not board_kind:
                raise UserException('[State] and [Board Kind] is required.')

        # 5 - check if API token is valid
        test_client = Monday(api_token=api_token)
        test_query = test_client.fetch_query('me')
        test_url = 'https://api.monday.com/v2'
        test_result = test_client.post_request(
            url=test_url, api_token=params.get(KEY_API_TOKEN), body=test_query)

        if 'errors' in test_result:
            raise Exception(
                'Authentication failed. Please check your API token')

        return additional_parameters_out

    def run(self):
        """
        Main execution code
        """

        # User input parameters
        params = self.configuration.parameters

        # component parameters
        api_token = params.get(KEY_API_TOKEN)
        endpoint = params.get(KEY_ENDPOINT)
        incremental = params.get(KEY_INCREMENTAL)
        additional_parameters = {}
        for i in params:
            if i not in REQUIRED_PARAMETERS:
                additional_parameters[i] = params[i]

        # Validate user inputs and adjust parameters if necessary
        additional_parameters = self.validate_input_parameters(
            params, additional_parameters)

        # Monday request client
        monday_client = Monday(api_token=api_token)

        # Mapping parser client
        endpoint_parser = MappingParser(
            destination=self.tables_out_path,
            endpoint=endpoint,
            incremental=incremental)

        monday_client.fetch(
            endpoint=endpoint,
            mapping_parser=endpoint_parser,
            additional_parameters=additional_parameters)


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
File: src/junk.json
================================================
{
    "data": {
        "boards": [
            {
                "id": "2057237369",
                "name": "testest",
                "workspace_id": null,
                "workspace": null,
                "owner": {
                    "id": 26145064,
                    "name": "leo"
                },
                "state": "active",
                "board_folder_id": null,
                "board_kind": "public",
                "communication": null,
                "description": null,
                "permissions": "everyone",
                "pos": "32768",
                "subscribers": [
                    {
                        "id": 26145064
                    }
                ],
                "tags": [],
                "top_group": {
                    "id": "topics"
                },
                "updated_at": "2021-12-21T18:31:36Z",
                "groups": [
                    {
                        "id": "topics",
                        "title": "Group Title",
                        "archived": null,
                        "color": "#579bfc",
                        "deleted": null,
                        "position": "65536"
                    },
                    {
                        "id": "group_title",
                        "title": "Group Title",
                        "archived": null,
                        "color": "#a25ddc",
                        "deleted": null,
                        "position": "98304"
                    }
                ],
                "columns": [
                    {
                        "id": "name",
                        "archived": false,
                        "settings_str": "{}",
                        "title": "Name",
                        "type": "name",
                        "width": 400
                    },
                    {
                        "id": "person",
                        "archived": false,
                        "settings_str": "{}",
                        "title": "Person",
                        "type": "multiple-person",
                        "width": null
                    },
                    {
                        "id": "status",
                        "archived": false,
                        "settings_str": "{\"labels\":{\"0\":\"Working on it\",\"1\":\"Done\",\"2\":\"Stuck\"},\"labels_positions_v2\":{\"0\":0,\"1\":2,\"2\":1,\"5\":3},\"labels_colors\":{\"0\":{\"color\":\"#fdab3d\",\"border\":\"#E99729\",\"var_name\":\"orange\"},\"1\":{\"color\":\"#00c875\",\"border\":\"#00B461\",\"var_name\":\"green-shadow\"},\"2\":{\"color\":\"#e2445c\",\"border\":\"#CE3048\",\"var_name\":\"red-shadow\"}}}",
                        "title": "Status",
                        "type": "color",
                        "width": null
                    },
                    {
                        "id": "date4",
                        "archived": false,
                        "settings_str": "{}",
                        "title": "Date",
                        "type": "date",
                        "width": null
                    }
                ]
            },
            {
                "id": "2057206595",
                "name": "Subitems of TEST",
                "workspace_id": null,
                "workspace": null,
                "owner": {
                    "id": 26145064,
                    "name": "leo"
                },
                "state": "active",
                "board_folder_id": null,
                "board_kind": "public",
                "communication": null,
                "description": null,
                "permissions": "everyone",
                "pos": "65536.0",
                "subscribers": [
                    {
                        "id": 26145064
                    }
                ],
                "tags": [],
                "top_group": {
                    "id": "subitems_of_596368986"
                },
                "updated_at": "2021-12-21T18:23:16Z",
                "groups": [
                    {
                        "id": "subitems_of_596368986",
                        "title": "Subitems",
                        "archived": null,
                        "color": "#a25ddc",
                        "deleted": null,
                        "position": "32768.0"
                    },
                    {
                        "id": "topics",
                        "title": "Subitems",
                        "archived": null,
                        "color": "#579bfc",
                        "deleted": null,
                        "position": "65536"
                    }
                ],
                "columns": [
                    {
                        "id": "name",
                        "archived": false,
                        "settings_str": "{}",
                        "title": "Name",
                        "type": "name",
                        "width": 300
                    },
                    {
                        "id": "person",
                        "archived": false,
                        "settings_str": "{}",
                        "title": "Owner",
                        "type": "multiple-person",
                        "width": 98
                    },
                    {
                        "id": "status",
                        "archived": false,
                        "settings_str": "{\"done_colors\":[1],\"hide_footer\":true,\"labels\":{\"0\":\"Working on it\",\"1\":\"Done\",\"2\":\"Stuck\"},\"labels_positions_v2\":{\"0\":1,\"1\":2,\"2\":0,\"3\":3,\"4\":4,\"5\":9,\"6\":5,\"8\":6,\"9\":7,\"10\":8},\"labels_colors\":{\"0\":{\"color\":\"#fdab3d\",\"border\":\"#E99729\",\"var_name\":\"orange\"},\"1\":{\"color\":\"#00c875\",\"border\":\"#00B461\",\"var_name\":\"green-shadow\"},\"2\":{\"color\":\"#e2445c\",\"border\":\"#CE3048\",\"var_name\":\"red-shadow\"}}}",
                        "title": "Status",
                        "type": "color",
                        "width": 136
                    },
                    {
                        "id": "date0",
                        "archived": false,
                        "settings_str": "{}",
                        "title": "Date",
                        "type": "date",
                        "width": 140
                    }
                ]
            },
            {
                "id": "2057206572",
                "name": "TEST",
                "workspace_id": null,
                "workspace": null,
                "owner": {
                    "id": 26145064,
                    "name": "leo"
                },
                "state": "active",
                "board_folder_id": null,
                "board_kind": "public",
                "communication": null,
                "description": "The essence of this board is to provide a high-level overview of your project. This is the place to plan and track your progress. \nFor more information and a full explanation of how to use this template check out this video:\n https://www.youtube.com/watch?v=ug5TyvMd-3Y&feature=youtu.be",
                "permissions": "everyone",
                "pos": "16896.11215209961",
                "subscribers": [
                    {
                        "id": 26145064
                    }
                ],
                "tags": [],
                "top_group": {
                    "id": "new_group88144"
                },
                "updated_at": "2021-12-21T18:23:31Z",
                "groups": [
                    {
                        "id": "new_group88144",
                        "title": "More information about this template:",
                        "archived": false,
                        "color": "#333333",
                        "deleted": false,
                        "position": "65344"
                    },
                    {
                        "id": "new_group29179",
                        "title": "Planning",
                        "archived": null,
                        "color": "#00c875",
                        "deleted": null,
                        "position": "65472.0"
                    },
                    {
                        "id": "new_group43041",
                        "title": "Execution",
                        "archived": null,
                        "color": "#fdab3d",
                        "deleted": null,
                        "position": "98208"
                    },
                    {
                        "id": "topics",
                        "title": "Launch",
                        "archived": null,
                        "color": "#037f4c",
                        "deleted": null,
                        "position": "130944"
                    },
                    {
                        "id": "duplicate_of_project_a",
                        "title": "Monitoring",
                        "archived": null,
                        "color": "#0086c0",
                        "deleted": null,
                        "position": "131072.0"
                    }
                ],
                "columns": [
                    {
                        "id": "name",
                        "archived": false,
                        "settings_str": "{}",
                        "title": "Name",
                        "type": "name",
                        "width": 240
                    },
                    {
                        "id": "people0",
                        "archived": false,
                        "settings_str": "{\"max_people_allowed\":\"0\"}",
                        "title": "Owner",
                        "type": "multiple-person",
                        "width": null
                    },
                    {
                        "id": "subitems",
                        "archived": false,
                        "settings_str": "{\"allowMultipleItems\":true,\"itemTypeName\":\"column.subtasks.title\",\"displayType\":\"BOARD_INLINE\",\"boardIds\":[2057206595],\"boardId\":1135346987}",
                        "title": "Subitems",
                        "type": "subtasks",
                        "width": null
                    },
                    {
                        "id": "status",
                        "archived": false,
                        "settings_str": "{\"done_colors\":[1],\"color_mapping\":{\"4\":19,\"8\":11,\"11\":8,\"19\":4},\"labels\":{\"0\":\"Working on it\",\"1\":\"Done\",\"2\":\"Stuck\",\"3\":\"Planned\",\"4\":\"Up next\",\"6\":\"Ready for review\",\"7\":\"Future steps\",\"9\":\"On hold\"},\"labels_positions_v2\":{\"0\":0,\"1\":1,\"2\":2,\"3\":4,\"4\":5,\"5\":8,\"6\":6,\"7\":3,\"9\":7},\"labels_colors\":{\"0\":{\"color\":\"#fdab3d\",\"border\":\"#E99729\",\"var_name\":\"orange\"},\"1\":{\"color\":\"#00c875\",\"border\":\"#00B461\",\"var_name\":\"green-shadow\"},\"2\":{\"color\":\"#e2445c\",\"border\":\"#CE3048\",\"var_name\":\"red-shadow\"},\"3\":{\"color\":\"#0086c0\",\"border\":\"#3DB0DF\",\"var_name\":\"blue-links\"},\"4\":{\"color\":\"#FF642E\",\"border\":\"#E05828\",\"var_name\":\"dark-orange\"},\"6\":{\"color\":\"#037f4c\",\"border\":\"#006B38\",\"var_name\":\"grass-green\"},\"7\":{\"color\":\"#579bfc\",\"border\":\"#4387E8\",\"var_name\":\"bright-blue\"},\"9\":{\"color\":\"#FFCB00\",\"border\":\"#C0AB1B\",\"var_name\":\"yellow\"}}}",
                        "title": "Status",
                        "type": "color",
                        "width": 106
                    },
                    {
                        "id": "status_13",
                        "archived": false,
                        "settings_str": "{\"done_colors\":[1],\"hide_footer\":true,\"color_mapping\":{\"0\":3,\"1\":107,\"2\":16,\"3\":0,\"16\":2,\"107\":1},\"labels\":{\"0\":\"Medium\",\"1\":\"High\",\"2\":\"Low\"},\"labels_colors\":{\"0\":{\"color\":\"#0086c0\",\"border\":\"#3DB0DF\",\"var_name\":\"blue-links\"},\"1\":{\"color\":\"#225091\",\"border\":\"#225091\",\"var_name\":\"navy\"},\"2\":{\"color\":\"#66CCFF\",\"border\":\"#5AB3E0\",\"var_name\":\"turquoise\"}}}",
                        "title": "Priority",
                        "type": "color",
                        "width": null
                    },
                    {
                        "id": "timeline",
                        "archived": false,
                        "settings_str": "{\"hide_footer\":false}",
                        "title": "Timeline",
                        "type": "timerange",
                        "width": null
                    },
                    {
                        "id": "labor_budget_spent",
                        "archived": false,
                        "settings_str": "{\"unit\":{\"symbol\":\"$\",\"custom_unit\":\"\",\"direction\":\"left\"}}",
                        "title": "Cost",
                        "type": "numeric",
                        "width": 112
                    },
                    {
                        "id": "files",
                        "archived": false,
                        "settings_str": "{\"hide_footer\":false}",
                        "title": "Related Assets",
                        "type": "file",
                        "width": null
                    }
                ]
            }
        ]
    },
    "account_id": 10499375
}


================================================
File: src/mapping_parser/mapping.json
================================================
{
    "activity_logs": {
        "id": {
            "type": "column",
            "mapping": {
                "destination": "board_id",
                "primaryKey": true
            }
        },
        "activity_logs": {
            "type": "table",
            "destination": "activity_logs_details",
            "tableMapping": {
                "parent_id": {
                    "type": "user",
                    "mapping": {
                        "destination": "board_id",
                        "primaryKey": true
                    }
                },
                "id": {
                    "type": "column",
                    "mapping": {
                        "destination": "id",
                        "primaryKey": true
                    }
                },
                "created_at": "created_at",
                "entity": "entity",
                "user_id": "user_id",
                "event": "event",
                "data": "data"
            }
        }
    },
    "boards": {
        "id": {
            "type": "column",
            "mapping": {
                "destination": "id",
                "primaryKey": true
            }
        },
        "name": "name",
        "workspace_id": "workspace_id",
        "workspace": {
            "type": "table",
            "destination": "workspace",
            "tableMapping": {
                "id": {
                    "type": "column",
                    "mapping": {
                        "destination": "id",
                        "primaryKey": true
                    }
                },
                "name": "name",
                "kind": "kind",
                "description": "description"
            }
        },
        "owner.id": "owner_id",
        "owner.name": "owner_name",
        "state": "state",
        "board_folder_id": "board_folder_id",
        "board_kind": "board_kind",
        "communication": "communication",
        "description": "description",
        "permissions": "permissions",
        "pos": "pos",
        "subscribers": {
            "type": "table",
            "destination": "boards_subscribers",
            "tableMapping": {
                "id": {
                    "type": "column",
                    "mapping": {
                        "destination": "id",
                        "primaryKey": true
                    }
                },
                "parent_id": {
                    "type": "user",
                    "mapping": {
                        "destination": "board_id",
                        "primaryKey": true
                    }
                }
            }
        },
        "tags": {
            "type": "table",
            "destination": "boards_tags",
            "tableMapping": {
                "id": {
                    "type": "column",
                    "mapping": {
                        "destination": "id",
                        "primaryKey": true
                    }
                },
                "parent_id": {
                    "type": "user",
                    "mapping": {
                        "destination": "board_id",
                        "primaryKey": true
                    }
                }
            }
        },
        "top_group.id": "top_group_id",
        "updated_at": "updated_at",
        "groups": {
            "type": "table",
            "destination": "boards_groups",
            "tableMapping": {
                "id": {
                    "type": "column",
                    "mapping": {
                        "destination": "id",
                        "primaryKey": true
                    }
                },
                "title": "title",
                "archived": "archived",
                "color": "color",
                "deleted": "deleted",
                "position": "position",
                "parent_id": {
                    "type": "user",
                    "mapping": {
                        "destination": "board_id",
                        "primaryKey": true
                    }
                }
            }
        },
        "columns": {
            "type": "table",
            "destination": "boards_columns",
            "tableMapping": {
                "id": {
                    "type": "column",
                    "mapping": {
                        "destination": "id",
                        "priamryKey": true
                    }
                },
                "archived": "archived",
                "settings_str": "settings_str",
                "title": "title",
                "type": "type",
                "width": "width",
                "parent_id": {
                    "type": "user",
                    "mapping": {
                        "destination": "board_id",
                        "primaryKey": true
                    }
                }
            }
        }
    },
    "items": {
        "board.id": "board_id",
        "name": "name",
        "created_at": "created_at",
        "creator": "creator",
        "creator_id": "creator_id",
        "group.id": "group_id",
        "id": {
            "type": "column",
            "mapping": {
                "destination": "id",
                "priamryKey": true
            }
        },
        "parent_item.id": "parent_item_id",
        "state": "state",
        "subscribers": {
            "type": "table",
            "destination": "items_subscribers",
            "tableMapping": {
                "id": {
                    "type": "column",
                    "mapping": {
                        "destination": "id",
                        "priamryKey": true
                    }
                },
                "parent_id": {
                    "type": "user",
                    "mapping": {
                        "destination": "item_id",
                        "priamryKey": true
                    }
                }
            }
        },
        "updated_at": "updated_at",
        "updates": {
            "type": "table",
            "destination": "items_updates",
            "tableMapping": {
                "id": {
                    "type": "column",
                    "mapping": {
                        "destination": "id",
                        "priamryKey": true
                    }
                },
                "parent_id": {
                    "type": "user",
                    "mapping": {
                        "destination": "item_id",
                        "priamryKey": true
                    }
                }
            }
        }
    },
    "tags": {
        "id": {
            "type": "column",
            "mapping": {
                "destination": "id",
                "priamryKey": true
            }
        },
        "name": "name",
        "color": "color"
    },
    "teams": {
        "id": {
            "type": "column",
            "mapping": {
                "destination": "id",
                "priamryKey": true
            }
        },
        "name": "name",
        "picture_url": "picture_url",
        "users.id": "user_id"
    },
    "updates": {
        "id": {
            "type": "column",
            "mapping": {
                "destination": "id",
                "primaryKey": true
            }
        },
        "body": "body",
        "created_at": "created_at",
        "creator.id": "creator_id",
        "replies": {
            "type": "table",
            "destination": "updates_replies",
            "tableMapping": {
                "id": {
                    "type": "column",
                    "mapping": {
                        "destination": "id",
                        "primaryKey": true
                    }
                },
                "parent_id": {
                    "type": "user",
                    "mapping": {
                        "destination": "update_id",
                        "primaryKey": true
                    }
                },
                "creator_id": "creator_id",
                "created_at": "created_at",
                "text_body": "text_body",
                "updated_at": "updated_at",
                "body": "body"
            }
        },
        "text_body": "text_body",
        "updated_at": "updated_at"
    },
    "users": {
        "id": {
            "type": "column",
            "mapping": {
                "destination": "id",
                "primaryKey": true
            }
        },
        "created_at": "created_at",
        "email": "email",
        "account.name": "account_name",
        "account.id": "account_id",
        "birthday": "birthday",
        "country_code": "country_code",
        "join_date": "join_date",
        "enabled": "enabled",
        "is_admin": "is_admin",
        "is_guest": "is_guest",
        "is_pending": "is_pending",
        "is_view_only": "is_view_only",
        "is_verified": "is_verified",
        "location": "location",
        "mobile_phone": "mobile_phone",
        "name": "name",
        "photo": "photo",
        "photo_original": "photo_original",
        "photo_small": "photo_small",
        "photo_thumb": "photo_thumb",
        "photo_thumb_small": "photo_thumb_small",
        "photo_tiny": "photo_tiny",
        "time_zone_identifier": "time_zone_identifier",
        "title": "title",
        "url": "url",
        "utc_hours_diff": "utc_hours_diff"
    }
}


================================================
File: src/mapping_parser/parser.py
================================================
import os
import json
import pandas as pd

# DIR_PATH = os.path.join(os.path.basename(os.getcwd()),'mapping_parser')
# mapping_source = os.path.join(DIR_PATH, 'mapping.json')
# with open('mapping_parser/mapping.json') as f:
with open('/code/src/mapping_parser/mapping.json') as f:
    MAPPING = json.load(f)


class MappingParser:
    def __init__(self, destination, endpoint, incremental=False, mapping=None):

        self.destination = destination
        self.endpoint = endpoint
        self.mapping = mapping if mapping else MAPPING[endpoint]
        self.incremental = incremental

    def parse(self, endpoint_data, parent_key=None):
        output = []
        primary_key = []

        # Countermeasures for response coming in as DICT
        if isinstance(endpoint_data, dict):
            endpoint_data = [endpoint_data]

        for row in endpoint_data:
            row_json = {}

            for m in self.mapping:
                col_type = self.mapping[m].get('type') if not isinstance(self.mapping[m], str) else 'string'

                if col_type == 'string':
                    key = self.mapping[m]
                    value = self.fetch_value(row=row, key=m)
                    row_json[key] = value

                elif col_type == 'column' or not col_type:
                    key = self.mapping[m]['mapping']['destination']
                    # value = row[m]
                    value = self.fetch_value(row=row, key=m)
                    row_json[key] = value

                    # Primary key for incremental load
                    if "primaryKey" in self.mapping[m]['mapping'] and key not in primary_key:
                        primary_key.append(key)

                elif col_type == 'user':
                    key = self.mapping[m]['mapping']['destination']
                    value = parent_key
                    row_json[key] = value

                    # Primary key for incremental load
                    primary_key.append(
                        key) if key not in primary_key else ''

                elif col_type == 'table':
                    endpoint = self.mapping[m]['destination']
                    mapping = self.mapping[m]['tableMapping']
                    parent_key = row['id']
                    data = self.fetch_value(row=row, key=m)
                    # Failsafe for entities which are empty are do not have values
                    data = [] if not data else data

                    table_parser = MappingParser(
                        destination=self.destination,
                        endpoint=endpoint,
                        mapping=mapping,
                        incremental=self.incremental
                    )
                    table_parser.parse(endpoint_data=data,
                                       parent_key=parent_key)

            output.append(row_json)

        # Output the chunk
        if output:
            self._output(df_json=output,
                         filename=self.endpoint,
                         primary_key=primary_key)

    @staticmethod
    def fetch_value(row, key):
        """
        Fetching value from a nested object
        """
        key_list = key.split('.')
        value = row

        try:
            for k in key_list:
                value = value[k]

        except Exception:
            value = ''

        return value

    def _output(self, df_json, filename, primary_key):
        output_filename = f'{self.destination}/{filename}.csv'
        if df_json:
            data_output = pd.DataFrame(df_json, dtype=str)
            if not os.path.isfile(output_filename):
                with open(output_filename, 'w') as b:
                    data_output.to_csv(b, index=False)
                b.close()

                # output manifest
                self._produce_manifest(
                    filename=self.endpoint, incremental=self.incremental, primary_key=primary_key)

            else:
                with open(output_filename, 'a') as b:
                    data_output.to_csv(b, index=False, header=False)
                b.close()

    def _produce_manifest(self, filename, incremental, primary_key):
        manifest_filename = f'{self.destination}/{filename}.csv.manifest'
        manifest = {
            'incremental': incremental,
            'primary_key': primary_key,
        }

        with open(manifest_filename, 'w') as file_out:
            json.dump(manifest, file_out)



================================================
File: src/monday/client.py
================================================
import logging
import json
import requests

# DIR_PATH = os.path.join(os.path.basename(os.getcwd()),'monday')

MONDAY_URL = 'https://api.monday.com/v2'

MONDAY_ENDPOINT_CONFIGS = {
    'activity_logs': {
        'endpoint': 'activity_logs',
        'dataType': 'data.boards'
    },
    'boards': {
        'endpoint': 'boards',
        'dataType': 'data.boards',
        'pagination': 'page'
    },
    'items': {
        'endpoint': 'items',
        'dataType': 'data.items'
    },
    'tags': {
        'endpoint': 'tags',
        'dataType': 'data.tags'
    },
    'teams': {
        'endpoint': 'teams',
        'dataType': 'data.teams'
    },
    'updates': {
        'endpoint': 'updates',
        'dataType': 'data.updates'
    },
    'users': {
        'endpoint': 'users',
        'dataType': 'data.users'
    }
}


class Monday:
    def __init__(self, api_token):
        self.API_TOKEN = api_token

    @staticmethod
    def post_request(url, api_token, body):

        headers = {
            'Authorization': api_token,
            'Content-Type': 'application/json'
        }

        r = requests.post(
            url=url,
            headers=headers,
            data=json.dumps(body)
        )

        if r.status_code != 200:
            raise Exception(f"Request failed with status code {r.status_code}. Response content: {r.text}")

        return r.json()

    @staticmethod
    def fetch_query(endpoint):

        # fetching graphql query
        # graphql_filename = f'monday/graphql_queries/{endpoint}.gql'
        graphql_filename = f'/code/src/monday/graphql_queries/{endpoint}.gql'
        with open(graphql_filename, 'r') as f:
            graphql_query = {
                'query': f.read()
            }
        f.close()

        return graphql_query

    @staticmethod
    def _construct_query(request_body, additional_parameters):

        temp_body = request_body.copy()
        for i in additional_parameters:
            wildcard = '{{' + i + '}}'
            temp_body['query'] = temp_body['query'].replace(
                wildcard, str(additional_parameters[i]))

        return temp_body

    def fetch(self, endpoint, mapping_parser, additional_parameters=None):
        iterator = True

        # request parameters
        body = self.fetch_query(endpoint)

        # query parameters
        pagination_parameters = {
            'page': 1,
            'limit': 200
        }

        if additional_parameters:
            for i in additional_parameters:
                pagination_parameters[i] = additional_parameters[i]

        while iterator:

            # check if query has pagination
            if '{{page}}' not in body:
                logging.debug(f'Pagination NOT detected for [{endpoint}], will only fetch first page.')
                iterator = False

            logging.info(f'Processing [{endpoint}] - Page {pagination_parameters["page"]}')

            request_body = self._construct_query(body, pagination_parameters)

            logging.debug(f"request_body: {request_body}")

            data_in = self.post_request(url=MONDAY_URL, api_token=self.API_TOKEN, body=request_body)

            logging.debug(f"Response: {data_in}")

            endpoint_data_in = mapping_parser.fetch_value(data_in, MONDAY_ENDPOINT_CONFIGS[endpoint]['dataType'])

            # Pagination settings
            if endpoint == 'activity_logs':
                endpoint_data_in_len = 0
                for i in endpoint_data_in:
                    endpoint_data_in_len += len(i['activity_logs'])
            else:
                endpoint_data_in_len = len(endpoint_data_in)

            if endpoint_data_in_len > 0:
                mapping_parser.parse(endpoint_data=endpoint_data_in)

                # adjust pagination parameters
                pagination_parameters['page'] += 1
            else:
                iterator = False



================================================
File: src/monday/graphql_queries/activity_logs.gql
================================================
query {
  boards {
    id
    activity_logs (from: "{{from_date}}T00:00:00Z", to: "{{to_date}}T00:00:00Z", limit: {{limit}}, page:{{page}}) {
      id
      created_at
      entity
      user_id
      event
      data
    }
  }
}


================================================
File: src/monday/graphql_queries/boards.gql
================================================
query {
  boards (limit: {{limit}}, page: {{page}}, board_kind: {{board_kind}}){
    id
    name
    workspace_id
    workspace {
        id
        name
        kind
        description
    }
    owner {
      id
      name
    }
    state
    board_folder_id
    board_kind
    communication
    description
    permissions
    subscribers {
      id
    }
    tags {
      id
    }
    top_group {
      id
    }
    updated_at
    groups {
      id
      title
      archived
      color
      deleted
      position
    }
    columns {
      id
      archived
      settings_str
      title
      type
      width
    }
  }
}


================================================
File: src/monday/graphql_queries/items.gql
================================================
query {
    items_page {
      	board {
      	  id
      	}
        name
      	created_at
      	creator {
      	  id
      	}
      creator_id
      group {
        id
      }
      id
      name
      parent_item {
        id
      }
      state
      subscribers {
        id
      }
      updated_at
      updates {
        id
      }
    }
}


================================================
File: src/monday/graphql_queries/me.gql
================================================
query {
  me {
    is_guest
    created_at
    name
    id
    }
}


================================================
File: src/monday/graphql_queries/tags.gql
================================================
query {
    tags {
        id
      	name
      	color
    }
}


================================================
File: src/monday/graphql_queries/teams.gql
================================================
query {
    teams {
        id
        name
        picture_url
        users {
            id
        }
    }
}


================================================
File: src/monday/graphql_queries/updates.gql
================================================
query {
    updates (limit: {{limit}}, page:{{page}}) {
        body
        id
    created_at
    creator {
      id
    }
    replies {
      id
      creator_id
      created_at
      text_body
      updated_at
      body
    }
    text_body
    updated_at
  }
}


================================================
File: src/monday/graphql_queries/users.gql
================================================
query {
    users (limit: {{limit}}, page: {{page}}) {
      id
        created_at
        email
        account {
            name
            id
        }
      birthday
      country_code
      join_date
      enabled
      is_admin
      is_guest
      is_pending
      is_view_only
      is_verified
      location
      mobile_phone
      name
      phone
      photo_original
      photo_small
      photo_thumb
      photo_thumb_small
      photo_tiny
			time_zone_identifier
      title
      url
      utc_hours_diff
    }
}


================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
File: .github/workflows/build_n_test.yml
================================================
name: Build & Test
on: [ push ]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_IMAGE: keboola-component
      KBC_DEVELOPERPORTAL_USERNAME: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
      KBC_DEVELOPERPORTAL_VENDOR: ${{ secrets.KBC_DEVELOPERPORTAL_VENDOR }}
      KBC_DEVELOPERPORTAL_APP: ${{ secrets.KBC_DEVELOPERPORTAL_APP }}
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --tag=$APP_IMAGE
      - name: Run Flake Lint
        run: docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
      - name: Unit Test
        run: docker run $APP_IMAGE python -m unittest discover
      - name: Set tag env
        run: echo "GITHUB_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

        # Push test tag, uncomment to enable
#      - name: Push test image
#        uses: odinuv/action-push-to-ecr@master
#        with:
#          vendor: ${{ secrets.KBC_DEVELOPERPORTAL_VENDOR }}
#          app_id: ${{ secrets.KBC_DEVELOPERPORTAL_APP }}
#          username: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
#          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
#          tag: test
#          push_latest: true
#          source_image: keboola-component


================================================
File: .github/workflows/deploy.yml
================================================
name: Deploy to developer portal

on:
  push:
    tags:
      - '[0-9]*.[0-9]*.[0-9]*'

jobs:
  build_n_deploy:
    runs-on: ubuntu-latest
    env:
      APP_IMAGE: keboola-component
      KBC_DEVELOPERPORTAL_USERNAME: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
      KBC_DEVELOPERPORTAL_VENDOR: ${{ secrets.KBC_DEVELOPERPORTAL_VENDOR }}
      KBC_DEVELOPERPORTAL_APP: ${{ secrets.KBC_DEVELOPERPORTAL_APP }}
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --tag=$APP_IMAGE
      - name: Run Flake Lint
        run: docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
      - name: Unit Test
        run: docker run $APP_IMAGE python -m unittest discover

        # Functional tests in project - uncomment to enable
#      - name: Functional tests
#        run: |
#          docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
#          docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test

      - uses: actions/checkout@v2
      - name: Set tag env
        run: echo "GITHUB_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Deploy
        run: |
          docker pull quay.io/keboola/developer-portal-cli-v2:latest
          chmod +x ./scripts/update_dev_portal_properties.sh
          chmod +x ./deploy.sh
      - name: Update Developer portal properties
        run: ./scripts/update_dev_portal_properties.sh
      - name: Deploy
        run: ./deploy.sh

