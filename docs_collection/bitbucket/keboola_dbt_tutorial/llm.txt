Directory structure:
└── kds_consulting_team-keboola_dbt_tutorial/
    ├── README.md
    ├── dbt_project.yml
    ├── packages.yml
    ├── analysis/
    │   ├── dag.html
    │   ├── dbt_artifacts.ipynb
    │   ├── freshness.yml
    │   ├── sqlparsing.ipynb
    │   └── .gitkeep
    ├── macros/
    │   ├── date_format.sql
    │   ├── randint.sql
    │   └── yyyymmdd.sql
    ├── models/
    │   └── beers/
    │       ├── beers.sql
    │       ├── beers_with_breweries.sql
    │       ├── breweries.sql
    │       ├── order_lines.sql
    │       ├── orders.sql
    │       ├── promo_deliveries.sql
    │       ├── sales.sql
    │       └── schema.yml
    ├── snapshots/
    │   └── .gitkeep
    └── tests/
        ├── assert_ibu_0_100_range.sql
        └── .gitkeep

================================================
File: README.md
================================================
# dbt + Datafold demo project
Adapted for Keboola environment



================================================
File: dbt_project.yml
================================================

# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models

name: 'beer_analytics'
version: '1.0.0'
config-version: 2



# This setting configures which "profile" dbt uses for this project.
profile: beer_analytics

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
seed-paths: ["data"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
    - "target"
    - "dbt_modules"


# https://docs.getdbt.com/reference/project-configs/quoting
quoting:
  database: true
  schema: true
  identifier: true


#sources:
#  freshness: # default freshness
#    warn_after: {count: 1, period: day}
#    error_after: {count: 7, period: day}

# Seeds are handled by Keboola platform (uploaded files)
#seeds:
#  beer_analytics:
#    +enabled: true
#    seed_beers:
#      +column_types:
#        ibu: decimal
#        abv: decimal


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  beer_analytics:
      # Applies to all files under models/example/
      beers:
          materialized: view



================================================
File: packages.yml
================================================
packages:
  - package: dbt-labs/dbt_utils
    version: 0.8.6

  - package: data-mie/dbt_profiler
    version: 0.4.1



================================================
File: analysis/dag.html
================================================
<html>
<head>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vis-network@latest/styles/vis-network.css" type="text/css" />
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vis-network@latest/dist/vis-network.min.js"> </script>
<center>
<h1></h1>
</center>

<!-- <link rel="stylesheet" href="../node_modules/vis/dist/vis.min.css" type="text/css" />
<script type="text/javascript" src="../node_modules/vis/dist/vis.js"> </script>-->

<style type="text/css">

        #mynetwork {
            width: 800px;
            height: 1200px;
            background-color: #ffffff;
            border: 1px solid lightgray;
            position: relative;
            float: left;
        }

        

        

        
</style>

</head>

<body>
<div id = "mynetwork"></div>


<script type="text/javascript">

    // initialize global variables.
    var edges;
    var nodes;
    var network; 
    var container;
    var options, data;

    
    // This method is responsible for drawing the graph, returns the drawn network
    function drawGraph() {
        var container = document.getElementById('mynetwork');
        
        

        // parsing and collecting nodes and edges from the python
        nodes = new vis.DataSet([{"columns": {"\"abv\"": {"description": "", "meta": {}, "name": "\"abv\"", "tags": []}, "\"brewery_id\"": {"description": "", "meta": {}, "name": "\"brewery_id\"", "tags": []}, "\"ibu\"": {"description": "", "meta": {}, "name": "\"ibu\"", "tags": []}, "\"id\"": {"description": "", "meta": {}, "name": "\"id\"", "tags": []}, "\"name\"": {"description": "", "meta": {}, "name": "\"name\"", "tags": []}, "\"ounces\"": {"description": "", "meta": {}, "name": "\"ounces\"", "tags": []}, "\"style\"": {"description": "", "meta": {}, "name": "\"style\"", "tags": []}}, "config": {"enabled": true}, "created_at": 1658792883.997974, "database": "SAPI_9119", "description": "list of beers", "fqn": ["beer_analytics", "beers", "WORKSPACE_863912091", "beers"], "freshness": {"error_after": {"count": 30, "period": "day"}, "warn_after": {"count": 7, "period": "day"}}, "id": "source.beer_analytics.WORKSPACE_863912091.beers", "identifier": "seed_beers", "label": "source.beer_analytics.WORKSPACE_863912091.beers", "loaded_at_field": "\"_timestamp\"", "loader": "", "meta": {}, "name": "beers", "original_file_path": "models/beers/sources.yml", "package_name": "beer_analytics", "path": "models/beers/sources.yml", "quoting": {"database": true, "identifier": true, "schema": true}, "relation_name": "\"SAPI_9119\".\"WORKSPACE_863912091\".\"seed_beers\"", "resource_type": "source", "root_path": "/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold", "schema": "WORKSPACE_863912091", "shape": "dot", "size": 10, "source_description": "", "source_meta": {}, "source_name": "WORKSPACE_863912091", "tags": ["beers", "ecommerce"], "unique_id": "source.beer_analytics.WORKSPACE_863912091.beers", "unrendered_config": {}}, {"alias": "beers", "checksum": {"checksum": "5ee6626d03f728f9b7510871fb582ff7f526636a41a725bb28b3d659c3f1f5f9", "name": "sha256"}, "columns": {"abv": {"description": "Alcohol by volume", "meta": {"metrics": {"avg_abv": {"description": "Average Alcohol by volume", "type": "average"}}}, "name": "abv", "tags": []}, "beer_id": {"description": "The unique indentifier of the beer", "meta": {"dimension": {"sql": "${TABLE}.beer_id"}, "metrics": {"num_unique_beers": {"type": "count_distinct"}}, "primary-key": true}, "name": "beer_id", "tags": []}, "beer_name": {"description": "The name of the beer as on the label", "meta": {"dimension": {"sql": "${TABLE}.beer_name"}}, "name": "beer_name", "tags": []}, "beer_style": {"description": "The style of the beer (IPA, Porter, etc)", "meta": {"dimension": {"sql": "${TABLE}.beer_style"}, "metrics": {"num_unique_beer_styles": {"description": "Distinct Beer Styles", "type": "count_distinct"}}}, "name": "beer_style", "tags": []}, "bitterness": {"description": "The bitterness category of the beer (based on IBUs)", "meta": {"dimension": {"description": "Bitterness Types", "sql": "${TABLE}.bitterness"}}, "name": "bitterness", "tags": []}, "brewery_id": {"description": "The unique indentifier of the brewery", "meta": {}, "metrics": {"num_unique_breweries": {"description": "Distinct Number of Breweries", "type": "count_distinct"}}, "name": "brewery_id", "tags": []}, "ibu": {"description": "Bitterness in International Bitterness Units", "meta": {"metrics": {"avg_ibu": {"description": "Average Bitterness in International Bitterness Units", "type": "average"}}}, "name": "ibu", "tags": []}, "ounces": {"description": "Volume of a single unit", "meta": {"metrics": {"avg_ounces": {"description": "Average Volume of a single unit", "type": "average"}}}, "name": "ounces", "tags": []}}, "config": {"column_types": {}, "enabled": true, "materialized": "table", "meta": {"owner": "fisa@keboola.com"}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "tags": []}, "created_at": 1658792883.9402492, "database": "SAPI_9119", "deferred": false, "depends_on": {"macros": [], "nodes": ["source.beer_analytics.WORKSPACE_863912091.beers"]}, "description": "Beer List", "docs": {"show": true}, "fqn": ["beer_analytics", "beers", "beers"], "id": "model.beer_analytics.beers", "label": "model.beer_analytics.beers", "meta": {"owner": "fisa@keboola.com"}, "name": "beers", "original_file_path": "models/beers/beers.sql", "package_name": "beer_analytics", "patch_path": "beer_analytics://models/beers/schema.yml", "path": "beers/beers.sql", "raw_sql": "{{ config(\n    materialized=\"table\"\n) }}\n\nSELECT\n  \"id\"            AS beer_id,\n  TRIM(\"name\")    AS beer_name,\n  \"style\"         AS beer_style,\n  \"abv\"           AS abv,\n  \"ibu\"           AS ibu,\n  CASE \n       WHEN \"ibu\" \u003c= 50 THEN \u0027Malty\u0027\n       WHEN \"ibu\" \u003e 50 THEN \u0027Hoppy\u0027\n   END AS bitterness,\n  \"brewery_id\"    AS brewery_id,\n  \"ounces\"        AS ounces\nFROM\n  {{ source(\u0027WORKSPACE_863912091\u0027, \u0027beers\u0027) }}", "refs": [], "resource_type": "model", "root_path": "/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold", "schema": "WORKSPACE_863912091", "shape": "dot", "size": 10, "sources": [["WORKSPACE_863912091", "beers"]], "tags": [], "unique_id": "model.beer_analytics.beers", "unrendered_config": {"materialized": "table"}}, {"columns": {}, "config": {"enabled": true}, "created_at": 1658792883.99808, "database": "SAPI_9119", "description": "list of breweries", "fqn": ["beer_analytics", "beers", "WORKSPACE_863912091", "breweries"], "freshness": {"error_after": {"count": 30, "period": "day"}, "warn_after": {"count": 7, "period": "day"}}, "id": "source.beer_analytics.WORKSPACE_863912091.breweries", "identifier": "seed_breweries", "label": "source.beer_analytics.WORKSPACE_863912091.breweries", "loaded_at_field": "\"_timestamp\"", "loader": "", "meta": {}, "name": "breweries", "original_file_path": "models/beers/sources.yml", "package_name": "beer_analytics", "path": "models/beers/sources.yml", "quoting": {"database": true, "identifier": true, "schema": true}, "relation_name": "\"SAPI_9119\".\"WORKSPACE_863912091\".\"seed_breweries\"", "resource_type": "source", "root_path": "/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold", "schema": "WORKSPACE_863912091", "shape": "dot", "size": 10, "source_description": "", "source_meta": {}, "source_name": "WORKSPACE_863912091", "tags": ["breweries", "brewery", "ecommerce"], "unique_id": "source.beer_analytics.WORKSPACE_863912091.breweries", "unrendered_config": {}}, {"alias": "breweries", "checksum": {"checksum": "343005a9e749b3a3efa99b9d24b1b259ce716f881cd80752fdbc718160c1ee71", "name": "sha256"}, "columns": {"brewery_id": {"description": "", "meta": {"metrics": {"num_unique_breweries": {"type": "count_distinct"}}, "primary-key": true}, "name": "brewery_id", "tags": []}}, "config": {"column_types": {}, "enabled": true, "materialized": "table", "meta": {"owner": "fisa@keboola.com"}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "tags": []}, "created_at": 1658792883.942038, "database": "SAPI_9119", "deferred": false, "depends_on": {"macros": [], "nodes": ["source.beer_analytics.WORKSPACE_863912091.breweries"]}, "description": "", "docs": {"show": true}, "fqn": ["beer_analytics", "beers", "breweries"], "id": "model.beer_analytics.breweries", "label": "model.beer_analytics.breweries", "meta": {"owner": "fisa@keboola.com"}, "name": "breweries", "original_file_path": "models/beers/breweries.sql", "package_name": "beer_analytics", "patch_path": "beer_analytics://models/beers/schema.yml", "path": "beers/breweries.sql", "raw_sql": "{{ config(\n    materialized=\"table\"\n) }}\n\nSELECT\n  \"id\"                    AS brewery_id,\n  trim(\"name\")            AS brewery_name,\n  trim(\"city\")            AS brewery_city,\n  trim(\"state\")           AS brewery_state,\n  \u0027USA\u0027                 AS brewery_country\nFROM\n  {{ source(\u0027WORKSPACE_863912091\u0027, \u0027breweries\u0027) }}", "refs": [], "resource_type": "model", "root_path": "/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold", "schema": "WORKSPACE_863912091", "shape": "dot", "size": 10, "sources": [["WORKSPACE_863912091", "breweries"]], "tags": [], "unique_id": "model.beer_analytics.breweries", "unrendered_config": {"materialized": "table"}}, {"alias": "beers_with_breweries", "checksum": {"checksum": "553c08f8745db1db963f39346b0516848ef19e4c3f1ff29b1ca1df0ceef3910a", "name": "sha256"}, "columns": {"abv": {"description": "Alcohol percentage in the beer", "meta": {}, "name": "abv", "tags": []}, "beer_id": {"description": "The unique identifier for the beer", "meta": {"dimension": {"sql": "${TABLE}.beer_id"}, "primary-key": true}, "name": "beer_id", "tags": []}, "beer_name": {"description": "The name of the beer", "meta": {"primary-key": true}, "name": "beer_name", "tags": []}, "beer_style": {"description": "Style of the beer (IPA, Porter, etc)", "meta": {"dimension": {"sql": "${TABLE}.beer_style"}, "metrics": {"num_unique_beer_styles": {"type": "count_distinct"}}}, "name": "beer_style", "tags": []}, "bitterness": {"description": "The bitterness category of the beer (based on IBUs)", "meta": {}, "name": "bitterness", "tags": []}, "brewery_city": {"description": "City of the brewery", "meta": {}, "name": "brewery_city", "tags": []}, "brewery_id": {"description": "The unique identifier for the brewery", "meta": {"dimension": {"sql": "${TABLE}.brewery_id"}, "meta": null, "metrics": {"num_unique_breweries": {"type": "count_distinct"}}, "primary-key": true}, "name": "brewery_id", "tags": []}, "brewery_name": {"description": "Name of the brewery", "meta": {}, "name": "brewery_name", "tags": []}, "brewery_state": {"description": "State of the brewery", "meta": {}, "name": "brewery_state", "tags": []}, "ibu": {"description": "The bitterness of the beer in IBUs", "meta": {}, "name": "ibu", "tags": []}, "ounces": {"description": "The volume of the beer", "meta": {}, "name": "ounces", "tags": []}}, "config": {"column_types": {}, "enabled": true, "materialized": "table", "meta": {"owner": "fisa@keboola.com"}, "on_schema_change": "ignore", "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "tags": []}, "created_at": 1658792883.932836, "database": "SAPI_9119", "deferred": false, "depends_on": {"macros": [], "nodes": ["model.beer_analytics.beers", "model.beer_analytics.breweries"]}, "description": "Beers joined with their breweries", "docs": {"show": true}, "fqn": ["beer_analytics", "beers", "beers_with_breweries"], "id": "model.beer_analytics.beers_with_breweries", "label": "model.beer_analytics.beers_with_breweries", "meta": {"owner": "fisa@keboola.com"}, "name": "beers_with_breweries", "original_file_path": "models/beers/beers_with_breweries.sql", "package_name": "beer_analytics", "patch_path": "beer_analytics://models/beers/schema.yml", "path": "beers/beers_with_breweries.sql", "raw_sql": "{{ config(\n    materialized=\"table\",\n    persist_docs={\"relation\": true, \"columns\": true}\n) }}\n\nSELECT *\nFROM {{ ref(\u0027beers\u0027) }} beers\nJOIN {{ ref(\u0027breweries\u0027) }} breweries USING (brewery_id)", "refs": [["beers"], ["breweries"]], "resource_type": "model", "root_path": "/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold", "schema": "WORKSPACE_863912091", "shape": "dot", "size": 10, "sources": [], "tags": [], "unique_id": "model.beer_analytics.beers_with_breweries", "unrendered_config": {"materialized": "table", "persist_docs": {"columns": true, "relation": true}}}, {"alias": "sales", "checksum": {"checksum": "1b2264d4e9631c9d0c6c15536a832b75a6479d0462d2477acb51c6fbcd25179f", "name": "sha256"}, "columns": {"abv": {"description": "Alcohol by volume", "meta": {}, "name": "abv", "tags": []}, "beer_id": {"description": "The unique indentifier of the beer", "meta": {}, "name": "beer_id", "tags": []}, "beer_name": {"description": "The name of the beer as on the label", "meta": {}, "name": "beer_name", "tags": []}, "beer_style": {"description": "The style of the beer (IPA, Porter, etc)", "meta": {}, "name": "beer_style", "tags": []}, "bitterness": {"description": "The bitterness category of the beer (based on IBUs)", "meta": {}, "name": "bitterness", "tags": []}, "brewery_city": {"description": "", "meta": {}, "name": "brewery_city", "tags": []}, "brewery_country": {"description": "", "meta": {}, "name": "brewery_country", "tags": []}, "brewery_id": {"description": "The unique indentifier of the brewery", "meta": {}, "name": "brewery_id", "tags": []}, "brewery_name": {"description": "The official name of the brewery", "meta": {}, "name": "brewery_name", "tags": []}, "brewery_state": {"description": "", "meta": {}, "name": "brewery_state", "tags": []}, "ibu": {"description": "International Bitterness Unit", "meta": {}, "name": "ibu", "tags": []}, "order_created_at": {"description": "When the order was created", "meta": {}, "name": "order_created_at", "tags": []}, "order_li_price_each": {"description": "Price for a single unit", "meta": {}, "name": "order_li_price_each", "tags": []}, "order_li_price_total": {"description": "The total price for the order line", "meta": {}, "name": "order_li_price_total", "tags": []}, "order_li_quantity": {"description": "The number of units for the order line", "meta": {}, "name": "order_li_quantity", "tags": []}, "order_line": {"description": "The order line number", "meta": {"primary-key": true}, "name": "order_line", "tags": ["primary-key"]}, "order_no": {"description": "The order number", "meta": {"primary-key": true}, "name": "order_no", "tags": ["primary-key"]}, "ounces": {"description": "Volume of a single unit", "meta": {}, "name": "ounces", "tags": []}}, "config": {"column_types": {}, "enabled": true, "materialized": "table", "meta": {"owner": "fisa@keboola.com"}, "on_schema_change": "ignore", "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "tags": [], "transient": false}, "created_at": 1658792883.951624, "database": "SAPI_9119", "deferred": false, "depends_on": {"macros": [], "nodes": ["model.beer_analytics.orders", "model.beer_analytics.order_lines", "model.beer_analytics.beers_with_breweries"]}, "description": "Beer Sales", "docs": {"show": true}, "fqn": ["beer_analytics", "beers", "sales"], "id": "model.beer_analytics.sales", "label": "model.beer_analytics.sales", "meta": {"owner": "fisa@keboola.com"}, "name": "sales", "original_file_path": "models/beers/sales.sql", "package_name": "beer_analytics", "patch_path": "beer_analytics://models/beers/schema.yml", "path": "beers/sales.sql", "raw_sql": "{{ config(\n    materialized=\"table\",\n    persist_docs={\"relation\": true, \"columns\": true},\n    transient=false\n) }}\n\nSELECT\n \"beers_with_breweries\".beer_id               AS beer_id,\n \"beers_with_breweries\".beer_name             AS beer_name,\n \"beers_with_breweries\".beer_style            AS beer_style,\n \"beers_with_breweries\".abv                   AS abv,\n \"beers_with_breweries\".ibu                   AS ibu,\n \"beers_with_breweries\".bitterness           AS bitterness,\n \"beers_with_breweries\".ounces                AS ounces,\n\n \"beers_with_breweries\".brewery_id            AS brewery_id,\n \"beers_with_breweries\".brewery_name          AS brewery_name,\n \"beers_with_breweries\".brewery_city          AS brewery_city,\n \"beers_with_breweries\".brewery_state         AS brewery_state,\n \"beers_with_breweries\".brewery_country       AS brewery_country,\n\n \"orders\".order_no                           AS order_no,\n \"order_lines\".order_line                     AS order_line,\n \"orders\".created_at                          AS order_created_at,\n \"order_lines\".quantity                       AS order_li_quantity,\n \"order_lines\".price                          AS order_li_price_each,\n \"order_lines\".quantity * \"order_lines\".price   AS order_li_price_total\n\nFROM {{ ref(\u0027orders\u0027) }} \"orders\"\nJOIN {{ ref(\u0027order_lines\u0027) }} \"order_lines\" USING (order_no)\nJOIN {{ ref(\u0027beers_with_breweries\u0027) }} \"beers_with_breweries\" USING (beer_id)\n\nWHERE \"orders\".status = \u0027DELIVERED\u0027", "refs": [["orders"], ["order_lines"], ["beers_with_breweries"]], "resource_type": "model", "root_path": "/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold", "schema": "WORKSPACE_863912091", "shape": "dot", "size": 10, "sources": [], "tags": [], "unique_id": "model.beer_analytics.sales", "unrendered_config": {"materialized": "table", "persist_docs": {"columns": true, "relation": true}, "transient": false}}, {"created_at": 1658792883.9794931, "depends_on": {"macros": [], "nodes": ["model.beer_analytics.beers", "model.beer_analytics.beers_with_breweries", "model.beer_analytics.breweries", "model.beer_analytics.order_lines", "model.beer_analytics.orders", "model.beer_analytics.promo_deliveries", "model.beer_analytics.sales"]}, "description": "Lightdash Demo Instance", "fqn": ["beer_analytics", "beers", "lightdash"], "id": "exposure.beer_analytics.lightdash", "label": "exposure.beer_analytics.lightdash", "maturity": "high", "meta": {}, "name": "lightdash", "original_file_path": "models/beers/exposures.yml", "owner": {"email": "fisa@keboola.com", "name": "Martin Fiser"}, "package_name": "beer_analytics", "path": "beers/exposures.yml", "refs": [["beers"], ["beers_with_breweries"], ["breweries"], ["order_lines"], ["orders"], ["promo_deliveries"], ["sales"]], "resource_type": "exposure", "root_path": "/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold", "shape": "dot", "size": 10, "sources": [], "tags": ["business_intelligence"], "type": "dashboard", "unique_id": "exposure.beer_analytics.lightdash", "url": "https://fisa-lightdash.herokuapp.com/projects/b2e4799b-db5e-4e72-a483-fded20d227a9/"}, {"alias": "order_lines", "checksum": {"checksum": "5074fad406e6f43c44e8f2d6c8a6bcc15a968dcbd653641faca4324859305cf3", "name": "sha256"}, "columns": {"order_line": {"description": "", "meta": {"primary-key": true}, "name": "order_line", "tags": []}, "order_no": {"description": "", "meta": {"primary-key": true}, "name": "order_no", "tags": []}}, "config": {"column_types": {}, "enabled": true, "materialized": "table", "meta": {"owner": "jordan.burger@keboola.com"}, "on_schema_change": "ignore", "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "tags": [], "unique_key": "order_line"}, "created_at": 1658792883.9460402, "database": "SAPI_9119", "deferred": false, "depends_on": {"macros": ["macro.beer_analytics.date_format", "macro.beer_analytics.yyymmdd", "macro.dbt.is_incremental"], "nodes": ["model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers", "model.beer_analytics.beers"]}, "description": "", "docs": {"show": true}, "fqn": ["beer_analytics", "beers", "order_lines"], "id": "model.beer_analytics.order_lines", "label": "model.beer_analytics.order_lines", "meta": {"owner": "jordan.burger@keboola.com"}, "name": "order_lines", "original_file_path": "models/beers/order_lines.sql", "package_name": "beer_analytics", "patch_path": "beer_analytics://models/beers/schema.yml", "path": "beers/order_lines.sql", "raw_sql": "{{ config(\n    materialized=\u0027table\u0027,\n    unique_key=\u0027order_line\u0027,\n    persist_docs={\"relation\": true, \"columns\": true}\n) }}\n\n-- We\u0027ll fake some data, since this is an example repository\n-- we want to make sure that we continue to generate data up\n-- to today\n\nWITH generated_order_lines AS (\n    {% for day_ago in range(30) %}\n        {% for order_number in range(10) %}\n            -- Each order has between 1 and 5 order_lines\n            {% for order_line in range(3) %}\n                SELECT CONCAT(\n                            {{ date_format() }}(\n                                DATEADD(Day, -1 * {{ day_ago }}, current_timestamp),\n                                {{ yyymmdd() }}\n                            ),\n                            \u0027{{ order_number }}\u0027\n                       )                                   AS order_no,\n                       CONCAT(\n                           {{ date_format() }}(\n                                DATEADD(Day, -1 * {{ day_ago }}, current_timestamp),\n                                {{ yyymmdd() }}\n                           ),\n                           \u0027{{ order_number }}{{ order_line }}\u0027\n                       ) AS order_line,\n                       (\n                            -- Deterministically select a random beer\n                            SELECT MOD(\n                                ABS(HASH({{ order_number + order_line }})),\n                                (\n                                    SELECT MAX(beer_id) FROM {{ ref(\u0027beers\u0027) }}\n                                )\n                            )\n                       )                                                          AS beer_id,\n                       1 +MOD(ABS(HASH({{ order_number + order_line }})), 3)      AS quantity,\n                       MOD(ABS(HASH({{ order_number + order_line }})), 300) / 100 AS price,\n                       DATEADD(Day, -1 * {{ day_ago }}, current_timestamp)        AS created_at,\n                       current_timestamp                                          AS changed_at\n\n                {% if not loop.last %}\n                  UNION ALL\n                {% endif %}\n            {% endfor %}\n            {% if not loop.last %}\n            UNION ALL\n            {% endif %}\n      {% endfor %}\n\n      {% if not loop.last %}\n        UNION ALL\n      {% endif %}\n    {% endfor %}\n)\n\nSELECT *\nFROM generated_order_lines\n\n{% if is_incremental() %}\n    WHERE created_at::date \u003e (SELECT MAX(created_at)::date FROM {{ this }})\n{% endif %}", "refs": [["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"], ["beers"]], "resource_type": "model", "root_path": "/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold", "schema": "WORKSPACE_863912091", "shape": "dot", "size": 10, "sources": [], "tags": [], "unique_id": "model.beer_analytics.order_lines", "unrendered_config": {"materialized": "table", "persist_docs": {"columns": true, "relation": true}, "unique_key": "order_line"}}, {"alias": "promo_deliveries", "checksum": {"checksum": "b230df8807bab3cb18bcc650c9b26b3de346fd0e764f41034b73f1881e6e02f2", "name": "sha256"}, "columns": {"customer_id": {"description": "Customer id", "meta": {"primary-key": true}, "name": "customer_id", "tags": ["primary-key"]}}, "config": {"column_types": {}, "enabled": true, "materialized": "table", "meta": {"owner": "david.pospisil@keboola.com"}, "on_schema_change": "ignore", "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "tags": [], "transient": false}, "created_at": 1658792883.9539661, "database": "SAPI_9119", "deferred": false, "depends_on": {"macros": [], "nodes": ["model.beer_analytics.orders", "model.beer_analytics.order_lines", "model.beer_analytics.beers", "model.beer_analytics.orders", "model.beer_analytics.order_lines", "model.beer_analytics.beers"]}, "description": "", "docs": {"show": true}, "fqn": ["beer_analytics", "beers", "promo_deliveries"], "id": "model.beer_analytics.promo_deliveries", "label": "model.beer_analytics.promo_deliveries", "meta": {"owner": "david.pospisil@keboola.com"}, "name": "promo_deliveries", "original_file_path": "models/beers/promo_deliveries.sql", "package_name": "beer_analytics", "patch_path": "beer_analytics://models/beers/schema.yml", "path": "beers/promo_deliveries.sql", "raw_sql": "{{ config(\n    materialized=\"table\",\n    persist_docs={\"relation\": true, \"columns\": true},\n    transient=false\n) }}\n\nSELECT customer_id,\n       \u0027Hoppy\u0027 AS promo,\n       COUNT(DISTINCT b.beer_name) AS cnt_beers_purchased    \n  FROM {{ ref(\u0027orders\u0027) }} o\n  JOIN {{ ref(\u0027order_lines\u0027) }} ol\n  USING (order_no)\n  JOIN {{ ref(\u0027beers\u0027) }} b\n  USING(beer_id)\n  GROUP BY 1\n  HAVING COUNT(CASE WHEN b.bitterness = \u0027Hoppy\u0027 THEN 1 END)\n         \u003e\n         COUNT(CASE WHEN b.bitterness = \u0027Malty\u0027 THEN 1 END)\n\nUNION\n\nSELECT customer_id,\n       \u0027Malty\u0027 AS promo,\n       COUNT(DISTINCT b.beer_name) AS cnt_beers_purchased\n  FROM {{ ref(\u0027orders\u0027) }} o\n  JOIN {{ ref(\u0027order_lines\u0027) }} ol\n  USING (order_no)\n  JOIN {{ ref(\u0027beers\u0027) }} b\n  USING(beer_id)\n  GROUP BY 1\n  HAVING COUNT(CASE WHEN b.bitterness = \u0027Malty\u0027 THEN 1 END)\n         \u003e\n         COUNT(CASE WHEN b.bitterness = \u0027Hoppy\u0027 THEN 1 END)", "refs": [["orders"], ["order_lines"], ["beers"], ["orders"], ["order_lines"], ["beers"]], "resource_type": "model", "root_path": "/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold", "schema": "WORKSPACE_863912091", "shape": "dot", "size": 10, "sources": [], "tags": [], "unique_id": "model.beer_analytics.promo_deliveries", "unrendered_config": {"materialized": "table", "persist_docs": {"columns": true, "relation": true}, "transient": false}}, {"alias": "orders", "checksum": {"checksum": "062724c6f90e2e885412d73e345a4119a308c52140c855b706304d34e75d1603", "name": "sha256"}, "columns": {"order_no": {"description": "", "meta": {"metrics": {"num_unique_orders": {"type": "count_distinct"}}, "primary-key": true}, "name": "order_no", "tags": []}}, "config": {"column_types": {}, "enabled": true, "materialized": "table", "meta": {"owner": "jordan.burger@keboola.com"}, "on_schema_change": "ignore", "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "tags": [], "unique_key": "order_no"}, "created_at": 1658792883.944114, "database": "SAPI_9119", "deferred": false, "depends_on": {"macros": ["macro.beer_analytics.date_format", "macro.beer_analytics.yyymmdd", "macro.beer_analytics.randint", "macro.dbt.is_incremental"], "nodes": []}, "description": "", "docs": {"show": true}, "fqn": ["beer_analytics", "beers", "orders"], "id": "model.beer_analytics.orders", "label": "model.beer_analytics.orders", "meta": {"owner": "jordan.burger@keboola.com"}, "name": "orders", "original_file_path": "models/beers/orders.sql", "package_name": "beer_analytics", "patch_path": "beer_analytics://models/beers/schema.yml", "path": "beers/orders.sql", "raw_sql": "{{ config(\n    materialized=\u0027table\u0027,\n    unique_key=\u0027order_no\u0027,\n    persist_docs={\"relation\": true, \"columns\": true}\n) }}\n\n-- We\u0027ll fake some data, since this is an example repository\n-- we want to make sure that we continue to generate data up\n-- to today\n\nWITH generated_orders AS (\n    {% for day_ago in range(30) %}\n        {% for order_number in range(10) %}\n          SELECT\n              CONCAT(\n                   {{ date_format() }}(\n                        DATEADD(Day, -1 * {{ day_ago }}, CURRENT_DATE),\n                        {{ yyymmdd() }}\n                   ),\n                   \u0027{{ order_number }}\u0027\n             )::int                                                            AS order_no,\n\n             {{ randint(123456, 654321) }}                                  AS customer_id,\n\n             {% if order_number is divisibleby 13 %}\n                \u0027PENDING\u0027                                                      AS status,\n             {% else %}\n                \u0027DELIVERED\u0027                                                    AS status,\n             {% endif %}\n             DATEADD(Day, -1 * {{ day_ago }}, CURRENT_DATE)                    AS created_at,\n             current_timestamp                                                 AS changed_at\n\n          {% if not loop.last %}\n            UNION ALL\n          {% endif %}\n        {% endfor %}\n\n        {% if not loop.last %}\n            UNION ALL\n        {% endif %}\n    {% endfor %}\n)\n\nSELECT *\nFROM generated_orders\n\n{% if is_incremental() %}\n    WHERE created_at::date \u003e (SELECT MAX(created_at)::date FROM {{ this }})\n{% endif %}", "refs": [], "resource_type": "model", "root_path": "/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold", "schema": "WORKSPACE_863912091", "shape": "dot", "size": 10, "sources": [], "tags": [], "unique_id": "model.beer_analytics.orders", "unrendered_config": {"materialized": "table", "persist_docs": {"columns": true, "relation": true}, "unique_key": "order_no"}}]);
        edges = new vis.DataSet([{"from": "source.beer_analytics.WORKSPACE_863912091.beers", "label": 1, "to": "model.beer_analytics.beers", "weight": 1}, {"from": "source.beer_analytics.WORKSPACE_863912091.breweries", "label": 1, "to": "model.beer_analytics.breweries", "weight": 1}, {"from": "model.beer_analytics.beers_with_breweries", "label": 1, "to": "model.beer_analytics.sales", "weight": 1}, {"from": "model.beer_analytics.beers_with_breweries", "label": 1, "to": "exposure.beer_analytics.lightdash", "weight": 1}, {"from": "model.beer_analytics.beers", "label": 1, "to": "model.beer_analytics.beers_with_breweries", "weight": 1}, {"from": "model.beer_analytics.beers", "label": 1, "to": "model.beer_analytics.order_lines", "weight": 1}, {"from": "model.beer_analytics.beers", "label": 1, "to": "model.beer_analytics.promo_deliveries", "weight": 1}, {"from": "model.beer_analytics.beers", "label": 1, "to": "exposure.beer_analytics.lightdash", "weight": 1}, {"from": "model.beer_analytics.breweries", "label": 1, "to": "model.beer_analytics.beers_with_breweries", "weight": 1}, {"from": "model.beer_analytics.breweries", "label": 1, "to": "exposure.beer_analytics.lightdash", "weight": 1}, {"from": "model.beer_analytics.orders", "label": 1, "to": "model.beer_analytics.sales", "weight": 1}, {"from": "model.beer_analytics.orders", "label": 1, "to": "model.beer_analytics.promo_deliveries", "weight": 1}, {"from": "model.beer_analytics.orders", "label": 1, "to": "exposure.beer_analytics.lightdash", "weight": 1}, {"from": "model.beer_analytics.order_lines", "label": 1, "to": "model.beer_analytics.sales", "weight": 1}, {"from": "model.beer_analytics.order_lines", "label": 1, "to": "model.beer_analytics.promo_deliveries", "weight": 1}, {"from": "model.beer_analytics.order_lines", "label": 1, "to": "exposure.beer_analytics.lightdash", "weight": 1}, {"from": "model.beer_analytics.sales", "label": 1, "to": "exposure.beer_analytics.lightdash", "weight": 1}, {"from": "model.beer_analytics.promo_deliveries", "label": 1, "to": "exposure.beer_analytics.lightdash", "weight": 1}]);

        // adding nodes and edges to the graph
        data = {nodes: nodes, edges: edges};

        var options = {
    "configure": {
        "enabled": false
    },
    "edges": {
        "color": {
            "inherit": true
        },
        "smooth": {
            "enabled": true,
            "type": "dynamic"
        }
    },
    "interaction": {
        "dragNodes": true,
        "hideEdgesOnDrag": false,
        "hideNodesOnDrag": false
    },
    "physics": {
        "enabled": true,
        "stabilization": {
            "enabled": true,
            "fit": true,
            "iterations": 1000,
            "onlyDynamicEdges": false,
            "updateInterval": 50
        }
    }
};
        
        

        

        network = new vis.Network(container, data, options);
	 
        


        

        return network;

    }

    drawGraph();

</script>
</body>
</html>


================================================
File: analysis/dbt_artifacts.ipynb
================================================
# Jupyter notebook converted to Python script.

import networkx as nx
import plotly.express as px
import plotly.graph_objects as go
import plotly.offline as py
import matplotlib.pyplot as plt
import pandas as pd
from IPython.display import HTML, Image, Latex, Math, Markdown, SVG, JSON

%matplotlib inline

G = nx.read_gpickle("/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold/target/graph.gpickle")
G
# Output:
#   <networkx.classes.digraph.DiGraph at 0x1045f95b0>

print(G.nodes)
print("\n")
print(G.out_edges)
print("\n")
print(G.in_edges)
#print(dict(G.nodes))
print("\n")
print(G.nodes['source.beer_analytics.WORKSPACE_863912091.beers'])
print("\n")
print(G.edges)
# Output:
#   ['source.beer_analytics.WORKSPACE_863912091.beers', 'source.beer_analytics.WORKSPACE_863912091.breweries', 'model.beer_analytics.beers_with_breweries', 'model.beer_analytics.beers', 'model.beer_analytics.breweries', 'model.beer_analytics.orders', 'model.beer_analytics.order_lines', 'model.beer_analytics.sales', 'model.beer_analytics.promo_deliveries', 'test.beer_analytics.assert_ibu_0_100_range', 'seed.beer_analytics.seed_breweries', 'seed.beer_analytics.seed_beers', 'test.beer_analytics.not_null_beers_with_breweries_brewery_id.1725a2e6dc', 'test.beer_analytics.unique_beers_with_breweries_beer_id.aeaa7c6743', 'test.beer_analytics.not_null_beers_with_breweries_beer_id.06c4b94123', 'test.beer_analytics.unique_beers_beer_id.594ed33081', 'test.beer_analytics.not_null_beers_beer_id.efaf5f5466', 'test.beer_analytics.relationships_order_lines_order_no__order_no__ref_orders_.35667b5672', 'test.beer_analytics.unique_order_lines_order_line.0b400fba5e', 'test.beer_analytics.not_null_sales_order_no.2f24730369', 'test.beer_analytics.not_null_sales_order_line.254f52e82a', 'test.beer_analytics.source_unique_WORKSPACE_863912091_beers__id_.c05632b229', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__id_.5fa9d79542', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__name_.d658943614', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__brewery_id_.48bd3f3f34', 'exposure.beer_analytics.lightdash']

#   

#   

#   [('source.beer_analytics.WORKSPACE_863912091.beers', 'model.beer_analytics.beers'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_unique_WORKSPACE_863912091_beers__id_.c05632b229'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__id_.5fa9d79542'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__name_.d658943614'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__brewery_id_.48bd3f3f34'), ('source.beer_analytics.WORKSPACE_863912091.breweries', 'model.beer_analytics.breweries'), ('model.beer_analytics.beers_with_breweries', 'model.beer_analytics.sales'), ('model.beer_analytics.beers_with_breweries', 'test.beer_analytics.not_null_beers_with_breweries_brewery_id.1725a2e6dc'), ('model.beer_analytics.beers_with_breweries', 'test.beer_analytics.unique_beers_with_breweries_beer_id.aeaa7c6743'), ('model.beer_analytics.beers_with_breweries', 'test.beer_analytics.not_null_beers_with_breweries_beer_id.06c4b94123'), ('model.beer_analytics.beers_with_breweries', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.beers', 'model.beer_analytics.beers_with_breweries'), ('model.beer_analytics.beers', 'model.beer_analytics.order_lines'), ('model.beer_analytics.beers', 'model.beer_analytics.promo_deliveries'), ('model.beer_analytics.beers', 'test.beer_analytics.assert_ibu_0_100_range'), ('model.beer_analytics.beers', 'test.beer_analytics.unique_beers_beer_id.594ed33081'), ('model.beer_analytics.beers', 'test.beer_analytics.not_null_beers_beer_id.efaf5f5466'), ('model.beer_analytics.beers', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.breweries', 'model.beer_analytics.beers_with_breweries'), ('model.beer_analytics.breweries', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.orders', 'model.beer_analytics.sales'), ('model.beer_analytics.orders', 'model.beer_analytics.promo_deliveries'), ('model.beer_analytics.orders', 'test.beer_analytics.relationships_order_lines_order_no__order_no__ref_orders_.35667b5672'), ('model.beer_analytics.orders', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.order_lines', 'model.beer_analytics.sales'), ('model.beer_analytics.order_lines', 'model.beer_analytics.promo_deliveries'), ('model.beer_analytics.order_lines', 'test.beer_analytics.relationships_order_lines_order_no__order_no__ref_orders_.35667b5672'), ('model.beer_analytics.order_lines', 'test.beer_analytics.unique_order_lines_order_line.0b400fba5e'), ('model.beer_analytics.order_lines', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.sales', 'test.beer_analytics.not_null_sales_order_no.2f24730369'), ('model.beer_analytics.sales', 'test.beer_analytics.not_null_sales_order_line.254f52e82a'), ('model.beer_analytics.sales', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.promo_deliveries', 'exposure.beer_analytics.lightdash')]

#   

#   

#   [('model.beer_analytics.beers', 'model.beer_analytics.beers_with_breweries'), ('model.beer_analytics.breweries', 'model.beer_analytics.beers_with_breweries'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'model.beer_analytics.beers'), ('source.beer_analytics.WORKSPACE_863912091.breweries', 'model.beer_analytics.breweries'), ('model.beer_analytics.beers', 'model.beer_analytics.order_lines'), ('model.beer_analytics.beers_with_breweries', 'model.beer_analytics.sales'), ('model.beer_analytics.orders', 'model.beer_analytics.sales'), ('model.beer_analytics.order_lines', 'model.beer_analytics.sales'), ('model.beer_analytics.beers', 'model.beer_analytics.promo_deliveries'), ('model.beer_analytics.orders', 'model.beer_analytics.promo_deliveries'), ('model.beer_analytics.order_lines', 'model.beer_analytics.promo_deliveries'), ('model.beer_analytics.beers', 'test.beer_analytics.assert_ibu_0_100_range'), ('model.beer_analytics.beers_with_breweries', 'test.beer_analytics.not_null_beers_with_breweries_brewery_id.1725a2e6dc'), ('model.beer_analytics.beers_with_breweries', 'test.beer_analytics.unique_beers_with_breweries_beer_id.aeaa7c6743'), ('model.beer_analytics.beers_with_breweries', 'test.beer_analytics.not_null_beers_with_breweries_beer_id.06c4b94123'), ('model.beer_analytics.beers', 'test.beer_analytics.unique_beers_beer_id.594ed33081'), ('model.beer_analytics.beers', 'test.beer_analytics.not_null_beers_beer_id.efaf5f5466'), ('model.beer_analytics.orders', 'test.beer_analytics.relationships_order_lines_order_no__order_no__ref_orders_.35667b5672'), ('model.beer_analytics.order_lines', 'test.beer_analytics.relationships_order_lines_order_no__order_no__ref_orders_.35667b5672'), ('model.beer_analytics.order_lines', 'test.beer_analytics.unique_order_lines_order_line.0b400fba5e'), ('model.beer_analytics.sales', 'test.beer_analytics.not_null_sales_order_no.2f24730369'), ('model.beer_analytics.sales', 'test.beer_analytics.not_null_sales_order_line.254f52e82a'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_unique_WORKSPACE_863912091_beers__id_.c05632b229'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__id_.5fa9d79542'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__name_.d658943614'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__brewery_id_.48bd3f3f34'), ('model.beer_analytics.beers_with_breweries', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.beers', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.breweries', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.orders', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.order_lines', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.sales', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.promo_deliveries', 'exposure.beer_analytics.lightdash')]

#   

#   

#   {'fqn': ['beer_analytics', 'beers', 'WORKSPACE_863912091', 'beers'], 'database': 'SAPI_9119', 'schema': 'WORKSPACE_863912091', 'unique_id': 'source.beer_analytics.WORKSPACE_863912091.beers', 'package_name': 'beer_analytics', 'root_path': '/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold', 'path': 'models/beers/sources.yml', 'original_file_path': 'models/beers/sources.yml', 'name': 'beers', 'source_name': 'WORKSPACE_863912091', 'source_description': '', 'loader': '', 'identifier': 'seed_beers', 'resource_type': 'source', 'quoting': {'database': True, 'schema': True, 'identifier': True}, 'loaded_at_field': '"_timestamp"', 'freshness': {'warn_after': {'count': 7, 'period': 'day'}, 'error_after': {'count': 30, 'period': 'day'}}, 'description': 'list of beers', 'columns': {'"id"': {'name': '"id"', 'description': '', 'meta': {}, 'tags': []}, '"name"': {'name': '"name"', 'description': '', 'meta': {}, 'tags': []}, '"style"': {'name': '"style"', 'description': '', 'meta': {}, 'tags': []}, '"abv"': {'name': '"abv"', 'description': '', 'meta': {}, 'tags': []}, '"ibu"': {'name': '"ibu"', 'description': '', 'meta': {}, 'tags': []}, '"brewery_id"': {'name': '"brewery_id"', 'description': '', 'meta': {}, 'tags': []}, '"ounces"': {'name': '"ounces"', 'description': '', 'meta': {}, 'tags': []}}, 'meta': {}, 'source_meta': {}, 'tags': ['beers', 'ecommerce'], 'config': {'enabled': True}, 'unrendered_config': {}, 'relation_name': '"SAPI_9119"."WORKSPACE_863912091"."seed_beers"', 'created_at': 1658792883.997974}

#   

#   

#   [('source.beer_analytics.WORKSPACE_863912091.beers', 'model.beer_analytics.beers'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_unique_WORKSPACE_863912091_beers__id_.c05632b229'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__id_.5fa9d79542'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__name_.d658943614'), ('source.beer_analytics.WORKSPACE_863912091.beers', 'test.beer_analytics.source_not_null_WORKSPACE_863912091_beers__brewery_id_.48bd3f3f34'), ('source.beer_analytics.WORKSPACE_863912091.breweries', 'model.beer_analytics.breweries'), ('model.beer_analytics.beers_with_breweries', 'model.beer_analytics.sales'), ('model.beer_analytics.beers_with_breweries', 'test.beer_analytics.not_null_beers_with_breweries_brewery_id.1725a2e6dc'), ('model.beer_analytics.beers_with_breweries', 'test.beer_analytics.unique_beers_with_breweries_beer_id.aeaa7c6743'), ('model.beer_analytics.beers_with_breweries', 'test.beer_analytics.not_null_beers_with_breweries_beer_id.06c4b94123'), ('model.beer_analytics.beers_with_breweries', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.beers', 'model.beer_analytics.beers_with_breweries'), ('model.beer_analytics.beers', 'model.beer_analytics.order_lines'), ('model.beer_analytics.beers', 'model.beer_analytics.promo_deliveries'), ('model.beer_analytics.beers', 'test.beer_analytics.assert_ibu_0_100_range'), ('model.beer_analytics.beers', 'test.beer_analytics.unique_beers_beer_id.594ed33081'), ('model.beer_analytics.beers', 'test.beer_analytics.not_null_beers_beer_id.efaf5f5466'), ('model.beer_analytics.beers', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.breweries', 'model.beer_analytics.beers_with_breweries'), ('model.beer_analytics.breweries', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.orders', 'model.beer_analytics.sales'), ('model.beer_analytics.orders', 'model.beer_analytics.promo_deliveries'), ('model.beer_analytics.orders', 'test.beer_analytics.relationships_order_lines_order_no__order_no__ref_orders_.35667b5672'), ('model.beer_analytics.orders', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.order_lines', 'model.beer_analytics.sales'), ('model.beer_analytics.order_lines', 'model.beer_analytics.promo_deliveries'), ('model.beer_analytics.order_lines', 'test.beer_analytics.relationships_order_lines_order_no__order_no__ref_orders_.35667b5672'), ('model.beer_analytics.order_lines', 'test.beer_analytics.unique_order_lines_order_line.0b400fba5e'), ('model.beer_analytics.order_lines', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.sales', 'test.beer_analytics.not_null_sales_order_no.2f24730369'), ('model.beer_analytics.sales', 'test.beer_analytics.not_null_sales_order_line.254f52e82a'), ('model.beer_analytics.sales', 'exposure.beer_analytics.lightdash'), ('model.beer_analytics.promo_deliveries', 'exposure.beer_analytics.lightdash')]


edge_values = nx.get_edge_attributes(G, ('source.beer_analytics.WORKSPACE_863912091.breweries', 'model.beer_analytics.breweries'))
edge_values
# Output:
#   {}

## Custom Colours
#https://www.python-graph-gallery.com/324-map-a-color-to-network-nodes
carac = pd.DataFrame()
colour = pd.Categorical(list(nx.get_node_attributes(G, "resource_type").values()))
carac['myvalue']=pd.Categorical(list(nx.get_node_attributes(G, "resource_type").values()))

plt.figure(figsize=(20, 20))
nx.draw_networkx(
    G,
    cmap=plt.get_cmap('viridis'),
    node_color=carac['myvalue'].cat.codes,
    with_labels=True,
    font_color='black',
    alpha=1,
    width=2, 
#    linewidths=10,
#    arrowstyle='-|>',
#    node_shape='s'
    )
#plt.savefig(“Output/plain organogram using networkx.jpeg”, dpi = 300)

plt.show()
# Output:
#   <Figure size 1440x1440 with 1 Axes>

G1 = nx.DiGraph(G)
values = nx.get_node_attributes(G1, "resource_type")


del_resources = ["test", "seed"]

for a in del_resources:
    to_be_removed = [x for x in values if values[x] == a]

    for x in to_be_removed:
        G1.remove_node(x)

print(G1.nodes())
# Output:
#   ['source.beer_analytics.WORKSPACE_863912091.beers', 'source.beer_analytics.WORKSPACE_863912091.breweries', 'model.beer_analytics.beers_with_breweries', 'model.beer_analytics.beers', 'model.beer_analytics.breweries', 'model.beer_analytics.orders', 'model.beer_analytics.order_lines', 'model.beer_analytics.sales', 'model.beer_analytics.promo_deliveries', 'exposure.beer_analytics.lightdash']


print(list(nx.topological_sort(G1)))
print(nx.is_directed(G1))
print(nx.is_directed_acyclic_graph(G1))
# Output:
#   ['source.beer_analytics.WORKSPACE_863912091.beers', 'source.beer_analytics.WORKSPACE_863912091.breweries', 'model.beer_analytics.orders', 'model.beer_analytics.beers', 'model.beer_analytics.breweries', 'model.beer_analytics.order_lines', 'model.beer_analytics.beers_with_breweries', 'model.beer_analytics.promo_deliveries', 'model.beer_analytics.sales', 'exposure.beer_analytics.lightdash']

#   True

#   True


plt.figure(figsize=(20, 20))
nx.draw_spring(
    G1,
#    cmap=plt.get_cmap('viridis'),
#    node_color=carac['myvalue'].cat.codes,
    with_labels=True,
    font_color='black',
    alpha=1,
    width=2, 
    linewidths=5,
    arrowsize=30,
    style="dashed"
#    arrowstyle='-|>',
#    node_shape='s'
    )
#plt.savefig(“Output/plain organogram using networkx.jpeg”, dpi = 300)
plt.tight_layout()

plt.show()
# Output:
#   <Figure size 1440x1440 with 1 Axes>


plt.figure(figsize=(20, 20))

nx.draw(
    G1,
#    pos=nx.kamada_kawai_layout(G1),
#    pos=nx.fruchterman_reingold_layout(G1),
#    pos=nx.shell_layout(G1),
    pos=nx.spring_layout(G1),
#    pos=nx.spectral_layout(G1),
    with_labels=True,
    font_color='black',
    alpha=1,
    width=2, 
    linewidths=5,
    arrowsize=30,
    style="dashed",
    edge_color="b",
    node_shape="s",
    node_size=1400,
    bbox=dict(facecolor='none', edgecolor='black', boxstyle='round,pad=1'),
    )

plt.tight_layout()
plt.show()
# Output:
#   <Figure size 1440x1440 with 1 Axes>

nx.edges(G1, ['model.beer_analytics.sales'], )
# Output:
#   OutEdgeDataView([('model.beer_analytics.sales', 'exposure.beer_analytics.lightdash')])

"""
*Degree centrality* of a node is the fraction of the total nodes it is connected to. A node with a high degree centrality is generally considered highly active. In G, node 3 i.e. Team B Lead has the highest degree centrality since it is connected to four other nodes.

*Betweenness centrality* is a measure of how many times a particular node lies on the shortest path between all pairs of nodes in a graph. In G, team B lead has the highest betweenness centrality followed by team A lead. This implies that the team leads act as bridges between the CEO and the staff. The CEO and the staff have zero betweenness centrality because they don’t lie between any two nodes.

*Closeness centrality* is a measure of the proximity of a node to other nodes. It is calculated as the average of the shortest path length from the node to every other node in the network (Golbeck, 2013). In the case of closeness centrality, the nodes with lower values have higher centrality. This implies that the CEO and team leads have more centrality as compared to the staff (Golbeck, 2013).
"""

nx.degree_centrality(G1)
# Output:
#   {'source.beer_analytics.WORKSPACE_863912091.beers': 0.1111111111111111,

#    'source.beer_analytics.WORKSPACE_863912091.breweries': 0.1111111111111111,

#    'model.beer_analytics.beers_with_breweries': 0.4444444444444444,

#    'model.beer_analytics.beers': 0.5555555555555556,

#    'model.beer_analytics.breweries': 0.3333333333333333,

#    'model.beer_analytics.orders': 0.3333333333333333,

#    'model.beer_analytics.order_lines': 0.4444444444444444,

#    'model.beer_analytics.sales': 0.4444444444444444,

#    'model.beer_analytics.promo_deliveries': 0.4444444444444444,

#    'exposure.beer_analytics.lightdash': 0.7777777777777777}

nx.betweenness_centrality(G1)
# Output:
#   {'source.beer_analytics.WORKSPACE_863912091.beers': 0.0,

#    'source.beer_analytics.WORKSPACE_863912091.breweries': 0.0,

#    'model.beer_analytics.beers_with_breweries': 0.041666666666666664,

#    'model.beer_analytics.beers': 0.06944444444444445,

#    'model.beer_analytics.breweries': 0.041666666666666664,

#    'model.beer_analytics.orders': 0.0,

#    'model.beer_analytics.order_lines': 0.013888888888888888,

#    'model.beer_analytics.sales': 0.0,

#    'model.beer_analytics.promo_deliveries': 0.0,

#    'exposure.beer_analytics.lightdash': 0.0}

nx.closeness_centrality(G1)
# Output:
#   {'source.beer_analytics.WORKSPACE_863912091.beers': 0.0,

#    'source.beer_analytics.WORKSPACE_863912091.breweries': 0.0,

#    'model.beer_analytics.beers_with_breweries': 0.2962962962962963,

#    'model.beer_analytics.beers': 0.1111111111111111,

#    'model.beer_analytics.breweries': 0.1111111111111111,

#    'model.beer_analytics.orders': 0.0,

#    'model.beer_analytics.order_lines': 0.14814814814814814,

#    'model.beer_analytics.sales': 0.4188034188034188,

#    'model.beer_analytics.promo_deliveries': 0.35555555555555557,

#    'exposure.beer_analytics.lightdash': 0.8181818181818182}

"""
## Pyvis
"""

from pyvis.network import Network

const_options = {
  "nodes": {
    "borderWidth": "null",
    "borderWidthSelected": "null",
    "opacity": "null",
    "shape": "dot",
    "size": "null"
  },
  "edges": {
    "arrows": {
      "to": {
        "enabled": "true"
      }
    },
    "color": {
      "inherit": "true"
    },
    "physics": "false",
    "selfReferenceSize": "null",
    "selfReference": {
      "angle": 0.7853981633974483
    },
    "smooth": "false"
  },
  "layout": {
    "hierarchical": {
      "enabled": "true",
      "levelSeparation": 200,
      "direction": "LR",
      "sortMethod": "directed"
    }
  },
  "physics": {
    "enabled": "false",
    "hierarchicalRepulsion": {
      "centralGravity": 0,
      "avoidOverlap": "null"
    },
    "minVelocity": 0.75,
    "solver": "hierarchicalRepulsion"
  }
}



nt = Network('1200px', '800px', notebook=False)
nt.from_nx(G1)

#nt.set_options(const_options)
#nt.show_buttons()
nt.show("dag.html")

"""
## dbt code
"""

from typing import Set, Iterable, Iterator, Optional, NewType
from itertools import product
import networkx as nx  # type: ignore

from dbt.exceptions import InternalException

UniqueId = NewType("UniqueId", str)


class Graph:
    """A wrapper around the networkx graph that understands SelectionCriteria
    and how they interact with the graph.
    """

    def __init__(self, graph):
        self.graph = graph

    def nodes(self) -> Set[UniqueId]:
        return set(self.graph.nodes())

    def edges(self):
        return self.graph.edges()

    def __iter__(self) -> Iterator[UniqueId]:
        return iter(self.graph.nodes())

    def ancestors(self, node: UniqueId, max_depth: Optional[int] = None) -> Set[UniqueId]:
        """Returns all nodes having a path to `node` in `graph`"""
        if not self.graph.has_node(node):
            raise InternalException(f"Node {node} not found in the graph!")
        return {
            child
            for _, child in nx.bfs_edges(self.graph, node, reverse=True, depth_limit=max_depth)
        }

    def descendants(self, node: UniqueId, max_depth: Optional[int] = None) -> Set[UniqueId]:
        """Returns all nodes reachable from `node` in `graph`"""
        if not self.graph.has_node(node):
            raise InternalException(f"Node {node} not found in the graph!")
        return {child for _, child in nx.bfs_edges(self.graph, node, depth_limit=max_depth)}

    def select_childrens_parents(self, selected: Set[UniqueId]) -> Set[UniqueId]:
        ancestors_for = self.select_children(selected) | selected
        return self.select_parents(ancestors_for) | ancestors_for

    def select_children(
        self, selected: Set[UniqueId], max_depth: Optional[int] = None
    ) -> Set[UniqueId]:
        descendants: Set[UniqueId] = set()
        for node in selected:
            descendants.update(self.descendants(node, max_depth))
        return descendants

    def select_parents(
        self, selected: Set[UniqueId], max_depth: Optional[int] = None
    ) -> Set[UniqueId]:
        ancestors: Set[UniqueId] = set()
        for node in selected:
            ancestors.update(self.ancestors(node, max_depth))
        return ancestors

    def select_successors(self, selected: Set[UniqueId]) -> Set[UniqueId]:
        successors: Set[UniqueId] = set()
        for node in selected:
            successors.update(self.graph.successors(node))
        return successors

    def get_subset_graph(self, selected: Iterable[UniqueId]) -> "Graph":
        """Create and return a new graph that is a shallow copy of the graph,
        but with only the nodes in include_nodes. Transitive edges across
        removed nodes are preserved as explicit new edges.
        """

        new_graph = self.graph.copy()
        include_nodes = set(selected)

        for node in self:
            if node not in include_nodes:
                source_nodes = [x for x, _ in new_graph.in_edges(node)]
                target_nodes = [x for _, x in new_graph.out_edges(node)]

                new_edges = product(source_nodes, target_nodes)
                non_cyclic_new_edges = [
                    (source, target) for source, target in new_edges if source != target
                ]  # removes cyclic refs

                new_graph.add_edges_from(non_cyclic_new_edges)
                new_graph.remove_node(node)

        for node in include_nodes:
            if node not in new_graph:
                raise ValueError(
                    "Couldn't find model '{}' -- does it exist or is " "it disabled?".format(node)
                )

        return Graph(new_graph)

    def subgraph(self, nodes: Iterable[UniqueId]) -> "Graph":
        return Graph(self.graph.subgraph(nodes))

    def get_dependent_nodes(self, node: UniqueId):
        return nx.descendants(self.graph, node)



================================================
File: analysis/freshness.yml
================================================
version: 2

freshness:
  warn_after:
    count: 7
    period: day
  error_after:
    count: 30
    period: day
  loaded_at_field: '"_timestamp"'


================================================
File: analysis/sqlparsing.ipynb
================================================
# Jupyter notebook converted to Python script.

import json
import os
from sqllineage.runner import LineageRunner
import sqllineage as sq
from sqlparse.sql import Statement
from sqllineage.core import LineageAnalyzer

## test queries
sql = "insert into db1.table11 select * from db2.table21 union select * from db2.table22;"
#sql += "insert into db3.table3 select * from db1.table11 join db1.table12;"

sql = """CREATE OR REPLACE TABLE "out_commercial_bonus" AS SELECT RI."id" || '_' || CBPDWI."unique_id" AS "unique_id", RI."id" AS "warehouse_replenishment_id", S."name", CBPDWI."unique_id" AS "commercial_bonus_unique_id", CBPDWI."commercial_bonus_periods_unique_id", RI."inventory_item_id"::VARCHAR(255) AS "warehouse_inventory_id", R."closed_at"::TIMESTAMP_NTZ AS "closed_at", RI."amount"::DECIMAL( 20, 4 ) AS "amount", ( RI."price"::DECIMAL( 16, 6 )/ RI."amount"::DECIMAL( 16, 6 ) )::DECIMAL( 16 ... ue_id" = R."supplier_unique_id" LEFT JOIN "commercial_bonuses_periods" cbp ON CBP."unique_id" = CBPDWI."unique_id" LEFT JOIN "commercial_bonuses" cb ON CB."unique_id" = CBP."commercial_bonus_unique_id" LEFT JOIN "lov_commercial_bonuses" lcb ON LCB."unique_id" = CB."lov_commercial_bonuses_unique_id" LEFT JOIN "tmp_supplier" S ON S."unique_id" = CBPDWI."warehouse_supplier_unique_id" WHERE R."closed_at" > '2020-01-01 00:00:00' AND RI."amount"::DECIMAL( 20, 6 )> 0 AND R."found_in_stock" = 0;"""

sql = sql.replace('"','')


f = open("/Users/martin/Dropbox/Development/keboola_dbt_beer_demo_datafold/target/compiled/beer_analytics/models/beers/beers_with_breweries.sql", "r")
sql = f.read()

result = LineageRunner(sql)
# To show lineage summary
print(result)
# Output:
#   Error: AttributeError: 'LineageRunner' object has no attribute 'source_tables'

result.to_cytoscape()
# Output:
#   [{'data': {'id': 'sapi_9119.workspace_863912091.breweries'}},

#    {'data': {'id': 'sapi_9119.workspace_863912091.beers'}}]

result.source_tables[0].schema
# Output:
#   Schema: sapi_9119.workspace_863912091

for tbl in result.source_tables: print(tbl)
# Output:
#   sapi_9119.workspace_863912091.beers

#   sapi_9119.workspace_863912091.breweries


for tbl in result.target_tables: print(tbl)

result.draw()
# Output:
#    * SQLLineage Running on http://localhost:5000/?e=%0A%0ASELECT+%2A%0AFROM+%22SAPI_9119%22.%22WORKSPACE_863912091%22.%22beers%22+beers%0AJOIN+%22SAPI_9119%22.%22WORKSPACE_863912091%22.%22breweries%22+breweries+USING+%28brewery_id%29




================================================
File: analysis/.gitkeep
================================================



================================================
File: macros/date_format.sql
================================================
{#
Conversion function from date to string is differently named in different databases.

There are certain differences in the format string treatment:

  * Snowflake will pass unrecognized symbols as they were,
  * Whereas Databricks will fail on them.

It is thus recommended to only use the recognized formatting symbols in format expressions.
#}
{%- macro date_format() -%}
    {{ return(adapter.dispatch('date_format')()) }}
{%- endmacro -%}


{%- macro databricks__date_format() -%}
    {# https://docs.databricks.com/sql/language-manual/functions/date_format.html #}
    DATE_FORMAT
{%- endmacro -%}


{%- macro default__date_format() -%}
    {# https://docs.snowflake.com/en/sql-reference/functions/to_char.html #}
    TO_VARCHAR
{%- endmacro -%}



================================================
File: macros/randint.sql
================================================
{#
Not every DB has a function to return random integer within the given range.

* For Snowflake, there is a native implementation;
* For Databricks, we have to use a custom expression.

The name of the macro is borrowed from the analogous Python `random.randint()` function.
#}

{%- macro randint(min, max) -%}
    {{ return(adapter.dispatch('randint')(min, max)) }}
{%- endmacro -%}


{%- macro default__randint(min, max) -%}
    UNIFORM({{ min }}, {{ max }}, RANDOM())
{%- endmacro -%}


{%- macro databricks__randint(min, max) -%}
    (RANDOM() * {{ max - min }} + {{ min }})::int
{%- endmacro -%}



================================================
File: macros/yyyymmdd.sql
================================================
{#
Convert a date to a YYYYMMDD string.

This macro is needed because the date format string differs from one database backend to another.
#}
{%- macro yyymmdd() -%}
    {{ return(adapter.dispatch('yyymmdd')()) }}
{%- endmacro -%}


{%- macro default__yyymmdd() -%}
    'YYYYMMDD'
{%- endmacro -%}


{%- macro databricks__yyymmdd() -%}
    {# Reference: https://docs.databricks.com/sql/language-manual/sql-ref-datetime-pattern.html #}
    'yMMdd'
{%- endmacro -%}



================================================
File: models/beers/beers.sql
================================================
{{ config(
    materialized="view"
) }}

SELECT
  "id"            AS beer_id,
  TRIM("name")    AS beer_name,
  "style"         AS beer_style,
  TRY_TO_NUMERIC("abv",14,8)           AS abv,
  TRY_TO_NUMERIC("ibu",14,8)           AS ibu,
  CASE 
       WHEN ibu <= 50 THEN 'Malty'
       WHEN ibu > 50 THEN 'Hoppy'
   END AS bitterness,
  "brewery_id"    AS brewery_id,
  "ounces"        AS ounces
FROM
  {{ source('in.c-keboola-ex-http-28681838', 'seed_beers') }}



================================================
File: models/beers/beers_with_breweries.sql
================================================
{{ config(
    materialized="table",
    persist_docs={"relation": true, "columns": true}
) }}

SELECT *
FROM {{ ref('beers') }} beers
JOIN {{ ref('breweries') }} breweries USING (brewery_id)



================================================
File: models/beers/breweries.sql
================================================

{{ config(
    materialized="view"
) }}

SELECT
  "id"                    AS brewery_id,
  trim("name")            AS brewery_name,
  trim("city")            AS brewery_city,
  trim("state")           AS brewery_state,
  'USA'                 AS brewery_country
FROM
  {{ source('in.c-keboola-ex-http-28681838', 'seed_breweries') }}



================================================
File: models/beers/order_lines.sql
================================================
{{ config(
    materialized='table',
    unique_key='order_line',
    persist_docs={"relation": true, "columns": true}
) }}

-- We'll fake some data, since this is an example repository
-- we want to make sure that we continue to generate data up
-- to today

WITH generated_order_lines AS (
    {% for day_ago in range(30) %}
        {% for order_number in range(10) %}
            -- Each order has between 1 and 5 order_lines
            {% for order_line in range(3) %}
                SELECT CONCAT(
                            {{ date_format() }}(
                                DATEADD(Day, -1 * {{ day_ago }}, current_timestamp),
                                {{ yyymmdd() }}
                            ),
                            '{{ order_number }}'
                       )                                   AS order_no,
                       CONCAT(
                           {{ date_format() }}(
                                DATEADD(Day, -1 * {{ day_ago }}, current_timestamp),
                                {{ yyymmdd() }}
                           ),
                           '{{ order_number }}{{ order_line }}'
                       ) AS order_line,
                       (
                            -- Deterministically select a random beer
                            SELECT MOD(
                                ABS(HASH({{ order_number + order_line }})),
                                (
                                    SELECT MAX(beer_id) FROM {{ ref('beers') }}
                                )
                            )
                       )                                                          AS beer_id,
                       1 +MOD(ABS(HASH({{ order_number + order_line }})), 3)      AS quantity,
                       MOD(ABS(HASH({{ order_number + order_line }})), 300) / 100 AS price,
                       DATEADD(Day, -1 * {{ day_ago }}, current_timestamp)        AS created_at,
                       current_timestamp                                          AS changed_at

                {% if not loop.last %}
                  UNION ALL
                {% endif %}
            {% endfor %}
            {% if not loop.last %}
            UNION ALL
            {% endif %}
      {% endfor %}

      {% if not loop.last %}
        UNION ALL
      {% endif %}
    {% endfor %}
)

SELECT *
FROM generated_order_lines

{% if is_incremental() %}
    WHERE created_at::date > (SELECT MAX(created_at)::date FROM {{ this }})
{% endif %}



================================================
File: models/beers/orders.sql
================================================
{{ config(
    materialized='table',
    unique_key='order_no',
    persist_docs={"relation": true, "columns": true}
) }}

-- We'll fake some data, since this is an example repository
-- we want to make sure that we continue to generate data up
-- to today

WITH generated_orders AS (
    {% for day_ago in range(30) %}
        {% for order_number in range(10) %}
          SELECT
              CONCAT(
                   {{ date_format() }}(
                        DATEADD(Day, -1 * {{ day_ago }}, CURRENT_DATE),
                        {{ yyymmdd() }}
                   ),
                   '{{ order_number }}'
             )::int                                                            AS order_no,

             {{ randint(123456, 654321) }}                                  AS customer_id,

             {% if order_number is divisibleby 13 %}
                'PENDING'                                                      AS status,
             {% else %}
                'DELIVERED'                                                    AS status,
             {% endif %}
             DATEADD(Day, -1 * {{ day_ago }}, CURRENT_DATE)                    AS created_at,
             current_timestamp                                                 AS changed_at

          {% if not loop.last %}
            UNION ALL
          {% endif %}
        {% endfor %}

        {% if not loop.last %}
            UNION ALL
        {% endif %}
    {% endfor %}
)

SELECT *
FROM generated_orders

{% if is_incremental() %}
    WHERE created_at::date > (SELECT MAX(created_at)::date FROM {{ this }})
{% endif %}



================================================
File: models/beers/promo_deliveries.sql
================================================
{{ config(
    materialized="table",
    persist_docs={"relation": true, "columns": true},
    transient=false
) }}

SELECT customer_id,
       'Hoppy' AS promo,
       COUNT(DISTINCT b.beer_name) AS cnt_beers_purchased    
  FROM {{ ref('orders') }} o
  JOIN {{ ref('order_lines') }} ol
  USING (order_no)
  JOIN {{ ref('beers') }} b
  USING(beer_id)
  GROUP BY 1
  HAVING COUNT(CASE WHEN b.bitterness = 'Hoppy' THEN 1 END)
         >
         COUNT(CASE WHEN b.bitterness = 'Malty' THEN 1 END)

UNION

SELECT customer_id,
       'Malty' AS promo,
       COUNT(DISTINCT b.beer_name) AS cnt_beers_purchased
  FROM {{ ref('orders') }} o
  JOIN {{ ref('order_lines') }} ol
  USING (order_no)
  JOIN {{ ref('beers') }} b
  USING(beer_id)
  GROUP BY 1
  HAVING COUNT(CASE WHEN b.bitterness = 'Malty' THEN 1 END)
         >
         COUNT(CASE WHEN b.bitterness = 'Hoppy' THEN 1 END)




================================================
File: models/beers/sales.sql
================================================
{{ config(
    materialized="table",
    persist_docs={"relation": true, "columns": true},
    transient=false
) }}

SELECT
 "beers_with_breweries".beer_id               AS beer_id,
 "beers_with_breweries".beer_name             AS beer_name,
 "beers_with_breweries".beer_style            AS beer_style,
 "beers_with_breweries".abv                   AS abv,
 "beers_with_breweries".ibu                   AS ibu,
 "beers_with_breweries".bitterness           AS bitterness,
 "beers_with_breweries".ounces                AS ounces,

 "beers_with_breweries".brewery_id            AS brewery_id,
 "beers_with_breweries".brewery_name          AS brewery_name,
 "beers_with_breweries".brewery_city          AS brewery_city,
 "beers_with_breweries".brewery_state         AS brewery_state,
 "beers_with_breweries".brewery_country       AS brewery_country,

 "orders".order_no                           AS order_no,
 "order_lines".order_line                     AS order_line,
 "orders".created_at                          AS order_created_at,
 "order_lines".quantity                       AS order_li_quantity,
 "order_lines".price                          AS order_li_price_each,
 "order_lines".quantity * "order_lines".price   AS order_li_price_total

FROM {{ ref('orders') }} "orders"
JOIN {{ ref('order_lines') }} "order_lines" USING (order_no)
JOIN {{ ref('beers_with_breweries') }} "beers_with_breweries" USING (beer_id)

WHERE "orders".status = 'DELIVERED'



================================================
File: models/beers/schema.yml
================================================
version: 2

models:
  - name: beers_with_breweries
    tags:
      - operations
    meta:
      owner: fisa@keboola.com
    description: "Beers joined with their breweries"
    columns:
      - name: brewery_id
        description: "The unique identifier for the brewery"
        tests:
          - not_null
        meta:
          primary-key: true
          dimension:
            sql: ${TABLE}.brewery_id
          meta:
          metrics:
            num_unique_breweries: # name of your metric
              type: count_distinct # metric type
      - name: beer_id
        description: "The unique identifier for the beer"
        tests:
          - unique
          - not_null
        meta:
          primary-key: true
          dimension:
            sql: ${TABLE}.beer_id
      - name: beer_name
        description: The name of the beer
        meta:
          primary-key: true
      - name: beer_style
        description: Style of the beer (IPA, Porter, etc)
        meta:
          dimension:
            sql: ${TABLE}.beer_style
          metrics:
            num_unique_beer_styles: # name of your metric
              type: count_distinct # metric type
      - name: abv
        description: Alcohol percentage in the beer
      - name: ibu
        description: The bitterness of the beer in IBUs
      - name: bitterness
        description: The bitterness category of the beer (based on IBUs)
      - name: ounces
        description: The volume of the beer
      - name: brewery_name
        description: Name of the brewery
      - name: brewery_city
        description: City of the brewery
      - name: brewery_state
        description: State of the brewery

  - name: beers
    tags:
      - operations
    meta:
      owner: fisa@keboola.com
    description: "Beer List"
    tags: 
      - products
      - sales
      - ecommerce
    columns:
      - name: beer_id
        tests:
          - unique
          - not_null
        meta:
          primary-key: true
          dimension:
            sql: ${TABLE}.beer_id
          metrics:
            num_unique_beers: # name of your metric
              type: count_distinct # metric type
        description: The unique indentifier of the beer

      - name: beer_name
        description: The name of the beer as on the label
        meta:
          dimension:
            sql: ${TABLE}.beer_name

      - name: beer_style
        description: The style of the beer (IPA, Porter, etc)
        meta:
          dimension:
            sql: ${TABLE}.beer_style
          metrics:
            num_unique_beer_styles: # name of your metric
              type: count_distinct
              description: "Distinct Beer Styles"

      - name: abv
        description: Alcohol by volume
        meta:
          metrics:
            avg_abv:
              type: average
              description: "Average Alcohol by volume"

      - name: ibu
        description: Bitterness in International Bitterness Units
        meta:
          metrics:
            avg_ibu:
              type: average
              description: "Average Bitterness in International Bitterness Units"

      - name: bitterness
        description: The bitterness category of the beer (based on IBUs)
        meta:
          dimension:
            sql: ${TABLE}.bitterness
            description: "Bitterness Types"

      - name: brewery_id
        description: The unique indentifier of the brewery
        metrics:
            num_unique_breweries: # name of your metric
              type: count_distinct
              description: "Distinct Number of Breweries"
      
      - name: ounces
        description: Volume of a single unit
        meta:
          metrics:
            avg_ounces:
              type: average
              description: "Average Volume of a single unit"


  - name: breweries
    tags:
      - operations
    meta:
      owner: fisa@keboola.com
    columns:
      - name: brewery_id
        meta:
         primary-key: true
         metrics:
            num_unique_breweries: # name of your metric
              type: count_distinct # metric type

  - name: orders
    tags:
      - ecommerce
    meta:
      owner: jordan.burger@keboola.com
    columns:
      - name: order_no
        meta:
         primary-key: true
         metrics:
            num_unique_orders: # name of your metric
              type: count_distinct # metric type

  - name: order_lines
    tags:
      - ecommerce
    meta:
      owner: jordan.burger@keboola.com
    columns:
      - name: order_no
        meta:
          primary-key: true
        tests:
          - relationships:
              to: ref('orders')
              field: order_no

      - name: order_line
        meta:
          primary-key: true
        tests:
          - unique

  - name: sales
    tags:
      - finance
    meta:
      owner: fisa@keboola.com
    description: "Beer Sales"
    columns:
      - name: beer_id
        description: The unique indentifier of the beer
      - name: beer_name
        description: The name of the beer as on the label
      - name: beer_style
        description: The style of the beer (IPA, Porter, etc)
      - name: abv
        description: Alcohol by volume
      - name: ibu
        description: International Bitterness Unit
      - name: bitterness
        description: The bitterness category of the beer (based on IBUs)
      - name: ounces
        description: Volume of a single unit
      - name: brewery_id
        description: The unique indentifier of the brewery
      - name: brewery_name
        description: The official name of the brewery
      - name: brewery_city
      - name: brewery_state
      - name: brewery_country
      - name: order_no
        description: The order number
        tests:
          - not_null
        tags:
          - primary-key
        meta:
          primary-key: true
      - name: order_line
        description: The order line number
        tests:
          - not_null
        tags:
          - primary-key
        meta:
          primary-key: true
      - name: order_created_at
        description: When the order was created
      - name: order_li_quantity
        description: The number of units for the order line
      - name: order_li_price_each
        description: Price for a single unit
      - name: order_li_price_total
        description: The total price for the order line

  - name: promo_deliveries
    tags:
      - marketing
    meta:
      owner: david.pospisil@keboola.com
    columns:
      - name: customer_id
        description: "Customer id"
        meta: 
          primary-key: true
        tags:
          - primary-key




================================================
File: snapshots/.gitkeep
================================================



================================================
File: tests/assert_ibu_0_100_range.sql
================================================
SELECT
    beer_id,
    ibu
FROM {{ ref('beers' )}}
WHERE ibu < 0 OR ibu > 140




================================================
File: tests/.gitkeep
================================================


