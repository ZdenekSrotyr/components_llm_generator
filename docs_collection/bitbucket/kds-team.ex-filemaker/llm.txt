Directory structure:
└── kds_consulting_team-kds-team.ex-filemaker/
    ├── flake8.cfg
    ├── deploy.sh
    ├── docker-compose.yml
    ├── src/
    │   ├── component.py
    │   └── filemaker/
    │       ├── __init__.py
    │       └── client.py
    ├── bitbucket-pipelines.yml
    ├── tests/
    │   ├── test_component.py
    │   └── __init__.py
    ├── component_config/
    │   ├── logger
    │   ├── component_long_description.md
    │   ├── configuration_description.md
    │   ├── component_short_description.md
    │   ├── loggerConfiguration.json
    │   ├── configSchema.json
    │   ├── configRowSchema.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── tables/
    │       │   │   ├── test.csv
    │       │   │   └── test.csv.manifest
    │       │   └── files/
    │       │       └── order1.xml
    │       └── out/
    │           ├── tables/
    │           │   └── test.csv
    │           └── files/
    │               └── order1.xml
    ├── scripts/
    │   ├── update_dev_portal_properties.sh
    │   ├── run_kbc_tests.ps1
    │   ├── run.bat
    │   ├── build_n_run.ps1
    │   └── build_n_test.sh
    ├── requirements.txt
    ├── docs/
    │   └── imgs/
    ├── TEMPLATE_README.md
    ├── Dockerfile
    ├── LICENSE.md
    └── README.md

================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /src/component.py
================================================
"""
Template Component main class.

"""
import logging
from dataclasses import dataclass
from functools import lru_cache
from typing import List, Dict

import urllib3
from keboola.component.base import ComponentBase
from keboola.component.dao import TableDefinition
from keboola.component.exceptions import UserException
from keboola.csvwriter import ElasticDictWriter
# configuration variables
from requests.exceptions import RequestException

from filemaker.client import DataApiClient, ClientUserError

TIMESTAMP_FORMAT = '%m/%d/%Y %H:%M:%S'

KEY_PASSWORD = '#password'
KEY_USERNAME = 'username'
KEY_DATABASE = 'database'
KEY_BASEURL = 'base_url'

KEY_LAYOUT_NAME = 'layout_name'
KEY_QUERY = 'query'
KEY_FIELD_NAME = 'field_name'
KEY_FIND_CRITERIA = 'find_criteria'

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [KEY_PASSWORD, KEY_USERNAME, KEY_DATABASE, KEY_BASEURL]
REQUIRED_IMAGE_PARS = []


@dataclass
class WriterCacheEntry:
    writer: ElasticDictWriter
    table_definition: TableDefinition


class HeaderNormalizer:
    UNDERSCORE_PREFIX = 'hsh'

    @staticmethod
    def reconstruct_original_columns(column_names: List[str]) -> List[str]:
        """
        Reconstructs normalized header
        Args:
            column_names:

        Returns:

        """
        new_header = []
        for c in column_names:
            if c.startswith(f'{HeaderNormalizer.UNDERSCORE_PREFIX}_'):
                new_col = c.replace(f'{HeaderNormalizer.UNDERSCORE_PREFIX}_', '_')
            else:
                new_col = c
            new_header.append(new_col)
        return new_header

    @staticmethod
    def normalize_columns(column_names: List[str]) -> List[str]:
        """
        Normalizes header to store in KBC STorage
        Args:
            column_names:

        Returns:

        """
        new_header = []
        for c in column_names:
            if c.startswith('_'):
                new_col = f'{HeaderNormalizer.UNDERSCORE_PREFIX}{c}'
            else:
                new_col = c
            new_header.append(new_col)
        return new_header


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()
        self.validate_configuration_parameters([KEY_USERNAME, KEY_PASSWORD, KEY_BASEURL])
        self._client = DataApiClient(self.configuration.parameters[KEY_BASEURL],
                                     self.configuration.parameters[KEY_USERNAME],
                                     self.configuration.parameters[KEY_PASSWORD],
                                     ssl_verify=self.configuration.parameters.get('ssl_verify', True))
        state = self.get_state_file() or {}
        self._layout_schemas: dict = state.get('table_schemas') or {}
        self._writer_cache: Dict[str, WriterCacheEntry] = {}
        self._current_state = state.copy()

        if not self._current_state.get('previous_run_values'):
            self._current_state['previous_run_values'] = {}

        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        # suppress ssl warnings and rather log once
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    def run(self):
        """
        Main execution code
        """

        params = self.configuration.parameters

        self.test_connection()

        if not params.get('ssl_verify', True):
            logging.warning("SSL certificate verification is disabled!")

        if params.get('object_type', 'Layout') == 'Metadata':
            self._download_metadata()
        elif params.get('object_type', 'Layout') == 'Layout':
            self._init_state()
            self.validate_configuration_parameters(REQUIRED_PARAMETERS + [KEY_LAYOUT_NAME])
            self._download_layout_data()

        else:
            raise UserException(f"Invalid object type '{params['object_type']}'!")

        result_tables = self._close_writers()
        self._current_state['table_schemas'] = self._layout_schemas
        self.write_state_file(self._current_state)
        self.write_manifests(result_tables)

    def test_connection(self):
        try:
            self._client.get_product_information()
        except Exception as e:
            raise UserException(f"The connection cannot be established, "
                                f"please check your credentials. Detail: {e}") from e

    def _init_state(self):
        if not self._current_state.get('previous_run_values'):
            self._current_state['previous_run_values'][self.configuration.parameters[KEY_LAYOUT_NAME]] = {}
        elif not self._current_state['previous_run_values'].get(self.configuration.parameters[KEY_LAYOUT_NAME]):
            # fix kbc bug converting obj to array
            self._current_state['previous_run_values'][self.configuration.parameters[KEY_LAYOUT_NAME]] = {}

    def _get_last_values(self, layout_name: str, field_names: List[str]) -> Dict:
        """
        Retrieves max incremental fetching value from previous execution for this layout
        Args:
            layout_name:
            field_name:

        Returns:

        """
        state = self.get_state_file()
        prev_run_values = state.get('previous_run_values', {})
        if not prev_run_values.get(layout_name, {}):
            # fix kbc bug converting obj to array
            prev_run_values[layout_name] = {}
        last_values = {}
        for field in field_names:
            prev_value = prev_run_values.get(layout_name, {}).get(field)
            if prev_value:
                last_values[field] = prev_run_values.get(layout_name, {}).get(field)
        return last_values

    def _apply_incremental_fetching(self, layout_name: str, query_list: List[dict]):
        """
        Inplace, Applies incremental fetching filter if specified. Based on previous execution

        Returns:

        """
        field_names = self.configuration.parameters.get('loading_options', {}).get('incremental_fields', [])
        incremental_fetching = self.configuration.parameters.get('loading_options', {}).get('incremental_fetch')
        previous_values = self._get_last_values(layout_name, field_names)
        query = {}
        if incremental_fetching and previous_values:
            for field_name, previous_value in previous_values.items():
                query[field_name] = f'>= {previous_value}'
            query_list.append(query)

        return field_names

    def _build_sort_expression(self):
        field_names = self.configuration.parameters.get('loading_options', {}).get('incremental_fields')
        incremental_fetching = self.configuration.parameters.get('loading_options', {}).get('incremental_fetch')
        sort = []
        if incremental_fetching and field_names:
            for field in field_names:
                sort.append({'fieldName': field})
        return sort

    def _store_max_value(self, layout_name: str, row: dict, field_names: List[str]):
        """
        Stores max timestamp value from the row based on previous call of this method.
        Args:
            layout_name:
            row:
            field_names:

        Returns:

        """
        if not field_names or not row:
            return

        for field_name in field_names:
            current_value = row[field_name]
            self._current_state['previous_run_values'][layout_name][field_name] = current_value

    def _download_layout_data(self):
        """
        Downlaods layout data. Performs incremental fetch if selected.
        Returns:

        """
        layout_name = self.configuration.parameters[KEY_LAYOUT_NAME]
        database_name = self.configuration.parameters[KEY_DATABASE]

        # build query
        query_list = self._build_queries()
        fetching_fields = self._apply_incremental_fetching(layout_name, query_list)

        sort_expression = self._build_sort_expression()

        logging.info(f'Fetching data for layout "{layout_name}", filter: {query_list}, sort: {sort_expression}')

        pagination_limit = self.configuration.parameters.get('page_size', 1000)

        # when the query is empty, list records without filter
        if not query_list:
            response_iterator = self._client.get_records(database_name, layout_name, pagination_limit, sort_expression)
        else:
            response_iterator = self._client.find_records(database_name, layout_name, query_list, pagination_limit,
                                                          sort_expression)
        try:
            count = 1
            last_row = dict()
            for data_page, data_info in response_iterator:
                page_size = len(data_page)
                logging.info(f'Downloading records {count} - {count + page_size}')
                count += page_size
                # this is cached, we do not know table name before first response. Datainfo is same in all parts
                table_definition = self._build_table_definition(data_info['table'])
                writer = self._get_writer_from_cache(table_definition, data_info['table'])

                # select max timestamp value to reduce sorting load on FileMaker db.
                for row in data_page:
                    writer.writerow(row['fieldData'])
                    if row['fieldData']:
                        last_row = row['fieldData']

            logging.debug(last_row)
            self._store_max_value(layout_name, last_row, fetching_fields)

        except RequestException as e:
            raise UserException(e) from e

        except Exception:
            raise

    def _build_queries(self) -> List[dict]:
        """
        Builds query in format accepted by DataAPI
        Returns:

        """

        query_list = list()

        duplicate_keys = set()
        for query_group in self.configuration.parameters[KEY_QUERY]:
            single_query = {}
            for q in query_group:
                if q[KEY_FIELD_NAME] in single_query:
                    duplicate_keys.add(q[KEY_FIELD_NAME])
                single_query[q[KEY_FIELD_NAME]] = q[KEY_FIND_CRITERIA]
            query_list.append(single_query)

        if duplicate_keys:
            raise UserException(
                f'Single key can be listed only once in a query group (AND)! Affected keys: {duplicate_keys} '
                'If you want to define a range filter please refer to the documentation: '
                'https://fmhelp.filemaker.com/help/18/fmp/en/#page/FMP_Help%2Ffinding-ranges.html%23')
        return query_list

    def _download_metadata(self):
        """
        Download available databases and layouts and field metadata

        Returns:

        """
        logging.info('Downloading available databases and layouts')
        layouts_table = self.create_out_table_definition('layouts.csv', incremental=False)

        database_names = self._client.get_database_names()
        layouts_writer = self._get_writer_from_cache(layouts_table, layouts_table.name)

        for database in database_names:
            layouts = self._client.get_layouts(database)
            layouts_data = self._parse_layout_data(layouts, database)
            layouts_writer.writerows(layouts_data)

        field_metadata_filter = self.configuration.parameters.get('field_metadata', [])
        layout_metadata_table = self.create_out_table_definition('layout_fields_metadata.csv', incremental=False)
        layout_metadata_writer = self._get_writer_from_cache(layout_metadata_table, layout_metadata_table.name)
        if field_metadata_filter:
            logging.info('Downloading available field schemas for specified layouts.')
        for field_f in field_metadata_filter:
            layout_metadata = self._client.get_layout_field_metadata(field_f['database'], field_f['layout_name'])
            layout_metadata_writer.writerows(
                self._parse_layout_metadata(layout_metadata, field_f['database'], field_f['layout_name']))

    def _parse_layout_metadata(self, layout_metadata: List[dict], database: str, layout_name: str):
        for record in layout_metadata:
            record['database_name'] = database
            record['layout_name'] = layout_name
            yield record

    def _parse_layout_data(self, layouts: List[dict], database: str) -> List[dict]:
        layout_records = []

        for lo in layouts:
            if lo.get('isFolder', False):
                parent_layout_name = lo['name']
                children = [
                    {"database_name": database, "parent_layout_name": parent_layout_name, "layout_name": child['name'],
                     "table": child.get('table', '')}
                    for child in lo['folderLayoutNames']]
                layout_records.extend(children)
            else:
                layout_records.append({"database_name": database,
                                       "parent_layout_name": '',
                                       "layout_name": lo["name"],
                                       "table": lo['table']})
        return layout_records

    @lru_cache(10)
    def _build_table_definition(self, table_name: str):
        primary_key = self.configuration.parameters['loading_options'].get('pkey', [])
        # normalize
        primary_key = HeaderNormalizer.normalize_columns(primary_key)
        incremental = self.configuration.parameters['loading_options'].get('incremental', False)
        return self.create_out_table_definition(f'{table_name}.csv', primary_key=primary_key, incremental=incremental)

    @lru_cache(10)
    def _get_writer_from_cache(self, table_definition: TableDefinition, table_name: str) -> ElasticDictWriter:

        if not self._writer_cache.get(table_name):
            column_headers = HeaderNormalizer.reconstruct_original_columns(self._layout_schemas.get(table_name, []))
            writer = ElasticDictWriter(table_definition.full_path, column_headers)
            self._writer_cache[table_name] = WriterCacheEntry(writer, table_definition)

        return self._writer_cache[table_name].writer

    def _close_writers(self) -> List[TableDefinition]:
        """
        Finalizes the writers and store schemas in cache.
        Returns: List of resulting table definitions

        """

        result_tables = []
        for key, wr in self._writer_cache.items():
            wr.writer.close()
            self._layout_schemas[key] = wr.writer.fieldnames
            # set columns
            wr.table_definition.columns = HeaderNormalizer.normalize_columns(wr.writer.fieldnames)
            result_tables.append(wr.table_definition)
        return result_tables


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except (UserException, ClientUserError) as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: /src/filemaker/client.py
================================================
import json
import logging
from typing import Tuple, List, Iterator

import requests
from keboola.http_client import HttpClient
from requests import HTTPError
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry


class ClientUserError(Exception):
    pass


class DataApiClient(HttpClient):

    def __init__(self,
                 server_url: str,
                 user: str,
                 password: str,
                 ssl_verify: bool = True,
                 max_retries: int = 5,
                 backoff_factor: float = 0.3,
                 status_forcelist: Tuple[int, ...] = (500, 502, 504)) -> None:
        base_url = f'{server_url}/fmi/data/v2/'

        self._user = user
        self._password = password
        self._ssl_verify = ssl_verify
        self._current_session_token = None
        self._current_database = ''
        super().__init__(base_url=base_url, max_retries=max_retries, backoff_factor=backoff_factor,
                         status_forcelist=status_forcelist)

    def login_to_database_session(self, database: str):
        """
        Login and open FileMaker DataApi session. Remember to call the logout method, otherwise the session is closed
        automatically after 15 min of inactivity.
        Args:
            database:

        Returns: session_token

        """
        try:
            response = self.post_raw(f'databases/{database}/sessions', json={}, auth=(self._user, self._password),
                                     verify=self._ssl_verify)
            response.raise_for_status()
            token = response.json()['response']['token']
            return token
        except HTTPError as e:
            raise ClientUserError(
                f'Failed to login to database {database}! Please verify your user name and password or database name.',
                e.response.text) from e

    def logout_from_database_session(self, database: str, session_token: str):
        """
        Performs logout from current session
        Returns:

        """
        try:
            self.delete(f'databases/{database}/sessions/{session_token}',
                        verify=self._ssl_verify)
        except Exception as e:
            logging.warning(f"Failed to logout from session. {e}")

    def find_records(self, database: str, layout: str,
                     query: List[dict], page_size=1000, sort: List[dict] = None) -> Iterator[Tuple[List[dict], dict]]:
        """

        Args:
            database (str): Database name
            layout (str): Layout name
            query (List[dict]: List of find queries, e.g.  [{"_Timestamp_Modified":">= 4/11/2022"}]. Required parameter.
            Each dictionary is logical OR. Each property in the dictionary is evaluated as logical AND
            page_size:
            sort: sort expression

        Returns: Iterator of response data pages.

        """

        session_key = self.login_to_database_session(database)
        auth_header = {"Authorization": f'Bearer {session_key}'}
        json_data = {}
        if query:
            json_data["query"] = query

        if sort:
            json_data['sort'] = sort

        endpoint = f'databases/{database}/layouts/{layout}/_find'

        has_more = True
        json_data['offset'] = 1
        try:
            while has_more:
                json_data['limit'] = page_size

                response = self.post_raw(endpoint, json=json_data, verify=self._ssl_verify, headers=auth_header)
                self._handle_http_error(response)
                response_data = response.json().get('response', {})

                if response_data.get('data', []):
                    has_more = True
                    json_data['offset'] += page_size
                else:
                    has_more = False

                yield response_data['data'], response_data['dataInfo']
        finally:
            self.logout_from_database_session(database, session_key)

    def get_records(self, database: str, layout: str, page_size=1000,
                    sort: List[dict] = None) -> Iterator[Tuple[List[dict], dict]]:
        """
        Get all layout records, paginated.
        Args:
            database: database name
            layout:
            page_size:
            sort: sort expression

        Returns: Iterator of response data pages.

        """
        session_key = self.login_to_database_session(database)
        auth_header = {"Authorization": f'Bearer {session_key}'}

        endpoint = f'databases/{database}/layouts/{layout}/records'
        has_more = True
        parameters = {"_offset": 1, "_limit": page_size}
        if sort:
            parameters['_sort'] = json.dumps(sort)
        try:
            while has_more:

                response = self.get_raw(endpoint, params=parameters, verify=self._ssl_verify, headers=auth_header)
                self._handle_http_error(response)
                response_data = response.json().get('response', {})

                if response_data['dataInfo']['returnedCount'] == page_size:
                    has_more = True
                    parameters['_offset'] += page_size
                else:
                    has_more = False

                yield response_data['data'], response_data['dataInfo']
        finally:
            self.logout_from_database_session(database, session_key)

    def get_database_names(self) -> List[str]:
        """
        Get all available database names for the logged-in user.
        Returns:

        """
        response = self.get_raw('databases', auth=(self._user, self._password), verify=self._ssl_verify)
        self._handle_http_error(response)
        response_data = response.json().get('response', {})
        return [record.get('name') for record in response_data['databases']]

    def get_product_information(self) -> dict:
        """
        To retrieve product information about the host.
        Does not retry.
        Returns:

        """
        url = self._build_url('productInfo', False)
        response = requests.get(url, auth=(self._user, self._password), verify=self._ssl_verify)
        self._handle_http_error(response)
        response_data = response.json().get('response', {})
        return response_data

    def get_layouts(self, database: str) -> List[dict]:
        """
        Get available layouts for the database
        Args:
            database: database name

        Returns:

        """
        session_key = self.login_to_database_session(database)
        auth_header = {"Authorization": f'Bearer {session_key}'}
        endpoint = f'databases/{database}/layouts'
        try:
            response = self.get_raw(endpoint, headers=auth_header, verify=self._ssl_verify)
            self._handle_http_error(response)
            response_data = response.json().get('response', {})
            return response_data.get('layouts', [])
        finally:
            self.logout_from_database_session(database, session_key)

    def get_layout_field_metadata(self, database: str, layout: str) -> List[dict]:
        """
        Get layout field metadata
        Args:
            database: database name
            layout: layout name

        Returns:

        """
        session_key = self.login_to_database_session(database)
        auth_header = {"Authorization": f'Bearer {session_key}'}
        endpoint = f'databases/{database}/layouts/{layout}'
        try:
            response = self.get_raw(endpoint, headers=auth_header, verify=self._ssl_verify)
            self._handle_http_error(response)
            response_data = response.json().get('response', {})
            return response_data.get('fieldMetaData', [])
        finally:
            self.logout_from_database_session(database, session_key)

    def _handle_http_error(self, response):

        try:
            response.raise_for_status()
        except requests.HTTPError as e:
            raise ClientUserError(f'Failed to perform find request. Detail: {e.response.text}')

    # override to continue on failure
    def _requests_retry_session(self, session=None):
        session = session or requests.Session()
        retry = Retry(
            total=self.max_retries,
            read=self.max_retries,
            connect=self.max_retries,
            backoff_factor=self.backoff_factor,
            status_forcelist=self.status_forcelist,
            allowed_methods=self.allowed_methods,
            raise_on_status=False
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        return session


================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: /component_config/logger
================================================
gelf

================================================
File: /component_config/component_long_description.md
================================================
Extract layout data from [FileMaker](https://www.claris.com/filemaker/) relational database via [FileMaker Data API](https://help.claris.com/en/data-api-guide/content/write-data-api-calls.html).

================================================
File: /component_config/configuration_description.md
================================================
**NOTE** The columns prefixed `_` are prefixed with `hsh` prefix in the result table. This is because the Keboola Connection Storage does not allow to store columns prefixed with underscore. 
So the column `_Timestamp` will be stored as `hsh_Timestamp` in the resulting table.

================================================
File: /component_config/component_short_description.md
================================================
FileMaker is a cross-platform relational database application from Claris International. Sync layouts via Data API.

================================================
File: /component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: /component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "FileMaker Credentials",
  "format": "table",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "required": [
    "username",
    "#password"
  ],
  "properties": {
    "base_url": {
      "type": "string",
      "title": "Host URL of the FileMaker server.",
      "default": "",
      "minLength": 1,
      "propertyOrder": 1
    },
    "username": {
      "type": "string",
      "title": "User Name",
      "default": "",
      "minLength": 1,
      "propertyOrder": 10
    },
    "#password": {
      "type": "string",
      "title": "Password",
      "format": "password",
      "default": "",
      "minLength": 1,
      "propertyOrder": 20
    },
    "ssl_verify": {
      "title": "Verify SSL certificate.",
      "type": "boolean",
      "format": "checkbox",
      "default": true,
      "description": "Set to false to disable SSL (https) certificate verification. Use with caution.",
      "propertyOrder": 30
    }
  }
}

================================================
File: /component_config/configRowSchema.json
================================================
{
  "title": "Query Configuration",
  "type": "object",
  "required": [
    "object_type"
  ],
  "properties": {
    "object_type": {
      "title": "Object type",
      "type": "string",
      "enum": [
        "Metadata",
        "Layout"
      ],
      "default": "Layout",
      "propertyOrder": 1
    },
    "database": {
      "title": "Database",
      "type": "string",
      "description": "FileMaker database name",
      "options": {
        "dependencies": {
          "object_type": "Layout"
        }
      },
      "propertyOrder": 3
    },
    "layout_name": {
      "title": "FileMaker layout name",
      "type": "string",
      "options": {
        "dependencies": {
          "object_type": "Layout"
        }
      },
      "propertyOrder": 5
    },
    "field_metadata": {
      "title": "Field Metadata",
      "description": "Download schemas of selected layouts. If left empty only list of available databases and layouts is downloaded.",
      "type": "array",
      "format": "table",
      "options": {
        "dependencies": {
          "object_type": "Metadata"
        }
      },
      "items": {
        "type": "object",
        "title": "Layout",
        "format": "grid",
        "properties": {
          "database": {
            "title": "Database",
            "type": "string",
            "description": "FileMaker file/database name",
            "options": {
              "input_width": "450px"
            },
            "propertyOrder": 3
          },
          "layout_name": {
            "title": "FileMaker layout name",
            "type": "string",
            "description": "FileMaker layout name",
            "options": {
              "input_width": "450px"
            },
            "propertyOrder": 5
          }
        }
      },
      "propertyOrder": 5
    },
    "query": {
      "type": "array",
      "options": {
        "dependencies": {
          "object_type": "Layout"
        }
      },
      "format": "table",
      "title": "Query Group",
      "propertyOrder": 10,
      "description": "Groups of filter criteria. 'OR' logical operation is applied to each group. 'AND' logical operation is applied to each set of queries. Note that if you include field used for incremental fetching, the incremental fetching will not work as expected. One key can be specified only once per (AND) group, see <a href=\"https://fmhelp.filemaker.com/help/18/fmp/en/#page/FMP_Help%2Ffinding-ranges.html%23\"><ocumentation</a>",
      "items": {
        "type": "array",
        "title": "Query Group",
        "minItems": 1,
        "format": "table",
        "propertyOrder": 11,
        "items": {
          "type": "object",
          "title": "Query",
          "properties": {
            "field_name": {
              "title": "Field Name",
              "type": "string",
              "propertyOrder": 15
            },
            "find_criteria": {
              "type": "string",
              "title": "Find Criteria",
              "options": {
                "input_width": "450px"
              },
              "propertyOrder": 30
            }
          }
        }
      }
    },
    "loading_options": {
      "type": "object",
      "title": "Loading Options",
      "propertyOrder": 100,
      "required": [
        "incremental"
      ],
      "options": {
        "dependencies": {
          "object_type": "Layout"
        }
      },
      "properties": {
        "incremental_fields": {
          "title": "Incremental Fields",
          "description": "List of column names to use for incremental fetching.",
          "maxItems": 1,
          "type": "array",
          "items": {
            "type": "string",
            "title": "Field Name",
            "propertyOrder": 300
          },
          "default": [
            "_Timestamp_Modified"
          ],
          "options": {
            "dependencies": {
              "incremental": 1,
              "incremental_fetch": true
            }
          },
          "propertyOrder": 300
        },
        "pkey": {
          "type": "array",
          "items": {
            "type": "string",
            "title": "Primary key column"
          },
          "default": [
            "Id"
          ],
          "title": "Primary key",
          "description": "List of the primary key column names.",
          "propertyOrder": 5000
        },
        "incremental_fetch": {
          "title": "Incremental fetch",
          "type": "boolean",
          "format": "checkbox",
          "default": false,
          "description": "Fetch records that have been updated since the last run of the component with a specified field",
          "propertyOrder": 250,
          "options": {
            "dependencies": {
              "incremental": 1
            }
          }
        },
        "incremental": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "options": {
            "enum_titles": [
              "Full Load",
              "Incremental Update"
            ]
          },
          "default": 0,
          "title": "Load type",
          "description": "If set to Incremental update, the result tables will be updated based on primary key and new records will be fetched. Full load overwrites the destination table each time.",
          "propertyOrder": 200
        }
      }
    },
    "page_size": {
      "type": "integer",
      "title": "Page size",
      "description": "Number of records retrieved in single API call. Note that to large page size may affect load on the destination database",
      "default": 1000,
      "propertyOrder": 60,
      "options": {
        "dependencies": {
          "object_type": "Layout"
        }
      }
    }
  }
}

================================================
File: /component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: /component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /requirements.txt
================================================
keboola.component==1.3.7
keboola.utils
keboola.http-client
keboola.csvwriter
mock
freezegun


================================================
File: /TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

================================================
File: /Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /README.md
================================================
# FiLeMaker Extractor

Extract layout data from [FileMaker](https://www.claris.com/filemaker/) relational database via [FileMaker Data API](https://help.claris.com/en/data-api-guide/content/write-data-api-calls.html).

**Table of contents:**

[TOC]

Functionality notes
===================

Prerequisites
=============

- Prepare your database for FileMaker Data API access, by [creating specific layouts](https://help.claris.com/en/data-api-guide/content/prepare-databases-for-access.html)
- Obtain FileMaker Data API credentials, host URL + username and password


Configuration
=============

## FileMaker Credentials
 - Host URL of the FileMaker server. (base_url) - [REQ] 
 - User Name (username) - [REQ] 
 - Password (#password) - [REQ] 
 - Verify SSL certificate. (ssl_verify) - [OPT] Set to false to disable SSL (https) certificate verification. Use with caution.


## Query Configuration
 - Object type (object_type) - [REQ] "enum": ["Metadata", "Layout"], type of object you wish to download. 
   - Metadata - Download schemas of selected layouts
   - Layout - Download data of particular layout
 - Database (database) - [OPT] FileMaker database name
 - FileMaker layout name (layout_name) - [OPT] Name of the Layout
 - Field Metadata (field_metadata) - [OPT] Download schemas of selected layouts. If left empty only list of available databases and layouts is downloaded.
 - Query Group (query) - [OPT] Groups of filter criteria. 'OR' logical operation is applied to each group. 'AND' logical operation is applied to each set of queries. Note that if you include field used for incremental fetching, the incremental fetching will not work as expected.
 - Loading Options (loading_options) - [OPT] Options that define how the data is synced
   - Load Type (incremental) - Full load (0) data in destination is overwritten each run, Incremental Update (1) - each data in destination is upserted.
   - Primary key (pkey) - list of primary key columns if present. Needed for incremental load type
   - Incremental fetching (incremental_fetch) - If true each consecutive run will return only records with values >= than the highest incremental fields values from last run.
   - Incremental fields (incremental_fields) - List of columns used for incremental fetching. If multiple specified AND relation is used.
 - Page size (page_size) - [OPT] Number of records retrieved in single API call. Note that to large page size may affect load on the destination database


Sample Configuration
=============
```json
{
    "parameters": {
        "ssl_verify": false,
        "object_type": "Layout",
        "base_url": "https://localhost:8900",
        "username": "keboola",
        "#password": "SECRET_VALUE",
        "database": "NAC_Staff",
        "layout_name": "WS_Data_Analytics_PAC_StaffTeam",
        "query": [],
        "loading_options": {
            "incremental_fields": [
                "Timestamp_Modified",
                "UID"
            ],
            "pkey": [
                "Id"
            ],
            "incremental_fetch": true,
            "incremental": 1
        }
    },
    "action": "run"
}
```

Output
======

**NOTE** The columns prefixed `_` are prefixed with hsh prefix in the result table. This is because the Keboola Connection Storage does not allow to store columns prefixed with underscore. So the column _Timestamp will be stored as hsh_Timestamp in the resulting table.

### Metadata


####**layouts** 

- List of available layouts

columns [`table`, `layout_name`, `parent_layout_name`] 

  
####**layout_fields_metadata** 

-  Schema and metadata describing the particular layout.

columns: [ `displayType`,
	`repetitionEnd`,
	`numeric`,
	`maxCharacters`,
	`maxRepeat`,
	`fourDigitYear`,
	`layout_name`,
	`database_name`,
	`type`,
	`repetitionStart`,
	`autoEnter`,
	`name`,
	`global`,
	`result`,
	`notEmpty`,
	`timeOfDay`]


### Layouts

Layout data defined by the particular query definition.

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in
the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)

