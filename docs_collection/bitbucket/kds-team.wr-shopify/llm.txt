Directory structure:
└── kds_consulting_team-kds-team.wr-shopify/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── docs/
    │   └── examples/
    │       └── product/
    │           └── 001-new-product-with-default-variant/
    │               └── in/
    │                   ├── state.json
    │                   └── tables/
    │                       └── product_variant.csv
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── json_converter.py
    │   └── shopify_client/
    │       ├── __init__.py
    │       ├── client.py
    │       └── resources/
    │           ├── __init__.py
    │           └── customer_address.py
    └── tests/
        ├── __init__.py
        ├── test_component.py
        ├── test_functional.py
        └── resources/
            ├── customer_address_create.csv
            ├── customer_address_update.csv
            ├── customer_create.csv
            ├── customer_update.csv
            ├── image_create.csv
            ├── image_update.csv
            ├── inventory_levels.csv
            ├── order_create_existing_customer.csv
            ├── order_create_fullfill.csv
            ├── order_create_simple
            ├── order_update_note.csv
            ├── product_update.csv
            ├── product_variant.csv
            └── products.csv

================================================
FILE: README.md
================================================
# Shopify Data Destination


**Credits:** Client part of this application is partially inspired by 
[Singer.IO shopify TAP project](https://github.com/singer-io/tap-shopify)

**Table of contents:**  
  
[TOC]


# Shopify setup - Prerequisites

To enable this application, you need to:
 
- [Enable custom app development](https://help.shopify.com/en/manual/apps/app-types/custom-apps) for your store. 
- Create a custom app and install it in your store.
- Enable `Write access` Admin API access scope for the following objects:
    - `Orders`
    - `Products`
    - `Inventory`
    - `Customers`
- Obtain the API access token under your app's API credentials tab.
    
    
 
# Configuration

## Authentication 

Make sure you have created a custom application with appropriate permissions.

### Admin API access token

Admin API access token of your private app.

### Shop name

Your shop ID found in the URL, e.g., `[shop_id]`.myshopify.com


## Setup

- Each configuration row accepts a single table on the input. It will be then converted into a JSON model that is required by 
the specified endpoint.
- Each column in the table translates to a JSON property. In some cases, you may include a full JSON string as the column value. 
- Objects may be flattened into columns using the `__` separator. E.g., `customer__id` leads to `{"customer":{"id":"VAL"}}`


**NOTE:** It is possible to include one extra column that serves as a reference to your source data row and is then excluded from the payload.  
You can set this column by setting the `source_id` parameter.




## Supported Endpoints

If you need additional endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/) or submit a pull request.



### Products

The Product resource lets you update and create products in a merchant's store. 
You can use [product variants](https://shopify.dev/docs/admin-api/rest/reference/products/product-variant) with the Product resource to create or update 
different versions of the same product. You can also add or update [product images](https://shopify.dev/docs/admin-api/rest/reference/products/product-image).

The expected model is [described here](https://shopify.dev/api/admin-rest/2021-10/resources/product#resource_object):

The input table needs to reflect the property names. All fields are values in the appropriate column, apart from several exceptions:

- `options` -- You can define up to 3 options for each product. Each option has a name and value, which is an array. The column name is formed 
like `option__{OPTION_NAME}` where `{OPTION_NAME}` is the name of the required option. For instance, to create an option `Color`, you should include a column named 
`option__Color` and the value would be a list of option values (note that the order of columns sets the order of options) e.g., 
```
[
             "Pink",
             "Red",
             "Green",
             "Black"]
```
- `variants` --- In this column, you may include a full [product variants](https://shopify.dev/docs/admin-api/rest/reference/products/product-variant) array as a string.
- `images` --- In this column, you may include a full [product images](https://shopify.dev/docs/admin-api/rest/reference/products/product-image) array as a string.

#### Full example

The following input table:

```
"body_html","handle","images","options__Size","product_type","published_at","published_scope","status","tags","template_suffix","title","variants","vendor","options__Color",innerid
"It's the small iPod with a big idea: Video.","ipod-nano","[{
            ""src"": ""http://example.com/burton.jpg""
        }
    ]","[""155"", ""159""]","Cult Products","2007-12-31T19:00:00-05:00","global","active","Emotive, Flash Memory, MP3, Music","special","IPod Nano - 8GB","[{

            ""sku"": ""IPOD2008PINK"",
            ""grams"": 567,
            ""price"": 199.99,
            ""title"": ""Pink"",
            ""weight"": 0.2,
            ""barcode"": ""1234_pink"",
            ""option2"": ""Pink"",
            ""option1"": ""155"",
            ""taxable"": true,
            ""product_id"": 632910392,
            ""weight_unit"": ""kg"",
            ""inventory_policy"": ""continue"",
            ""requires_shipping"": true,
            ""fulfillment_service"": ""manual"",
            ""inventory_management"": ""shopify""
        }
    ]","Apple","[
                ""Pink"",
                ""Red"",
                ""Green"",
                ""Black""]",111

```

Leads to the following object:

```json
{
    "body_html": "It's the small iPod with a big idea: Video.",
    "handle": "ipod-nano",
    "images": [{
        "src": "http://example.com/burton.jpg"
    }
    ],
    "options": [
        {"name": "Color",
         "values": [
             "Pink",
             "Red",
             "Green",
             "Black"]
         },
        {"name": "Size", "values": ["155", "159"]}
    ],
    "product_type": "Cult Products",
    "published_at": "2007-12-31T19:00:00-05:00",
    "published_scope": "global",
    "status": "active",
    "tags": "Emotive, Flash Memory, MP3, Music",
    "template_suffix": "special",
    "title": "IPod Nano - 8GB",
    "variants": [{

        "sku": "IPOD2008PINK",
        "grams": 567,
        "price": 199.99,
        "title": "Pink",
        "weight": 0.2,
        "barcode": "1234_pink",
        "option1": "Pink",
        "taxable": true,
        "weight_unit": "kg",
        "inventory_policy": "continue",
        "requires_shipping": true,
        "fulfillment_service": "manual",
        "inventory_management": "shopify"
    }
    ],
    "vendor": "Apple"
}
```

#### Other examples

**Create a new product with the default product variant**

|title   |body_html|vendor                   |product_type|tags|
|--------|---------|-------------------------|------------|----|
|Burton Custom Freestyle 151|\u003cstrong\u003eGood snowboard!\u003c\/strong\u003e|Burton|Snowboard|["Barnes \u0026 Noble", "Big Air", "John's Fav"]|


**Create a new unpublished product**

|title   |body_html|vendor                   |product_type|published|
|--------|---------|-------------------------|------------|---------|
|Burton Custom Freestyle 151|\u003cstrong\u003eGood snowboard!\u003c\/strong\u003e|Burton                   |Snowboard   |false    |


**Create a Draft product**

|title   |body_html|vendor                   |product_type|status|
|--------|---------|-------------------------|------------|------|
|Burton Custom Freestyle 151|\u003cstrong\u003eGood snowboard!\u003c\/strong\u003e|Burton                   |Snowboard   |draft |

**Product with multiple variants**

|title   |body_html|vendor                   |product_type|variants|
|--------|---------|-------------------------|------------|--------|
|Burton Custom Freestyle 151|\u003cstrong\u003eGood snowboard!\u003c\/strong\u003e|Burton                   |Snowboard   |[{"option1":"First","price":"10.00","sku":"123"},{"option1":"Second","price":"20.00","sku":"123"}]|

**Create a new product with the default variant and a product image that will be downloaded by Shopify**

|title   |body_html|vendor                   |product_type|images|
|--------|---------|-------------------------|------------|------|
|Burton Custom Freestyle 151|\u003cstrong\u003eGood snowboard!\u003c\/strong\u003e|Burton                   |Snowboard   |[{"src":"http:\\/\\/example.com\\/rails_logo.gif"}]|


**Create a new product with multiple product variants and multiple options**

|title   |body_html|vendor                   |product_type|variants|options__Color   |options__Size |
|--------|---------|-------------------------|------------|--------|-----------------|--------------|
|Burton Custom Freestyle 151|\u003cstrong\u003eGood snowboard!\u003c\/strong\u003e|Burton                   |Snowboard   |[{"option1":"Blue","option2":"155"},{"option1":"Black","option2":"159"}]|["Blue", "Black"]|["155", "159"]|

**Update a product's status**


|id   |status         |
|----------|--------------|
|6180685807765    |draft          |

### Inventory levels

An inventory item represents the physical good available to be shipped to a customer. 
It holds essential information about the physical good, including its SKU and whether its inventory is tracked.

There is a 1:1 relationship between a product variant and an inventory item. Each product variant includes the ID of its related inventory item. You can use the inventory item ID to query the InventoryLevel resource to retrieve inventory information.

This allows you to update the inventory levels for particular Product variants. [More info here](https://shopify.dev/api/admin-rest/2021-10/resources/inventorylevel#top)

#### Setup

To update an inventory level, you will need to know the particular `Inventory Item ID` linked to a Product Variant and its `location ID`. 
This can be retrieved via the Shopify data destination connector, by joining the table `product` with `product_variant` on `product_id` and `product_variant` with `inventory_levels` on `inventory_item_id`.

#### Examples

**Increase inventory level by 100**

|location_id|inventory_item_id|available_adjustment|
|-----------|-----------------|--------------------|
|6884556842 |12250274365496   |100                 |

To decrease the level, just use the negative sign in the available adjustment column: `-100`


**Set inventory level to 100**

|location_id|inventory_item_id|available|
|-----------|-----------------|--------------------|
|6884556842 |12250274365496   |100                 |


### Product Variants

[A variant](https://shopify.dev/api/admin-rest/2021-10/resources/product-variant#top) can be added to a Product resource to represent one version of a product with several options. 
The Product resource will have a variant for every possible combination of its options. 
Each product can have a maximum of three options and a maximum of 100 variants.

The product variants can be created as a part of a product or separately using this endpoint. 

To update the variant, include the `id` column. 

#### Examples

**Create new variant**

|option1   |price         |
|----------|--------------|
|Yellow    |1.00          |


**Create new variant - Complete**

|barcode   |compare_at_price|created_at               |fulfillment_service|grams|image_id|inventory_item_id|inventory_management|inventory_policy|option__option1|price |product_id|requires_shipping|sku         |taxable|tax_code|updated_at               |weight|weight_unit|
|----------|----------------|-------------------------|-------------------|-----|--------|-----------------|--------------------|----------------|---------------|------|----------|-----------------|------------|-------|--------|-------------------------|------|-----------|
|1234_pink |299.00          |2012-08-24T14:01:47-04:00|manual             |567  |434522  |342916           |shopify             |continue        |Pink           |199.00|632910392 |True             |IPOD2008PINK|True   |DA040000|2012-08-24T14:01:47-04:00|100   |oz         |


### Product Images

Any product may have up to 250 images, and images can be in .png, .gif or .jpg format.

[More info here](https://shopify.dev/api/admin-rest/2021-10/resources/product-image#top)

Images can be also included in the Create Product object.

#### Examples

For a list of available properties, refer [here](https://shopify.dev/api/admin-rest/2021-10/resources/product-image#resource_object).

`product_id` is always required.
`id` containing image_id is required on the update.

**Create a new product image with included image data as an attachment**


|product_id |filename   |attachment         |
|-----------|----------|--------------|
|632910392  |boots.png    |BASE64_ENCODED_IMAGE          |


**Create a new product image using a source URL that will be downloaded by Shopify**

|product_id |src   |
|-----------|----------|
|632910392  |http://example.com/rails_logo.gif  |

**Create a new product image and attach it to product variants**

|product_id |filename   |attachment          |variant_ids          |
|-----------|-----------|--------------------|--------------------|
|632910392  |boots.png  |BASE64_ENCODED_IMAGE|[808950810,457924702]|


**Modify an image; change its position and alt tag content**

|product_id|id            |position                 |alt   |
|----------|--------------|-------------------------|------|
|6180685807765|29038486847637|2                        |new alt tag content|


### Orders

It is possible to create or update orders. The order structure is complex, so it is required to build the assigned arrays, such as line items, 
beforehand and include as JSON strings in the column values.

**NOTE:** Objects may be flattened by `__` separator, e.g. `customer__id` => `{"customer":{"id":"asd"}}`

More information on the Order object is [available here](https://shopify.dev/api/admin-rest/2021-10/resources/order#resource_object).

#### Examples 

**Create a simple order with only a product variant ID and no optional parameters**

|line_items|
|----------|
|[{"variant_id":447654529,"quantity":1}]|


**Create a simple order and fulfill it**

|email|fulfillment_status|fulfillments              |line_items                             |
|-----|------------------|--------------------------|---------------------------------------|
|foo@example.com|fulfilled         |[{"location_id":48752903}]|[{"variant_id":447654529,"quantity":1}]|

**Create a partially paid order with an existing customer**

|line_items                                  |customer     |financial_status|
|--------------------------------------------|-------------|-------|
|[{"quantity":1,"variant_id":42632102084859}]|{"id":"0012"}|pending|
|[{"variant_id":447654529,"quantity":1}]     |207119551    |pending|


**Update the order note**

|id                                     |note     |
|---------------------------------------|---------|
|450789469                              |Customer contacted us about a custom engraving on this iPod|



### Customers

Create or update customers. More info on the object structure is available [here](https://shopify.dev/api/admin-rest/2021-10/resources/customer#resource_object).

#### Examples

**Create new customer**

|first_name                             |last_name|email                        |phone       |verified_email|addresses                                                                                                                                                    |
|---------------------------------------|---------|-----------------------------|------------|--------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|
|Steve                                  |Lastnameson|steve.lastnameson@example.com|+15142546011|true          |[{"address1":"123 Oak St","city":"Ottawa","province":"ON","phone":"555-1212","zip":"123 ABC","last_name":"Lastnameson","first_name":"Mother","country":"CA"}]|


**Update new customer**

|id                                     |email    |note                         |
|---------------------------------------|---------|-----------------------------|
|5850085818517                          |changed@email.address.com|Customer is a great guy      |

### Customer Address

Add or update customer addresses. [More info on the object structure](https://shopify.dev/api/admin-rest/2021-10/resources/customer-address#resource_object)

`customer_id` column is required.

#### Examples

**Add address to a customer**

|customer_id                            |address1 |address2                     |city    |company  |first_name|last_name   |phone       |province|country|zip    |name               |province_code|country_code|country_name|
|---------------------------------------|---------|-----------------------------|--------|---------|----------|------------|------------|--------|-------|-------|-------------------|-------------|------------|------------|
|5850085818517                          |1 Rue des Carrieres|Suite 1234                   |Montreal|Fancy Co.|Samuel    |de Champlain|819-555-5555|Quebec  |Canada |G1R 4P5|Samuel de Champlain|QC           |CA          |Canada      |


**Update a customer address**

|id                                     |customer_id|zip                          |
|---------------------------------------|-----------|-----------------------------|
|207119551                              |5850085818517|90210                        |


# Output

A table `result` is outputted that contains a reference to the source_id of the record and the result of the transaction. 
If an error happens, you can see the reason and react to it based on this table.


|timestamp|endpoint_type|source_id                |created_id|status|err_message|
|---------|-------------|-------------------------|----------|------|-----------|
|2021-10-25 10:35:27.250466|product_variant|productvar_1                         |41372919922837|success|           |



# Example JSON configuration

```json
{
  "parameters": {
    "#api_token": "XXXXXX",
    "shop": "testshop-dev",
    "endpoint": "product",
    "mode": "update",
    "source_id_reference": {
      "source_id_col": "id",
      "remove_from_data": false
    },
    "debug": false
  }
}
```


### Parameters

- `#api_token` --- Admin password of your private app
- `shop` --- Your shop ID found in the URL, e.g., `[shop_id]`.myshopify.com
- `endpoint` --- One of the supported object types: `[
        "product",
        "product_image",
        "product_variant",
        "inventory_level",
        "order",
        "customer",
        "customer_address"
      ]`
- `mode` --- Create or update the object. Supported values (`update`, `create`). **NOTE**: `inventory_level` supports only `update`
- `source_id_reference`
    - `source_id_col` --- Column name in the source data to use as a reference for results
    - `remove_from_data` --- (boolean) If true, the source column will be removed from data; otherwise, it will be sent as a part of the payload.
- `debug` --- Set the verbose logging level.


# Development


If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace, and run the component with the following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone git@bitbucket.org:kds_consulting_team/kds-team.wr-shopify.git kds-team.wr-shopify
cd kds-team.wr-shopify
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Integration

For information about deployment and integration with Keboola, please refer to the
[deployment section of our developer
documentation](https://developers.keboola.com/extend/component/deployment/)



================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
keboola.component==1.3.5
keboola.utils==1.1.0
keboola.http-client==1.0.0
mock==4.0.3
freezegun==1.1.0
ShopifyAPI==12.7.0
pyactiveresource==2.2.2
backoff==1.11.1
https://bitbucket.org/kds_consulting_team/kds-team.processor-csv-to-json/get/0.5.4.zip#egg=csv2json



================================================
FILE: component_config/component_long_description.md
================================================
Create or update the following objects in your Shopify store: [Order](https://shopify.dev/docs/api/admin-rest/2024-01/resources/order), 
[Product](https://shopify.dev/docs/api/admin-rest/2024-01/resources/product),
[Product image](https://shopify.dev/docs/api/admin-rest/2024-01/resources/product-image),
[Product variant](https://shopify.dev/docs/api/admin-rest/2024-01/resources/product-variant),
[Inventory level](https://shopify.dev/docs/api/admin-rest/2024-01/resources/inventorylevel),
[Order](https://shopify.dev/docs/api/admin-rest/2024-01/resources/order),
[Customer](https://shopify.dev/docs/api/admin-rest/2024-01/resources/customer),
[Customer address](https://shopify.dev/docs/api/admin-rest/2024-01/resources/customer-address).



To enable this application, you need to:
 
- [enable custom app development](https://help.shopify.com/en/manual/apps/app-types/custom-apps) for your store. 
- Create a custom app and install it in your store.
- Enable `Write access` Admin API access scope for the following objects:
    - `Orders`
    - `Products`
    - `Inventory`
    - `Customers`
- Obtain the API access token under the API credentials tab of your app.
    
    

Additional documentation is available [here](https://bitbucket.org/kds_consulting_team/kds-team.wr-shopify/src/master/README.md)


================================================
FILE: component_config/component_short_description.md
================================================
Shopify is a commerce platform that allows anyone to set up an online store and sell their products.


================================================
FILE: component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Configuration",
  "required": [
    "endpoint",
    "mode"
  ],
  "properties": {
    "endpoint": {
      "enum": [
        "product",
        "product_image",
        "product_variant",
        "inventory_level",
        "order",
        "customer",
        "customer_address"
      ],
      "options": {
        "enum_titles": [
          "Product",
          "Product Image",
          "Product Variant",
          "Inventory Level",
          "Order",
          "Customer",
          "Customer Address"
        ]
      },
      "type": "string",
      "title": "Shopify Object",
      "format": "select",
      "description": "Shopify object to update",
      "propertyOrder": 1
    },
    "mode": {
      "type": "string",
      "enum": [
        "create",
        "update"
      ],
      "options": {
        "enum_titles": [
          "Create",
          "Update"
        ],
        "dependencies": {
          "endpoint": [
            "product",
            "product_image",
            "product_variant",
            "order",
            "customer"
          ]
        }
      },
      "title": "Load mode",
      "description": "Choose if the object should be created or updated. Updates will require existing IDs on the input.",
      "format": "select",
      "propertyOrder": 10
    },
    "source_id_reference": {
      "type": "object",
      "title": "Source ID reference",
      "required": [
        "source_id_col",
        "remove_from_data"
      ],
      "format": "grid",
      "properties": {
        "source_id_col": {
          "type": "string",
          "title": "Column Name",
          "default": "id",
          "propertyOrder": 1
        },
        "remove_from_data": {
          "type": "boolean",
          "title": "Remove from data",
          "default": false,
          "format": "chekbox",
          "propertyOrder": 10
        }
      }
    }
  }
}


================================================
FILE: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Authentication",
  "required": [
    "shop",
    "#api_token"
  ],
  "properties": {
    "#api_token": {
      "type": "string",
      "title": "Admin password",
      "format": "password",
      "description": "Admin password of your Shopify private app.",
      "propertyOrder": 200
    },
    "shop": {
      "type": "string",
      "title": "Shop name",
      "description": "Your shop ID found in the URL, e.g., [shop_id].myshopify.com",
      "propertyOrder": 250
    },
    "api_version": {
      "type": "string",
      "title": "API version",
      "enum": [
        "2024-04",
        "2024-01",
        "2023-10",
        "2023-07"
      ],
      "default": "2024-04",
      "description": "Shopify API version",
      "propertyOrder": 250
    }
  }
}


================================================
FILE: component_config/configuration_description.md
================================================
# Prerequisites

To enable this application, you need to:
 
- [enable custom app development](https://help.shopify.com/en/manual/apps/app-types/custom-apps) for your store. 
- Create a custom app and install it in your store.
- Enable `Write access` Admin API access scope for the following objects:
    - `Orders`
    - `Products`
    - `Inventory`
    - `Customers`
- Obtain the API access token under the API credentials tab of your app.
    
    
 
# Configuration

## Authentication 

Make sure you have created a custom application with appropriate permissions.

### Admin API access token

Admin API access token of your private app.

### Shop name

Your shop ID found in the URL, e.g., `[shop_id]`.myshopify.com


## Setup

- Each configuration row accepts a single table on the input. It will be then converted into a JSON model that is required by 
the specified endpoint.
- Each column in the table translates to a JSON property. In some cases, you may include a full JSON string as the column value. 
- Objects may be flattened into columns using the `__` separator. E.g., `customer__id` leads to `{"customer":{"id":"VAL"}}`


**NOTE:** It is possible to include one extra column that serves as a reference to your source data row and is then excluded from the payload.  
You can set this column by setting the `source_id` parameter.

Additional documentation is available [here](https://bitbucket.org/kds_consulting_team/kds-team.wr-shopify/src/master/README.md).


================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: docs/examples/product/001-new-product-with-default-variant/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: docs/examples/product/001-new-product-with-default-variant/in/tables/product_variant.csv
================================================
"title","body_html","vendor","product_type","tags"
"Burton Custom Freestyle 151","\u003cstrong\u003eGood snowboard!\u003c\/strong\u003e","Burton","Snowboard","[""Barnes \u0026 Noble"", ""Big Air"", ""John's Fav""]"


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
FILE: src/component.py
================================================
'''
Template Component main class.

'''
import csv
import json
import logging
from datetime import datetime
from keboola.component.base import ComponentBase
from keboola.component.exceptions import UserException

# configuration variables
from json_converter import get_object_converter
from shopify_client.client import ShopifyClient, ShopifyWriteError

# configuration variables
KEY_POP_SRC_COL = 'remove_from_data'
KEY_MODE = 'mode'
KEY_SOURCE_ID_REF = 'source_id_reference'
KEY_SOURCE_ID = 'source_id_col'
RESULT_COLUMNS = ['timestamp', 'endpoint_type', 'mode', 'source_id', 'created_id', 'status',
                  'err_message']
KEY_API_TOKEN = '#api_token'

KEY_LOADING_OPTIONS = 'loading_options'

KEY_SHOP = 'shop'
KEY_ENDPOINT = 'endpoint'

# #### Keep for debug
KEY_DEBUG = 'debug'

# list of mandatory parameters => if some is missing, component will fail with readable message on initialization.
MANDATORY_PARS = [KEY_API_TOKEN, KEY_SHOP, KEY_ENDPOINT]
REQUIRED_IMAGE_PARS = []


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()

        self.client: ShopifyClient = None

        if not self.configuration.parameters.get('debug'):
            logging.getLogger('pyactiveresource.connection').disabled = True
            logging.getLogger('backoff').disabled = True

    def _init_client(self):
        self.client = ShopifyClient(self.configuration.parameters[KEY_SHOP],
                                    self.configuration.parameters[KEY_API_TOKEN],
                                    api_version=self.configuration.parameters.get('api_version', '2022-10'))

    def run(self):
        '''
        Main execution code
        '''

        params = self.configuration.parameters
        self.validate_configuration_parameters(MANDATORY_PARS)
        self._init_client()

        if params[KEY_ENDPOINT] == 'inventory_level':
            params[KEY_MODE] = 'update'

        in_tables = self.get_input_tables_definitions()

        if len(in_tables) == 0:
            logging.exception('There is no table specified on the input mapping! You must provide one input table!')
            exit(1)
        elif len(in_tables) > 1:
            logging.warning(
                'There is more than one table specified on the input mapping! You must provide one input table!')

        in_table = in_tables[0]

        result_table = self.create_out_table_definition('results.csv', incremental=True,
                                                        primary_key=['timestamp', 'endpoint_type', 'created_id',
                                                                     'source_id'])
        counter = 0
        with open(in_table.full_path, 'r') as inp, open(result_table.full_path, 'w+') as out:
            converter = get_object_converter(params[KEY_ENDPOINT])
            reader = csv.reader(inp, lineterminator='\n')
            writer = csv.DictWriter(out, fieldnames=RESULT_COLUMNS)
            writer.writeheader()
            for obj, source_id in converter.convert_stream(reader, params[KEY_SOURCE_ID_REF][KEY_SOURCE_ID],
                                                           params[KEY_SOURCE_ID_REF][KEY_POP_SRC_COL]):
                result = {}
                error = ''
                try:
                    result = self.client.write_object(obj, params[KEY_ENDPOINT], params[KEY_MODE])
                except ShopifyWriteError as e:
                    logging.warning(
                        f'Write to {params[KEY_ENDPOINT]} with id {source_id} failed! See log detail for more info.',
                        extra={"full_message": e.error})
                    error = json.dumps(e.error)
                counter += 1
                if counter % 100 == 0:
                    logging.info(f'{counter} records processed.')

                writer.writerow(self._build_result_log(result.get('id', ''), source_id, params[KEY_MODE], error))

        self.write_manifest(result_table)

    def _build_result_log(self, created_id: str, source_id, mode, error_message='') -> dict:
        if error_message:
            status = 'failed'
        else:
            status = 'success'

        return {'timestamp': datetime.now(),
                'endpoint_type': self.configuration.parameters[KEY_ENDPOINT],
                'mode': mode,
                'source_id': source_id,
                'created_id': created_id,
                'status': status,
                'err_message': error_message}


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
FILE: src/json_converter.py
================================================
import json
import logging
from csv2json.hone_csv2json import Csv2JsonConverter
from typing import List, Dict, Optional, Generator


class JsonConverter:

    def __init__(self, nesting_delimiter: str = '__',
                 chunk_size: Optional[int] = 1,
                 infer_data_types=True,
                 column_data_types: Optional[List[Dict[str, str]]] = None,
                 column_name_override: Optional[dict] = None,
                 data_wrapper: Optional[str] = None):
        self.chunk_size = chunk_size
        self.nesting_delimiter = nesting_delimiter
        self.infer_data_types = infer_data_types
        self.column_data_types = column_data_types or []
        self.data_wrapper = data_wrapper
        self.column_name_override = column_name_override or {}

    def _transform(self, data: dict):
        return data

    def convert_stream(self, reader, source_id_column: str = None,
                       pop_source_column=False) -> Generator[dict, None, None]:
        header = next(reader, None)
        converter = Csv2JsonConverter(header, delimiter=self.nesting_delimiter)
        # fetch first row
        row = next(reader, None)

        if not row:
            logging.warning('The file is empty!')

        while row:  # outer loop, create chunks
            continue_it = True
            i = 0
            json_string = '[' if self.chunk_size > 1 else ''
            while continue_it:
                i += 1
                result = converter.convert_row(row=row,
                                               coltypes=self.column_data_types,
                                               delimit=self.nesting_delimiter,
                                               colname_override=self.column_name_override,
                                               infer_undefined=self.infer_data_types)

                json_string += json.dumps(result[0])
                row = next(reader, None)

                if not row or (self.chunk_size and i >= self.chunk_size):
                    continue_it = False

                if continue_it:
                    json_string += ','

            json_string += ']' if self.chunk_size > 1 else ''
            data = json.loads(json_string)
            data = self._transform(data)
            source_id = ''
            # remove source column but keep the id column
            if source_id_column and pop_source_column:
                source_id = data.pop(source_id_column, '')
            elif not pop_source_column:
                source_id = data.get(source_id_column, '')

            yield data, source_id


class ProductConverter(JsonConverter):

    def __init__(self):
        super().__init__(chunk_size=1)
        # forced types
        self.column_data_types = [{"column": "variants", "type": "object"},
                                  {"column": "images", "type": "object"}]

    def _transform(self, data: dict):
        # transform options
        options_dict = data.get('options', {})
        options_object = []
        if options_dict:
            for o in options_dict:
                option = {"name": o,
                          "values": options_dict[o]}
                options_object.append(option)
            data['options'] = options_object
        return data


def get_object_converter(endpoint_type: str):
    if endpoint_type == 'product':
        return ProductConverter()
    if endpoint_type == 'product_image':
        return JsonConverter(column_data_types=[{"column": "variant_ids", "type": "object"}])
    else:
        return JsonConverter()



================================================
FILE: src/shopify_client/__init__.py
================================================
[Empty file]


================================================
FILE: src/shopify_client/client.py
================================================
import datetime
import functools
import json
import logging
import math
import sys
from enum import Enum
from typing import Type, List, Union

import backoff
import pyactiveresource
import pyactiveresource.formats
import shopify
from pyactiveresource.connection import ResourceNotFound, UnauthorizedAccess
# ##################  Taken from Sopify Singer-Tap
from shopify import PaginatedIterator

from shopify_client.resources.customer_address import Address

RESULTS_PER_PAGE = 250

# We've observed 500 errors returned if this is too large (30 days was too
# large for a customer)
DATE_WINDOW_SIZE = 30

# We will retry a 500 error a maximum of 5 times before giving up
MAX_RETRIES = 5


class ShopifyClientError(Exception):
    pass


class ShopifyWriteError(Exception):
    pass

    def __init__(self, message: str, error: dict):
        super().__init__(message)
        self.error = error


def is_not_status_code_fn(status_code):
    def gen_fn(exc):
        if getattr(exc, 'code', None) and exc.code not in status_code:
            return True
        # Retry other errors up to the max
        return False

    return gen_fn


# Taken from Sopify Singer-Tap
def leaky_bucket_handler(details):
    logging.info("Received 429 -- sleeping for %s seconds",
                 details['wait'])


# Taken from Sopify Singer-Tap
def retry_handler(details):
    logging.warning("Received 500 or retryable error -- Retry %s/%s",
                    details['tries'], MAX_RETRIES)


# ################  Taken from Sopify Singer-Tap
# pylint: disable=unused-argument
def retry_after_wait_gen(**kwargs):
    # This is called in an except block so we can retrieve the exception
    # and check it.
    exc_info = sys.exc_info()
    resp = exc_info[1].response
    sleep_time_str = resp.headers.get('Retry-After', resp.headers.get('retry-after', 60))
    yield math.ceil(float(sleep_time_str))


def error_handling(fnc):
    @backoff.on_exception(backoff.expo,
                          (pyactiveresource.connection.ServerError,
                           pyactiveresource.formats.Error
                           ),
                          giveup=is_not_status_code_fn(range(500, 599)),
                          on_backoff=retry_handler,
                          max_tries=MAX_RETRIES)
    @backoff.on_exception(retry_after_wait_gen,
                          pyactiveresource.connection.ClientError,
                          giveup=is_not_status_code_fn([429]),
                          on_backoff=leaky_bucket_handler,
                          # No jitter as we want a constant value
                          jitter=None)
    @functools.wraps(fnc)
    def wrapper(*args, **kwargs):
        return fnc(*args, **kwargs)

    return wrapper


def response_error_handling(func):
    """Function, that handles response handling of HTTP requests.
    """

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ResourceNotFound as e:
            if func.__name__ in ShopifyClient.get_supported_methods() or func.__name__ == '_call_api_update':
                raise ShopifyWriteError(f'The object of type "{args[1].singular}", '
                                        f'ID: "{args[2].get("id")}" not found!',
                                        {"id_not_found": args[2].get("id")})

            logging.error(e, exc_info=True)
            # Handle different error codes
            raise ShopifyClientError('The resource was not found. Please check your Shop ID!') from e
        except UnauthorizedAccess as e:
            error_msg = json.loads(e.response.body.decode('utf-8'))["errors"]
            raise ShopifyClientError(f'{error_msg}; Please check your credentials and app permissions!') from e

    return wrapper


class Error(Exception):
    """Base exception for the API interaction module"""


class OutOfOrderIdsError(Error):
    """Raised if our expectation of ordering by ID is violated"""


# data

class ShopifyResource(Enum):
    Article = "Article"
    Blog = "Blog"
    Collection = "Collection"
    Comment = "Comment"
    Order = "Order"
    Page = "Page"
    PriceRule = "PriceRule"
    Product = "Product"
    ApiPermission = "ApiPermission"

    @classmethod
    def list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def validate_fields(cls, fields: List[str]):
        errors = []
        for f in fields:
            if f not in cls.list():
                errors.append(f'"{f}" is not valid Shopify resource!')
        if errors:
            raise ValueError(
                ', '.join(errors) + f'\n Supported Resources are: [{cls.list()}]')


class ShopifyClient:

    def __init__(self, shop: str, access_token: str, api_version: str = '2024-01'):
        shop_url = f'{shop}.myshopify.com'
        self.session = shopify.Session(shop_url, api_version, access_token)
        shopify.ShopifyResource.activate_session(self.session)

    def get_orders(self, updated_at_min: datetime.datetime = None,
                   updated_at_max: datetime.datetime = datetime.datetime.now().replace(microsecond=0),
                   status='any', fields=None, results_per_page=RESULTS_PER_PAGE):

        additional_params = {}
        if fields:
            additional_params['fields'] = fields

        return self.get_objects_paginated(shopify.Order,
                                          updated_at_min=updated_at_min,
                                          updated_at_max=updated_at_max,
                                          results_per_page=results_per_page,
                                          status=status,
                                          **additional_params)

    def write_object(self, object_data: dict, _object: str, mode='create'):
        method_name = f"{mode}_{_object}"
        supported = self.get_supported_methods()
        if method_name not in supported:
            raise ShopifyClientError(f'Invalid write method {method_name}, supported methods are: {supported}')
        return getattr(self, method_name)(object_data)

    @classmethod
    def get_supported_methods(cls):
        methods = [m for m in dir(cls) if m.startswith('create_') or m.startswith('update_')]
        return methods

    @response_error_handling
    @error_handling
    def update_inventory_level(self, inventory_level: dict) -> dict:
        """
        Update inventory levels. Supports adjust or set methods based on content

            To Set:
            ```
            {
              "location_id": 6884556842,
              "inventory_item_id": 12250274365496,
              "available": 1
            }
            ```

            To Adjust:
            ```
            {
              "location_id": 6884556842,
              "inventory_item_id": 12250274365496,
              "available_adjustment": 1
            }
            ```

        Args:
            inventory_level: supported dict object



        Returns:

        """

        if inventory_level.get('available_adjustment'):
            method = 'adjust'
        elif inventory_level.get('available'):
            method = 'set'
        else:
            raise ShopifyClientError(
                'Invalid Inventory Level payload! Make sure to include "location_id", "inventory_item_id" and '
                '"available" or "available_adjustment" columns')
        return self._call_api_generic_method(shopify.InventoryLevel, method, inventory_level)

    def create_product(self, product_object: dict) -> dict:
        return self._call_api_create(shopify.Product, product_object)

    def update_product(self, product_object: dict) -> dict:
        return self._call_api_update(shopify.Product, product_object)

    def create_order(self, _object: dict) -> dict:
        return self._call_api_create(shopify.Order, _object)

    def update_order(self, _object: dict) -> dict:
        return self._call_api_update(shopify.Order, _object)

    def create_customer(self, _object: dict) -> dict:
        return self._call_api_create(shopify.Customer, _object)

    def update_customer(self, _object: dict) -> dict:
        return self._call_api_update(shopify.Customer, _object)

    def create_customer_address(self, _object: dict) -> dict:
        return self._call_api_create(Address, _object)

    def update_customer_address(self, _object: dict) -> dict:
        return self._call_api_update(Address, _object)

    def update_product_image(self, product_image_object: dict) -> dict:
        return self._call_api_update(shopify.Image, product_image_object)

    def create_product_image(self, product_image_object: dict) -> dict:

        return self._call_api_create(shopify.Image, product_image_object)

    def create_product_variant(self, product_variant: dict) -> dict:

        return self._call_api_create(shopify.Variant, product_variant)

    def update_product_variant(self, product_variant: dict) -> dict:

        return self._call_api_create(shopify.Variant, product_variant)

    def get_products(self, updated_at_min: datetime.datetime = None,
                     updated_at_max: datetime.datetime = datetime.datetime.now().replace(microsecond=0),
                     status='active', fields=None, results_per_page=RESULTS_PER_PAGE):

        additional_params = {}
        if fields:
            additional_params['fields'] = fields

        return self.get_objects_paginated(shopify.Product,
                                          updated_at_min=updated_at_min,
                                          updated_at_max=updated_at_max,
                                          results_per_page=results_per_page,
                                          status=status,
                                          **additional_params)

    def get_events(self, updated_at_min: datetime.datetime = None,
                   updated_at_max: datetime.datetime = datetime.datetime.now().replace(microsecond=0),
                   filter_resource: List[Union[ShopifyResource, str]] = None, event_type: str = None,
                   fields: List[str] = None,
                   results_per_page: int = RESULTS_PER_PAGE

                   ):

        """
        Retrieves a list of events.

        Args:
            updated_at_min:
            updated_at_max:
            filter_resource: Filter on certain events by the type of resource it produced. e.g.['Order','Product']
            event_type:
                eg 'confirmed', 'create', 'destroy' The type of event that occurred. Different resources generate
                different types of event. See the [docs](
                https://shopify.dev/docs/admin-api/rest/reference/events/event#resources-that-can-create-events) for
                a list of possible verbs.
            fields: List of fields to limit the response
            results_per_page:

        Returns:

        """

        additional_params = {}
        if filter_resource:
            if isinstance(filter_resource[0], ShopifyResource):
                filter_resource = [f.name for f in filter_resource]
            else:
                ShopifyResource.validate_fields(filter_resource)
            additional_params['filter'] = ','.join([f for f in filter_resource])

        if event_type:
            additional_params['verb'] = event_type

        if fields:
            additional_params['fields'] = fields

        return self.get_objects_paginated(shopify.Event,
                                          updated_at_min=updated_at_min,
                                          updated_at_max=updated_at_max,
                                          date_start_par='created_at_min',
                                          date_end_par='created_at_max',
                                          results_per_page=results_per_page,
                                          **additional_params)

    def get_customers(self, updated_at_min: datetime.datetime = None,
                      updated_at_max: datetime.datetime = datetime.datetime.now().replace(microsecond=0),
                      state=None, fields=None, results_per_page=RESULTS_PER_PAGE):
        additional_params = {}
        if fields:
            additional_params['fields'] = fields

        if state:
            additional_params['state'] = state

        return self.get_objects_paginated(shopify.Customer,
                                          updated_at_min=updated_at_min,
                                          updated_at_max=updated_at_max,
                                          results_per_page=results_per_page,
                                          **additional_params)

    @response_error_handling
    @error_handling
    def _call_api_create(self, shopify_object: Type[shopify.ShopifyResource], object_attributes: dict):
        res = shopify_object.create(object_attributes)
        if res.errors.errors:
            raise ShopifyWriteError(f'Failed to create object of type {shopify_object.plural}', res.errors.errors)

        return res.to_dict()

    @response_error_handling
    @error_handling
    def _call_api_generic_method(self, shopify_object: Type[shopify.ShopifyResource], shopify_object_method: str,
                                 parameters: dict):
        res = getattr(shopify_object, shopify_object_method)(**parameters)
        if res.errors.errors:
            raise ShopifyWriteError(
                f'Failed to {shopify_object_method.__name__} object of type {shopify_object.plural}', res.errors.errors)

        return res.to_dict()

    @response_error_handling
    @error_handling
    def _call_api_update(self, shopify_object: Type[shopify.ShopifyResource], parameters: dict):
        obj = shopify_object(attributes=parameters)
        obj.save()

        if obj.errors.errors:
            raise ShopifyWriteError(
                f'Failed to save object of type {shopify_object.plural}', obj.errors.errors)

        return obj.to_dict()

    @response_error_handling
    @error_handling
    def call_api_all_pages(self, shopify_object: Type[shopify.ShopifyResource], query_params):
        # this makes the PaginatedCollection iterator actually fetch all pages automatically
        query_params['no_iter_next'] = False
        return PaginatedIterator(shopify_object.find(**query_params))

    def get_objects_paginated(self, shopify_object: Type[shopify.ShopifyResource],
                              updated_at_min: datetime.datetime = None,
                              updated_at_max: datetime.datetime = datetime.datetime.now().replace(microsecond=0),
                              date_window_size: int = DATE_WINDOW_SIZE,
                              results_per_page=RESULTS_PER_PAGE,
                              date_start_par='updated_at_min',
                              date_end_par='updated_at_max',
                              **kwargs):
        """
        Get all objects and paginate per date. The pagination is also limited by the ``date_window_size`` parameter,
        that prevents overloading the API and getting too many 500s.
        Args:
            shopify_object (Type[shopify.ShopifyResource]): Shopify object to retrieve.
            updated_at_min (datetime): Min date
            updated_at_max (datetime): Max date
            date_window_size: Size of the window to get in each request (days
            results_per_page:
            **kwargs:

        Yields:
            Array of objects as dict

        """
        if updated_at_min:
            updated_at_min = updated_at_min.replace(microsecond=0)

        stop_time = updated_at_max

        # Page through till the end of the result set
        # NOTE: "Artificial" pagination done in Singer Tap, keeping it since it apparently causes 500 errors
        # when requesting full period. Eg. paging per window_size (1day)
        # however it was simplified to leverage shopify native pagination function
        while updated_at_min < stop_time:

            # ## Original Singer Tap comment
            # It's important that `updated_at_min` has microseconds
            # truncated. Why has been lost to the mists of time but we
            # think it has something to do with how the API treats
            # microseconds on its date windows. Maybe it's possible to
            # drop data due to rounding errors or something like that?
            updated_at_max = updated_at_min + datetime.timedelta(days=date_window_size)
            if updated_at_max > stop_time:
                updated_at_max = stop_time

            query_params = {**{
                date_start_par: updated_at_min.isoformat(),
                date_end_par: updated_at_max.isoformat(),
                "limit": results_per_page
            }, **kwargs}

            result_iterator = self.call_api_all_pages(shopify_object, query_params)

            # iterate through pages (the iterator does this on the background
            for collection in result_iterator:
                for obj in collection:
                    yield obj.to_dict()

            updated_at_min = updated_at_max



================================================
FILE: src/shopify_client/resources/__init__.py
================================================
[Empty file]


================================================
FILE: src/shopify_client/resources/customer_address.py
================================================
from shopify.base import ShopifyResource


class Address(ShopifyResource):
    _prefix_source = "/customers/$customer_id/"

    @classmethod
    def _prefix(cls, options={}):
        customer_id = options.get("customer_id")
        if customer_id:
            return "%s/customers/%s" % (cls.site, customer_id)
        else:
            return cls.site

    def save(self):
        if "customer_id" not in self._prefix_options:
            self._prefix_options["customer_id"] = self.customer_id
        return super(ShopifyResource, self).save()



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: tests/test_functional.py
================================================
SAMPLE_PRODUCT = {
    "body_html": "It's the small iPod with a big idea: Video.",
    "handle": "ipod-nano",
    "images": [{
        "src": "http://example.com/burton.jpg"
    }
    ],
    "options": [
        {"name": "Color",
         "values": [
             "Pink",
             "Red",
             "Green",
             "Black"]
         },
        {"name": "Size", "values": ["155", "159"]}
    ],
    "product_type": "Cult Products",
    "published_at": "2007-12-31T19:00:00-05:00",
    "published_scope": "global",
    "status": "active",
    "tags": "Emotive, Flash Memory, MP3, Music",
    "template_suffix": "special",
    "title": "IPod Nano - 8GB",
    "variants": [{

        "sku": "IPOD2008PINK",
        "grams": 567,
        "price": 199.99,
        "title": "Pink",
        "weight": 0.2,
        "barcode": "1234_pink",
        "option1": "Pink",
        "taxable": True,
        "weight_unit": "kg",
        "inventory_policy": "continue",
        "requires_shipping": True,
        "fulfillment_service": "manual",
        "inventory_management": "shopify"
    }
    ],
    "vendor": "Apple"
}

SAMPLE_VARIANT = {
    "barcode": "1234_pink",
    "compare_at_price": "299.00",
    "created_at": "2012-08-24T14:01:47-04:00",
    "fulfillment_service": "manual",
    "grams": 567,
    "image_id": 434522,
    "inventory_item_id": 342916,
    "inventory_management": "shopify",
    "inventory_policy": "continue",
    "option": {
        "option1": "Pink"
    },
    "price": "199.00",
    "product_id": 632910392,
    "requires_shipping": True,
    "sku": "IPOD2008PINK",
    "taxable": True,
    "tax_code": "DA040000",
    "updated_at": "2012-08-24T14:01:47-04:00",
    "weight": 100,
    "weight_unit": "oz"
}



================================================
FILE: tests/resources/customer_address_create.csv
================================================
"customer_id","address1","address2","city","company","first_name","last_name","phone","province","country","zip","name","province_code","country_code","country_name"
5850085818517,"1 Rue des Carrieres","Suite 1234","Montreal","Fancy Co.","Samuel","de Champlain","819-555-5555","Quebec","Canada","G1R 4P5","Samuel de Champlain","QC","CA","Canada"


================================================
FILE: tests/resources/customer_address_update.csv
================================================
"id","customer_id","zip"
7008661045397,5850085818517,"90210"


================================================
FILE: tests/resources/customer_create.csv
================================================
"first_name","last_name","email","phone","verified_email","addresses"
"Steve","Lastnameson","steve.lastnameson@example.com","+420123456789",true,"[{""address1"":""123 Oak St"",""city"":""Ottawa"",""province"":""ON"",""phone"":""555-1212"",""zip"":""123 ABC"",""last_name"":""Lastnameson"",""first_name"":""Mother"",""country"":""CA""}]"


================================================
FILE: tests/resources/customer_update.csv
================================================
"id","email","note"
5850085818517,"changed@example.com","Customer is a great guy"


================================================
FILE: tests/resources/image_create.csv
================================================
"product_id","position","alt","src"
6180685807765,2,"new alt tag content","https://lh3.googleusercontent.com/proxy/4g8RgzUPdZRoaAyg2EhBSppdOgVGM9U2XbDSnbRKxfDdfI2Mw06eT_RDKoNvo9ZYpcBnPF56AIjya9gcUpYMK5sejn12"


================================================
FILE: tests/resources/image_update.csv
================================================
"product_id","id","position","alt"
6180685807765,29038486847637,2,"new alt tag content"


================================================
FILE: tests/resources/inventory_levels.csv
================================================
inventory_item_id,location_id,available
39404701941909,57805963413,400


================================================
FILE: tests/resources/order_create_existing_customer.csv
================================================
"line_items","customer__id","financial_status"
"[{""variant_id"":447654529,""quantity"":1}]","207119551","pending"


================================================
FILE: tests/resources/order_create_fullfill.csv
================================================
"email","fulfillment_status","fulfillments","line_items"
"foo@example.com","fulfilled","[{""location_id"":48752903}]","[{""variant_id"":447654529,""quantity"":1}]"


================================================
FILE: tests/resources/order_create_simple
================================================
"line_items"
"[{""variant_id"":447654529,""quantity"":1}]"


================================================
FILE: tests/resources/order_update_note.csv
================================================
"id","note"
4197465489557,"Customer contacted us about a custom engraving on this iPod"


================================================
FILE: tests/resources/product_update.csv
================================================
"id","status"
6180685807765,"draft"


================================================
FILE: tests/resources/product_variant.csv
================================================
"barcode","compare_at_price","created_at","fulfillment_service","grams","image_id","inventory_item_id","inventory_management","inventory_policy","option__option1","price","product_id","requires_shipping","sku","taxable","tax_code","updated_at","weight","weight_unit"
"1234_pink","299.00","2012-08-24T14:01:47-04:00","manual",567,434522,342916,"shopify","continue","Pink","199.00",632910392,True,"IPOD2008PINK",True,"DA040000","2012-08-24T14:01:47-04:00",100,"oz"


================================================
FILE: tests/resources/products.csv
================================================
"body_html","handle","images","options__Size","product_type","published_at","published_scope","status","tags","template_suffix","title","variants","vendor","options__Color",innerid
"It's the small iPod with a big idea: Video.","ipod-nano","[{
            ""src"": ""http://example.com/burton.jpg""
        }
    ]","[""155"", ""159""]","Cult Products","2007-12-31T19:00:00-05:00","global","active","Emotive, Flash Memory, MP3, Music","special","IPod Nano - 8GB","[{

            ""sku"": ""IPOD2008PINK"",
            ""grams"": 567,
            ""price"": 199.99,
            ""title"": ""Pink"",
            ""weight"": 0.2,
            ""barcode"": ""1234_pink"",
            ""option2"": ""Pink"",
            ""option1"": ""155"",
            ""taxable"": true,
            ""product_id"": 632910392,
            ""weight_unit"": ""kg"",
            ""inventory_policy"": ""continue"",
            ""requires_shipping"": true,
            ""fulfillment_service"": ""manual"",
            ""inventory_management"": ""shopify""
        }
    ]","Apple","[
                ""Pink"",
                ""Red"",
                ""Green"",
                ""Black""]",111


