Directory structure:
└── kds_consulting_team-mock-server-config-generator/
    ├── main.py
    ├── requirements.txt
    └── README.md

================================================
File: /main.py
================================================
import glob
import json
import os
from pathlib import Path

from fastapi import FastAPI, Response, Request

SKIP_HEADERS = ['host', 'user-agent', 'connection', 'accept-encoding']
RESULT_DIR_PATH = Path(os.getcwd()).resolve().joinpath('result').as_posix()

app = FastAPI()

endpoint = '/test'


def get_next_request_name(folder, endpoint_name):
    files = glob.glob(os.path.join(folder, f'{endpoint_name}*.request'))
    nr_files = len(files)
    if nr_files == 0:
        res_name = f'{endpoint_name}'
    else:
        res_name = f'{endpoint_name}{nr_files}'
    return res_name


async def build_request_content(file_path, request: Request, full_path):
    try:
        body = await request.json()
    except Exception:
        body = await request.body()
        body = body.decode('utf8')
    Path.mkdir(Path(file_path).parent, parents=True, exist_ok=True)
    # content
    with open(file_path + '.request', 'w+', newline='\r\n') as output:
        output.write(f'{request.method} {full_path}')
        if body:
            output.write('\n\n')
            body_string = json.dumps(body)
            output.write(body_string)


async def writer_headers(file_path, request: Request):
    Path.mkdir(Path(file_path).parent, parents=True, exist_ok=True)
    with open(file_path + '.requestHeaders', 'w+', newline='\r\n') as output:
        for h in request.headers:
            if h in SKIP_HEADERS:
                continue
            output.write(f'{h}: {request.headers[h]}\n')


async def post(request: Request, response: Response, full_path: str):
    response.headers['Test'] = 'ccc'
    path_split = full_path.split('/')
    endpoint_name = ''.join(path_split[1:])
    print(endpoint_name)
    if len(path_split) > 1:
        result_folder = Path(RESULT_DIR_PATH).joinpath(path_split[0]).as_posix()
    else:
        result_folder = RESULT_DIR_PATH

    print(result_folder)

    file_name = get_next_request_name(result_folder, endpoint_name)
    file_path = os.path.join(result_folder, file_name)
    full_query_path = request.url.path
    if request.url.query:
        full_query_path += f'?{request.url.query}'

    await build_request_content(file_path, request, full_query_path)
    await writer_headers(file_path, request)

    return full_path
async def get(request: Request, response: Response, full_path: str):
    response.headers['Test'] = 'ccc'
    path_split = full_path.split('/')
    endpoint_name = ''.join(path_split[1:])
    print(endpoint_name)
    if len(path_split) > 1:
        result_folder = Path(RESULT_DIR_PATH).joinpath(path_split[0]).as_posix()
    else:
        result_folder = RESULT_DIR_PATH

    print(result_folder)

    file_name = get_next_request_name(result_folder, endpoint_name)
    file_path = os.path.join(result_folder, file_name)
    full_query_path = request.url.path
    if request.url.query:
        full_query_path += f'?{request.url.query}'

    await build_request_content(file_path, request, full_query_path)
    await writer_headers(file_path, request)

    return full_path


app.add_api_route(path="/{full_path:path}", endpoint=post, methods=["POST"])
app.add_api_route(path="/{full_path:path}", endpoint=get, methods=["GET"])


================================================
File: /requirements.txt
================================================
fastapi==0.104
uvicorn

================================================
File: /README.md
================================================
jHelper tool to generate configuration for [Keboola Mock Server](https://github.com/keboola/ex-generic-mock-server).

Mainly usable for writer.

## Usage

- Run `uvicorn main:app --reload` to start the server
- Set the url to `localhost:8000/some-example-name/endpoint`
- Run queries against the url
- The generated mock-server configuration will be available in the `result` folder

The resulting configuration will be available at:
```
- result
  -some-example-name
     --- enpoint.request
     --- enpoint.requestHeaders
```

**NOTE** If you send multiple requests the files will be numbered e.g.:

```
- result
  -some-example-name
     --- enpoint.request
     --- enpoint.requestHeaders
     --- enpoint1.request
     --- enpoint1.requestHeaders

```


