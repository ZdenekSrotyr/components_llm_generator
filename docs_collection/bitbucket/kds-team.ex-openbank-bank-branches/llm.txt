Directory structure:
└── kds_consulting_team-kds-team.ex-openbank-bank-branches/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           └── state.json
    ├── scripts/
    │   ├── build_n_test.sh
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── client.py
    │   ├── component.py
    │   ├── main.py
    │   └── result.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
FILE: README.md
================================================
# OpenBank extractor for Keboola

This extractor allows to download data from [OpenBank project](https://www.openbankproject.com/) and hence get access to data from various financial institutions. Credentials are needed in order to successfully run the extractor, since most of the requests require authentication. The component utilizes direct login and v4.0.0 of the API.

The component was developed for Citizen's Hackathon and the full API documentation can be found [here](https://apiexplorer.openbankproject.com/).

## Endpoints

The component extracts following information from the API:

- banks - `/obp/v4.0.0/banks`
- branches of a bank - `/obp/v4.0.0/banks/BANK_ID/branches`
- atms of a bank - `/obp/v4.0.0/banks/BANK_ID/atms`
- products of a bank - `/obp/v4.0.0/banks/BANK_ID/products`
- accounts in a bank - `/obp/v4.0.0/banks/BANK_ID/balances`
- transactions for an account - `/obp/v4.0.0/my/banks/BANK_ID/accounts/ACCOUNT_ID/transactions`

All of the available inforamtion is extracted, e.g. all atms/accounts for all banks, all transactions for all accounts in all banks, etc.

### Configuration

A sample of the JSON configuration can be found [in the component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-openbank-bank-branches/src/master/component_config/sample-config/config.json). By default, 4 parameters are required to run the extractor.

##### Username (`username`)
Name of the user, who will be used to authenticate the user. The user must have enough privileges to access the data in order to be able to download them. If a user is not registered, they can do so in the API section of the [OpenBank Project](https://api.openbankproject.com/oauth/authorize).

##### Password (`#password`)
A password to the username to authenticate the request. Together with username, the password will be used to authenticate all requests with direct login.

##### Consumer Key (`#consumerKey`)
A consumer key for the application. The key can be obtained by registering the application.

##### Base URL (`baseUrl`)
A base of the url for all API requests. The parameter will differ for all instances of OpenBank project depending on the setup.

##### Endpoints (`endpoints`)
A list of endpoints, which should be extracted. Some endpoints require other endpoints to download all the necessary information. If not specified, these endpoints will be automatically downloaded.

### Output

The component outputs 6 tables, one for each of the covered endpoints. All of the tables have a primary key defined and are loaded incrementally into Keboola Storage. 


================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        script:
          - export APP_IMAGE=$APP_IMAGE
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
#          - echo 'Pushing test image to repo. [tag=test]'
#          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#          - docker tag $APP_IMAGE:latest $REPOSITORY:test
#          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: change_log.md
================================================
**0.0.2**
Added option to specify base url.
Added documentation for the extractor.
Changed logging level to info.
Added sample configurations, UI schema and descriptions.

**0.0.1**
First working version of the extractor
Supported endpoints are banks, branches, atms, accounts, transactions and products.


================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.7.2-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential
RUN pip install flake8
RUN pip install -r /code/requirements.txt
WORKDIR /code/

CMD ["python3", "-u", "/code/src/main.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.4.zip#egg=kbc
logging-gelf==0.0.18


================================================
FILE: component_config/component_long_description.md
================================================
# OpenBank extractor for Keboola

This extractor allows to download data from [OpenBank project](https://www.openbankproject.com/) and hence get access to data from various financial institutions. Credentials are needed in order to successfully run the extractor, since most of the requests require authentication. The component utilizes direct login and v4.0.0 of the API.

The component was developed for Citizen's Hackathon and the full API documentation can be found [here](https://apiexplorer.openbankproject.com/).

## Endpoints

The component extracts following information from the API:

- banks - `/obp/v4.0.0/banks`
- branches of a bank - `/obp/v4.0.0/banks/BANK_ID/branches`
- atms of a bank - `/obp/v4.0.0/banks/BANK_ID/atms`
- products of a bank - `/obp/v4.0.0/banks/BANK_ID/products`
- accounts in a bank - `/obp/v4.0.0/banks/BANK_ID/balances`
- transactions for an account - `/obp/v4.0.0/my/banks/BANK_ID/accounts/ACCOUNT_ID/transactions`

All of the available inforamtion is extracted, e.g. all atms/accounts for all banks, all transactions for all accounts in all banks, etc.


================================================
FILE: component_config/component_short_description.md
================================================
OpenBank is a project that allows banks to innovate and move to new modern API environment of open banking.


================================================
FILE: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Parameters",
  "required": [
    "#password",
    "username",
    "#consumerKey",
    "baseUrl",
    "endpoints"
  ],
  "properties": {
    "#password": {
      "type": "string",
      "title": "Password",
      "format": "password",
      "minLength": 1,
      "description": "User password used to log in to <a href='https://api.openbankproject.com/oauth/authorize'>openbankproject.com</a>.",
      "propertyOrder": 200
    },
    "username": {
      "type": "string",
      "title": "Username",
      "description": "User name used to log in to <a href='https://api.openbankproject.com/oauth/authorize'>openbankproject.com</a>.",
      "propertyOrder": 100,
      "minLength": 1,
      "default": ""
    },
    "#consumerKey": {
      "type": "string",
      "title": "Consumer Key",
      "format": "password",
      "minLength": 1,
      "description": "A consumer key for the application. The application can be registered by a signed in user.",
      "propertyOrder": 300
    },
    "baseUrl": {
      "type": "string",
      "title": "Base URL",
      "description": "The base of the URL for the API requests, e.g. <i>https://citizensbank.openbankproject.com</i>.",
      "propertyOrder": 400
    },
    "endpoints": {
      "type": "array",
      "title": "Endpoints",
      "items": {
        "type": "string",
        "enum": [
          "bank",
          "branch",
          "atm",
          "product",
          "account",
          "transaction"
        ],
        "options": {
          "enum_titles": [
            "Banks",
            "Branches",
            "ATMs",
            "Products",
            "Accounts",
            "Transactions"
          ]
        }
      },
      "uniqueItems": true,
      "format": "checkbox",
      "propertyOrder": 500
    }
  }
}


================================================
FILE: component_config/configuration_description.md
================================================
A sample of the JSON configuration can be found [in the component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-openbank-bank-branches/src/master/component_config/sample-config/config.json). By default, 4 parameters are required to run the extractor.

##### Username (`username`)
Name of the user, who will be used to authenticate the user. The user must have enough privileges to access the data in order to be able to download them. If a user is not registered, they can do so in the API section of the [OpenBank Project](https://api.openbankproject.com/oauth/authorize).

##### Password (`#password`)
A password to the username to authenticate the request. Together with username, the password will be used to authenticate all requests with direct login.

##### Consumer Key (`#consumerKey`)
A consumer key for the application. The key can be obtained by registering the application.

##### Base URL (`baseUrl`)
A base of the url for all API requests. The parameter will differ for all instances of OpenBank project depending on the setup.

##### Endpoints (`endpoints`)
A list of endpoints, which should be extracted. Some endpoints require other endpoints to download all the necessary information. If not specified, these endpoints will be automatically downloaded.

### Output

The component outputs 6 tables, one for each of the covered endpoints. All of the tables have a primary key defined and are loaded incrementally into Keboola Storage. 


================================================
FILE: component_config/stack_parameters.json
================================================
{}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "parameters": {
    "username": "TestAccount1",
    "#password": "veryStrongP@ssw0rd!",
    "#consumerKey": "consumer12345678",
    "baseUrl": "https://bankName.openbankproject.com"
  },
  "image_parameters": {}
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi


================================================
FILE: src/client.py
================================================
import os
import logging
import requests
import sys
from kbc.client_base import HttpClientBase


class OpenBankClient(HttpClientBase):

    def __init__(self, username, password, consumerKey, baseUrl):

        self.paramUsername = username
        self.paramPassword = password
        self.paramConsumerKey = consumerKey
        self.paramBaseUrl = baseUrl

        self.getDirectLogin()

        _defHeader = {
            'Authorization': f'DirectLogin token="{self.varApiToken}"',
            'Content-Type': 'application/json'
        }

        super().__init__(self.paramBaseUrl, default_http_header=_defHeader)

    def getDirectLogin(self):

        reqEndpoint = 'my/logins/direct'
        reqUrl = os.path.join(self.paramBaseUrl, reqEndpoint)
        reqAuthString = f'DirectLogin username="{self.paramUsername}", password="{self.paramPassword}", ' + \
                        f'consumer_key="{self.paramConsumerKey}"'

        reqHeaders = {
            'Authorization': reqAuthString,
            'Content-Type': 'application/json'
        }

        reqToken = requests.post(reqUrl, headers=reqHeaders)
        reqSc, reqJs = reqToken.status_code, reqToken.json()

        if reqSc != 201:

            logging.error("Error obtaining the token.")
            logging.error("Received: %s - %s." % (reqSc, reqJs))
            sys.exit(1)

        else:

            self.varApiToken = reqJs['token']

    def getBanks(self):

        reqEndpoint = 'obp/v4.0.0/banks'
        reqUrl = os.path.join(self.base_url, reqEndpoint)

        reqBanks = self.get(reqUrl)
        return reqBanks['banks']

    def getBranches(self, bankId):

        reqEndpoint = f'obp/v4.0.0/banks/{bankId}/branches'
        reqUrl = os.path.join(self.base_url, reqEndpoint)

        limitValue = 100
        offsetValue = 0
        recordsLeft = True

        branches = []

        while recordsLeft is True:

            reqBranches = self.get_raw(reqUrl, params={'limit': limitValue, 'offset': offsetValue})
            reqSc, reqJs = reqBranches.status_code, reqBranches.json()

            if reqSc != 200:

                logging.warn("Could not obtain branches for bank id %s." % bankId)
                logging.debug(reqJs)
                break

            else:

                branches += reqJs['branches']
                offsetValue += limitValue

            if len(reqJs['branches']) < limitValue:

                recordsLeft = False

        return branches

    def getAtms(self, bankId):

        reqEndpoint = f'obp/v4.0.0/banks/{bankId}/atms'
        reqUrl = os.path.join(self.base_url, reqEndpoint)

        limitValue = 100
        offsetValue = 0
        recordsLeft = True

        atms = []

        while recordsLeft is True:

            reqAtms = self.get_raw(reqUrl, params={'limit': limitValue, 'offset': offsetValue})
            reqSc, reqJs = reqAtms.status_code, reqAtms.json()

            if reqSc != 200:

                logging.warn("Could not obtain atms for bank id %s." % bankId)
                logging.debug(reqJs)
                break

            else:

                atms += reqJs['atms']
                offsetValue += limitValue

            if len(reqJs['atms']) < limitValue:

                recordsLeft = False

        return atms

    def getProducts(self, bankId):

        reqEndpoint = f'obp/v4.0.0/banks/{bankId}/products'
        reqUrl = os.path.join(self.base_url, reqEndpoint)

        reqProducts = self.get_raw(reqUrl)
        reqSc, reqJs = reqProducts.status_code, reqProducts.json()

        if reqSc != 200:

            logging.warning("Could not obtain product data for bank id %s." % bankId)
            logging.debug(reqJs)

        else:

            return reqJs['products']

    def getAccounts(self, bankId):

        reqEndpoint = f'obp/v4.0.0/banks/{bankId}/balances'
        reqUrl = os.path.join(self.base_url, reqEndpoint)

        reqAccounts = self.get_raw(reqUrl)
        reqSc, reqJs = reqAccounts.status_code, reqAccounts.json()

        if reqSc != 200:

            logging.warn("Could not obtain accounts for bank id %s." % (bankId))
            logging.debug(reqJs)

        else:

            return reqJs['accounts']

    def getTransactions(self, bankId, accountId):

        reqEndpoint = f'obp/v4.0.0/my/banks/{bankId}/accounts/{accountId}/transactions'
        reqUrl = os.path.join(self.base_url, reqEndpoint)

        allTransactions = []
        recordsLeft = True
        limit = 100
        offset = 0

        while recordsLeft is True:

            reqTransactions = self.get_raw(reqUrl, params={'limit': limit, 'offset': offset})
            reqSc, reqJs = reqTransactions.status_code, reqTransactions.json()

            if reqSc != 200:

                logging.warn("Could not obtain transactions for account id %s, bank id %s" % (accountId, bankId))
                logging.debug(reqJs)

            else:

                allTransactions += reqJs['transactions']

            if len(reqJs['transactions']) < limit:

                recordsLeft = True
                break

            else:

                offset += limit

        return allTransactions



================================================
FILE: src/component.py
================================================
import logging
from client import OpenBankClient
from result import ResultWriter
from kbc.env_handler import KBCEnvHandler


USERNAME_KEY = 'username'
PASSWORD_KEY = '#password'
CONSUMER_KEY = '#consumerKey'
BASEURL_KEY = 'baseUrl'

MANDATORY_PARAMS = [USERNAME_KEY, PASSWORD_KEY, CONSUMER_KEY, BASEURL_KEY]


class Component(KBCEnvHandler):

    def __init__(self):

        super().__init__(MANDATORY_PARAMS)
        self.validate_config(MANDATORY_PARAMS)

        self.paramUsername = self.cfg_params[USERNAME_KEY]
        self.paramPassword = self.cfg_params[PASSWORD_KEY]
        self.paramConsumerKey = self.cfg_params[CONSUMER_KEY]
        self.paramBaseUrl = self.cfg_params[BASEURL_KEY]

        self.client = OpenBankClient(self.paramUsername, self.paramPassword,
                                     self.paramConsumerKey, self.paramBaseUrl)
        self.writer = ResultWriter(self.data_path)

    def processBanks(self):

        logging.info("Downloading data about banks.")

        allBanks = self.client.getBanks()
        self.varBankIds = []

        for bank in allBanks:

            flatBank = ResultWriter.flattenJson(bank)
            self.varBankIds += [flatBank['id']]
            self.writer.banks.writerow(flatBank)

    def processBankData(self):

        self.varBranchIds = []
        allBranches = []
        allAtms = []
        allProducts = []

        for bank in self.varBankIds:

            logging.info("Downloading branches, atms and products for bank id %s." % bank)

            allBranches += self.client.getBranches(bank)
            allAtms += self.client.getAtms(bank)
            allProducts += self.client.getProducts(bank)

        for branch in allBranches:

            flatBranch = self.writer.flattenJson(branch)
            self.varBranchIds += [(flatBranch['bank_id'], flatBranch['id'])]
            self.writer.branches.writerow(flatBranch)

        for atm in allAtms:

            flatAtm = self.writer.flattenJson(atm)
            self.writer.atms.writerow(flatAtm)

        for product in allProducts:

            flatProduct = self.writer.flattenJson(product)
            self.writer.products.writerow(flatProduct)

    def processAccounts(self):

        allAccounts = []
        self.varAccounts = []

        for bank in self.varBankIds:

            logging.info("Downloading accounts for bank %s." % bank)

            allAccounts = self.client.getAccounts(bank)

        for account in allAccounts:

            flattAccount = self.writer.flattenJson(account)
            self.varAccounts += [(bank, flattAccount['id'])]
            self.writer.accounts.writerow(flattAccount)

    def processTransactions(self):

        logging.info("Downloading data about transactions.")

        allTransactions = []

        for bankId, accountId in self.varAccounts:

            allTransactions += self.client.getTransactions(bankId, accountId)

        for transaction in allTransactions:

            flatTransaction = self.writer.flattenJson(transaction)
            self.writer.transactions.writerow(flatTransaction)

    def run(self):

        self.processBanks()
        self.processBankData()
        self.processAccounts()
        self.processTransactions()



================================================
FILE: src/main.py
================================================
import logging
import os
import sys
import logging_gelf.handlers
import logging_gelf.formatters
from component import Component

# Environment setup
sys.tracebacklimit = 0

# Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)-8s : [line:%(lineno)3s] %(message)s',
    datefmt="%Y-%m-%d %H:%M:%S")

if 'KBC_LOGGER_ADDR' in os.environ and 'KBC_LOGGER_PORT' in os.environ:

    logger = logging.getLogger()
    logging_gelf_handler = logging_gelf.handlers.GELFTCPSocketHandler(
        host=os.getenv('KBC_LOGGER_ADDR'),
        port=int(os.getenv('KBC_LOGGER_PORT'))
        )
    logging_gelf_handler.setFormatter(logging_gelf.formatters.GELFFormatter(null_character=True))
    logger.addHandler(logging_gelf_handler)

    # removes the initial stdout logging
    logger.removeHandler(logger.handlers[0])

APP_VERSION = '0.0.2'

if __name__ == '__main__':

    logging.info("Running component version %s..." % APP_VERSION)
    c = Component()
    c.run()

    logging.info("Extraction process finished!")



================================================
FILE: src/result.py
================================================
import csv
import json
import logging
import os
from kbc.result import KBCResult, KBCTableDef

BANKS_COLUMNS = ['id', 'short_name', 'full_name',
                 'logo', 'website', 'bank_routings']
BANKS_PK = ['id']
BRANCHES_COLUMNS = ['id', 'bank_id', 'name', 'address_line_1', 'address_line_2', 'address_line_3', 'address_city',
                    'address_county', 'address_state', 'address_postcode', 'address_country_code', 'location_latitude',
                    'location_longitude', 'meta_license_id', 'meta_license_name', 'lobby_monday', 'lobby_tuesday',
                    'lobby_wednesday', 'lobby_thursday', 'lobby_friday', 'lobby_saturday', 'lobby_sunday',
                    'drive_up_monday_opening_time', 'drive_up_monday_closing_time', 'drive_up_tuesday_opening_time',
                    'drive_up_tuesday_closing_time', 'drive_up_wednesday_opening_time',
                    'drive_up_wednesday_closing_time', 'drive_up_thursday_opening_time',
                    'drive_up_thursday_closing_time', 'drive_up_friday_opening_time', 'drive_up_friday_closing_time',
                    'drive_up_saturday_opening_time', 'drive_up_saturday_closing_time', 'drive_up_sunday_opening_time',
                    'drive_up_sunday_closing_time', 'branch_routing_scheme', 'branch_routing_address', 'is_accessible',
                    'accessibleFeatures', 'branch_type', 'more_info', 'phone_number']
BRANCHES_PK = ['id', 'bank_id']
ATMS_COLUMNS = ['id', 'bank_id', 'name', 'address_line_1', 'address_line_2', 'address_line_3', 'address_city',
                'address_county', 'address_state', 'address_postcode', 'address_country_code', 'location_latitude',
                'location_longitude', 'meta_license_id', 'meta_license_name', 'monday_opening_time',
                'monday_closing_time', 'tuesday_opening_time', 'tuesday_closing_time', 'wednesday_opening_time',
                'wednesday_closing_time', 'thursday_opening_time', 'thursday_closing_time', 'friday_opening_time',
                'friday_closing_time', 'saturday_opening_time', 'saturday_closing_time', 'sunday_opening_time',
                'sunday_closing_time', 'is_accessible', 'located_at', 'more_info', 'has_deposit_capability']
ATMS_PK = ['id', 'bank_id']
PRODUCTS_COLUMNS = ['bank_id', 'code', 'parent_product_code', 'name', 'category', 'family', 'super_family',
                    'more_info_url', 'details', 'description', 'meta_license_id', 'meta_license_name']
PRODUCTS_PK = ['code', 'bank_id']
ACCOUNTS_COLUMNS = ['id', 'label', 'bank_id',
                    'account_routings', 'balance_currency', 'balance_amount']
ACCOUNTS_PK = ['id', 'bank_id']
TRANSACTIONS_COLUMNS = ['id', 'bank_id', 'this_account_id', 'this_account_bank_routing_scheme',
                        'this_account_bank_routing_address', 'this_account_account_routings', 'this_account_holders',
                        'other_account_id', 'other_account_holder_name', 'other_account_holder_is_alias',
                        'other_account_bank_routing_scheme', 'other_account_bank_routing_address',
                        'other_account_account_routings', 'details_type', 'details_description', 'details_posted',
                        'details_completed', 'details_new_balance_currency', 'details_new_balance_amount',
                        'details_value_currency', 'details_value_amount']
TRANSACTIONS_PK = ['id', 'bank_id']


class ResultWriter:

    def __init__(self, dataPath):

        self.paramDataPath = dataPath

        self.create_writers()
        self.create_manifests()

    def _create_table_definition(self, tableName, tableColumns, tablePk):

        _fileName = tableName + '.csv'
        _full_path = os.path.join(self.paramDataPath, 'out/tables', _fileName)

        _tbl_def = KBCTableDef(
            name=tableName, columns=tableColumns, pk=tablePk)
        _result_def = KBCResult(file_name=_fileName,
                                full_path=_full_path, table_def=_tbl_def)

        return _result_def

    @staticmethod
    def _create_csv_writer(tableDefinition):

        _writer = csv.DictWriter(open(tableDefinition.full_path, 'w'),
                                 fieldnames=tableDefinition.table_def.columns,
                                 restval='', extrasaction='ignore',
                                 quotechar='"', quoting=csv.QUOTE_ALL)

        return _writer

    def create_writers(self):

        _resultsTableColumn = {'banks': BANKS_COLUMNS,
                               'branches': BRANCHES_COLUMNS,
                               'atms': ATMS_COLUMNS,
                               'products': PRODUCTS_COLUMNS,
                               'accounts': ACCOUNTS_COLUMNS,
                               'transactions': TRANSACTIONS_COLUMNS}

        _resultsPKs = {'banks': BANKS_PK,
                       'branches': BRANCHES_PK,
                       'atms': ATMS_PK,
                       'products': PRODUCTS_PK,
                       'accounts': ACCOUNTS_PK,
                       'transactions': TRANSACTIONS_PK}

        _createdTables = []
        _createdTablesDef = []

        for t in _resultsTableColumn:

            if t not in _createdTables:

                logging.debug("Creating writer for %s." % t)

                _tableDef = self._create_table_definition(
                    t, _resultsTableColumn[t], _resultsPKs[t])
                _writer = self._create_csv_writer(_tableDef)

                if t == 'banks':

                    self.banks = _writer
                    self.banks.writeheader()

                elif t == 'branches':

                    self.branches = _writer
                    self.branches.writeheader()

                elif t == 'atms':

                    self.atms = _writer
                    self.atms.writeheader()

                elif t == 'products':

                    self.products = _writer
                    self.products.writeheader()

                elif t == 'accounts':

                    self.accounts = _writer
                    self.accounts.writeheader()

                elif t == 'transactions':

                    self.transactions = _writer
                    self.transactions.writeheader()

                _writer = None
                _createdTables += [t]
                _createdTablesDef += [_tableDef]

        self.resultTableDefinitions = _createdTablesDef
        self.resultTableNames = _createdTables

    @staticmethod
    def _create_manifest_template(pk=[], incremental=True):

        return {'primary_key': pk, 'incremental': incremental}

    def create_manifests(self):

        for tableDef in self.resultTableDefinitions:

            _manifest = self._create_manifest_template(
                pk=tableDef.table_def.pk)

            _path = tableDef.full_path + '.manifest'
            with open(_path, 'w') as file:

                json.dump(_manifest, file)

    @staticmethod
    def flattenJson(y):
        out = {}

        def flatten(x, name=''):
            if type(x) is dict:
                for a in x:
                    flatten(x[a], name + a + '_')
            else:
                out[name[:-1]] = x

        flatten(y)
        return out



================================================
FILE: tests/__init__.py
================================================
[Empty file]


================================================
FILE: tests/test_component.py
================================================
[Empty file]

