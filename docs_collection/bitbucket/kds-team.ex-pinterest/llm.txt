Directory structure:
└── kds_consulting_team-kds-team.ex-pinterest/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── TEMPLATE_README.md
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   └── Pinterest/
    │       ├── __init__.py
    │       └── client.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
FILE: README.md
================================================
# Pinterest Ads Reports 


The Pinterest Ads Extractor is a powerful component that automates the retrieval of Ad Analytics reports, allowing users to
schedule and download predefined reports effortlessly. With the ability to fetch reports across multiple Ad Accounts
simultaneously, it streamlines the data collection process. Users can select the granularity and relative time period
for incremental data fetching. This component empowers marketers with comprehensive insights into their Pinterest ad
campaigns.

*
**Table of contents:**

[TOC]

# Prerequisites


To get Pinterest Ad Analytics reports, you need to follow a few steps:

1. **Have a Pinterest Business Account**: The first step is to create a Pinterest Business account if you don't have one already. This account will be used to manage your ads and access your analytics reports. [Get a business account](https://help.pinterest.com/en/business/article/get-a-business-account)
2. **Have active Ad Campaigns**: Once you have a business account, you can start setting up your ad campaigns to collect analytics. This includes choosing your target audience, setting your budget, and selecting the pins you want to promote. [Set an Ad Campaign](https://help.pinterest.com/en/business/article/set-up-your-campaign)


Remember, it may take some time for your ads to start running and for data to accumulate in your analytics reports. 

# Configuration Guide

- [Create a new configuration](https://help.keboola.com/components/#creating-component-configuration) of the **Pinterest Ads extractor**.
- Click `Authorize Account` button and log in with your Pinterest Business account.

Now you can define reports to download:

- Click on a `ADD ROW` to create a report definition. Each row translates to different output table / report.
- Select account(s) you wish to get reports from. You may select multiple accounts.

## Define a time range

- These dates can be exact dates in `YYYY-MM-DD` format or relative dates; i.e., `5 days ago`, `1 month ago`, `yesterday`,
  now, today, etc. We recommend selecting a larger relative date window, the result data will be upserted to the destination so there
  are no data duplication issues.
- Select report granularity -> this defines the aggregation level of the report.
- The time range will be applied to any report you choose.

There are two modes this component operates, you can either define your own report or use an existing [Custom Report](https://help.pinterest.com/en/business/article/create-edit-and-review-custom-reports)

## Defining custom report via configuration

This report definition will be executed to across all selected accounts. Results will be stored in the same table linked to related account ID.

- In the `Report Specification` section select **Custom Report** option.
- In report details select required columns.
- Select the report granularity Level e.g. `Advertiser` or `Campaign`
- Select the conversion window - for more information refer to the [documentation](https://help.pinterest.com/en/business/article/conversions-campaigns#section-10906)
- Select the Conversion Report Time:
  - `TIME_OF_AD_ACTION`: The time when the user interacted with the ad.
  - `TIME_OF_CONVERSION`: The time when the user completed a conversion event.

## Using existing report template

To get more options while building the report, you can leverage the Pinterest Ads report builder and create a report
Templates in the [Pinterest UI](https://help.pinterest.com/en/business/article/create-edit-and-review-custom-reports)

These can be then downloaded via the component, the reporting time range will be overriden from the configuration:

- Create a report template with no schedule in the [Pinterest UI](https://help.pinterest.com/en/business/article/create-edit-and-review-custom-reports)
- In the `Report Specification` section select **Existing Report Template ID(s)** option.
- Select template(s) in the `Existing Custom Report Template(s)`
- More templates may be selected in case they exist across multiple AD accounts and share the same structure.

## Destination / Output
- Fill in the name of the result table; This will be the name of the result table in the Storage. Make sure that each configuration row leads to a different table to prevent any conflicts.
- Select `Load Type`, choose between `Full Load` and `Incremental Load`. If full load is used, the destination table will be overwritten with every run. If incremental load is used, data will be upserted into the destination table.





# Raw Configuration

**Custom report**

```json
{
  "parameters": {
    "debug": false,
    "accounts": [
      "123345"
    ],
    "time_range": {
      "date_to": "today",
      "date_from": "7 days ago",
      "granularity": "TOTAL"
    },
    "destination": {
      "table_name": "output_table",
      "incremental_loading": true
    },
    "input_variant": "report_specification",
    "report_specification": {
      "level": "ADVERTISER",
      "columns": [
        "SPEND_IN_MICRO_DOLLAR",
        "CAMPAIGN_NAME",
        "ENGAGEMENT_RATE"
      ],
      "conversion_window": "30/7/1",
      "conversion_report_time": "TIME_OF_AD_ACTION"
    }
  }
}
```

**Report template**

```json
{
  "parameters": {
    "debug": false,
    "accounts": [
      "12345"
    ],
    "time_range": {
      "date_to": "today",
      "date_from": "7 days ago",
      "granularity": "TOTAL"
    },
    "destination": {
      "table_name": "output_table_template_1",
      "incremental_loading": true
    },
    "input_variant": "existing_report_ids",
    "existing_report_ids": [
      "12345:123456688"
    ]
  }
}
```
# Development


If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone https://bitbucket.org/kds_consulting_team/kds-team.ex-pinterest kds-team.ex-pinterest
cd kds-team.ex-pinterest
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#  Integration


For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)



================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
            - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:$TEST_TAG
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP 991513932 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.11-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
keboola.component==1.4.3
keboola.utils
keboola.http-client
mock~=5.0.2
freezegun~=1.2.2
dataconf~=2.2.1

pyhocon~=0.3.60
dateparser~=1.1.8


================================================
FILE: TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
FILE: component_config/component_long_description.md
================================================
The Pinterest Ads Extractor is a powerful tool that automates the retrieval of Ad Analytics reports, allowing users to
schedule and download predefined reports effortlessly. With the ability to fetch reports across multiple Ad Accounts
simultaneously, it streamlines the data collection process. Users can select the granularity and relative time period
for incremental data fetching. This component empowers marketers with comprehensive insights into their Pinterest ad
campaigns.

**Features:**

- Automated retrieval of Ad Analytics reports.
- Custom report definition and retrieval.
- Scheduled download of Custom reports predefined via Pinterest UI.
- Efficient fetching of reports across multiple Ad Accounts.
- Incremental data fetching based on user-defined time period and granularity.



================================================
FILE: component_config/component_short_description.md
================================================
Pinterest is a social media platform and visual discovery engine that allows users to discover, save, and share creative
ideas and inspirations through images and links.


================================================
FILE: component_config/configRowSchema.json
================================================
{
  "title": "Pinterest Report",
  "type": "object",
  "required": [
    "input_variant",
    "time_range",
    "destination"
  ],
  "properties": {
    "accounts": {
      "type": "array",
      "title": "Accounts",
      "propertyOrder": 50,
      "description": "Select accounts to be reported",
      "minItems": 1,
      "items": {
        "type": "string",
        "enum": [],
        "minLength": 1,
        "title": "Accounts"
      },
      "format": "select",
      "uniqueItems": true,
      "options": {
        "async": {
          "label": "Load available accounts",
          "action": "load_accounts"
        }
      }
    },
    "input_variant": {
      "type": "string",
      "title": "Report Specification",
      "propertyOrder": 100,
      "description": "You may choose to either define a report or to use existing report template(s)",
      "enum": [
        "report_specification",
        "existing_report_ids"
      ],
      "options": {
        "enum_titles": [
          "Custom Report",
          "Existing report template ID(s)"
        ]
      },
      "default": "report_specification"
    },
    "time_range": {
      "type": "object",
      "title": "Time Range",
      "propertyOrder": 200,
      "properties": {
        "date_from": {
          "type": "string",
          "title": "Date from",
          "default": "7 days ago",
          "propertyOrder": 20,
          "description": "Start date: Either date in YYYY-MM-DD format or a relative date string i.e. 5 days ago, 1 month ago, yesterday, etc."
        },
        "date_to": {
          "type": "string",
          "title": "Date to",
          "default": "today",
          "propertyOrder": 30,
          "description": "End date: Either date in YYYY-MM-DD format or a relative date string i.e. 5 days ago, 1 month ago, yesterday, etc."
        },
        "granularity": {
          "type": "string",
          "title": "Granularity",
          "propertyOrder": 40,
          "description": "Time aggregation",
          "enum": [
            "TOTAL",
            "DAY",
            "HOUR",
            "WEEK",
            "MONTH"
          ],
          "options": {
            "enum_titles": [
              "Total",
              "Day",
              "Hour",
              "Week",
              "Month"
            ]
          }
        }
      }
    },
    "report_specification": {
      "type": "object",
      "title": "Report Details",
      "propertyOrder": 300,
      "properties": {
        "columns": {
          "title": "Columns",
          "type": "array",
          "description": "Select report columns",
          "format": "select",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "title": "Column ID",
            "type": "string",
            "enum": [],
            "minLength": 1
          },
          "options": {
            "async": {
              "label": "Load columns",
              "action": "list_columns"
            }
          },
          "propertyOrder": 500
        },
        "level": {
          "title": "Level",
          "type": "string",
          "enum": [
            "ADVERTISER",
            "ADVERTISER_TARGETING",
            "CAMPAIGN",
            "CAMPAIGN_TARGETING",
            "AD_GROUP",
            "AD_GROUP_TARGETING",
            "PIN_PROMOTION",
            "PIN_PROMOTION_TARGETING",
            "KEYWORD",
            "PRODUCT_GROUP",
            "PRODUCT_GROUP_TARGETING",
            "PRODUCT_ITEM"
          ],
          "propertyOrder": 510
        },
        "conversion_window": {
          "title": "Conversion window",
          "type": "string",
          "description": "Identify the attribution window for conversion events (days: click/engagement/view)",
          "default": "30/30/30",
          "enum": [
            "60/60/60",
            "60/60/30",
            "60/60/7",
            "60/60/1",
            "60/30/30",
            "60/30/7",
            "60/30/1",
            "60/7/7",
            "60/7/1",
            "60/1/1",
            "30/30/30",
            "30/30/7",
            "30/30/1",
            "30/7/7",
            "30/7/1",
            "30/1/1",
            "7/7/7",
            "7/1/1",
            "1/1/1"
          ],
          "propertyOrder": 530
        },
        "conversion_report_time": {
          "title": "Conversion Report Time",
          "type": "string",
          "default": "TIME_OF_AD_ACTION",
          "enum": [
            "TIME_OF_AD_ACTION",
            "TIME_OF_CONVERSION"
          ],
          "propertyOrder": 540
        }
      },
      "options": {
        "dependencies": {
          "input_variant": "report_specification"
        }
      }
    },
    "existing_report_ids": {
      "type": "array",
      "title": "Existing Custom Report Template(s)",
      "propertyOrder": 400,
      "minLength": 1,
      "description": "Select custom report template(s) created in the Pinterest Ads Web interface. Optionally, more templates may be selected in case they exist across multiple AD accounts and share the same structure.",
      "format": "select",
      "uniqueItems": true,
      "minItems": 1,
      "items": {
        "title": "Report ID",
        "type": "string",
        "enum": [],
        "minLength": 1
      },
      "options": {
        "dependencies": {
          "input_variant": "existing_report_ids"
        },
        "async": {
          "label": "Load available templates",
          "action": "list_templates"
        }
      }
    },
    "destination": {
      "type": "object",
      "title": "Destination",
      "propertyOrder": 600,
      "required": [
        "table_name",
        "incremental_loading"
      ],
      "properties": {
        "table_name": {
          "type": "string",
          "title": "Storage Table Name",
          "propertyOrder": 10,
          "minLength": 1,
          "description": "Name of the destination table for this report. (e.g. standard_performance_data)."
        },
        "incremental_loading": {
          "enum": [
            false,
            true
          ],
          "type": "boolean",
          "title": "Load Type",
          "default": true,
          "options": {
            "enum_titles": [
              "Full Load",
              "Incremental Load"
            ]
          },
          "description": "If Full load is used, the destination table will be overwritten every run. If Incremental Load is used, data will be upserted into the destination table.",
          "propertyOrder": 30
        }
      }
    }
  }
}


================================================
FILE: component_config/configSchema.json
================================================
{}


================================================
FILE: component_config/configuration_description.md
================================================



================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
FILE: src/component.py
================================================
"""
Template Component main class.

"""
import csv
import datetime
import logging
import os
import time

import dateparser
import requests
from keboola.component.base import ComponentBase, sync_action
from keboola.component.exceptions import UserException
from keboola.component.sync_actions import SelectElement
from keboola.utils.header_normalizer import DefaultHeaderNormalizer

from Pinterest.client import PinterestClient
from configuration import Configuration, retrieve_keys


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()
        self.cfg: Configuration
        self._pinterest_client: PinterestClient = None

    def run(self):
        """
        Main execution code

        1. Initialize configuration based on parameters provided
        2. Check validity of configuration
        3. Create report requests
            - Use either explicit report specification
            - Or use report templates
        4. Wait until all reports completed
        5. Combine individual reports into resulting CSV table
        6. Write table manifest
        """
        self.__init_configuration()

        logging.info("Starting extraction v 2.0.0")

        # Validate configuration
        if not self.cfg.accounts:
            raise UserException('No accounts for reporting specified')
        if self.cfg.input_variant == "report_specification" and not self.cfg.report_specification.columns:
            raise UserException('No columns selected in report specification')
        if self.cfg.input_variant == "existing_report_ids" and not self.cfg.existing_report_ids:
            raise UserException('No report IDs specified')

        started_reports = []

        if self.cfg.input_variant == 'report_specification':
            report_body = self._prepare_report_body()
            for account_id in self.cfg.accounts:
                logging.info(f"Creating custom report {self.cfg.destination.table_name} in account {account_id}.")
                response = self.client.create_report(account_id=account_id, body=report_body,
                                                     table_name=self.cfg.destination.table_name)
                started_reports.append(dict(key=account_id, account_id=account_id, token=response['token']))
        else:
            time_range_body = self._prepare_time_range_body()
            for item in self.cfg.existing_report_ids:
                account_id, template_id = item.split(':')
                logging.info(f"Creating report from template {template_id} in account {account_id}.")

                response = self.client.create_report_from_template(account_id=account_id,
                                                                   template_id=template_id,
                                                                   time_range=time_range_body)
                started_reports.append(dict(key=template_id, account_id=account_id, token=response['token']))

        reports_to_check = started_reports

        while reports_to_check:
            next_reports = []
            for report in reports_to_check:
                response = self.client.get_report_status(report['account_id'], report['token'])
                status = response['report_status']
                if status == 'IN_PROGRESS':
                    next_reports.append(report)
                    continue
                if status == 'FINISHED':
                    report_url = response['url']
                    raw_output_file = self._local_file(report['key'])
                    self._download_file(report_url, raw_output_file)
            reports_to_check = next_reports
            if reports_to_check:
                time.sleep(10)

        keys, columns = self.check_output_files(started_reports)
        keys.insert(0, 'Account_ID')
        columns.insert(0, 'Account_ID')

        normalizer = DefaultHeaderNormalizer()
        columns = normalizer.normalize_header(columns)
        keys = normalizer.normalize_header(keys)

        table = self.create_out_table_definition(self.cfg.destination.table_name,
                                                 incremental=self.cfg.destination.incremental_loading,
                                                 primary_key=keys,
                                                 columns=columns)

        out_table_path = table.full_path
        os.makedirs(out_table_path, exist_ok=True)
        logging.info("Extraction finished")

        self.combine_output_files(out_table_path, started_reports)

        self.write_manifest(table)

    def __init_configuration(self):
        try:
            self._validate_parameters(self.configuration.parameters, Configuration.get_dataclass_required_parameters(),
                                      'Row')
        except UserException as e:
            raise UserException(f"{e} The configuration is invalid. Please check that you added a configuration row.")
        self.cfg = Configuration.fromDict(parameters=self.configuration.parameters)

    @property
    def client(self):
        """Pinterest client object backing the client property is initialized when it is first accessed.
        Authorization will use '#api_token' parameter if provided.
        Else oauth credentials will be used.
        """
        if not self.configuration.oauth_credentials:
            raise UserException(
                "The authorization is not set up. Please authorize the configuration with your Pinterest account first")
        if not self._pinterest_client:
            api_token = self.configuration.parameters.get('#api_token')
            refresh_token = user = passwd = ''
            if hasattr(self.configuration, "oauth_credentials"):
                user = self.configuration.oauth_credentials.appKey
                passwd = self.configuration.oauth_credentials.appSecret
                refresh_token = self.configuration.oauth_credentials.data.get('refresh_token')
                pass
            self._pinterest_client = PinterestClient(token=api_token,
                                                     refresh_token=refresh_token,
                                                     user=user,
                                                     passwd=passwd)
        return self._pinterest_client

    def _prepare_dates_from_to(self) -> tuple:
        date_from = dateparser.parse(self.cfg.time_range.date_from)
        date_to = dateparser.parse(self.cfg.time_range.date_to)
        return date_from.strftime("%Y-%m-%d"), date_to.strftime("%Y-%m-%d")

    def _prepare_report_body(self):
        start_date, end_date = self._prepare_dates_from_to()
        body = {'start_date': start_date, 'end_date': end_date, 'granularity': self.cfg.time_range.granularity.value,
                'click_window_days': int(self.cfg.report_specification.click_window_days),
                'engagement_window_days': int(self.cfg.report_specification.engagement_window_days),
                'view_window_days': int(self.cfg.report_specification.view_window_days),
                'conversion_report_time': self.cfg.report_specification.conversion_report_time.value,
                'columns': self.cfg.report_specification.columns,
                'level': self.cfg.report_specification.level.value,
                'report_format': 'CSV'}
        return body

    def _prepare_time_range_body(self):
        start_date, end_date = self._prepare_dates_from_to()
        body = {'start_date': start_date, 'end_date': end_date, 'granularity': self.cfg.time_range.granularity.value}
        return body

    @staticmethod
    def _download_file(url: str, result_file_path: str):
        res = requests.get(url, stream=True, timeout=180)
        res.raise_for_status()
        with open(result_file_path, 'wb') as out:
            for chunk in res.iter_content(chunk_size=8192):
                out.write(chunk)

    def _local_file(self, key: str) -> str:
        path = f'{self.files_out_path}/{key}.raw.csv'
        return path

    @staticmethod
    def _destination_file(out_directory: str, key: str) -> str:
        path = f'{out_directory}/{key}.csv'
        return path

    def check_output_files(self, file_descriptors: list) -> tuple:
        """Check consistency of downloaded reports

        Method steps through downloaded reports and check that all have the same header.
        If there is a mismatch it is reported in exception.
        When all went okay, selected header columns are identified as primary key set.

        Args:
            file_descriptors: list of structures (its 'key' attribute has full path to the file) describing
                downloaded reports.

        Returns:
            touple: List of keys, list of columns

        Raises:
            UserException: When there was a mismatch in headers
        """
        header = None
        for item in file_descriptors:
            file = self._local_file(item['key'])
            with open(file, mode='rt') as out_file:
                reader = csv.DictReader(out_file)
                fields = reader.fieldnames
                if not header:
                    header = fields
                else:
                    if fields != header:
                        mm = ''
                        for a, b in zip(fields, header):
                            if a != b:
                                mm = f'{a}/{b}'
                                break
                        raise UserException(f'Headers of reports do not match: {mm}')
        keys = retrieve_keys(header)
        return keys, header

    def combine_output_files(self, out_directory, file_descriptors: list):
        for item in file_descriptors:
            key = item['key']
            account_id = item['account_id']
            file = self._local_file(key=key)
            dest_path = self._destination_file(out_directory=out_directory, key=key)
            with open(file, mode='rt') as in_file, open(dest_path, mode='wt') as out_file:
                reader = csv.reader(in_file)
                next(reader)  # skip header line
                writer = csv.writer(out_file)
                for row in reader:
                    row.insert(0, account_id)
                    writer.writerow(row)
            pass

    @sync_action('load_accounts')
    def load_accounts(self):
        accounts = self.client.list_accounts()
        result = [SelectElement(value=acc['id'], label=f"{acc['name']} ({acc['id']})") for acc in accounts]
        return result

    @sync_action('list_templates')
    def list_templates(self):
        all_templates = []
        for account_id in self.configuration.parameters.get('accounts'):
            account_templates = self.client.list_templates(account_id=account_id)
            all_templates.extend(account_templates)

        result = [SelectElement(
            value=f'{templ["ad_account_id"]}:{templ["id"]}',
            label=f'{templ["name"]} ({templ["ad_account_id"]}:{templ["id"]})')
            for templ in all_templates
        ]
        return result

    @sync_action('list_columns')
    def list_columns(self):
        """List all available columns

        Pinterest API does not provide list of available columns. We use a trick to retrieve it:

        - Create a report request with invalid column list
        - Catch reported exception and retrieve a list of 'good' columns provided there.

        Returns:
             List of all available columns
        """
        account_id = None
        accounts = self.configuration.parameters.get('accounts')
        if accounts:
            account_id = accounts[0]
        if not account_id:
            accounts = self.client.list_accounts()
            if accounts:
                account_id = accounts[0]['id']
        if not account_id:
            raise UserException('It was not possible to find usable account_id')

        level = self.configuration.parameters.get('report_specification', {}).get('level', '')

        start_date = (datetime.date.today() - datetime.timedelta(days=30)).strftime('%Y-%m-%d')
        end_date = (datetime.date.today() - datetime.timedelta(days=2)).strftime('%Y-%m-%d')
        fake_body = {'start_date': start_date, 'end_date': end_date, 'granularity': 'DAY',
                     'click_window_days': 7,
                     'engagement_window_days': 7,
                     'view_window_days': 7,
                     'conversion_report_time': 'TIME_OF_AD_ACTION',
                     'columns': ['NONSENSE_XXXXXX'],
                     'level': level,
                     'report_format': 'CSV'}

        try:
            self.client.create_report(account_id=account_id, body=fake_body)
        except UserException as ex:
            key = "'NONSENSE_XXXXXX' is not one of ['"
            s = str(ex)
            start = s.find(key)
            if start < 0:
                raise ex
            s = s[start + len(key):]
            end = s.find("']")
            s = s[:end]

            all_items = s.split("', '")
            to_remove = ['OUTBOUND_CTR', 'COST_PER_OUTBOUND_CLICK', 'EENGAGEMENT_RATE',
                         'ADVERTISER_ID', 'AD_ID', 'PAID_IMPRESSION', 'AD_NAME', 'AD_ACCOUNT_ID']

            if level in ('CAMPAIGN_TARGETING', 'AD_GROUP_TARGETING', 'PIN_PROMOTION_TARGETING',
                         'PRODUCT_GROUP_TARGETING', 'KEYWORD'):
                to_remove.extend(['TOTAL_IMPRESSION_USER', 'TOTAL_IMPRESSION_FREQUENCY'])

            if level == 'PRODUCT_GROUP_TARGETING':
                to_remove.extend(['OUTBOUND_CTR', 'COST_PER_OUTBOUND_CLICK'])

            items = [item for item in all_items if item not in to_remove]

            result = [SelectElement(value=item, label=item) for item in items]
            return result

        raise UserException('Failed to generate list of columns')


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
FILE: src/configuration.py
================================================
import dataclasses
from dataclasses import dataclass, field
from enum import Enum
from typing import List

import dataconf
from pyhocon.config_tree import ConfigTree

_keys = {
    "Ad ID",
    "Ad group ID",
    "Advertiser",
    "Campaign ID",
    "Date",
    "Keyword ID",
    "Organic pin ID",
    "Product group ID",
    "Targeting Type"
}


def retrieve_keys(column_list: list):
    """Select keys out of a list of columns

    Args:
        column_list: List of column names

    Returns:
        List of columns that belong to primary key set (dimensions)
    """
    keys = [item for item in column_list if item in _keys]
    return keys


class LevelEnum(Enum):
    ADVERTISER = "ADVERTISER"
    ADVERTISER_TARGETING = "ADVERTISER_TARGETING"
    CAMPAIGN = "CAMPAIGN"
    CAMPAIGN_TARGETING = "CAMPAIGN_TARGETING"
    AD_GROUP = "AD_GROUP"
    AD_GROUP_TARGETING = "AD_GROUP_TARGETING"
    PIN_PROMOTION = "PIN_PROMOTION"
    PIN_PROMOTION_TARGETING = "PIN_PROMOTION_TARGETING"
    KEYWORD = "KEYWORD"
    PRODUCT_GROUP = "PRODUCT_GROUP"
    PRODUCT_GROUP_TARGETING = "PRODUCT_GROUP_TARGETING"
    PRODUCT_ITEM = "PRODUCT_ITEM"


class DaysEnum(Enum):
    D0 = "0"
    D1 = "1"
    D7 = "14"
    D30 = "30"
    D60 = "60"


class GranularityEnum(Enum):
    TOTAL = "TOTAL"
    DAY = "DAY"
    HOUR = "HOUR"
    WEEK = "WEEK"
    MONTH = "MONTH"


class ConversionReportTimeEnum(Enum):
    TIME_OF_AD_ACTION = "TIME_OF_AD_ACTION"
    TIME_OF_CONVERSION = "TIME_OF_CONVERSION"


@dataclass
class Destination:
    table_name: str
    incremental_loading: bool = True


@dataclass
class TimeRange:
    granularity: GranularityEnum
    date_from: str = ""
    date_to: str = ""


@dataclass
class ReportSettings:
    level: LevelEnum = "ADVERTISER"
    columns: list[str] = field(default_factory=lambda: ConfigTree({}))
    conversion_window: str = "30/30/30"
    conversion_report_time: ConversionReportTimeEnum = "TIME_OF_AD_ACTION"

    @property
    def click_window_days(self):
        return self.conversion_window.split('/')[0]

    @property
    def engagement_window_days(self):
        return self.conversion_window.split('/')[1]

    @property
    def view_window_days(self):
        return self.conversion_window.split('/')[2]


class ConfigurationBase:

    @staticmethod
    def fromDict(parameters: dict):
        return dataconf.dict(parameters, Configuration, ignore_unexpected=True)
        pass

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith('pswd_'):
            return value.replace('pswd_', '#', 1)
        else:
            return value

    @classmethod
    def get_dataclass_required_parameters(cls) -> List[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: List[str]

        """
        return [cls._convert_private_value_inv(f.name) for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING
                and f.default_factory == dataclasses.MISSING]


@dataclass
class Configuration(ConfigurationBase):
    input_variant: str
    accounts: list[str]
    destination: Destination
    time_range: TimeRange
    report_specification: ReportSettings = field(default_factory=lambda: ConfigTree({}))
    existing_report_ids: list[str] = field(default_factory=lambda: ConfigTree({}))
    debug: bool = False



================================================
FILE: src/Pinterest/__init__.py
================================================



================================================
FILE: src/Pinterest/client.py
================================================
from keboola.component import UserException
from keboola.http_client import HttpClient
import re

BASE_URL = 'https://api.pinterest.com/v5'
DEFAULT_HEADER = {
    'Content-Type': 'application/json'
}
AUTH_HEADER = {
    'Authorization': None
}


class PinterestClient:
    """ Instance of this class provides a service object that is responsible
    for all communication to Pinterest API.
    """

    def __init__(self, token: str = '', refresh_token: str = '', user: str = '', passwd: str = ''):
        """Initialize HttpClient authorization based either on token (if supplied) or a refresh token
        (if token was missing).

        Args:
            token: Access token - when supplied it is used in authentication header directly
            refresh_token: Used to retrieve access token when token parameter was not provided
            user: Used with refresh token only
            passwd: Used with refresh token only

        Returns:
            Initialized HttpClient object.

        """
        if not token:
            if not refresh_token:
                raise UserException('Neither token nor refresh token were available')
            client = HttpClient(base_url=BASE_URL,
                                default_http_header={'Content-Type': 'application/x-www-form-urlencoded'},
                                auth=(user, passwd))
            body = {
                'grant_type': 'refresh_token',
                'refresh_token': refresh_token,
                'scope': 'ads:read'
            }
            response = client.post('oauth/token', data=body)
            if not response.get('access_token'):
                message = response.get('message')
                if not message:
                    message = str(response)
                raise UserException(f'Error retrieving access token from refresh token: {message}')
            token = response.get('access_token')

        AUTH_HEADER['Authorization'] = 'Bearer ' + token
        self.client = HttpClient(base_url=BASE_URL,
                                 default_http_header=DEFAULT_HEADER,
                                 auth_header=AUTH_HEADER)

    def _call_client_method(self, method: str, ep: str, description: str = '', table_name: str = '', **kwargs):
        """This is a wrapper around request method provided by the HttpClient.
        Its purpose is to filter our specifically problem of incompatible selected columns.
        If method fails it is converted to UserException exception with more elaborated error message.

        Args:
            method: Either 'GET' or 'POST'
            ep: API endpoint
            description: Verbal description of a context when method is called
            table_name: Destination table name - used to identify source of error in the log

        Returns:
            API response on success

        Raises:
            UserException: In case of error response

        """
        response = self.client._request_raw(method, ep, **kwargs)
        if response:
            return response.json()
        msg_columns = re.search('Columns .* are not available.', response.text)
        if msg_columns:
            message = f'Failed to create report {table_name}: {msg_columns.group()} Some metric & dimension ' \
                      f'combinations aren\'t supported. To create more complex reports it is recommended ' \
                      f'to use Pinterest Custom reports directly in the Pinterest platform.'
        else:
            message = f'HTTP Error {response.status_code} in {description}: ep = {ep}: {response.text}'

        raise UserException(message)

    def list_accounts(self) -> list:
        """List ad accounts

        List all ad accounts that either belong to logged in client or the client was granted access to.

        API documentation: https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list

        Returns:
            List of structures with ad accounts details. Each structure contains 'id' and 'name' attributes
            (among other details).

        Raises:
            UserException: If error occurred - either specification problem or communication problem
        """
        request_params = {'page_size': 50}
        total = []
        while True:
            ep = 'ad_accounts'
            response = self._call_client_method('get', ep, params=request_params, description='listing accounts')
            items = response.get('items')
            total.extend(items)
            bookmark = response.get('bookmark')
            if bookmark:
                request_params['bookmark'] = bookmark
            else:
                break
        return total

    def list_templates(self, account_id: str) -> list:
        """List templates

        API documentation: https://developers.pinterest.com/docs/api/v5/#operation/templates/list

        Args:
            account_id: Account ID

        Returns:
            List of all templates the account has access to. Each element has 'id' and 'name' attributes
            (among other details).

        Raises:
            UserException: If error occurred - either specification problem or communication problem
        """
        request_params = {'page_size': 50, 'order': 'DESCENDING'}
        ep = f'ad_accounts/{account_id}/templates'
        total = []
        while True:
            response = self._call_client_method('get', ep, params=request_params, description='listing templates')
            items = response.get('items')
            total.extend(items)
            bookmark = response.get('bookmark')
            if bookmark:
                request_params['bookmark'] = bookmark
            else:
                break
        return total

    def create_report(self, account_id: str, body: dict, table_name='') -> dict:
        """Create async request for an account analytics report

        API documentation: https://developers.pinterest.com/docs/api/v5/#operation/analytics/create_report

        This API creates a request for specific report.

        Args:
            account_id: Account ID to be used
            body: Requested report parameters
            table_name: Name of resulting Keboola table - identification when exception was raised

        Returns:
            Structure with 'token' attribute. The token is used for querying report status

        Raises:
            UserException: If error occurred - either report specification problem or communication problem
        """
        ep = f'ad_accounts/{account_id}/reports'
        response = self._call_client_method('post', ep, json=body, description='creating a report request',
                                            table_name=table_name)
        return response

    def create_report_from_template(self, account_id: str, template_id: str, time_range):
        """Create async request for an analytics report using a template

        API documentation: https://developers.pinterest.com/docs/api/v5/#operation/analytics/create_template_report

        This API creates a request for a report template (created in web app)

        Args:
            account_id: Account ID to be used
            template_id: Template identification
            time_range: Structure having 'start_date', 'end_date' and 'granularity' attributes

        Returns:
            Structure with 'token' attribute. The token is used for querying report status

        Raises:
            UserException: If error occurred - either specification problem or communication problem
        """
        ep = f'ad_accounts/{account_id}/templates/{template_id}/reports'
        response = self._call_client_method('post', ep, json=time_range,
                                            description='creating a report request using a template')
        return response

    def get_report_status(self, account_id: str, token: str):
        """Get the account analytics report created by the async call

        API documentation: https://developers.pinterest.com/docs/api/v5/#operation/analytics/create_template_report

        This API returns status of a report. Report may be in one of states:
        DOES_NOT_EXIST, FINISHED, IN_PROGRESS, EXPIRED, FAILED, CANCELLED

        For 'FINISHED' state it also returns URL from where to download the report data.

        Args:
            account_id: Account ID to be used
            token: Token identifying async report

        Returns:
            Structure with 'report_status' and 'url' attributes. The 'The token is used for querying report status

        Raises:
            UserException: If error occurred - either specification problem or communication problem
        """
        ep = f'ad_accounts/{account_id}/reports'
        request_params = {'token': token}
        response = self._call_client_method('get', ep, params=request_params, description='reading report status')
        return response



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


