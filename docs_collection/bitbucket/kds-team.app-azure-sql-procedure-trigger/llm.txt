Directory structure:
└── kds_consulting_team-kds-team.app-azure-sql-procedure-trigger/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── composer.json
    ├── composer.lock
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── Dockerfile-test
    ├── flake8.cfg
    ├── LICENSE.md
    ├── phpcs.xml
    ├── phpstan.neon
    ├── phpunit.xml.dist
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── docker/
    │   ├── composer-install.sh
    │   ├── php-prod.ini
    │   └── xdebug/
    │       └── xdebug.ini.dist
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── Component.php
    │   ├── QueryRunner.php
    │   ├── run.php
    │   ├── Configuration/
    │   │   ├── Config.php
    │   │   └── ConfigDefinition.php
    │   ├── Exception/
    │   │   ├── ApplicationException.php
    │   │   ├── NotImplementedException.php
    │   │   ├── UnexpectedColumnType.php
    │   │   └── UserException.php
    │   └── Platform/
    │       └── ConnectionFactory.php
    └── tests/
        ├── functional/
        │   ├── DatadirTest.php
        │   ├── DatadirTestsProvider.php
        │   ├── manifest-empty-mapping/
        │   │   ├── expected-stdout
        │   │   └── source/
        │   │       └── data/
        │   │           └── config.json
        │   ├── manifest-ok/
        │   │   ├── expected-stdout
        │   │   └── source/
        │   │       └── data/
        │   │           └── config.json
        │   ├── manifest-table-not-exists/
        │   │   ├── expected-code
        │   │   ├── expected-stderr
        │   │   ├── expected-stdout
        │   │   └── source/
        │   │       └── data/
        │   │           └── config.json
        │   ├── query-empty/
        │   │   ├── expected-stdout
        │   │   └── source/
        │   │       └── data/
        │   │           └── config.json
        │   ├── query-failed/
        │   │   ├── expected-code
        │   │   ├── expected-stderr
        │   │   ├── expected-stdout
        │   │   └── source/
        │   │       └── data/
        │   │           └── config.json
        │   ├── query-select/
        │   │   ├── expected-stdout
        │   │   └── source/
        │   │       └── data/
        │   │           └── config.json
        │   └── simple/
        │       ├── expected-stdout
        │       └── source/
        │           └── data/
        │               └── config.json
        └── phpunit/
            ├── bootstrap.php
            ├── ConfigTest.php
            ├── ConnectionTest.php
            ├── QueryFormatterTest.php
            ├── QueryRunnerTest.php
            ├── Tools/
            │   └── TestConnectionFactory.php
            └── Traits/
                └── CreateConnectionTrait.php

================================================
FILE: README.md
================================================
# Microsoft SQL Procedure Trigger

Application capable of executing stored procedures in Microsoft SQL Server databases. (Synapse, SQL Server, Azure, etc.)

## Configuration

1. On the component level, fill in the credentials for the SQL server where you want to trigger the procedure.
2. Add one configuration for each procedure you want to trigger. You can pass multiple arguments by specifying the name and value.

## Development
 
Clone this repository and init the workspace with following command:

```sh
git clone https://github.com/keboola/synapse-transformation
cd synapse-transformation
docker-compose build
docker-compose run --rm dev composer install --no-scripts
```

Create `.env` file with following contents
```env
SYNAPSE_SERVER=
SYNAPSE_PORT=
SYNAPSE_DATABASE=
SYNAPSE_UID=
SYNAPSE_PWD=
```

Run the test suite using this command:

```sh
docker-compose run --rm dev composer tests
```
 
# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 



================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

image: python:3.7.2
pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          #- pip install docker-compose
          # - docker build --build-arg AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY -t $APP_IMAGE .
          # - docker-compose run --rm wait
          # disable tests for now
          # - docker run --rm $APP_IMAGE composer ci
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            #- pip install docker-compose
            # - docker build --build-arg AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY -t $APP_IMAGE .
            # - docker-compose run --rm wait
            # disable tests for now
            # - docker run --rm $APP_IMAGE composer ci
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            # - pip install docker-compose
            # - docker build --build-arg AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY -t $APP_IMAGE .
            # - docker-compose run --rm wait
            # - docker-compose run --rm app composer ci
            # disable tests for now
            # - docker run --rm $APP_IMAGE composer ci
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog



================================================
FILE: composer.json
================================================
{
    "require": {
        "php": "^7.4",
        "ext-mbstring": "*",
        "ext-pdo": "*",
        "doctrine/dbal": "^2.10",
        "jdorn/sql-formatter": "dev-master",
        "keboola/common-exceptions": "^1.0",
        "keboola/php-component": "^8.1",
        "keboola/table-backend-utils": "^0.1"
    },
    "require-dev": {
        "jakub-onderka/php-parallel-lint": "^1.0",
        "keboola/coding-standard": ">=9.0.0",
        "keboola/csv": "^2.1",
        "keboola/datadir-tests": "^4.0",
        "phpstan/phpstan": "^0.12.14",
        "phpunit/phpunit": "^9.0.1",
        "ext-json": "*"
    },
    "autoload": {
        "psr-4": {
            "Keboola\\SynapseTrigger\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Keboola\\SynapseTrigger\\Tests\\": "tests/phpunit/",
            "Keboola\\SynapseTrigger\\FunctionalTests\\": "tests/functional/"
        }
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests-datadir": "phpunit tests/functional",
        "tests": [
            "@tests-phpunit",
            "@tests-datadir"
        ],

        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "build": [
            "@phplint",
            "@phpcs",
            "@phpstan",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true
    },
    "repositories": [
        {
            "type": "vcs",
            "url": "https://github.com/keboola/sql-formatter"
        },
        {
            "type": "vcs",
            "url": "https://github.com/keboola/php-table-backend-utils"
        }
    ]
}



================================================
FILE: composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "2f9d8155346b189b9261027d3950d0aa",
    "packages": [
        {
            "name": "doctrine/cache",
            "version": "1.10.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/cache.git",
                "reference": "382e7f4db9a12dc6c19431743a2b096041bcdd62"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/cache/zipball/382e7f4db9a12dc6c19431743a2b096041bcdd62",
                "reference": "382e7f4db9a12dc6c19431743a2b096041bcdd62",
                "shasum": ""
            },
            "require": {
                "php": "~7.1"
            },
            "conflict": {
                "doctrine/common": ">2.2,<2.4"
            },
            "require-dev": {
                "alcaeus/mongo-php-adapter": "^1.1",
                "doctrine/coding-standard": "^6.0",
                "mongodb/mongodb": "^1.1",
                "phpunit/phpunit": "^7.0",
                "predis/predis": "~1.0"
            },
            "suggest": {
                "alcaeus/mongo-php-adapter": "Required to use legacy MongoDB driver"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.9.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Doctrine\\Common\\Cache\\": "lib/Doctrine/Common/Cache"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Guilherme Blanco",
                    "email": "guilhermeblanco@gmail.com"
                },
                {
                    "name": "Roman Borschel",
                    "email": "roman@code-factory.org"
                },
                {
                    "name": "Benjamin Eberlei",
                    "email": "kontakt@beberlei.de"
                },
                {
                    "name": "Jonathan Wage",
                    "email": "jonwage@gmail.com"
                },
                {
                    "name": "Johannes Schmitt",
                    "email": "schmittjoh@gmail.com"
                }
            ],
            "description": "PHP Doctrine Cache library is a popular cache implementation that supports many different drivers such as redis, memcache, apc, mongodb and others.",
            "homepage": "https://www.doctrine-project.org/projects/cache.html",
            "keywords": [
                "abstraction",
                "apcu",
                "cache",
                "caching",
                "couchdb",
                "memcached",
                "php",
                "redis",
                "xcache"
            ],
            "time": "2019-11-29T15:36:20+00:00"
        },
        {
            "name": "doctrine/dbal",
            "version": "v2.10.1",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/dbal.git",
                "reference": "c2b8e6e82732a64ecde1cddf9e1e06cb8556e3d8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/dbal/zipball/c2b8e6e82732a64ecde1cddf9e1e06cb8556e3d8",
                "reference": "c2b8e6e82732a64ecde1cddf9e1e06cb8556e3d8",
                "shasum": ""
            },
            "require": {
                "doctrine/cache": "^1.0",
                "doctrine/event-manager": "^1.0",
                "ext-pdo": "*",
                "php": "^7.2"
            },
            "require-dev": {
                "doctrine/coding-standard": "^6.0",
                "jetbrains/phpstorm-stubs": "^2019.1",
                "phpstan/phpstan": "^0.11.3",
                "phpunit/phpunit": "^8.4.1",
                "symfony/console": "^2.0.5|^3.0|^4.0|^5.0"
            },
            "suggest": {
                "symfony/console": "For helpful console commands such as SQL execution and import of files."
            },
            "bin": [
                "bin/doctrine-dbal"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.10.x-dev",
                    "dev-develop": "3.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Doctrine\\DBAL\\": "lib/Doctrine/DBAL"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Guilherme Blanco",
                    "email": "guilhermeblanco@gmail.com"
                },
                {
                    "name": "Roman Borschel",
                    "email": "roman@code-factory.org"
                },
                {
                    "name": "Benjamin Eberlei",
                    "email": "kontakt@beberlei.de"
                },
                {
                    "name": "Jonathan Wage",
                    "email": "jonwage@gmail.com"
                }
            ],
            "description": "Powerful PHP database abstraction layer (DBAL) with many features for database schema introspection and management.",
            "homepage": "https://www.doctrine-project.org/projects/dbal.html",
            "keywords": [
                "abstraction",
                "database",
                "db2",
                "dbal",
                "mariadb",
                "mssql",
                "mysql",
                "oci8",
                "oracle",
                "pdo",
                "pgsql",
                "postgresql",
                "queryobject",
                "sasql",
                "sql",
                "sqlanywhere",
                "sqlite",
                "sqlserver",
                "sqlsrv"
            ],
            "time": "2020-01-04T12:56:21+00:00"
        },
        {
            "name": "doctrine/event-manager",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/event-manager.git",
                "reference": "629572819973f13486371cb611386eb17851e85c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/event-manager/zipball/629572819973f13486371cb611386eb17851e85c",
                "reference": "629572819973f13486371cb611386eb17851e85c",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "conflict": {
                "doctrine/common": "<2.9@dev"
            },
            "require-dev": {
                "doctrine/coding-standard": "^6.0",
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Doctrine\\Common\\": "lib/Doctrine/Common"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Guilherme Blanco",
                    "email": "guilhermeblanco@gmail.com"
                },
                {
                    "name": "Roman Borschel",
                    "email": "roman@code-factory.org"
                },
                {
                    "name": "Benjamin Eberlei",
                    "email": "kontakt@beberlei.de"
                },
                {
                    "name": "Jonathan Wage",
                    "email": "jonwage@gmail.com"
                },
                {
                    "name": "Johannes Schmitt",
                    "email": "schmittjoh@gmail.com"
                },
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com"
                }
            ],
            "description": "The Doctrine Event Manager is a simple PHP event system that was built to be used with the various Doctrine projects.",
            "homepage": "https://www.doctrine-project.org/projects/event-manager.html",
            "keywords": [
                "event",
                "event dispatcher",
                "event manager",
                "event system",
                "events"
            ],
            "time": "2019-11-10T09:48:07+00:00"
        },
        {
            "name": "jdorn/sql-formatter",
            "version": "dev-master",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/sql-formatter.git",
                "reference": "03c75614ddfe8804a16ddfdb4f4046555faa833e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/sql-formatter/zipball/03c75614ddfe8804a16ddfdb4f4046555faa833e",
                "reference": "03c75614ddfe8804a16ddfdb4f4046555faa833e",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "phpunit/phpunit": "^5.0"
            },
            "default-branch": true,
            "bin": [
                "bin/sql-formatter"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.3.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "lib"
                ]
            },
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jeremy Dorn",
                    "email": "jeremy@jeremydorn.com",
                    "homepage": "http://jeremydorn.com/"
                }
            ],
            "description": "a PHP SQL highlighting library",
            "homepage": "https://github.com/jdorn/sql-formatter/",
            "keywords": [
                "highlight",
                "sql"
            ],
            "support": {
                "source": "https://github.com/keboola/sql-formatter/tree/1.3.1"
            },
            "time": "2020-12-11T14:17:02+00:00"
        },
        {
            "name": "keboola/common-exceptions",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/common-exceptions.git",
                "reference": "44bff6e6d1f8edfb81af7662bc231566dcecb241"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/common-exceptions/zipball/44bff6e6d1f8edfb81af7662bc231566dcecb241",
                "reference": "44bff6e6d1f8edfb81af7662bc231566dcecb241",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^1.0",
                "phpstan/phpstan-shim": "^0.10.6",
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\CommonExceptions\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Common exceptions shared between different applications",
            "time": "2019-11-21T11:09:10+00:00"
        },
        {
            "name": "keboola/php-component",
            "version": "8.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-component.git",
                "reference": "f6ac140f1a93f0647c1a73080385f03df96f8658"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-component/zipball/f6ac140f1a93f0647c1a73080385f03df96f8658",
                "reference": "f6ac140f1a93f0647c1a73080385f03df96f8658",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/common-exceptions": "^1.0",
                "monolog/monolog": "^2.0",
                "php": "^7.3",
                "symfony/config": "^5.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/serializer": "^5.0"
            },
            "require-dev": {
                "devedge/sami-github": "^1.0",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^2.0",
                "phpstan/phpstan": "^0.12.14",
                "phpunit/phpunit": "^9.0"
            },
            "type": "project",
            "autoload": {
                "psr-4": {
                    "Keboola\\Component\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Helper classes for developing Keboola PHP components",
            "keywords": [
                "component",
                "docker",
                "keboola"
            ],
            "time": "2020-03-19T09:26:43+00:00"
        },
        {
            "name": "keboola/php-datatypes",
            "version": "4.7.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-datatypes.git",
                "reference": "da1ddb3e370eceedfbf46f8fdd510b0a4056daa6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-datatypes/zipball/da1ddb3e370eceedfbf46f8fdd510b0a4056daa6",
                "reference": "da1ddb3e370eceedfbf46f8fdd510b0a4056daa6",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "~0.4",
                "php-parallel-lint/php-parallel-lint": "^1.1",
                "phpstan/phpstan": "~0.9",
                "phpunit/phpunit": "^5.0",
                "squizlabs/php_codesniffer": "^2.6"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Datatype\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "PHP datatypes for databases",
            "time": "2020-04-08T07:50:29+00:00"
        },
        {
            "name": "keboola/table-backend-utils",
            "version": "v0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-table-backend-utils.git",
                "reference": "d6711701cff3423e3b2cb8961ac0df058c221fa2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-table-backend-utils/zipball/d6711701cff3423e3b2cb8961ac0df058c221fa2",
                "reference": "d6711701cff3423e3b2cb8961ac0df058c221fa2",
                "shasum": ""
            },
            "require": {
                "doctrine/dbal": "^2.9",
                "keboola/common-exceptions": "^1",
                "keboola/php-datatypes": "^4.7",
                "php": "^7.1"
            },
            "require-dev": {
                "keboola/coding-standard": "^9",
                "php-parallel-lint/php-parallel-lint": "^1",
                "phpstan/phpstan": "^0.12",
                "phpstan/phpstan-phpunit": "^0.12",
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\TableBackendUtils\\": "src/"
                }
            },
            "autoload-dev": {
                "psr-4": {
                    "Tests\\Keboola\\TableBackendUtils\\": "tests"
                }
            },
            "scripts": {
                "tests-unit": [
                    "phpunit --colors=always --testsuite unit"
                ],
                "tests-functional": [
                    "phpunit --colors=always --testsuite functional"
                ],
                "tests": [
                    "@tests-unit",
                    "@tests-functional"
                ],
                "phpstan": [
                    "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon"
                ],
                "phpcs": [
                    "phpcs -n --ignore=vendor --extensions=php ."
                ],
                "phpcbf": [
                    "phpcbf -n --ignore=vendor --extensions=php ."
                ],
                "phplint": [
                    "parallel-lint -j 10 --exclude vendor ."
                ],
                "build": [
                    "@phplint",
                    "@phpcs",
                    "@phpstan",
                    "@tests-unit",
                    "@tests-functional"
                ],
                "ci": [
                    "@composer validate --no-check-publish --no-check-all",
                    "@build"
                ]
            },
            "license": [
                "MIT"
            ],
            "description": "Package allows to import files to Snowflake from multiple cloud storages",
            "support": {
                "source": "https://github.com/keboola/php-table-backend-utils/tree/v0.1",
                "issues": "https://github.com/keboola/php-table-backend-utils/issues"
            },
            "time": "2020-04-14T06:16:15+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "c861fcba2ca29404dc9e617eedd9eff4616986b8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/c861fcba2ca29404dc9e617eedd9eff4616986b8",
                "reference": "c861fcba2ca29404dc9e617eedd9eff4616986b8",
                "shasum": ""
            },
            "require": {
                "php": "^7.2",
                "psr/log": "^1.0.1"
            },
            "provide": {
                "psr/log-implementation": "1.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "elasticsearch/elasticsearch": "^6.0",
                "graylog2/gelf-php": "^1.4.2",
                "jakub-onderka/php-parallel-lint": "^0.9",
                "php-amqplib/php-amqplib": "~2.4",
                "php-console/php-console": "^3.1.3",
                "phpspec/prophecy": "^1.6.1",
                "phpunit/phpunit": "^8.3",
                "predis/predis": "^1.1",
                "rollbar/rollbar": "^1.3",
                "ruflin/elastica": ">=0.90 <3.0",
                "swiftmailer/swiftmailer": "^5.3|^6.0"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-mbstring": "Allow to work properly with unicode symbols",
                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "php-console/php-console": "Allow sending log messages to Google Chrome",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "http://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "http://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "time": "2019-12-20T14:22:59+00:00"
        },
        {
            "name": "psr/log",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/0f73288fd15629204f9d42b7055f72dacbe811fc",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "Psr/Log/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "time": "2020-03-23T09:12:05+00:00"
        },
        {
            "name": "symfony/config",
            "version": "v5.0.7",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/config.git",
                "reference": "3e633c31a34738f7f4ed7a225c43fc45ca74c986"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/config/zipball/3e633c31a34738f7f4ed7a225c43fc45ca74c986",
                "reference": "3e633c31a34738f7f4ed7a225c43fc45ca74c986",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5",
                "symfony/filesystem": "^4.4|^5.0",
                "symfony/polyfill-ctype": "~1.8"
            },
            "conflict": {
                "symfony/finder": "<4.4"
            },
            "require-dev": {
                "symfony/event-dispatcher": "^4.4|^5.0",
                "symfony/finder": "^4.4|^5.0",
                "symfony/messenger": "^4.4|^5.0",
                "symfony/service-contracts": "^1.1|^2",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "symfony/yaml": "To use the yaml reference dumper"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Config\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Config Component",
            "homepage": "https://symfony.com",
            "time": "2020-03-27T16:56:45+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v5.0.7",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "ca3b87dd09fff9b771731637f5379965fbfab420"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/ca3b87dd09fff9b771731637f5379965fbfab420",
                "reference": "ca3b87dd09fff9b771731637f5379965fbfab420",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5",
                "symfony/polyfill-ctype": "~1.8"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Filesystem Component",
            "homepage": "https://symfony.com",
            "time": "2020-03-27T16:56:45+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v5.0.7",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "600a52c29afc0d1caa74acbec8d3095ca7e9910d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/600a52c29afc0d1caa74acbec8d3095ca7e9910d",
                "reference": "600a52c29afc0d1caa74acbec8d3095ca7e9910d",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Finder Component",
            "homepage": "https://symfony.com",
            "time": "2020-03-27T16:56:45+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.15.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "4719fa9c18b0464d399f1a63bf624b42b6fa8d14"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/4719fa9c18b0464d399f1a63bf624b42b6fa8d14",
                "reference": "4719fa9c18b0464d399f1a63bf624b42b6fa8d14",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.3"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.15-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "time": "2020-02-27T09:26:54+00:00"
        },
        {
            "name": "symfony/serializer",
            "version": "v5.0.7",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/serializer.git",
                "reference": "5f9e12db25c6f993b4999159957b75d32a3f4ade"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/serializer/zipball/5f9e12db25c6f993b4999159957b75d32a3f4ade",
                "reference": "5f9e12db25c6f993b4999159957b75d32a3f4ade",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5",
                "symfony/polyfill-ctype": "~1.8"
            },
            "conflict": {
                "phpdocumentor/type-resolver": "<0.2.1",
                "symfony/dependency-injection": "<4.4",
                "symfony/property-access": "<4.4",
                "symfony/property-info": "<4.4",
                "symfony/yaml": "<4.4"
            },
            "require-dev": {
                "doctrine/annotations": "~1.0",
                "doctrine/cache": "~1.0",
                "phpdocumentor/reflection-docblock": "^3.2|^4.0",
                "symfony/cache": "^4.4|^5.0",
                "symfony/config": "^4.4|^5.0",
                "symfony/dependency-injection": "^4.4|^5.0",
                "symfony/error-handler": "^4.4|^5.0",
                "symfony/http-foundation": "^4.4|^5.0",
                "symfony/mime": "^4.4|^5.0",
                "symfony/property-access": "^4.4|^5.0",
                "symfony/property-info": "^4.4|^5.0",
                "symfony/validator": "^4.4|^5.0",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "doctrine/annotations": "For using the annotation mapping. You will also need doctrine/cache.",
                "doctrine/cache": "For using the default cached annotation reader and metadata cache.",
                "psr/cache-implementation": "For using the metadata cache.",
                "symfony/config": "For using the XML mapping loader.",
                "symfony/mime": "For using a MIME type guesser within the DataUriNormalizer.",
                "symfony/property-access": "For using the ObjectNormalizer.",
                "symfony/property-info": "To deserialize relations.",
                "symfony/yaml": "For using the default YAML mapping loader."
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Serializer\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Serializer Component",
            "homepage": "https://symfony.com",
            "time": "2020-03-27T16:56:45+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "doctrine/instantiator",
            "version": "1.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/instantiator.git",
                "reference": "ae466f726242e637cebdd526a7d991b9433bacf1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/ae466f726242e637cebdd526a7d991b9433bacf1",
                "reference": "ae466f726242e637cebdd526a7d991b9433bacf1",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "require-dev": {
                "doctrine/coding-standard": "^6.0",
                "ext-pdo": "*",
                "ext-phar": "*",
                "phpbench/phpbench": "^0.13",
                "phpstan/phpstan-phpunit": "^0.11",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com",
                    "homepage": "http://ocramius.github.com/"
                }
            ],
            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
            "keywords": [
                "constructor",
                "instantiate"
            ],
            "time": "2019-10-21T16:45:58+00:00"
        },
        {
            "name": "jakub-onderka/php-parallel-lint",
            "version": "v1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/JakubOnderka/PHP-Parallel-Lint.git",
                "reference": "04fbd3f5fb1c83f08724aa58a23db90bd9086ee8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/JakubOnderka/PHP-Parallel-Lint/zipball/04fbd3f5fb1c83f08724aa58a23db90bd9086ee8",
                "reference": "04fbd3f5fb1c83f08724aa58a23db90bd9086ee8",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.3"
            },
            "require-dev": {
                "jakub-onderka/php-console-highlighter": "~0.3",
                "nette/tester": "~1.3",
                "squizlabs/php_codesniffer": "~2.7"
            },
            "suggest": {
                "jakub-onderka/php-console-highlighter": "Highlight syntax in code snippet"
            },
            "bin": [
                "parallel-lint"
            ],
            "type": "library",
            "autoload": {
                "classmap": [
                    "./"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Jakub Onderka",
                    "email": "ahoj@jakubonderka.cz"
                }
            ],
            "description": "This tool check syntax of PHP files about 20x faster than serial check.",
            "homepage": "https://github.com/JakubOnderka/PHP-Parallel-Lint",
            "time": "2018-02-24T15:31:20+00:00"
        },
        {
            "name": "keboola/coding-standard",
            "version": "9.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "bcf9ac5f664aa3bf816902438c0a8a9187cd4ebb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/bcf9ac5f664aa3bf816902438c0a8a9187cd4ebb",
                "reference": "bcf9ac5f664aa3bf816902438c0a8a9187cd4ebb",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "^4.8.6",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "time": "2019-10-16T11:14:48+00:00"
        },
        {
            "name": "keboola/csv",
            "version": "2.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csv.git",
                "reference": "86f03def371e5b1a8a11973b496c86d3a0d4d57d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csv/zipball/86f03def371e5b1a8a11973b496c86d3a0d4d57d",
                "reference": "86f03def371e5b1a8a11973b496c86d3a0d4d57d",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Csv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola CSV reader and writer",
            "homepage": "http://keboola.com",
            "keywords": [
                "csv",
                "rfc4180"
            ],
            "time": "2019-11-11T08:02:32+00:00"
        },
        {
            "name": "keboola/datadir-tests",
            "version": "4.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/datadir-tests.git",
                "reference": "b01856c771760331b50a082f8b6cb2557632c5bc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/datadir-tests/zipball/b01856c771760331b50a082f8b6cb2557632c5bc",
                "reference": "b01856c771760331b50a082f8b6cb2557632c5bc",
                "shasum": ""
            },
            "require": {
                "keboola/php-temp": "^2.0",
                "php": "^7.3",
                "phpunit/phpunit": "^9.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/process": "^5.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^9.0",
                "phpstan/phpstan": "^0.12.14"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DatadirTests\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Tool for functional testing of Keboola Connection components",
            "time": "2020-03-19T12:08:12+00:00"
        },
        {
            "name": "keboola/php-temp",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/filesystem": ">2.8"
            },
            "require-dev": {
                "infection/infection": "^0.12",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^8.0",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0|^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Temp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Temp library handles application temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "time": "2019-04-26T07:18:24+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.9.5",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "b2c28789e80a97badd14145fda39b545d83ca3ef"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/b2c28789e80a97badd14145fda39b545d83ca3ef",
                "reference": "b2c28789e80a97badd14145fda39b545d83ca3ef",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "replace": {
                "myclabs/deep-copy": "self.version"
            },
            "require-dev": {
                "doctrine/collections": "^1.0",
                "doctrine/common": "^2.6",
                "phpunit/phpunit": "^7.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                },
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "time": "2020-01-17T21:11:47+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "1.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "7761fcacf03b4d4f16e7ccb606d4879ca431fcf4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/7761fcacf03b4d4f16e7ccb606d4879ca431fcf4",
                "reference": "7761fcacf03b4d4f16e7ccb606d4879ca431fcf4",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-phar": "*",
                "phar-io/version": "^2.0",
                "php": "^5.6 || ^7.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "time": "2018-07-08T19:23:20+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "45a2ec53a73c70ce41d55cedef9063630abaf1b6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/45a2ec53a73c70ce41d55cedef9063630abaf1b6",
                "reference": "45a2ec53a73c70ce41d55cedef9063630abaf1b6",
                "shasum": ""
            },
            "require": {
                "php": "^5.6 || ^7.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "time": "2018-07-08T19:19:57+00:00"
        },
        {
            "name": "phpdocumentor/reflection-common",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionCommon.git",
                "reference": "63a995caa1ca9e5590304cd845c15ad6d482a62a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/63a995caa1ca9e5590304cd845c15ad6d482a62a",
                "reference": "63a995caa1ca9e5590304cd845c15ad6d482a62a",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "require-dev": {
                "phpunit/phpunit": "~6"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jaap van Otterdijk",
                    "email": "opensource@ijaap.nl"
                }
            ],
            "description": "Common reflection classes used by phpdocumentor to reflect the code structure",
            "homepage": "http://www.phpdoc.org",
            "keywords": [
                "FQSEN",
                "phpDocumentor",
                "phpdoc",
                "reflection",
                "static analysis"
            ],
            "time": "2018-08-07T13:53:10+00:00"
        },
        {
            "name": "phpdocumentor/reflection-docblock",
            "version": "5.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
                "reference": "cd72d394ca794d3466a3b2fc09d5a6c1dc86b47e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/cd72d394ca794d3466a3b2fc09d5a6c1dc86b47e",
                "reference": "cd72d394ca794d3466a3b2fc09d5a6c1dc86b47e",
                "shasum": ""
            },
            "require": {
                "ext-filter": "^7.1",
                "php": "^7.2",
                "phpdocumentor/reflection-common": "^2.0",
                "phpdocumentor/type-resolver": "^1.0",
                "webmozart/assert": "^1"
            },
            "require-dev": {
                "doctrine/instantiator": "^1",
                "mockery/mockery": "^1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                },
                {
                    "name": "Jaap van Otterdijk",
                    "email": "account@ijaap.nl"
                }
            ],
            "description": "With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.",
            "time": "2020-02-22T12:28:44+00:00"
        },
        {
            "name": "phpdocumentor/type-resolver",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/TypeResolver.git",
                "reference": "7462d5f123dfc080dfdf26897032a6513644fc95"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/7462d5f123dfc080dfdf26897032a6513644fc95",
                "reference": "7462d5f123dfc080dfdf26897032a6513644fc95",
                "shasum": ""
            },
            "require": {
                "php": "^7.2",
                "phpdocumentor/reflection-common": "^2.0"
            },
            "require-dev": {
                "ext-tokenizer": "^7.2",
                "mockery/mockery": "~1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                }
            ],
            "description": "A PSR-5 based resolver of Class names, Types and Structural Element Names",
            "time": "2020-02-18T18:59:58+00:00"
        },
        {
            "name": "phpspec/prophecy",
            "version": "v1.10.3",
            "source": {
                "type": "git",
                "url": "https://github.com/phpspec/prophecy.git",
                "reference": "451c3cd1418cf640de218914901e51b064abb093"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpspec/prophecy/zipball/451c3cd1418cf640de218914901e51b064abb093",
                "reference": "451c3cd1418cf640de218914901e51b064abb093",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.0.2",
                "php": "^5.3|^7.0",
                "phpdocumentor/reflection-docblock": "^2.0|^3.0.2|^4.0|^5.0",
                "sebastian/comparator": "^1.2.3|^2.0|^3.0|^4.0",
                "sebastian/recursion-context": "^1.0|^2.0|^3.0|^4.0"
            },
            "require-dev": {
                "phpspec/phpspec": "^2.5 || ^3.2",
                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.5 || ^7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.10.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Prophecy\\": "src/Prophecy"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Konstantin Kudryashov",
                    "email": "ever.zet@gmail.com",
                    "homepage": "http://everzet.com"
                },
                {
                    "name": "Marcello Duarte",
                    "email": "marcello.duarte@gmail.com"
                }
            ],
            "description": "Highly opinionated mocking framework for PHP 5.3+",
            "homepage": "https://github.com/phpspec/prophecy",
            "keywords": [
                "Double",
                "Dummy",
                "fake",
                "mock",
                "spy",
                "stub"
            ],
            "time": "2020-03-05T15:02:03+00:00"
        },
        {
            "name": "phpstan/phpstan",
            "version": "0.12.18",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan.git",
                "reference": "1ce27fe29c8660a27926127d350d53d80c4d4286"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan/zipball/1ce27fe29c8660a27926127d350d53d80c4d4286",
                "reference": "1ce27fe29c8660a27926127d350d53d80c4d4286",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.12-dev"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan - PHP Static Analysis Tool",
            "time": "2020-03-22T16:51:47+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "8.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "31e94ccc084025d6abee0585df533eb3a792b96a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/31e94ccc084025d6abee0585df533eb3a792b96a",
                "reference": "31e94ccc084025d6abee0585df533eb3a792b96a",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-xmlwriter": "*",
                "php": "^7.3",
                "phpunit/php-file-iterator": "^3.0",
                "phpunit/php-text-template": "^2.0",
                "phpunit/php-token-stream": "^4.0",
                "sebastian/code-unit-reverse-lookup": "^2.0",
                "sebastian/environment": "^5.0",
                "sebastian/version": "^3.0",
                "theseer/tokenizer": "^1.1.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "suggest": {
                "ext-pcov": "*",
                "ext-xdebug": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "8.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "time": "2020-02-19T13:41:19+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "354d4a5faa7449a377a18b94a2026ca3415e3d7a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/354d4a5faa7449a377a18b94a2026ca3415e3d7a",
                "reference": "354d4a5faa7449a377a18b94a2026ca3415e3d7a",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "time": "2020-02-07T06:05:22+00:00"
        },
        {
            "name": "phpunit/php-invoker",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-invoker.git",
                "reference": "7579d5a1ba7f3ac11c80004d205877911315ae7a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/7579d5a1ba7f3ac11c80004d205877911315ae7a",
                "reference": "7579d5a1ba7f3ac11c80004d205877911315ae7a",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "require-dev": {
                "ext-pcntl": "*",
                "phpunit/phpunit": "^9.0"
            },
            "suggest": {
                "ext-pcntl": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Invoke callables with a timeout",
            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
            "keywords": [
                "process"
            ],
            "time": "2020-02-07T06:06:11+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "526dc996cc0ebdfa428cd2dfccd79b7b53fee346"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/526dc996cc0ebdfa428cd2dfccd79b7b53fee346",
                "reference": "526dc996cc0ebdfa428cd2dfccd79b7b53fee346",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "time": "2020-02-01T07:43:44+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "4118013a4d0f97356eae8e7fb2f6c6472575d1df"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/4118013a4d0f97356eae8e7fb2f6c6472575d1df",
                "reference": "4118013a4d0f97356eae8e7fb2f6c6472575d1df",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "time": "2020-02-07T06:08:11+00:00"
        },
        {
            "name": "phpunit/php-token-stream",
            "version": "4.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-token-stream.git",
                "reference": "b2560a0c33f7710e4d7f8780964193e8e8f8effe"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/b2560a0c33f7710e4d7f8780964193e8e8f8effe",
                "reference": "b2560a0c33f7710e4d7f8780964193e8e8f8effe",
                "shasum": ""
            },
            "require": {
                "ext-tokenizer": "*",
                "php": "^7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Wrapper around PHP's tokenizer extension.",
            "homepage": "https://github.com/sebastianbergmann/php-token-stream/",
            "keywords": [
                "tokenizer"
            ],
            "time": "2020-02-07T06:19:00+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "9.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "848f6521c906500e66229668768576d35de0227e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/848f6521c906500e66229668768576d35de0227e",
                "reference": "848f6521c906500e66229668768576d35de0227e",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.2.0",
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "ext-xmlwriter": "*",
                "myclabs/deep-copy": "^1.9.1",
                "phar-io/manifest": "^1.0.3",
                "phar-io/version": "^2.0.1",
                "php": "^7.3",
                "phpspec/prophecy": "^1.8.1",
                "phpunit/php-code-coverage": "^8.0.1",
                "phpunit/php-file-iterator": "^3.0",
                "phpunit/php-invoker": "^3.0",
                "phpunit/php-text-template": "^2.0",
                "phpunit/php-timer": "^3.0",
                "sebastian/code-unit": "^1.0",
                "sebastian/comparator": "^4.0",
                "sebastian/diff": "^4.0",
                "sebastian/environment": "^5.0.1",
                "sebastian/exporter": "^4.0",
                "sebastian/global-state": "^4.0",
                "sebastian/object-enumerator": "^4.0",
                "sebastian/resource-operations": "^3.0",
                "sebastian/type": "^2.0",
                "sebastian/version": "^3.0"
            },
            "require-dev": {
                "ext-pdo": "*"
            },
            "suggest": {
                "ext-soap": "*",
                "ext-xdebug": "*"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ],
                "files": [
                    "src/Framework/Assert/Functions.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "time": "2020-04-03T14:40:04+00:00"
        },
        {
            "name": "sebastian/code-unit",
            "version": "1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit.git",
                "reference": "8d8f09bd47c75159921e6e84fdef146343962866"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/8d8f09bd47c75159921e6e84fdef146343962866",
                "reference": "8d8f09bd47c75159921e6e84fdef146343962866",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the PHP code units",
            "homepage": "https://github.com/sebastianbergmann/code-unit",
            "time": "2020-03-30T11:59:20+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "5b5dbe0044085ac41df47e79d34911a15b96d82e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/5b5dbe0044085ac41df47e79d34911a15b96d82e",
                "reference": "5b5dbe0044085ac41df47e79d34911a15b96d82e",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "time": "2020-02-07T06:20:13+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "4.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "85b3435da967696ed618ff745f32be3ff4a2b8e8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/85b3435da967696ed618ff745f32be3ff4a2b8e8",
                "reference": "85b3435da967696ed618ff745f32be3ff4a2b8e8",
                "shasum": ""
            },
            "require": {
                "php": "^7.3",
                "sebastian/diff": "^4.0",
                "sebastian/exporter": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "time": "2020-02-07T06:08:51+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "4.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "c0c26c9188b538bfa985ae10c9f05d278f12060d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/c0c26c9188b538bfa985ae10c9f05d278f12060d",
                "reference": "c0c26c9188b538bfa985ae10c9f05d278f12060d",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0",
                "symfony/process": "^4 || ^5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "time": "2020-02-07T06:09:38+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "5.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "c39c1db0a5cffc98173f3de5a17d489d1043fd7b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/c39c1db0a5cffc98173f3de5a17d489d1043fd7b",
                "reference": "c39c1db0a5cffc98173f3de5a17d489d1043fd7b",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "suggest": {
                "ext-posix": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "http://www.github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "time": "2020-03-31T12:14:15+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "4.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "80c26562e964016538f832f305b2286e1ec29566"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/80c26562e964016538f832f305b2286e1ec29566",
                "reference": "80c26562e964016538f832f305b2286e1ec29566",
                "shasum": ""
            },
            "require": {
                "php": "^7.3",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-mbstring": "*",
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "http://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "time": "2020-02-07T06:10:52+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "4.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "bdb1e7c79e592b8c82cb1699be3c8743119b8a72"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/bdb1e7c79e592b8c82cb1699be3c8743119b8a72",
                "reference": "bdb1e7c79e592b8c82cb1699be3c8743119b8a72",
                "shasum": ""
            },
            "require": {
                "php": "^7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-dom": "*",
                "phpunit/phpunit": "^9.0"
            },
            "suggest": {
                "ext-uopz": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "http://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "time": "2020-02-07T06:11:37+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "4.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "e67516b175550abad905dc952f43285957ef4363"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/e67516b175550abad905dc952f43285957ef4363",
                "reference": "e67516b175550abad905dc952f43285957ef4363",
                "shasum": ""
            },
            "require": {
                "php": "^7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "time": "2020-02-07T06:12:23+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "f4fd0835cabb0d4a6546d9fe291e5740037aa1e7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/f4fd0835cabb0d4a6546d9fe291e5740037aa1e7",
                "reference": "f4fd0835cabb0d4a6546d9fe291e5740037aa1e7",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "time": "2020-02-07T06:19:40+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "4.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "cdd86616411fc3062368b720b0425de10bd3d579"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/cdd86616411fc3062368b720b0425de10bd3d579",
                "reference": "cdd86616411fc3062368b720b0425de10bd3d579",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "http://www.github.com/sebastianbergmann/recursion-context",
            "time": "2020-02-07T06:18:20+00:00"
        },
        {
            "name": "sebastian/resource-operations",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/resource-operations.git",
                "reference": "8c98bf0dfa1f9256d0468b9803a1e1df31b6fa98"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/8c98bf0dfa1f9256d0468b9803a1e1df31b6fa98",
                "reference": "8c98bf0dfa1f9256d0468b9803a1e1df31b6fa98",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides a list of PHP built-in functions that operate on resources",
            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
            "time": "2020-02-07T06:13:02+00:00"
        },
        {
            "name": "sebastian/type",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/type.git",
                "reference": "9e8f42f740afdea51f5f4e8cec2035580e797ee1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/9e8f42f740afdea51f5f4e8cec2035580e797ee1",
                "reference": "9e8f42f740afdea51f5f4e8cec2035580e797ee1",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the types of the PHP type system",
            "homepage": "https://github.com/sebastianbergmann/type",
            "time": "2020-02-07T06:13:43+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "0411bde656dce64202b39c2f4473993a9081d39e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/0411bde656dce64202b39c2f4473993a9081d39e",
                "reference": "0411bde656dce64202b39c2f4473993a9081d39e",
                "shasum": ""
            },
            "require": {
                "php": "^7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "time": "2020-01-21T06:36:37+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "4.8.7",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "shasum": ""
            },
            "require": {
                "php": "^7.1",
                "squizlabs/php_codesniffer": "^3.4.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "1.0.0",
                "phing/phing": "2.16.1",
                "phpstan/phpstan": "0.9.2",
                "phpstan/phpstan-phpunit": "0.9.4",
                "phpstan/phpstan-strict-rules": "0.9",
                "phpunit/phpunit": "7.5.1"
            },
            "type": "phpcodesniffer-standard",
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "time": "2019-01-03T13:15:50+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.5.4",
            "source": {
                "type": "git",
                "url": "https://github.com/squizlabs/PHP_CodeSniffer.git",
                "reference": "dceec07328401de6211037abbb18bda423677e26"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/dceec07328401de6211037abbb18bda423677e26",
                "reference": "dceec07328401de6211037abbb18bda423677e26",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0"
            },
            "bin": [
                "bin/phpcs",
                "bin/phpcbf"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "lead"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "https://github.com/squizlabs/PHP_CodeSniffer",
            "keywords": [
                "phpcs",
                "standards"
            ],
            "time": "2020-01-30T22:20:29+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v5.0.7",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "c5ca4a0fc16a0c888067d43fbcfe1f8a53d8e70e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/c5ca4a0fc16a0c888067d43fbcfe1f8a53d8e70e",
                "reference": "c5ca4a0fc16a0c888067d43fbcfe1f8a53d8e70e",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Process Component",
            "homepage": "https://symfony.com",
            "time": "2020-03-27T16:56:45+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "11336f6f84e16a720dae9d8e6ed5019efa85a0f9"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/11336f6f84e16a720dae9d8e6ed5019efa85a0f9",
                "reference": "11336f6f84e16a720dae9d8e6ed5019efa85a0f9",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "time": "2019-06-13T22:48:21+00:00"
        },
        {
            "name": "webmozart/assert",
            "version": "1.7.0",
            "source": {
                "type": "git",
                "url": "https://github.com/webmozart/assert.git",
                "reference": "aed98a490f9a8f78468232db345ab9cf606cf598"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/webmozart/assert/zipball/aed98a490f9a8f78468232db345ab9cf606cf598",
                "reference": "aed98a490f9a8f78468232db345ab9cf606cf598",
                "shasum": ""
            },
            "require": {
                "php": "^5.3.3 || ^7.0",
                "symfony/polyfill-ctype": "^1.8"
            },
            "conflict": {
                "vimeo/psalm": "<3.6.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.8.36 || ^7.5.13"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Webmozart\\Assert\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Assertions to validate method input/output with nice error messages.",
            "keywords": [
                "assert",
                "check",
                "validate"
            ],
            "time": "2020-02-14T12:15:55+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": {
        "jdorn/sql-formatter": 20
    },
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": "^7.4",
        "ext-mbstring": "*",
        "ext-pdo": "*"
    },
    "platform-dev": {
        "ext-json": "*"
    },
    "plugin-api-version": "2.0.0"
}



================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "asigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "asigning travis tag"
	export TAG="$TRAVIS_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: '3'
services:
  dev:
    build:
      context: .
    volumes:
      - ./:/code
      - ./data:/data




================================================
FILE: Dockerfile
================================================
FROM php:7.4.0-apache-buster

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

ARG SQLSRV_VERSION=5.8.0

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update -q && apt-get install -y --no-install-recommends \
        git \
        locales \
        unzip \
        gnupg \
        unixodbc \
        unixodbc-dev \
    && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
    && curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list \
    && apt-get update -q && ACCEPT_EULA=Y apt-get install -y --no-install-recommends \
        msodbcsql17 \
	&& rm -r /var/lib/apt/lists/* \
	&& sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
	&& locale-gen \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

# PHP interface for ODBC driver
RUN pecl install sqlsrv-$SQLSRV_VERSION pdo_sqlsrv-$SQLSRV_VERSION \
    && docker-php-ext-enable sqlsrv pdo_sqlsrv \
    && docker-php-source delete

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/

# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD ["php", "/code/src/run.php"]



================================================
FILE: Dockerfile-test
================================================
FROM --platform=linux/amd64 php:7.4-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

ARG SQLSRV_VERSION=5.8.0

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

# Xdebug
RUN pecl install xdebug \
  && docker-php-ext-enable xdebug
COPY docker/xdebug/xdebug.ini.dist /usr/local/etc/php/conf.d/xdebug.ini

RUN apt-get update -q && apt-get install -y --no-install-recommends \
        git \
        locales \
        unzip \
        gnupg \
        unixodbc \
        unixodbc-dev \
    && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
    && curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list \
    && apt-get update -q && ACCEPT_EULA=Y apt-get install -y --no-install-recommends \
        msodbcsql17 \
	&& rm -r /var/lib/apt/lists/* \
	&& sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
	&& locale-gen \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

# PHP interface for ODBC driver
RUN pecl install sqlsrv-$SQLSRV_VERSION pdo_sqlsrv-$SQLSRV_VERSION \
    && docker-php-ext-enable sqlsrv pdo_sqlsrv \
    && docker-php-source delete

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/

# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD ["php", "/code/src/run.php"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>



================================================
FILE: phpstan.neon
================================================
parameters:
    checkMissingIterableValueType: false
    excludes_analyse:
        - src/run.php
    ignoreErrors:
        - '#on Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface#'



================================================
FILE: phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         bootstrap="tests/phpunit/bootstrap.php">
    <testsuite name="Main Test Suite">
        <directory>tests/phpunit</directory>
    </testsuite>
    <filter>
        <whitelist processUncoveredFilesFromWhitelist="true">
            <directory suffix=".php">.</directory>
            <exclude>
                <directory suffix=".php">vendor</directory>
            </exclude>
        </whitelist>
    </filter>
</phpunit>



================================================
FILE: requirements.txt
================================================
keboola.component==1.1.2
pyodbc
azure-core
# test dependencies
freezegun
mock



================================================
FILE: component_config/component_long_description.md
================================================
Application capable of executing stored procedures in Microsoft SQL Server databases. (Synapse, SQL Server, Azure, etc.)


================================================
FILE: component_config/component_short_description.md
================================================
Application capable of executing stored procedures in Microsoft SQL Server databases. (Synapse, SQL Server, Azure, etc.)


================================================
FILE: component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Parameters",
  "required": [
    "name",
    "procedure_parameters"
  ],
  "properties": {
    "name": {
      "description": "Name of the procedure to execute.",
      "type": "string",
      "title": "Procedure name",
      "minLength": 1,
      "propertyOrder": 1
    },
    "procedure_parameters": {
      "type": "array",
      "title": "Procedure Arguments",
      "format": "table",
      "description": "Arguments to passed to procedure.",
      "uniqueItems": true,
      "propertyOrder": 5,
      "items": {
        "type": "object",
        "title": "Argument",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "title": "Argument Name",
            "description": "Do not include the @ character.",
            "minLength": 1,
            "propertyOrder": 1
          },
          "value": {
            "type": "string",
            "title": "Argument Value",
            "description": "Characters like ' to mark the datatype may be included.",
            "minLength": 1,
            "propertyOrder": 2
          }
        }
      }
    }
  }
}


================================================
FILE: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Credentials",
  "required": [
    "server",
    "database",
    "user_name",
    "#password"
  ],
  "properties": {
    "server": {
      "type": "string",
      "title": "Server",
      "propertyOrder": 1
    },
    "database": {
      "type": "string",
      "title": "Database",
      "propertyOrder": 10
    },
    "user_name": {
      "type": "string",
      "title": "User Name",
      "propertyOrder": 20
    },
    "#password": {
      "type": "string",
      "format": "password",
      "title": "Password",
      "propertyOrder": 30
    }
  }
}


================================================
FILE: component_config/configuration_description.md
================================================
- In the credential settings below, fill in the credentials for the Microsoft SQL Server where you want to trigger the procedure.


- Add one configuration for each procedure you want to trigger. You can pass multiple arguments by specifying the name and value.


================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT



================================================
FILE: docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1



================================================
FILE: docker/xdebug/xdebug.ini.dist
================================================
xdebug.start_with_request = yes
xdebug.client_host = host.docker.internal
xdebug.mode = debug
xdebug.discover_client_host = 1
; uncomment in case of problems - will create xdebug log inside your project
;xdebug.log=/var/www/html/docker/xdebug/xdebug.log


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
FILE: src/Component.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger;

use Psr\Log\LoggerInterface;
use Keboola\Component\BaseComponent;
use Keboola\SynapseTrigger\Configuration\Config;
use Keboola\SynapseTrigger\Configuration\ConfigDefinition;
use Keboola\SynapseTrigger\Platform\ConnectionFactory;

class Component extends BaseComponent
{
    private QueryRunner $queryRunner;

    private LoggerInterface $logger;

    public function __construct(LoggerInterface $logger)
    {
        parent::__construct($logger);
        $connectionFactory = new ConnectionFactory();
        $connection = $connectionFactory->createFromConfig($this->getConfig());
        $this->queryRunner = new QueryRunner($logger, $connection);
        $this->logger = $logger;
    }


    protected function run(): void
    {
        $config = $this->getConfig();
        $this->queryRunner->triggerProcedure($config->getProcedureName(), $config->getProcedureParameters());
        $this->logger->info('Finished');
    }


    public function getConfig(): Config
    {
        $config = parent::getConfig();
        assert($config instanceof Config);
        return $config;
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        return ConfigDefinition::class;
    }
}



================================================
FILE: src/QueryRunner.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger;

use Doctrine\DBAL\Connection;
use Doctrine\DBAL\DBALException;
use Keboola\SynapseTrigger\Configuration\Code;
use Keboola\SynapseTrigger\Configuration\Script;
use Keboola\SynapseTrigger\Configuration\Block;
use Keboola\SynapseTrigger\Exception\UserException;
use Psr\Log\LoggerInterface;

class QueryRunner
{
    private LoggerInterface $logger;

    private Connection $connection;

    public function __construct(LoggerInterface $logger, Connection $connection)
    {
        $this->logger = $logger;
        $this->connection = $connection;
    }

    public function triggerProcedure(string $procedureName, array $procedureParameters): void
    {

        $query = $this->buildExecQuery($procedureName, $procedureParameters);

        // Run
        $this->logger->info(sprintf('Running query "%s".', $query));
        try {
            $this->connection->exec($query);
        } catch (\Throwable $originException) {
            $exception = $originException;

            // Unwrap to get better error message
            if ($exception instanceof DBALException) {
                $exception = $exception->getPrevious() ?? $exception;
            }

            // Remove driver prefix to get simpler message
            $message = preg_replace('~^SQLSTATE\[.+\[SQL Server\]~i', '', $exception->getMessage());

            throw new UserException(sprintf(
                'Query "%s" failed: "%s"',
                $query,
                $message,
            ), 0, $originException);
        }
    }

    private function buildExecQuery(string $procedureName, array $parameters): string
    {
        $this->validateArgument($procedureName);
        $argumentList = [];
        $query = 'EXEC ' . $procedureName;
        foreach ($parameters as $variable) {
            $this->validateArgument($variable['name']);
            $this->validateArgument($variable['value']);
            $argumentList[] = '@' . $variable['name'] . ' = ' . $variable['value'];
        }
        $arguments = implode(',', $argumentList);
        $query .= ' ' . $arguments . ';';
        return $query;
    }

    private function validateArgument(string $argument): bool
    {
        $invalidCharacters = array(' ', ';');
        foreach ($invalidCharacters as $character) {
            if (strpos($argument, $character) !== false) {
                throw new UserException(sprintf(
                    'Invalid argument "%s""',
                    $argument,
                ), 0);
            }
        }
        return true;
    }
}



================================================
FILE: src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\Component\Logger;
use Keboola\SynapseTrigger\Component;
use Keboola\CommonExceptions\UserExceptionInterface;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
try {
    $app = new Component($logger);
    $app->execute();
    exit(0);
} catch (UserExceptionInterface $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (\Throwable $e) {
    $logger->critical(
        get_class($e) . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => $e->getPrevious() ? get_class($e->getPrevious()) : '',
        ]
    );
    exit(2);
}



================================================
FILE: src/Configuration/Config.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Configuration;

use Keboola\Component\Config\BaseConfig;

class Config extends BaseConfig
{
    public const DEFAULT_QUERY_TIMEOUT = 7200;

    public function getHost(): string
    {
        return $this->getValue(['parameters', 'server']);
    }

    public function getPort(): int
    {
        return $this->getValue(['parameters', 'port']);
    }

    public function getUser(): string
    {
        return $this->getValue(['parameters', 'user_name']);
    }

    public function getPassword(): string
    {
        return $this->getValue(['parameters', '#password']);
    }

    public function getDatabase(): string
    {
        return $this->getValue(['parameters', 'database']);
    }

    public function getProcedureName(): string
    {
        return $this->getValue(['parameters', 'name']);
    }

    public function getProcedureParameters(): array
    {
        return $this->getValue(['parameters', 'procedure_parameters']);
    }


}


================================================
FILE: src/Configuration/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Configuration;

use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class ConfigDefinition extends BaseConfigDefinition
{


    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();

        // @formatter:off
        $parametersNode
            ->isRequired()
            ->children()
            ->scalarNode('server')
            ->isRequired()
            ->end()
            ->integerNode('port')
            ->defaultValue(1433)
            ->end()
            ->scalarNode('user_name')
            ->isRequired()
            ->end()
            ->scalarNode('#password')
            ->isRequired()
            ->end()
            ->scalarNode('database')
            ->isRequired()
            ->end()
            ->scalarNode('name')
            ->isRequired()
            ->end()
            ->arrayNode('procedure_parameters')->variablePrototype()
            ->end()
            ->end();

        // @formatter:on

        return $parametersNode;
    }
}



================================================
FILE: src/Exception/ApplicationException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Exception;

use Keboola\CommonExceptions\ApplicationExceptionInterface;

class ApplicationException extends \Exception implements ApplicationExceptionInterface
{

}



================================================
FILE: src/Exception/NotImplementedException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Exception;

use Keboola\CommonExceptions\ApplicationExceptionInterface;

class NotImplementedException extends \Exception implements ApplicationExceptionInterface
{

}



================================================
FILE: src/Exception/UnexpectedColumnType.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Exception;

use Keboola\CommonExceptions\ApplicationExceptionInterface;

class UnexpectedColumnType extends \Exception implements ApplicationExceptionInterface
{

}



================================================
FILE: src/Exception/UserException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class UserException extends \Exception implements UserExceptionInterface
{

}



================================================
FILE: src/Platform/ConnectionFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Platform;

use Keboola\SynapseTrigger\Configuration\Config;
use PDO;
use Doctrine\DBAL\DriverManager;
use Doctrine\DBAL\Connection;

class ConnectionFactory
{
    public function createFromConfig(Config $config): Connection
    {
        return $this->create(
            $config->getHost(),
            $config->getPort(),
            $config->getDatabase(),
            $config->getUser(),
            $config->getPassword()
        );
    }

    public function create(
        string $host,
        int    $port,
        string $database,
        string $user,
        string $password
    ): Connection
    {
        // https://docs.microsoft.com/en-us/azure/sql-data-warehouse/sql-data-warehouse-connection-strings
        return DriverManager::getConnection([
            'driver' => 'pdo_sqlsrv',
            'host' => $host,
            'port' => $port,
            'user' => $user,
            'password' => $password,
            'dbname' => $database,
            'driverOptions' => [
                'LoginTimeout' => 30,
                'ConnectRetryCount' => 3,
                'ConnectRetryInterval' => 10,
            ],
        ]);
    }
}



================================================
FILE: tests/functional/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\FunctionalTests;

use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Schema\Column;
use Doctrine\DBAL\Schema\Table;
use Keboola\Csv\CsvWriter;
use Keboola\DatadirTests\AbstractDatadirTestCase;
use Keboola\DatadirTests\DatadirTestSpecificationInterface;
use Keboola\DatadirTests\DatadirTestsProviderInterface;
use Keboola\SynapseTrigger\Tests\Traits\CreateConnectionTrait;
use Symfony\Component\Filesystem\Filesystem;

class DatadirTest extends AbstractDatadirTestCase
{
    use CreateConnectionTrait;

    private const DB_DUMP_IGNORED_METADATA = [
        'TABLE_QUALIFIER',
        'TABLE_OWNER',
    ];

    protected function tearDown(): void
    {
        parent::tearDown();
        $this->dropAllTables();
    }

    /**
     * @dataProvider provideDatadirSpecifications
     */
    public function testDatadir(DatadirTestSpecificationInterface $specification): void
    {
        $tempDatadir = $this->getTempDatadir($specification);

        // Replace environment variables in config.json
        $configPath = $tempDatadir->getTmpFolder() . '/config.json';
        if (file_exists($configPath)) {
            $config = (string) file_get_contents($configPath);
            $config = preg_replace_callback('~\$([a-zA-Z0-9_\-]+)~', fn($m) => getenv($m[1]), $config);
            file_put_contents($configPath, $config);
        }

        // Setup initial db state
        $this->dropAllTables();

        // Run script
        $process = $this->runScript($tempDatadir->getTmpFolder());

        // Dump database data & create statement after running the script
        $this->dumpAllTables($tempDatadir->getTmpFolder());

        $this->assertMatchesSpecification($specification, $process, $tempDatadir->getTmpFolder());
    }

    /**
     * @return DatadirTestsProviderInterface[]
     */
    protected function getDataProviders(): array
    {
        return [
            new DatadirTestsProvider($this->getTestFileDir()),
        ];
    }

    protected function dropAllTables(): void
    {
        // Drop all tables
        $connection = $this->createConnection();
        foreach ($connection->getSchemaManager()->listTables() as $table) {
            $connection->query(sprintf('DROP TABLE %s', $connection->quoteIdentifier($table->getName())));
        }
    }


    protected function dumpAllTables(string $tmpDir): void
    {
        // Create output dir
        $dumpDir = $tmpDir . '/out/db-dump';
        $fs = new Filesystem();
        $fs->mkdir($dumpDir, 0777);

        // Create connection and get tables
        $connection = $this->createConnection();
        foreach ($connection->getSchemaManager()->listTables() as $table) {
            $this->dumpTable($connection, $table->getName(), $dumpDir);
        }
    }

    protected function dumpTable(Connection $connection, string $table, string $dumpDir): void
    {
        // Generate create statement
        $metadata = $connection
            ->query(sprintf('exec sp_columns @table_name = N%s', $connection->quote($table)))
            ->fetchAll();

        // Ignore non-static keys
        $metadata = array_map(fn(array $item) => array_filter(
            $item,
            fn(string $key) => !in_array($key, self::DB_DUMP_IGNORED_METADATA, true),
            ARRAY_FILTER_USE_KEY
        ), $metadata);

        // Save create statement
        file_put_contents(
            sprintf('%s/%s.metadata.json', $dumpDir, $table),
            json_encode($metadata, JSON_PRETTY_PRINT)
        );

        // Dump data
        $this->dumpTableData($connection, $table, $dumpDir);
    }

    protected function dumpTableData(
        Connection $connection,
        string $table,
        string $dumpDir
    ): void {
        $csv = new CsvWriter(sprintf('%s/%s.data.csv', $dumpDir, $table));

        // Write header
        $columns = array_values(array_map(
            fn(Column $col) => $col->getName(),
            $connection->getSchemaManager()->listTableColumns($table)
        ));
        $csv->writeRow($columns);

        // Write data
        $data = $connection->query(sprintf(
            'SELECT * FROM %s ORDER BY %s',
            $connection->quoteIdentifier($table),
            $connection->quoteIdentifier($columns[0])
        ))->fetchAll();
        foreach ($data as $row) {
            $csv->writeRow($row);
        }
    }
}



================================================
FILE: tests/functional/DatadirTestsProvider.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\FunctionalTests;

use Keboola\DatadirTests\DatadirTestsFromDirectoryProvider;
use Keboola\DatadirTests\DatadirTestSpecification;
use Keboola\DatadirTests\DatadirTestSpecificationInterface;
use Symfony\Component\Finder\SplFileInfo;

class DatadirTestsProvider extends DatadirTestsFromDirectoryProvider
{
    private string $testDirectory;

    /** @var DatadirTestSpecification[][] */
    protected array $datapoints;

    public function __construct(string $testDirectory = 'tests/functional')
    {
        parent::__construct($testDirectory);
        $this->testDirectory = $testDirectory;
    }

    /**
     * @return DatadirTestSpecificationInterface[][]
     */
    public function __invoke(): array
    {
        $this->datapoints = [];
        $this->processDirectory($this->testDirectory);
        return $this->datapoints;
    }

    protected function processOneTest(SplFileInfo $testSuite): void
    {
        $workingDirectory = $testSuite->getPathname();

        $name = $testSuite->getBasename();
        $sourceDatadirDirectory = $workingDirectory . '/source/data';
        $expectedStdoutFile = $workingDirectory . '/expected-stdout';
        $expectedStderrFile = $workingDirectory . '/expected-stderr';
        $expectedReturnCodeFile = $workingDirectory . '/expected-code';
        $expectedReturnCode = null;
        $expectedOutputDirectory = null;
        $outTemplateDir = $workingDirectory . '/expected/data/out';

        // Added, load stdout from file
        if (file_exists($expectedStdoutFile)) {
            $expectedStdout = (string) file_get_contents($expectedStdoutFile);
        } else {
            $expectedStdout = null;
        }

        // Added, load stderr from file
        if (file_exists($expectedStderrFile)) {
            $expectedStderr = (string) file_get_contents($expectedStderrFile);
        } else {
            $expectedStderr = ''; // expected empty stderr if file not specified
        }

        if (file_exists($expectedReturnCodeFile)) {
            $returnCode = trim((string) file_get_contents($expectedReturnCodeFile));
            if (preg_match('~^[012]$~', $returnCode)) {
                $expectedReturnCode = (int) $returnCode;
            } else {
                throw new \InvalidArgumentException(sprintf(
                    '%s: Expecting invalid return code (%s). Possible codes are: 0, 1, 2.',
                    $name,
                    $returnCode
                ));
            }
        }

        if (file_exists($outTemplateDir)) {
            if (is_null($expectedReturnCode)) {
                $expectedReturnCode = 0;
            }
            $expectedOutputDirectory = $outTemplateDir;
        }

        $this->datapoints[$name] = [
            new DatadirTestSpecification(
                $sourceDatadirDirectory,
                $expectedReturnCode,
                $expectedStdout,
                $expectedStderr,
                $expectedOutputDirectory
            ),
        ];
    }
}



================================================
FILE: tests/functional/manifest-empty-mapping/expected-stdout
================================================
Processing block "Block 1".
Processing code "Code 1".
Running query "CREATE TABLE [new-table] ( product_name VARCHAR(100), price FLOAT )".
Running query "INSERT INTO [new-table] (product_name, price) VALUES ('row1', 12.00)".
Running query "INSERT INTO [new-table] (product_name, price) VALUES ('row2', 56.00)".



================================================
FILE: tests/functional/manifest-empty-mapping/source/data/config.json
================================================
{
  "authorization": {
    "workspace": {
      "host": "$SYNAPSE_SERVER",
      "port": $SYNAPSE_PORT,
      "database": "$SYNAPSE_DATABASE",
      "user": "$SYNAPSE_UID",
      "password": "$SYNAPSE_PWD"
    }
  },
  "storage": {
    "output": {
      "tables": []
    }
  },
  "parameters": {
    "blocks": [
      {
        "name": "Block 1",
        "codes": [
          {
            "name": "Code 1",
            "script": [
              "CREATE TABLE [new-table] (product_name VARCHAR(100), price FLOAT)",
              "INSERT INTO [new-table] (product_name, price) VALUES ('row1', 12.00)",
              "INSERT INTO [new-table] (product_name, price) VALUES ('row2', 56.00)"
            ]
          }
        ]
      }
    ]
  }
}



================================================
FILE: tests/functional/manifest-ok/expected-stdout
================================================
Processing block "Block 1".
Processing code "Code 1".
Running query "CREATE TABLE [table1] ( product_name VARCHAR(100), price FLOAT, count BIGINT, available BIT )".
Running query "INSERT INTO [table1] ( product_name, price, count, available ) VALUES ('row1', 12.00, 123, 1)".
Running query "INSERT INTO [table1] ( product_name, price, count, available ) VALUES ('row2', 56.00, 345, 0)".
Running query "CREATE TABLE [table2] ( id INT NOT NULL, user_name VARCHAR(100) )".
Running query "CREATE TABLE [temp] ( product_name VARCHAR(100), price FLOAT )".
Running query "INSERT INTO [temp] (product_name, price) VALUES ('row1', 20.00)".
Running query "INSERT INTO [temp] (product_name, price) VALUES ('row2', 40.00)".



================================================
FILE: tests/functional/manifest-ok/source/data/config.json
================================================
{
  "authorization": {
    "workspace": {
      "host": "$SYNAPSE_SERVER",
      "port": $SYNAPSE_PORT,
      "database": "$SYNAPSE_DATABASE",
      "user": "$SYNAPSE_UID",
      "password": "$SYNAPSE_PWD"
    }
  },
  "storage": {
    "output": {
      "tables": [
        {
          "source": "table1",
          "destination": "table1_dest"
        },
        {
          "source": "table2",
          "destination": "table2_dest"
        }
      ]
    }
  },
  "parameters": {
    "blocks": [
      {
        "name": "Block 1",
        "codes": [
          {
            "name": "Code 1",
            "script": [
              "CREATE TABLE [table1] (product_name VARCHAR(100), price FLOAT, count BIGINT, available BIT)",
              "INSERT INTO [table1] (product_name, price, count, available) VALUES ('row1', 12.00, 123, 1)",
              "INSERT INTO [table1] (product_name, price, count, available) VALUES ('row2', 56.00, 345, 0)",
              "CREATE TABLE [table2] (id INT NOT NULL, user_name VARCHAR(100))",
              "CREATE TABLE [temp] (product_name VARCHAR(100), price FLOAT)",
              "INSERT INTO [temp] (product_name, price) VALUES ('row1', 20.00)",
              "INSERT INTO [temp] (product_name, price) VALUES ('row2', 40.00)"
            ]
          }
        ]
      }
    ]
  }
}



================================================
FILE: tests/functional/manifest-table-not-exists/expected-code
================================================
1



================================================
FILE: tests/functional/manifest-table-not-exists/expected-stderr
================================================
Table "not_found" specified in output were not created by the transformation.



================================================
FILE: tests/functional/manifest-table-not-exists/expected-stdout
================================================
Processing block "Block 1".
Processing code "Code 1".
Running query "CREATE TABLE [new-table] ( product_name VARCHAR(100), price FLOAT )".
Running query "INSERT INTO [new-table] (product_name, price) VALUES ('row1', 12.00)".
Running query "INSERT INTO [new-table] (product_name, price) VALUES ('row2', 56.00)".



================================================
FILE: tests/functional/manifest-table-not-exists/source/data/config.json
================================================
{
  "authorization": {
    "workspace": {
      "host": "$SYNAPSE_SERVER",
      "port": $SYNAPSE_PORT,
      "database": "$SYNAPSE_DATABASE",
      "user": "$SYNAPSE_UID",
      "password": "$SYNAPSE_PWD"
    }
  },
  "storage": {
    "output": {
      "tables": [
        {
          "source": "not_found",
          "destination": "not_found_dest"
        }
      ]
    }
  },
  "parameters": {
    "blocks": [
      {
        "name": "Block 1",
        "codes": [
          {
            "name": "Code 1",
            "script": [
              "CREATE TABLE [new-table] (product_name VARCHAR(100), price FLOAT)",
              "INSERT INTO [new-table] (product_name, price) VALUES ('row1', 12.00)",
              "INSERT INTO [new-table] (product_name, price) VALUES ('row2', 56.00)"
            ]
          }
        ]
      }
    ]
  }
}



================================================
FILE: tests/functional/query-empty/expected-stdout
================================================
Processing block "Block 1".
Processing code "Code 1".
Running query "CREATE TABLE [new-table] ( product_name VARCHAR(100), price FLOAT )".
Running query "INSERT INTO [new-table] (product_name, price) VALUES ('row1', 12.00)".



================================================
FILE: tests/functional/query-empty/source/data/config.json
================================================
{
  "authorization": {
    "workspace": {
      "host": "$SYNAPSE_SERVER",
      "port": $SYNAPSE_PORT,
      "database": "$SYNAPSE_DATABASE",
      "user": "$SYNAPSE_UID",
      "password": "$SYNAPSE_PWD"
    }
  },
  "parameters": {
    "blocks": [
      {
        "name": "Block 1",
        "codes": [
          {
            "name": "Code 1",
            "script": [
              "  ",
              "CREATE TABLE [new-table] (product_name VARCHAR(100), price FLOAT)",
              "INSERT INTO [new-table] (product_name, price) VALUES ('row1', 12.00)"
            ]
          }
        ]
      }
    ]
  }
}



================================================
FILE: tests/functional/query-failed/expected-code
================================================
1



================================================
FILE: tests/functional/query-failed/expected-stderr
================================================
Query "INSERT INTO [not_found] VALUES (1, 2)" from block "Block 1" and code "Code 1" failed: "Could not find object 'not_found' or you do not have permission."



================================================
FILE: tests/functional/query-failed/expected-stdout
================================================
Processing block "Block 1".
Processing code "Code 1".
Running query "INSERT INTO [not_found] VALUES (1, 2)".



================================================
FILE: tests/functional/query-failed/source/data/config.json
================================================
{
  "authorization": {
    "workspace": {
      "host": "$SYNAPSE_SERVER",
      "port": $SYNAPSE_PORT,
      "database": "$SYNAPSE_DATABASE",
      "user": "$SYNAPSE_UID",
      "password": "$SYNAPSE_PWD"
    }
  },
  "storage": {
    "output": {
      "tables": [
        {
          "source": "table1",
          "destination": "table1_dest"
        },
        {
          "source": "table2",
          "destination": "table2_dest"
        }
      ]
    }
  },
  "parameters": {
    "blocks": [
      {
        "name": "Block 1",
        "codes": [
          {
            "name": "Code 1",
            "script": [
              "INSERT INTO [not_found] VALUES (1, 2)",
              "CREATE TABLE [new-table] (product_name VARCHAR(100), price FLOAT)",
              "INSERT INTO [new-table] (product_name, price) VALUES ('row1', 12.00)"
            ]
          }
        ]
      }
    ]
  }
}



================================================
FILE: tests/functional/query-select/expected-stdout
================================================
Processing block "Block 1".
Processing code "Code 1".
Running query "CREATE TABLE [new-table] ( product_name VARCHAR(100), price FLOAT )".
Running query "INSERT INTO [new-table] (product_name, price) VALUES ('row1', 12.00)".
Running query "SELECT product_name, price INTO [new-table2] FROM [new-table]".
Ignoring select query "SELECT * FROM [new-table]".
Running query "INSERT INTO [new-table] (product_name, price) VALUES ('row2', 56.00)".



================================================
FILE: tests/functional/query-select/source/data/config.json
================================================
{
  "authorization": {
    "workspace": {
      "host": "$SYNAPSE_SERVER",
      "port": $SYNAPSE_PORT,
      "database": "$SYNAPSE_DATABASE",
      "user": "$SYNAPSE_UID",
      "password": "$SYNAPSE_PWD"
    }
  },
  "parameters": {
    "blocks": [
      {
        "name": "Block 1",
        "codes": [
          {
            "name": "Code 1",
            "script": [
              "CREATE TABLE [new-table] (product_name VARCHAR(100), price FLOAT)",
              "INSERT INTO [new-table] (product_name, price) VALUES ('row1', 12.00)",
              "SELECT product_name, price INTO [new-table2] FROM [new-table]",
              "SELECT * FROM [new-table]",
              "INSERT INTO [new-table] (product_name, price) VALUES ('row2', 56.00)"
            ]
          }
        ]
      }
    ]
  }
}



================================================
FILE: tests/functional/simple/expected-stdout
================================================
Processing block "Block 1".
Processing block "Block 2".
Processing code "Code 1".
Processing block "Block 3".
Processing code "Code 2".
Ignoring select query "SELECT 1".
Running query "CREATE TABLE [new-table] ( product_name VARCHAR(100), price FLOAT )".
Running query "INSERT INTO [new-table] (product_name, price) VALUES ('row1', 12.00)".
Processing code "Code 3".
Running query "INSERT INTO [new-table] (product_name, price) VALUES ('row2', 56.00)".



================================================
FILE: tests/functional/simple/source/data/config.json
================================================
{
  "authorization": {
    "workspace": {
      "host": "$SYNAPSE_SERVER",
      "port": $SYNAPSE_PORT,
      "database": "$SYNAPSE_DATABASE",
      "user": "$SYNAPSE_UID",
      "password": "$SYNAPSE_PWD"
    }
  },
  "parameters": {
    "blocks": [
      {
        "name": "Block 1",
        "codes": []
      },
      {
        "name": "Block 2",
        "codes": [
          {
            "name": "Code 1",
            "script": []
          }
        ]
      },
      {
        "name": "Block 3",
        "codes": [
          {
            "name": "Code 2",
            "script": [
              "SELECT 1",
              "CREATE TABLE [new-table] (product_name VARCHAR(100), price FLOAT)",
              "INSERT INTO [new-table] (product_name, price) VALUES ('row1', 12.00)"
            ]
          },
          {
            "name": "Code 3",
            "script": [
              "INSERT INTO [new-table] (product_name, price) VALUES ('row2', 56.00)"
            ]
          }
        ]
      }
    ]
  }
}



================================================
FILE: tests/phpunit/bootstrap.php
================================================
<?php

declare(strict_types=1);

use Doctrine\DBAL\FetchMode;
use \Keboola\SynapseTrigger\Tests\Tools\TestConnectionFactory;

require __DIR__ . '/../../vendor/autoload.php';

// Check environment
$environments = [
    'SYNAPSE_SERVER',
    'SYNAPSE_PORT',
    'SYNAPSE_DATABASE',
    'SYNAPSE_UID',
    'SYNAPSE_PWD',
];
foreach ($environments as $environment) {
    if (empty(getenv($environment))) {
        throw new \Exception(sprintf('Missing environment var "%s".', $environment));
    }
}

// Wait for the end of the other db session.
// For tests we need clean and isolated environment,
// ... but new database cannot be created using SQL in Synapse DB.
// Synapse DB also doesn't support a lock that could be used here.
// So, we wait until no other session is active.
$maxRetries = 100;
$i = 0;
echo "boostrap.php: Waiting for the end of the other db session ...\n";
while (true) {
    $i++;
    $connection = TestConnectionFactory::createConnection();
    $activeSessions = (int) $connection
        // Select active sessions or closed in last 3 seconds
        ->query(sprintf(
            'SELECT COUNT(*) FROM sys.dm_pdw_exec_sessions WHERE login_name = SYSTEM_USER ' .
            "AND (status IN ('ACTIVE', 'IDLE') OR login_time > DATEADD(SECOND,-3, getdate()))",
        ))
        ->fetch(FetchMode::COLUMN, 0);
    $connection->close();

    if ($activeSessions === 1) {
        echo "boostrap.php: OK\n";
        break;
    } else {
        echo "boostrap.php: ... $activeSessions active sessions, waiting\n";
    }

    if ($i > $maxRetries) {
        throw new RuntimeException('boostrap.php: Timeout');
    }

    sleep(6);
}



================================================
FILE: tests/phpunit/ConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Tests;

use Keboola\SynapseTrigger\Configuration\Config;
use Keboola\SynapseTrigger\Configuration\ConfigDefinition;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigTest extends TestCase
{
    public function testConfigObjectsMapping(): void
    {
        $config = new Config($this->getComplexValidConfig(), new ConfigDefinition());

        // Authorization
        Assert::assertSame('synapse.db', $config->getHost());
        Assert::assertSame(1234, $config->getPort());
        Assert::assertSame('test-user', $config->getUser());
        Assert::assertSame('test-password', $config->getPassword());
        Assert::assertSame('my-database', $config->getDatabase());

        // Query timeout
        Assert::assertSame(1000, $config->getQueryTimeout());

        // Blocks
        $blocks = $config->getBlocks();

        // Block 1
        Assert::assertCount(3, $blocks);
        Assert::assertSame('Block 1', $blocks[0]->getName());
        Assert::assertCount(0, $blocks[0]->getCodes());

        // Block 2
        Assert::assertSame('Block 2', $blocks[1]->getName());
        $codes2 = $blocks[1]->getCodes();
        Assert::assertCount(1, $codes2);
        Assert::assertSame('Code 1', $codes2[0]->getName());
        Assert::assertSame([], $codes2[0]->getScripts());

        // Block 3
        Assert::assertSame('Block 3', $blocks[2]->getName());
        $codes3 = $blocks[2]->getCodes();
        Assert::assertCount(2, $codes3);

        Assert::assertSame('Code 2', $codes3[0]->getName());
        $scripts3_0 = $codes3[0]->getScripts();
        Assert::assertCount(1, $scripts3_0);
        Assert::assertSame('SELECT 1', $scripts3_0[0]->getRawSql());

        Assert::assertSame('Code 3', $codes3[1]->getName());
        $scripts3_1 = $codes3[1]->getScripts();
        Assert::assertCount(2, $scripts3_1);
        Assert::assertSame('SELECT 1', $scripts3_1[0]->getRawSql());
        Assert::assertSame('INSERT INTO `table` VALUES(1,2,3);', $scripts3_1[1]->getRawSql());
    }

    public function testPortDefaultValue(): void
    {
        $config = new Config([
            'authorization' => $this->getAuthorizationNodeExcept('port'),
            'parameters' => $this->getParametersNode(),
        ], new ConfigDefinition());

        // Default value: 2 hours
        Assert::assertSame(1433, $config->getPort());
    }

    public function testQueryLimitDefaultValue(): void
    {
        $config = new Config([
            'authorization' => $this->getAuthorizationNode(),
            'parameters' => [
                'blocks' => [
                    [
                        'name' => 'Block 1',
                        'codes' => [],
                    ],
                ],
            ],
        ], new ConfigDefinition());

        // Default value: 2 hours
        Assert::assertSame(7200, $config->getQueryTimeout());
    }

    public function testQueryTimeoutFromImageParameters(): void
    {
        $config = new Config([
            'authorization' => $this->getAuthorizationNode(),
            'parameters' => [
                'blocks' => [
                    [
                        'name' => 'Block 1',
                        'codes' => [],
                    ],
                ],
            ],
            'image_parameters' => [
                'default_query_timeout' => 123000,
            ],
        ], new ConfigDefinition());

        Assert::assertSame(123000, $config->getQueryTimeout());
    }

    public function testQueryTimeoutFromConfigParameters(): void
    {
        $config = new Config([
            'authorization' => $this->getAuthorizationNode(),
            'parameters' => [
                'query_timeout' => 456000,
                'blocks' => [
                    [
                        'name' => 'Block 1',
                        'codes' => [],
                    ],
                ],
            ],
            'image_parameters' => [
                'default_query_timeout' => 123000,
            ],
        ], new ConfigDefinition());

        Assert::assertSame(456000, $config->getQueryTimeout());
    }

    /**
     * @dataProvider validConfigProvider
     */
    public function testValidConfig(array $config): void
    {
        new Config($config, new ConfigDefinition());
        $this->addToAssertionCount(1); // Assert no error
    }

    /**
     * @dataProvider invalidConfigProvider
     */
    public function testInvalidConfig(string $expectedMsg, array $config): void
    {
        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage($expectedMsg);
        new Config($config, new ConfigDefinition());
    }

    public function validConfigProvider(): array
    {
        return [
            'empty parameters.blocks' => [
                [
                    'authorization' => $this->getAuthorizationNode(),
                    'parameters' => [
                        'blocks' => [],
                    ],
                ],
            ],
            'empty parameters.blocks.codes' => [
                [
                    'authorization' => $this->getAuthorizationNode(),
                    'parameters' => [
                        'blocks' => [
                            [
                                'name' => 'Block 1',
                                'codes' => [],
                            ],
                        ],
                    ],
                ],
            ],
            'empty parameters.blocks.codes.script' => [
                [
                    'authorization' => $this->getAuthorizationNode(),
                    'parameters' => [
                        'blocks' => [
                            [
                                'name' => 'Block 1',
                                'codes' => [
                                    [
                                        'name' => 'Code 1',
                                        'script' => [],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'complex' => [$this->getComplexValidConfig()],
        ];
    }

    public function invalidConfigProvider(): array
    {
        return [
            'missing authorization' => [
                'The child node "authorization" at path "root" must be configured.',
                ['parameters' => $this->getParametersNode()],
            ],
            'empty authorization' => [
                'The child node "workspace" at path "root.authorization" must be configured.',
                ['authorization' => [], 'parameters' => $this->getParametersNode()],
            ],
            'missing authorization.workspace.host' => [
                'The child node "host" at path "root.authorization.workspace" must be configured.',
                [
                    'authorization' => $this->getAuthorizationNodeExcept('host'),
                    'parameters' => $this->getParametersNode(),
                ],
            ],
            'missing authorization.workspace.user' => [
                'The child node "user" at path "root.authorization.workspace" must be configured.',
                [
                    'authorization' => $this->getAuthorizationNodeExcept('user'),
                    'parameters' => $this->getParametersNode()],
                ],
            'missing authorization.workspace.password' => [
                'The child node "password" at path "root.authorization.workspace" must be configured.',
                [
                    'authorization' => $this->getAuthorizationNodeExcept('password'),
                    'parameters' => $this->getParametersNode(),
                ],
            ],
            'missing authorization.workspace.database' => [
                'The child node "database" at path "root.authorization.workspace" must be configured.',
                [
                    'authorization' => $this->getAuthorizationNodeExcept('database'),
                    'parameters' => $this->getParametersNode(),
                ],
            ],
            'authorization.workspace.port must be integer' => [
                'Invalid type for path "root.authorization.workspace.port". Expected int, but got string.',
                [
                    'authorization' => [
                        'workspace' => [
                            'host' => 'synapse.db',
                            'port' => '1234',
                            'user' => 'test-user',
                            'password' => 'test-password',
                            'database' => 'my-database',
                        ],
                    ],
                    'parameters' => $this->getParametersNode(),
                ],
            ],
            'missing parameters' => [
                'The child node "parameters" at path "root" must be configured.',
                [
                    'authorization' => $this->getAuthorizationNode(),
                ],
            ],
            'empty parameters (missing blocks)' => [
                'The child node "blocks" at path "root.parameters" must be configured.',
                [
                    'authorization' => $this->getAuthorizationNode(),
                    'parameters' => [],
                ],
            ],
            'missing parameters.blocks.codes' => [
                'The child node "codes" at path "root.parameters.blocks.0',
                [
                    'authorization' => $this->getAuthorizationNode(),
                    'parameters' => [
                        'blocks' => [
                            [
                                'name' => 'Block 1',
                            ],
                        ],
                    ],
                ],
            ],
            'missing parameters.blocks.name' => [
                'The child node "name" at path "root.parameters.blocks.0" must be configured.',
                [
                    'authorization' => $this->getAuthorizationNode(),
                    'parameters' => [
                        'blocks' => [
                            [
                                'codes' => [],
                            ],
                        ],
                    ],
                ],
            ],
            'missing parameters.blocks.codes.script' => [
                'The child node "script" at path "root.parameters.blocks.0.codes.0" must be configured.',
                [
                    'authorization' => $this->getAuthorizationNode(),
                    'parameters' => [
                        'blocks' => [
                            [
                                'name' => 'Block 1',
                                'codes' => [
                                    [
                                        'name' => 'Code 1',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'missing parameters.blocks.codes.name' => [
                'The child node "name" at path "root.parameters.blocks.0.codes.0" must be configured.',
                [
                    'authorization' => $this->getAuthorizationNode(),
                    'parameters' => [
                        'blocks' => [
                            [
                                'name' => 'Block 1',
                                'codes' => [
                                    [
                                        'script' => [],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'parameters.blocks.codes.script must be array' => [
                'Invalid type for path "root.parameters.blocks.0.codes.0.script',
                [
                    'authorization' => $this->getAuthorizationNode(),
                    'parameters' => [
                        'blocks' => [
                            [
                                'name' => 'Block 1',
                                'codes' => [
                                    [
                                        'name' => 'Code 1',
                                        'script' => 'SELECT 1',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'parameters.query_limit must be integer' => [
                'Invalid type for path "root.parameters.query_timeout". Expected int, but got string.',
                [
                    'authorization' => $this->getAuthorizationNode(),
                    'parameters' => [
                        'query_timeout' => '1000',
                        'blocks' => [],
                    ],
                ],
            ],
        ];
    }

    private function getComplexValidConfig(): array
    {
        return [
            'authorization' => $this->getAuthorizationNode(),
            'parameters' => [
                'query_timeout' => 1000,
                'blocks' => [
                    [
                        'name' => 'Block 1',
                        'codes' => [],
                    ],
                    [
                        'name' => 'Block 2',
                        'codes' => [
                            [
                                'name' => 'Code 1',
                                'script' => [],
                            ],
                        ],
                    ],
                    [
                        'name' => 'Block 3',
                        'codes' => [
                            [
                                'name' => 'Code 2',
                                'script' => [
                                    'SELECT 1',
                                ],
                            ],
                            [
                                'name' => 'Code 3',
                                'script' => [
                                    'SELECT 1',
                                    'INSERT INTO `table` VALUES(1,2,3);',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];
    }

    private function getAuthorizationNode(): array
    {
        return [
            'workspace' => [
                'host' => 'synapse.db',
                'port' => 1234,
                'user' => 'test-user',
                'password' => 'test-password',
                'database' => 'my-database',
                'schema' => null,
            ],
        ];
    }

    private function getAuthorizationNodeExcept(string $except): array
    {
        $data = $this->getAuthorizationNode();

        if ($except) {
            unset($data['workspace'][$except]);
        }

        return $data;
    }

    private function getParametersNode(): array
    {
        return [
            'blocks' => [
                [
                  'name' => 'Block 1',
                  'codes' => [
                      [
                          'name' => 'Code 1',
                          'script' => [
                              'SELECT 1',
                          ],
                      ],
                  ],
                ],
            ],
        ];
    }
}



================================================
FILE: tests/phpunit/ConnectionTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Tests;

use Doctrine\DBAL\DBALException;
use Keboola\SynapseTrigger\Tests\Traits\CreateConnectionTrait;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

class ConnectionTest extends TestCase
{
    use CreateConnectionTrait;

    public function testQueryTimeoutExpired(): void
    {
        $this->expectException(DBALException::class);
        $this->expectExceptionMessage('Query timeout expired');
        $timeout = 1;
        $sqlDelay = 3;
        $this->runQueryWithTimeout($timeout, $sqlDelay);
    }

    public function testQueryTimeoutNotExpired(): void
    {
        $timeout = 10;
        $sqlDelay = 3;
        $this->runQueryWithTimeout($timeout, $sqlDelay);
        $this->addToAssertionCount(1); // Assert no error
    }

    public function testQuery(): void
    {
        Assert::assertSame(
            [['A' => '1', 'B' => '2']],
            $this->createConnection()->query('SELECT 1 AS A, 2 AS B')->fetchAll()
        );
    }

    public function testExec(): void
    {
        $connection = $this->createConnection();

        // Exec returns number of affected columns
        Assert::assertSame(0, $connection->exec(
            'CREATE TABLE #temp (product_name VARCHAR(100)) WITH (LOCATION = USER_DB)'
        ));
        Assert::assertSame(1, $connection->exec(
            "INSERT INTO #temp (product_name) VALUES ('test')"
        ));
    }

    private function runQueryWithTimeout(int $timeout, int $sqlDelay): void
    {
        $this
            ->createConnection($timeout)
            ->exec(sprintf(
            // Synapse DB doesn't support WAITFOR DELAY
            // https://feedback.azure.com/forums/307516-azure-synapse-analytics/suggestions/31120816-add-waitfor-command-to-sql-datawarehouse
                'DECLARE @d datetime = GETDATE(); DECLARE @x int; ' .
                "WHILE (DATEDIFF(SECOND, @d, GETDATE()) < %d) BEGIN SET @x = 1; END; SELECT '%d';",
                $sqlDelay,
                rand(0, 1000000) // prevent query cache
            ));
    }
}



================================================
FILE: tests/phpunit/QueryFormatterTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Tests;

use Keboola\SynapseTrigger\QueryFormatter;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

class QueryFormatterTest extends TestCase
{
    private QueryFormatter $queryFormatter;

    protected function setUp(): void
    {
        parent::setUp();
        $this->queryFormatter = new QueryFormatter();
    }

    /**
     * @dataProvider removeCommentsSqlProvider
     */
    public function testRemoveComments(string $expectedOutput, string $input): void
    {
        Assert::assertSame($expectedOutput, $this->queryFormatter->removeComments($input));
    }

    /**
     * @dataProvider formatToLogProvider
     */
    public function testFormatToLog(string $expectedOutput, string $input): void
    {
        Assert::assertSame($expectedOutput, $this->queryFormatter->formatToLog($input));
    }

    public function removeCommentsSqlProvider(): array
    {
        return [
            'simple' => [
                "SELECT \n  1",
                "SELECT \n 1",
            ],
            'emoji' => [
                "\u{1F30F}",
                "\u{1F30F}",
            ],
            'comment' => [
                "SELECT \n  2",
                "SELECT \n -- COMMENT\n 2",
            ],
            // # is NOT comment in the Synapse
            'temp-table' => [
                "SELECT \n  * INTO #temp_table \nFROM \n  SOURCE_TABLE",
                "-- COMMENT\nSELECT * INTO #temp_table FROM SOURCE_TABLE",
            ],
        ];
    }

    public function formatToLogProvider(): array
    {
        return [
            'simple' => [
                'SELECT 1',
                "SELECT \n  1",
            ],
            'emoji' => [
                "\u{1F30F}",
                "\u{1F30F}",
            ],
            'long' => [
                /** @lang text */
                // phpcs:disable
                <<<EOF
SELECT e.employee_id AS "Employee #" , e.first_name || ' ' || e.last_name AS "Name" , e.email AS "Email" , e.phone_number AS "Phone" , TO_CHAR(e.hire_date, 'MM/DD/YYYY') AS "Hire Date" , TO_CHAR(e.salary, 'L99G999D99', 'NLS_NUMERIC_CHARACTERS = ''.,'' NLS_CURRENCY = ''$''') AS "Salary" , e.commission_pct AS "Comission %" , 'works as ' || j.job_title || ' in ' || d.department_name || ' department (manager: ' || dm.first_name || ' ' || dm.last_name || ') and immediate supervisor: ' || m.first_name
...
oyee_id -- to get name of location LEFT JOIN locations l ON d.location_id = l.location_id LEFT JOIN countries c ON l.country_id = c.country_id LEFT JOIN regions r ON c.region_id = r.region_id -- to get job history of employee LEFT JOIN job_history jh ON e.employee_id = jh.employee_id -- to get title of job history job_id LEFT JOIN jobs jj ON jj.job_id = jh.job_id -- to get namee of department from job history LEFT JOIN departments dd ON dd.department_id = jh.department_id ORDER BY e.employee_id;
EOF,
                // phpcs:enable
                /** @lang text */
                <<<EOF
SELECT
  e.employee_id AS "Employee #"
  , e.first_name || ' ' || e.last_name AS "Name"
  , e.email AS "Email"
  , e.phone_number AS "Phone"
  , TO_CHAR(e.hire_date, 'MM/DD/YYYY') AS "Hire Date"
  , TO_CHAR(e.salary, 'L99G999D99', 'NLS_NUMERIC_CHARACTERS = ''.,'' NLS_CURRENCY = ''$''') AS "Salary"
  , e.commission_pct AS "Comission %"
  , 'works as ' || j.job_title || ' in ' || d.department_name || ' department (manager: '
    || dm.first_name || ' ' || dm.last_name || ') and immediate supervisor: ' || m.first_name || ' ' || m.last_name
  , TO_CHAR(j.min_salary, 'L99G999D99', 'NLS_NUMERIC_CHARACTERS = ''.,'' NLS_CURRENCY = ''$''') || ' - ' ||
      TO_CHAR(j.max_salary, 'L99G999D99', 'NLS_NUMERIC_CHARACTERS = ''.,'' NLS_CURRENCY = ''$''') AS "Current Salary"
  , l.street_address || ', ' || l.postal_code || ', ' || l.city || ', ' || l.state_province || ', '
    || c.country_name || ' (' || r.region_name || ')' AS "Location"
  , jh.job_id AS "History Job ID"
  , 'worked from ' || TO_CHAR(jh.start_date, 'MM/DD/YYYY') || ' to ' || TO_CHAR(jh.end_date, 'MM/DD/YYYY') ||
    ' as ' || jj.job_title || ' in ' || dd.department_name || ' department' AS "History Job Title"
  
FROM employees e
-- to get title of current job_id
  JOIN jobs j 
    ON e.job_id = j.job_id
-- to get name of current manager_id
  LEFT JOIN employees m 
    ON e.manager_id = m.employee_id
-- to get name of current department_id
  LEFT JOIN departments d 
    ON d.department_id = e.department_id
-- to get name of manager of current department
-- (not equal to current manager and can be equal to the employee itself)
  LEFT JOIN employees dm 
    ON d.manager_id = dm.employee_id
-- to get name of location
  LEFT JOIN locations l
    ON d.location_id = l.location_id
  LEFT JOIN countries c
    ON l.country_id = c.country_id
  LEFT JOIN regions r
    ON c.region_id = r.region_id
-- to get job history of employee
  LEFT JOIN job_history jh
    ON e.employee_id = jh.employee_id
-- to get title of job history job_id
  LEFT JOIN jobs jj
    ON jj.job_id = jh.job_id
-- to get namee of department from job history
  LEFT JOIN departments dd
    ON dd.department_id = jh.department_id

ORDER BY e.employee_id;
EOF,
            ],
        ];
    }
}



================================================
FILE: tests/phpunit/QueryRunnerTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Tests;

use Keboola\SynapseTrigger\Configuration\Block;
use Keboola\SynapseTrigger\Exception\UserException;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\MockObject\MockObject;
use Psr\Log\Test\TestLogger;
use PHPUnit\Framework\TestCase;
use Doctrine\DBAL;
use Keboola\SynapseTrigger\QueryFormatter;
use Keboola\SynapseTrigger\QueryRunner;

class QueryRunnerTest extends TestCase
{
    private TestLogger $logger;

    private QueryRunner $queryRunner;

    /** @var callable */
    private $onExec;

    /** @var callable */
    private $onQuery;

    protected function setUp(): void
    {
        parent::setUp();

        $queryFormatter = new QueryFormatter();
        $this->logger = new TestLogger();
        $driverConnection = $this
            ->getMockBuilder(DBAL\Driver\SQLSrv\SQLSrvConnection::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['exec', 'query'])
            ->getMock();

        // Mock connection->exec(...) calls
        $this->onExec = function (): void {
        };
        $driverConnection
            ->expects($this->any())
            ->method('exec')
            ->willReturnCallback(function (string $query) use ($queryFormatter) {
                $this->logger->debug('MOCK EXEC: ' . $queryFormatter->formatToLog($query));
                return ($this->onExec)($query);
            });

        // Mock connection->query(...) calls
        $this->onQuery = function () {
            return $this->createStatementMock();
        };
        $driverConnection
            ->expects($this->any())
            ->method('query')
            ->will($this->returnCallback(function (string $query) use ($queryFormatter) {
                $this->logger->debug('MOCK QUERY: ' . $queryFormatter->formatToLog($query));
                return ($this->onQuery)($query);
            }));

        $driverMock = $this->createMock(DBAL\Driver::class);
        $driverMock->expects($this->any())->method('connect')->willReturn($driverConnection);
        $platform = $this->getMockForAbstractClass(DBAL\Platforms\AbstractPlatform::class);
        $connection = new DBAL\Connection(['platform' => $platform], $driverMock);
        $this->queryRunner = new QueryRunner($this->logger, $connection, new QueryFormatter());
    }

    public function testIgnoreEmpty(): void
    {
        $blocks = $this->createBlocks(['', 'INSERT INTO `temp` VALUES (1,2,3);']);
        $this->queryRunner->processBlocks($blocks);
        Assert::assertSame([
            'Processing block "Block Name".',
            'Processing code "Code 1".',
            'Running query "INSERT INTO `temp` VALUES (1, 2, 3);".',
            'MOCK EXEC: INSERT INTO `temp` VALUES (1, 2, 3);',
        ], $this->getLoggedMessages());
    }

    public function testIgnoreSelect(): void
    {
        $blocks = $this->createBlocks(['  SeLeCt foo FROM bar  ', 'INSERT INTO `temp` VALUES (1,2,3);']);
        $this->queryRunner->processBlocks($blocks);
        Assert::assertSame([
            'Processing block "Block Name".',
            'Processing code "Code 1".',
            'Ignoring select query "SeLeCt foo FROM bar".',
            'Running query "INSERT INTO `temp` VALUES (1, 2, 3);".',
            'MOCK EXEC: INSERT INTO `temp` VALUES (1, 2, 3);',
        ], $this->getLoggedMessages());
    }

    public function testQueryFailed(): void
    {
        $this->onExec = function (): void {
            throw new \Exception('Some error.');
        };

        $blocks = $this->createBlocks(['INSERT INTO `temp` VALUES (1,2,3);']);
        $this->expectException(UserException::class);
        $this->expectExceptionMessage(
            'Query "INSERT INTO `temp` VALUES (1, 2, 3);" ' .
            'from block "Block Name" and code "Code 1" failed: "Some error."'
        );
        $this->queryRunner->processBlocks($blocks);
    }

    private function getLoggedMessages(): array
    {
        return array_map(fn(array $log) => $log['message'], $this->logger->records);
    }

    private function createStatementMock(array $returnValue = []): MockObject
    {
        $statementMock = $this->createMock(DBAL\Statement::class);
        $statementMock->expects($this->any())
            ->method('fetchAll')
            ->with(DBAL\FetchMode::COLUMN)
            ->will($this->returnValue($returnValue));
        return $statementMock;
    }

    private function createBlocks(array $script): array
    {
        return [new Block([
            'name' => 'Block Name',
            'codes' => [
                [
                    'name' => 'Code 1',
                    'script' => $script,
                ],
            ],
        ])];
    }
}



================================================
FILE: tests/phpunit/Tools/TestConnectionFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Tests\Tools;

use Doctrine\DBAL\Connection;
use Keboola\SynapseTrigger\Platform\ConnectionFactory;

class TestConnectionFactory
{
    public static function createConnection(int $queryTimeout = 30): Connection
    {
        $factory = new ConnectionFactory();
        return $factory->create(
            (string) getenv('SYNAPSE_SERVER'),
            (int) getenv('SYNAPSE_PORT'),
            (string) getenv('SYNAPSE_DATABASE'),
            (string) getenv('SYNAPSE_UID'),
            (string) getenv('SYNAPSE_PWD'),
            $queryTimeout,
        );
    }
}



================================================
FILE: tests/phpunit/Traits/CreateConnectionTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\SynapseTrigger\Tests\Traits;

use Doctrine\DBAL\Connection;
use Keboola\SynapseTrigger\Tests\Tools\TestConnectionFactory;

trait CreateConnectionTrait
{
    public function createConnection(int $queryTimeout = 30): Connection
    {
        return TestConnectionFactory::createConnection($queryTimeout);
    }
}


