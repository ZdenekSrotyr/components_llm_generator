Directory structure:
└── kds_consulting_team-keboola_dbt_empower/
    ├── README.md
    ├── dbt_project.yml
    ├── packages.yml
    ├── .user.yml
    ├── analyses/
    │   └── .gitkeep
    ├── macros/
    │   └── .gitkeep
    ├── models/
    │   ├── _sources/
    │   │   └── in.c-keboola-ex-storage-35723326.yml
    │   ├── marts/
    │   │   ├── customers.sql
    │   │   ├── orders.sql
    │   │   └── schema.yml
    │   └── staging/
    │       ├── schema.yml
    │       ├── stg_customers.sql
    │       ├── stg_order_items.sql
    │       ├── stg_orders.sql
    │       ├── stg_payments.sql
    │       ├── stg_products.sql
    │       ├── stg_reviews.sql
    │       └── stg_sellers.sql
    ├── seeds/
    │   └── .gitkeep
    ├── snapshots/
    │   └── .gitkeep
    └── tests/
        ├── assert_payment_amount_is_positive.sql
        └── .gitkeep

================================================
FILE: README.md
================================================
Welcome to Keboola dbt workshop project!

## :white_check_mark: Prerequisites:  
This workshop assumes that you are familiar with the Keboola platform. You would need the following. 
1. Have your Keboola project ready with dbt enabled.
2. Install locally [Keboola CLI](https://developers.keboola.com/cli/installation/)
3. dbt installed locally [dbt docs](https://docs.getdbt.com/docs/get-started/installation)
4. A git repo with dbt project [use this repository](https://bitbucket.org/kds_consulting_team/keboola_dbt_empower)


## dbt in Keboola CLI :
1. Open terminal in editor of your choice 
2. To check your kbc version out run: `kbc --version`
3. Run `kbc dbt init` .This should provide you necessary local setup. You will be asked to provide:
   - Project URL (Most likely *https://connection.north-europe.azure.keboola.com/*)
   - [Storage token](https://help.keboola.com/management/project/tokens/#refreshing-token)
   - Git repo, please see further
4. When you are prompted to provide repository, please use the current one, i.e. either [this repository](https://bitbucket.org/kds_consulting_team/keboola_dbt_empower) or your own if you cloned this repo.
5. Make sure you have your datasets ready in Keboola. Workshop participants should have Data Catalog shared, just [plug it in](https://help.keboola.com/catalog/#link-a-bucket). Please note we are using those two sources of the data:
   - https://www.kaggle.com/datasets/olistbr/marketing-funnel-olist
   - https://www.kaggle.com/datasets/olistbr/brazilian-ecommerce
6. Once the workspace is created, make sure to store connection strings as environmental variables.
7. Try to run dbt debug locally by executiong this command: `dbt debug -t keboola_dbt_olist --profiles-dir .`
8. If all goes well, execute run command against Keboola storage: `dbt run -t keboola_dbt_olist --profiles-dir .`
9. Good job, we will now additionally explore documentation & tests.


### Resources:
- Check how to start in [Keboola dbt documentation](https://help.keboola.com/transformations/dbt/)
- Learn more about dbt [in the docs](https://docs.getdbt.com/docs/introduction)
- Join the [chat](https://community.getdbt.com/) on Slack for live discussions and support



================================================
FILE: dbt_project.yml
================================================

# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'keboola_dbt_olist'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'keboola_dbt_olist'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  keboola_dbt_olist:
    staging:
      +materialized: view


================================================
FILE: packages.yml
================================================
packages:
  - package: dbt-labs/dbt_utils
    version: 0.9.6

  - package: calogica/dbt_expectations
    version: 0.8.2



================================================
FILE: .user.yml
================================================
id: 01b5e33f-670e-4982-949d-b51b1bd44bb5



================================================
FILE: analyses/.gitkeep
================================================
[Empty file]


================================================
FILE: macros/.gitkeep
================================================
[Empty file]


================================================
FILE: models/_sources/in.c-keboola-ex-storage-35723326.yml
================================================
version: 2
sources:
    - name: in.c-keboola-ex-storage-35723326
      freshness:
        warn_after:
            count: 1
            period: day
#      database: '{{ env_var("DBT_KBC_KEBOOLA_DBT_OLIST_TEST_DATABASE") }}'
      schema: in.c-keboola-ex-storage-35723326
      loaded_at_field: '"_timestamp"'
      tables:
        - name: olist_closed_deals_dataset
          quoting:
            database: true
            schema: true
            identifier: true
          columns:
            - name: '"mql_id"'
              tests:
                - unique
                - not_null
        - name: olist_customers_dataset
          quoting:
            database: true
            schema: true
            identifier: true
          columns:
            - name: '"customer_id"'
              tests:
                - unique
                - not_null
        - name: olist_geolocation_dataset
          quoting:
            database: true
            schema: true
            identifier: true
          columns:
            - name: '"geolocation_zip_code_prefix"'
              tests:
                - unique
                - not_null
        - name: olist_marketing_qualified_leads_dataset
          quoting:
            database: true
            schema: true
            identifier: true
          columns:
            - name: '"mql_id"'
              tests:
                - unique
                - not_null
        - name: olist_orders_dataset
          quoting:
            database: true
            schema: true
            identifier: true
          columns:
            - name: '"order_id"'
              tests:
                - unique
                - not_null
        - name: olist_order_items_dataset
          quoting:
            database: true
            schema: true
            identifier: true
          columns:
            - name: '"order_id"'
              tests:
                - not_null
            - name: '"order_item_id"'
              tests:
                - not_null
            - name: '"product_id"'
              tests:
                - not_null
            - name: '"seller_id"'
              tests:
                - not_null
        - name: olist_order_payments_dataset
          quoting:
            database: true
            schema: true
            identifier: true
          columns:
            - name: '"order_id"'
              tests:
                - unique
                - not_null
        - name: olist_order_reviews_dataset
          quoting:
            database: true
            schema: true
            identifier: true
          columns:
            - name: '"review_id"'
              tests:
                - unique
                - not_null
        - name: olist_products_dataset
          quoting:
            database: true
            schema: true
            identifier: true
          columns:
            - name: '"product_id"'
              tests:
                - unique
                - not_null
        - name: olist_sellers_dataset
          quoting:
            database: true
            schema: true
            identifier: true
          columns:
            - name: '"seller_id"'
              tests:
                - unique
                - not_null
        - name: product_category_name_translation
          quoting:
            database: true
            schema: true
            identifier: true
          columns:
            - name: '"product_category_name"'
              tests:
                - unique
                - not_null



================================================
FILE: models/marts/customers.sql
================================================
{{ config(
    materialized="table"
) }}

with customers as (
    select * from {{ ref('stg_customers') }}
),

orders as (
    select * from {{ ref('stg_orders') }}
),

payments as (
    select * from {{ ref('stg_payments') }}
),


customers_orders_payments as (
    select
        distinct(customers.customer_fk) as customer_id
        ,customers.customer_uiid
        ,count(orders.order_pk)::integer as number_of_orders
        ,min(orders.order_purchase_date)::timestamp as first_order
        ,max(orders.order_purchase_date)::timestamp as recent_order
        ,sum(payments.payment_value)::decimal(15,2) as customer_lifetime_value
    from orders
    left join customers on orders.customer_fk = customers.customer_fk
    left join payments on orders.order_pk = payments.order_fk
    group by 1, 2

),

final as (
    select
        distinct(customer_uiid) AS customer_uiid
        ,SUM(customers_orders_payments.number_of_orders) AS number_of_orders
        ,min(customers_orders_payments.first_order) AS first_order
        ,MAX(customers_orders_payments.recent_order) AS recent_order
        ,SUM(customers_orders_payments.customer_lifetime_value) AS customer_lifetime_value
    from
        customers_orders_payments
    GROUP BY 1
)

select * from final




================================================
FILE: models/marts/orders.sql
================================================
{{ config(
    materialized="table"
) }}


with 

orders as  (
    select * from {{ ref('stg_orders' )}}
),

customers as (
    select * from {{ref('stg_customers')}}
),

order_payments as (
    select * from {{ ref('stg_payments') }}
),

order_reviews as (
    select * from {{ref('stg_reviews')}}
),

orders_and_payments as (
    select
        *
    from
        orders
    left join order_payments on orders.order_pk = order_payments.order_fk

),

orders_and_locations as (
    select 
        orders_and_payments.*
        ,customers.customer_uiid
        ,customers.customer_city
    from
        orders_and_payments
    left join customers on customers.customer_fk = orders_and_payments.customer_fk
),
final as (

    select 
         order_pk as order_id
        ,customer_uiid
        ,order_status
        ,order_purchase_date
        ,order_approved_date
        ,order_delivered_carrier_date
        ,order_delivered_customer_date
        ,order_estimated_delivery_date
        ,est_delivery_delay
        ,numb_payment_methods
        ,payment_type
        ,payment_installments
        ,payment_value
        ,customer_city as delivery_city
    from
        orders_and_locations
)
select * from final


================================================
FILE: models/marts/schema.yml
================================================
version: 2

models:
    - name: customers
      description: "List of customers."
      columns:
          - name: customer_uiid
            description: "The primary key for this table"
            tests:
                - unique
                - not_null
    - name: sellers
      description: "List of sellers."
      columns:
          - name: seller_id
            description: "The primary key for this table"
            tests:
                - unique
                - not_null
    - name : orders
      description : "List of orders."
      columns : 
          - name : order_id
            description : "The primary key for this table"
            tests : 
                - unique
                - not_null
          - name : customer_uiid
            description : "The foreign key link to customer table"
            tests : 
                - relationships:
                    to: ref('customers')
                    field: customer_uiid


================================================
FILE: models/staging/schema.yml
================================================
version: 2

models:
    - name: stg_products
      description: "This dataset includes data about the products sold by Olist"
      columns:
          - name: product_pk
            description: "unique product identifier"
            tests:
                - unique
                - not_null
          - name: product_category_name
            description: "root category of product, in Portuguese"
          - name : product_name_lenght
            description: "number of characters extracted from the product name"
          - name : product_description_lenght
            description: "number of characters extracted from the product description"
          - name : product_photos_qty
            description : "number of product published photos"
          - name : product_weight_g
            description : "product weight measured in grams"
          - name : product_length_cm
            description : "product length measured in centimeters"
          - name : product_height_cm
            description : "product height measured in centimeters"
          - name : product_width_cm
            description : "product width in centimeters"

    - name: stg_orders
      description: "A table with all orders and its primary key."
      columns:
          - name: order_pk
            description: "unique identifier of the order"
            tests:
                - unique
                - not_null
          - name : customer_fk
            description : "key to the customer dataset. Each order has a unique customer_id"
            tests : 
                - not_null
          - name : order_status
            description : Reference to the order status. This is simplified.
          - name : order_purchase_date
            description : "Shows the purchase timestamp"
          - name : order_approved_date
            description : "Shows the payment approval timestamp"
          - name : order_delivered_carrier_date
            description : "Shows the order posting timestamp. When it was handled to the logistic partner"
          - name : order_delivered_customer_date
            description : "Shows the actual order delivery date to the customer"
          - name : order_estimated_delivery_date
            description : "Shows the estimated delivery date that was informed to customer at the purchase moment"
          - name : est_delivery_delay
            description : "the difference between the estimated and actual delivery dates in days"

    - name: stg_order_items
      description: "This dataset includes data about the items purchased within each order"
      columns:
          - name: order_item_uiid
            description: "order item unique identifier. Combines order id and item id"
            tests:
                - not_null
          - name: order_fk
            description: "order unique identifier"
            tests:
                - not_null
          - name: order_item_id
            description: "sequential number identifying number of items included in the same order"
            tests:
                - not_null
          - name: product_fk
            description: "product unique identifier"
            tests:
                - not_null
          - name: seller_fk
            description: "seller unique identifier"
            tests:
                - not_null
          - name : shipping_limit_date
            description : "Shows the seller shipping limit date for handling the order over to the logistic partner"
          - name : price
            description : "item price"
          - name : freight_value
            description  : "item freight value item (if an order has more than one item the freight value is splitted between items)"

    - name : stg_payments
      description: "This dataset includes data about the orders payment options"
      columns:
          - name: order_fk
            description : "unique identifier of an order"
            tests:
                - not_null
          - name: numb_payment_methods
            description : "a customer may pay an order with more than one payment method. If he does so, a sequence will be created to"
          - name : payment_type
            description : "method of payment chosen by the customer"
          - name : payment_installments
            description : "number of installments chosen by the customer"
          - name : payment_value
            description : "transaction value"

    - name : stg_customers
      description: "This dataset has information about the customer and its location. We can use it to identify unique customers in the orders dataset and to find the orders delivery location"
      columns:
          - name: customer_fk
            description: "key to the orders dataset. Each order has a unique customer_id"
            tests:
                - not_null
                - unique
          - name : customer_uiid
            description: " unique identifier of a customer."
            tests:
                - not_null
          - name : customer_city
            description: "customer city name"
          - name : customer_state
            description: "customer state"
    - name : stg_reviews
      description : "This dataset includes data about the reviews made by the customers."
      columns : 
            - name : review_pk
              description : "This is the primary key, unique review identifier"
              tests:
                - not_null
                - unique
            - name : order_fk
              description : " unique order identifier"
              tests:
                - not_null
            - name : review_score
              description : "Note ranging from 1 to 5 given by the customer on a satisfaction survey."




================================================
FILE: models/staging/stg_customers.sql
================================================
with source as (
    select *
    from {{ source('in.c-keboola-ex-storage-35723326', 'olist_customers_dataset') }}
) ,
renamed as (
    select
        "customer_id"::varchar as customer_fk
        ,"customer_unique_id"::varchar as customer_uiid
        ,"customer_city"::varchar as customer_city
        ,"customer_state"::varchar as customer_state
    from source
)
select *
from renamed


================================================
FILE: models/staging/stg_order_items.sql
================================================
with source as (
    select *
    from {{ source('in.c-keboola-ex-storage-35723326', 'olist_order_items_dataset') }}
) ,
renamed as (
    select
        md5(concat("order_id"::VARCHAR(1024),'_',"order_item_id"::VARCHAR(1024))) as order_item_uiid
        ,"order_id"::varchar as order_fk
        ,"order_item_id"::integer as order_item_id
        ,"product_id"::varchar as product_fk
        ,"seller_id"::varchar as seller_fk
        ,"shipping_limit_date"::timestamp as shipping_limit_date
        ,"price"::decimal(15,2) as price
        ,"freight_value"::decimal(15,2) as freight_value
    from source
)
select *
from renamed


================================================
FILE: models/staging/stg_orders.sql
================================================
with source as (
    select *
    from {{ source('in.c-keboola-ex-storage-35723326', 'olist_orders_dataset') }}
),
renamed as (
    select
        "order_id"::varchar as order_pk
        ,"customer_id"::varchar as customer_fk
        ,CASE 
            WHEN "order_status"='delivered' THEN 'completed'
            WHEN "order_status"='canceled' THEN 'cancelled'
            ELSE 'in_progress'
        END AS order_status
        ,try_to_timestamp("order_purchase_timestamp") as order_purchase_date
        ,try_to_timestamp("order_approved_at") as order_approved_date
        ,try_to_timestamp("order_delivered_carrier_date") as order_delivered_carrier_date
        ,try_to_timestamp("order_delivered_customer_date") as order_delivered_customer_date
        ,try_to_timestamp("order_estimated_delivery_date") as order_estimated_delivery_date
        ,datediff(
            day
            ,try_to_timestamp("order_delivered_customer_date")
            ,try_to_timestamp("order_estimated_delivery_date")
        )::integer as est_delivery_delay
    from source
)
select *
from renamed


================================================
FILE: models/staging/stg_payments.sql
================================================
with source as (
    select *
    from {{ source('in.c-keboola-ex-storage-35723326','olist_order_payments_dataset' ) }}
),
renamed as (
    select
        "order_id"::varchar as order_fk
        ,"payment_sequential"::integer as numb_payment_methods
        ,"payment_type" as payment_type
        ,"payment_installments"::integer as payment_installments
        ,"payment_value"::decimal(15,2) as payment_value
    from source
)
select *
from renamed


================================================
FILE: models/staging/stg_products.sql
================================================
with source as (
    select *
    from {{ source('in.c-keboola-ex-storage-35723326', 'olist_products_dataset') }}
),
renamed as (
    select
        "product_id" as product_pk
        ,"product_category_name" as product_category_name
        ,"product_name_lenght"::integer as product_name_lenght
        ,"product_description_lenght"::integer as product_description_lenght
        ,"product_photos_qty"::integer as product_photos_qty
        ,"product_weight_g"::integer as product_weight_g
        ,"product_length_cm"::integer as product_length_cm
        ,"product_height_cm"::integer as product_height_cm
        ,"product_width_cm"::integer as product_width_cm
    from source
)
select *
from renamed


================================================
FILE: models/staging/stg_reviews.sql
================================================
with source as (
    select *
    from {{ source('in.c-keboola-ex-storage-35723326', 'olist_order_reviews_dataset') }}
),
renamed as (
    select
        "review_id" as review_pk
        ,"order_id" as order_fk
        ,"review_score"::integer as review_score
    from source
)
select *
from renamed


================================================
FILE: models/staging/stg_sellers.sql
================================================
with source as (
    select *
    from {{ source('in.c-keboola-ex-storage-35723326', 'olist_sellers_dataset') }}
),
renamed as (
    select
        "seller_id" as seller_fk
        ,"seller_city" as seller_city
        ,"seller_state" as seller_state
    from source
)
select *
from renamed


================================================
FILE: seeds/.gitkeep
================================================
[Empty file]


================================================
FILE: snapshots/.gitkeep
================================================
[Empty file]


================================================
FILE: tests/assert_payment_amount_is_positive.sql
================================================
select 
    order_id,
    payment_value
from {{ref('orders')}}
having not(payment_value>=0)


================================================
FILE: tests/.gitkeep
================================================
[Empty file]

