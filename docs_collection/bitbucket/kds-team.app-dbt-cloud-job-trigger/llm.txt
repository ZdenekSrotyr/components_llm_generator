Directory structure:
└── kds_consulting_team-kds-team.app-dbt-cloud-job-trigger/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── bitbucket-pipelines.yml
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── .travis.yml
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── client.py
    │   ├── component.py
    │   └── mapping.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
File: README.md
================================================
  
=============  

# DBT Cloud Job Trigger

**Table of contents:**

[TOC]

Functionality notes
===================  
Triggers dbt Cloud job. Optionally, saves job info at trigger time and after the job is done.

Next, saves response from https://docs.getdbt.com/dbt-cloud/api-v2#tag/Jobs/operation/triggerRun into table *
*dbt_cloud_trigger**.

If the parameter "wait_for_result" is set to true, waits for the job to complete for the maximum time set via
parameter "max_wait_time" then stores result of https://docs.getdbt.com/dbt-cloud/api-v2#tag/Runs/operation/getRunById
into table **dbt_cloud_run** and stores all available artifacts.

Prerequisites
=============  

**API key:** API Key string, How to get one is
explained <a href='https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html'>here</a>"

Supported endpoints
===================  

If you need more endpoints, please submit your request to  
[ideas.keboola.com](https://ideas.keboola.com/)

Configuration
=============  

##extractor configuration

- Account ID (account_id) - [REQ] Numeric ID of the account
- Job ID (job_id) - [REQ] Numeric ID of the job
- API Key (#api_key) - [REQ] API Key string, How to get one is
  explained <a href='https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html'>here</a>
- Cause (cause) - [REQ] String identifier which will be sent along with job trigger request.
- Wait for result (wait_for_result) - [REQ] Set to true if you want the component to wait until defined job finishes and
  then store artifacts.
- Max wait time (max_wait_time) - [OPT] Max time to wait. Used only when parameter Wait for result is set to true.
- Don't store artifacts - [OPT] Select this if you want the component to ignore artifacts.

Sample Configuration
=============  

```json  
{
    "parameters": {
        "account_id": 949,
        "job_id": 121341,
        "#api_key": "SECRET_VALUE",
        "cause": "Job triggered from Keboola",
        "wait_for_result": true,
        "ignore_artifacts": false
    },
    "action": "run"
}  
```  

Output
======  


**Tables:**

in.c-dbt-cloud-job-trigger-{config_id}.dbt_cloud_trigger

in.c-dbt-cloud-job-trigger-{config_id}.dbt_cloud_run

**Artifacts:**

Saves all artifacts from https://docs.getdbt.com/dbt-cloud/api-v2#tag/Runs/operation/getArtifactsByRunId into Keboola
storage.

Development
====== 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in  
the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
 volumes: - ./:/code - ./CUSTOM_FOLDER:/data~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
  
Clone this repository, init the workspace and run the component with following command:  
  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

docker-compose build  
docker-compose run --rm dev

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
  
Run the test suite and lint check using this command:  
  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

docker-compose run --rm test

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
  
Integration  
===========  
  
For information about deployment and integration with KBC, please refer to the  
[deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)

================================================
File: Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
keboola.component==1.3.5
mock
freezegun
requests
backoff==2.2.1

================================================
File: .travis.yml
================================================
sudo: false

services:
  - docker

jobs:
  include:
    - stage: tests
      script:
        - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
        - docker run $APP_IMAGE python -m unittest discover
      # push test image to ECR - uncomment for testing before deployment
      #  - docker pull quay.io/keboola/developer-portal-cli-v2:latest
      #  - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
      #  - docker tag $APP_IMAGE:latest $REPOSITORY:test
      #  - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
      #  - docker push $REPOSITORY:test
      #  - docker pull quay.io/keboola/syrup-cli:latest
    - stage: deploy_dev_portal
      if: branch = master
      script: "./scripts/update_dev_portal_properties.sh"

before_script:
  - export APP_IMAGE=keboola-component
  - docker -v
  - docker build -t $APP_IMAGE .
  - chmod +x ./scripts/update_dev_portal_properties.sh
  - chmod +x ./deploy.sh

after_success:
  - docker images

deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh
  on:
    tags: true
    branch: master


================================================
File: component_config/component_long_description.md
================================================
Requirements:

 - API key
 - Account ID
 - Job ID

Optional:

 - DBT Cloud URL

#### Output

Tables (data is going to be imported incrementally):  
 - in.c-dbt-cloud-job-trigger-{config_id}.dbt_cloud_trigger - response from [api-v2#tag/Jobs/operation/triggerRun](https://docs.getdbt.com/dbt-cloud/api-v2#tag/Jobs/operation/triggerRun)
 - in.c-dbt-cloud-job-trigger-{config_id}.dbt_cloud_run - response from [api-v2#tag/Runs/operation/getRunById](https://docs.getdbt.com/dbt-cloud/api-v2#tag/Runs/operation/getRunById)

Artifacts:  

Saves all artifacts from https://docs.getdbt.com/dbt-cloud/api-v2#tag/Runs/operation/getArtifactsByRunId into Keboola storage.


================================================
File: component_config/component_short_description.md
================================================
dbt is a data transformation tool that enables data analysts and engineers to transform, test and document data in the cloud data warehouse.

================================================
File: component_config/configRowSchema.json
================================================
{}

================================================
File: component_config/configSchema.json
================================================
{
    "type": "object",
    "title": "extractor configuration",
    "required": [
        "account_id",
        "job_id",
        "#api_key",
        "cause",
        "wait_for_result"
    ],
    "properties": {
        "cause": {
            "type": "string",
            "title": "Cause",
            "default": "Triggered from Keboola",
            "description": "String identifier which will be sent along with job trigger request.",
            "propertyOrder": 4
        },
        "job_id": {
            "type": "integer",
            "title": "Job ID",
            "description": "Numeric ID of the job",
            "propertyOrder": 2
        },
        "#api_key": {
            "type": "string",
            "title": "API Key",
            "format": "password",
            "description": "API Key string, How to get one is explained <a href='https://docs.getdbt.com/docs/dbt-cloud/dbt-cloud-api/user-tokens'>here</a>",
            "propertyOrder": 3
        },
        "account_id": {
            "type": "integer",
            "title": "Account ID",
            "description": "Numeric ID of the account",
            "propertyOrder": 1
        },
        "dbt_cloud_url": {
            "type": "string",
            "title": "DBT Cloud URL",
            "default": "https://cloud.getdbt.com",
            "description": "Optional - default is https://cloud.getdbt.com, more information about Dbt URLs <a href='https://docs.getdbt.com/docs/cloud/about-cloud/access-regions-ip-addresses'>here</a>",
            "propertyOrder": 5
        },
        "max_wait_time": {
            "type": "integer",
            "title": "Max wait time",
            "default": 60,
            "options": {
                "dependencies": {
                    "wait_for_result": true
                }
            },
            "description": "Max time to wait. Used only when parameter Wait for result is set to true.",
            "propertyOrder": 7
        },
        "wait_for_result": {
            "type": "boolean",
            "format": "checkbox",
            "title": "Wait for result",
            "description": "Select this if you want the component to wait until defined job finishes and then store artifacts.",
            "propertyOrder": 6
        },
        "ignore_artifacts": {
            "type": "boolean",
            "format": "checkbox",
            "default": false,
            "title": "Don't store artifacts",
            "description": "Select this if you want the component to ignore artifacts.",
            "propertyOrder": 6
        }
    }
}

================================================
File: component_config/configuration_description.md
================================================
Triggers dbt Cloud job. Optionally, saves job info at trigger time and after the job is done.  

Next, saves response from https://docs.getdbt.com/dbt-cloud/api-v2#tag/Jobs/operation/triggerRun into table **dbt_cloud_trigger**.

If the parameter "wait_for_result" is set to true, waits for the job to complete for the maximum time set via parameter "max_wait_time" then stores result of https://docs.getdbt.com/dbt-cloud/api-v2#tag/Runs/operation/getRunById into table **dbt_cloud_run** and stores all available artifacts.


================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: src/client.py
================================================
import backoff
import requests
import os
from pathlib import Path
import logging

from requests.exceptions import HTTPError
from keboola.component.exceptions import UserException


class DbtClient:

    def __init__(self, account_id, job_id, api_key, base_url):
        self.account_id = account_id
        self.job_id = job_id
        self.api_key = api_key
        self.base_url = base_url

        self.auth_headers = {'Authorization': f"Token {api_key}"}

    def fetch_artifact(self, job_run_id: int, artifact: str) -> None:
        """
        Gets available artifacts and stores them in temp folder.
        Args:
            artifact: Path to artifact
            job_run_id: Job run ID
        """
        res = requests.get(
            url=f"{self.base_url}/api/v2/accounts/{self.account_id}/runs/{job_run_id}/artifacts/{artifact}",
            headers=self.auth_headers
        )
        if res.status_code == 200:
            self.store_artifact(artifact, res.text)
            logging.info(f"Stored artifact: {artifact}")
        else:
            logging.warning(f"Cannot save {artifact}: {res.text}")

    @staticmethod
    def store_artifact(artifact: str, file: str) -> None:
        """
        Stores file in data/temp folder
        Args:
            artifact: filename
            file: string content to be stored
        """
        cwd = Path(os.getcwd())
        root_dir = cwd.parent.absolute()
        temp_dir = os.path.join(root_dir, "data", "artifacts", "out", "current")

        full_path = Path(os.path.join(temp_dir, artifact))
        parent_dir = full_path.parent.absolute()
        if not os.path.exists(parent_dir):
            os.makedirs(parent_dir)

        with open(full_path, "w") as f:
            f.write(file)

    def trigger_job(self, cause: str) -> dict:
        """
        Triggers the dbt job.
        Returns dictionary with data field from response.

        Args:
            cause: String identifier which will be sent along with job trigger request.
        """
        res = requests.post(
            url=f"{self.base_url}/api/v2/accounts/{self.account_id}/jobs/{self.job_id}/run/",
            headers=self.auth_headers,
            json={
                # Optionally pass a description that can be viewed within the dbt Cloud API.
                # See the API docs for additional parameters that can be passed in,
                # including `schema_override`
                'cause': cause,
            }
        )

        try:
            res.raise_for_status()
        except HTTPError:
            if res.json()["status"]["user_message"] == "Invalid token.":
                raise UserException("""Invalid API key has been set, job could not be triggered. Make sure your API
                key is valid and re-enter it into the component configuration.""")
            raise UserException(f"Encountered Error when triggering job: {res.text}")

        response_payload = res.json()
        return response_payload['data']

    @backoff.on_exception(backoff.expo, HTTPError, max_tries=3, factor=2)
    def get_job_run_status(self, job_run_id: int, get_steps=False) -> dict:
        """
        Fetches Dictionary with job status.
        Args:
            job_run_id: Job run ID
            get_steps: if set to True, gets additional job run data
        """
        res = requests.get(
            url=f"{self.base_url}/api/v2/accounts/{self.account_id}/runs/{job_run_id}/",
            headers=self.auth_headers,
            params='include_related=["run_steps", "job"]' if get_steps else ""
        )

        res.raise_for_status()

        return res.json()

    @backoff.on_exception(backoff.expo, HTTPError, max_tries=3, factor=2)
    def list_available_artifacts(self, job_run_id: int) -> list:
        res = requests.get(
            url=f"{self.base_url}/api/v2/accounts/{self.account_id}/runs/{job_run_id}/artifacts/",
            headers={'Authorization': f"Token {self.api_key}"},
        )

        res.raise_for_status()

        return res.json().get("data")


================================================
File: src/component.py
================================================
"""
Template Component main class.
inspired by:
https://discourse.getdbt.com/t/triggering-a-dbt-cloud-job-in-your-automated-workflow-with-python/2573
"""
import csv
import logging
import os
import time
import enum
from requests.exceptions import HTTPError
from pathlib import Path

from keboola.component.base import ComponentBase
from mapping import assign_status_data, assign_trigger_data
from client import DbtClient

from keboola.component.exceptions import UserException

KEY_IGNORE_ARTIFACTS = "ignore_artifacts"

# configuration variables
ACCOUNT_ID = "account_id"
JOB_ID = "job_id"
API_KEY = "#api_key"
CAUSE = "cause"
WAIT_FOR_RESULT = "wait_for_result"
MAX_WAIT_TIME = "max_wait_time"
BASE_URL = "dbt_cloud_url"

DEFAULT_BASE_URL = "https://cloud.getdbt.com"

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [ACCOUNT_ID, JOB_ID, API_KEY, CAUSE, WAIT_FOR_RESULT]
REQUIRED_IMAGE_PARS = []


# These are documented on the dbt Cloud API docs
class DbtJobRunStatus(enum.IntEnum):
    QUEUED = 1
    STARTING = 2
    RUNNING = 3
    SUCCESS = 10
    ERROR = 20
    CANCELLED = 30


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()

        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        params = self.configuration.parameters
        self.output_bucket = self.get_bucket_name()

        self.account_id = params.get(ACCOUNT_ID)
        self.job_id = params.get(JOB_ID)
        self.api_key = params.get(API_KEY)
        base_url = params.get(BASE_URL)
        self.base_url = self.check_base_url(base_url) if base_url else DEFAULT_BASE_URL
        if self.api_key == "":
            raise UserException("API key cannot be empty.")
        self.cause = params.get(CAUSE)
        if wait_for_result := params.get(WAIT_FOR_RESULT):
            try:
                self.max_wait_time = params.get(MAX_WAIT_TIME * 60)
            except TypeError:
                self.max_wait_time = None
        self.wait_for_result = wait_for_result
        self.ignore_artifacts = params.get(KEY_IGNORE_ARTIFACTS, False)

        cwd = Path(os.getcwd())
        root_dir = cwd.parent.absolute()
        self.artifacts_dir = os.path.join(root_dir, "data", "artifacts", "out", "current")
        self.data_dir = (os.path.join(root_dir, "data"))

    def run(self):
        """
        Main execution code
        """

        client = DbtClient(account_id=self.account_id,
                           job_id=self.job_id,
                           api_key=self.api_key,
                           base_url=self.base_url
                           )

        job_run_data = client.trigger_job(cause=self.cause)
        job_run_id = job_run_data['id']
        job_run_url = job_run_data['href']
        logging.warning(f'Run triggered: {job_run_url}')

        trigger_data = assign_trigger_data(job_run_data)
        self.save_dict_to_csv(trigger_data, "dbt_cloud_trigger")

        if self.wait_for_result:
            start_time = time.time()
            while True:
                time.sleep(10)

                try:
                    data = self._get_job_run_status(client, job_run_id, get_steps=True)['data']
                except HTTPError as e:
                    raise UserException(f"Encountered Error when getting job status: {e}") from e

                status = data['status']
                logging.info(f"Job status = {DbtJobRunStatus(status).name}")

                if status == DbtJobRunStatus.SUCCESS:
                    if self.ignore_artifacts:
                        logging.info("Skipping storing of artifacts.")
                        break
                    for artifact in self._list_available_artifacts(client, job_run_id):
                        client.fetch_artifact(job_run_id, artifact)
                    break
                elif status == DbtJobRunStatus.ERROR:
                    raise UserException(f"Job with ID {job_run_id} has been stopped."
                                        f"Run steps: {data['run_steps']}")
                elif status == DbtJobRunStatus.CANCELLED:
                    raise UserException(f"Job with ID {job_run_id} has been canceled by user.")

                # Stop waiting if runtime is greater than MAX_WAIT_TIME (minutes)
                if self.max_wait_time:
                    if (time.time() - start_time) < self.max_wait_time:
                        raise UserException(f"Max wait time reached for Job with ID {job_run_id} - Exiting.")

        status_data = self._get_job_run_status(client, job_run_id)
        run_data = assign_status_data(status_data)
        self.save_dict_to_csv(run_data, "dbt_cloud_run")

        logging.info("Component finished successfully.")

    @staticmethod
    def check_base_url(base_url):
        # check if base url starts with https
        if not base_url.startswith(("https://", "http://")):
            base_url = f"https://{base_url}"

        return base_url.rstrip('/')

    def get_bucket_name(self) -> str:
        config_id = self.environment_variables.config_id
        if not config_id:
            config_id = "000000000"
        bucket_name = f"in.c-dbt-cloud-job-trigger-{config_id}"
        return bucket_name

    def save_dict_to_csv(self, input_dct, filename):
        table = self.create_out_table_definition(name=filename, incremental=True,
                                                 destination=f"{self.output_bucket}.{filename}")
        with open(table.full_path, mode="w", encoding="utf-8", newline="") as f:
            w = csv.DictWriter(f, input_dct.keys())
            w.writeheader()
            w.writerow(input_dct)
        self.write_manifest(table)

    @staticmethod
    def _list_available_artifacts(client, job_run_id) -> list:
        try:
            return client.list_available_artifacts(job_run_id)
        except HTTPError as e:
            raise UserException(f"Encountered Error when getting job artifacts: {e}") from e

    @staticmethod
    def _get_job_run_status(client, job_run_id: int, get_steps=False) -> dict:
        try:
            return client.get_job_run_status(job_run_id, get_steps)
        except HTTPError as e:
            raise UserException(f"Encountered Error when getting job status: {e}") from e


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: src/mapping.py
================================================
def assign_status_data(job_run_data: dict):
    data = job_run_data.get("data", {})
    return {
        "id": data.get("id"),
        "trigger_id": data.get("trigger_id"),
        "account_id": data.get("account_id"),
        "project_id": data.get("project_id"),
        "job_definition_id": data.get("job_definition_id"),
        "status": data.get("status"),
        "git_branch": data.get("git_branch"),
        "git_sha": data.get("git_sha"),
        "status_message": data.get("status_message"),
        "created_at": data.get("created_at"),
        "updated_at": data.get("updated_at"),
        "dequeued_at": data.get("dequeued_at"),
        "started_at": data.get("started_at"),
        "finished_at": data.get("finished_at"),
        "last_checked_at": data.get("last_checked_at"),
        "last_heartbeat_at": data.get("last_heartbeat_at"),
        "owner_thread_id": data.get("owner_thread_id"),
        "executed_by_thread_id": data.get("executed_by_thread_id"),
        "artifacts_saved": data.get("artifacts_saved"),
        "artifact_s3_path": data.get("artifact_s3_path"),
        "has_docs_generated": data.get("has_docs_generated"),
        "trigger": data.get("trigger"),
        "job": data.get("job"),
        "duration": data.get("duration"),
        "queued_duration": data.get("queued_duration"),
        "run_duration": data.get("run_duration"),
        "duration_humanized": data.get("duration_humanized"),
        "queued_duration_humanized": data.get("queued_duration_humanized"),
        "run_duration_humanized": data.get("run_duration_humanized"),
        "finished_at_humanized": data.get("finished_at_humanized"),
        "status_humanized": data.get("status_humanized"),
        "created_at_humanized": data.get("created_at_humanized")
    }


def assign_trigger_data(data):
    return {
        "id": data.get("id"),
        "trigger_id": data.get("trigger_id"),
        "account_id": data.get("account_id"),
        "environment_id": data.get("environment_id"),
        "project_id": data.get("project_id"),
        "job_definition_id": data.get("job_definition_id"),
        "status": data.get("status"),
        "dbt_version": data.get("dbt_version"),
        "git_branch": data.get("git_branch"),
        "git_sha": data.get("git_sha"),
        "status_message": data.get("status_message"),
        "owner_thread_id": data.get("owner_thread_id"),
        "executed_by_thread_id": data.get("executed_by_thread_id"),
        "deferring_run_id": data.get("deferring_run_id"),
        "artifacts_saved": data.get("artifacts_saved"),
        "artifact_s3_path": data.get("artifact_s3_path"),
        "has_docs_generated": data.get("has_docs_generated"),
        "has_sources_generated": data.get("has_sources_generated"),
        "notifications_sent": data.get("notifications_sent"),
        "blocked_by": data.get("blocked_by"),
        "created_at": data.get("created_at"),
        "updated_at": data.get("updated_at"),
        "dequeued_at": data.get("dequeued_at"),
        "started_at": data.get("started_at"),
        "finished_at": data.get("finished_at"),
        "last_checked_at": data.get("last_checked_at"),
        "last_heartbeat_at": data.get("last_heartbeat_at"),
        "should_start_at": data.get("should_start_at"),
        "trigger": data.get("trigger", {}),
        "job": data.get("job", {}),
        "environment": data.get("environment"),
        "run_steps": data.get("run_steps"),
        "status_humanized": data.get("status_humanized"),
        "in_progress": data.get("in_progress"),
        "is_complete": data.get("is_complete"),
        "is_success": data.get("is_success"),
        "is_error": data.get("is_error"),
        "is_cancelled": data.get("is_cancelled"),
        "duration": data.get("duration"),
        "queued_duration": data.get("queued_duration"),
        "run_duration": data.get("run_duration"),
        "duration_humanized": data.get("duration_humanized"),
        "queued_duration_humanized": data.get("queued_duration_humanized"),
        "run_duration_humanized": data.get("run_duration_humanized"),
        "created_at_humanized": data.get("created_at_humanized"),
        "finished_at_humanized": data.get("finished_at_humanized"),
        "retrying_run_id": data.get("retrying_run_id"),
        "can_retry": data.get("can_retry"),
        "retry_not_supported_reason": data.get("retry_not_supported_reason"),
        "job_id": data.get("job_id"),
        "is_running": data.get("is_running"),
        "href": data.get("href"),
        "used_repo_cache": data.get("used_repo_cache"),
        "scribe_enabled": data.get("scribe_enabled")
    }


================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


