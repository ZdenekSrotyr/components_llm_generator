Directory structure:
└── kds_consulting_team-kds-team.ex-gooddata-project/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── scripts/
    │   ├── build_n_test.sh
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── main.py
    │   └── gooddata/
    │       ├── client.py
    │       ├── component.py
    │       └── result.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
FILE: README.md
================================================
# GoodData project Extractor

The GD project extractor allows to extract project data from GD project. Currently, opnly users endpoint is supported.


================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        script:
          - export APP_IMAGE=$APP_IMAGE
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
#          - echo 'Pushing test image to repo. [tag=test]'
#          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#          - docker tag $APP_IMAGE:latest $REPOSITORY:test
#          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: change_log.md
================================================
**0.0.1**
Added users endpoint


================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.8.5-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential
RUN pip install flake8
RUN pip install -r /code/requirements.txt
WORKDIR /code/

CMD ["python3", "-u", "/code/src/main.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.9.zip#egg=kbc


================================================
FILE: component_config/component_long_description.md
================================================
# GoodData project Extractor

The GD project extractor allows to extract project data from GD project. Currently, opnly users endpoint is supported.


================================================
FILE: component_config/component_short_description.md
================================================
GoodData project data extractor


================================================
FILE: component_config/configSchema.json
================================================
{
  "title": "Parameters",
  "type": "object",
  "required": [
    "username",
    "#password",
    "projectId",
    "customDomain",
    "objects",
    "objects_details"
  ],
  "properties": {
    "username": {
      "type": "string",
      "title": "Login",
      "description": "The email address used to log in to GoodData. Must have <strong>admin</strong> privileges.",
      "propertyOrder": 100
    },
    "#password": {
      "type": "string",
      "format": "password",
      "propertyOrder": 200,
      "title": "Password",
      "description": "Password associated with the login."
    },
    "projectId": {
      "type": "string",
      "title": "Project ID",
      "description": "GoodData project ID.",
      "propertyOrder": 300
    },
    "customDomain": {
      "type": "string",
      "title": "Custom domain",
      "description": "If project is white-labeled, specify the custom domain in format <i>https://domain.gooddata.com</i>.</br>Defaults for regions: <ul><li>US, AP - <i>https://secure.gooddata.com/</i>,</li><li>EU - <i>https://keboola.eu.gooddata.com/</i>.</li>",
      "propertyOrder": 500
    },
    "objects": {
      "title": "Objects",
      "type": "object",
      "description": "Objects, which will be downloaded from the project.",
      "required": [
        "users",
        "attributes",
        "datasets",
        "facts",
        "folders",
        "metrics",
        "projectdashboards",
        "reports",
        "tables",
        "usergroups"
      ],
      "properties": {
        "users": {
          "title": "Get Users",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 100
        },
        "attributes": {
          "title": "Get Attributes",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 200
        },
        "datasets": {
          "title": "Get Datasets",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 300
        },
        "facts": {
          "title": "Get Facts",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 400
        },
        "folders": {
          "title": "Get Folders",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 500
        },
        "metrics": {
          "title": "Get Metrics",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 600
        },
        "projectdashboards": {
          "title": "Get Project Dashboards",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 700
        },
        "reports": {
          "title": "Get Reports",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 800
        },
        "tables": {
          "title": "Get Tables",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 900
        },
        "usergroups": {
          "title": "Get User Groups and Members",
          "description": "Downloads information about project user groups and members.",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 1000
        }
      }
    },
    "objects_details": {
      "title": "Objects details",
      "type": "object",
      "description": "Objects, for which detailed metadata will be downloaded. In order for detailed metadata to be downloaded, the object needs to be enabled in the section above as well.</br>E.g. if you'd like to download details about project dashboards, you need to enabled option \"Get Project Dashboards\" in both <i>Objects</i> and <i>Objects Details</i> sections.",
      "required": [
        "attributes",
        "datasets",
        "facts",
        "folders",
        "metrics",
        "projectdashboards",
        "tables",
        "reports"
      ],
      "properties": {
        "attributes": {
          "title": "Get Attributes",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 200
        },
        "datasets": {
          "title": "Get Datasets",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 300
        },
        "facts": {
          "title": "Get Facts",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 400
        },
        "folders": {
          "title": "Get Folders",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 500
        },
        "metrics": {
          "title": "Get Metrics",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 600
        },
        "projectdashboards": {
          "title": "Get Project Dashboards",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 700
        },
        "reports": {
          "title": "Get Reports",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 800
        },
        "tables": {
          "title": "Get Tables",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 900
        }
      }
    }
  }
}


================================================
FILE: component_config/configuration_description.md
================================================
The component accepts following parameters:

- login - login to GoodData, must have admin privileges,
- password - password associated with login,
- project ID - GoodData project ID,
- custom domain (opt.) - if whitelabelled domain is used, specify it.


================================================
FILE: component_config/stack_parameters.json
================================================
{
    "connection.keboola.com": {
      "gooddataUrl": "https://secure.gooddata.com"
    },
    "connection.eu-central-1.keboola.com": {
      "gooddataUrl": "https://keboola.eu.gooddata.com"
    },
    "connection.ap-southeast-2.keboola.com": {
      "gooddataUrl": "https://secure.gooddata.com"
    }
  }


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "objects": {
      "metrics": true,
      "folders": false,
      "tables": false,
      "facts": false,
      "users": false,
      "attributes": false,
      "projectdashboards": false,
      "datasets": false,
      "usergroups": false,
      "reports": true
    },
    "username": "<email>",
    "#password": "<password>",
    "projectId": "<pid>",
    "customDomain": "<custom_domain>",
    "objects_details": {
      "facts": false,
      "tables": false,
      "folders": false,
      "metrics": true,
      "datasets": false,
      "attributes": false,
      "projectdashboards": false,
      "reports": true
    }
  },
  "image_parameters": {
    "gooddataUrl": "https://keboola.eu.gooddata.com"
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi


================================================
FILE: src/main.py
================================================
import sys
from gooddata.component import GoodDataProjectComponent

# Environment setup
sys.tracebacklimit = 3

if __name__ == '__main__':

    c = GoodDataProjectComponent()
    c.run()



================================================
FILE: src/gooddata/client.py
================================================
import json
import logging
import sys
import requests
from kbc.client_base import HttpClientBase
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from urllib.parse import urljoin


class GoodDataProjectClient(HttpClientBase):

    def __init__(self, username, password, project_id, gooddata_url):

        self.param_username = username
        self.param_password = password
        self.param_pid = project_id
        self.param_gooddata_url = gooddata_url

        _def_header = {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }

        HttpClientBase.__init__(self, base_url=self.param_gooddata_url, max_retries=10,
                                default_http_header=_def_header)

        self._getSstToken()
        self._auth_header['X-GDC-AuthTT'] = self._getTtToken()

    def _getSstToken(self):

        body_sst = json.dumps({
            "postUserLogin": {
                "login": self.param_username,
                "password": self.param_password,
                "remember": 1,
                "verify_level": 2
            }
        })

        url_sst = urljoin(self.base_url, '/gdc/account/login')

        rsp_sst = self.post_raw(url=url_sst, data=body_sst)
        sc_sst, js_sst = rsp_sst.status_code, rsp_sst.json()

        if sc_sst == 200:
            self.varSstToken = js_sst['userLogin']['token']
            logging.info("SST token obtained.")

        else:
            logging.error("Could not obtain SST token.")
            logging.error("Received: %s - %s." % (sc_sst, js_sst))
            sys.exit(1)

    def _getTtToken(self):

        url_tt = urljoin(self.base_url, '/gdc/account/token')
        hdr_tt = {'X-GDC-AuthSST': self.varSstToken}

        rsp_tt = self.get_raw(url=url_tt, headers=hdr_tt)
        sc_tt, js_tt = rsp_tt.status_code, rsp_tt.json()

        if sc_tt == 200:
            self.varTtToken = js_tt['userToken']['token']
            return self.varTtToken

        else:
            logging.error("There was an error, when obtaining TT token.")
            logging.error("Received: %s - %s" % (sc_tt, js_tt))
            sys.exit(2)

    def __response_hook(self, res, *args, **kwargs):
        if res.status_code == 401:
            token = self._getTtToken()
            self._auth_header = {"X-GDC-AuthTT": token,
                                 "Accept": "application/json",
                                 "Content-Type": "application/json"}

            res.request.headers['X-GDC-AuthTT'] = token
            s = requests.Session()
            return self.requests_retry_session(session=s).send(res.request)

    def requests_retry_session(self, session=None):

        session = session or requests.Session()
        retry = Retry(
            total=self.max_retries,
            read=self.max_retries,
            connect=self.max_retries,
            backoff_factor=self.backoff_factor,
            status_forcelist=self.status_forcelist,
            method_whitelist=('GET', 'POST', 'PATCH', 'UPDATE', 'DELETE')
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        # append response hook
        session.hooks['response'].append(self.__response_hook)
        return session

    def getAllUsers(self):

        url_users = urljoin(self.param_gooddata_url, f'gdc/projects/{self.param_pid}/users')
        rsp_users = self.get_raw(url_users)
        sc_users, js_users = rsp_users.status_code, rsp_users.json()

        if sc_users == 200:
            return js_users['users']

        else:
            logging.error(f"Could not obtain users. Received: {sc_users} - {js_users}.")
            sys.exit(1)

    def queryObjects(self, object_type):

        url_query = urljoin(self.param_gooddata_url, f'gdc/md/{self.param_pid}/query/{object_type}')
        rsp_query = self.get_raw(url=url_query)
        sc_query, js_query = rsp_query.status_code, rsp_query.json()

        if sc_query == 200:
            return js_query['query']['entries']

        else:
            logging.error(f"Could not query object type {object_type}. Received: {sc_query} - {js_query}.")
            sys.exit(1)

    def getObjectDetail(self, object_url):

        url_object = urljoin(self.param_gooddata_url, object_url)
        rsp_object = self.get_raw(url=url_object)
        sc_object, js_object = rsp_object.status_code, rsp_object.json()

        if sc_object == 200:
            return js_object

        else:
            logging.error(f"Could not download details for object {object_url}. Received: {sc_object} - {js_object}.")
            sys.exit(1)

    def getUserGroups(self, project_id):

        usergroups = []
        is_complete = False
        offset = 0
        limit = 1000

        url_usergroups = urljoin(self.base_url, 'gdc/userGroups')

        while is_complete is False:
            par_usergroups = {'project': project_id, 'limit': limit, 'offset': offset}
            rsp_object = self.get_raw(url=url_usergroups, params=par_usergroups)

            sc_usergroups, js_usergroups = rsp_object.status_code, rsp_object.json()

            if sc_usergroups == 200:
                _items = js_usergroups['userGroups']['items']
                usergroups += _items

                if len(_items) < limit:
                    is_complete = True
                else:
                    offset += limit

            else:
                logging.error(f"Could not download user groups. Received: {sc_usergroups} - {js_usergroups}.")
                sys.exit(1)

        return usergroups

    def getUserGroupMembers(self, usergroup_id):

        members = []
        limit = 1000
        offset = 0
        is_complete = False

        url_members = urljoin(self.base_url, f'gdc/userGroups/{usergroup_id}/members')

        while is_complete is False:
            par_members = {'limit': limit, 'offset': offset}
            rsp_members = self.get_raw(url=url_members, params=par_members)

            sc_members, js_members = rsp_members.status_code, rsp_members.json()

            if sc_members == 200:
                _items = js_members['userGroupMembers']['items']
                members += _items

                if len(_items) < limit:
                    is_complete = True

                else:
                    offset += limit

            else:
                logging.error(f"Could not download user group members. Received: {sc_members} - {js_members}.")
                sys.exit(1)

        return members



================================================
FILE: src/gooddata/component.py
================================================
# import csv
# import json
import logging
# import os
import re
import sys
from gooddata.client import GoodDataProjectClient
from gooddata.result import GoodDataWriter
from kbc.env_handler import KBCEnvHandler


KEY_USERNAME = 'username'
KEY_PASSWORD = '#password'
KEY_PROJECTID = 'projectId'
KEY_CUSTOMDOMAIN = 'customDomain'
KEY_OBJECTS = 'objects'
KEY_OBJECTS_DETAILS = 'objects_details'
KEY_GDURL = 'gooddataUrl'
KEY_DEBUG = 'debug'

MANDATORY_PARAMETERS = [KEY_USERNAME, KEY_PASSWORD, KEY_PROJECTID, KEY_OBJECTS]
QUERY_OBJECTS = ["attributes", "datasets", "facts", "folders", "metrics", "projectdashboards", "tables", "reports"]

APP_VERSION = '0.2.0'


class Writers:
    pass


class GoodDataProjectComponent(KBCEnvHandler):

    def __init__(self):

        logging.info("Running component version %s..." % APP_VERSION)

        KBCEnvHandler.__init__(self, MANDATORY_PARAMETERS)
        self.validate_config(MANDATORY_PARAMETERS)

        self.param_username = self.cfg_params[KEY_USERNAME]
        self.param_password = self.cfg_params[KEY_PASSWORD]
        self.param_project_id = self.cfg_params[KEY_PROJECTID]
        self.param_objects = self.cfg_params[KEY_OBJECTS]
        self.param_objects_details = self.cfg_params.get(KEY_OBJECTS_DETAILS, {})
        self.param_custom_domain = self.cfg_params.get(KEY_CUSTOMDOMAIN, '')
        self.param_gooddata_url = self.image_params.get(KEY_GDURL, '')

        if self.cfg_params.get('debug', False) is True:
            logger = logging.getLogger()
            logger.setLevel(level='DEBUG')

        self._processAndValidateParameters()

        self.client = GoodDataProjectClient(username=self.param_username,
                                            password=self.param_password,
                                            project_id=self.param_project_id,
                                            gooddata_url=self.param_gooddata_url)

    def _processAndValidateParameters(self):

        custDomain = re.sub(r'\s', '', self.param_custom_domain)

        if custDomain != '':

            rxgString = r'https://.*\.gooddata\.com/*'
            rgxCheck = re.fullmatch(rxgString, custDomain)

            if rgxCheck is None:
                logging.error(f"{custDomain} is not a valid GoodData domain.")
                sys.exit(1)

            else:
                self.param_gooddata_url = custDomain

        elif custDomain == '' and self.param_gooddata_url == '':
            logging.error("Custom domain must be provided.")
            sys.exit(1)

        logging.info(f"Using domain {self.param_gooddata_url}.")

    def downloadAllData(self):

        for obj, value in self.param_objects.items():

            if value is False:
                continue

            logging.info(f"Downloading metadata for object type {obj}.")

            if obj == 'users':

                _wrt = GoodDataWriter(self.tables_out_path, 'users', False)
                _all_users = [x['user'] for x in self.client.getAllUsers()]
                _wrt.writerows(_all_users)

            elif obj == 'usergroups':

                _wrt = GoodDataWriter(self.tables_out_path, 'usergroups', False)
                _all_usergroups = self.client.getUserGroups(self.param_project_id)

                ug_prep = [ug['userGroup'] for ug in _all_usergroups]

                for ug in ug_prep:
                    ug['project_id'] = ug['content']['project'].split('/')[-1]
                _wrt.writerows(ug_prep)

                _ug_ids = [ug['userGroup']['content']['id'] for ug in _all_usergroups]
                _wrt_members = GoodDataWriter(self.tables_out_path, 'usergroups-members', False)

                for ug in _ug_ids:
                    _ug_members = self.client.getUserGroupMembers(ug)
                    mem_prep = [u['user'] for u in _ug_members]

                    for mem in mem_prep:
                        mem['user_id'] = mem['links']['self'].split('/')[-1]
                        mem['usergroup_id'] = ug

                    _wrt_members.writerows(mem_prep)

            elif obj in QUERY_OBJECTS:

                _wrt = GoodDataWriter(self.tables_out_path, obj, False, result_type='md')
                _all_objects = self.client.queryObjects(obj)
                _wrt.writerows(_all_objects)

                if self.param_objects_details.get(obj, False) is True:
                    logging.info(f"Downloading details for all objects of type {obj}.")

                    _wrt_detail = GoodDataWriter(self.tables_out_path, str(obj) + '_details', False, 'detail')
                    details = []

                    for md in _all_objects:
                        link = md['link']
                        idf = md['identifier']

                        if obj == 'reports':
                            _definitions = self.client.getObjectDetail(link)
                            try:
                                _latest_definition = _definitions['report']['content']['definitions'][-1]
                            except IndexError:
                                continue

                            _detail = self.client.getObjectDetail(_latest_definition)
                        else:
                            _detail = self.client.getObjectDetail(link)
                        details += [{'link': link, 'identifier': idf, 'type': obj, 'detail': _detail}]

                    _wrt_detail.writerows(details)

            else:
                pass

    def run(self):

        self.downloadAllData()



================================================
FILE: src/gooddata/result.py
================================================
import os
import csv
import json

FIELDS_METADATA = ['identifier', 'link', 'locked', 'author', 'tags', 'created', 'updated', 'deprecated', 'summary',
                   'isProduction', 'title', 'category', 'unlisted', 'contributor']
FIELDS_R_METADATA = ['identifier', 'uri', 'locked', 'author', 'tags', 'created', 'updated', 'deprecated', 'summary',
                     'is_production', 'title', 'category', 'unlisted', 'contributor']
PK_METADATA = ['identifier', 'uri']
DONOTFLATTEN_METADATA = []
FORCETYPE_METADATA = []

FIELDS_USERS = ['content_login', 'content_firstname', 'content_lastname', 'content_email',
                'content_phonenumber', 'content_userRoles', 'content_status', 'links_self',
                'meta_created', 'meta_updated']
FIELDS_R_USERS = ['login', 'firstname', 'lastname', 'email', 'phonenumber', 'userRoles', 'status',
                  'uri', 'created', 'updated']
PK_USERS = ['login']
DONOTFLATTEN_USERS = []
FORCETYPE_USERS = ['content_userRoles']

FIELDS_DETAIL = ['identifier', 'link', 'type', 'detail']
FIELDS_R_DETAIL = ['identifier', 'uri', 'type', 'detail']
PK_DETAIL = ['identifier', 'uri']
DONOTFLATTEN_DETAIL = ['detail']
FORCETYPE_DETAIL = []

FIELDS_USERGROUPS = ['content_id', 'content_name', 'content_description', 'content_domain', 'project_id',
                     'meta_created', 'meta_updated']
FIELDS_R_USERGROUPS = ['id', 'name', 'description', 'domain', 'project_id', 'created', 'updated']
PK_USERGROUPS = ['id']
DONOTFLATTEN_USERGROUPS = []
FORCETYPE_USERGROUPS = []

FIELDS_USERGROUPS_MEMBERS = ['user_id', 'usergroup_id', 'content_firstName', 'content_lastName']
FIELDS_R_USERGROUPS_MEMBERS = ['user_id', 'usergroup_id', 'firstname', 'lastname']
PK_USERGROUPS_MEMBERS = ['user_id', 'usergroup_id']
DONOTFLATTEN_USERGROUPS_MEMBERS = []
FORCETYPE_USERGROUPS_MEMBERS = []


class GoodDataWriter:

    def __init__(self, tableOutPath, tableName, incremental, result_type=None):

        self.paramPath = tableOutPath
        self.paramTableName = tableName
        self.paramTable = tableName + '.csv'
        self.paramTablePath = os.path.join(self.paramPath, self.paramTable)
        self.paramIncremental = incremental

        if result_type == 'md':
            self.paramFields = FIELDS_METADATA
            self.paramJsonFields = DONOTFLATTEN_METADATA
            self.paramPrimaryKey = PK_METADATA
            self.paramFieldsRenamed = FIELDS_R_METADATA
            self.paramForceType = FORCETYPE_METADATA

        elif result_type == 'detail':
            self.paramFields = FIELDS_DETAIL
            self.paramJsonFields = DONOTFLATTEN_DETAIL
            self.paramPrimaryKey = PK_DETAIL
            self.paramFieldsRenamed = FIELDS_R_DETAIL
            self.paramForceType = FORCETYPE_DETAIL

        else:
            self.paramFields = eval(f'FIELDS_{tableName.upper().replace("-", "_")}')
            self.paramJsonFields = eval(f'DONOTFLATTEN_{tableName.upper().replace("-", "_")}')
            self.paramPrimaryKey = eval(f'PK_{tableName.upper().replace("-", "_")}')
            self.paramFieldsRenamed = eval(f'FIELDS_R_{tableName.upper().replace("-", "_")}')
            self.paramForceType = eval(f'FORCETYPE_{tableName.upper().replace("-", "_")}')

        self.createManifest()
        self.createWriter()

    def createManifest(self):

        template = {
            'incremental': self.paramIncremental,
            'primary_key': self.paramPrimaryKey,
            'columns': self.paramFieldsRenamed
        }

        path = self.paramTablePath + '.manifest'

        with open(path, 'w') as manifest:
            json.dump(template, manifest)

    def createWriter(self):

        self.writer = csv.DictWriter(open(self.paramTablePath, 'w'), fieldnames=self.paramFields,
                                     restval='', extrasaction='ignore', quotechar='\"', quoting=csv.QUOTE_ALL)

    def writerows(self, listToWrite, parentDict=None):

        for row in listToWrite:

            row_f = self.flatten_json(x=row)

            if self.paramJsonFields != []:
                for field in self.paramJsonFields:
                    row_f[field] = json.dumps(row[field])

            _dictToWrite = {}

            for key, value in row_f.items():

                if key in self.paramFields:
                    if key in self.paramForceType:
                        _dictToWrite[key] = json.dumps(value)
                    else:
                        _dictToWrite[key] = value

                else:
                    continue

            if parentDict is not None:
                _dictToWrite = {**_dictToWrite, **parentDict}

            self.writer.writerow(_dictToWrite)

    def flatten_json(self, x, out=None, name=''):
        non_flattened = dict()
        if out is None:
            out = dict()

        if type(x) is dict:
            for a in x:
                if a in self.paramJsonFields:
                    non_flattened[a] = x[a]
                else:
                    self.flatten_json(x[a], out, name + a + '_')
        else:
            out[name[:-1]] = x

        return {**out, **non_flattened}



================================================
FILE: tests/__init__.py
================================================



================================================
FILE: tests/test_component.py
================================================


