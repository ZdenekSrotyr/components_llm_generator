Directory structure:
└── kds_consulting_team-kds-team.ex-timedoctor/
    ├── flake8.cfg
    ├── deploy.sh
    ├── docker-compose.yml
    ├── change_log.md
    ├── src/
    │   ├── main.py
    │   └── timedoctor/
    │       ├── component.py
    │       ├── client.py
    │       └── result.py
    ├── bitbucket-pipelines.yml
    ├── tests/
    │   ├── test_component.py
    │   └── __init__.py
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── configuration_description.md
    │   ├── component_short_description.md
    │   ├── stack_parameters.json
    │   ├── configSchema.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── tables/
    │       │   │   ├── test.csv
    │       │   │   └── test.csv.manifest
    │       │   └── files/
    │       │       └── order1.xml
    │       └── out/
    │           ├── state.json
    │           ├── tables/
    │           │   ├── websites-and-apps.csv
    │           │   ├── worklogs.csv
    │           │   ├── websites-and-apps-worklogs.csv
    │           │   ├── websites-and-apps-worklogs.csv.manifest
    │           │   ├── projects.csv
    │           │   ├── projects.csv.manifest
    │           │   ├── tasks.csv.manifest
    │           │   ├── worklogs.csv.manifest
    │           │   ├── users.csv
    │           │   ├── websites-and-apps.csv.manifest
    │           │   ├── companies.csv
    │           │   ├── companies.csv.manifest
    │           │   ├── users.csv.manifest
    │           │   └── tasks.csv
    │           └── files/
    │               └── order1.xml
    ├── scripts/
    │   ├── update_dev_portal_properties.sh
    │   └── build_n_test.sh
    ├── requirements.txt
    ├── Dockerfile
    ├── LICENSE.md
    └── README.md

================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /change_log.md
================================================
**0.1.1**
Added documentation and sample configuration.

**0.1.0**
Changed logging level to information.
Fixed bug with writing tables.

**0.0.2**
Changed logging to debug.
Changes traceback limit to 3.

**0.0.1**
Initial testing version of the extractor.

================================================
File: /src/main.py
================================================
import logging
import os
import sys
import logging_gelf.handlers
import logging_gelf.formatters
from timedoctor.component import TimeDoctor

# Environment setup
sys.tracebacklimit = 0

# Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)-8s - %(filename)s : [line:%(lineno)3s] %(message)s',
    datefmt="%Y-%m-%d %H:%M:%S")


if 'KBC_LOGGER_ADDR' in os.environ and 'KBC_LOGGER_PORT' in os.environ:

    logger = logging.getLogger()
    logging_gelf_handler = logging_gelf.handlers.GELFTCPSocketHandler(
        host=os.getenv('KBC_LOGGER_ADDR'),
        port=int(os.getenv('KBC_LOGGER_PORT'))
    )
    logging_gelf_handler.setFormatter(logging_gelf.formatters.GELFFormatter(null_character=True))
    logger.addHandler(logging_gelf_handler)

    # removes the initial stdout logging
    logger.removeHandler(logger.handlers[0])

APP_VERSION = '0.1.3'

if __name__ == '__main__':

    logging.info("Running app version %s..." % APP_VERSION)
    t = TimeDoctor()
    t.run()

    logging.info("Extraction finished.")


================================================
File: /src/timedoctor/component.py
================================================
import dateparser
import json
import logging
import sys
from kbc.env_handler import KBCEnvHandler
from timedoctor.client import TimeDoctorClient
from timedoctor.result import TimeDoctorWriter, TimeDoctorWriterWAA


KEY_ENDPOINTS = 'endpoints'
KEY_DATESETTINGS = 'date_settings'
KEY_INCREMENTAL = 'incremental'
MANDATORY_PARAMETERS = [KEY_ENDPOINTS]

KEY_DATESETTINGS_START = 'start_time'
KEY_DATESETTINGS_END = 'end_time'

AUTH_KEY_REFRESHTOKEN = 'refresh_token'
AUTH_KEY_CLIENTID = 'appKey'
AUTH_KEY_CLIENTSECRET = '#appSecret'

SUPPORTED_ENDPOINTS = ['projects', 'tasks', 'worklogs', 'webandapp', 'users', 'companies']


class TimeDoctor(KBCEnvHandler):

    def __init__(self):

        super().__init__(MANDATORY_PARAMETERS)

        self.validate_config(MANDATORY_PARAMETERS)

        self.paramEndpoints = self.cfg_params[KEY_ENDPOINTS]
        _date_settings = self.cfg_params.get(KEY_DATESETTINGS, {})
        self.paramStartDate = _date_settings.get(KEY_DATESETTINGS_START, '30 days ago')
        self.paramEndDate = _date_settings.get(KEY_DATESETTINGS_END, 'today')
        self.paramIncremental = self.cfg_params.get(KEY_INCREMENTAL, True)

        self._checkEndpoints()
        self.createWriters()
        self.getDates()

        self.initializeClient()

    def initializeClient(self):

        self.paramAuthentication = self.getLatestAuthorization()

        refreshToken = json.loads(self.paramAuthentication['#data'])[AUTH_KEY_REFRESHTOKEN]
        clientId = self.paramAuthentication[AUTH_KEY_CLIENTID]
        clientSecret = self.paramAuthentication[AUTH_KEY_CLIENTSECRET]

        self.client = TimeDoctorClient(refreshToken, clientId, clientSecret)
        self.paramAuthentication['#data'] = json.dumps(self.client.refreshAccessToken())
        self.write_state_file(self.paramAuthentication)

    def _checkEndpoints(self):

        diffEndpoints = set(list(self.paramEndpoints)) - set(SUPPORTED_ENDPOINTS)

        if len(diffEndpoints) > 0:
            logging.error(f"Unsupported endpoints {diffEndpoints} specified.")
            sys.exit(1)

    def getAuthorization(self):

        return self.configuration.config_data.get('authorization', {}).get('oauth_api', {}).get('credentials', {})

    def getLatestAuthorization(self):

        configAuth = self.getAuthorization()
        stateAuth = self.get_state_file()

        if stateAuth is None and configAuth != {}:
            return configAuth

        elif configAuth == {}:
            logging.error("No authorization provided in the configuration.")
            sys.exit(1)

        comparisonList = [
            configAuth.get('id') == stateAuth.get('id'),
            configAuth.get('authorizedFor') == stateAuth.get('authorizedFor'),
            configAuth.get('creator') == stateAuth.get('creator'),
            configAuth.get('created') == stateAuth.get('created'),
            configAuth.get('appKey') == stateAuth.get('appKey'),
            configAuth.get('#appSecret') == stateAuth.get('#appSecret')
        ]

        if all(comparisonList) is True:
            logging.info("Using authentication from state file.")
            return stateAuth

        else:
            logging.info("Using authentication from configuration.")
            return configAuth

    def getDates(self):

        start_date = dateparser.parse(self.paramStartDate)
        end_date = dateparser.parse(self.paramEndDate)

        if start_date is None or end_date is None:
            logging.error(
                f"Incorrect format provided for start ({self.paramStartDate}) or end ({self.paramEndDate}) date.")
            sys.exit(1)

        else:
            self.paramDates = {'start': start_date.strftime('%Y-%m-%d'),
                               'end': end_date.strftime('%Y-%m-%d')}

            self.paramChunkDates = self.split_dates_to_chunks(start_date, end_date, 60, '%Y-%m-%d')

    def createWriters(self):

        if 'users' in self.paramEndpoints:
            self.wrUsers = TimeDoctorWriter('users', self.paramIncremental, self.data_path)

        if 'companies' in self.paramEndpoints:
            self.wrCompanies = TimeDoctorWriter('companies', self.paramIncremental, self.data_path)

        if 'projects' in self.paramEndpoints:
            self.wrProjects = TimeDoctorWriter('projects', self.paramIncremental, self.data_path)

        if 'tasks' in self.paramEndpoints:
            self.wrTasks = TimeDoctorWriter('tasks', self.paramIncremental, self.data_path)

        if 'worklogs' in self.paramEndpoints:
            self.wrWorklogs = TimeDoctorWriter('worklogs', self.paramIncremental, self.data_path)

        if 'webandapp' in self.paramEndpoints:
            self.wrWebAndApps = TimeDoctorWriterWAA(self.paramIncremental, dataPath=self.data_path)

    def run(self):

        logging.info("Downloading companies.")
        _allCompanies = self.client.getCompanies()
        self.respCompanies = {str(a['company_id']): {'name': a['company_name']} for a in _allCompanies}

        if 'companies' in self.paramEndpoints:
            self.wrCompanies.writerow(_allCompanies)

        logging.info("Downloading users.")
        _allUsers = []
        for _cmp in self.respCompanies:

            _allUsers += self.client.getUsers(_cmp)

        self.respUsers = {str(u['user_id']): {'name': u['full_name'],
                                              'company_id': str(u['company_id'])} for u in _allUsers}
        if 'users' in self.paramEndpoints:
            self.wrUsers.writerow(_allUsers)

        if 'projects' in self.paramEndpoints:
            logging.info("Downloading projects.")
            _allProjects = []

            for _user, _attr in self.respUsers.items():
                _allProjects += self.client.getUserProjects(_attr['company_id'], _user)

            self.wrProjects.writerow(_allProjects)

        if 'tasks' in self.paramEndpoints:
            logging.info("Downloading tasks.")
            _allTasks = []

            for _user, _attr in self.respUsers.items():
                _allTasks += self.client.getUserTasks(_attr['company_id'], _user)

            self.wrTasks.writerow(_allTasks)

        if 'worklogs' in self.paramEndpoints:
            logging.info("Downloading worklogs.")
            _allWorklogs = []

            for _comp in self.respCompanies:
                _allWorklogs += self.client.getWorklogs(_comp, self.paramDates['start'], self.paramDates['end'])

            self.wrWorklogs.writerow(_allWorklogs)

        if 'webandapp' in self.paramEndpoints:
            logging.info("Downloading websites and applications.")
            logging.warn("This action may take a long time and even result in 500 Internal Server Error.")
            _allWAA = []

            for _user, _attr in self.respUsers.items():

                for d in self.paramChunkDates:
                    logging.info(f"Downloading web and apps for user {_user} from {d['start_date']} to {d['end_date']}")
                    _allWAA += self.client.getWebAndApps(_attr['company_id'], d['start_date'],
                                                         d['end_date'], _user)

                self.wrWebAndApps.writerow(_allWAA)


================================================
File: /src/timedoctor/client.py
================================================
import logging
import os
import sys
from kbc.client_base import HttpClientBase

BASE_URL = 'https://webapi.timedoctor.com/v1.1/'
DEFAULT_LIMIT = 500


class TimeDoctorClient(HttpClientBase):

    def __init__(self, refreshToken, clientId, clientSecret):

        self.paramRefreshToken = refreshToken
        self.paramClientId = clientId
        self.paramClientSecret = clientSecret

        paramsDefault = {
            '_format': 'json'
        }

        super().__init__(BASE_URL, default_params=paramsDefault)

    def refreshAccessToken(self):

        urlRefresh = 'https://webapi.timedoctor.com/oauth/v2/token'
        paramsRefresh = {
            'client_id': self.paramClientId,
            'client_secret': self.paramClientSecret,
            'refresh_token': self.paramRefreshToken,
            'grant_type': 'refresh_token'
        }

        reqRefresh = self.get_raw(urlRefresh, params=paramsRefresh)
        scRefresh, jsRefresh = reqRefresh.status_code, reqRefresh.json()

        if scRefresh == 200:

            logging.info("Access token refreshed.")
            self.paramAccessToken = jsRefresh['access_token']
            self.paramRefreshToken = jsRefresh['refresh_token']

            self._auth_header = {
                'Authorization': f'Bearer {self.paramAccessToken}'
            }

            return jsRefresh

        else:

            logging.error("Could not refresh access token.")
            logging.error("Try re-authorizing the extractor! \nReceived: %s - %s." % (scRefresh, jsRefresh))

            sys.exit(1)

    def getCompanies(self):

        urlCompanies = os.path.join(self.base_url, 'companies')

        reqCompanies = self.get_raw(urlCompanies)
        scCompanies, jsCompanies = reqCompanies.status_code, reqCompanies.json()

        if scCompanies != 200:

            logging.error('\n'.join(["Could not obtain a list of companies.",
                                     f"Received: {scCompanies} - {jsCompanies}."]))
            sys.exit(1)

        else:

            return jsCompanies['accounts']

    def getUsers(self, companyId):

        urlUsers = os.path.join(self.base_url, f'companies/{companyId}/users')

        reqUsers = self.get_raw(urlUsers)
        scUsers, jsUsers = reqUsers.status_code, reqUsers.json()

        if scUsers != 200:

            logging.error(f"Could not obtain users for company {companyId}.")
            logging.error(f"Received: {scUsers} - {jsUsers}.")
            sys.exit(1)

        else:
            return jsUsers['users']

    def getUserProjects(self, companyId, userId):

        offset = 1
        moreRecords = True
        allProjects = []

        urlProjects = os.path.join(self.base_url, f'companies/{companyId}/users/{userId}/projects')

        while moreRecords is True:

            paramsProjects = {
                'offset': offset,
                'limit': DEFAULT_LIMIT,
                'all': 1,
                'assigned': 0
            }

            reqProjects = self.get_raw(urlProjects, params=paramsProjects)
            scProjects, jsProjects = reqProjects.status_code, reqProjects.json()

            if scProjects == 200:

                allProjects += jsProjects['projects']

                if jsProjects['count'] == DEFAULT_LIMIT:
                    offset += DEFAULT_LIMIT

                else:
                    moreRecords = False

            elif scProjects == 403:
                logging.warning(f"Warning Could not obtain projects for user {userId}.")
                moreRecords = False

            else:

                logging.error(f"Could not obtain projects for user {userId}.")
                logging.error(f"Resulted in {scProjects} Error")
                logging.info(jsProjects)
                sys.exit(1)

        return allProjects

    def getUserTasks(self, companyId, userId):

        offset = 1
        moreRecords = True
        allTasks = []

        urlTasks = os.path.join(self.base_url, f'companies/{companyId}/users/{userId}/tasks')

        while moreRecords is True:

            paramsTasks = {
                'offset': offset,
                'limit': DEFAULT_LIMIT,
                'status': 'all'
            }

            reqTasks = self.get_raw(urlTasks, params=paramsTasks)
            scTasks, jsTasks = reqTasks.status_code, reqTasks.json()

            if scTasks == 200:

                allTasks += jsTasks['tasks']

                if jsTasks['count'] == DEFAULT_LIMIT:
                    offset += DEFAULT_LIMIT

                else:
                    moreRecords = False

            else:

                logging.error("Could not obtain projects for user %s." % userId)
                logging.error(f"Received: {scTasks} - {jsTasks}.")
                sys.exit(1)

        return allTasks

    def getWorklogs(self, companyId, startDate, endDate):

        offset = 1
        moreRecords = True
        allWorklogs = []

        urlWorklogs = os.path.join(self.base_url, f'companies/{companyId}/worklogs')

        while moreRecords is True:

            paramsWorklogs = {
                'offset': offset,
                'limit': DEFAULT_LIMIT,
                'consolidated': 0,
                'start_date': startDate,
                'end_date': endDate
            }

            reqWorklogs = self.get_raw(urlWorklogs, params=paramsWorklogs)
            scWorklogs, jsWorklogs = reqWorklogs.status_code, reqWorklogs.json()

            if scWorklogs == 200:

                worklogs = jsWorklogs['worklogs']['items']

                allWorklogs += worklogs

                if len(worklogs) == DEFAULT_LIMIT:
                    offset += DEFAULT_LIMIT

                else:
                    moreRecords = False

            else:

                logging.error("Could not obtain worklogs.")
                logging.error(f"Received: {scWorklogs} - {jsWorklogs}.")
                sys.exit(1)

        return allWorklogs

    def getPayrolls(self, companyId):

        offset = 1
        moreRecords = True
        allPayrolls = []

        urlPayrolls = os.path.join(self.base_url, f'companies/{companyId}/payrolls')

        while moreRecords is True:

            paramsPayrolls = {
                'offset': offset,
                'limit': DEFAULT_LIMIT
            }

            reqPayrolls = self.get_raw(urlPayrolls, params=paramsPayrolls)
            scPayrolls, jsPayrolls = reqPayrolls.status_code, reqPayrolls.json()

            if scPayrolls == 200:

                allPayrolls += jsPayrolls

                if len(jsPayrolls) == DEFAULT_LIMIT:
                    offset += DEFAULT_LIMIT

                else:
                    moreRecords = False

            else:

                logging.error("Could not obtain worklogs.")
                logging.error(f"Received: {scPayrolls} - {jsPayrolls}.")
                sys.exit(1)

        return allPayrolls

    def getPoortime(self, companyId, startDate, endDate):

        urlPoortime = os.path.join(self.base_url, f'companies/{companyId}/poortime')
        paramsPoortime = {
            'start_date': startDate,
            'end_date': endDate
        }

        reqPoortime = self.get_raw(urlPoortime, params=paramsPoortime)
        scPoortime, jsPoortime = reqPoortime.status_code, reqPoortime.json()

        if scPoortime == 200:
            return jsPoortime

        else:
            logging.error("There was an error downloading poortime.")
            sys.exit(1)

    def getWebAndApps(self, companyId, startDate, endDate, users):

        urlWebAndApps = os.path.join(self.base_url, f'companies/{companyId}/webandapp')
        paramsWebAndApps = {
            'start_date': startDate,
            'end_date': endDate,
            'user_id': users
        }

        reqWebAndApps = self.get_raw(urlWebAndApps, params=paramsWebAndApps)
        scWebAndApps, jsWebAndApps = reqWebAndApps.status_code, reqWebAndApps.json()

        if scWebAndApps == 200:
            return jsWebAndApps

        else:
            logging.error(f"Could not download data about web and applications for users: {users}.")
            logging.error(f"Received: {scWebAndApps} - {jsWebAndApps}.")
            sys.exit(1)


================================================
File: /src/timedoctor/result.py
================================================
import csv
import json
import os
import hashlib

FIELDS_COMPANIES = ['company_id', 'company_name', 'company_time_zone_id',
                    'company_time_zone', 'company_subdomain', 'company_logo']
JSON_FIELDS_COMPANIES = []
PK_COMPANIES = ['company_id']

FIELDS_USERS = ['id', 'user_id', 'company_id', 'employee_id', 'full_name', 'first_name', 'last_name', 'email', 'url',
                'level', 'is_team_manager', 'managed_users', 'teams', 'new_user', 'team_status', 'payroll_access',
                'billing_access', 'avatar', 'screenshots_active', 'manual_time', 'permanent_tasks',
                'computer_time_popup', 'poor_time_popup', 'blur_screenshots', 'web_and_app_monitoring',
                'webcam_shots', 'screenshots_interval', 'user_role_value', 'status', 'reports_hidden',
                'time_tracking_started']
JSON_FIELDS_USERS = ['managed_users', 'teams']
PK_USERS = ['id', 'user_id']

FIELDS_PROJECTS = ['id', 'project_id', 'project_source', 'project_name', 'archived', 'default', 'url',
                   'is_limit_exceeded', 'project_time', 'project_time_in_seconds', 'users']
JSON_FIELDS_PROJECTS = ['users']
PK_PROJECTS = ['id', 'project_id']

FIELDS_TASKS = ['id', 'task_id', 'project_id', 'project_name', 'task_name', 'active', 'user_id', 'assigned_by',
                'url', 'task_link', 'status']
JSON_FIELDS_TASKS = []
PK_TASKS = ['id', 'task_id', 'user_id']

FIELDS_WORKLOGS = ['id', 'length', 'user_id', 'user_name', 'task_id', 'task_name', 'task_url', 'project_id',
                   'project_name', 'start_time', 'end_time', 'edited', 'last_modified', 'work_mode']
JSON_FIELDS_WORKLOGS = []
PK_WORKLOGS = ['id']

FIELDS_WEBANDAPPS = ['id', 'user_id', 'full_name', 'email', 'webandapps_name', 'webandapps_type']
PK_WEBANDAPPS = ['id']

FIELDS_WAAWORKLOGS = ['webandapps_id', 'worklog_id', 'duration']
PK_WAAWORKLOAGS = ['webandapps_id', 'worklog_id']


class TimeDoctorWriter:

    def __init__(self, tableName, incrementalFlag, dataPath='./data'):

        self.paramPath = dataPath
        self.paramTableName = tableName
        self.paramTable = tableName + '.csv'
        self.paramTablePath = os.path.join(self.paramPath, 'out/tables', self.paramTable)
        self.paramFields = eval(f'FIELDS_{tableName.upper()}')
        self.paramJsonFields = eval(f'JSON_FIELDS_{tableName.upper()}')
        self.paramPrimaryKey = eval(f'PK_{tableName.upper()}')
        self.paramIncremental = incrementalFlag

        self.createWriter()
        self.createManifest()

    def createManifest(self):

        template = {
            'incremental': self.paramIncremental,
            'primary_key': self.paramPrimaryKey
        }

        path = self.paramTablePath + '.manifest'

        with open(path, 'w') as manifest:

            json.dump(template, manifest)

    def createWriter(self):

        self.writer = csv.DictWriter(open(self.paramTablePath, 'w'), fieldnames=self.paramFields,
                                     restval='', extrasaction='ignore', quotechar='\"', quoting=csv.QUOTE_ALL)
        self.writer.writeheader()

    def writerow(self, listToWrite):

        for row in listToWrite:

            _dictToWrite = {}

            for key, value in row.items():

                if key in self.paramJsonFields:
                    _dictToWrite[key] = json.dumps(value)

                else:
                    _dictToWrite[key] = value

            self.writer.writerow(_dictToWrite)


class TimeDoctorWriterWAA:

    def __init__(self, incrementalFlag, dataPath='./data'):

        self.paramPath = os.path.join(dataPath, 'out/tables')
        self.varWaaPath = os.path.join(self.paramPath, 'websites-and-apps.csv')
        self.varWaaWlgPath = os.path.join(self.paramPath, 'websites-and-apps-worklogs.csv')
        self.paramIncremental = incrementalFlag

        self.createManifests()
        self.createWriters()

    def createManifests(self):

        with open(self.varWaaPath + '.manifest', 'w') as manWaa:

            json.dump({'incremental': self.paramIncremental, 'primary_key': PK_WEBANDAPPS}, manWaa)

        with open(self.varWaaWlgPath + '.manifest', 'w') as manWlg:

            json.dump({'incremental': self.paramIncremental, 'primary_key': PK_WAAWORKLOAGS}, manWlg)

    def createWriters(self):

        self.wrWaa = csv.DictWriter(open(self.varWaaPath, 'w'), FIELDS_WEBANDAPPS, restval='',
                                    extrasaction='ignore', quotechar='\"', quoting=csv.QUOTE_ALL)

        self.wrWaa.writeheader()

        self.wrWlg = csv.DictWriter(open(self.varWaaWlgPath, 'w'), FIELDS_WAAWORKLOGS, restval='',
                                    extrasaction='ignore', quotechar='\"', quoting=csv.QUOTE_ALL)
        self.wrWlg.writeheader()

    def writerow(self, listToWrite):

        for user in listToWrite:

            dUser = {
                'user_id': user['user_id'],
                'email': user['email'],
                'full_name': user['full_name']
            }

            for _waa in user['websites_and_apps']:

                dApp = {
                    'webandapps_name': _waa['name'],
                    'webandapps_type': _waa['timeType']
                }

                _waa_id = hashlib.md5('|'.join([str(dUser['user_id']), dApp['webandapps_name'],
                                                dApp['webandapps_type']]).encode()).hexdigest()

                self.wrWaa.writerow({'id': _waa_id, **dUser, **dApp})

                for wlg, value in _waa['worklog_ids'].items():

                    self.wrWlg.writerow({'webandapps_id': _waa_id, 'worklog_id': wlg, 'duration': value})


================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        script:
          - export APP_IMAGE=$APP_IMAGE
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
#          - echo 'Pushing test image to repo. [tag=test]'
#          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#          - docker tag $APP_IMAGE:latest $REPOSITORY:test
#          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /component_config/component_long_description.md
================================================
# Time Doctor

The Time Doctor extractor for Keboola allows users to download data from Time Doctor about users and their activity. To download all data available from the API, the following prerequisities need to be met:

- authorize extractor with admin account.

## Configuration

A sample configuration, with both input and output folders can be found [in the component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-timedoctor/src/master/component_config/sample-config/).

### Parameters

To configure the extractor, a set of objects which should be downloaded needs to be specified along with the date range, for which statistics table will be downloaded. A sample `config.json` file can be found [here](https://bitbucket.org/kds_consulting_team/kds-team.ex-timedoctor/src/master/component_config/sample-config/config.json).

#### Objects (`endpoints`)

A list of objects, which should be downloaded from the API. By design of the API, only two objects support date filtering, where specifying a valid date range will support only records present within the date range. Currently supported objects are:

- `companies`
  - **description:** downloads a list of companies, to which authenticated user has access to
  - **documentation:** https://webapi.timedoctor.com/doc#companies#get--v1.1-companies
  - **date:** no
- `users`
  - **description:** downloads a list of users present within the company
  - **documentation:** https://webapi.timedoctor.com/doc#users#get--v1.1-companies-{company_id}-users
  - **date:** no
- `projects`
  - **description:** downloads a list of projects and a list of users, who are assigned to each project
  - **documentation:** https://webapi.timedoctor.com/doc#projects#get--v1.1-companies-{company_id}-users-{user_id}-projects
  - **date:** no
- `tasks`
  - **description:** downloads a list of tasks which are assigned to each user
  - **documentation:** https://webapi.timedoctor.com/doc#tasks#get--v1.1-companies-{company_id}-users-{user_id}-tasks
  - **date:** no
- `worklogs`
  - **description:** downloads worklogs, to which project and task they belong to and how much time was logged
  - **documentation:** https://webapi.timedoctor.com/doc#worklogs#get--v1.1-companies-{company_id}-worklogs
  - **date:** yes
- `websites and applications`
  - **description:** downloads a list of websites and applications, where users spend time while working, and associated worklogs
  - **documentation:** https://webapi.timedoctor.com/doc#webandapp#get--v1.1-companies-{company_id}-webandapp
  - **date:** yes

#### Date settings (`date_settings`)

A start and end date for `worklogs` and `websites and applications` objects. Both start date and end date support relative date specification in format like `2 days ago`, `3 months ago`, `a year ago`, etc; or standard `YYYY-MM-DD` format can be used. For full list of supported formats visit [`dateparser` library documentation](https://dateparser.readthedocs.io/en/latest/).

### Output

All tables are loaded incrementally into storage with primary keys set.

================================================
File: /component_config/configuration_description.md
================================================
To configure the extractor, a set of objects which should be downloaded needs to be specified along with the date range, for which statistics table will be downloaded. A sample `config.json` file can be found [here](https://bitbucket.org/kds_consulting_team/kds-team.ex-timedoctor/src/master/component_config/sample-config/config.json).

#### Objects (`endpoints`)

A list of objects, which should be downloaded from the API. By design of the API, only two objects support date filtering, where specifying a valid date range will support only records present within the date range. Currently supported objects are:

- `companies`
  - **description:** downloads a list of companies, to which authenticated user has access to
  - **documentation:** https://webapi.timedoctor.com/doc#companies#get--v1.1-companies
  - **date:** no
- `users`
  - **description:** downloads a list of users present within the company
  - **documentation:** https://webapi.timedoctor.com/doc#users#get--v1.1-companies-{company_id}-users
  - **date:** no
- `projects`
  - **description:** downloads a list of projects and a list of users, who are assigned to each project
  - **documentation:** https://webapi.timedoctor.com/doc#projects#get--v1.1-companies-{company_id}-users-{user_id}-projects
  - **date:** no
- `tasks`
  - **description:** downloads a list of tasks which are assigned to each user
  - **documentation:** https://webapi.timedoctor.com/doc#tasks#get--v1.1-companies-{company_id}-users-{user_id}-tasks
  - **date:** no
- `worklogs`
  - **description:** downloads worklogs, to which project and task they belong to and how much time was logged
  - **documentation:** https://webapi.timedoctor.com/doc#worklogs#get--v1.1-companies-{company_id}-worklogs
  - **date:** yes
- `websites and applications`
  - **description:** downloads a list of websites and applications, where users spend time while working, and associated worklogs
  - **documentation:** https://webapi.timedoctor.com/doc#webandapp#get--v1.1-companies-{company_id}-webandapp
  - **date:** yes

#### Date settings (`date_settings`)

A start and end date for `worklogs` and `websites and applications` objects. Both start date and end date support relative date specification in format like `2 days ago`, `3 months ago`, `a year ago`, etc; or standard `YYYY-MM-DD` format can be used. For full list of supported formats visit [`dateparser` library documentation](https://dateparser.readthedocs.io/en/latest/).

================================================
File: /component_config/component_short_description.md
================================================
Time Doctor is a time tracking software, which allows employees to track time per project and task basis; and team managers to evaluate effectiveness of the employees by evaluating their computer activity.

================================================
File: /component_config/stack_parameters.json
================================================
{}

================================================
File: /component_config/configSchema.json
================================================
{
    "type": "object",
    "title": "Parameters",
    "required": [
        "endpoints",
        "date_settings",
        "incremental"
    ],
    "properties": {
        "date_settings": {
            "type": "object",
            "title": "Date settings",
            "format": "grid",
            "required": [
                "start_time",
                "end_time"
            ],
            "properties": {
                "end_time": {
                    "type": "string",
                    "title": "End Date",
                    "default": "today",
                    "description": "End date, to which the extractor will download data. Can be specified as YYYY-MM-DD or in form of 30 days ago, 2 months ago, etc.",
                    "propertyOrder": 200
                },
                "start_time": {
                    "type": "string",
                    "title": "Start Date",
                    "default": "30 days ago",
                    "description": "Start date, from which the extractor will download data. Can be specified as YYYY-MM-DD or in form of 30 days ago, 2 months ago, etc.",
                    "propertyOrder": 100
                }
            },
            "description": "Setting date range for which the statistics will be downloaded.",
            "propertyOrder": 200
        },
        "endpoints": {
            "type": "array",
            "items": {
                "enum": [
                    "companies",
                    "users",
                    "projects",
                    "tasks",
                    "worklogs",
                    "webandapp"
                ],
                "type": "string",
                "options": {
                    "enum_titles": [
                        "companies",
                        "users",
                        "projects",
                        "tasks",
                        "worklogs",
                        "websites and applications"
                    ]
                }
            },
            "title": "Objects to download",
            "format": "select",
            "default": [
                "companies",
                "users",
                "projects",
                "tasks",
                "worklogs",
                "webandapp"
            ],
            "description": "A list of objects which will be downloaded. One or multiple objects can be specified.",
            "uniqueItems": true,
            "propertyOrder": 100
        },
        "incremental": {
            "title": "Incremental Loading",
            "description": "Marks whether tables should be loaded incrementally to storage.",
            "default": true,
            "type": "boolean",
            "uniqueItems": true,
            "propertyOrder": 300
        }
    }
}

================================================
File: /component_config/sample-config/config.json
================================================
{
  "storage": {},
  "parameters": {
    "endpoints": [
      "projects",
      "tasks",
      "worklogs",
      "webandapp",
      "users",
      "projects",
      "companies"
    ],
    "date_settings": {
      "start_time": "3 months ago",
      "end_time": "today"
    }
  },
  "image_parameters": {},
  "authorization": {
    "oauth_api": {
      "id": "85169896",
      "credentials": {
        "id": "85169896",
        "authorizedFor": "smk",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2019-11-20T09:30:32.605Z",
        "#data": "{\"access_token\": \"token123\", \"expires_in\": 432000, \"token_type\": \"bearer\", \"scope\": null, \"refresh_token\": \"refresh123\"}",
        "oauthVersion": "2.0",
        "appKey": "3019r21d193821930ds",
        "#appSecret": "312dd9sad8dasdas0d9af09as8d08as0d980129309eas8d0"
      }
    }
  }
}

================================================
File: /component_config/sample-config/in/state.json
================================================
{"id": "85169896", "authorizedFor": "smk", "creator": {"id": "1234", "description": "me@keboola.com"}, "created": "2019-11-20T09:30:32.605Z", "#data": "{\"access_token\": \"token123\", \"expires_in\": 432000, \"token_type\": \"bearer\", \"scope\": null, \"refresh_token\": \"refresh123\"}", "oauthVersion": "2.0", "appKey": "3019r21d193821930ds", "#appSecret": "312dd9sad8dasdas0d9af09as8d08as0d980129309eas8d0"}

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/state.json
================================================
{"id": "85169896", "authorizedFor": "smk", "creator": {"id": "1234", "description": "me@keboola.com"}, "created": "2019-11-20T09:30:32.605Z", "#data": "{\"access_token\": \"token123\", \"expires_in\": 432000, \"token_type\": \"bearer\", \"scope\": null, \"refresh_token\": \"refresh123\"}", "oauthVersion": "2.0", "appKey": "3019r21d193821930ds", "#appSecret": "312dd9sad8dasdas0d9af09as8d08as0d980129309eas8d0"}

================================================
File: /component_config/sample-config/out/tables/websites-and-apps.csv
================================================
"id","user_id","full_name","email","webandapps_name","webandapps_type"
"f33662d2de3089fb275ad827e62e8a7d","1813658","Admin Test","test@gmail.com","youtube.com","websites"
"9dfc8c631c5f3214a6b98831634bf54a","1813658","Admin Test","test@gmail.com","nonogramz","apps"
"b2724d4ceb04a93d4058e2bb98280dcd","1813658","Admin Test","test@gmail.com","facebook.com","websites"
"593af9c3ce7e077ab11cae35c7498b3c","1813658","Admin Test","test@gmail.com","reddit.com","websites"
"a5ff26ee1aea4327fa25952ee6adfc29","1813658","Admin Test","test@gmail.com","Time Doctor","apps"
"9b66901babbcbd37321ef71c9e28ac92","1813658","Admin Test","test@gmail.com","slack","apps"
"ad19e09c4dd6811fdca1b04784c28819","1813658","Admin Test","test@gmail.com","webapi.timedoctor.com","websites"
"f33662d2de3089fb275ad827e62e8a7d","1813658","Admin Test","test@gmail.com","youtube.com","websites"
"9dfc8c631c5f3214a6b98831634bf54a","1813658","Admin Test","test@gmail.com","nonogramz","apps"
"b2724d4ceb04a93d4058e2bb98280dcd","1813658","Admin Test","test@gmail.com","facebook.com","websites"
"593af9c3ce7e077ab11cae35c7498b3c","1813658","Admin Test","test@gmail.com","reddit.com","websites"
"a5ff26ee1aea4327fa25952ee6adfc29","1813658","Admin Test","test@gmail.com","Time Doctor","apps"
"9b66901babbcbd37321ef71c9e28ac92","1813658","Admin Test","test@gmail.com","slack","apps"
"ad19e09c4dd6811fdca1b04784c28819","1813658","Admin Test","test@gmail.com","webapi.timedoctor.com","websites"
"7188e4df1b21f73aa26d806f35aefe49","1813544","Radim Test2","drak@keboola.com","webapi.timedoctor.com","websites"
"6545a9caf4f96b0eb0248ab1316699eb","1813544","Radim Test2","drak@keboola.com","youtube.com","websites"
"6033dd0489fa29b2c0e30b8533f8aba9","1813544","Radim Test2","drak@keboola.com","Time Doctor","apps"
"6e48fa1904f72651d5a9fcfeab8a5d36","1813544","Radim Test2","drak@keboola.com","facebook.com","websites"
"3e6d3ceff56114255c935caf9b1a9d3d","1813544","Radim Test2","drak@keboola.com","paw","apps"
"a6489d65a33e7c45eb7b990ad474b24e","1813544","Radim Test2","drak@keboola.com","login.timedoctor.com","websites"
"1efdbe28ac868ac21e2a819444a6e58e","1813544","Radim Test2","drak@keboola.com","code","apps"
"2e2ced015fc8731e226faccfd74fc2de","1813544","Radim Test2","drak@keboola.com","status.timedoctor.com","websites"
"318245145266254fd5986d8421542ef8","1813544","Radim Test2","drak@keboola.com","google.com","websites"


================================================
File: /component_config/sample-config/out/tables/worklogs.csv
================================================
"id","length","user_id","user_name","task_id","task_name","task_url","project_id","project_name","start_time","end_time","edited","last_modified","work_mode"
"1890382004","1220","1813544","Radim Test2","52939265","eating & chilling","","","No Project","2019-11-16 23:33:31","2019-11-16 23:53:51","0","","0"
"1890382180","778","1813544","Radim Test2","52939285","watching NFL replays","","","No Project","2019-11-17 00:23:57","2019-11-17 00:36:55","0","","0"
"1890385669","744","1813544","Radim Test2","52939969","client","","582319","API Devel","2019-11-17 12:08:25","2019-11-17 12:20:49","0","","0"
"1890385803","604","1813544","Radim Test2","52939986","listening to musc","","582320","Other stuff","2019-11-17 12:20:52","2019-11-17 12:30:56","0","","0"
"1890390051","568","1813544","Radim Test2","52939975","documentation","","582319","API Devel","2019-11-17 23:49:12","2019-11-17 23:58:40","0","","0"
"1890389996","377","1813544","Radim Test2","52939978","result","","582319","API Devel","2019-11-17 23:39:01","2019-11-17 23:45:18","0","","0"
"1890382051","361","1813544","Radim Test2","52939285","watching NFL replays","","","No Project","2019-11-16 23:53:58","2019-11-16 23:59:59","0","","0"
"1890382073","357","1813544","Radim Test2","52939285","watching NFL replays","","","No Project","2019-11-17 00:00:00","2019-11-17 00:05:57","0","","0"
"1890381921","106","1813544","Radim Test2","52939256","watching videos","","","No Project","2019-11-16 23:12:39","2019-11-16 23:14:25","0","","0"
"1890381924","94","1813544","Radim Test2","52939259","ordering food","","","No Project","2019-11-16 23:14:31","2019-11-16 23:16:05","0","","0"
"1890390032","77","1813544","Radim Test2","52939969","client","","582319","API Devel","2019-11-17 23:46:36","2019-11-17 23:47:53","0","","0"
"1890389829","53","1813544","Radim Test2","52939969","client","","582319","API Devel","2019-11-17 23:11:39","2019-11-17 23:12:32","0","","0"
"1890389885","45","1813544","Radim Test2","52939978","result","","582319","API Devel","2019-11-17 23:21:56","2019-11-17 23:22:41","0","","0"
"1890390039","24","1813544","Radim Test2","52939975","documentation","","582319","API Devel","2019-11-17 23:48:25","2019-11-17 23:48:49","0","","0"
"1890389832","10","1813544","Radim Test2","52939978","result","","582319","API Devel","2019-11-17 23:13:08","2019-11-17 23:13:18","0","","0"
"1890389995","7","1813544","Radim Test2","52939972","component","","582319","API Devel","2019-11-17 23:38:54","2019-11-17 23:39:01","0","","0"
"1890382000","5","1813544","Radim Test2","52939264","programming TimeDoctor extractor","","","No Project","2019-11-16 23:33:20","2019-11-16 23:33:25","0","","0"
"1890382104","5","1813544","Radim Test2","52939256","watching videos","","","No Project","2019-11-17 00:11:43","2019-11-17 00:11:48","0","","0"
"1890381923","4","1813544","Radim Test2","52939256","watching videos","","","No Project","2019-11-16 23:14:27","2019-11-16 23:14:31","0","","0"
"1890382102","4","1813544","Radim Test2","52939264","programming TimeDoctor extractor","","","No Project","2019-11-17 00:11:12","2019-11-17 00:11:16","0","","0"
"1890389887","3","1813544","Radim Test2","52939972","component","","582319","API Devel","2019-11-17 23:22:47","2019-11-17 23:22:50","0","","0"
"1890381922","2","1813544","Radim Test2","52939259","ordering food","","","No Project","2019-11-16 23:14:25","2019-11-16 23:14:27","0","","0"
"1890390359","873","1813658","Admin Test","52941144","result","","582319","API Devel","2019-11-18 00:33:07","2019-11-18 00:47:40","0","","0"
"1890390515","828","1813658","Admin Test","52941143","documentation","","582319","API Devel","2019-11-18 00:53:50","2019-11-18 01:07:38","0","","0"
"1890390234","771","1813658","Admin Test","52941141","client","","582319","API Devel","2019-11-18 00:13:04","2019-11-18 00:25:55","0","","0"
"1890390148","588","1813658","Admin Test","52941142","component","","582319","API Devel","2019-11-18 00:00:53","2019-11-18 00:10:41","0","","0"
"1890390358","50","1813658","Admin Test","52941141","client","","582319","API Devel","2019-11-18 00:32:17","2019-11-18 00:33:07","0","","0"


================================================
File: /component_config/sample-config/out/tables/websites-and-apps-worklogs.csv
================================================
"webandapps_id","worklog_id","duration"
"f33662d2de3089fb275ad827e62e8a7d","1890390148","400"
"f33662d2de3089fb275ad827e62e8a7d","1890390234","380"
"f33662d2de3089fb275ad827e62e8a7d","1890390359","240"
"9dfc8c631c5f3214a6b98831634bf54a","1890390515","810"
"b2724d4ceb04a93d4058e2bb98280dcd","1890390358","40"
"b2724d4ceb04a93d4058e2bb98280dcd","1890390359","580"
"593af9c3ce7e077ab11cae35c7498b3c","1890390148","150"
"593af9c3ce7e077ab11cae35c7498b3c","1890390234","370"
"a5ff26ee1aea4327fa25952ee6adfc29","1890390148","20"
"a5ff26ee1aea4327fa25952ee6adfc29","1890390515","10"
"9b66901babbcbd37321ef71c9e28ac92","1890390359","10"
"ad19e09c4dd6811fdca1b04784c28819","1890390358","10"
"f33662d2de3089fb275ad827e62e8a7d","1890390148","400"
"f33662d2de3089fb275ad827e62e8a7d","1890390234","380"
"f33662d2de3089fb275ad827e62e8a7d","1890390359","240"
"9dfc8c631c5f3214a6b98831634bf54a","1890390515","810"
"b2724d4ceb04a93d4058e2bb98280dcd","1890390358","40"
"b2724d4ceb04a93d4058e2bb98280dcd","1890390359","580"
"593af9c3ce7e077ab11cae35c7498b3c","1890390148","150"
"593af9c3ce7e077ab11cae35c7498b3c","1890390234","370"
"a5ff26ee1aea4327fa25952ee6adfc29","1890390148","20"
"a5ff26ee1aea4327fa25952ee6adfc29","1890390515","10"
"9b66901babbcbd37321ef71c9e28ac92","1890390359","10"
"ad19e09c4dd6811fdca1b04784c28819","1890390358","10"
"7188e4df1b21f73aa26d806f35aefe49","1890382180","20"
"7188e4df1b21f73aa26d806f35aefe49","1890385669","630"
"7188e4df1b21f73aa26d806f35aefe49","1890389996","60"
"6545a9caf4f96b0eb0248ab1316699eb","1890389885","20"
"6545a9caf4f96b0eb0248ab1316699eb","1890390032","30"
"6545a9caf4f96b0eb0248ab1316699eb","1890390039","20"
"6545a9caf4f96b0eb0248ab1316699eb","1890390051","550"
"6033dd0489fa29b2c0e30b8533f8aba9","1890381921","6"
"6033dd0489fa29b2c0e30b8533f8aba9","1890381924","50"
"6033dd0489fa29b2c0e30b8533f8aba9","1890382004","10"
"6033dd0489fa29b2c0e30b8533f8aba9","1890382051","320"
"6033dd0489fa29b2c0e30b8533f8aba9","1890382073","70"
"6033dd0489fa29b2c0e30b8533f8aba9","1890385669","40"
"6033dd0489fa29b2c0e30b8533f8aba9","1890389885","10"
"6033dd0489fa29b2c0e30b8533f8aba9","1890390051","10"
"6e48fa1904f72651d5a9fcfeab8a5d36","1890389996","210"
"6e48fa1904f72651d5a9fcfeab8a5d36","1890390032","20"
"3e6d3ceff56114255c935caf9b1a9d3d","1890382180","50"
"3e6d3ceff56114255c935caf9b1a9d3d","1890385669","10"
"3e6d3ceff56114255c935caf9b1a9d3d","1890389996","10"
"a6489d65a33e7c45eb7b990ad474b24e","1890389996","50"
"1efdbe28ac868ac21e2a819444a6e58e","1890389829","10"
"1efdbe28ac868ac21e2a819444a6e58e","1890389995","7"
"1efdbe28ac868ac21e2a819444a6e58e","1890389996","10"
"2e2ced015fc8731e226faccfd74fc2de","1890389832","10"
"2e2ced015fc8731e226faccfd74fc2de","1890390032","10"
"318245145266254fd5986d8421542ef8","1890389885","10"


================================================
File: /component_config/sample-config/out/tables/websites-and-apps-worklogs.csv.manifest
================================================
{"incremental": true, "primary_key": ["webandapps_id", "worklog_id"]}

================================================
File: /component_config/sample-config/out/tables/projects.csv
================================================
"id","project_id","project_source","project_name","archived","default","url","is_limit_exceeded","project_time","project_time_in_seconds","users"
"582319","582319","TD","API Devel","False","","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813493/projects/582319","","","","[1813658, 1813544, 1813493]"
"582320","582320","TD","Other stuff","False","","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813493/projects/582320","","","","[]"
"582319","582319","TD","API Devel","False","","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813658/projects/582319","","","","[1813658, 1813544, 1813493]"
"582320","582320","TD","Other stuff","False","","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813658/projects/582320","","","","[]"
"582319","582319","TD","API Devel","False","","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/projects/582319","","","","[1813658, 1813544, 1813493]"
"582320","582320","TD","Other stuff","False","","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/projects/582320","","","","[]"


================================================
File: /component_config/sample-config/out/tables/projects.csv.manifest
================================================
{"incremental": true, "primary_key": ["id", "project_id"]}

================================================
File: /component_config/sample-config/out/tables/tasks.csv.manifest
================================================
{"incremental": true, "primary_key": ["id", "task_id", "user_id"]}

================================================
File: /component_config/sample-config/out/tables/worklogs.csv.manifest
================================================
{"incremental": true, "primary_key": ["id"]}

================================================
File: /component_config/sample-config/out/tables/users.csv
================================================
"id","user_id","company_id","full_name","first_name","last_name","email","url","level","is_team_manager","managed_users","teams","new_user","team_status","payroll_access","billing_access","avatar","screenshots_active","manual_time","permanent_tasks","computer_time_popup","poor_time_popup","blur_screenshots","web_and_app_monitoring","webcam_shots","screenshots_interval","user_role_value","status","reports_hidden","time_tracking_started"
"1813493","1813493","1006343","Sam","Sam","","me@keboola.com","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813493","owner","False","[]","[]","1","","0","0","https://s3.amazonaws.com/tds3_avatars/small_avatar.png","","1","0","540","20","0","1","0","9","","inactive","False",""
"1813658","1813658","1006343","Admin Test","Admin","Test","test@gmail.com","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813658","admin","False","[]","[]","0","","0","0","https://s3.amazonaws.com/tds3_avatars/small_avatar.png","0","1","0","540","1","0","1","0","9","","active","False",""
"1813544","1813544","1006343","Radim Test2","Radim","Test2","drak@keboola.com","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544","user","False","[]","[]","0","","0","0","https://s3.amazonaws.com/tds3_avatars/small_avatar.png","0","1","0","540","1","0","1","0","9","","active","False",""


================================================
File: /component_config/sample-config/out/tables/websites-and-apps.csv.manifest
================================================
{"incremental": true, "primary_key": ["id"]}

================================================
File: /component_config/sample-config/out/tables/companies.csv
================================================
"company_id","company_name","company_time_zone_id","company_time_zone","company_subdomain","company_logo"
"1006343","Sam's Company","34","(GMT+01:00) Prague, Warsaw","login",""


================================================
File: /component_config/sample-config/out/tables/companies.csv.manifest
================================================
{"incremental": true, "primary_key": ["company_id"]}

================================================
File: /component_config/sample-config/out/tables/users.csv.manifest
================================================
{"incremental": true, "primary_key": ["id", "user_id"]}

================================================
File: /component_config/sample-config/out/tables/tasks.csv
================================================
"id","task_id","project_id","project_name","task_name","active","user_id","assigned_by","url","task_link","status"
"52939970","52939970","582319","API Devel","client","True","1813493","1813493","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813493/tasks/52939970","","Active"
"52939973","52939973","582319","API Devel","component","True","1813493","1813493","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813493/tasks/52939973","","Active"
"52939976","52939976","582319","API Devel","documentation","True","1813493","1813493","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813493/tasks/52939976","","Active"
"52939979","52939979","582319","API Devel","result","True","1813493","1813493","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813493/tasks/52939979","","Active"
"52939983","52939983","582320","Other stuff","eating","False","1813493","1813493","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813493/tasks/52939983","","Inactive"
"52939987","52939987","582320","Other stuff","listening to musc","False","1813493","1813493","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813493/tasks/52939987","","Inactive"
"52941141","52941141","582319","API Devel","client","True","1813658","1813658","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813658/tasks/52941141","","Active"
"52941142","52941142","582319","API Devel","component","True","1813658","1813658","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813658/tasks/52941142","","Active"
"52941143","52941143","582319","API Devel","documentation","True","1813658","1813658","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813658/tasks/52941143","","Active"
"52941144","52941144","582319","API Devel","result","True","1813658","1813658","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813658/tasks/52941144","","Active"
"52939256","52939256","","","watching videos","True","1813544","1813544","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/tasks/52939256","","Active"
"52939259","52939259","","","ordering food","True","1813544","1813544","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/tasks/52939259","","Active"
"52939265","52939265","","","eating & chilling","True","1813544","1813544","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/tasks/52939265","","Active"
"52939285","52939285","","","watching NFL replays","True","1813544","1813544","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/tasks/52939285","","Active"
"52939969","52939969","582319","API Devel","client","True","1813544","1813544","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/tasks/52939969","","Active"
"52939972","52939972","582319","API Devel","component","True","1813544","1813544","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/tasks/52939972","","Active"
"52939975","52939975","582319","API Devel","documentation","True","1813544","1813544","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/tasks/52939975","","Active"
"52939978","52939978","582319","API Devel","result","True","1813544","1813544","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/tasks/52939978","","Active"
"52939982","52939982","582320","Other stuff","eating","False","1813544","1813544","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/tasks/52939982","","Inactive"
"52939986","52939986","582320","Other stuff","listening to musc","False","1813544","1813544","https://webapi.timedoctor.com/v1.1/companies/1006343/users/1813544/tasks/52939986","","Inactive"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi

================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.4.zip#egg=kbc
logging_gelf==0.0.18


================================================
File: /Dockerfile
================================================
FROM python:3.8.0-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential
RUN pip install flake8
RUN pip install -r /code/requirements.txt
WORKDIR /code/

CMD ["python", "-u", "/code/src/main.py"]


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2019 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /README.md
================================================
# Time Doctor

The Time Doctor extractor for Keboola allows users to download data from Time Doctor about users and their activity. To download all data available from the API, the following prerequisities need to be met:

- authorize extractor with admin account.

## Configuration

A sample configuration, with both input and output folders can be found [in the component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-timedoctor/src/master/component_config/sample-config/).

### Parameters

To configure the extractor, a set of objects which should be downloaded needs to be specified along with the date range, for which statistics table will be downloaded. A sample `config.json` file can be found [here](https://bitbucket.org/kds_consulting_team/kds-team.ex-timedoctor/src/master/component_config/sample-config/config.json).

#### Objects (`endpoints`)

A list of objects, which should be downloaded from the API. By design of the API, only two objects support date filtering, where specifying a valid date range will support only records present within the date range. Currently supported objects are:

- `companies`
    - **description:** downloads a list of companies, to which authenticated user has access to
    - **documentation:** https://webapi.timedoctor.com/doc#companies#get--v1.1-companies
    - **date:** no
- `users`
    - **description:** downloads a list of users present within the company
    - **documentation:** https://webapi.timedoctor.com/doc#users#get--v1.1-companies-{company_id}-users
    - **date:** no
- `projects`
    - **description:** downloads a list of projects and a list of users, who are assigned to each project
    - **documentation:** https://webapi.timedoctor.com/doc#projects#get--v1.1-companies-{company_id}-users-{user_id}-projects
    - **date:** no
- `tasks`
    - **description:** downloads a list of tasks which are assigned to each user
    - **documentation:** https://webapi.timedoctor.com/doc#tasks#get--v1.1-companies-{company_id}-users-{user_id}-tasks
    - **date:** no
- `worklogs`
    - **description:** downloads worklogs, to which project and task they belong to and how much time was logged
    - **documentation:** https://webapi.timedoctor.com/doc#worklogs#get--v1.1-companies-{company_id}-worklogs
    - **date:** yes
- `websites and applications`
    - **description:** downloads a list of websites and applications, where users spend time while working, and associated worklogs
    - **documentation:** https://webapi.timedoctor.com/doc#webandapp#get--v1.1-companies-{company_id}-webandapp
    - **date:** yes

#### Date settings (`date_settings`)

A start and end date for `worklogs` and `websites and applications` objects. Both start date and end date support relative date specification in format like `2 days ago`, `3 months ago`, `a year ago`, etc; or standard `YYYY-MM-DD` format can be used. For full list of supported formats visit [`dateparser` library documentation](https://dateparser.readthedocs.io/en/latest/).

### Output

All tables are loaded incrementally into storage with primary keys set.

## Development

For running the extractor locally, use following commands to build and run the container:

```
docker-compose build dev
docker-compose run --rm dev
```

