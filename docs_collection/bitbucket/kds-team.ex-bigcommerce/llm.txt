Directory structure:
└── kds_consulting_team-kds-team.ex-bigcommerce/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── TEMPLATE_README.md
    ├── bitbucket-pipelines.yml
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── .style.yapf
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── uiOptions.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── client.py
    │   ├── component.py
    │   ├── csv_table.py
    │   └── data_processing.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
File: README.md
================================================
# BigCommerce Extractor
This extractor downloads data about brands, customers, orders and products in your store.

**Table of contents:**

[TOC]

<!-- ## Functionality notes -->

## Prerequisites
You must create a V2/V3 API access token with read-only OAuth scope and find your API path. Both can be accomplished by folowing [this guide](https://support.bigcommerce.com/s/article/Store-API-Accounts?language=en_US#creating).

<!-- ## Features

| **Feature**             | **Note**                                      |
|-------------------------|-----------------------------------------------|
| Generic UI form         | Dynamic UI form                               |
| Row Based configuration | Allows structuring the configuration in rows. |
| oAuth                   | oAuth authentication enabled                  |
| Incremental loading     | Allows fetching data in new increments.       |
| Backfill mode           | Support for seamless backfill setup.          |
| Date range filter       | Specify date range.                           |
 -->

## Supported endpoints
- `v2/orders` and `v2/orders/{order_id}/products`
- `v3/customers`
- `v3/catalog/brands`
- `v3/catalog/products`

If you need more endpoints, please submit [a feature request](https://keboola.atlassian.net/servicedesk/customer/portal/3/group/4/create/41)

## Configuration

### Global configuraiton
 - API Path (api_path) - [REQ] Your API base path. (See [Prerequisites](#prerequisites) for instructions on how to obtain it.)
 - Access Token (#access_token) - [REQ] Your API access token. (See [Prerequisites](#prerequisites) for instructions on how to obtain it.)

### Row configuration
 - Endpoints (endpoints) - [REQ] Select the data you wish to download. This must be either of these:
    - **Brands** to download [data about brands](https://developer.bigcommerce.com/api-reference/c2610608c20c8-get-all-brands#response-body).
    - **Customers** to download [data about customers](https://developer.bigcommerce.com/api-reference/761ec193054b6-get-all-customers#response-body).
    - **Orders** to download [data about orders](https://developer.bigcommerce.com/api-reference/82f91b58d0c98-get-all-orders#response-body) and [their products](https://developer.bigcommerce.com/api-reference/3b4dfef625708-list-order-products#response-body).
    - **Products** to download [data about products](https://developer.bigcommerce.com/api-reference/4101d472a814d-get-all-products#response-body) (in your entire catalogue).
 - Sync Options (sync_options) [OPT] - Options pertaining only to time bound data extraction:
    - Date From (date_from) - [REQ] Date from which data is downloaded (i.e. only data last modified after this are downloaded). Either date in `YYYY-MM-DD` format or dateparser string i.e. `5 days ago`, `1 month ago`, `yesterday`, etc. You can also set this as `last run`, which will fetch data from the last run of the component; if no previous successful run exists, all data up to specified Date To will be downloaded.
    - Date To (date_to) - [REQ] Date to which data is downloaded (i.e. only data last modified before this are downloaded). Either date in `YYYY-MM-DD` format or dateparser string i.e. `5 days ago`, `1 week ago`, `today`, etc.
 - Destination (destination) - [REQ] Options specifying how to save extracted data into Keboola Storage:
    - Load Type (load_type) - [REQ] If Full load is used, the destination table will be overwritten every run. If Incremental load is used, data will be upserted into the destination table.

### Sample Configuration
This sample configuration will download orders and their products modified after the last component run up to now, and upsert the resultant data into the Keboola Storage tables called `orders` and `order_products` respectively.
```json
{
  "#access_token": "CENSORED",
  "api_path": "https://api.bigcommerce.com/stores/CENSORED/v3/",
  "endpoints": "orders",
  "sync_options": {
    "date_from": "last run",
    "date_to": "now"
  },
  "destination": {
    "load_type": "incremental_load"
  }
}
```

## Output
The output of each configuration row is 1 to N tables with hardcoded name(s) as specified below for each case of the Endpoints row configuration option. Tables are **not** created if they would end up empty.

<!-- List of tables, foreign keys, schema. -->
### Brands
Brands are extracted as a table called `brands` that contains all [the fields the API provides](https://developer.bigcommerce.com/api-reference/c2610608c20c8-get-all-brands#response-body) flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of only the column `id`.

### Customers
Customers are extracted as a table called `customers` that contains all [the fields the API provides](https://developer.bigcommerce.com/api-reference/761ec193054b6-get-all-customers#response-body) flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of only the column `id`.

### Orders
Orders (from the entire catalogue) are extracted as a table called `orders` that contains all [the fields the API provides](https://developer.bigcommerce.com/api-reference/82f91b58d0c98-get-all-orders#response-body) flattened as columns (with the underscore `_` used as a separator) as well as their Order Products as a table called `order_products` (also with [all the fields the API provides](https://developer.bigcommerce.com/api-reference/3b4dfef625708-list-order-products#response-body) and flattened).

The primary key is composed of only the column `id` for the table `orders` and of the combination of columns `id` and `order_id` for the table `order_products`.

### Products
Products (from the entire catalogue) are extracted as a table called `products` that contains all [the fields the API provides](https://developer.bigcommerce.com/api-reference/4101d472a814d-get-all-products#response-body) flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of only the column `id`.

## Development

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in
the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## Integration

For information about deployment and integration with KBC, please refer to the
[deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)


================================================
File: Dockerfile
================================================
FROM python:3.10-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install --upgrade pip

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
File: TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
File: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # run integration test
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP 912445705 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
File: requirements.txt
================================================
keboola.component==1.4.0
keboola.utils
keboola.http-client
keboola.csvwriter
mock
freezegun
backoff



================================================
File: .style.yapf
================================================
[style]
based_on_style = google
spaces_before_comment = 4
indent_width = 4
split_before_logical_operator = false
column_limit = 120
BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF = false
SPLIT_BEFORE_EXPRESSION_AFTER_OPENING_PAREN = false


================================================
File: component_config/component_long_description.md
================================================
This extractor downloads data about brands, customers, orders and products in your [BigCommerce](https://www.bigcommerce.com/) store.

### Prerequisites
You must create a V2/V3 API access token with read-only OAuth scope and find your API path. Both can be accomplished by following [this guide](https://support.bigcommerce.com/s/article/Store-API-Accounts?language=en_US#creating).

### Supported endpoints
- `v2/orders` and `v2/orders/{order_id}/products`
- `v3/customers`
- `v3/catalog/brands`
- `v3/catalog/products`

If you need more endpoints, please submit [a feature request](https://keboola.atlassian.net/servicedesk/customer/portal/3/group/4/create/41)



================================================
File: component_config/component_short_description.md
================================================
Big Commerce helps you create and manage your own online store. It provides you with a powerful platform to build an
e-commerce website and offers a wide range of tools and features to help you succeed.


================================================
File: component_config/configRowSchema.json
================================================
{
    "type": "object",
    "title": "BigCommerce Extractor Row Configuration",
    "required": [
        "endpoints",
        "destination"
    ],
    "properties": {
        "endpoints": {
            "title": "Endpoints",
            "description": "Select the data you wish to download.",
            "type": "string",
            "enum": [
                "brands",
                "customers",
                "orders",
                "products"
            ],
            "options": {
                "enum_titles": [
                    "Brands",
                    "Customers",
                    "Orders",
                    "Products"
                ]
            },
            "propertyOrder": 10
        },
        "sync_options": {
            "options": {
                "dependencies": {
                    "endpoints": [
                        "customers",
                        "orders",
                        "products"
                    ]
                }
            },
            "type": "object",
            "title": "Sync Options",
            "propertyOrder": 20,
            "required": [
                "date_from",
                "date_to"
            ],
            "properties": {
                "date_from": {
                    "type": "string",
                    "title": "Date From",
                    "default": "last run",
                    "description": "Date from which data is downloaded (i.e. only data last modified after this are downloaded). Either date in `YYYY-MM-DD` format or dateparser string i.e. `5 days ago`, `1 month ago`, `yesterday`, etc. You can also set this as `last run`, which will fetch data from the last run of the component; if no previous successful run exists, all data up to specified Date To will be downloaded.",
                    "propertyOrder": 20
                },
                "date_to": {
                    "type": "string",
                    "title": "Date To",
                    "default": "now",
                    "description": "Date to which data is downloaded (i.e. only data last modified before this are downloaded). Either date in `YYYY-MM-DD` format or dateparser string i.e. `5 days ago`, `1 week ago`, `today`, etc.",
                    "propertyOrder": 30
                }
            }
        },
        "destination": {
            "title": "Destination",
            "type": "object",
            "propertyOrder": 400,
            "required": [
                "load_type"
            ],
            "properties": {
                "load_type": {
                    "type": "string",
                    "enum": [
                        "full_load",
                        "incremental_load"
                    ],
                    "options": {
                        "enum_titles": [
                            "Full Load",
                            "Incremental Load"
                        ]
                    },
                    "default": "incremental_load",
                    "title": "Load Type",
                    "description": "If Full load is used, the destination table will be overwritten every run. If Incremental load is used, data will be upserted into the destination table.",
                    "propertyOrder": 20
                }
            }
        }
    }
}


================================================
File: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "BigCommerce Extractor Configuration",
  "required": [
    "api_path",
    "#access_token"
  ],
  "properties": {
    "api_path": {
      "title": "API Path",
      "type": "string",
      "propertyOrder": 10,
      "description": "Your API base path. It must look like \"https://api.bigcommerce.com/stores/123example/v2\". For more information on API token creation follow <a href=\"https://support.bigcommerce.com/s/article/Store-API-Accounts?language=en_US#creating\">this guide</a>.",
      "pattern": "^https:\\/\\/api\\.bigcommerce\\.com\\/stores\\/(\\w+)(\\/(v\\d)\\/?)?$",
      "options": {
        "inputAttributes": {
          "placeholder": "https://api.bigcommerce.com/stores/123example/v2"
        }
      }
    },
    "#access_token": {
      "title": "Access Token",
      "type": "string",
      "format": "password",
      "propertyOrder": 20,
      "description": "Your API access token. For more information on API token creation follow <a href=\"https://support.bigcommerce.com/s/article/Store-API-Accounts?language=en_US#creating\">this guide</a>."
    },
    "test_connection": {
      "type": "button",
      "format": "test-connection",
      "propertyOrder": 200
    }
  }
}


================================================
File: component_config/configuration_description.md
================================================
This extractor downloads data about brands, customers, orders and products in your store.

You must create a V2/V3 API access token with read-only OAuth scope and find your API path. Both can be accomplished by folowing [this guide](https://support.bigcommerce.com/s/article/Store-API-Accounts?language=en_US#creating).


================================================
File: component_config/logger
================================================
gelf


================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
File: component_config/uiOptions.json
================================================
[
    "genericDockerUI",
    "genericDockerUI-rows"
]


================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"




================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

echo "Updating UI helpers to use"
value=`cat component_config/uiOptions.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} uiOptions --value="$value"
else
    echo "uiOptions is empty!"
fi


================================================
File: src/client.py
================================================
import logging
from datetime import datetime
from typing import Iterator, Optional, Dict
import backoff

from keboola.component import UserException
from keboola.http_client.http import HttpClient
from requests import HTTPError


BASE_URL = "https://api.bigcommerce.com/stores"

DEFAULT_HTTP_HEADER = {"Content-Type": "application/json", "Accept": "application/json"}

DEFAULT_PAGE_SIZE = 250

ENDPOINT_ORDERS = "v2/orders"
ENDPOINT_CUSTOMERS = "v3/customers"
ENDPOINT_BRANDS = "v3/catalog/brands"
ENDPOINT_PRODUCTS = "v3/catalog/products"


def auth_header(access_token: str):
    return {'X-Auth-Token': access_token}


class BigCommerceClient(HttpClient):
    def __init__(self, access_token: str, store_hash: str) -> None:
        self.access_token = access_token
        self.store_hash = store_hash
        base_url = f"{BASE_URL}/{self.store_hash}"
        super().__init__(base_url, auth_header=auth_header(self.access_token), default_http_header=DEFAULT_HTTP_HEADER)

    def test_connection(self):
        """
        Test connection / authorization.
        Raises UserException when invalid.
        Returns:
        """
        # adjust temporarily max retries
        orig_retries = self.max_retries
        self.max_retries = 1
        try:
            list(self.get_brands(limit=1, test_run=True))
            list(self.get_orders(limit=1, test_run=True))
            list(self.get_customers(limit=1, test_run=True))
            list(self.get_products(limit=1, test_run=True))
            self.max_retries = orig_retries
        except UserException as e:
            raise e

    def _handle_pagination(self,
                           endpoint_path: str,
                           limit: int,
                           page: Optional[int] = None,
                           params: dict = None,
                           test_run: bool = False,
                           **kwargs) -> Iterator[dict] | dict:
        """
        If start is set (not None), returns the raw response JSON as Dict,
        otherwise returns iterator over all elements.

        Args:
            endpoint_path:
            limit:
            page:
            params:
            test_run: Only one page returned if true
            **kwargs:

        Returns:

        """
        if params is None:
            params = dict()
        assert limit > 0
        if not test_run:
            logging.info(f"Downloading data from API endpoint: {endpoint_path.split('?')[0]}")
        params["limit"] = limit
        if isinstance(page, int):
            assert page > 0
            params["page"] = page
            return self.get(params=params, **kwargs)
        params["page"] = 1

        def generator():
            total_elements_downloaded = 0
            all_pages_handled = False
            while not all_pages_handled:
                response = self._get_handle_error(endpoint_path=endpoint_path, params=params, **kwargs)
                response.raise_for_status()
                next_page: dict | list = response.json() if response.text else []
                if isinstance(next_page, dict):
                    elements: list[dict] = next_page["data"]
                    paging_info: dict[str, int | dict[str, str]] = next_page["meta"]["pagination"]
                    total_elements: int = paging_info.get("total")
                elif isinstance(next_page, list):
                    elements: list[dict] = next_page
                    total_elements = None
                else:
                    raise Exception("Unexpected request result")
                yield from elements
                actual_page_size = len(elements)

                if not test_run:
                    logging.info(
                        f"Dowloaded elements {total_elements_downloaded} "
                        f"to {total_elements_downloaded + actual_page_size}."
                    )
                total_elements_downloaded += actual_page_size
                if total_elements:
                    remaining_elements = total_elements - total_elements_downloaded
                    if remaining_elements and not test_run:
                        logging.info(f"{remaining_elements} remaining.")
                all_pages_handled = bool((total_elements and total_elements_downloaded >= total_elements) or
                                         (not total_elements and actual_page_size < limit) or test_run)
                params["page"] += 1

        return generator()

    @backoff.on_exception(backoff.expo, (HTTPError, ConnectionError), max_tries=5)
    def _get_handle_error(self, endpoint_path: Optional[str] = None, params: Dict = None, **kwargs):
        """
        Get request and handle errors.
        Args:
            endpoint_path:
            params:
            **kwargs:

        Returns: requests.Response
        """
        response = self.get_raw(endpoint_path=endpoint_path, params=params, **kwargs)
        try:
            response.raise_for_status()
            return response
        except HTTPError as e:
            if response.status_code == 401:
                raise UserException("Unauthorized, please check your API token or allowed scopes.") from e
            elif response.status_code == 404:
                raise UserException("The URL is invalid. Please check the API Path.") from e
            else:
                raise e
        except ConnectionError as e:
            raise UserException("Error connecting to server after 5 retries.") from e

    def get_orders(self,
                   min_date_modified: Optional[datetime] = None,
                   max_date_modified: Optional[datetime] = None,
                   limit: int = DEFAULT_PAGE_SIZE,
                   page: Optional[int] = None,
                   test_run: bool = False):
        params = {}
        if min_date_modified:
            params["min_date_modified"] = min_date_modified.isoformat(timespec="milliseconds")
        if max_date_modified:
            params["max_date_modified"] = max_date_modified.isoformat(timespec="milliseconds")
        return self._handle_pagination(endpoint_path=ENDPOINT_ORDERS, limit=limit, page=page, params=params,
                                       test_run=test_run)

    def get_order_products(self, order_id: int, limit: int = DEFAULT_PAGE_SIZE, page: Optional[int] = None,
                           test_run: bool = False):
        endpoint_path = f"{ENDPOINT_ORDERS}/{order_id}/products"
        return self._handle_pagination(endpoint_path=endpoint_path, limit=limit, page=page, test_run=test_run)

    def get_customers(self,
                      min_date_modified: Optional[datetime] = None,
                      max_date_modified: Optional[datetime] = None,
                      limit: int = DEFAULT_PAGE_SIZE,
                      page: Optional[int] = None,
                      test_run: bool = False):
        params = {}
        if min_date_modified:
            params["date_modified:min"] = min_date_modified.isoformat(timespec="milliseconds")
        if max_date_modified:
            params["date_modified:max"] = max_date_modified.isoformat(timespec="milliseconds")
        return self._handle_pagination(endpoint_path=ENDPOINT_CUSTOMERS, limit=limit, page=page, params=params,
                                       test_run=test_run)

    def get_products(self,
                     min_date_modified: Optional[datetime] = None,
                     max_date_modified: Optional[datetime] = None,
                     limit: int = DEFAULT_PAGE_SIZE,
                     page: Optional[int] = None,
                     test_run: bool = False):
        params = {}
        if min_date_modified:
            params["date_modified:min"] = min_date_modified.date().isoformat()
        if max_date_modified:
            params["date_modified:max"] = max_date_modified.date().isoformat()
        return self._handle_pagination(endpoint_path=ENDPOINT_PRODUCTS, limit=limit, page=page, params=params,
                                       test_run=test_run)

    def get_brands(self, limit: int = DEFAULT_PAGE_SIZE, page: Optional[int] = None, test_run: bool = False):
        return self._handle_pagination(endpoint_path=ENDPOINT_BRANDS, limit=limit, page=page, test_run=test_run)



================================================
File: src/component.py
================================================
import logging
import re
from datetime import datetime, timezone
from enum import Enum, unique
from itertools import chain
from typing import Iterable, Iterator, Optional

from dateparser import parse
from keboola.component.base import ComponentBase, sync_action
from keboola.component.exceptions import UserException

from client import BigCommerceClient
from data_processing import create_table

# Global config keys:
KEY_DEBUG = "debug"
KEY_API_PATH = "api_path"
KEY_ACCESS_TOKEN = "#access_token"

# Row config keys:
KEY_ENDPOINTS = "endpoints"
KEY_SYNC_OPTIONS = "sync_options"
KEY_DESTINATION = "destination"

# Destination config dict params:
KEY_LOAD_TYPE = "load_type"

# Sync options config dict params:
KEY_DATE_FROM = "date_from"
KEY_DATE_TO = "date_to"

# Config dict constants:
VAL_LAST_RUN = "last run"
VAL_NONE = "none"

# State keys:
KEY_LAST_RUN_DATETIME = "last_run_downloaded_data_up_to_datetime"


# Row config enums:
@unique
class LoadType(Enum):
    FULL = "full_load"
    INCREMENTAL = "incremental_load"


@unique
class Endpoints(Enum):
    BRANDS = "brands"
    CUSTOMERS = "customers"
    ORDERS = "orders"
    PRODUCTS = "products"


# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = (KEY_ACCESS_TOKEN, KEY_API_PATH, KEY_ENDPOINTS, KEY_DESTINATION)
REQUIRED_IMAGE_PARS = []

# Other constants:
SYNC_OPTIONS_NEEDED_ENDPOINTS = (Endpoints.CUSTOMERS, Endpoints.ORDERS, Endpoints.PRODUCTS)
API_PATH_RE = re.compile(r"^https:\/\/api\.bigcommerce\.com\/stores\/(\w+)(\/(v\d)\/?)?$")


class BigCommerceExtractor(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self,
                 data_path_override: Optional[str] = None,
                 required_parameters: Optional[list] = None,
                 required_image_parameters: Optional[list] = None):
        super().__init__(data_path_override, required_parameters, required_image_parameters)

        params: dict = self.configuration.parameters

        self.debug = bool(params.get(KEY_DEBUG))

        access_token: str = params[KEY_ACCESS_TOKEN]
        api_path: str = params[KEY_API_PATH]
        api_path_match = API_PATH_RE.match(api_path)
        if api_path_match:
            store_hash: str = api_path_match.group(1)
        else:
            raise UserException(
                "Invalid API Path provided. It must look like \"https://api.bigcommerce.com/stores/123example/v2\".")
        self.client = BigCommerceClient(access_token=access_token, store_hash=store_hash)

        self.endpoints: Endpoints
        self.incremental: bool
        self.sync_options: Optional[dict] = None

        self.tmp_state = self.get_state_file()

    def run(self):
        """
        Main execution code
        """
        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        self._init_parameters()
        if self.sync_options:
            min_date_modified, max_date_modified = self.handle_sync_options(self.sync_options)
        elif self.endpoints in SYNC_OPTIONS_NEEDED_ENDPOINTS:
            raise UserException("Sync Options must be defined.")

        self.client.test_connection()
        if self.endpoints is Endpoints.ORDERS:
            order_ids = self.extract_orders_and_return_ids(min_date_modified=min_date_modified,
                                                           max_date_modified=max_date_modified)
            self.extract_order_products(order_ids)
        elif self.endpoints is Endpoints.CUSTOMERS:
            self.extract_customers(min_date_modified=min_date_modified, max_date_modified=max_date_modified)
        elif self.endpoints is Endpoints.PRODUCTS:
            self.extract_products(min_date_modified=min_date_modified, max_date_modified=max_date_modified)
        elif self.endpoints is Endpoints.BRANDS:
            self.extract_brands()
        else:
            raise Exception("Unexpected execution branch.")

        if self.tmp_state:
            self.write_state_file(self.tmp_state)

    def _init_parameters(self):
        params = self.configuration.parameters
        self.endpoints = Endpoints(params[KEY_ENDPOINTS])
        self.incremental = LoadType(params[KEY_DESTINATION][KEY_LOAD_TYPE]) is LoadType.INCREMENTAL
        self.sync_options: Optional[dict] = params.get(KEY_SYNC_OPTIONS)

    @sync_action('testConnection')
    def _test_connection_action(self):
        """
        Sync action triggered from the UI
        Returns:

        """
        self.validate_configuration_parameters([KEY_API_PATH, KEY_ACCESS_TOKEN])

        self.client.test_connection()

    def handle_sync_options(self, sync_options: dict):
        last_run_datetime_str: Optional[str] = self.tmp_state.get(KEY_LAST_RUN_DATETIME, VAL_NONE)
        date_from: str = sync_options[KEY_DATE_FROM]
        date_to: str = sync_options[KEY_DATE_TO]
        if date_from == VAL_LAST_RUN:
            date_from = last_run_datetime_str

        if date_from != VAL_NONE:
            min_date_modified = parse(date_from)
            if not min_date_modified:
                raise UserException(f"Date From parameter could not be parsed: '{date_from}' "
                                    "Please check the syntax.")
        else:
            min_date_modified = None

        if date_to != VAL_NONE:
            max_date_modified = parse(date_to)
            if not max_date_modified:
                raise UserException(f"Date To parameter could not be parsed: '{date_to}' "
                                    "Please check the syntax.")
        else:
            max_date_modified = None

        self.tmp_state[KEY_LAST_RUN_DATETIME] = datetime.now(tz=timezone.utc).isoformat(timespec="seconds")
        return min_date_modified, max_date_modified

    def extract_orders_and_return_ids(self,
                                      min_date_modified: Optional[datetime] = None,
                                      max_date_modified: Optional[datetime] = None) -> Iterator[int]:
        orders = self.client.get_orders(min_date_modified=min_date_modified, max_date_modified=max_date_modified)
        orders_table = create_table(records=orders, table_name="orders", primary_key=["id"])
        orders_table.save_as_csv_with_manifest(self, incremental=self.incremental, include_csv_header=self.debug)
        return (order["id"] for order in orders_table.get_refreshed_records_iterator())

    def extract_order_products(self, order_ids: Iterable[int]):
        order_ids = list(order_ids)
        order_products = chain.from_iterable(self.client.get_order_products(order_id) for order_id in order_ids)
        order_products_table = create_table(records=order_products,
                                            table_name="order_products",
                                            primary_key=["id", "order_id"],
                                            delete_where_spec={
                                                "column": "order_id",
                                                "operator": "eq",
                                                "values": order_ids
                                            })
        order_products_table.save_as_csv_with_manifest(self,
                                                       incremental=self.incremental,
                                                       include_csv_header=self.debug)

    def extract_customers(self,
                          min_date_modified: Optional[datetime] = None,
                          max_date_modified: Optional[datetime] = None):
        customers = self.client.get_customers(min_date_modified=min_date_modified, max_date_modified=max_date_modified)
        customers_table = create_table(records=customers, table_name="customers", primary_key=["id"])
        customers_table.save_as_csv_with_manifest(self, incremental=self.incremental, include_csv_header=self.debug)

    def extract_products(self,
                         min_date_modified: Optional[datetime] = None,
                         max_date_modified: Optional[datetime] = None):
        products = self.client.get_products(min_date_modified=min_date_modified, max_date_modified=max_date_modified)
        products_table = create_table(records=products, table_name="products", primary_key=["id"])
        products_table.save_as_csv_with_manifest(self, incremental=self.incremental, include_csv_header=self.debug)

    def extract_brands(self):
        brands = self.client.get_brands()
        brands_table = create_table(records=brands, table_name="brands", primary_key=["id"])
        brands_table.save_as_csv_with_manifest(self, incremental=self.incremental, include_csv_header=self.debug)


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = BigCommerceExtractor()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
File: src/csv_table.py
================================================
from dataclasses import dataclass
from itertools import chain
import logging
from typing import Collection, Iterable, Iterator, Optional, Sequence
import os
import csv

from keboola.component.base import ComponentBase
from keboola.component.dao import TableMetadata
from keboola.csvwriter import ElasticDictWriter


@dataclass(slots=True)
class Table:
    name: str
    columns: Optional[list[str]]
    primary_key: list[str]
    records: Iterable[dict]
    metadata: Optional[TableMetadata] = None
    delete_where_spec: Optional[dict] = None
    file_path: Optional[str] = None
    _saved: bool = False
    _header_included: bool = False
    _is_empty: Optional[bool] = None

    def _is_empty_internal(self):
        if self._saved:    # Empty tables will never be saved.
            return False
        invalid_columns = not self.columns
        if invalid_columns:
            return True
        if isinstance(self.records, Collection):
            return len(self.records) > 0
        records_iterator = iter(self.records)
        test_record = next(records_iterator, None)
        if test_record is None:
            return True
        else:
            self.records = chain((test_record,), records_iterator)
            return False

    @property
    def is_empty(self):
        if self._is_empty is None:
            self._is_empty = self._is_empty_internal()
        return self._is_empty

    def save_as_csv_with_manifest(self,
                                  component: ComponentBase,
                                  incremental: bool,
                                  include_csv_header: bool = False,
                                  overwrite=False):
        if self._saved and not overwrite:
            logging.debug(f"Table already saved, not overwriting. Table: {self}")
            return
        if self.is_empty:
            logging.warning(f"Attempting to save an empty table{' increment' if incremental else ''},"
                            f" nothing will be loaded into table '{self.name}'.")
            return

        table_def = component.create_out_table_definition(name=f"{self.name}.csv",
                                                          is_sliced=False,
                                                          primary_key=self.primary_key,
                                                          columns=self.columns,
                                                          incremental=incremental,
                                                          table_metadata=self.metadata,
                                                          delete_where=self.delete_where_spec)
        os.makedirs(component.tables_out_path, exist_ok=True)
        self.file_path = table_def.full_path
        with ElasticDictWriter(self.file_path, dialect='kbc', fieldnames=table_def.columns.copy()) as csv_writer:
            if include_csv_header:
                csv_writer.writeheader()
                self._header_included = True
            csv_writer.writerows(self.records)
        self.columns = table_def.columns = csv_writer.fieldnames
        component.write_manifest(table_def)
        self._saved = True

    def get_refreshed_records_iterator(self) -> Iterator[dict]:
        if isinstance(self.records, Sequence) or self.is_empty:
            return iter(self.records)    # No need to do anything, we can just iterate over records again
        # Records are not directly recoverable, we need to read them from the created CSV:
        assert self._saved

        def generator():
            with open(self.file_path, "r") as f:
                csv_reader = csv.DictReader(f, fieldnames=self.columns, dialect='kbc')
                if self._header_included:
                    next(csv_reader)    # skipping CSV header
                yield from csv_reader

        self.records: Iterable[dict] = generator()
        return iter(self.records)



================================================
File: src/data_processing.py
================================================
from itertools import chain
import logging
from typing import Callable, Iterable, Mapping, MutableMapping, Optional

from keboola.utils.header_normalizer import DefaultHeaderNormalizer

from csv_table import Table

HEADER_NORMALIZER = DefaultHeaderNormalizer()


def rename_dict_keys(d: MutableMapping, key_name_mapping: Mapping):
    return {key_name_mapping.get(key, key): value for key, value in d.items()}


def flatten_dict(d: Mapping, parent_key: str = '', sep: str = '_'):
    items = []
    for k, v in d.items():
        new_key = parent_key + sep + k if parent_key else k
        if isinstance(v, MutableMapping):
            items.extend(flatten_dict(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)


def create_table(records: Iterable[dict],
                 table_name: str,
                 primary_key: list[str],
                 delete_where_spec: Optional[dict] = None,
                 record_processor: Callable[[dict], dict] = flatten_dict,
                 normalize_header: bool = True):
    records = iter(records)
    records_processed = (record_processor(d) for d in records)
    record_processed: dict = next(records_processed, None)
    if record_processed is None:
        logging.warning(f"API returned no records for output table '{table_name}'.")
        return Table(name=table_name, columns=None, primary_key=primary_key, records=records_processed)
    records_processed = chain((record_processed,), records_processed)
    columns = list(record_processed.keys())
    if normalize_header:
        denormalized_columns = columns
        columns = HEADER_NORMALIZER.normalize_header(columns)
        column_name_mapping = {
            denorm_name: norm_name
            for denorm_name, norm_name in zip(denormalized_columns, columns)
            if denorm_name != norm_name
        }
        records_processed = (rename_dict_keys(d, column_name_mapping) for d in records_processed)
    for pk in primary_key:
        if pk not in columns:
            raise ValueError(f"Invalid primary key. Primary key element '{pk}' not found in columns: {columns}.")
    return Table(name=table_name,
                 columns=columns,
                 primary_key=primary_key,
                 records=records_processed,
                 delete_where_spec=delete_where_spec)



================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import BigCommerceExtractor


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = BigCommerceExtractor()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


