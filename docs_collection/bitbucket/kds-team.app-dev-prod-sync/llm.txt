Directory structure:
└── kds_consulting_team-kds-team.app-dev-prod-sync/
    ├── README_template.md
    ├── flake8.cfg
    ├── deploy.sh
    ├── docker-compose.yml
    ├── src/
    │   ├── component.py
    │   └── kbc_scripts/
    │       ├── kbcapi_scripts.py
    │       └── __init__.py
    ├── bitbucket-pipelines.yml
    ├── tests/
    │   ├── test_component.py
    │   ├── test_storagetoken.py
    │   └── __init__.py
    ├── component_config/
    │   ├── logger
    │   ├── component_long_description.md
    │   ├── configuration_description.md
    │   ├── component_short_description.md
    │   ├── loggerConfiguration.json
    │   ├── configSchema.json
    │   ├── configRowSchema.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── tables/
    │       │   │   ├── test.csv
    │       │   │   └── test.csv.manifest
    │       │   └── files/
    │       │       └── order1.xml
    │       └── out/
    │           ├── tables/
    │           │   └── test.csv
    │           └── files/
    │               └── order1.xml
    ├── scripts/
    │   ├── update_dev_portal_properties.sh
    │   ├── run_kbc_tests.ps1
    │   ├── build_n_run.ps1
    │   └── build_n_test.sh
    ├── requirements.txt
    ├── docs/
    │   └── imgs/
    ├── Dockerfile
    ├── LICENSE.md
    └── README.md

================================================
File: /README_template.md
================================================
KBC Component
=============

Description

**Table of contents:**

[TOC]

Functionality notes
===================

Prerequisites
=============

Get the API token, register application, etc.

Features
========

| **Feature**             | **Note**                                      |
|-------------------------|-----------------------------------------------|
| Generic UI form         | Dynamic UI form                               |
| Row Based configuration | Allows structuring the configuration in rows. |
| oAuth                   | oAuth authentication enabled                  |
| Incremental loading     | Allows fetching data in new increments.       |
| Backfill mode           | Support for seamless backfill setup.          |
| Date range filter       | Specify date range.                           |

Supported endpoints
===================

If you need more endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/)

Configuration
=============

Param 1
-------

Param 2
-------

Output
======

List of tables, foreign keys, schema.

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the docker-compose file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)


================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example,
    venv,
    src/kbc_scripts
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /src/component.py
================================================
'''
Template Component main class.

'''
import datetime
import logging
import re
from dataclasses import dataclass
from typing import Optional, Dict, List

from dateutil import parser
from keboola.component.base import ComponentBase, UserException
from keboola.utils import helpers
from requests import HTTPError

from kbc_scripts import kbcapi_scripts

# configuration variables
KEY_TRANSFER_STATES = 'transfer_states'
DEFAULT_IGNORED_ROOT_PROPERTIES = ['authorization']
KEY_ORCHESTRATION_MAPPING = 'orchestration_mapping'
KEY_SKIPPED_COMPONENTS = 'skipped_components'
KEY_TOKENS_CACHE = 'storage_tokens_cache'
PROD_TO_DEV_MODE = 'prod_to_dev'
DEV_TO_PROD_MODE = 'dev_to_prod'
KEY_API_TOKEN = '#api_token'
KEY_MODE = 'mode'
KEY_REGION = 'region'

KEY_PROD_PROJ_ID = 'prod_id'
KEY_DEV_PROJ_ID = 'dev_id'
KEY_CONFIG_OVERRIDE = 'configuration_override'
KEY_NAME = 'name'
KEY_CFG_URL = 'config_url'
KEY_IGNORED_PROPERTIES = 'ignored_properties'
KEY_IGNORE_INACTIVE_ORCH = 'ignore_inactive_orchestration_updates'

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [KEY_API_TOKEN, KEY_MODE, KEY_REGION, KEY_PROD_PROJ_ID, KEY_DEV_PROJ_ID]
REQUIRED_IMAGE_PARS = []


@dataclass
class StorageToken:
    id: str
    token: str
    expires: str

    @classmethod
    def try_build_from_dict(cls, token_dict: dict) -> Optional['StorageToken']:
        if all(x in ['id', '#token', 'expires'] for x in token_dict):
            return cls(token_dict['id'], token_dict['#token'], token_dict['expires'])
        else:
            return None

    def is_expired(self):
        expiration_date = self._get_expires_timestamp()
        if not expiration_date:
            return True

        current = int(datetime.datetime.now().timestamp())
        expiration = expiration_date - current
        logging.debug(f"Token expiration: {expiration_date}, current_timestamp:{current}. Diff: {expiration}")

        if expiration <= (10 * 60):
            return True
        else:
            return False

    def _get_expires_timestamp(self) -> Optional[int]:

        if self.expires == '' or self.expires is None:
            return None
        else:
            return int(parser.parse(self.expires).timestamp())

    def to_dict(self):
        return {'id': self.id,
                '#token': self.token,
                'expires': self.expires}


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__(required_parameters=REQUIRED_PARAMETERS,
                         required_image_parameters=REQUIRED_IMAGE_PARS)

        # initialization
        params = self.configuration.parameters
        self.src_project_id, self.dst_project_id = self._get_project_ids()
        self.__token_cache: Dict[str, StorageToken] = self._build_token_cache()
        self.region = params[KEY_REGION]
        self.mange_token = params[KEY_API_TOKEN]
        self.run_mode = params[KEY_MODE]
        self.ignored_properties_cfg: dict = self._get_ignored_properties_dict()
        self.orchestration_mapping = self._retrieve_orchestration_mapping()
        self.ignore_inactive_orch = params.get(KEY_IGNORE_INACTIVE_ORCH, False)
        self.branch_mode = params.get("branch_mode", False)

        self.__source_token, self.__destination_token = None, None

        skipped_cfg = self.configuration.parameters[KEY_SKIPPED_COMPONENTS]
        self.skipped_component_ids = helpers.comma_separated_values_to_list(skipped_cfg)

    def run(self):
        '''
        Main execution code
        '''

        logging.warning(
            f'Running in mode {self.run_mode}, syncing from project {self.src_project_id} to project '
            f'{self.dst_project_id}')
        self._init_tokens()

        branch_id = None
        if self.branch_mode:
            branch_id = self._create_new_branch()

        src_components, src_orchestrations = self._get_all_component_configurations_split_by_type(
            project='source')
        src_components = self._filter_components(src_components)
        if 'orchestrator' in self.skipped_component_ids:
            src_orchestrations = {}
        for src_component in src_components:
            self.upsert_component_configurations_to_dst(component_id=src_component['id'],
                                                        src_configurations=src_component['configurations'],
                                                        branch_id=branch_id)
        # create linked transformations first
        # safe because KBC does not allow to nest deeper than 1
        orchestration_list = self._order_orchestration_by_link(src_orchestrations.get('configurations', []))
        self.upsert_orchestrations_to_dst(orchestration_list)

        # TODO: remove configurations

        self._store_state()

    def _order_orchestration_by_link(self, orchestrations: list):
        non_prio_list = orchestrations.copy()
        prio_list = []
        for c in orchestrations:
            for task in c['configuration'].get('tasks', []):
                if task.get('component', '') == 'orchestrator':
                    orchestration_id = task['actionParameters']['config']
                    cfg = self._pop_orchestration_id_from_list(non_prio_list, int(orchestration_id))
                    if cfg:
                        prio_list.append(cfg)
        prio_list.extend(non_prio_list)
        return prio_list

    def _pop_orchestration_id_from_list(self, orchestrations: list, orchestration_id):
        pop_index = None
        found_element = None
        for idx, o in enumerate(orchestrations):
            if int(o['id']) == orchestration_id:
                pop_index = idx
                break
        if pop_index:
            found_element = orchestrations.pop(pop_index)
        return found_element

    def _create_new_branch(self):
        description = self._build_change_description('')

        merge_message = self.configuration.parameters.get('merge_message', '')
        name = f'{merge_message}. Time: {datetime.datetime.utcnow().isoformat()}'
        branch_id = kbcapi_scripts.create_branch(self.__destination_token, self.region,
                                                 name, description)
        return branch_id

    def upsert_component_configurations_to_dst(self, component_id: str, src_configurations, branch_id=None):
        for src_config in src_configurations:
            dst_config = self._get_configuration(component_id, src_config['id'])

            root_config, row_configs = self._split_configuration_parts(src_config, dst_config)

            row_configs = self._filter_ignored_row_properties(dst_config, row_configs)
            root_config = self._filter_ignored_properties(dst_config, root_config)
            root_config = self._skip_auth_properties(root_config)

            logging.info(f"Updating component {component_id}, configuration ID {src_config['id']}")

            if root_config.get('update') and component_id == 'keboola.orchestrator' and self.ignore_inactive_orch:
                logging.warning(f'Ignoring disabled orchestration state, ID: {root_config["update"]["id"]}')
                root_config['update']['isDisabled'] = dst_config['isDisabled']

            # UPDATES
            self._update_destination_config(component_id, root_config['update'], mode='update', branch_id=branch_id)
            self._update_destination_rows(component_id, src_config['id'],
                                          row_configs['update'], mode='update', branch_id=branch_id)

            # CREATES
            self._update_destination_config(component_id, root_config['create'], mode='create', branch_id=branch_id)
            self._update_destination_rows(component_id, src_config['id'],
                                          row_configs['create'], mode='create', branch_id=branch_id)

    def _update_destination_rows(self, component_id, configuration_id, rows, mode='create', branch_id=None):
        """
        Updates rows in destination project
        Args:
            component_id:
            configuration_id:
            rows:

        Returns:

        """
        # TODO: output log
        for row in rows:
            change_description = self._build_change_description(f'Row {row["id"]} {mode}d')
            state = row.get('state', {}) if self.configuration.parameters.get(KEY_TRANSFER_STATES) else None
            if mode == 'update':
                kbcapi_scripts.update_config_row(token=self.__destination_token,
                                                 region=self.region,
                                                 component_id=component_id,
                                                 configurationId=configuration_id,
                                                 row_id=row['id'],
                                                 name=row['name'],
                                                 state=state,
                                                 description=row['description'],
                                                 configuration=row['configuration'],
                                                 changeDescription=change_description,
                                                 branch_id=branch_id,
                                                 is_disabled=row['isDisabled'])
            elif mode == 'create':
                kbcapi_scripts.create_config_row(token=self.__destination_token,
                                                 region=self.region,
                                                 component_id=component_id,
                                                 configuration_id=configuration_id,
                                                 rowId=row['id'],
                                                 name=row['name'],
                                                 state=state,
                                                 description=row['description'],
                                                 configuration=row['configuration'],
                                                 changeDescription=change_description,
                                                 branch_id=branch_id,
                                                 isDisabled=row['isDisabled'])

    def _update_destination_config(self, component_id, configuration, mode='create', branch_id=None):
        """
        Updates rows in destination project
        Args:
            component_id:
            configuration_id:
            configuration:

        Returns:

        """
        # TODO: output log
        if not configuration:
            return

        change_description = self._build_change_description(f'Config {mode}d')
        state = configuration.get('state', {}) if self.configuration.parameters.get(KEY_TRANSFER_STATES) else None
        if mode == 'update':
            kbcapi_scripts.update_config(token=self.__destination_token,
                                         region=self.region,
                                         component_id=component_id,
                                         configurationId=configuration['id'],
                                         name=configuration['name'],
                                         description=configuration['description'],
                                         configuration=configuration['configuration'],
                                         state=state,
                                         changeDescription=change_description,
                                         branch_id=branch_id,
                                         is_disabled=configuration['isDisabled'])
        elif mode == 'create':
            kbcapi_scripts.create_config(token=self.__destination_token,
                                         region=self.region,
                                         component_id=component_id,
                                         configurationId=configuration['id'],
                                         name=configuration['name'],
                                         description=configuration['description'],
                                         configuration=configuration['configuration'],
                                         state=state,
                                         changeDescription=change_description,
                                         branch_id=branch_id,
                                         is_disabled=configuration['isDisabled'])

    def _split_configuration_parts(self, src_configuration: dict, dst_configuration: dict):

        row_configs = {"update": [],
                       "create": []}
        root_config = {"update": None,
                       "create": None}

        if dst_configuration:
            dst_row_ids = [row['id'] for row in dst_configuration.get('rows', [])]
            for row in src_configuration.get('rows', []):
                if row['id'] in dst_row_ids:
                    row_configs['update'].append(row)
                else:
                    row_configs['create'].append(row)
            root_config['update'] = src_configuration

        else:
            root_config['create'] = src_configuration
            for row in src_configuration.get('rows', []):
                row_configs['create'].append(row)
        return root_config, row_configs

    def _skip_auth_properties(self, configuration: dict):
        create_config = configuration['create']
        if not create_config:
            return configuration

        if create_config.get('configuration', {}).get('authorization'):
            create_config['configuration']['authorization'] = {}
        return configuration

    def _filter_ignored_row_properties(self, dst_config, row_configs):
        """
        Change only updated (existing in remote) / newly created are transferred
        Args:
            dst_config:
            row_configs:

        Returns:

        """
        if not dst_config:
            return row_configs

        dst_rows = {k['id']: k for k in dst_config['rows']}
        new_cfg_rows = []

        # we know that rows in update mode are in remote config
        for row in row_configs['update']:
            config_key = self._build_config_key(dst_config['id'], row['id'])

            ignored_parameter_properties = self.ignored_properties_cfg.get(config_key, [])
            # add secret values
            ignored_parameter_properties.extend(self._retrieve_encrypted_properties(row))
            ignored_parameter_properties = [f'parameters.{p}' for p in ignored_parameter_properties]

            row = self._replace_ignored_properties(changed_config=row,
                                                   original_config=dst_rows[row['id']],
                                                   ignored_properties=ignored_parameter_properties)
            new_cfg_rows.append(row)
        row_configs['update'] = new_cfg_rows
        return row_configs

    def _filter_ignored_properties(self, dst_config, root_config):
        """
        Change only updated (existing in remote) / newly created are transferred
        Args:
            dst_config:
            root_config:

        Returns:

        """
        if not dst_config:
            return root_config
        configuration = root_config['update']
        key = self._build_config_key(configuration['id'])
        ignored_properties = []

        # ignore authentication (oAuth) by default
        if configuration['configuration'].get('authorization'):
            ignored_properties.append('authorization')

        ignored_parameter_properties = []
        ignored_parameter_properties.extend(self.ignored_properties_cfg.get(key, []))
        ignored_parameter_properties = [f'parameters.{p}' for p in ignored_parameter_properties]

        ignored_properties.extend(ignored_parameter_properties)
        # add secret values
        ignored_properties.extend([f'parameters.{p}' for p in self._retrieve_encrypted_properties(configuration)])

        row = self._replace_ignored_properties(changed_config=configuration,
                                               original_config=dst_config,
                                               ignored_properties=ignored_properties)
        root_config['update'] = row
        return root_config

    def _replace_ignored_properties(self, changed_config, original_config, ignored_properties):
        def find_value(element, config: dict):
            keys = element.split('.')
            rv = config.copy()

            for key in keys:
                try:
                    rv = rv[key]
                except KeyError:
                    logging.debug(f'Key {key} not found in {config} when looking up the value {element}')
                    break

            return rv

        def replace_value(element_path: str, dict_object: dict, value):
            """
            Inplace change dictionary element. Object position in hierarchy delimited by .
            e.g. config['configuration']['db'] => 'configuration.db'
            Args:
                element_path (str): element path, delimited by . E.g. 'configuration.db'
                dict_object (dict): dictionary object
                value: Value to put on the defined position

            Returns:

            """
            keys = element_path.split('.')

            rv = dict_object
            prev_object = dict_object
            for index, key in enumerate(keys):
                rv = rv.get(key)
                if index == len(keys) - 1:
                    # replace
                    prev_object[key] = value
                prev_object = prev_object[key]

            return dict_object

        if ignored_properties:

            for ignored_property_path in ignored_properties:
                ignored_property_path = f'configuration.{ignored_property_path}'
                original_value = find_value(ignored_property_path, original_config)
                changed_value = find_value(ignored_property_path, changed_config)

                if original_value and changed_value:
                    changed_config = replace_value(ignored_property_path, changed_config, original_value)

        return changed_config

    @staticmethod
    def _retrieve_encrypted_properties(configuration):
        def find_secret(path: str, config_part, current_key: str):
            if path:
                result_path = f'{path}.{current_key}'
            else:
                result_path = current_key
            if current_key.startswith('#'):
                secret_key_paths.append(result_path)

            elif isinstance(config_part, dict):
                for key, value in config_part.items():
                    find_secret(result_path, value, key)

        secret_key_paths = []
        parameters = configuration['configuration'].get('parameters', {})
        for par in parameters:
            find_secret('', parameters[par], par)

        return secret_key_paths

    def _get_ignored_properties_dict(self):
        cfg_override = self.configuration.parameters.get(KEY_CONFIG_OVERRIDE, [])
        ignored_dict = {}
        for c in cfg_override:
            config_id, row_id = self._parse_config_url(c[KEY_CFG_URL])
            key = self._build_config_key(config_id, row_id)
            ignored_dict[key] = [p.strip() for p in c[KEY_IGNORED_PROPERTIES].split(',')]
        return ignored_dict

    def _build_config_key(self, configuration_id: str, row_id: str = None):
        key = str(configuration_id)
        if row_id:
            key += f'.{row_id}'
        return key

    @staticmethod
    def _parse_config_url(cfg_url: str):
        config_id, row_id = None, None
        if not cfg_url.endswith('/'):
            cfg_url += '/'
        rows_match = r'.+\/(writers|extractors|applications)\/(.+\..+)\/(\d+)\/rows\/(\d+)'
        cfg_match = r'.+\/(writers|extractors|applications)\/(.+)?'

        match = re.match(cfg_match, cfg_url)
        if not match:
            raise UserException(f'Provided configuration URL is invalid: {cfg_url}')
        else:
            config_id = match.groups()[1].split('/')[1]

        match = re.match(rows_match, cfg_url)
        if match:
            row_id = match.groups()[3]
        return config_id, row_id

    def _get_configuration(self, component_id, configuration_id):
        configuration = None
        try:
            configuration = kbcapi_scripts.get_config_detail(self.__destination_token, self.region, component_id,
                                                             configuration_id)
        except HTTPError as e:
            if e.response.status_code != 404:
                raise e
        return configuration

    def _get_all_component_configurations_split_by_type(self, project='source'):
        """
        Separates orchestrations from normal components.

        Returns:

        """
        if project == 'source':
            token = self.__source_token
        else:
            token = self.__destination_token

        src_components = kbcapi_scripts.list_project_components(token, self.region,
                                                                include='configuration,rows,state')
        orchestrations = {}
        components = []
        for c in src_components:
            if c['id'] == 'orchestrator':
                orchestrations = c
            else:
                components.append(c)
        return components, orchestrations

    def _get_all_schedules(self, project='source'):
        """
        Get all schedules
        Returns:

        """
        if project == 'source':
            token = self.__source_token
        else:
            token = self.__destination_token

        return kbcapi_scripts.get_schedules(self.region, token)

    def _build_change_description(self, custom_text):
        if self.run_mode == DEV_TO_PROD_MODE:
            mode = 'SYNC FROM DEV'
        else:
            mode = 'SYNC FROM PROD'
        merge_message = self.configuration.parameters.get('merge_message', '')
        return f'{merge_message} - {mode}: {custom_text}, runID:{self.environment_variables.run_id}, ' \
               f'Time: {datetime.datetime.utcnow().isoformat()}'

    def _init_tokens(self):
        self.__source_token = self._init_project_storage_token(self.src_project_id)
        self.__destination_token = self._init_project_storage_token(self.dst_project_id)

    def _init_project_storage_token(self, project_id):
        project_pk = self._build_project_pk(project_id)

        if not self.configuration.parameters.get("branch_mode"):
            storage_token = self.__token_cache.get(project_pk)
        else:
            # use user master tokens in case of branch mode
            master_tokens = [self.configuration.parameters['master_tokens']['#dev_token'],
                             self.configuration.parameters['master_tokens']['#prod_token']]
            token_key: str = [t for t in master_tokens if t.startswith(project_id)][0]
            storage_token = StorageToken(token_key.split('-')[1], token_key, "2050-11-01T11:18:52+0100")

        if not storage_token or storage_token.is_expired():
            logging.info(f'Generating token for project {self.region}-{project_id}')
            try:
                token = kbcapi_scripts.generate_token('DEV/PROD Sync Application', self.mange_token,
                                                      project_id, self.region, manage_tokens=True)
            except HTTPError as e:
                if e.response.status_code == 401:
                    raise UserException("Cannot create Storage token. Invalid Manage token provided.")
                else:
                    raise

            storage_token = StorageToken(token['id'], token['token'], token['expires'])
            # update storage token
            self._update_storage_token_cache(project_pk, storage_token)

        return storage_token.token

    def _get_project_ids(self):
        mode = self.configuration.parameters[KEY_MODE]

        if mode == DEV_TO_PROD_MODE:
            src_project_id = self.configuration.parameters[KEY_DEV_PROJ_ID]
            dst_project_id = self.configuration.parameters[KEY_PROD_PROJ_ID]
        elif mode == PROD_TO_DEV_MODE:
            src_project_id = self.configuration.parameters[KEY_PROD_PROJ_ID]
            dst_project_id = self.configuration.parameters[KEY_DEV_PROJ_ID]
        else:
            raise UserException(
                f"Mode {mode} is invalid! Supported modes are '{DEV_TO_PROD_MODE}' and '{PROD_TO_DEV_MODE}'")
        return src_project_id, dst_project_id

    def _build_project_pk(self, project_id):
        return f'{self.region}-{project_id}'

    def _update_storage_token_cache(self, key, storage_token: StorageToken):
        self.__token_cache[key] = storage_token

    def _build_token_cache(self):
        cache = {}
        state_cache = self.get_state_file().get(KEY_TOKENS_CACHE, {})
        # fix ancient kbc bug
        if isinstance(state_cache, list):
            state_cache = {}

        for key, token_dict in state_cache.items():
            storage_token = StorageToken.try_build_from_dict(token_dict)
            if storage_token:
                cache[key] = storage_token
        return cache

    def _filter_components(self, components):
        return [c for c in components if c['id'] not in self.skipped_component_ids]

    def _store_state(self):
        state = {KEY_TOKENS_CACHE: self._get_token_cache_dict(),
                 KEY_ORCHESTRATION_MAPPING: self.orchestration_mapping}

        self.write_state_file(state)

    def _get_token_cache_dict(self):
        cache_dict = {}
        for key, token in self.__token_cache.items():
            cache_dict[key] = token.to_dict()
        return cache_dict

    def _replace_linked_orchestrations(self, orchestration_cfg: dict, project_pk):
        for task in orchestration_cfg.get('tasks', []):
            if task.get('component', '') == 'orchestrator':
                orchestration_id = task['actionParameters']['config']
                task['actionParameters']['config'] = self.orchestration_mapping.get(project_pk, {}).get(
                    str(orchestration_id))

    def upsert_orchestrations_to_dst(self, orchestration_cfgs: List[dict]):
        for cfg in orchestration_cfgs:
            project_pk = self._build_project_pk(self.src_project_id)
            if not cfg.get('id'):
                raise Exception(f'Orchestration config does not contain ID: {cfg}')
            existing_orchestration_id = self.orchestration_mapping.get(project_pk, {}).get(cfg['id'])
            cfg_pars = cfg['configuration']
            self._replace_linked_orchestrations(cfg_pars, project_pk)
            if existing_orchestration_id:
                logging.info(f"Updating orchestrator, source configuration ID {cfg['id']}")
                dst_configuration = self._get_configuration('orchestrator', existing_orchestration_id)

                if not dst_configuration:
                    logging.warning(
                        f"Matching orchestration ID {existing_orchestration_id} does not exist in the remote project "
                        f"{self._build_project_pk(self.dst_project_id)}!"
                        f"It was probably removed manually. Please recreate it or drop from state file.")
                    continue

                # ignore state
                if self.ignore_inactive_orch:
                    cfg_pars['active'] = dst_configuration['configuration']['active']

                kbcapi_scripts.update_orchestration(self.__destination_token, self.region,
                                                    dst_configuration['id'],
                                                    cfg['name'],
                                                    cfg['configuration']['tasks'],
                                                    active=cfg_pars.get('active'),
                                                    crontabRecord=cfg_pars.get('crontabRecord'),
                                                    crontabTimezone=cfg_pars.get('crontabTimezone'),
                                                    variableValuesId=cfg_pars.get('variableValuesId'),
                                                    variableValuesData=cfg_pars.get('variableValuesData')
                                                    )
            else:
                logging.info(f"Creating orchestrator, source configuration ID {cfg['id']}")
                new_orchestration = kbcapi_scripts.create_orchestration(self.__destination_token, self.region,
                                                                        cfg['name'],
                                                                        cfg['configuration']['tasks'],
                                                                        active=cfg_pars.get('active'),
                                                                        crontabRecord=cfg_pars.get('crontabRecord'),
                                                                        crontabTimezone=cfg_pars.get('crontabTimezone'),
                                                                        variableValuesId=cfg_pars.get(
                                                                            'variableValuesId'),
                                                                        variableValuesData=cfg_pars.get(
                                                                            'variableValuesData')
                                                                        )
                if not cfg_pars.get('active'):
                    # update activity because can't do on create
                    kbcapi_scripts.update_orchestration(self.__destination_token, self.region,
                                                        new_orchestration['id'],
                                                        cfg['name'],
                                                        cfg['configuration']['tasks'],
                                                        active=cfg_pars.get('active'))
                self._add_orchestration_mapping(cfg['id'], new_orchestration['id'])

    def _add_orchestration_mapping(self, src_id, dst_id):
        """
        Add mapping for both directions
        Args:
            src_id:
            dst_id:

        Returns:

        """
        # SRC direction
        project_pk = self._build_project_pk(self.src_project_id)
        if not self.orchestration_mapping.get(project_pk):
            self.orchestration_mapping[project_pk] = {}

        self.orchestration_mapping[project_pk][src_id] = dst_id

        # DST direction
        project_pk = self._build_project_pk(self.dst_project_id)
        if not self.orchestration_mapping.get(project_pk):
            self.orchestration_mapping[project_pk] = {}

        self.orchestration_mapping[project_pk][dst_id] = src_id

    def _retrieve_orchestration_mapping(self):
        return self.get_state_file().get(KEY_ORCHESTRATION_MAPPING) or {}


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        comp.run()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: /src/kbc_scripts/kbcapi_scripts.py
================================================
import json
import os
import time
import urllib

import requests
from kbcstorage.base import Endpoint
from kbcstorage.buckets import Buckets
from kbcstorage.tables import Tables

URL_SUFFIXES = {"US": ".keboola.com",
                "EU": ".eu-central-1.keboola.com",
                "AZURE-EU": ".north-europe.azure.keboola.com",
                "CURRENT_STACK": os.environ.get('KBC_STACKID', 'connection.keboola.com').replace('connection', '')}

"""
Various Adhoc scripts for KBC api manipulations.

"""


def run_config(component_id, config_id, token, region='US'):
    values = {
        "config": config_id
    }

    headers = {
        'Content-Type': 'application/json',
        'X-StorageApi-Token': token
    }
    response = requests.post('https://syrup' + URL_SUFFIXES[region] + '/docker/' + component_id + '/run',
                             data=json.dumps(values),
                             headers=headers)

    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def get_job_status(token, url):
    headers = {
        'Content-Type': 'application/json',
        'X-StorageApi-Token': token
    }
    response = requests.get(url, headers=headers)
    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def block_storage_job_until_completed(token, url):
    """
    Poll the API until the job is completed.
    Args:
        # job_id (str): The id of the job
    Returns:
        response_body: The parsed json from the HTTP response
            containing a storage Job.
    Raises:
        requests.HTTPError: If any API request fails.
    """
    retries = 1
    while True:
        job = get_job_status(token, url)
        if job['status'] in ('error', 'success'):
            return job
        retries += 1
        time.sleep(min(2 ** retries, 20))


def list_component_configurations(token, component_id, region='US'):
    cl = Endpoint('https://connection' + URL_SUFFIXES[region], 'components', token)
    url = '{}/{}/configs'.format(cl.base_url, component_id)
    return cl._get(url)


def list_project_components(token, region='US', component_type=None, include='configuration,rows,state'):
    cl = Endpoint('https://connection' + URL_SUFFIXES[region], 'components', token)
    url = cl.base_url
    params = {'componentType': component_type,
              'include': include}
    return cl._get(url, params)


def get_config_detail(token, region, component_id, config_id):
    """

    :param region: 'US' or 'EU'
    """
    cl = Endpoint('https://connection' + URL_SUFFIXES[region], 'components', token)
    url = '{}/{}/configs/{}'.format(cl.base_url, component_id, config_id)
    return cl._get(url)


def get_config_row_detail(token, region, component_id, config_id, row_id):
    """

    :param region: 'US' or 'EU'
    """
    cl = Endpoint('https://connection' + URL_SUFFIXES[region], 'components', token)
    url = f'{cl.base_url}/{component_id}/configs/{config_id}/rows/{row_id}'
    return cl._get(url)


def get_config_version(token, region, component_id, config_id, limit=10):
    """

    :param limit:
    :param token:
    :param config_id:
    :param component_id:
    :param region: 'US' or 'EU'
    """

    cl = Endpoint('https://connection' + URL_SUFFIXES[region], 'components', token)
    params = {"limit": limit}
    url = f'{cl.base_url}/{component_id}/configs/{config_id}/versions'
    return cl._get(url, params=params)


def get_config_rows(token, region, component_id, config_id):
    """
    Retrieves component's configuration detail.

    Args:
        component_id (str or int): The id of the component.
        config_id (int): The id of configuration
        region: 'US' or 'EU'
    Raises:
        requests.HTTPError: If the API request fails.
    """
    cl = Endpoint('https://connection' + URL_SUFFIXES[region], 'components', token)
    url = '{}/{}/configs/{}/rows'.format(cl.base_url, component_id, config_id)

    return cl._get(url)


def delete_config(token, region, component_id, configuration_id, branch_id=None, **kwargs):
    """
    Create a new table from CSV file.

    Args:
        component_id (str):
        configuration_id
        region: 'US' or 'EU'

    Returns:
        table_id (str): Id of the created table.

    Raises:
        requests.HTTPError: If the API request fails.
    """
    if not branch_id:
        enpoint_prefix = 'components'
    else:
        enpoint_prefix = f'branch/{branch_id}/components'

    cl = Endpoint('https://connection' + URL_SUFFIXES[region], enpoint_prefix, token)
    url = f'{cl.base_url}/{component_id}/configs/{configuration_id}'
    return cl._delete(url)


def create_config(token, region, component_id, name, description, configuration, configurationId=None, state=None,
                  changeDescription='', branch_id=None, is_disabled=False, **kwargs):
    """
    Create a new table from CSV file.

    Args:
        component_id (str):
        name (str): The new table name (only alphanumeric and underscores)
        configuration (dict): configuration JSON; the maximum allowed size is 4MB
        state (dict): configuration JSON; the maximum allowed size is 4MB
        changeDescription (str): Escape character used in the CSV file.
        region: 'US' or 'EU'
        is_disabled:

    Returns:
        table_id (str): Id of the created table.

    Raises:
        requests.HTTPError: If the API request fails.
    """
    if not branch_id:
        enpoint_prefix = 'components'
    else:
        enpoint_prefix = f'branch/{branch_id}/components'

    cl = Endpoint('https://connection' + URL_SUFFIXES[region], enpoint_prefix, token)
    url = '{}/{}/configs'.format(cl.base_url, component_id)
    parameters = {}
    if configurationId:
        parameters['configurationId'] = configurationId
    parameters['configuration'] = json.dumps(configuration)
    parameters['name'] = name
    parameters['description'] = description
    parameters['changeDescription'] = changeDescription
    parameters['isDisabled'] = str(is_disabled).lower()
    if state:
        parameters['state'] = json.dumps(state)
    header = {'Content-Type': 'application/x-www-form-urlencoded'}
    data = urllib.parse.urlencode(parameters)
    return cl._post(url, data=data, headers=header)


def update_config_state(token, region, component_id, configurationId, state, branch_id='default'):
    if not branch_id:
        branch_id = 'default'

    url = f'https://connection{URL_SUFFIXES[region]}/v2/storage/branch/{branch_id}' \
          f'/components/{component_id}/configs/' \
          f'{configurationId}/state'

    parameters = {}
    parameters['state'] = json.dumps(state)
    headers = {'Content-Type': 'application/x-www-form-urlencoded', 'X-StorageApi-Token': token}
    response = requests.put(url,
                            data=parameters,
                            headers=headers)
    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def update_config(token, region, component_id, configurationId, name, description='', configuration=None, state=None,
                  changeDescription='', branch_id=None, is_disabled=False, **kwargs):
    """
    Update table from CSV file.

    Args:
        component_id (str):
        name (str): The new table name (only alphanumeric and underscores)
        configuration (dict): configuration JSON; the maximum allowed size is 4MB
        state (dict): configuration JSON; the maximum allowed size is 4MB
        changeDescription (str): Escape character used in the CSV file.
        region: 'US' or 'EU'
        is_disabled:

    Returns:
        table_id (str): Id of the created table.

    Raises:
        requests.HTTPError: If the API request fails.
    """

    if not branch_id:
        url = f'https://connection{URL_SUFFIXES[region]}/v2/storage/components/{component_id}/configs/{configurationId}'
    else:
        url = f'https://connection{URL_SUFFIXES[region]}/v2/storage/branch/{branch_id}/components/{component_id}/configs/{configurationId}'
    parameters = {}
    parameters['configurationId'] = configurationId
    if configuration:
        parameters['configuration'] = json.dumps(configuration)
    parameters['name'] = name
    parameters['description'] = description
    parameters['changeDescription'] = changeDescription
    parameters['isDisabled'] = str(is_disabled).lower()
    if state is not None:
        update_config_state(token, region, component_id, configurationId, state, branch_id)
    headers = {'Content-Type': 'application/x-www-form-urlencoded'
        , 'X-StorageApi-Token': token}
    response = requests.put(url,
                            data=parameters,
                            headers=headers)

    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def clone_configuration(token, region, component_id, configuration_id, name, description=''):
    """
    Update table from CSV file.

    Args:
        component_id (str):
        name (str): The new config name (only alphanumeric and underscores)
        region: 'US' or 'EU'

    Returns:
        configuration_id (str): Id of the created config.

    Raises:
        requests.HTTPError: If the API request fails.
    """

    # get latest version
    versions = get_config_version(token, region, component_id, configuration_id, 1)
    latest_version = versions[0]['version']
    url = f'https://connection{URL_SUFFIXES[region]}/v2/storage/components/{component_id}/configs/{configuration_id}' \
          f'/versions/{latest_version}/create'

    parameters = {'name': name, 'description': description}

    headers = {'Content-Type': 'application/x-www-form-urlencoded'
        , 'X-StorageApi-Token': token}
    response = requests.post(url,
                             data=parameters,
                             headers=headers)

    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()['id']


def update_config_row_state(token, region, component_id, configurationId, row_id, state, branch_id='default'):
    if not branch_id:
        branch_id = 'default'

    url = f'https://connection{URL_SUFFIXES[region]}/v2/storage/branch/{branch_id}' \
          f'/components/{component_id}/configs/' \
          f'{configurationId}/rows/{row_id}/state'

    parameters = {}
    parameters['state'] = json.dumps(state)
    headers = {'Content-Type': 'application/x-www-form-urlencoded', 'X-StorageApi-Token': token}
    response = requests.put(url,
                            data=parameters,
                            headers=headers)
    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def update_config_row(token, region, component_id, configurationId, row_id, name, description='', configuration=None,
                      state=None,
                      changeDescription='', branch_id=None, is_disabled=False, **kwargs):
    """
    Update table from CSV file.

    Args:
        component_id (str):
        name (str): The new table name (only alphanumeric and underscores)
        configuration (dict): configuration JSON; the maximum allowed size is 4MB
        state (dict): configuration JSON; the maximum allowed size is 4MB
        changeDescription (str): Escape character used in the CSV file.
        region: 'US' or 'EU'
        is_disabled:

    Returns:
        table_id (str): Id of the created table.

    Raises:
        requests.HTTPError: If the API request fails.
    """
    if not branch_id:
        url = f'https://connection{URL_SUFFIXES[region]}/v2/storage/components/{component_id}/configs/' \
              f'{configurationId}/rows/{row_id}'
    else:
        url = f'https://connection{URL_SUFFIXES[region]}/v2/storage/branch/{branch_id}' \
              f'/components/{component_id}/configs/' \
              f'{configurationId}/rows/{row_id}'

    parameters = {}
    parameters['configurationId'] = configurationId
    if configuration:
        parameters['configuration'] = json.dumps(configuration)
    parameters['name'] = name
    parameters['description'] = description
    parameters['changeDescription'] = changeDescription
    parameters['isDisabled'] = str(is_disabled).lower()
    if state is not None:
        update_config_row_state(token, region, component_id, configurationId, row_id, state, branch_id)
    headers = {'Content-Type': 'application/x-www-form-urlencoded', 'X-StorageApi-Token': token}
    response = requests.put(url,
                            data=parameters,
                            headers=headers)

    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def create_config_row(token, region, component_id, configuration_id, name, configuration,
                      description='', rowId=None, state=None, changeDescription='', isDisabled=False,
                      branch_id=None, is_disabled=False, **kwargs):
    """
    Create a new table from CSV file.

    Args:
        component_id (str):
        name (str): The new table name (only alphanumeric and underscores)
        configuration (dict): configuration JSON; the maximum allowed size is 4MB
        state (dict): configuration JSON; the maximum allowed size is 4MB
        changeDescription (str): Escape character used in the CSV file.
        region: 'US' or 'EU'
        is_disabled:

    Returns:
        table_id (str): Id of the created table.

    Raises:
        requests.HTTPError: If the API request fails.
    """
    if not branch_id:
        enpoint_prefix = 'components'
    else:
        enpoint_prefix = f'branch/{branch_id}/components'
    cl = Endpoint('https://connection' + URL_SUFFIXES[region], enpoint_prefix, token)

    url = '{}/{}/configs/{}/rows'.format(cl.base_url, component_id, configuration_id)
    parameters = {}
    # convert objects to string
    parameters['configuration'] = json.dumps(configuration)
    parameters['name'] = name
    parameters['description'] = description
    parameters['is_disabled'] = str(is_disabled).lower()
    if rowId:
        parameters['rowId'] = rowId
    parameters['changeDescription'] = changeDescription
    parameters['isDisabled'] = str(is_disabled).lower()
    if state:
        parameters['state'] = json.dumps(state)

    header = {'Content-Type': 'application/x-www-form-urlencoded'}
    data = urllib.parse.urlencode(parameters)
    return cl._post(url, data=data, headers=header)


def clone_orchestration(src_token, dest_token, src_region, dst_region, orch_id):
    """
    Clones orchestration. Note that all component configs that are part of the tasks need to be migrated first using
    the migrate_config function. Otherwise it will fail.
    :param src_token:
    :param orch_id:
    :param dest_token:
    :param region:
    :return:
    """
    src_config = get_config_detail(src_token, src_region, 'orchestrator', orch_id)
    return create_orchestration(dest_token, dst_region, src_config['name'], src_config['configuration']['tasks'])


def create_orchestration(token, region, name, tasks, active=True, crontabRecord=None, crontabTimezone=None,
                         variableValuesId=None,
                         variableValuesData=None):
    values = {
        "name": name,
        "tasks": tasks,
        "active": active,
        "crontabRecord": crontabRecord,
        "crontabTimezone": crontabTimezone,
        "variableValuesId": variableValuesId,
        "variableValuesData": variableValuesData
    }

    headers = {
        'Content-Type': 'application/json',
        'X-StorageApi-Token': token
    }
    response = requests.post('https://syrup' + URL_SUFFIXES[region] + '/orchestrator/orchestrations',
                             data=json.dumps(values),
                             headers=headers)

    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def update_orchestration(token, region, orchestration_id, name, tasks, active=True, crontabRecord=None,
                         crontabTimezone=None,
                         variableValuesId=None,
                         variableValuesData=None):
    values = {
        "name": name,
        "tasks": tasks,
        "active": active,
        "crontabRecord": crontabRecord,
        "crontabTimezone": crontabTimezone,
        "variableValuesId": variableValuesId,
        "variableValuesData": variableValuesData
    }

    headers = {
        'Content-Type': 'application/json',
        'X-StorageApi-Token': token
    }
    response = requests.put(f'https://syrup{URL_SUFFIXES[region]}/orchestrator/orchestrations/{orchestration_id}',
                            data=json.dumps(values),
                            headers=headers)

    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def run_orchestration(orch_id, token, region='US'):
    headers = {
        'Content-Type': 'application/json',
        'X-StorageApi-Token': token
    }
    response = requests.post(
        'https://syrup' + URL_SUFFIXES[region] + '/orchestrator/orchestrations/' + str(orch_id) + '/jobs',
        headers=headers)

    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def get_orchestrations(token, region='US'):
    syrup_cl = Endpoint('https://syrup' + URL_SUFFIXES[region], 'orchestrator', token)

    url = syrup_cl.root_url + '/orchestrator/orchestrations'
    res = syrup_cl._get(url)
    return res


def _download_table(table, client: Tables, out_file):
    print('Downloading table %s into %s from source project', table['id'], out_file)
    res_path = client.export_to_file(table['id'], out_file, is_gzip=True, changed_until='')

    return res_path


PAR_WORKDIRPATH = os.path.dirname(os.path.join(os.path.abspath('')))


def transfer_storage_bucket(from_token, to_token, src_bucket_id, region_from='EU', region_to='EU', dest_bucket_id=None,
                            tmp_folder=os.path.join(PAR_WORKDIRPATH, 'data')):
    storage_api_url_from = 'https://connection' + URL_SUFFIXES[region_from]
    storage_api_url_to = 'https://connection' + URL_SUFFIXES[region_to]
    from_tables = Tables(storage_api_url_from, from_token)
    from_buckets = Buckets(storage_api_url_from, from_token)
    to_tables = Tables(storage_api_url_to, to_token)
    to_buckets = Buckets(storage_api_url_to, to_token)
    print('Getting tables from bucket %s', src_bucket_id)
    tables = from_buckets.list_tables(src_bucket_id)

    if dest_bucket_id:
        new_bucket_id = dest_bucket_id
    else:
        new_bucket_id = src_bucket_id

    bucket_exists = (new_bucket_id in [b['id'] for b in to_buckets.list()])

    for tb in tables:
        tb['new_id'] = tb['id'].replace(src_bucket_id, new_bucket_id)
        tb['new_bucket_id'] = new_bucket_id

        if bucket_exists and tb['new_id'] in [b['id'] for b in to_buckets.list_tables(new_bucket_id)]:
            print('Table %s already exists in destination bucket, skipping..', tb['new_id'])
            continue

        local_path = _download_table(tb, from_tables, tmp_folder)

        b_split = tb['new_bucket_id'].split('.')

        if not bucket_exists:
            print('Creating new bucket %s in destination project', tb['new_bucket_id'])
            to_buckets.create(b_split[1].replace('c-', ''), b_split[0])
            bucket_exists = True

        print('Creating table %s in the destination project', tb['id'])

        to_tables.create(tb['new_bucket_id'], tb['name'], local_path,
                         primary_key=tb['primaryKey'])
        # , compress=True)

        print('Deleting temp file')
        os.remove(local_path)
        # os.remove(local_path + '.gz')

    print('Finished.')


def migrate_configs(src_token, dst_token, src_config_id, component_id, src_region='EU', dst_region='EU',
                    use_src_id=False):
    """
    Super simple method, getting all table config objects and updating/creating them in the destination configuration.
    Includes all attributes, even the ones that are not updateble => API service will ignore them.

    :par use_src_id: If true the src config id will be used in the destination

    """
    src_config = get_config_detail(src_token, src_region, component_id, src_config_id)
    src_config_rows = get_config_rows(src_token, src_region, component_id, src_config_id)

    dst_config = src_config.copy()
    # add component id
    dst_config['component_id'] = component_id

    if use_src_id:
        dst_config['configurationId'] = src_config['id']

    # add token and region to use wrapping
    dst_config['token'] = dst_token
    dst_config['region'] = dst_region

    print('Transfering config..')
    new_cfg = create_config(**dst_config)

    print('Transfering config rows')
    for row in src_config_rows:
        row['component_id'] = component_id
        row['configuration_id'] = new_cfg['id']
        test = row['configuration'].pop('id', {})
        test = row['configuration'].pop('rowId', {})
        test = row.pop('rowId', {})

        # add token and region to use wrapping
        row['token'] = dst_token
        row['region'] = dst_region

        create_config_row(**row)


def create_branch(token, region, name, description=''):
    """
    Create a new development branch

    Args:
        name (str): The new branch name
        region: 'US' or 'EU'

    Returns:
        branch_id (str): Id of the created branch.

    Raises:
        requests.HTTPError: If the API request fails.
    """
    cl = Endpoint('https://connection' + URL_SUFFIXES[region], 'dev-branches', token)
    url = cl.base_url + '/'
    parameters = {'name': name, 'description': description}
    # convert objects to string
    header = {'Content-Type': 'application/x-www-form-urlencoded'}
    data = urllib.parse.urlencode(parameters)
    resp = cl._post(url, data=data, headers=header)

    job = block_storage_job_until_completed(token, resp['url'])
    return job['results']['id']


# ------------ Management scripts ----------------

def create_new_project(storage_token, name, organisation, p_type='poc6months', region='EU',
                       defaultBackend='snowflake'):
    headers = {
        'Content-Type': 'application/json',
        'X-KBC-ManageApiToken': storage_token,
    }

    data = {
        "name": name,
        "type": p_type,
        "defaultBackend": defaultBackend
    }

    response = requests.post(
        f'https://connection{URL_SUFFIXES[region]}/manage/organizations/' + str(organisation) + '/projects',
        headers=headers, data=json.dumps(data))
    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def invite_user_to_project(token, project_id, email, region='US'):
    headers = {
        'Content-Type': 'text/plain',
        'X-KBC-ManageApiToken': token
    }
    data = {
        "email": email
    }
    response = requests.post(
        f'https://connection{URL_SUFFIXES[region]}/manage/projects/' + str(project_id) + '/users',
        data=json.dumps(data),
        headers=headers)

    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return True


def generate_token(decription, token, proj_id, region, expires_in=1800, manage_tokens=False, additional_params=None):
    headers = {
        'Content-Type': 'application/json',
        'X-KBC-ManageApiToken': token,
    }

    data = {
        "description": decription,
        "canManageBuckets": True,
        "canReadAllFileUploads": False,
        "canPurgeTrash": False,
        "canManageTokens": manage_tokens,
        "bucketPermissions": {"*": "write"},
        "expiresIn": expires_in
    }

    response = requests.post(f'https://connection{URL_SUFFIXES[region]}/manage/projects/' + str(proj_id) + '/tokens',
                             headers=headers,
                             data=json.dumps(data))
    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def get_organization(master_token, region, org_id):
    headers = {
        'Content-Type': 'application/json',
        'X-KBC-ManageApiToken': master_token,
    }

    response = requests.get(
        f'https://connection{URL_SUFFIXES[region]}/manage/organizations/' + str(org_id),
        headers=headers)
    try:
        response.raise_for_status()
    except requests.HTTPError as e:
        raise e
    else:
        return response.json()


def get_schedules(region: str, master_token: str):
    def _get_paged_schedules(region: str, token: str) -> list:
        headers = {
            'Content-Type': 'application/json',
            'X-StorageApi-Token': token,
        }
        par_schedules = {}
        par_schedules['limit'] = 100
        offset = 0
        is_complete = False
        all_jobs = []
        url = f'https://scheduler{URL_SUFFIXES[region]}/schedules'

        while is_complete is False:
            par_schedules['offset'] = offset
            rsp_schedules = requests.get(url, params=par_schedules, headers=headers)

            if rsp_schedules.status_code == 200:
                js_schedules = rsp_schedules.json()
                all_jobs += js_schedules
                if len(js_schedules) < 100:
                    is_complete = True
                    return all_jobs
                else:
                    offset += 100
            else:
                raise Exception(f"Could not download jobs for project in stack "
                                f"{region}.\nReceived: {rsp_schedules.status_code} - {rsp_schedules.json()}.")

    return _get_paged_schedules(region, master_token)


================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import mock
import os
import unittest
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()

    def test_find_secrets(self):
        source_cfg = {'configuration': {'parameters': {'api': {'baseUrl': ''},
                                                       'config': {'nonsecret': 'sss',
                                                                  '#secret1': 1234},
                                                       '#secret2': 123456,
                                                       "nested": {"flat": "",
                                                                  "l2": {"flat": "", "#secret3": 123456789}}},
                                        }}
        expected = ['config.#secret1', '#secret2', "nested.l2.#secret3"]
        encrypted = Component._retrieve_encrypted_properties(source_cfg)
        self.assertEqual(expected, encrypted)


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /tests/test_storagetoken.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
from freezegun import freeze_time

from component import StorageToken


class TestComponent(unittest.TestCase):

    @freeze_time("2021-06-01T10:15:28+0200")
    def test_expired_token_short(self):
        token = {'id': '9259',
                 'expires': '2021-06-01T10:20:28+0200',
                 'token': 'XXXXXXX'}
        token_inst = StorageToken(token['id'], token['token'], token['expires'])

        self.assertTrue(token_inst.is_expired())

    @freeze_time("2021-06-01T10:15:28+0200")
    def test_expired_token_long(self):
        token = {'id': '9259',
                 'expires': '2021-06-01T09:20:28+0200',
                 'token': 'XXXXXXX'}
        token_inst = StorageToken(token['id'], token['token'], token['expires'])

        self.assertTrue(token_inst.is_expired())

    @freeze_time("2021-06-01T10:15:28+0200")
    def test_nonexpired_token(self):
        token = {'id': '9259',
                 'expires': '2021-06-01T10:35:28+0200',
                 'token': 'XXXXXXX'}
        token_inst = StorageToken(token['id'], token['token'], token['expires'])

        self.assertFalse(token_inst.is_expired())


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: /component_config/logger
================================================
gelf

================================================
File: /component_config/component_long_description.md
================================================
Testing functional sample extractor for purposes of the python component template. 
Implements partial Hubspot extractor using the public sandbox token.

================================================
File: /component_config/configuration_description.md
================================================
Transfers all configurations and orchestrations from the source (PROD) to the destination (DEV) project and vice versa.

Updates or creates new row/configuration.

Secret values are not transferred if present in remote project.

**NOTE** Current version does not take configuration deletes into account.

**NOTE2** Ochestration IDs cannot be mapped 1:1 across projects. 
Internal mapping of transferred orchestration IDs is stored in the state file. If any of the orchestrations is removed from the destination, 
no changes will be transferred.

================================================
File: /component_config/component_short_description.md
================================================
Testing functional sample extractor for purposes of the python component template. 

================================================
File: /component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: /component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Sync Configuration",
  "required": [
    "#api_token",
    "region",
    "mode",
    "merge_message"
  ],
  "properties": {
    "debug": {
      "type": "boolean"
    },
    "#api_token": {
      "type": "string",
      "title": "Manage API Token",
      "format": "password",
      "propertyOrder": 200
    },
    "region": {
      "enum": [
        "EU",
        "US",
        "AZURE-EU",
        "CURRENT_STACK"
      ],
      "type": "string",
      "title": "Project Region",
      "default": "CURRENT_STACK",
      "propertyOrder": 300
    },
    "mode": {
      "type": "string",
      "title": "Mode",
      "description": "Direction of Sync. either dev_to_prod or  prod_to_dev. Use {{}} syntax to override with variable.",
      "propertyOrder": 600,
      "default": "prod_to_dev"
    },
    "merge_message": {
      "type": "string",
      "title": "Merge message prefix",
      "description": "A message that will be used as a prefix of each configuration change description. e.g. PREFIX - SYNC FROM DEV: Configuration row 123 update, runID:123456",
      "default": "Configuration merge",
      "propertyOrder": 800
    }
  }
}

================================================
File: /component_config/configRowSchema.json
================================================
{
  "title": "Project configuration",
  "type": "object",
  "format": "grid-strict",
  "required": [
    "prod_id",
    "dev_id",
    "configuration_override",
    "ignore_inactive_orchestration_updates"
  ],
  "properties": {
    "prod_id": {
      "type": "string",
      "title": "Production project ID",
      "description": "As found in url, e.g. connection.keboola.com/projects/PROJECT_ID/admin",
      "propertyOrder": 1,
      "options": {
        "grid_columns": 6
      }
    },
    "dev_id": {
      "type": "string",
      "title": "Development project ID",
      "description": "As found in url, e.g. connection.keboola.com/projects/PROJECT_ID/admin",
      "propertyOrder": 2,
      "options": {
        "grid_columns": 6
      }
    },
    "branch_mode": {
      "type": "boolean",
      "required": true,
      "title": "Development Branch Mode",
      "default": false,
      "description": "If true, the sync is performed into a new development branch instead of a project.",
      "propertyOrder": 3,
      "options": {
        "grid_columns": 12
      }
    },
    "master_tokens": {
      "type": "object",
      "title": "Master Tokens",
      "default": false,
      "description": "Master tokens to use in branch mode.",
      "propertyOrder": 4,
      "options": {
        "dependencies": {
          "branch_mode": true
        }
      },
      "properties": {
        "#prod_token": {
          "type": "string",
          "title": "Production project token",
          "format": "password",
          "propertyOrder": 1,
          "options": {
            "grid_columns": 6
          }
        },
        "#dev_token": {
          "type": "string",
          "title": "Development project token",
          "format": "password",
          "propertyOrder": 2,
          "options": {
            "grid_columns": 6
          }
        }
      }
    },
    "configuration_override": {
      "type": "array",
      "title": "Component Configuration Override",
      "description": "Override processing of particular configurations",
      "propertyOrder": 5,
      "items": {
        "type": "object",
        "format": "grid",
        "title": "Configuration",
        "required": [
          "config_url"
        ],
        "properties": {
          "name": {
            "type": "string",
            "format": "textarea",
            "title": "Name",
            "description": "Optional config name for reference",
            "propertyOrder": 1,
            "options": {
              "grid_columns": 6
            }
          },
          "config_url": {
            "type": "string",
            "format": "textarea",
            "title": "Configuration URL",
            "description": "Configuration URL. Either row or root configuration",
            "propertyOrder": 700,
            "options": {
              "grid_columns": 6
            }
          },
          "ignored_properties": {
            "type": "string",
            "format": "textarea",
            "title": "Ignored properties",
            "description": "Comma separated list of properties to ignore. E.g. credentials.username, credentials.#password",
            "propertyOrder": 700
          }
        }
      }
    },
    "skipped_components": {
      "type": "string",
      "format": "textarea",
      "title": "Skip components",
      "default": "kds-team.app-dev-prod-sync, keboola.sandbox",
      "description": "Comma separated list of component IDs to skip from syncing.",
      "propertyOrder": 10,
      "options": {
        "grid_columns": 12
      }
    },
    "ignore_inactive_orchestration_updates": {
      "type": "boolean",
      "required": true,
      "title": "Ignore updates of orchestration active state",
      "description": "Ignores updates of the active/disabled state of all orchestrations. The original states are transferred during the first sync.",
      "propertyOrder": 15
    },
    "transfer_states": {
      "type": "boolean",
      "required": true,
      "title": "Transfer component states",
      "default": false,
      "description": "Transfers configuration and configuration rows states.",
      "propertyOrder": 20
    }
  }
}

================================================
File: /component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: /component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /requirements.txt
================================================
keboola.component==1.1.2
keboola.utils
keboola.http-client
python-dateutil
git+https://github.com/keboola/sapi-python-client.git#egg=kbcstorage
mock
freezegun


================================================
File: /Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential
RUN apt-get install -y git

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
 - Set `KBC_DEVELOPERPORTAL_APP` env variable in Bitbucket (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `APP_IMAGE` - arbitrary tag name of the docker image e.g. “keboola-component”
 - `KBC_STORAGE_TOKEN` - in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

