Directory structure:
└── kds_consulting_team-kds-team.processor-csv-to-json/
    ├── tests/
    │   ├── test_functional.py
    │   ├── __init__.py
    │   ├── test_component.py
    │   ├── test_csv2json.py
    │   └── functional/
    │       ├── escape-char/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── test.json
    │       │   └── source/
    │       │       └── data/
    │       │           ├── in/
    │       │           │   └── tables/
    │       │           │       └── test.csv
    │       │           └── config.json
    │       ├── basic/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               ├── dataset_simple.json
    │       │   │               └── dataset_heavily_nested.json
    │       │   └── source/
    │       │       └── data/
    │       │           ├── in/
    │       │           │   └── tables/
    │       │           │       ├── dataset_heavily_nested.csv
    │       │           │       └── dataset_simple.csv
    │       │           └── config.json
    │       └── rename_infer/
    │           ├── expected/
    │           │   └── data/
    │           │       └── out/
    │           │           ├── tables/
    │           │           │   └── .gitkeep
    │           │           └── files/
    │           │               ├── dataset_heavily_nested_bool1_nr.json
    │           │               ├── dataset_simple.json
    │           │               └── dataset_heavily_nested.json
    │           └── source/
    │               └── data/
    │                   ├── in/
    │                   │   └── tables/
    │                   │       ├── dataset_heavily_nested_bool1_nr.csv
    │                   │       ├── dataset_heavily_nested.csv
    │                   │       └── dataset_simple.csv
    │                   └── config.json
    ├── change_log.md
    ├── Dockerfile
    ├── flake8.cfg
    ├── src/
    │   ├── .DS_Store
    │   ├── csv2json/
    │   │   ├── hone_csv2json.py
    │   │   └── __init__.py
    │   └── component.py
    ├── LICENSE.md
    ├── docs/
    │   ├── .DS_Store
    │   └── imgs/
    │       └── .DS_Store
    ├── requirements.txt
    ├── bitbucket-pipelines.yml
    ├── setup.py
    ├── component_config/
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── stack_parameters.json
    │   ├── configuration_description.md
    │   ├── component_long_description.md
    │   └── sample-config/
    │       ├── in/
    │       │   ├── tables/
    │       │   │   ├── test.csv
    │       │   │   └── test.csv.manifest
    │       │   ├── state.json
    │       │   └── files/
    │       │       └── order1.xml
    │       ├── out/
    │       │   ├── tables/
    │       │   │   └── test.csv
    │       │   └── files/
    │       │       └── order1.xml
    │       └── config.json
    ├── deploy.sh
    ├── docker-compose.yml
    ├── scripts/
    │   ├── build_n_test.sh
    │   ├── update_dev_portal_properties.sh
    │   ├── build_n_run.ps1
    │   └── run_kbc_tests.ps1
    └── README.md

================================================
File: /tests/test_functional.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import filecmp
import os
import unittest
from os import path
from os.path import dirname

from component import Component

FUNCTIONAL_TEST_DIR = path.join(dirname(path.realpath(__file__)), 'functional')


class TestFunctional(unittest.TestCase):

    def test_functional(self):
        '''
        tests if the resulting hierarchy of files conforms to the specififed one
        '''
        os.path.dirname(os.path.realpath(__file__))
        test_errors = []
        for test in os.listdir(FUNCTIONAL_TEST_DIR):
            if test.startswith('.'):
                continue
            test_dir = path.join(FUNCTIONAL_TEST_DIR, test)
            data_dir = path.join(test_dir, 'source', 'data')
            os.environ["KBC_DATADIR"] = data_dir
            comp = Component()
            comp.run()
            result = self.compare_output_structure(test, test_dir)
            if result:
                test_errors.append(f'Functional test {test} failed with error: {result}!')

        self.assertEqual(test_errors, [], msg=', \n '.join(test_errors))

    def compare_output_structure(self, test_name, test_dir):
        '''
        compares the expected output files/tables with the actual output files
        '''

        files_expected_path = path.join(test_dir, 'expected', 'data', 'out', 'files')
        tables_expected_path = path.join(test_dir, 'expected', 'data', 'out', 'tables')
        files_real_path = path.join(test_dir, 'source', 'data', 'out', 'files')
        tables_real_path = path.join(test_dir, 'source', 'data', 'out', 'tables')

        # report differences
        filecmp.dircmp(files_real_path, files_expected_path).report()

        out_files_expected = [file for file in os.listdir(files_expected_path) if not file.startswith('.')]
        out_tables_expected = [file for file in os.listdir(tables_expected_path) if not file.startswith('.')]
        out_files_real = [file for file in os.listdir(files_real_path) if not file.startswith('.')]
        out_tables_real = [file for file in os.listdir(tables_real_path) if not file.startswith('.')]

        if set(out_files_real) != set(out_files_expected) or set(out_tables_real) != set(out_tables_expected):
            return "Files do not match"

        error = ""

        match, mismatch_files, errors_files = filecmp.cmpfiles(files_real_path, files_expected_path,
                                                               [os.path.basename(f) for f in out_files_expected])
        match, mismatch_tables, errors_tables = filecmp.cmpfiles(tables_real_path, tables_expected_path,
                                                                 [os.path.basename(f) for f in out_tables_expected])

        if mismatch_files or errors_files:
            error += f"Result files {mismatch_files} are different from what expected. Found errors {errors_files}"

        if mismatch_tables or errors_tables:
            error += f"\n Result tables {mismatch_tables} are different from what expected. Found errors {errors_tables}"

        return error


if __name__ == "__main__":
    unittest.main()


================================================
File: /tests/__init__.py
================================================
import sys
from os import path
from os.path import dirname

sys.path.append(path.join(dirname(dirname(path.realpath(__file__))), "src"))


================================================
File: /tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import os
import unittest

import mock
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    unittest.main()


================================================
File: /tests/test_csv2json.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest

from csv2json.hone_csv2json import Csv2JsonConverter


class TestCsv2JsonConverter(unittest.TestCase):

    def test_convert_object_single_quote_passes(self):
        json_value = r"""{"somekey":"Single\'s are not a problem"}"""
        expected = {"somekey": "Single's are not a problem"}
        converter = Csv2JsonConverter([])
        results = converter.convert_object(json_value)
        self.assertDictEqual(expected, results)

    def test_convert_object_conversion_passes(self):
        json_value = '{"content":"Ttest push","defaultTranslation":true,"langs":["en"]}'
        expected = {"content": "Ttest push", "defaultTranslation": True, "langs": ["en"]}
        converter = Csv2JsonConverter([])
        results = converter.convert_object(json_value)
        self.assertDictEqual(expected, results)

    def test_convert_object_array_conversion_passes(self):
        json_value = '[{"a":"ab"}, "b"]'
        expected = [{"a": "ab"}, "b"]
        converter = Csv2JsonConverter([])
        results = converter.convert_object(json_value)
        self.assertEqual(expected, results)

    def test_convert_object_bracket_fails(self):
        json_value = '(1123)'
        converter = Csv2JsonConverter([])
        with self.assertRaises(ValueError):
            converter.convert_object(json_value)

    def test_nan_value_inferred_as_string(self):
        json_value = 'NaN'
        converter = Csv2JsonConverter([])
        converted = converter.str_converter.convert(json_value)
        self.assertEqual(json_value, converted)


if __name__ == "__main__":
    unittest.main()


================================================
File: /tests/functional/escape-char/expected/data/out/files/test.json
================================================
[{"symbols": "TTT", "symbol_name": "Test", "compan_name_code": "TEST Inc.", "change_alert": "NaN", "json": {"content": "Ttest push", "defaultTranslation": true, "langs": ["en"], "name": "Obchod n\u00e1zev", "value": "Smajl's Shop"}}]

================================================
File: /tests/functional/escape-char/source/data/in/tables/test.csv
================================================
symbols,symbol_name,compan_name_code,change_alert,json
TTT,Test,TEST Inc.,NaN,"{""content"":""Ttest push"",""defaultTranslation"":true,""langs"":[""en""],""name"":""Obchod název"",""value"":""Smajl's Shop""}"

================================================
File: /tests/functional/escape-char/source/data/config.json
================================================
{
  "parameters": {
    "delimiter": "__",
    "infer_undefined": true,
    "column_names_override": {
    },
    "column_types": [
      {
        "column": "json",
        "type": "object"
      }
    ]
  },
  "image_parameters": {}
}

================================================
File: /tests/functional/basic/expected/data/out/files/dataset_simple.json
================================================
[{"time|reviewed|r1|r4|r3|||r5|r6|r7": true, "time|reviewed|r1|r2": true, "time|reviewed|r1|r1": true, "time|reviewed|r2": true, "id": "https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx", "field.id": "HeRytXsPRiK3", "ans": {"concat": "Jan Volny"}, "time|submitted": "2019-08-13T19:05:45Z", "id2": "mh53bpvgfac9gxn0mukmzt2ljkk04jlg", "time|11": true, "bool|bool": {"2": 1, "1": true}},{"time|reviewed|r1|r4|r3|||r5|r6|r7": null, "time|reviewed|r1|r2": false, "time|reviewed|r1|r1": true, "time|reviewed|r2": false, "id": "https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx", "field.id": "B42TVvWCj8o9", "ans": {"concat": "jan.volny.jr@gmail.com"}, "time|submitted": "2019-08-13T19:05:45Z", "id2": "mh53bpvgfac9gxn0mukmzt2ljkk04jlg", "time|11": false, "bool|bool": {"2": 0, "1": false}},{"time|reviewed|r1|r4|r3|||r5|r6|r7": true, "time|reviewed|r1|r2": false, "time|reviewed|r1|r1": true, "time|reviewed|r2": false, "id": "https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx", "field.id": "qdz8bzaldCoi", "ans": {"concat": "https://www.linkedin.com/in/janvolny/"}, "time|submitted": "2019-08-13T19:05:45Z", "id2": "mh53bpvgfac9gxn0mukmzt2ljkk04jlg", "time|11": true, "bool|bool": {"2": 0, "1": false}},{"time|reviewed|r1|r4|r3|||r5|r6|r7": true, "time|reviewed|r1|r2": false, "time|reviewed|r1|r1": true, "time|reviewed|r2": false, "id": "https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx", "field.id": "zglNcIOQj0JX", "ans": {"concat": true}, "time|submitted": "2019-08-13T19:05:45Z", "id2": "mh53bpvgfac9gxn0mukmzt2ljkk04jlg", "time|11": true, "bool|bool": {"2": 0, "1": false}}]

================================================
File: /tests/functional/basic/expected/data/out/files/dataset_heavily_nested.json
================================================
[{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "field.id": "123456", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool2": 1.0, "bool1": true}},{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "field.id": "123456", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool2": 1.0, "bool1": true}},{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "field.id": "123456", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool2": 1.0, "bool1": true}},{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "field.id": "123456", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool2": 1.0, "bool1": true}}]

================================================
File: /tests/functional/basic/source/data/in/tables/dataset_heavily_nested.csv
================================================
time_reviewed_r1_r2,time_reviewed_r1_r1,time_reviewed_r2,id,field.id,ansconcat,time_submitted,id2,time_11,bool_bool2,bool_bool1
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True

================================================
File: /tests/functional/basic/source/data/in/tables/dataset_simple.csv
================================================
time|reviewed|r1|r4|r3|||r5|r6|r7,time|reviewed|r1|r2,time|reviewed|r1|r1,time|reviewed|r2,id,field.id,ans_concat,time|submitted,id2,time|11,bool|bool_2,bool|bool_1
True,True,True,True,https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx,HeRytXsPRiK3,Jan Volny,2019-08-13T19:05:45Z,mh53bpvgfac9gxn0mukmzt2ljkk04jlg,True,1,True
,False,True,False,https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx,B42TVvWCj8o9,jan.volny.jr@gmail.com,2019-08-13T19:05:45Z,mh53bpvgfac9gxn0mukmzt2ljkk04jlg,False,0,False
True,False,True,False,https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx,qdz8bzaldCoi,https://www.linkedin.com/in/janvolny/,2019-08-13T19:05:45Z,mh53bpvgfac9gxn0mukmzt2ljkk04jlg,True,0,False
True,False,True,False,https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx,zglNcIOQj0JX,True,2019-08-13T19:05:45Z,mh53bpvgfac9gxn0mukmzt2ljkk04jlg,True,0,False

================================================
File: /tests/functional/basic/source/data/config.json
================================================
{
  "parameters": {
      "delimiter" : "_"
      ,"column_types":[
          {"column":"bool_bool2",
           "type":"number"},
           {"column":"bool_bool1",
            "type":"bool"},
          {"column":"id",
           "type":"string"},
          {"column":"field.id",
           "type":"string"},
          {"column":"ansconcat",
           "type":"string"},
          {"column":"time_submitted",
           "type":"string"}
      ]
  },
  "image_parameters": {}
}

================================================
File: /tests/functional/rename_infer/expected/data/out/files/dataset_heavily_nested_bool1_nr.json
================================================
[{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r-2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool1": true, "bool2": true}, "field.id": "123456"},{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r-2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool1": true, "bool2": true}, "field.id": "123456"},{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r-2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool1": true, "bool2": true}, "field.id": "123456"},{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r-2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool1": true, "bool2": true}, "field.id": "123456"}]

================================================
File: /tests/functional/rename_infer/expected/data/out/files/dataset_simple.json
================================================
[{"time|reviewed|r1|r4|r3|||r5|r6|r7": true, "time|reviewed|r1|r2": true, "time|reviewed|r1|r1": true, "time|reviewed|r2": true, "id": "https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx", "field.id": "HeRytXsPRiK3", "ans_concat": "Jan Volny", "time|submitted": "2019-08-13T19:05:45Z", "id2": "mh53bpvgfac9gxn0mukmzt2ljkk04jlg", "time|11": true, "bool|bool_2": 1, "bool|bool_1": true},{"time|reviewed|r1|r4|r3|||r5|r6|r7": null, "time|reviewed|r1|r2": false, "time|reviewed|r1|r1": true, "time|reviewed|r2": false, "id": "https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx", "field.id": "B42TVvWCj8o9", "ans_concat": "jan.volny.jr@gmail.com", "time|submitted": "2019-08-13T19:05:45Z", "id2": "mh53bpvgfac9gxn0mukmzt2ljkk04jlg", "time|11": false, "bool|bool_2": 0, "bool|bool_1": false},{"time|reviewed|r1|r4|r3|||r5|r6|r7": true, "time|reviewed|r1|r2": false, "time|reviewed|r1|r1": true, "time|reviewed|r2": false, "id": "https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx", "field.id": "qdz8bzaldCoi", "ans_concat": "https://www.linkedin.com/in/janvolny/", "time|submitted": "2019-08-13T19:05:45Z", "id2": "mh53bpvgfac9gxn0mukmzt2ljkk04jlg", "time|11": true, "bool|bool_2": 0, "bool|bool_1": false},{"time|reviewed|r1|r4|r3|||r5|r6|r7": true, "time|reviewed|r1|r2": false, "time|reviewed|r1|r1": true, "time|reviewed|r2": false, "id": "https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx", "field.id": "zglNcIOQj0JX", "ans_concat": true, "time|submitted": "2019-08-13T19:05:45Z", "id2": "mh53bpvgfac9gxn0mukmzt2ljkk04jlg", "time|11": true, "bool|bool_2": 0, "bool|bool_1": false}]

================================================
File: /tests/functional/rename_infer/expected/data/out/files/dataset_heavily_nested.json
================================================
[{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r-2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool2": 1, "bool1": true}, "field.id": "123456"},{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r-2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool2": 1, "bool1": true}, "field.id": "123456"},{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r-2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool2": 1, "bool1": true}, "field.id": "123456"},{"time": {"reviewed": {"r1": {"r2": true, "r1": true}, "r-2": true}, "submitted": "2019-08-13T19:05:45Z", "11": true}, "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx", "ansconcat": "Jan Palek", "id2": "mh53bpv123456t2ljkk04jlg", "bool": {"bool2": 1, "bool1": true}, "field.id": "123456"}]

================================================
File: /tests/functional/rename_infer/source/data/in/tables/dataset_heavily_nested_bool1_nr.csv
================================================
time__reviewed__r1__r2,time__reviewed__r1__r1,time__reviewed__r2,id,field_id,ansconcat,time__submitted,id2,time__11,bool__bool1,bool__bool2
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True

================================================
File: /tests/functional/rename_infer/source/data/in/tables/dataset_heavily_nested.csv
================================================
time__reviewed__r1__r2,time__reviewed__r1__r1,time__reviewed__r2,id,field_id,ansconcat,time__submitted,id2,time__11,bool__bool2,bool__bool1
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True
True,True,True,https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx,123456,Jan Palek,2019-08-13T19:05:45Z,mh53bpv123456t2ljkk04jlg,True,1,True

================================================
File: /tests/functional/rename_infer/source/data/in/tables/dataset_simple.csv
================================================
time|reviewed|r1|r4|r3|||r5|r6|r7,time|reviewed|r1|r2,time|reviewed|r1|r1,time|reviewed|r2,id,field.id,ans_concat,time|submitted,id2,time|11,bool|bool_2,bool|bool_1
True,True,True,True,https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx,HeRytXsPRiK3,Jan Volny,2019-08-13T19:05:45Z,mh53bpvgfac9gxn0mukmzt2ljkk04jlg,True,1,True
,False,True,False,https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx,B42TVvWCj8o9,jan.volny.jr@gmail.com,2019-08-13T19:05:45Z,mh53bpvgfac9gxn0mukmzt2ljkk04jlg,False,0,False
True,False,True,False,https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx,qdz8bzaldCoi,https://www.linkedin.com/in/janvolny/,2019-08-13T19:05:45Z,mh53bpvgfac9gxn0mukmzt2ljkk04jlg,True,0,False
True,False,True,False,https://keboolavancouver.typeform.com/to/zYQP65?id=xxxxx,zglNcIOQj0JX,True,2019-08-13T19:05:45Z,mh53bpvgfac9gxn0mukmzt2ljkk04jlg,True,0,False

================================================
File: /tests/functional/rename_infer/source/data/config.json
================================================
{
  "parameters": {
    "delimiter": "__",
    "infer_undefined": true,
    "column_names_override": {
      "time__reviewed__r2": "r-2",
      "field_id": "field.id"
    },
    "column_types": [
      {
        "column": "bool__bool1",
        "type": "bool"
      },
      {
        "column": "id",
        "type": "string"
      },
      {
        "column": "field_id",
        "type": "string"
      },
      {
        "column": "ansconcat",
        "type": "string"
      },
      {
        "column": "time__submitted",
        "type": "string"
      }
    ]
  },
  "image_parameters": {}
}

================================================
File: /change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog


================================================
File: /Dockerfile
================================================
FROM python:3.7.2-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8
RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python3", "-u", "/code/src/component.py"]


================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /src/csv2json/hone_csv2json.py
================================================
# from hone.utils import csv_utils
import copy
import json
import logging
import sys

import hone
import strconv


class Csv2JsonConverter(hone.Hone):
    """
    Customized csv to json converter. Tied with the csv file allowing converting row by row.
    """

    def __init__(self, headers, delimiter="_"):
        self.delim_len = len(delimiter)
        hone.Hone.__init__(self, delimiters=[delimiter])
        self.column_names = headers
        self.column_struct = self.generate_full_structure(self.column_names)
        self.str_converter = strconv.Strconv()
        self._setup_converter()

    def convert_float_numeric(self, s: str):
        if s.lower() == 'nan':
            raise ValueError(f'{s}NaN float values not supported.')
        return strconv.convert_float(s)

    def convert_object(self, s):
        s = s.strip()
        # FIX how Python handles Strings internally,it adds extra escape char which fails in json.loads()
        # with Invalid \escape
        s = s.replace('\\', '')
        if s == "":
            return None
        try:
            # if s.startswith('[') and s.endswith(']'):
            #     res = ast.literal_eval(s)
            # else:
            #     res = json.loads(s)
            res = json.loads(s)
            if not type(res) in [list, dict]:
                raise
            return res
        except Exception as e:
            raise ValueError(f'{s}Not object type.') from e

    def _setup_converter(self):
        self.str_converter.register_converter('obj', self.convert_object)
        self.str_converter.register_converter('int', strconv.convert_int)
        self.str_converter.register_converter('float', self.convert_float_numeric)
        self.str_converter.register_converter('bool', strconv.convert_bool)

    def convert_row(self, row, coltypes, delimit, infer_undefined=False, colname_override=None):
        data = row
        json_struct = self.populate_structure_with_data(
            data, coltypes, delimit, infer_undefined, colname_override)
        return json_struct

    def populate_structure_with_data(self, row, coltypes, delimit, infer_undefined=False, colname_override=None):
        json_struct = []
        num_columns = len(self.column_names)
        processed_row = row
        json_row = copy.deepcopy(self.column_struct)
        if colname_override is None:
            colname_override = {}
        i = 0
        while i < num_columns:
            cell = processed_row[i].replace('\'', '\\\'')
            column_name = self.column_names[i]
            c_name_splitted = column_name.split(delimit)

            cell = self._convert_datatype(cell, coltypes, column_name, True)

            self._fill_value_on_level(json_row, c_name_splitted, cell, colname_override)
            i += 1
        json_struct.append(json_row)
        return json_struct

    def _convert_datatype(self, cell, coltypes, column_name, infer_undefined=False):
        cell = cell.strip()
        colnames = [ct['column'] for ct in coltypes]
        # if set to infer infer all undefined fields
        if infer_undefined and column_name not in colnames:
            cell = self.str_converter.convert(cell)
        try:
            for j in coltypes:
                if (str(j["column"])) == column_name:
                    if j["type"] == 'number':
                        cell = strconv.convert_float(cell.strip())
                    elif j["type"] == 'string':
                        pass
                    elif j["type"] == 'bool':
                        cell = self.convert_bool(cell)
                    elif j["type"] == 'object':
                        if cell:
                            cell = self.convert_object(cell)
                    else:
                        logging.info(
                            'datatype for %s is not set, treating it as a string' % column_name)
        except ValueError:
            logging.exception(
                f'The value {cell} does not match the type: {j["type"]}')
            sys.exit(1)
        return cell

    def _fill_value_on_level(self, json_row, c_name_splitted, cell, colname_override):
        if len(c_name_splitted) == 1:
            # in case of rename drop original
            orig_colname = json_row[c_name_splitted[0]]
            colname = c_name_splitted[0]
            if colname_override.get(orig_colname):
                json_row.pop(colname, None)
                colname = colname_override.get(orig_colname)

            json_row[colname] = cell
        else:
            self._fill_value_on_level(
                json_row[c_name_splitted[0]], c_name_splitted[1:], cell, colname_override)

    def get_schema(self, csv_filepath):
        self.set_csv_filepath(csv_filepath)
        column_names = self.csv.get_column_names()
        column_struct = self.generate_full_structure(column_names)
        return column_struct, column_names

    '''
    Generate recursively-nested JSON structure from column_names.
    '''

    def generate_full_structure(self, column_names):
        visited = set()
        structure = {}
        # sorted(column_names)
        # column_names = column_names[::-1]
        for c1 in column_names:
            if (str(self.delimiters[0] + self.delimiters[0]) in c1):
                logging.error(
                    f"In the column name \"{c1}\" there are two delimiters next to each other, \
which would result in an empty key. Aborting the conversion.")
                sys.exit(1)
            if c1 in visited:
                continue
            splits = self.get_valid_splits(c1)
            for split in splits:
                nodes = {split: {}}
                if split in column_names:
                    continue
                for c2 in column_names:
                    if c2 not in visited and self.is_valid_prefix(split, c2):
                        nodes[split][self.get_split_suffix(split, c2)] = c2
                if len(nodes[split].keys()) >= 1:
                    structure[split] = self.get_nested_structure(nodes[split])
                    for val in nodes[split].values():
                        visited.add(val)
            if c1 not in visited:  # if column_name not nestable
                structure[c1] = c1
        return structure

    '''
    Generate nested JSON structure given parent structure generated from initial call to get_full_structure
    '''

    def get_nested_structure(self, parent_structure):
        column_names = list(parent_structure.keys())
        visited = set()
        structure = {}
        sorted(column_names, reverse=True)
        for c1 in column_names:
            if c1 in visited:
                continue
            splits = self.get_valid_splits(c1)
            for split in splits:
                nodes = {split: {}}
                if split in column_names:
                    continue
                for c2 in column_names:
                    if c2 not in visited and self.is_valid_prefix(split, c2):
                        nodes[split][self.get_split_suffix(
                            split, c2)] = parent_structure[c2]
                        visited.add(c2)
                if len(nodes[split].keys()) >= 1:
                    structure[split] = self.get_nested_structure(nodes[split])
            if c1 not in visited:  # if column_name not nestable
                structure[c1] = parent_structure[c1]
        return structure

    '''
    Returns all valid splits for a given column name in descending order by length
    '''

    def get_valid_splits(self, column_name):
        splits = []
        i = len(column_name) - self.delim_len
        while i >= 0:
            c = column_name[i:i + self.delim_len]
            if c in self.delimiters:
                split = self.clean_split(column_name[0:i])
                splits.append(split)
            i -= 1
        return sorted(list(set(splits)))

    '''
    Returns true if str_a is a valid prefix of str_b
    '''

    def is_valid_prefix(self, prefix, base):
        if base.startswith(prefix):
            if base[len(prefix):len(prefix) + self.delim_len] in self.delimiters:
                return True
        return False

    '''
    Returns string after split without delimiting characters.
    '''

    def get_split_suffix(self, split, column_name=""):
        suffix = column_name[len(split) + self.delim_len:]
        i = 0
        while i < len(suffix):
            c = suffix[i]
            if c not in self.delimiters:
                return suffix[i:]
            i += 1
        return suffix

    def convert_bool(self, cell):
        converted = None
        try:
            converted = strconv.convert_bool(cell)
        except ValueError:
            pass

        try:
            if int(cell) == 1:
                converted = True
            elif int(cell) == 0:
                converted = False
        except ValueError:
            pass

        if converted is None:
            raise ValueError(f"Unable to convert value {cell} to boolean!")

        return converted


================================================
File: /src/component.py
================================================
'''
Template Component main class.

'''

import csv
import glob
import json
import logging
import ntpath
import os
from pathlib import Path

from kbc.env_handler import KBCEnvHandler

from csv2json.hone_csv2json import Csv2JsonConverter

# #### Keep for debug
KEY_DELIMITER = 'delimiter'
KEY_COLUMN_TYPES = 'column_types'
KEY_INFER = 'infer_undefined'
KEY_NAMES_OVERRIDE = 'column_names_override'
MANDATORY_PARS = [KEY_DELIMITER]

APP_VERSION = '0.0.1'


class Component(KBCEnvHandler):
    def __init__(self):
        # for easier local project setup
        default_data_dir = Path(__file__).resolve().parent.parent.joinpath('data').as_posix() \
            if not os.environ.get('KBC_DATADIR') else None

        KBCEnvHandler.__init__(self, MANDATORY_PARS, data_path=default_data_dir)
        self.validate_config(MANDATORY_PARS)
        self.delimiter = self.cfg_params[KEY_DELIMITER]
        self.column_types = self.cfg_params.get(KEY_COLUMN_TYPES, None)

        self.input_tables = glob.glob(self.tables_in_path + "/*[!.manifest]")

        self.set_default_logger(logging.INFO)

        logging.info('Loading configuration...')

    def run(self):
        for file in self.input_tables:
            logging.info("Processing table %s" % file)

            # if not self.column_types
            # returns nested JSON schema for input.csv
            os.makedirs(self.files_out_path, exist_ok=True)
            os.makedirs(self.tables_out_path, exist_ok=True)
            with open(file, mode='rt', encoding='utf-8') as in_file, \
                    open(os.path.join(self.files_out_path,
                                      ntpath.basename(file).replace('.csv', '')) + '.json',
                         mode='wt', encoding='utf-8') as out_file:
                reader = csv.reader(in_file, lineterminator='\n')
                out_file.write('[')
                header = next(reader, None)
                mh = Csv2JsonConverter(header, delimiter=self.delimiter)
                for row in reader:
                    result = mh.convert_row(row=row,
                                            coltypes=self.cfg_params[KEY_COLUMN_TYPES],
                                            colname_override=self.cfg_params.get(KEY_NAMES_OVERRIDE),
                                            delimit=self.cfg_params[KEY_DELIMITER],
                                            infer_undefined=self.cfg_params.get(KEY_INFER, False))
                    json.dump(result[0], out_file)
                    out_file.write(',')
                logging.info("All rows have been processed.")
                out_file.seek(out_file.tell() - 1, os.SEEK_SET)
                out_file.truncate()
                out_file.write(']')


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        comp.run()
    except Exception as exc:
        logging.exception(exc)
        exit(1)


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2019 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.10.zip#egg=kbc
mock
freezegun
hone
strconv

================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        script:
          - export APP_IMAGE=$APP_IMAGE
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
#          - echo 'Pushing test image to repo. [tag=test]'
#          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#          - docker tag $APP_IMAGE:latest $REPOSITORY:test
#          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /setup.py
================================================
from distutils.core import setup

import setuptools

setup(
    name='csv2json',
    version='0.5.7',
    setup_requires=['setuptools_scm'],
    url='https://bitbucket.org/kds_consulting_team/kds-team.processor-csv-to-json',
    download_url='https://bitbucket.org/kds_consulting_team/kds-team.processor-csv-to-json',
    packages=setuptools.find_packages('src'),
    package_dir={'': 'src'},
    include_package_data=True,
    install_requires=[
        'hone',
        'strconv'
    ],
    test_suite='tests',
    license="MIT"
)


================================================
File: /component_config/component_short_description.md
================================================
CSV to JSON converter

================================================
File: /component_config/stack_parameters.json
================================================
{}

================================================
File: /component_config/component_long_description.md
================================================
## Usage
This processor allows for converting CSV files located in `data/in/tables` to JSON files that will be stored in `data/out/files`.

## Config

You need to specify the delimiter. The delimiter can be a multicharacter string (e.g. '||'). You can also specify the column types, currently there are four supported data types - number, string, bool, and object. If you don't specify these, the processor will attempt to identify the datatype by itself. You can also specify the datatype only for a subset of the columns.

The value of delimiter will be the character you want to nest on - ie. if you had columns _adress\_street_ and _adress\_city_ and you set the delimiter to `_`, the result would be a `[{address:{street:street_value, city:city_value}}]`. If there are two delimiters next to each other (e.g. _adress\_\_street_), the extractor will return a user error.

## Sample Config

For sample config please refer to here: https://bitbucket.org/kds_consulting_team/kds-team.processor-csv-to-json/src/master/README.md

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/config.json
================================================
{
  "definition": {
        "component": "kds-team.processor-csv-to-json"
    },
  "parameters": {
      "delimiter" : "_"
      ,"column_types":[
          {"column":"bool_bool2",
           "type":"number"},
           {"column":"bool_bool1",
            "type":"bool"},
          {"column":"id",
           "type":"string"},
          {"column":"field.id",
           "type":"string"},
          {"column":"ansconcat",
           "type":"string"},
          {"column":"time_submitted",
           "type":"string"}
      ]
  }
}

================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
      - KBC_TESTDIR=./tests
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
      - ./tests:/tests
    environment:
      - KBC_DATADIR=./data
      - KBC_TESTDIR=./tests
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi

================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /README.md
================================================
# CSV to Nested Json Converter

Keboola Connection processor for converting a CSV file to a JSON file.



## Usage
This processor currently allows for converting CSV files located in `data/in/tables` to JSON files 
that will be stored in `data/out/files`. 

### Datatypes

This processor supports datatypes:

- `bool` -  Boolean value  case-insensitive conversion: `t`, `true`, `yes`, `1`,`"1"` to `True` and `f`, `false`, `no` to `False`
- `string` - String
- `number` - Number
- `object` - Object - valid JSON array or JSON object, e.g. ["1","2"], {"key":"val"}, (1, 2)

When using this processor, you can specify te datatype for only a subset (or none) of the columns.

Columns that do not have explicitly defined datatypes will be converted to:

- String if `infer_undefined` is set to `false` or omitted
- Datatype will be inferred from the value itself if `infer_undefined` is set to `true`

### Column names

You may override specific column names using the `column_names_override` parameter 
to be able to generate fields with characters not supported in Storage column names.

NOTE that this is applied **after** the column type definition, so refer to original name in the `column_types` config. 

**Example:**

```json
"column_names_override": {
          "field_id": "field-id",
          "parent__test_dot": "test.dot"     
      }
```

## Config

You need to specify the delimiter. The delimiter can be a multicharacter string (e.g. '||'). You can also specify the column types, currently there are four supported data types - number, string, bool, and object. If you don't specify these, the processor will attempt to identify the datatype by itself. You can also specify the datatype only for a subset of the columns.

The value of delimiter will be the character you want to nest on - ie. if you had columns _adress\_street_ and _adress\_city_ and you set the delimiter to `_`, the result would be a `[{address:{street:street_value, city:city_value}}]`. If there are two delimiters next to each other (e.g. _adress\_\_street_), the extractor will return a user error.

## Sample Config

A sample config looks like this:

```json
{
  "definition": {
        "component": "kds-team.processor-csv-to-json"
    },
  "parameters": {
      "delimiter" : "__",
      "infer_types_for_unknown": true,  
      "column_types":[
          {"column":"bool__bool2",
           "type":"number"},
           {"column":"bool__bool1",
            "type":"bool"},
          {"column":"id",
           "type":"string"},
          {"column":"field.id",
           "type":"string"},
          {"column":"ansconcat",
           "type":"string"},
          {"column":"time__submitted",
           "type":"string"}
      ],
     "column_names_override" : {
          "field_id": "field-id"     
      }
  }
}
```
with this table:

time_reviewed__r1__r2|time_reviewed__r1_r_1|time_reviewed__r2|id|field_id|ansconcat|time_submitted|id2| time__11| bool__bool2|bool__bool1
-----|-----|-----|-----|-----|-----|-----|-----| -----| -----|-----
True|True|True|https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx|123456|Jan Palek|2019-08-13T19:05:45Z|mh53bpv123456t2ljkk04jlg|True|1|True
True|True|True|https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx|123456|Jan Palek|2019-08-13T19:05:45Z|mh53bpv123456t2ljkk04jlg|True|1|True
True|True|True|https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx|123456|Jan Palek|2019-08-13T19:05:45Z|mh53bpv123456t2ljkk04jlg|True|1|True
True|True|True|https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx|123456|Jan Palek|2019-08-13T19:05:45Z|mh53bpv123456t2ljkk04jlg|True|1|True

will produce a JSON object like this:

```json
[
    {
        "time": {
            "11": true,
            "reviewed": {
                "r1": {
                    "r2": true,
                    "r1": true
                },
                "r2": true
            },
            "submitted": "2019-08-13T19:05:45Z"
        },
        "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx",
        "field-id": "123456",
        "ansconcat": "Jan Palek",
        "id2": "mh53bpv123456t2ljkk04jlg",
        "bool": {
            "bool2": 1,
            "bool1": true
        }
    },
    {
        "time": {
            "11": true,
            "reviewed": {
                "r1": {
                    "r2": true,
                    "r1": true
                },
                "r2": true
            },
            "submitted": "2019-08-13T19:05:45Z"
        },
        "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx",
        "field-id": "123456",
        "ansconcat": "Jan Palek",
        "id2": "mh53bpv123456t2ljkk04jlg",
        "bool": {
            "bool2": 1,
            "bool1": true
        }
    },
    {
        "time": {
            "11": true,
            "reviewed": {
                "r1": {
                    "r2": true,
                    "r1": true
                },
                "r2": true
            },
            "submitted": "2019-08-13T19:05:45Z"
        },
        "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx",
        "field-id": "123456",
        "ansconcat": "Jan Palek",
        "id2": "mh53bpv123456t2ljkk04jlg",
        "bool": {
            "bool2": 1,
            "bool1": true
        }
    },
    {
        "time": {
            "11": true,
            "reviewed": {
                "r1": {
                    "r2": true,
                    "r1": true
                },
                "r2": true
            },
            "submitted": "2019-08-13T19:05:45Z"
        },
        "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx",
        "field-id": "123456",
        "ansconcat": "Jan Palek",
        "id2": "mh53bpv123456t2ljkk04jlg",
        "bool": {
            "bool2": 1,
            "bool1": true
        }
    }
]
```

