Directory structure:
└── kds_consulting_team-kds-team.processor-jsonl/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── bitbucket-pipelines.yml
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   └── component.py
    └── tests/
        ├── __init__.py
        ├── test_component.py
        ├── test_functional.py
        ├── functional/
        │   ├── basic/
        │   │   ├── expected/
        │   │   │   └── data/
        │   │   │       ├── in/
        │   │   │       │   ├── files/
        │   │   │       │   │   └── .gitkeep
        │   │   │       │   └── tables/
        │   │   │       │       └── .gitkeep
        │   │   │       └── out/
        │   │   │           ├── files/
        │   │   │           │   └── .gitkeep
        │   │   │           └── tables/
        │   │   │               ├── test
        │   │   │               └── test.manifest
        │   │   └── source/
        │   │       └── data/
        │   │           ├── config.json
        │   │           ├── in/
        │   │           │   ├── files/
        │   │           │   │   └── sample.jsonl
        │   │           │   └── tables/
        │   │           │       └── .gitkeep
        │   │           └── out/
        │   │               ├── files/
        │   │               │   └── .gitkeep
        │   │               └── tables/
        │   │                   └── .gitkeep
        │   ├── basic_full_load/
        │   │   ├── expected/
        │   │   │   └── data/
        │   │   │       ├── in/
        │   │   │       │   ├── files/
        │   │   │       │   │   └── .gitkeep
        │   │   │       │   └── tables/
        │   │   │       │       └── .gitkeep
        │   │   │       └── out/
        │   │   │           ├── files/
        │   │   │           │   └── .gitkeep
        │   │   │           └── tables/
        │   │   │               ├── test
        │   │   │               └── test.manifest
        │   │   └── source/
        │   │       └── data/
        │   │           ├── config.json
        │   │           ├── in/
        │   │           │   ├── files/
        │   │           │   │   └── sample.jsonl
        │   │           │   └── tables/
        │   │           │       └── .gitkeep
        │   │           └── out/
        │   │               ├── files/
        │   │               │   └── .gitkeep
        │   │               └── tables/
        │   │                   └── .gitkeep
        │   ├── basic_nesting_separator/
        │   │   ├── expected/
        │   │   │   └── data/
        │   │   │       ├── in/
        │   │   │       │   ├── files/
        │   │   │       │   │   └── .gitkeep
        │   │   │       │   └── tables/
        │   │   │       │       └── .gitkeep
        │   │   │       └── out/
        │   │   │           ├── files/
        │   │   │           │   └── .gitkeep
        │   │   │           └── tables/
        │   │   │               ├── test
        │   │   │               └── test.manifest
        │   │   └── source/
        │   │       └── data/
        │   │           ├── config.json
        │   │           ├── in/
        │   │           │   ├── files/
        │   │           │   │   └── sample.jsonl
        │   │           │   └── tables/
        │   │           │       └── .gitkeep
        │   │           └── out/
        │   │               ├── files/
        │   │               │   └── .gitkeep
        │   │               └── tables/
        │   │                   └── .gitkeep
        │   ├── empty_config/
        │   │   ├── expected/
        │   │   │   └── data/
        │   │   │       ├── in/
        │   │   │       │   ├── files/
        │   │   │       │   │   └── .gitkeep
        │   │   │       │   └── tables/
        │   │   │       │       └── .gitkeep
        │   │   │       └── out/
        │   │   │           └── tables/
        │   │   │               ├── converted_jsonl
        │   │   │               └── converted_jsonl.manifest
        │   │   └── source/
        │   │       └── data/
        │   │           ├── config.json
        │   │           ├── in/
        │   │           │   ├── files/
        │   │           │   │   └── sample.jsonl
        │   │           │   └── tables/
        │   │           │       └── .gitkeep
        │   │           └── out/
        │   │               └── tables/
        │   │                   └── .gitkeep
        │   └── one_unsupported_file/
        │       ├── expected/
        │       │   └── data/
        │       │       ├── in/
        │       │       │   ├── files/
        │       │       │   │   └── .gitkeep
        │       │       │   └── tables/
        │       │       │       └── .gitkeep
        │       │       └── out/
        │       │           ├── files/
        │       │           │   └── .gitkeep
        │       │           └── tables/
        │       │               ├── test
        │       │               └── test.manifest
        │       └── source/
        │           └── data/
        │               ├── config.json
        │               ├── in/
        │               │   ├── files/
        │               │   │   ├── sample.jsonl
        │               │   │   └── sample2.jsonl
        │               │   └── tables/
        │               │       └── .gitkeep
        │               └── out/
        │                   ├── files/
        │                   │   └── .gitkeep
        │                   └── tables/
        │                       └── .gitkeep
        └── functional_dtypes/
            ├── basic/
            │   ├── expected/
            │   │   └── data/
            │   │       ├── in/
            │   │       │   ├── files/
            │   │       │   │   └── .gitkeep
            │   │       │   └── tables/
            │   │       │       └── .gitkeep
            │   │       └── out/
            │   │           ├── files/
            │   │           │   └── .gitkeep
            │   │           └── tables/
            │   │               ├── test
            │   │               └── test.manifest
            │   └── source/
            │       └── data/
            │           ├── config.json
            │           ├── in/
            │           │   ├── files/
            │           │   │   └── sample.jsonl
            │           │   └── tables/
            │           │       └── .gitkeep
            │           └── out/
            │               ├── files/
            │               │   └── .gitkeep
            │               └── tables/
            │                   └── .gitkeep
            ├── basic_full_load/
            │   ├── expected/
            │   │   └── data/
            │   │       ├── in/
            │   │       │   ├── files/
            │   │       │   │   └── .gitkeep
            │   │       │   └── tables/
            │   │       │       └── .gitkeep
            │   │       └── out/
            │   │           ├── files/
            │   │           │   └── .gitkeep
            │   │           └── tables/
            │   │               ├── test
            │   │               └── test.manifest
            │   └── source/
            │       └── data/
            │           ├── config.json
            │           ├── in/
            │           │   ├── files/
            │           │   │   └── sample.jsonl
            │           │   └── tables/
            │           │       └── .gitkeep
            │           └── out/
            │               ├── files/
            │               │   └── .gitkeep
            │               └── tables/
            │                   └── .gitkeep
            ├── basic_nesting_separator/
            │   ├── expected/
            │   │   └── data/
            │   │       ├── in/
            │   │       │   ├── files/
            │   │       │   │   └── .gitkeep
            │   │       │   └── tables/
            │   │       │       └── .gitkeep
            │   │       └── out/
            │   │           ├── files/
            │   │           │   └── .gitkeep
            │   │           └── tables/
            │   │               ├── test
            │   │               └── test.manifest
            │   └── source/
            │       └── data/
            │           ├── config.json
            │           ├── in/
            │           │   ├── files/
            │           │   │   └── sample.jsonl
            │           │   └── tables/
            │           │       └── .gitkeep
            │           └── out/
            │               ├── files/
            │               │   └── .gitkeep
            │               └── tables/
            │                   └── .gitkeep
            ├── empty_config/
            │   ├── expected/
            │   │   └── data/
            │   │       ├── in/
            │   │       │   ├── files/
            │   │       │   │   └── .gitkeep
            │   │       │   └── tables/
            │   │       │       └── .gitkeep
            │   │       └── out/
            │   │           └── tables/
            │   │               ├── converted_jsonl
            │   │               └── converted_jsonl.manifest
            │   └── source/
            │       └── data/
            │           ├── config.json
            │           ├── in/
            │           │   ├── files/
            │           │   │   └── sample.jsonl
            │           │   └── tables/
            │           │       └── .gitkeep
            │           └── out/
            │               └── tables/
            │                   └── .gitkeep
            └── one_unsupported_file/
                ├── expected/
                │   └── data/
                │       ├── in/
                │       │   ├── files/
                │       │   │   └── .gitkeep
                │       │   └── tables/
                │       │       └── .gitkeep
                │       └── out/
                │           ├── files/
                │           │   └── .gitkeep
                │           └── tables/
                │               ├── test
                │               └── test.manifest
                └── source/
                    └── data/
                        ├── config.json
                        ├── in/
                        │   ├── files/
                        │   │   ├── sample.jsonl
                        │   │   └── sample2.jsonl
                        │   └── tables/
                        │       └── .gitkeep
                        └── out/
                            ├── files/
                            │   └── .gitkeep
                            └── tables/
                                └── .gitkeep

================================================
File: README.md
================================================
JSONL Processor
=============

Description

This processor can be used to convert jsonl files to csv files to further consume in Keboola.

[TOC]


Configuration
=============

This processor has the following configuration parameters:

- `debug` [bool] (optional) - DEFAULT: `false` Can be used to track progress in case you are processing a large number of files. It also has increased verbosity.
- `add_source_column` [bool] (optional) - DEFAULT: `false` Adds a new column to the output with the name of the source file. This can help with debugging or additional processing. 
- `fail_on_error` [bool] (optional) - DEFAULT: `false` If set to True, the processor will stop on any error. Otherwise, it will simply skip files that cannot be processed.
- `destination.table_name` [str] (optional) - Name of the resulting table. Defaults to "converted_jsonl". 
- `destination.incremental` [bool] (optional) - If set to true, the table will be stored incrementally. Default is full load.
- `destination.primary_key` [list] (optional) - Can be used to do incremental loads and deduplication. It is a JSON-path split by nesting separator character (`.` by default)
  of properties that can be used as primary key of each object. E.g. `customer.id` to get `id` from
  object `{"customer":{"id":123, "name":"David"}}`
- `destination.pk_nesting_separator` [list] (optional) DEFAULT: `.` - String to define object nesting in primary key
  JSON path. This is useful when the column name contains `.` character. E.g. use `|` and primary key `customer.data|id` to
  get `id` from object `{"customer.data":{"id":123, "name":"David"}}`

Configuration Example
======
Incremental load:
```
  "parameters": {
    "debug": true,
    "destination": {
      "table_name": "test",
      "incremental": true,
      "primary_key": ["id", "customer.id"]
      "pk_nesting_separator": "."
    },
    "add_source_column": true,
    "fail_on_error": true
  }
```
The configuration above will create a table named `test` with columns `record`, `source`, `id` and `customer__id` where `id` and `customer__id` are primary keys.

Full load:
```
  "parameters": {
    "destination": {
      "table_name": "demo"
    }
  }
```
This configuration will create a table named `demo` with a single column `record`.

Output
======

Jsonl files are processed into a csv file with defined name or as `converted_jsonl` as default.
Resulting jsons are stored in `record` column. Additional columns defined in `destination.primary_key` are stored as primary keys.

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone https://bitbucket.org/kds_consulting_team/kds-team.processor-jsonl kds-team.processor-jsonl
cd kds-team.processor-jsonl
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)


================================================
File: Dockerfile
================================================
FROM python:3.12-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
keboola.component==1.6.6
keboola.utils
mock
freezegun
https://bitbucket.org/kds_consulting_team/datadirtest/get/1.5.1.zip#egg=datadirtest

================================================
File: component_config/component_long_description.md
================================================
This processor can be used to convert jsonl files to csv files to further consume in Keboola.

================================================
File: component_config/component_short_description.md
================================================
JSONL Processor

================================================
File: component_config/configRowSchema.json
================================================
{}

================================================
File: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "extractor configuration",
  "required": [
    "print_hello"
  ],
  "properties": {
    "print_hello": {
      "type": "boolean",
      "title": "Print Hello",
      "propertyOrder": 1
    },
    "debug": {
      "type": "boolean",
      "title": "Debug",
      "propertyOrder": 2
    }
  }
}


================================================
File: component_config/configuration_description.md
================================================
### Configuration

This processor has the following configuration parameters:

- `debug` [bool] (optional) - DEFAULT: `false` Can be used to track progress in case you are processing a large number of files. It also has increased verbosity.
- `add_source_column` [bool] (optional) - DEFAULT: `false` Adds a new column to the output with the name of the source file. This can help with debugging or additional processing. 
- `fail_on_error` [bool] (optional) - DEFAULT: `false` If set to True, the processor will stop on any error. Otherwise, it will simply skip files that cannot be processed.
- `destination.table_name` [str] (optional) - Name of the resulting table. Defaults to "converted_jsonl". 
- `destination.incremental` [bool] (optional) - If set to true, the table will be stored incrementally. Default is full load.
- `destination.primary_key` [list] (optional) - Can be used to do incremental loads and deduplication. It is a JSON-path split by nesting separator character (`.` by default)
  of properties that can be used as primary key of each object. E.g. `customer.id` to get `id` from
  object `{"customer":{"id":123, "name":"David"}}`
- `destination.pk_nesting_separator` [list] (optional) DEFAULT: `.` - String to define object nesting in primary key
  JSON path. This is useful when the column name contains `.` character. E.g. use `|` and primary key `customer.data|id` to
  get `id` from object `{"customer.data":{"id":123, "name":"David"}}`

#### Configuration Example

Incremental load:
```
  "parameters": {
    "debug": true,
    "destination": {
      "table_name": "test",
      "incremental": true,
      "primary_key": ["id", "customer.id"]
      "pk_nesting_separator": "."
    },
    "add_source_column": true,
    "fail_on_error": true
  }
```
The configuration above will create a table named `test` with columns `record`, `source`, `id` and `customer__id` where `id` and `customer__id` are primary keys.

Full load:
```
  "parameters": {
    "destination": {
      "table_name": "demo"
    }
  }
```
This configuration will create a table named `demo` with a single column `record`.

================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: src/component.py
================================================
"""
Template Component main class.

"""
import csv
import json
import logging

from keboola.component.base import ComponentBase
from keboola.component.dao import FileDefinition, TableDefinition
from keboola.component.exceptions import UserException

REQUIRED_PARAMETERS = []


class Component(ComponentBase):

    def __init__(self):
        super().__init__()

    def run(self):
        """
        Main execution code
        """
        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        params = self.configuration.parameters

        add_source_column = params.get("add_source_column")
        fail_on_error = params.get("fail_on_error")

        destination = params.get("destination", {})
        table_name = destination.get("table_name", "converted_jsonl")

        columns = ["record"]
        if add_source_column:
            columns.append("source")

        incremental = destination.get("incremental", False)
        primary_key = destination.get("primary_key", [])
        nesting_separator = destination.get("pk_nesting_separator", '.')
        modified_primary_key = [item.replace(nesting_separator, '__') for item in primary_key]

        if not isinstance(primary_key, list):
            raise UserException(f"Primary key must be a list of strings. Primary key: {primary_key}")
        columns.extend(modified_primary_key)

        files = self.get_input_files_definitions()
        for jsonl in files:
            if self.is_jsonl_file(jsonl.full_path):
                table = self.create_out_table_definition(table_name, schema=columns, incremental=incremental,
                                                         primary_key=modified_primary_key)
                self.jsonl2csv(jsonl, table, primary_key, add_source_column, nesting_separator)
                self.write_manifest(table)
            else:
                msg = f"{jsonl.name} is not a valid jsonl file"
                if fail_on_error:
                    raise UserException(msg)
                logging.warning(msg)

    def jsonl2csv(self, jsonl: FileDefinition, table: TableDefinition, primary_key: list,
                  add_source_column: bool = False, pk_nesting_separator: str = '.') -> None:
        input_file_path = jsonl.full_path
        input_file_name = jsonl.name
        output_file_path = table.full_path

        with open(input_file_path, 'r', encoding='utf-8') as jsonl_file:
            with open(output_file_path, 'a', encoding='utf-8', newline='') as csv_file:
                csv_writer = csv.writer(csv_file)

                for line in jsonl_file:
                    data = []
                    json_data = json.loads(line)
                    data.append(json.dumps(json_data, ensure_ascii=False))

                    if add_source_column:
                        data.append(input_file_name)

                    if primary_key:
                        keys = self.get_primary_key_value(json_data, primary_key, pk_nesting_separator)
                        data.extend(keys.values())

                    csv_writer.writerow(data)

                logging.debug(f"jsonl file {input_file_path} has been converted to {output_file_path}")

    @staticmethod
    def get_primary_key_value(json_data: dict, primary_key: list, nesting_separator: str = '.') -> dict:
        """
        Tries to find an object defined by primary_key, for example ([id, customer.id]) in json_data and
        returns the found values as a dict
        """
        result = {}
        for pk in primary_key:
            keys = pk.split(nesting_separator)
            temp_data = json_data
            for key in keys:
                if key in temp_data:
                    temp_data = temp_data[key]
                else:
                    raise UserException(f"Primary Key {pk} not found in json {json_data}")
            else:
                result[pk] = temp_data
        return result

    @staticmethod
    def is_jsonl_file(file_path: str) -> bool:
        """Checks the first line of jsonl file to determine if the file is a valid json."""
        try:
            with open(file_path, 'r') as file:
                line = file.readline().strip()
                if line:
                    try:
                        json.loads(line)  # Attempt to parse the first line as JSON
                    except json.JSONDecodeError:
                        logging.debug(f"File {file_path} is not a valid jsonl file.")
                        return False
                else:
                    logging.debug(f"File {file_path} is empty.")
                    return False

                return True  # First line is either empty or valid JSON, likely JSONL

        except (IOError, OSError) as e:
            logging.debug(f"File {file_path} not found or cannot be opened: {e}")
            return False


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: tests/test_functional.py
================================================
import unittest
import os
import logging

from datadirtest import DataDirTester
from freezegun import freeze_time


class TestComponent(unittest.TestCase):

    @freeze_time("2023-04-02")
    def test_functional(self):
        functional_tests = DataDirTester()
        functional_tests.run()

    def test_functional_types(self):
        logging.info('Running functional tests with dtypes')
        os.environ['KBC_DATA_TYPE_SUPPORT'] = 'authoritative'
        functional_tests = DataDirTester(data_dir='./tests/functional_dtypes')
        functional_tests.run()


if __name__ == "__main__":
    unittest.main()


================================================
File: tests/functional/basic/expected/data/out/tables/test
================================================
"{""id"": 1, ""name"": ""John"", ""age"": 25, ""city"": ""New York"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,1,101
"{""id"": 2, ""name"": ""Emily"", ""age"": 30, ""city"": ""Los Angeles"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,2,102
"{""id"": 3, ""name"": ""Michael"", ""age"": 28, ""city"": ""Chicago"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,3,103
"{""id"": 4, ""name"": ""Sophia"", ""age"": 22, ""city"": ""Houston"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,4,101
"{""id"": 5, ""name"": ""William"", ""age"": 27, ""city"": ""Miami"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,5,105
"{""id"": 6, ""name"": ""Olivia"", ""age"": 29, ""city"": ""San Francisco"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,6,101
"{""id"": 7, ""name"": ""James"", ""age"": 24, ""city"": ""Seattle"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,7,102
"{""id"": 8, ""name"": ""Ava"", ""age"": 26, ""city"": ""Boston"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,8,103
"{""id"": 9, ""name"": ""Benjamin"", ""age"": 31, ""city"": ""Denver"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,9,101
"{""id"": 10, ""name"": ""Emma"", ""age"": 23, ""city"": ""Austin"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,10,105
"{""id"": 11, ""name"": ""Liam"", ""age"": 33, ""city"": ""Nashville"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,11,101
"{""id"": 12, ""name"": ""Isabella"", ""age"": 21, ""city"": ""Portland"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,12,102
"{""id"": 13, ""name"": ""Mason"", ""age"": 32, ""city"": ""Phoenix"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,13,103
"{""id"": 14, ""name"": ""Mia"", ""age"": 28, ""city"": ""San Diego"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,14,101
"{""id"": 15, ""name"": ""Ethan"", ""age"": 27, ""city"": ""Atlanta"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,15,105
"{""id"": 16, ""name"": ""Amelia"", ""age"": 25, ""city"": ""Dallas"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,16,101
"{""id"": 17, ""name"": ""Oliver"", ""age"": 29, ""city"": ""Las Vegas"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,17,102
"{""id"": 18, ""name"": ""Charlotte"", ""age"": 24, ""city"": ""New Orleans"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,18,103
"{""id"": 19, ""name"": ""Lucas"", ""age"": 26, ""city"": ""Minneapolis"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,19,101
"{""id"": 20, ""name"": ""Aria"", ""age"": 30, ""city"": ""Philadelphia"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,20,105


================================================
File: tests/functional/basic/expected/data/out/tables/test.manifest
================================================
{"incremental": true, "primary_key": ["id", "customer__id"], "write_always": false, "delimiter": ",", "enclosure": "\"", "columns": ["record", "source", "id", "customer__id"]}

================================================
File: tests/functional/basic/source/data/config.json
================================================
{
  "parameters": {
    "destination": {
      "table_name": "test",
      "incremental": true,
      "primary_key": ["id", "customer.id"]
    },
    "add_source_column": true,
    "fail_on_error": true
  },
  "action":"run"
}


================================================
File: tests/functional/basic/source/data/in/files/sample.jsonl
================================================
{"id": 1, "name": "John", "age": 25, "city": "New York", "customer": {"id": 101, "name": "Alice"}}
{"id": 2, "name": "Emily", "age": 30, "city": "Los Angeles", "customer": {"id": 102, "name": "Bob"}}
{"id": 3, "name": "Michael", "age": 28, "city": "Chicago", "customer": {"id": 103, "name": "Charlie"}}
{"id": 4, "name": "Sophia", "age": 22, "city": "Houston", "customer": {"id": 101, "name": "Alice"}}
{"id": 5, "name": "William", "age": 27, "city": "Miami", "customer": {"id": 105, "name": "Eve"}}
{"id": 6, "name": "Olivia", "age": 29, "city": "San Francisco", "customer": {"id": 101, "name": "Alice"}}
{"id": 7, "name": "James", "age": 24, "city": "Seattle", "customer": {"id": 102, "name": "Bob"}}
{"id": 8, "name": "Ava", "age": 26, "city": "Boston", "customer": {"id": 103, "name": "Charlie"}}
{"id": 9, "name": "Benjamin", "age": 31, "city": "Denver", "customer": {"id": 101, "name": "Alice"}}
{"id": 10, "name": "Emma", "age": 23, "city": "Austin", "customer": {"id": 105, "name": "Eve"}}
{"id": 11, "name": "Liam", "age": 33, "city": "Nashville", "customer": {"id": 101, "name": "Alice"}}
{"id": 12, "name": "Isabella", "age": 21, "city": "Portland", "customer": {"id": 102, "name": "Bob"}}
{"id": 13, "name": "Mason", "age": 32, "city": "Phoenix", "customer": {"id": 103, "name": "Charlie"}}
{"id": 14, "name": "Mia", "age": 28, "city": "San Diego", "customer": {"id": 101, "name": "Alice"}}
{"id": 15, "name": "Ethan", "age": 27, "city": "Atlanta", "customer": {"id": 105, "name": "Eve"}}
{"id": 16, "name": "Amelia", "age": 25, "city": "Dallas", "customer": {"id": 101, "name": "Alice"}}
{"id": 17, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer": {"id": 102, "name": "Bob"}}
{"id": 18, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer": {"id": 103, "name": "Charlie"}}
{"id": 19, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer": {"id": 101, "name": "Alice"}}
{"id": 20, "name": "Aria", "age": 30, "city": "Philadelphia", "customer": {"id": 105, "name": "Eve"}}


================================================
File: tests/functional/basic_full_load/expected/data/out/tables/test
================================================
"{""id"": 1, ""name"": ""John"", ""age"": 25, ""city"": ""New York"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 2, ""name"": ""Emily"", ""age"": 30, ""city"": ""Los Angeles"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl
"{""id"": 3, ""name"": ""Michael"", ""age"": 28, ""city"": ""Chicago"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl
"{""id"": 4, ""name"": ""Sophia"", ""age"": 22, ""city"": ""Houston"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 5, ""name"": ""William"", ""age"": 27, ""city"": ""Miami"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl
"{""id"": 6, ""name"": ""Olivia"", ""age"": 29, ""city"": ""San Francisco"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 7, ""name"": ""James"", ""age"": 24, ""city"": ""Seattle"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl
"{""id"": 8, ""name"": ""Ava"", ""age"": 26, ""city"": ""Boston"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl
"{""id"": 9, ""name"": ""Benjamin"", ""age"": 31, ""city"": ""Denver"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 10, ""name"": ""Emma"", ""age"": 23, ""city"": ""Austin"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl
"{""id"": 11, ""name"": ""Liam"", ""age"": 33, ""city"": ""Nashville"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 12, ""name"": ""Isabella"", ""age"": 21, ""city"": ""Portland"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl
"{""id"": 13, ""name"": ""Mason"", ""age"": 32, ""city"": ""Phoenix"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl
"{""id"": 14, ""name"": ""Mia"", ""age"": 28, ""city"": ""San Diego"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 15, ""name"": ""Ethan"", ""age"": 27, ""city"": ""Atlanta"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl
"{""id"": 16, ""name"": ""Amelia"", ""age"": 25, ""city"": ""Dallas"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 17, ""name"": ""Oliver"", ""age"": 29, ""city"": ""Las Vegas"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl
"{""id"": 18, ""name"": ""Charlotte"", ""age"": 24, ""city"": ""New Orleans"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl
"{""id"": 19, ""name"": ""Lucas"", ""age"": 26, ""city"": ""Minneapolis"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 20, ""name"": ""Aria"", ""age"": 30, ""city"": ""Philadelphia"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl


================================================
File: tests/functional/basic_full_load/expected/data/out/tables/test.manifest
================================================
{"incremental": false, "write_always": false, "delimiter": ",", "enclosure": "\"", "columns": ["record", "source"]}

================================================
File: tests/functional/basic_full_load/source/data/config.json
================================================
{
  "parameters": {
    "destination": {
      "table_name": "test",
      "incremental": false,
      "primary_key": []
    },
    "add_source_column": true,
    "fail_on_error": false
  },
  "action":"run"
}


================================================
File: tests/functional/basic_full_load/source/data/in/files/sample.jsonl
================================================
{"id": 1, "name": "John", "age": 25, "city": "New York", "customer": {"id": 101, "name": "Alice"}}
{"id": 2, "name": "Emily", "age": 30, "city": "Los Angeles", "customer": {"id": 102, "name": "Bob"}}
{"id": 3, "name": "Michael", "age": 28, "city": "Chicago", "customer": {"id": 103, "name": "Charlie"}}
{"id": 4, "name": "Sophia", "age": 22, "city": "Houston", "customer": {"id": 101, "name": "Alice"}}
{"id": 5, "name": "William", "age": 27, "city": "Miami", "customer": {"id": 105, "name": "Eve"}}
{"id": 6, "name": "Olivia", "age": 29, "city": "San Francisco", "customer": {"id": 101, "name": "Alice"}}
{"id": 7, "name": "James", "age": 24, "city": "Seattle", "customer": {"id": 102, "name": "Bob"}}
{"id": 8, "name": "Ava", "age": 26, "city": "Boston", "customer": {"id": 103, "name": "Charlie"}}
{"id": 9, "name": "Benjamin", "age": 31, "city": "Denver", "customer": {"id": 101, "name": "Alice"}}
{"id": 10, "name": "Emma", "age": 23, "city": "Austin", "customer": {"id": 105, "name": "Eve"}}
{"id": 11, "name": "Liam", "age": 33, "city": "Nashville", "customer": {"id": 101, "name": "Alice"}}
{"id": 12, "name": "Isabella", "age": 21, "city": "Portland", "customer": {"id": 102, "name": "Bob"}}
{"id": 13, "name": "Mason", "age": 32, "city": "Phoenix", "customer": {"id": 103, "name": "Charlie"}}
{"id": 14, "name": "Mia", "age": 28, "city": "San Diego", "customer": {"id": 101, "name": "Alice"}}
{"id": 15, "name": "Ethan", "age": 27, "city": "Atlanta", "customer": {"id": 105, "name": "Eve"}}
{"id": 16, "name": "Amelia", "age": 25, "city": "Dallas", "customer": {"id": 101, "name": "Alice"}}
{"id": 17, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer": {"id": 102, "name": "Bob"}}
{"id": 18, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer": {"id": 103, "name": "Charlie"}}
{"id": 19, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer": {"id": 101, "name": "Alice"}}
{"id": 20, "name": "Aria", "age": 30, "city": "Philadelphia", "customer": {"id": 105, "name": "Eve"}}


================================================
File: tests/functional/basic_nesting_separator/expected/data/out/tables/test
================================================
"{""id"": 1, ""name"": ""John"", ""age"": 25, ""city"": ""New York"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,1,101
"{""id"": 2, ""name"": ""Emily"", ""age"": 30, ""city"": ""Los Angeles"", ""customer.data"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,2,102
"{""id"": 3, ""name"": ""Michael"", ""age"": 28, ""city"": ""Chicago"", ""customer.data"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,3,103
"{""id"": 4, ""name"": ""Sophia"", ""age"": 22, ""city"": ""Houston"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,4,101
"{""id"": 5, ""name"": ""William"", ""age"": 27, ""city"": ""Miami"", ""customer.data"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,5,105
"{""id"": 6, ""name"": ""Olivia"", ""age"": 29, ""city"": ""San Francisco"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,6,101
"{""id"": 7, ""name"": ""James"", ""age"": 24, ""city"": ""Seattle"", ""customer.data"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,7,102
"{""id"": 8, ""name"": ""Ava"", ""age"": 26, ""city"": ""Boston"", ""customer.data"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,8,103
"{""id"": 9, ""name"": ""Benjamin"", ""age"": 31, ""city"": ""Denver"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,9,101
"{""id"": 10, ""name"": ""Emma"", ""age"": 23, ""city"": ""Austin"", ""customer.data"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,10,105
"{""id"": 11, ""name"": ""Liam"", ""age"": 33, ""city"": ""Nashville"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,11,101
"{""id"": 12, ""name"": ""Isabella"", ""age"": 21, ""city"": ""Portland"", ""customer.data"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,12,102
"{""id"": 13, ""name"": ""Mason"", ""age"": 32, ""city"": ""Phoenix"", ""customer.data"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,13,103
"{""id"": 14, ""name"": ""Mia"", ""age"": 28, ""city"": ""San Diego"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,14,101
"{""id"": 15, ""name"": ""Ethan"", ""age"": 27, ""city"": ""Atlanta"", ""customer.data"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,15,105
"{""id"": 16, ""name"": ""Amelia"", ""age"": 25, ""city"": ""Dallas"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,16,101
"{""id"": 17, ""name"": ""Oliver"", ""age"": 29, ""city"": ""Las Vegas"", ""customer.data"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,17,102
"{""id"": 18, ""name"": ""Charlotte"", ""age"": 24, ""city"": ""New Orleans"", ""customer.data"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,18,103
"{""id"": 19, ""name"": ""Lucas"", ""age"": 26, ""city"": ""Minneapolis"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,19,101
"{""id"": 20, ""name"": ""Aria"", ""age"": 30, ""city"": ""Philadelphia"", ""customer.data"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,20,105


================================================
File: tests/functional/basic_nesting_separator/expected/data/out/tables/test.manifest
================================================
{"incremental": true, "primary_key": ["id", "customer.data__id"], "write_always": false, "delimiter": ",", "enclosure": "\"", "columns": ["record", "source", "id", "customer.data__id"]}

================================================
File: tests/functional/basic_nesting_separator/source/data/config.json
================================================
{
  "parameters": {
    "destination": {
      "table_name": "test",
      "incremental": true,
      "primary_key": ["id", "customer.data|id"],
      "pk_nesting_separator": "|"
    },
    "add_source_column": true,
    "fail_on_error": true
  },
  "action":"run"
}


================================================
File: tests/functional/basic_nesting_separator/source/data/in/files/sample.jsonl
================================================
{"id": 1, "name": "John", "age": 25, "city": "New York", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 2, "name": "Emily", "age": 30, "city": "Los Angeles", "customer.data": {"id": 102, "name": "Bob"}}
{"id": 3, "name": "Michael", "age": 28, "city": "Chicago", "customer.data": {"id": 103, "name": "Charlie"}}
{"id": 4, "name": "Sophia", "age": 22, "city": "Houston", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 5, "name": "William", "age": 27, "city": "Miami", "customer.data": {"id": 105, "name": "Eve"}}
{"id": 6, "name": "Olivia", "age": 29, "city": "San Francisco", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 7, "name": "James", "age": 24, "city": "Seattle", "customer.data": {"id": 102, "name": "Bob"}}
{"id": 8, "name": "Ava", "age": 26, "city": "Boston", "customer.data": {"id": 103, "name": "Charlie"}}
{"id": 9, "name": "Benjamin", "age": 31, "city": "Denver", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 10, "name": "Emma", "age": 23, "city": "Austin", "customer.data": {"id": 105, "name": "Eve"}}
{"id": 11, "name": "Liam", "age": 33, "city": "Nashville", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 12, "name": "Isabella", "age": 21, "city": "Portland", "customer.data": {"id": 102, "name": "Bob"}}
{"id": 13, "name": "Mason", "age": 32, "city": "Phoenix", "customer.data": {"id": 103, "name": "Charlie"}}
{"id": 14, "name": "Mia", "age": 28, "city": "San Diego", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 15, "name": "Ethan", "age": 27, "city": "Atlanta", "customer.data": {"id": 105, "name": "Eve"}}
{"id": 16, "name": "Amelia", "age": 25, "city": "Dallas", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 17, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer.data": {"id": 102, "name": "Bob"}}
{"id": 18, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer.data": {"id": 103, "name": "Charlie"}}
{"id": 19, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 20, "name": "Aria", "age": 30, "city": "Philadelphia", "customer.data": {"id": 105, "name": "Eve"}}


================================================
File: tests/functional/empty_config/expected/data/out/tables/converted_jsonl
================================================
"{""id"": 1, ""name"": ""John"", ""age"": 25, ""city"": ""New York"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 2, ""name"": ""Emily"", ""age"": 30, ""city"": ""Los Angeles"", ""customer"": {""id"": 102, ""name"": ""Bob""}}"
"{""id"": 3, ""name"": ""Michael"", ""age"": 28, ""city"": ""Chicago"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}"
"{""id"": 4, ""name"": ""Sophia"", ""age"": 22, ""city"": ""Houston"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 5, ""name"": ""William"", ""age"": 27, ""city"": ""Miami"", ""customer"": {""id"": 105, ""name"": ""Eve""}}"
"{""id"": 6, ""name"": ""Olivia"", ""age"": 29, ""city"": ""San Francisco"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 7, ""name"": ""James"", ""age"": 24, ""city"": ""Seattle"", ""customer"": {""id"": 102, ""name"": ""Bob""}}"
"{""id"": 8, ""name"": ""Ava"", ""age"": 26, ""city"": ""Boston"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}"
"{""id"": 9, ""name"": ""Benjamin"", ""age"": 31, ""city"": ""Denver"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 10, ""name"": ""Emma"", ""age"": 23, ""city"": ""Austin"", ""customer"": {""id"": 105, ""name"": ""Eve""}}"
"{""id"": 11, ""name"": ""Liam"", ""age"": 33, ""city"": ""Nashville"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 12, ""name"": ""Isabella"", ""age"": 21, ""city"": ""Portland"", ""customer"": {""id"": 102, ""name"": ""Bob""}}"
"{""id"": 13, ""name"": ""Mason"", ""age"": 32, ""city"": ""Phoenix"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}"
"{""id"": 14, ""name"": ""Mia"", ""age"": 28, ""city"": ""San Diego"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 15, ""name"": ""Ethan"", ""age"": 27, ""city"": ""Atlanta"", ""customer"": {""id"": 105, ""name"": ""Eve""}}"
"{""id"": 16, ""name"": ""Amelia"", ""age"": 25, ""city"": ""Dallas"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 17, ""name"": ""Oliver"", ""age"": 29, ""city"": ""Las Vegas"", ""customer"": {""id"": 102, ""name"": ""Bob""}}"
"{""id"": 18, ""name"": ""Charlotte"", ""age"": 24, ""city"": ""New Orleans"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}"
"{""id"": 19, ""name"": ""Lucas"", ""age"": 26, ""city"": ""Minneapolis"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 20, ""name"": ""Aria"", ""age"": 30, ""city"": ""Philadelphia"", ""customer"": {""id"": 105, ""name"": ""Eve""}}"


================================================
File: tests/functional/empty_config/expected/data/out/tables/converted_jsonl.manifest
================================================
{"incremental": false, "write_always": false, "delimiter": ",", "enclosure": "\"", "columns": ["record"]}

================================================
File: tests/functional/empty_config/source/data/config.json
================================================
{
  "parameters": {},
  "action":"run"
}


================================================
File: tests/functional/empty_config/source/data/in/files/sample.jsonl
================================================
{"id": 1, "name": "John", "age": 25, "city": "New York", "customer": {"id": 101, "name": "Alice"}}
{"id": 2, "name": "Emily", "age": 30, "city": "Los Angeles", "customer": {"id": 102, "name": "Bob"}}
{"id": 3, "name": "Michael", "age": 28, "city": "Chicago", "customer": {"id": 103, "name": "Charlie"}}
{"id": 4, "name": "Sophia", "age": 22, "city": "Houston", "customer": {"id": 101, "name": "Alice"}}
{"id": 5, "name": "William", "age": 27, "city": "Miami", "customer": {"id": 105, "name": "Eve"}}
{"id": 6, "name": "Olivia", "age": 29, "city": "San Francisco", "customer": {"id": 101, "name": "Alice"}}
{"id": 7, "name": "James", "age": 24, "city": "Seattle", "customer": {"id": 102, "name": "Bob"}}
{"id": 8, "name": "Ava", "age": 26, "city": "Boston", "customer": {"id": 103, "name": "Charlie"}}
{"id": 9, "name": "Benjamin", "age": 31, "city": "Denver", "customer": {"id": 101, "name": "Alice"}}
{"id": 10, "name": "Emma", "age": 23, "city": "Austin", "customer": {"id": 105, "name": "Eve"}}
{"id": 11, "name": "Liam", "age": 33, "city": "Nashville", "customer": {"id": 101, "name": "Alice"}}
{"id": 12, "name": "Isabella", "age": 21, "city": "Portland", "customer": {"id": 102, "name": "Bob"}}
{"id": 13, "name": "Mason", "age": 32, "city": "Phoenix", "customer": {"id": 103, "name": "Charlie"}}
{"id": 14, "name": "Mia", "age": 28, "city": "San Diego", "customer": {"id": 101, "name": "Alice"}}
{"id": 15, "name": "Ethan", "age": 27, "city": "Atlanta", "customer": {"id": 105, "name": "Eve"}}
{"id": 16, "name": "Amelia", "age": 25, "city": "Dallas", "customer": {"id": 101, "name": "Alice"}}
{"id": 17, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer": {"id": 102, "name": "Bob"}}
{"id": 18, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer": {"id": 103, "name": "Charlie"}}
{"id": 19, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer": {"id": 101, "name": "Alice"}}
{"id": 20, "name": "Aria", "age": 30, "city": "Philadelphia", "customer": {"id": 105, "name": "Eve"}}


================================================
File: tests/functional/one_unsupported_file/expected/data/out/tables/test
================================================
"{""id"": 21, ""name"": ""Liam"", ""age"": 33, ""city"": ""Nashville"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample2.jsonl
"{""id"": 22, ""name"": ""Isabella"", ""age"": 21, ""city"": ""Portland"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample2.jsonl
"{""id"": 23, ""name"": ""Mason"", ""age"": 32, ""city"": ""Phoenix"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample2.jsonl
"{""id"": 24, ""name"": ""Mia"", ""age"": 28, ""city"": ""San Diego"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample2.jsonl
"{""id"": 25, ""name"": ""Ethan"", ""age"": 27, ""city"": ""Atlanta"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample2.jsonl
"{""id"": 26, ""name"": ""Amelia"", ""age"": 25, ""city"": ""Dallas"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample2.jsonl
"{""id"": 27, ""name"": ""Oliver"", ""age"": 29, ""city"": ""Las Vegas"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample2.jsonl
"{""id"": 28, ""name"": ""Charlotte"", ""age"": 24, ""city"": ""New Orleans"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample2.jsonl
"{""id"": 29, ""name"": ""Lucas"", ""age"": 26, ""city"": ""Minneapolis"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample2.jsonl
"{""id"": 30, ""name"": ""Aria"", ""age"": 30, ""city"": ""Philadelphia"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample2.jsonl


================================================
File: tests/functional/one_unsupported_file/expected/data/out/tables/test.manifest
================================================
{"incremental": false, "write_always": false, "delimiter": ",", "enclosure": "\"", "columns": ["record", "source"]}

================================================
File: tests/functional/one_unsupported_file/source/data/config.json
================================================
{
  "parameters": {
    "debug": true,
    "destination": {
      "table_name": "test",
      "incremental": false,
      "primary_key": []
    },
    "add_source_column": true,
    "fail_on_error": false
  },
  "action":"run"
}


================================================
File: tests/functional/one_unsupported_file/source/data/in/files/sample.jsonl
================================================
{"id": 1, "name": "John", "age": 25, "city": "New York", "customer": {"id": 101, "name": "Alice"}}xxxx
{"id": 2, "name": "Emily", "age": 30, "city": "Los Angeles", "customer": {"id": 102, "name": "Bob"}}
{"id": 3, "name": "Michael", "age": 28, "city": "Chicago", "customer": {"id": 103, "name": "Charlie"}}
{"id": 4, "name": "Sophia", "age": 22, "city": "Houston", "customer": {"id": 101, "name": "Alice"}}
{"id": 5, "name": "William", "age": 27, "city": "Miami", "customer": {"id": 105, "name": "Eve"}}
{"id": 6, "name": "Olivia", "age": 29, "city": "San Francisco", "customer": {"id": 101, "name": "Alice"}}
{"id": 7, "name": "James", "age": 24, "city": "Seattle", "customer": {"id": 102, "name": "Bob"}}
{"id": 8, "name": "Ava", "age": 26, "city": "Boston", "customer": {"id": 103, "name": "Charlie"}}
{"id": 9, "name": "Benjamin", "age": 31, "city": "Denver", "customer": {"id": 101, "name": "Alice"}}
{"id": 10, "name": "Emma", "age": 23, "city": "Austin", "customer": {"id": 105, "name": "Eve"}}
{"id": 11, "name": "Liam", "age": 33, "city": "Nashville", "customer": {"id": 101, "name": "Alice"}}
{"id": 12, "name": "Isabella", "age": 21, "city": "Portland", "customer": {"id": 102, "name": "Bob"}}
{"id": 13, "name": "Mason", "age": 32, "city": "Phoenix", "customer": {"id": 103, "name": "Charlie"}}
{"id": 14, "name": "Mia", "age": 28, "city": "San Diego", "customer": {"id": 101, "name": "Alice"}}
{"id": 15, "name": "Ethan", "age": 27, "city": "Atlanta", "customer": {"id": 105, "name": "Eve"}}
{"id": 16, "name": "Amelia", "age": 25, "city": "Dallas", "customer": {"id": 101, "name": "Alice"}}
{"id": 17, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer": {"id": 102, "name": "Bob"}}
{"id": 18, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer": {"id": 103, "name": "Charlie"}}
{"id": 19, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer": {"id": 101, "name": "Alice"}}
{"id": 20, "name": "Aria", "age": 30, "city": "Philadelphia", "customer": {"id": 105, "name": "Eve"}}


================================================
File: tests/functional/one_unsupported_file/source/data/in/files/sample2.jsonl
================================================
{"id": 21, "name": "Liam", "age": 33, "city": "Nashville", "customer": {"id": 101, "name": "Alice"}}
{"id": 22, "name": "Isabella", "age": 21, "city": "Portland", "customer": {"id": 102, "name": "Bob"}}
{"id": 23, "name": "Mason", "age": 32, "city": "Phoenix", "customer": {"id": 103, "name": "Charlie"}}
{"id": 24, "name": "Mia", "age": 28, "city": "San Diego", "customer": {"id": 101, "name": "Alice"}}
{"id": 25, "name": "Ethan", "age": 27, "city": "Atlanta", "customer": {"id": 105, "name": "Eve"}}
{"id": 26, "name": "Amelia", "age": 25, "city": "Dallas", "customer": {"id": 101, "name": "Alice"}}
{"id": 27, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer": {"id": 102, "name": "Bob"}}
{"id": 28, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer": {"id": 103, "name": "Charlie"}}
{"id": 29, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer": {"id": 101, "name": "Alice"}}
{"id": 30, "name": "Aria", "age": 30, "city": "Philadelphia", "customer": {"id": 105, "name": "Eve"}}


================================================
File: tests/functional_dtypes/basic/expected/data/out/tables/test
================================================
"{""id"": 1, ""name"": ""John"", ""age"": 25, ""city"": ""New York"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,1,101
"{""id"": 2, ""name"": ""Emily"", ""age"": 30, ""city"": ""Los Angeles"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,2,102
"{""id"": 3, ""name"": ""Michael"", ""age"": 28, ""city"": ""Chicago"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,3,103
"{""id"": 4, ""name"": ""Sophia"", ""age"": 22, ""city"": ""Houston"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,4,101
"{""id"": 5, ""name"": ""William"", ""age"": 27, ""city"": ""Miami"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,5,105
"{""id"": 6, ""name"": ""Olivia"", ""age"": 29, ""city"": ""San Francisco"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,6,101
"{""id"": 7, ""name"": ""James"", ""age"": 24, ""city"": ""Seattle"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,7,102
"{""id"": 8, ""name"": ""Ava"", ""age"": 26, ""city"": ""Boston"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,8,103
"{""id"": 9, ""name"": ""Benjamin"", ""age"": 31, ""city"": ""Denver"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,9,101
"{""id"": 10, ""name"": ""Emma"", ""age"": 23, ""city"": ""Austin"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,10,105
"{""id"": 11, ""name"": ""Liam"", ""age"": 33, ""city"": ""Nashville"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,11,101
"{""id"": 12, ""name"": ""Isabella"", ""age"": 21, ""city"": ""Portland"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,12,102
"{""id"": 13, ""name"": ""Mason"", ""age"": 32, ""city"": ""Phoenix"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,13,103
"{""id"": 14, ""name"": ""Mia"", ""age"": 28, ""city"": ""San Diego"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,14,101
"{""id"": 15, ""name"": ""Ethan"", ""age"": 27, ""city"": ""Atlanta"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,15,105
"{""id"": 16, ""name"": ""Amelia"", ""age"": 25, ""city"": ""Dallas"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,16,101
"{""id"": 17, ""name"": ""Oliver"", ""age"": 29, ""city"": ""Las Vegas"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,17,102
"{""id"": 18, ""name"": ""Charlotte"", ""age"": 24, ""city"": ""New Orleans"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,18,103
"{""id"": 19, ""name"": ""Lucas"", ""age"": 26, ""city"": ""Minneapolis"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,19,101
"{""id"": 20, ""name"": ""Aria"", ""age"": 30, ""city"": ""Philadelphia"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,20,105


================================================
File: tests/functional_dtypes/basic/expected/data/out/tables/test.manifest
================================================
{"incremental": true, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "schema": [{"name": "record", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "source", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "id", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "customer__id", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}]}

================================================
File: tests/functional_dtypes/basic/source/data/config.json
================================================
{
  "parameters": {
    "destination": {
      "table_name": "test",
      "incremental": true,
      "primary_key": ["id", "customer.id"]
    },
    "add_source_column": true,
    "fail_on_error": true
  },
  "action":"run"
}


================================================
File: tests/functional_dtypes/basic/source/data/in/files/sample.jsonl
================================================
{"id": 1, "name": "John", "age": 25, "city": "New York", "customer": {"id": 101, "name": "Alice"}}
{"id": 2, "name": "Emily", "age": 30, "city": "Los Angeles", "customer": {"id": 102, "name": "Bob"}}
{"id": 3, "name": "Michael", "age": 28, "city": "Chicago", "customer": {"id": 103, "name": "Charlie"}}
{"id": 4, "name": "Sophia", "age": 22, "city": "Houston", "customer": {"id": 101, "name": "Alice"}}
{"id": 5, "name": "William", "age": 27, "city": "Miami", "customer": {"id": 105, "name": "Eve"}}
{"id": 6, "name": "Olivia", "age": 29, "city": "San Francisco", "customer": {"id": 101, "name": "Alice"}}
{"id": 7, "name": "James", "age": 24, "city": "Seattle", "customer": {"id": 102, "name": "Bob"}}
{"id": 8, "name": "Ava", "age": 26, "city": "Boston", "customer": {"id": 103, "name": "Charlie"}}
{"id": 9, "name": "Benjamin", "age": 31, "city": "Denver", "customer": {"id": 101, "name": "Alice"}}
{"id": 10, "name": "Emma", "age": 23, "city": "Austin", "customer": {"id": 105, "name": "Eve"}}
{"id": 11, "name": "Liam", "age": 33, "city": "Nashville", "customer": {"id": 101, "name": "Alice"}}
{"id": 12, "name": "Isabella", "age": 21, "city": "Portland", "customer": {"id": 102, "name": "Bob"}}
{"id": 13, "name": "Mason", "age": 32, "city": "Phoenix", "customer": {"id": 103, "name": "Charlie"}}
{"id": 14, "name": "Mia", "age": 28, "city": "San Diego", "customer": {"id": 101, "name": "Alice"}}
{"id": 15, "name": "Ethan", "age": 27, "city": "Atlanta", "customer": {"id": 105, "name": "Eve"}}
{"id": 16, "name": "Amelia", "age": 25, "city": "Dallas", "customer": {"id": 101, "name": "Alice"}}
{"id": 17, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer": {"id": 102, "name": "Bob"}}
{"id": 18, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer": {"id": 103, "name": "Charlie"}}
{"id": 19, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer": {"id": 101, "name": "Alice"}}
{"id": 20, "name": "Aria", "age": 30, "city": "Philadelphia", "customer": {"id": 105, "name": "Eve"}}


================================================
File: tests/functional_dtypes/basic_full_load/expected/data/out/tables/test
================================================
"{""id"": 1, ""name"": ""John"", ""age"": 25, ""city"": ""New York"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 2, ""name"": ""Emily"", ""age"": 30, ""city"": ""Los Angeles"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl
"{""id"": 3, ""name"": ""Michael"", ""age"": 28, ""city"": ""Chicago"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl
"{""id"": 4, ""name"": ""Sophia"", ""age"": 22, ""city"": ""Houston"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 5, ""name"": ""William"", ""age"": 27, ""city"": ""Miami"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl
"{""id"": 6, ""name"": ""Olivia"", ""age"": 29, ""city"": ""San Francisco"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 7, ""name"": ""James"", ""age"": 24, ""city"": ""Seattle"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl
"{""id"": 8, ""name"": ""Ava"", ""age"": 26, ""city"": ""Boston"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl
"{""id"": 9, ""name"": ""Benjamin"", ""age"": 31, ""city"": ""Denver"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 10, ""name"": ""Emma"", ""age"": 23, ""city"": ""Austin"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl
"{""id"": 11, ""name"": ""Liam"", ""age"": 33, ""city"": ""Nashville"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 12, ""name"": ""Isabella"", ""age"": 21, ""city"": ""Portland"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl
"{""id"": 13, ""name"": ""Mason"", ""age"": 32, ""city"": ""Phoenix"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl
"{""id"": 14, ""name"": ""Mia"", ""age"": 28, ""city"": ""San Diego"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 15, ""name"": ""Ethan"", ""age"": 27, ""city"": ""Atlanta"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl
"{""id"": 16, ""name"": ""Amelia"", ""age"": 25, ""city"": ""Dallas"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 17, ""name"": ""Oliver"", ""age"": 29, ""city"": ""Las Vegas"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl
"{""id"": 18, ""name"": ""Charlotte"", ""age"": 24, ""city"": ""New Orleans"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl
"{""id"": 19, ""name"": ""Lucas"", ""age"": 26, ""city"": ""Minneapolis"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl
"{""id"": 20, ""name"": ""Aria"", ""age"": 30, ""city"": ""Philadelphia"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl


================================================
File: tests/functional_dtypes/basic_full_load/expected/data/out/tables/test.manifest
================================================
{"incremental": false, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "schema": [{"name": "record", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "source", "data_type": {"base": {"type": "STRING"}}, "nullable": true}]}

================================================
File: tests/functional_dtypes/basic_full_load/source/data/config.json
================================================
{
  "parameters": {
    "destination": {
      "table_name": "test",
      "incremental": false,
      "primary_key": []
    },
    "add_source_column": true,
    "fail_on_error": false
  },
  "action":"run"
}


================================================
File: tests/functional_dtypes/basic_full_load/source/data/in/files/sample.jsonl
================================================
{"id": 1, "name": "John", "age": 25, "city": "New York", "customer": {"id": 101, "name": "Alice"}}
{"id": 2, "name": "Emily", "age": 30, "city": "Los Angeles", "customer": {"id": 102, "name": "Bob"}}
{"id": 3, "name": "Michael", "age": 28, "city": "Chicago", "customer": {"id": 103, "name": "Charlie"}}
{"id": 4, "name": "Sophia", "age": 22, "city": "Houston", "customer": {"id": 101, "name": "Alice"}}
{"id": 5, "name": "William", "age": 27, "city": "Miami", "customer": {"id": 105, "name": "Eve"}}
{"id": 6, "name": "Olivia", "age": 29, "city": "San Francisco", "customer": {"id": 101, "name": "Alice"}}
{"id": 7, "name": "James", "age": 24, "city": "Seattle", "customer": {"id": 102, "name": "Bob"}}
{"id": 8, "name": "Ava", "age": 26, "city": "Boston", "customer": {"id": 103, "name": "Charlie"}}
{"id": 9, "name": "Benjamin", "age": 31, "city": "Denver", "customer": {"id": 101, "name": "Alice"}}
{"id": 10, "name": "Emma", "age": 23, "city": "Austin", "customer": {"id": 105, "name": "Eve"}}
{"id": 11, "name": "Liam", "age": 33, "city": "Nashville", "customer": {"id": 101, "name": "Alice"}}
{"id": 12, "name": "Isabella", "age": 21, "city": "Portland", "customer": {"id": 102, "name": "Bob"}}
{"id": 13, "name": "Mason", "age": 32, "city": "Phoenix", "customer": {"id": 103, "name": "Charlie"}}
{"id": 14, "name": "Mia", "age": 28, "city": "San Diego", "customer": {"id": 101, "name": "Alice"}}
{"id": 15, "name": "Ethan", "age": 27, "city": "Atlanta", "customer": {"id": 105, "name": "Eve"}}
{"id": 16, "name": "Amelia", "age": 25, "city": "Dallas", "customer": {"id": 101, "name": "Alice"}}
{"id": 17, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer": {"id": 102, "name": "Bob"}}
{"id": 18, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer": {"id": 103, "name": "Charlie"}}
{"id": 19, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer": {"id": 101, "name": "Alice"}}
{"id": 20, "name": "Aria", "age": 30, "city": "Philadelphia", "customer": {"id": 105, "name": "Eve"}}


================================================
File: tests/functional_dtypes/basic_nesting_separator/expected/data/out/tables/test
================================================
"{""id"": 1, ""name"": ""John"", ""age"": 25, ""city"": ""New York"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,1,101
"{""id"": 2, ""name"": ""Emily"", ""age"": 30, ""city"": ""Los Angeles"", ""customer.data"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,2,102
"{""id"": 3, ""name"": ""Michael"", ""age"": 28, ""city"": ""Chicago"", ""customer.data"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,3,103
"{""id"": 4, ""name"": ""Sophia"", ""age"": 22, ""city"": ""Houston"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,4,101
"{""id"": 5, ""name"": ""William"", ""age"": 27, ""city"": ""Miami"", ""customer.data"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,5,105
"{""id"": 6, ""name"": ""Olivia"", ""age"": 29, ""city"": ""San Francisco"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,6,101
"{""id"": 7, ""name"": ""James"", ""age"": 24, ""city"": ""Seattle"", ""customer.data"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,7,102
"{""id"": 8, ""name"": ""Ava"", ""age"": 26, ""city"": ""Boston"", ""customer.data"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,8,103
"{""id"": 9, ""name"": ""Benjamin"", ""age"": 31, ""city"": ""Denver"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,9,101
"{""id"": 10, ""name"": ""Emma"", ""age"": 23, ""city"": ""Austin"", ""customer.data"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,10,105
"{""id"": 11, ""name"": ""Liam"", ""age"": 33, ""city"": ""Nashville"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,11,101
"{""id"": 12, ""name"": ""Isabella"", ""age"": 21, ""city"": ""Portland"", ""customer.data"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,12,102
"{""id"": 13, ""name"": ""Mason"", ""age"": 32, ""city"": ""Phoenix"", ""customer.data"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,13,103
"{""id"": 14, ""name"": ""Mia"", ""age"": 28, ""city"": ""San Diego"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,14,101
"{""id"": 15, ""name"": ""Ethan"", ""age"": 27, ""city"": ""Atlanta"", ""customer.data"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,15,105
"{""id"": 16, ""name"": ""Amelia"", ""age"": 25, ""city"": ""Dallas"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,16,101
"{""id"": 17, ""name"": ""Oliver"", ""age"": 29, ""city"": ""Las Vegas"", ""customer.data"": {""id"": 102, ""name"": ""Bob""}}",sample.jsonl,17,102
"{""id"": 18, ""name"": ""Charlotte"", ""age"": 24, ""city"": ""New Orleans"", ""customer.data"": {""id"": 103, ""name"": ""Charlie""}}",sample.jsonl,18,103
"{""id"": 19, ""name"": ""Lucas"", ""age"": 26, ""city"": ""Minneapolis"", ""customer.data"": {""id"": 101, ""name"": ""Alice""}}",sample.jsonl,19,101
"{""id"": 20, ""name"": ""Aria"", ""age"": 30, ""city"": ""Philadelphia"", ""customer.data"": {""id"": 105, ""name"": ""Eve""}}",sample.jsonl,20,105


================================================
File: tests/functional_dtypes/basic_nesting_separator/expected/data/out/tables/test.manifest
================================================
{"incremental": true, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "schema": [{"name": "record", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "source", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "id", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "customer.data__id", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}]}

================================================
File: tests/functional_dtypes/basic_nesting_separator/source/data/config.json
================================================
{
  "parameters": {
    "destination": {
      "table_name": "test",
      "incremental": true,
      "primary_key": ["id", "customer.data|id"],
      "pk_nesting_separator": "|"
    },
    "add_source_column": true,
    "fail_on_error": true
  },
  "action":"run"
}


================================================
File: tests/functional_dtypes/basic_nesting_separator/source/data/in/files/sample.jsonl
================================================
{"id": 1, "name": "John", "age": 25, "city": "New York", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 2, "name": "Emily", "age": 30, "city": "Los Angeles", "customer.data": {"id": 102, "name": "Bob"}}
{"id": 3, "name": "Michael", "age": 28, "city": "Chicago", "customer.data": {"id": 103, "name": "Charlie"}}
{"id": 4, "name": "Sophia", "age": 22, "city": "Houston", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 5, "name": "William", "age": 27, "city": "Miami", "customer.data": {"id": 105, "name": "Eve"}}
{"id": 6, "name": "Olivia", "age": 29, "city": "San Francisco", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 7, "name": "James", "age": 24, "city": "Seattle", "customer.data": {"id": 102, "name": "Bob"}}
{"id": 8, "name": "Ava", "age": 26, "city": "Boston", "customer.data": {"id": 103, "name": "Charlie"}}
{"id": 9, "name": "Benjamin", "age": 31, "city": "Denver", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 10, "name": "Emma", "age": 23, "city": "Austin", "customer.data": {"id": 105, "name": "Eve"}}
{"id": 11, "name": "Liam", "age": 33, "city": "Nashville", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 12, "name": "Isabella", "age": 21, "city": "Portland", "customer.data": {"id": 102, "name": "Bob"}}
{"id": 13, "name": "Mason", "age": 32, "city": "Phoenix", "customer.data": {"id": 103, "name": "Charlie"}}
{"id": 14, "name": "Mia", "age": 28, "city": "San Diego", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 15, "name": "Ethan", "age": 27, "city": "Atlanta", "customer.data": {"id": 105, "name": "Eve"}}
{"id": 16, "name": "Amelia", "age": 25, "city": "Dallas", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 17, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer.data": {"id": 102, "name": "Bob"}}
{"id": 18, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer.data": {"id": 103, "name": "Charlie"}}
{"id": 19, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer.data": {"id": 101, "name": "Alice"}}
{"id": 20, "name": "Aria", "age": 30, "city": "Philadelphia", "customer.data": {"id": 105, "name": "Eve"}}


================================================
File: tests/functional_dtypes/empty_config/expected/data/out/tables/converted_jsonl
================================================
"{""id"": 1, ""name"": ""John"", ""age"": 25, ""city"": ""New York"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 2, ""name"": ""Emily"", ""age"": 30, ""city"": ""Los Angeles"", ""customer"": {""id"": 102, ""name"": ""Bob""}}"
"{""id"": 3, ""name"": ""Michael"", ""age"": 28, ""city"": ""Chicago"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}"
"{""id"": 4, ""name"": ""Sophia"", ""age"": 22, ""city"": ""Houston"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 5, ""name"": ""William"", ""age"": 27, ""city"": ""Miami"", ""customer"": {""id"": 105, ""name"": ""Eve""}}"
"{""id"": 6, ""name"": ""Olivia"", ""age"": 29, ""city"": ""San Francisco"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 7, ""name"": ""James"", ""age"": 24, ""city"": ""Seattle"", ""customer"": {""id"": 102, ""name"": ""Bob""}}"
"{""id"": 8, ""name"": ""Ava"", ""age"": 26, ""city"": ""Boston"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}"
"{""id"": 9, ""name"": ""Benjamin"", ""age"": 31, ""city"": ""Denver"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 10, ""name"": ""Emma"", ""age"": 23, ""city"": ""Austin"", ""customer"": {""id"": 105, ""name"": ""Eve""}}"
"{""id"": 11, ""name"": ""Liam"", ""age"": 33, ""city"": ""Nashville"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 12, ""name"": ""Isabella"", ""age"": 21, ""city"": ""Portland"", ""customer"": {""id"": 102, ""name"": ""Bob""}}"
"{""id"": 13, ""name"": ""Mason"", ""age"": 32, ""city"": ""Phoenix"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}"
"{""id"": 14, ""name"": ""Mia"", ""age"": 28, ""city"": ""San Diego"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 15, ""name"": ""Ethan"", ""age"": 27, ""city"": ""Atlanta"", ""customer"": {""id"": 105, ""name"": ""Eve""}}"
"{""id"": 16, ""name"": ""Amelia"", ""age"": 25, ""city"": ""Dallas"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 17, ""name"": ""Oliver"", ""age"": 29, ""city"": ""Las Vegas"", ""customer"": {""id"": 102, ""name"": ""Bob""}}"
"{""id"": 18, ""name"": ""Charlotte"", ""age"": 24, ""city"": ""New Orleans"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}"
"{""id"": 19, ""name"": ""Lucas"", ""age"": 26, ""city"": ""Minneapolis"", ""customer"": {""id"": 101, ""name"": ""Alice""}}"
"{""id"": 20, ""name"": ""Aria"", ""age"": 30, ""city"": ""Philadelphia"", ""customer"": {""id"": 105, ""name"": ""Eve""}}"


================================================
File: tests/functional_dtypes/empty_config/expected/data/out/tables/converted_jsonl.manifest
================================================
{"incremental": false, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "schema": [{"name": "record", "data_type": {"base": {"type": "STRING"}}, "nullable": true}]}

================================================
File: tests/functional_dtypes/empty_config/source/data/config.json
================================================
{
  "parameters": {},
  "action":"run"
}


================================================
File: tests/functional_dtypes/empty_config/source/data/in/files/sample.jsonl
================================================
{"id": 1, "name": "John", "age": 25, "city": "New York", "customer": {"id": 101, "name": "Alice"}}
{"id": 2, "name": "Emily", "age": 30, "city": "Los Angeles", "customer": {"id": 102, "name": "Bob"}}
{"id": 3, "name": "Michael", "age": 28, "city": "Chicago", "customer": {"id": 103, "name": "Charlie"}}
{"id": 4, "name": "Sophia", "age": 22, "city": "Houston", "customer": {"id": 101, "name": "Alice"}}
{"id": 5, "name": "William", "age": 27, "city": "Miami", "customer": {"id": 105, "name": "Eve"}}
{"id": 6, "name": "Olivia", "age": 29, "city": "San Francisco", "customer": {"id": 101, "name": "Alice"}}
{"id": 7, "name": "James", "age": 24, "city": "Seattle", "customer": {"id": 102, "name": "Bob"}}
{"id": 8, "name": "Ava", "age": 26, "city": "Boston", "customer": {"id": 103, "name": "Charlie"}}
{"id": 9, "name": "Benjamin", "age": 31, "city": "Denver", "customer": {"id": 101, "name": "Alice"}}
{"id": 10, "name": "Emma", "age": 23, "city": "Austin", "customer": {"id": 105, "name": "Eve"}}
{"id": 11, "name": "Liam", "age": 33, "city": "Nashville", "customer": {"id": 101, "name": "Alice"}}
{"id": 12, "name": "Isabella", "age": 21, "city": "Portland", "customer": {"id": 102, "name": "Bob"}}
{"id": 13, "name": "Mason", "age": 32, "city": "Phoenix", "customer": {"id": 103, "name": "Charlie"}}
{"id": 14, "name": "Mia", "age": 28, "city": "San Diego", "customer": {"id": 101, "name": "Alice"}}
{"id": 15, "name": "Ethan", "age": 27, "city": "Atlanta", "customer": {"id": 105, "name": "Eve"}}
{"id": 16, "name": "Amelia", "age": 25, "city": "Dallas", "customer": {"id": 101, "name": "Alice"}}
{"id": 17, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer": {"id": 102, "name": "Bob"}}
{"id": 18, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer": {"id": 103, "name": "Charlie"}}
{"id": 19, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer": {"id": 101, "name": "Alice"}}
{"id": 20, "name": "Aria", "age": 30, "city": "Philadelphia", "customer": {"id": 105, "name": "Eve"}}


================================================
File: tests/functional_dtypes/one_unsupported_file/expected/data/out/tables/test
================================================
"{""id"": 21, ""name"": ""Liam"", ""age"": 33, ""city"": ""Nashville"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample2.jsonl
"{""id"": 22, ""name"": ""Isabella"", ""age"": 21, ""city"": ""Portland"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample2.jsonl
"{""id"": 23, ""name"": ""Mason"", ""age"": 32, ""city"": ""Phoenix"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample2.jsonl
"{""id"": 24, ""name"": ""Mia"", ""age"": 28, ""city"": ""San Diego"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample2.jsonl
"{""id"": 25, ""name"": ""Ethan"", ""age"": 27, ""city"": ""Atlanta"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample2.jsonl
"{""id"": 26, ""name"": ""Amelia"", ""age"": 25, ""city"": ""Dallas"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample2.jsonl
"{""id"": 27, ""name"": ""Oliver"", ""age"": 29, ""city"": ""Las Vegas"", ""customer"": {""id"": 102, ""name"": ""Bob""}}",sample2.jsonl
"{""id"": 28, ""name"": ""Charlotte"", ""age"": 24, ""city"": ""New Orleans"", ""customer"": {""id"": 103, ""name"": ""Charlie""}}",sample2.jsonl
"{""id"": 29, ""name"": ""Lucas"", ""age"": 26, ""city"": ""Minneapolis"", ""customer"": {""id"": 101, ""name"": ""Alice""}}",sample2.jsonl
"{""id"": 30, ""name"": ""Aria"", ""age"": 30, ""city"": ""Philadelphia"", ""customer"": {""id"": 105, ""name"": ""Eve""}}",sample2.jsonl


================================================
File: tests/functional_dtypes/one_unsupported_file/expected/data/out/tables/test.manifest
================================================
{"incremental": false, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "schema": [{"name": "record", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "source", "data_type": {"base": {"type": "STRING"}}, "nullable": true}]}

================================================
File: tests/functional_dtypes/one_unsupported_file/source/data/config.json
================================================
{
  "parameters": {
    "debug": true,
    "destination": {
      "table_name": "test",
      "incremental": false,
      "primary_key": []
    },
    "add_source_column": true,
    "fail_on_error": false
  },
  "action":"run"
}


================================================
File: tests/functional_dtypes/one_unsupported_file/source/data/in/files/sample.jsonl
================================================
{"id": 1, "name": "John", "age": 25, "city": "New York", "customer": {"id": 101, "name": "Alice"}}xxxx
{"id": 2, "name": "Emily", "age": 30, "city": "Los Angeles", "customer": {"id": 102, "name": "Bob"}}
{"id": 3, "name": "Michael", "age": 28, "city": "Chicago", "customer": {"id": 103, "name": "Charlie"}}
{"id": 4, "name": "Sophia", "age": 22, "city": "Houston", "customer": {"id": 101, "name": "Alice"}}
{"id": 5, "name": "William", "age": 27, "city": "Miami", "customer": {"id": 105, "name": "Eve"}}
{"id": 6, "name": "Olivia", "age": 29, "city": "San Francisco", "customer": {"id": 101, "name": "Alice"}}
{"id": 7, "name": "James", "age": 24, "city": "Seattle", "customer": {"id": 102, "name": "Bob"}}
{"id": 8, "name": "Ava", "age": 26, "city": "Boston", "customer": {"id": 103, "name": "Charlie"}}
{"id": 9, "name": "Benjamin", "age": 31, "city": "Denver", "customer": {"id": 101, "name": "Alice"}}
{"id": 10, "name": "Emma", "age": 23, "city": "Austin", "customer": {"id": 105, "name": "Eve"}}
{"id": 11, "name": "Liam", "age": 33, "city": "Nashville", "customer": {"id": 101, "name": "Alice"}}
{"id": 12, "name": "Isabella", "age": 21, "city": "Portland", "customer": {"id": 102, "name": "Bob"}}
{"id": 13, "name": "Mason", "age": 32, "city": "Phoenix", "customer": {"id": 103, "name": "Charlie"}}
{"id": 14, "name": "Mia", "age": 28, "city": "San Diego", "customer": {"id": 101, "name": "Alice"}}
{"id": 15, "name": "Ethan", "age": 27, "city": "Atlanta", "customer": {"id": 105, "name": "Eve"}}
{"id": 16, "name": "Amelia", "age": 25, "city": "Dallas", "customer": {"id": 101, "name": "Alice"}}
{"id": 17, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer": {"id": 102, "name": "Bob"}}
{"id": 18, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer": {"id": 103, "name": "Charlie"}}
{"id": 19, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer": {"id": 101, "name": "Alice"}}
{"id": 20, "name": "Aria", "age": 30, "city": "Philadelphia", "customer": {"id": 105, "name": "Eve"}}


================================================
File: tests/functional_dtypes/one_unsupported_file/source/data/in/files/sample2.jsonl
================================================
{"id": 21, "name": "Liam", "age": 33, "city": "Nashville", "customer": {"id": 101, "name": "Alice"}}
{"id": 22, "name": "Isabella", "age": 21, "city": "Portland", "customer": {"id": 102, "name": "Bob"}}
{"id": 23, "name": "Mason", "age": 32, "city": "Phoenix", "customer": {"id": 103, "name": "Charlie"}}
{"id": 24, "name": "Mia", "age": 28, "city": "San Diego", "customer": {"id": 101, "name": "Alice"}}
{"id": 25, "name": "Ethan", "age": 27, "city": "Atlanta", "customer": {"id": 105, "name": "Eve"}}
{"id": 26, "name": "Amelia", "age": 25, "city": "Dallas", "customer": {"id": 101, "name": "Alice"}}
{"id": 27, "name": "Oliver", "age": 29, "city": "Las Vegas", "customer": {"id": 102, "name": "Bob"}}
{"id": 28, "name": "Charlotte", "age": 24, "city": "New Orleans", "customer": {"id": 103, "name": "Charlie"}}
{"id": 29, "name": "Lucas", "age": 26, "city": "Minneapolis", "customer": {"id": 101, "name": "Alice"}}
{"id": 30, "name": "Aria", "age": 30, "city": "Philadelphia", "customer": {"id": 105, "name": "Eve"}}


