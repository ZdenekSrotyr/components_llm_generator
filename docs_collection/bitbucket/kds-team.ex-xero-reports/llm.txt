Directory structure:
└── kds_consulting_team-kds-team.ex-xero-reports/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── bitbucket-pipelines.yml
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   └── xero/
    │       ├── __init__.py
    │       ├── client.py
    │       ├── table_definition_factory.py
    │       ├── utility.py
    │       └── xero_parser.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
File: README.md
================================================
# Xero Report Extractor
=============

## Description

This is a tool designed to extract data from Xero Accounting. It allows users to configure various parameters to tailor the extraction process according to their needs.

**Table of contents:**

[TOC]

## Functionality notes

This tool provides a dynamic UI form for configuration, enabling users to specify parameters such as date range, load type, and sync options. It supports both full load and incremental load modes, allowing users to choose between overwriting the destination table or upserting data into it. Additionally, it offers support for OAuth authentication and backfill mode, ensuring a seamless setup experience.

## Prerequisites

Xero User Account with access to source Xero instance.

## Supported endpoints

This Extractor is designed only to support Xero Reports API. Currently, only balance sheet report is supported.
If you require additional endpoints, please submit your request to [ideas.keboola.com](https://ideas.keboola.com/).

## Configuration

### Tenant IDs

- **Description**: Comma-separated list of Tenant IDs of tenants to download the data from. Leave empty to download all available. Data will be merged from all provided tenants.

### Report Parameters

- **Date**: Date must be set in YYYY-MM-DD format or to "last_month/last_year" which will use the last day of the previous month/year.
- **Timeframe**: The period size to compare to (MONTH, QUARTER, YEAR)
- **Tracking Option ID1 (Optional)**: The balance sheet will be filtered by this option if supplied. Note you cannot filter just by the TrackingCategory.
- **Tracking Option ID2 (Optional)**: If you want to filter by more than one tracking category option then you can specify a second option too. See the Balance Sheet report in Xero learn more about this behavior when filtering by tracking category options.
- **Standard Layout**: If you set this parameter to "true" then no custom report layouts will be applied to the response.
- **Payments Only**: Set this to true to get cash transactions only.

### Sync Options

- **Previous periods**: The number of previous periods to fetch data for. For example, if set to 3, the data for the current period and the previous 3 periods will be fetched. If set to 0, only the current period will be fetched.

### Destination

- **Load Type**: If Full load is used, the destination table will be overwritten every run. If incremental load is used, data will be upserted into the destination table. Tables with a primary key will have rows updated, tables without a primary key will have rows appended.

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone https://bitbucket.org/kds_consulting_team/kds-team.ex-xero-reports/src/main/ kds-team.ex-xero-reports
cd kds-team.ex-xero-reports
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)



================================================
File: Dockerfile
================================================
FROM python:3.11-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
File: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
File: requirements.txt
================================================
keboola.component==1.4.2
keboola.utils
keboola.csvwriter
mock
freezegun
xero-python==1.26.0
dateparser
regex==2022.03.02
dataconf==2.2.1


================================================
File: component_config/component_long_description.md
================================================
Xero Reports Extractor


================================================
File: component_config/component_short_description.md
================================================
Xero Reports Extractor


================================================
File: component_config/configRowSchema.json
================================================
{}


================================================
File: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Xero Accounting configuration",
  "required": [],
  "properties": {
    "tenant_ids": {
      "title": "Tenant IDs",
      "description": "Comma separated list of Tenant IDs of tenants to download the data from. Leave empty to download all available. Data will be merged from all provided tenants.",
      "type": "string",
      "propertyOrder": 10
    },
    "report_parameters": {
      "type": "object",
      "title": "Report Parameters",
      "required": [
        "date",
        "timeframe"
      ],
      "propertyOrder": 20,
      "properties": {
        "date": {
          "type": "string",
          "title": "Date",
          "description": "Date must be set in YYYY-MM-DD format or to \"last_month/last_year\" which will use the last day of previous month/year.",
          "propertyOrder": 1
        },
        "timeframe": {
          "type": "string",
          "title": "Timeframe",
          "enum": [
            "MONTH",
            "QUARTER",
            "YEAR"
          ],
          "default": "MONTH",
          "description": "The period size to compare to (MONTH, QUARTER, YEAR)",
          "propertyOrder": 3
        },
        "tracking_option_id1": {
          "type": "string",
          "title": "Tracking Option ID1 (Optional)",
          "description": "The balance sheet will be filtered by this option if supplied. Note you cannot filter just by the TrackingCategory.",
          "propertyOrder": 4
        },
        "tracking_option_id2": {
          "type": "string",
          "title": "Tracking Option ID2 (Optional)",
          "description": "If you want to filter by more than one tracking category option then you can specify a second option too. See the Balance Sheet report in Xero learn more about this behavior when filtering by tracking category options.",
          "propertyOrder": 5
        },
        "standard_layout": {
          "type": "boolean",
          "title": "Standard Layout",
          "description": "If you set this parameter to \"true\" then no custom report layouts will be applied to response.",
          "default": true,
          "propertyOrder": 6
        },
        "payments_only": {
          "type": "boolean",
          "title": "Payments Only",
          "description": "\tSet this to true to get cash transactions only.",
          "default": false,
          "propertyOrder": 7
        }
      }
    },
    "sync_options": {
      "title": "Sync Options",
      "type": "object",
      "properties": {
        "previous_periods": {
          "type": "integer",
          "title": "Previous periods",
          "description": "The number of previous periods to fetch data for. For example, if set to 3, the data for the current period and the previous 3 periods will be fetched. If set to 0, only the current period will be fetched.",
          "propertyOrder": 1
        }
      },
      "propertyOrder": 30
    },
    "destination": {
      "title": "Destination",
      "type": "object",
      "properties": {
        "load_type": {
          "type": "string",
          "required": true,
          "enum": [
            "full_load",
            "incremental_load"
          ],
          "options": {
            "enum_titles": [
              "Full Load",
              "Incremental Load"
            ]
          },
          "default": "full_load",
          "title": "Load Type",
          "description": "If Full load is used, the destination table will be overwritten every run. If incremental load is used, data will be upserted into the destination table. Tables with a primary key will have rows updated, tables without a primary key will have rows appended.",
          "propertyOrder": 10
        }
      },
      "propertyOrder": 40
    }
  }
}


================================================
File: component_config/configuration_description.md
================================================
Configuration description.


================================================
File: component_config/logger
================================================
gelf


================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"




================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
File: src/component.py
================================================
import json
import logging
from typing import Dict, List, Union
from datetime import datetime, timedelta

import dataconf.exceptions
from dateutil.relativedelta import relativedelta
from dateutil import parser

from keboola.component.base import ComponentBase
from keboola.component.exceptions import UserException
from keboola.component.interface import register_csv_dialect
from keboola.utils.helpers import comma_separated_values_to_list
from keboola.csvwriter import ElasticDictWriter

from xero_python.accounting import RowType
from xero_python.models import serialize_to_dict

from configuration import Configuration
from xero.client import XeroClient
from xero.utility import XeroException
from xero_python.accounting.models import report as XeroReport


# configuration variables
KEY_TENANT_IDS = 'tenant_ids'
KEY_GROUP_REPORT_PARAMS = 'report_parameters'
KEY_GROUP_SYNC_OPTIONS = 'sync_options'
KEY_PREVIOUS_PERIODS = 'previous_periods'
KEY_DATE = 'date'
KEY_TIMEFRAME = 'timeframe'
KEY_TRACKING_OPTION_ID1 = 'tracking_option_id1'
KEY_TRACKING_OPTION_ID2 = 'tracking_option_id2'
KEY_STANDARD_LAYOUT = 'standard_layout'
KEY_PAYMENTS_ONLY = 'payments_only'
KEY_GROUP_DESTINATION_OPTIONS = 'destination'
KEY_LOAD_TYPE = 'load_type'

KEY_STATE_OAUTH_TOKEN_DICT = "#oauth_token_dict"
KEY_STATE_ENDPOINT_COLUMNS = "endpoint_columns"

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [KEY_GROUP_REPORT_PARAMS, KEY_GROUP_DESTINATION_OPTIONS]


class Component(ComponentBase):
    def __init__(self, data_path_override: str = None):
        super().__init__(data_path_override=data_path_override, required_parameters=REQUIRED_PARAMETERS)
        self._configuration: Configuration

        self.incremental_load = None
        self.client = None
        self.tables = {}
        self._writer_cache = {}
        self.new_state = {}
        self.columns = set()

        register_csv_dialect()

    def run(self):
        self._init_configuration()
        report_params = Configuration.as_dict(self._configuration.report_parameters)
        sync_options = self._configuration.sync_options
        destination = self._configuration.destination

        columns = self.get_state_file().get("columns", self.columns)
        self.columns = set(columns)

        load_type = destination.load_type
        self.incremental_load = load_type == "incremental_load"

        self._init_client()

        available_tenant_ids = self._get_available_tenant_ids()
        tenant_ids_to_download = self._get_tenants_to_download(available_tenant_ids)

        batches = self.generate_batches(report_params, Configuration.as_dict(sync_options))

        self.download_reports(tenant_ids=tenant_ids_to_download, batches=batches)

        self.refresh_token_and_save_state()

    def _init_configuration(self):
        self.validate_configuration_parameters(Configuration.get_dataclass_required_parameters())

        try:
            self._configuration: Configuration = Configuration.load_from_dict(self.configuration.parameters)
        except dataconf.exceptions.MalformedConfigException as e:
            raise UserException(f"Invalid configuration. Please check the configuration parameters. {e}") from e

        if not self._configuration.report_parameters.date:
            raise UserException("Date parameter is required")

    def refresh_token_and_save_state(self) -> None:
        self._refresh_client_token()
        self.new_state[KEY_STATE_OAUTH_TOKEN_DICT] = json.dumps(self.client.get_xero_oauth2_token_dict())
        self.new_state["columns"] = list(self.columns)
        self.write_state_file(self.new_state)

    def _refresh_client_token(self) -> None:
        try:
            self.client.force_refresh_token()
        except XeroException as xero_exc:
            raise UserException("Failed to authorize the component. Please reauthorize the component. "
                                "\n Due to the functioning of the XERO authorization, if a component fails,"
                                " the component must be reauthorized.") from xero_exc

    def download_reports(self, tenant_ids: List[str], batches: list) -> None:
        logging.info(f"Fetching report data for tenant_ids: {tenant_ids}")

        for tenant_id in tenant_ids:
            table_name = f"balance_sheet_{tenant_id}"

            table_def = self.create_out_table_definition(table_name,
                                                         columns=[],
                                                         primary_key=["date", "account_id"],
                                                         incremental=self.incremental_load)

            with ElasticDictWriter(table_def.full_path, []) as wr:
                for batch in batches:
                    report = self.client.get_balance_sheet_report(tenant_id=tenant_id, **batch)
                    logging.debug(f"Processing report data: {report}")

                    parsed = self.parse_balance_sheet(report, batch["date"])

                    wr.writeheader()
                    wr.writerows(parsed)

            self.columns.update(wr.fieldnames)
            self.write_manifest(table_def)

    def _init_client(self) -> None:
        logging.info("Authorizing Client")

        state = self.get_state_file()
        state_authorization_params = state.get(KEY_STATE_OAUTH_TOKEN_DICT)

        if self._state_contains_authorization_parameters(state_authorization_params):
            logging.info("Authorizing Client from state")
            self._init_client_from_state(state_authorization_params)
        else:
            logging.info("Authorizing Client from oauth")
            self._init_client_from_config()

        logging.info("Client Authorized")

    def _init_client_from_state(self, state_authorization_params: Union[str, Dict]) -> None:
        oauth_credentials = self.configuration.oauth_credentials
        oauth_credentials.data = self._load_state_oauth(state_authorization_params)
        self.client = XeroClient(oauth_credentials)
        try:
            self.refresh_token_and_save_state()
            self.client.get_available_tenant_ids()
        except (UserException, XeroException):
            logging.warning("Authorizing Client from state failed, trying from oauth")
            self._init_client_from_config()

    @staticmethod
    def _load_state_oauth(state_authorization_params: Union[str, Dict]) -> Dict:
        if isinstance(state_authorization_params, str):
            return json.loads(state_authorization_params)
        elif isinstance(state_authorization_params, dict):
            return state_authorization_params
        else:
            raise UserException("Invalid state, please contact support")

    def _init_client_from_config(self) -> None:
        oauth_credentials = self.configuration.oauth_credentials
        if isinstance(oauth_credentials.data.get("scope"), str):
            oauth_credentials.data["scope"] = oauth_credentials.data["scope"].split(" ")
        self.client = XeroClient(oauth_credentials)
        try:
            self.refresh_token_and_save_state()
            self.client.get_available_tenant_ids()
        except (UserException, XeroException) as xero_exception:
            raise UserException(xero_exception) from xero_exception

    @staticmethod
    def _state_contains_authorization_parameters(state_authorization_params: Dict) -> bool:
        if state_authorization_params:
            if "access_token" in state_authorization_params and "scope" in state_authorization_params \
                    and "expires_in" in state_authorization_params and "token_type" in state_authorization_params:
                return True
        return False

    def _get_available_tenant_ids(self) -> List[str]:
        try:
            return self.client.get_available_tenant_ids()
        except XeroException as xero_exc:
            raise UserException from xero_exc

    def _get_tenants_to_download(self, available_tenant_ids: List[str]) -> List[str]:
        tenant_ids_to_download = comma_separated_values_to_list(self._configuration.tenant_ids)

        if not tenant_ids_to_download:
            tenant_ids_to_download = available_tenant_ids
            logging.info(f'Tenant IDs not specified, using all available: {available_tenant_ids}.')

        self._validate_tenants_to_download(tenant_ids_to_download, available_tenant_ids)
        return tenant_ids_to_download

    @staticmethod
    def _validate_tenants_to_download(tenant_ids_to_download: List[str], available_tenant_ids: List[str]) -> None:
        unavailable_tenants = set(tenant_ids_to_download) - set(available_tenant_ids)
        if unavailable_tenants:
            unavailable_tenants_str = ', '.join(unavailable_tenants)
            raise UserException(f"Some tenants to be downloaded (IDs: {unavailable_tenants_str})"
                                f" are not accessible, please, check if you granted sufficient credentials.")

    def parse_balance_sheet(self, data: dict, date: str) -> list:
        report = serialize_to_dict(self.convert_api_response(data))
        results = []

        is_first_row = True
        for row in report.rows:
            title, value, account_id, account_name = "", "", "", ""

            if is_first_row:
                request_date = row.cells[1].value
                is_first_row = False
                continue

            if row.row_type == RowType.SECTION:
                title = row.title

                for _row in row.rows:

                    if _row.row_type == RowType.ROW:
                        if _row.cells:

                            account_name = _row.cells[0].value

                            cell = _row.cells[1]
                            value = cell.value

                            if cell.attributes:
                                account_id = cell.attributes[0].value

                            results.append({
                                "report_title": report.report_title,
                                "title": title,
                                "account_name": account_name,
                                "account_id": account_id,
                                "date": date,
                                "request_date": request_date,
                                "value": value
                            })
        return results

    @staticmethod
    def convert_api_response(api_data):
        report_data = api_data[0]  # Assuming the API response is a list with a single report

        my_report = XeroReport

        my_report.report_id = report_data.report_id if hasattr(report_data, 'report_id') else ''
        my_report.report_name = report_data.report_name if hasattr(report_data, 'report_name') else ''
        my_report.report_type = report_data.report_type if hasattr(report_data, 'report_type') else ''
        report_titles = report_data.report_titles if hasattr(report_data, 'report_titles') else ''
        report_title = ' - '.join(report_titles).strip()
        my_report.report_title = report_title if report_title else ''

        my_report.report_date = parser.parse(report_data.report_date).strftime('%Y-%m-%d') if (
            hasattr(report_data, 'report_date')) else ''
        my_report.updated_date_utc = report_data.updated_date_utc if (
            hasattr(report_data, 'updated_date_utc')) else datetime.utcnow()

        rows_data = report_data.rows if hasattr(report_data, 'rows') else []

        my_report.rows = [row for row in rows_data]

        return my_report

    @staticmethod
    def generate_dates(base_date, timeframe, periods) -> list:
        if not isinstance(base_date, datetime):
            base_date = datetime.strptime(base_date, "%Y-%m-%d")

        date_list = []

        if timeframe == "MONTH":
            step = relativedelta(months=1)
        elif timeframe == "QUARTER":
            step = relativedelta(months=3)
        elif timeframe == "YEAR":
            step = relativedelta(years=1)
        else:
            raise UserException("Invalid timeframe. Choose from MONTH, QUARTER, or YEAR.")

        date_list.append(base_date.strftime("%Y-%m-%d"))

        for _ in range(periods):
            base_date -= step
            # Adjust the day to the last day of the month
            last_day_of_month = base_date.replace(day=1) + timedelta(days=32)
            last_day_of_month = last_day_of_month.replace(day=1) - timedelta(days=1)
            date_list.append(last_day_of_month.strftime("%Y-%m-%d"))

        return date_list

    def generate_batches(self, report_params: dict, sync_options: dict) -> list:

        date = self.get_last_date(report_params[KEY_DATE])

        batches = []
        dates = self.generate_dates(date, report_params[KEY_TIMEFRAME],
                                    sync_options[KEY_PREVIOUS_PERIODS])

        for date in dates:
            report_batch = report_params.copy()
            report_batch[KEY_DATE] = date
            batches.append(report_batch)

        return batches

    @staticmethod
    def get_last_date(date: str):
        if date == "last_month":
            return datetime.today() - relativedelta(days=datetime.today().day)

        elif date == "last_year":
            return datetime.today() - relativedelta(years=1, days=datetime.today().day)

        return date


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        comp.execute_action()
    except UserException as exc:
        logging.warning("During the component fail, the authorization is invalidated due to the functioning of the "
                        "XERO authorization. If The authorization is invalid, you must reauthorize the component")
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
File: src/configuration.py
================================================
import dataclasses
import json
from dataclasses import dataclass, asdict
from typing import List

import dataconf


class ConfigurationBase:

    @staticmethod
    def _convert_private_value(value: str):
        return value.replace('"#', '"pswd_')

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith('pswd_'):
            return value.replace('pswd_', '#', 1)
        else:
            return value

    @classmethod
    def load_from_dict(cls, configuration: dict):
        """
        Initialize the configuration dataclass object from dictionary.
        Args:
            configuration: Dictionary loaded from json configuration.

        Returns:

        """
        json_conf = json.dumps(configuration)
        json_conf = ConfigurationBase._convert_private_value(json_conf)
        return dataconf.loads(json_conf, cls, ignore_unexpected=True)

    @classmethod
    def get_dataclass_required_parameters(cls) -> List[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: List[str]

        """
        return [cls._convert_private_value_inv(f.name) for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING
                and f.default_factory == dataclasses.MISSING]

    @classmethod
    def as_dict(cls, obj) -> dict:
        """Return dataclass as dictionary."""
        return asdict(obj)


@dataclass
class ReportParameters(ConfigurationBase):
    date: str
    timeframe: str
    tracking_option_id1: str
    tracking_option_id2: str
    standard_layout: bool = True
    payments_only: bool = False


@dataclass
class SyncOptions(ConfigurationBase):
    previous_periods: int = 0


@dataclass
class Destination(ConfigurationBase):
    load_type: str = "full_load"


@dataclass
class Configuration(ConfigurationBase):
    report_parameters: ReportParameters
    sync_options: SyncOptions
    destination: Destination
    tenant_ids: str



================================================
File: src/xero/__init__.py
================================================



================================================
File: src/xero/client.py
================================================
import logging
from dataclasses import dataclass
from typing import Dict, Iterable, List

from keboola.component.dao import OauthCredentials, TableDefinition

from xero_python.identity import IdentityApi
from xero_python.accounting import AccountingApi
from xero_python.api_client import ApiClient
from xero_python.api_client.configuration import Configuration
from xero_python.api_client.oauth2 import OAuth2Token
from xero_python.api_client.serializer import serialize

from xero_python.exceptions.http_status_exceptions import OAuth2InvalidGrantError, HTTPStatusException

# Always import utility to monkey patch BaseModel
from .utility import XeroException, EnhancedBaseModel


@dataclass
class Table:
    data: List[Dict]
    table_definition: TableDefinition


class XeroClient:
    def __init__(self, oauth_credentials: OauthCredentials) -> None:
        self._oauth_token_dict = oauth_credentials.data
        oauth2_token_obj = OAuth2Token(client_id=oauth_credentials.appKey,
                                       client_secret=oauth_credentials.appSecret)
        oauth2_token_obj.update_token(**self._oauth_token_dict)
        self._api_client = ApiClient(Configuration(oauth2_token=oauth2_token_obj),
                                     oauth2_token_getter=self.get_xero_oauth2_token_dict,
                                     oauth2_token_saver=self._set_xero_oauth2_token_dict)

        self._available_tenant_ids = None

    def get_xero_oauth2_token_dict(self) -> Dict:
        return self._oauth_token_dict

    def _set_xero_oauth2_token_dict(self, new_token: Dict) -> None:
        self._oauth_token_dict = new_token

    def refresh_available_tenant_ids(self) -> None:
        identity_api = IdentityApi(self._api_client)
        available_tenants = []
        try:
            for connection in identity_api.get_connections():
                tenant = serialize(connection)
                available_tenants.append(tenant.get("tenantId"))
        except (OAuth2InvalidGrantError, HTTPStatusException) as oauth_err:
            raise XeroException(oauth_err) from oauth_err
        self._available_tenant_ids = available_tenants

    def force_refresh_token(self):
        try:
            self._api_client.refresh_oauth2_token()
        except HTTPStatusException as http_error:
            raise XeroException(
                "Failed to authenticate the client, please reauthorize the component") from http_error

    def get_available_tenant_ids(self):
        if not self._available_tenant_ids:
            self.refresh_available_tenant_ids()
        return self._available_tenant_ids

    def get_balance_sheet_report(self, tenant_id: str, **kwargs) -> Iterable[List[EnhancedBaseModel]]:
        if kwargs:
            logging.info(f"Getting balance sheet report with parameters: {kwargs}")
        accounting_api = AccountingApi(self._api_client)
        return accounting_api.get_report_balance_sheet(tenant_id, **kwargs).to_list()



================================================
File: src/xero/table_definition_factory.py
================================================
from typing import Union, Dict
from keboola.component import ComponentBase
from keboola.component.dao import TableDefinition

from .utility import (KeboolaTypeSpec, XeroException, get_accounting_model, get_element_type_name,
                      TERMINAL_TYPE_MAPPING, resolve_attribute_type, EnhancedBaseModel)


class TableDefinitionFactory:
    def __init__(self, input_model_name: str, component: ComponentBase) -> None:
        self.input_model: EnhancedBaseModel = get_accounting_model(input_model_name)
        self.root_model: EnhancedBaseModel = self.input_model.get_contained_model()
        self.component = component

        self._table_defs: Union[Dict[str, TableDefinition], None] = None

    def get_table_definitions(self) -> Dict[str, TableDefinition]:
        if not self._table_defs:
            self._table_defs = {}
            self.add_table_def_of(self.root_model)
        return self._table_defs

    def add_table_def_of(self, model: EnhancedBaseModel,
                         table_name_prefix: str = None,
                         parent_id_field_name: str = None) -> None:
        table_name: str = model.__name__
        field_types: Dict[str, KeboolaTypeSpec] = {}
        id_field_name = model.get_id_field_name()
        if not id_field_name:
            id_field_name = f'{table_name}ID'
            field_types[id_field_name] = TERMINAL_TYPE_MAPPING['str']
        primary_key = {id_field_name}
        if parent_id_field_name:
            table_name = f'{table_name_prefix}_{table_name}'
            field_types[parent_id_field_name] = TERMINAL_TYPE_MAPPING['str']
            primary_key.add(parent_id_field_name)
        for attr_name, type_name in model.openapi_types.items():
            field_types = field_types | self._get_field_types_of_attribute(
                type_name=type_name, field_name=model.get_field_name(
                    attr_name),
                table_name_prefix=table_name, parent_id_field_name=id_field_name)
        if len(field_types) > 0:
            self._table_defs[table_name] = self.component.create_out_table_definition(name=f'{table_name}.csv',
                                                                                      primary_key=list(primary_key),
                                                                                      columns=list(field_types.keys()))
            for _field_name, field_type in field_types.items():
                self._table_defs[table_name].table_metadata.add_column_data_type(column=_field_name,
                                                                                 data_type=field_type.type,
                                                                                 length=field_type.length)

    def _get_field_types_of_attribute(self, type_name: str, field_name: str,
                                      table_name_prefix: str, parent_id_field_name: str) -> Dict[str, KeboolaTypeSpec]:
        resolved_type = resolve_attribute_type(type_name)
        if resolved_type in TERMINAL_TYPE_MAPPING:
            return {field_name: TERMINAL_TYPE_MAPPING[resolved_type]}
        elif resolved_type == 'downloadable_object':
            sub_id_field_name = get_accounting_model(
                type_name).get_id_field_name()
            return {sub_id_field_name: TERMINAL_TYPE_MAPPING['str']}
        elif resolved_type == 'struct':
            return TableDefinitionFactory._get_field_types_of_struct(
                get_accounting_model(type_name), prefix=field_name)
        elif resolved_type == 'list':
            element_type_name = get_element_type_name(
                type_name)
            # This prevents infinite recursion (Contacts <-> ContactGroups)
            if element_type_name != self.root_model.__name__:
                element_resolved_type = resolve_attribute_type(
                    element_type_name)
                if element_resolved_type in ('struct', 'downloadable_object'):
                    self.add_table_def_of(get_accounting_model(element_type_name), table_name_prefix=table_name_prefix,
                                          parent_id_field_name=parent_id_field_name)
                    return {}
            else:
                return {}
        else:
            raise XeroException(
                f"Unexpected attribute type encountered: {type_name}.")

    @staticmethod
    def _get_field_types_of_struct(struct: EnhancedBaseModel, prefix: str) -> Dict[str, KeboolaTypeSpec]:
        field_types = {}
        for struct_attr_name, struct_attr_type_name in struct.openapi_types.items():
            struct_attr_handled = False
            struct_field_name = struct.get_field_name(struct_attr_name)
            field_name_inside_parent = f'{prefix}_{struct_field_name}'
            resolved_struct_attr_type_name = resolve_attribute_type(
                struct_attr_type_name)
            if resolved_struct_attr_type_name:
                if resolved_struct_attr_type_name in TERMINAL_TYPE_MAPPING:
                    field_types[field_name_inside_parent] = TERMINAL_TYPE_MAPPING[resolved_struct_attr_type_name]
                    struct_attr_handled = True
                elif resolved_struct_attr_type_name == 'struct':
                    struct_attr_model: EnhancedBaseModel = get_accounting_model(
                        struct_attr_type_name)
                    field_types = field_types | TableDefinitionFactory._get_field_types_of_struct(
                        struct_attr_model, field_name_inside_parent)
                    struct_attr_handled = True
            if not struct_attr_handled:
                raise XeroException(
                    f'Unexpected type encountered in struct: {struct_attr_type_name}.')
        return field_types



================================================
File: src/xero/utility.py
================================================
from dataclasses import dataclass
from enum import Enum
from typing import Any, List, Union, Callable
from keboola.component.dao import SupportedDataTypes
from xero_python.models import BaseModel
from xero_python.accounting import AccountingApi
import xero_python.accounting.models
from xero_python.api_client.serializer import LIST_DATA_TYPE


class XeroException(Exception):
    pass


@dataclass
class KeboolaTypeSpec:
    type: SupportedDataTypes
    length: str = None


# Configuration variables
TERMINAL_TYPE_MAPPING = {'str': KeboolaTypeSpec(type=SupportedDataTypes.STRING),
                         'int': KeboolaTypeSpec(type=SupportedDataTypes.INTEGER),
                         'float': KeboolaTypeSpec(type=SupportedDataTypes.NUMERIC, length='38,8'),
                         'bool': KeboolaTypeSpec(type=SupportedDataTypes.BOOLEAN),
                         'date': KeboolaTypeSpec(type=SupportedDataTypes.DATE),
                         'datetime': KeboolaTypeSpec(type=SupportedDataTypes.TIMESTAMP)}


def get_element_type_name(type_str: str) -> Union[str, None]:
    match = LIST_DATA_TYPE.search(type_str)
    if match:
        return match.group(1)
    else:
        return None


def resolve_attribute_type(type_name: str) -> str:
    if type_name in TERMINAL_TYPE_MAPPING:
        r = type_name
    elif type_name.startswith("datetime"):
        r = "datetime"
    elif type_name.startswith("date"):
        r = "date"
    elif type_name.startswith("list"):
        r = 'list'
    elif issubclass(get_accounting_model(type_name), Enum):
        r = 'str'
    elif issubclass(get_accounting_model(type_name), BaseModel):
        model: BaseModel = get_accounting_model(type_name)
        if model.is_downloadable():
            r = 'downloadable_object'
        else:
            r = 'struct'
    else:
        raise XeroException(
            f'Unexpected type encountered: {type_name}.')
    return r


def get_accounting_model(model_name: str) -> Union[BaseModel, None]:
    return getattr(xero_python.accounting.models, model_name, None)


def add_as_a_method_of(cls):
    def decorator(func):
        setattr(cls, func.__name__, func)
        return func

    return decorator


# Adding methods to BaseModel class (monkey patching)


class EnhancedBaseModel(BaseModel):
    @add_as_a_method_of(BaseModel)
    @classmethod
    def get_field_names(cls: BaseModel) -> List[str]:
        return list(cls.attribute_map.values())

    @add_as_a_method_of(BaseModel)
    @classmethod
    def get_field_name(cls: BaseModel, attr_name: str) -> Union[str, None]:
        return cls.attribute_map.get(attr_name)

    @add_as_a_method_of(BaseModel)
    @classmethod
    def get_attr_name(cls: BaseModel, field_name: str) -> Union[str, None]:
        inv_map = {v: k for k, v in cls.attribute_map.items()}
        return inv_map.get(field_name)

    @add_as_a_method_of(BaseModel)
    def get_field_value(self: BaseModel, field_name: str, default=None) -> Any:
        attr_name = self.get_attr_name(field_name)
        if attr_name:
            return getattr(self, attr_name, default)
        else:
            return default

    @add_as_a_method_of(BaseModel)
    @classmethod
    def get_id_field_name(cls: BaseModel) -> Union[str, None]:
        id_field_name = f'{cls.__name__}ID'
        if id_field_name in cls.get_field_names():
            return id_field_name
        else:
            return None

    @add_as_a_method_of(BaseModel)
    @classmethod
    def get_id_attribute_name(self: BaseModel) -> Union[str, None]:
        return self.get_attr_name(self.get_id_field_name())

    @add_as_a_method_of(BaseModel)
    def get_id_value(self: BaseModel) -> Union[str, None]:
        id_value = self.get_field_value(self.get_id_field_name())
        if id_value:
            assert isinstance(id_value, str)
        return id_value

    @add_as_a_method_of(BaseModel)
    @classmethod
    def has_id(cls: BaseModel) -> Union[str, None]:
        return cls.get_id_attribute_name() is not None

    @add_as_a_method_of(BaseModel)
    @classmethod
    def get_download_method_name(cls: BaseModel) -> Union[Callable, None]:
        id_attr_name = cls.get_id_attribute_name()
        getter_name = None
        if id_attr_name:
            getter_name = f'get_{id_attr_name.replace("_id", "")}'
        else:
            if len(cls.attribute_map) == 1:
                getter_name = f'get_{cls.get_attr_name(cls.__name__)}'
        if getter_name and hasattr(AccountingApi, getter_name):
            return getter_name
        else:
            return None

    @add_as_a_method_of(BaseModel)
    @classmethod
    def is_downloadable(cls: BaseModel) -> bool:
        return cls.get_download_method_name() is not None

    @add_as_a_method_of(BaseModel)
    @classmethod
    def get_list_attribute_name(cls: BaseModel) -> Union[str, None]:
        attr_list = list(cls.attribute_map.keys())
        attr_name = attr_list[0]
        attr_type = cls.openapi_types[attr_name]
        if len(attr_list) == 1 and LIST_DATA_TYPE.match(attr_type):
            return attr_name
        else:
            return None

    @add_as_a_method_of(BaseModel)
    def to_list(self: BaseModel) -> List[BaseModel]:
        return getattr(self, self.get_list_attribute_name())

    @add_as_a_method_of(BaseModel)
    @classmethod
    def is_wrapped_list(cls: BaseModel) -> bool:
        return cls.get_list_attribute_name() is not None

    @add_as_a_method_of(BaseModel)
    def is_empty_list(self: BaseModel) -> bool:
        return len(self.to_list()) == 0

    @add_as_a_method_of(BaseModel)
    @classmethod
    def get_contained_model(cls: BaseModel) -> BaseModel:
        list_attr_name: Union[str, None] = cls.get_list_attribute_name()
        if list_attr_name:
            model_name = get_element_type_name(
                cls.openapi_types[list_attr_name])
            return get_accounting_model(model_name)
        else:
            return cls



================================================
File: src/xero/xero_parser.py
================================================
from typing import Any, Dict, List, Tuple
import hashlib
import json

from xero_python.api_client.serializer import serialize

from .utility import XeroException, TERMINAL_TYPE_MAPPING, resolve_attribute_type, \
    EnhancedBaseModel


class XeroParser:
    def __init__(self) -> None:
        self.parsed_data = None

    def parse_data(self, xero_object_data) -> Dict[str, List[Dict]]:
        self.parsed_data = {}
        self._parse_data(xero_object_data)
        return self.parsed_data

    def _parse_data(self, accounting_object_list: List[EnhancedBaseModel]) -> None:
        for accounting_object in accounting_object_list:
            self._add_data_from_object(accounting_object)

    def _add_data_from_object(self, xero_object_data: EnhancedBaseModel, table_name_prefix: str = None,
                              parent_id_field_name: str = None, parent_id_field_value: str = None) -> None:

        table_name = self._create_table_name(xero_object_data, table_name_prefix)
        id_field_name, id_field_value = self._get_xero_object_id_name_and_value(xero_object_data)
        row_dict = {id_field_name: id_field_value}
        row_dict |= self._get_parent_id_name_and_value(parent_id_field_name, parent_id_field_value)
        row_dict |= self._parse_fields(xero_object_data, table_name, id_field_name, id_field_value)

        if not self.parsed_data.get(table_name):
            self.parsed_data[table_name] = []
        self.parsed_data[table_name].append(row_dict)

    def _parse_fields(self, xero_object_data: EnhancedBaseModel, table_name: str, id_field_name: str,
                      id_field_value: str) -> Dict:
        field_data = {}
        for attribute_name, attribute_type_name in xero_object_data.openapi_types.items():
            attribute_value = getattr(xero_object_data, attribute_name)
            if attribute_value is not None:
                field_name = xero_object_data.get_field_name(attribute_name)
                attribute_dict = self._get_data_from_attribute(
                    value=attribute_value, type_name=attribute_type_name, field_name=field_name,
                    table_name=table_name, id_field_name=id_field_name, id_field_value=id_field_value)
                field_data = field_data | attribute_dict
        return field_data

    def _get_data_from_attribute(self, value, type_name: str, field_name: str, table_name: str,
                                 id_field_name: str, id_field_value: str) -> Dict[str, Any]:
        resolved_type = resolve_attribute_type(type_name)
        if resolved_type == 'list':
            for element in value:
                element_type_name = element.__class__.__name__
                element_resolved_type_name = resolve_attribute_type(
                    element_type_name)
                if element_resolved_type_name in ('struct', 'downloadable_object'):
                    self._add_data_from_object(element, table_name_prefix=table_name,
                                               parent_id_field_name=id_field_name, parent_id_field_value=id_field_value)

                elif element is not None:
                    raise XeroException(
                        f'Unexpected type encountered: {type_name(element)}'
                        f' within list in {field_name} field within object'
                        f' of type {table_name}.')
            return {}

        elif resolved_type == 'downloadable_object':
            sub_id_field_name = value.get_id_field_name()
            sub_id_val = value.get_id_value()
            return {sub_id_field_name: sub_id_val}
        elif resolved_type == 'struct':
            return self._flatten_struct(value, prefix=field_name)
        elif resolved_type in TERMINAL_TYPE_MAPPING:
            return {field_name: serialize(value)}

    def _flatten_struct(self, struct: EnhancedBaseModel, prefix: str) -> Dict[str, Any]:
        flattened_struct = {}
        for struct_attr_name, struct_attr_type_name in struct.openapi_types.items():
            struct_attr_val = getattr(struct, struct_attr_name)
            if struct_attr_val is not None:
                resolved_type = resolve_attribute_type(struct_attr_type_name)
                struct_field_name = struct.get_field_name(struct_attr_name)
                field_name_inside_parent = f'{prefix}_{struct_field_name}'
                if resolved_type == 'struct':
                    flattened_struct = flattened_struct | self._flatten_struct(
                        struct_attr_val, prefix=field_name_inside_parent)
                elif resolved_type in TERMINAL_TYPE_MAPPING:
                    flattened_struct[field_name_inside_parent] = serialize(
                        struct_attr_val)
                else:
                    raise XeroException(
                        f'Unexpected type encountered in struct: {struct.openapi_types[struct_attr_name]}.')
        return flattened_struct

    @staticmethod
    def _generate_hash_id(data_to_hash: bytes) -> str:
        return hashlib.md5(data_to_hash).hexdigest()

    @staticmethod
    def _dump_xero_object_data(accounting_object: EnhancedBaseModel) -> bytes:
        return json.dumps(serialize(accounting_object), sort_keys=True).encode('utf-8')

    def _get_xero_object_id_name_and_value(self, xero_object_data: EnhancedBaseModel) -> Tuple[str, str]:
        table_name = xero_object_data.__class__.__name__
        id_field_value = xero_object_data.get_id_value()
        if id_field_value:
            id_field_name = xero_object_data.get_id_field_name()
        else:
            id_field_name = f'{table_name}ID'
            id_field_value = self._generate_hash_id(self._dump_xero_object_data(xero_object_data))

        return id_field_name, id_field_value

    @staticmethod
    def _create_table_name(xero_object_data: EnhancedBaseModel, table_name_prefix: str) -> str:
        table_name = xero_object_data.__class__.__name__
        if table_name_prefix:
            table_name = f'{table_name_prefix}_{table_name}'
        return table_name

    @staticmethod
    def _get_parent_id_name_and_value(parent_id_field_name: str, parent_id_field_value: str) -> Dict:
        if parent_id_field_name:
            if parent_id_field_value is None:
                raise XeroException("Parent object must have defined ID if specified.")
            else:
                return {parent_id_field_name: parent_id_field_value}
        return {}



================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


