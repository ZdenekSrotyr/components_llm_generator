Directory structure:
└── kds_consulting_team-kds-team.ex-microsoft-dynamics-365-finance-operations/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       └── out/
    │           └── tables/
    │               ├── contacts.csv
    │               └── contacts.csv.manifest
    ├── docs/
    │   └── images/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   └── dynamics/
    │       ├── __init__.py
    │       ├── client.py
    │       └── result.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
File: README.md
================================================
# Microsoft Dynamics 365 Finance & Operations Data Source

Microsoft Dynamics 365 for Finance and Operations is an enterprise resource planning (ERP) solution developed by
Microsoft. It is designed to help enterprises manage critical business functions such as finance, accounting,
production, warehousing, and transportation management.

This connector uses the [OData service](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/odata) to query the finance and operations (FO) entities.


# Functionality

The extractor uses the [OData service](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/odata) to download data from the O365 FO.

# Configuration

## Authorization

Authorize the component with the account that has access to OData entities. Admin privileges might be needed to access some datasets.

### Admin consent

In some cases, you will need to provide admin consent to our application in your Azure Portal. See [these instructions](https://learn.microsoft.com/en-us/entra/identity/enterprise-apps/grant-admin-consent?pivots=portal#grant-tenant-wide-admin-consent-in-enterprise-apps) 
for more information. 

**To grant consent, follow these steps:**

1. Sign in to the [Microsoft Entra admin center](https://entra.microsoft.com/) as at least a [Cloud Application Administrator](https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/permissions-reference#cloud-application-administrator).
2. Browse to **Identity > Applications > Enterprise applications > All applications**.
3. Enter the name of the application **`Dynamics 365 - FO`** or search by Application ID **`c99979ef-d0fe-49fe-9d64-c91b275094d8`**.
4. Select **Permissions** under **Security**. The screenshot shows how to grant tenant-wide admin consent.
![screen](https://learn.microsoft.com/en-us/entra/identity/enterprise-apps/media/grant-tenant-wide-admin-consent/grant-tenant-wide-admin-consent.png)

5. Carefully review the permissions that the application requires. If you agree with them, select **Grant admin consent**.

## Row setup

1. Select the desired endpoint.
2. (Optional) If required, filter only selected columns.
3. (Optional) Define the OData request query. This is an expert option to provide more flexibility; use it at your own risk. All query pieces can be separated by a newline or "&". Please refer to [this article](https://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_The_$filter_System) for details about the Odata filter.


### Destination / Output
- Optionally, fill in the name of the result table. This will be the name of the result table in Storage. Make sure that each configuration row leads to a different table to prevent any conflicts. If left empty, the dataset name is used.
- Select `Load type`. Choose between `Full load` and `Incremental load`. If full load is used, the destination table will be overwritten with every run. If incremental load is used, data will be upserted into the destination table.



# Development

If required, change the local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in the docker-compose file:

```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace, and run the component with the following command:

```
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

# Integration

tbd


================================================
File: Dockerfile
================================================
FROM python:3.11-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
            - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:$TEST_TAG
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
#            - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP 991513932 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: change_log.md
================================================
**0.1.0**
FEAT: Added query support for new-line separated queries and ampersand-separated queries
DOCS: Added documentation for the component including sample configuration.

**0.0.1**

Working version of the extractor which allows to query any entity supported by Microsoft Dynamics 365's Web API.
Automatic parsing and querying of the entities.

================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
keboola.component==1.4.4
keboola.http-client
dataconf~=2.3.0
pyhocon~=0.3.60

================================================
File: component_config/component_long_description.md
================================================
Microsoft Dynamics 365 for Finance and Operations is an enterprise resource planning (ERP) solution developed by
Microsoft. It is designed to help enterprises manage critical business functions such as finance, accounting,
production, warehousing, and transportation management.

This connector uses the [OData service](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/odata) to query the finance and operations entities.

================================================
File: component_config/component_short_description.md
================================================
Microsoft Dynamics 365 for Finance and Operations is an enterprise resource planning (ERP) solution developed by Microsoft.

================================================
File: component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Parameters",
  "required": [
    "endpoint",
    "query",
    "destination"
  ],
  "properties": {
    "endpoint": {
      "type": "string",
      "title": "Endpoint",
      "description": "The entity to be queried",
      "enum": [],
      "format": "select",
      "options": {
        "async": {
          "label": "Re-load endpoints",
          "action": "list_endpoints"
        }
      },
      "propertyOrder": 300
    },
    "columns": {
      "type": "array",
      "title": "Columns",
      "description": "Select the columns to be downloaded (if left empty, all columns are fetched).",
      "items": {
        "enum": [],
        "type": "string"
      },
      "format": "select",
      "uniqueItems": true,
      "options": {
        "async": {
          "label": "Re-load columns",
          "action": "list_columns"
        },
        "inputAttributes": {
          "placeholder": "Download all columns"
        }
      },
      "propertyOrder": 310
    },
    "query": {
      "type": "string",
      "title": "Query (Expert option)",
      "format": "textarea",
      "options": {
        "input_height": "100px"
      },
      "description": "A Microsoft OData query will be sent along with the request. All query pieces can be separated by a newline or \"&\".</br>Please refer to <a href='https://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_The_$filter_System'>this article</a> for details about the Odata filter.",
      "propertyOrder": 400
    },
    "destination": {
      "type": "object",
      "title": "Destination",
      "propertyOrder": 600,
      "required": [
        "incremental"
      ],
      "properties": {
        "table_name": {
          "type": "string",
          "title": "Storage table name",
          "propertyOrder": 10,
          "description": "Name of the destination table for this query. If left empty, the object name is used."
        },
        "incremental": {
          "enum": [
            false,
            true
          ],
          "type": "boolean",
          "title": "Load Type",
          "default": true,
          "options": {
            "enum_titles": [
              "Full Load",
              "Incremental Load"
            ]
          },
          "description": "If full load is used, the destination table will be overwritten every run. If incremental load is used, data will be upserted into the destination table.",
          "propertyOrder": 30
        }
      }
    }
  }
}


================================================
File: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "API Settings",
  "required": [
    "organization_url"
  ],
  "properties": {
    "organization_url": {
      "type": "string",
      "title": "Organization URL",
      "minLength": 20,
      "description": "Your organization's root URL. Usually in format https://[ORGANIZATION].operations.dynamics.com.",
      "propertyOrder": 100
    },
    "test_connection": {
      "type": "button",
      "format": "test-connection",
      "propertyOrder": 500
    }
  }
}

================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/stack_parameters.json
================================================
{}

================================================
File: component_config/sample-config/config.json
================================================
{
  "parameters": {
    "organization_url": "https://keboolads.crm4.dynamics.com/",
    "api_version": "v9.1",
    "endpoint": "contacts",
    "query": "$select=contactid,fullname,lastname\n$filter=contains(name,'test')",
    "incremental": true
  },
  "image_parameters": {},
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2020-01-01 00:13:30",
        "#data": "{ \"token_type\": \"Bearer\", \"scope\": \"user_impersonation\", \"expires_in\": \"3599\", \"ext_expires_in\": \"3599\", \"expires_on\": \"1579274445\", \"not_before\": \"1579270545\", \"resource\": \"https://keboolads.crm4.dynamics.com/\", \"access_token\": \"<ACCESS_TOKEN>\", \"refresh_token\": \"<REFRESH_TOKEN>\" }",
        "oauthVersion": "2.0",
        "appKey": "<CLIENT_ID>",
        "#appSecret": "<CLIENT_SECRET>"
      }
    }
  }
}


================================================
File: component_config/sample-config/out/tables/contacts.csv
================================================
"Yvonne McKay (sample)","McKay (sample)","226aa527-793c-ea11-a813-000d3a45b3bb"
"Susanna Stubberod (sample)","Stubberod (sample)","246aa527-793c-ea11-a813-000d3a45b3bb"
"Nancy Anderson (sample)","Anderson (sample)","266aa527-793c-ea11-a813-000d3a45b3bb"
"Maria Campbell (sample)","Campbell (sample)","286aa527-793c-ea11-a813-000d3a45b3bb"
"Sidney Higa (sample)","Higa (sample)","2a6aa527-793c-ea11-a813-000d3a45b3bb"
"Scott Konersmann (sample)","Konersmann (sample)","2c6aa527-793c-ea11-a813-000d3a45b3bb"
"Robert Lyon (sample)","Lyon (sample)","2e6aa527-793c-ea11-a813-000d3a45b3bb"
"Paul Cannon (sample)","Cannon (sample)","306aa527-793c-ea11-a813-000d3a45b3bb"
"Rene Valdes (sample)","Valdes (sample)","326aa527-793c-ea11-a813-000d3a45b3bb"
"Jim Glynn (sample)","Glynn (sample)","346aa527-793c-ea11-a813-000d3a45b3bb"
"Patrick Sands (sample)","Sands (sample)","366aa527-793c-ea11-a813-000d3a45b3bb"
"Susan Burk (sample)","Burk (sample)","386aa527-793c-ea11-a813-000d3a45b3bb"
"Thomas Andersen (sample)","Andersen (sample)","3a6aa527-793c-ea11-a813-000d3a45b3bb"
"Portal Customer","Customer","99db51a2-c34e-e111-bb8d-00155d03a715"
"System Administrator","Administrator","7469fd95-c0bd-4236-90bf-1d1100291df5"
"Vincent Lauriant","Lauriant","465b158c-541c-e511-80d3-3863bb347ba8"
"Adrian Dumitrascu","Dumitrascu","49a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Cathan Cook","Cook","4ba0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Brian LaMee","LaMee","4da0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Walter Harp","Harp","4fa0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Cat Francis","Francis","51a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Forrest Chand","Chand","53a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Eva Corets","Corets","55a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Gabriele Cannata","Cannata","57a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"George Sullivan","Sullivan","59a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Tamer Salah","Salah","5ba0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Andrew Dixon","Dixon","5da0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Patrick Steiner","Steiner","5fa0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Susan Burk","Burk","61a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Alex Wu","Wu","63a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Yvonne McKay","McKay","65a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Darren Parker","Parker","69a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Allison Brown","Brown","6da0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Sean Chai","Chai","71a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Humberto Acevedo","Acevedo","73a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Luca Argentiero","Argentiero","b5a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"NeKeta Argrow","Argrow","b7a0e5b9-88df-e311-b8e5-6c3be5a8b200"
"Tomasz Bochenek","Bochenek","1fa1e5b9-88df-e311-b8e5-6c3be5a8b200"
"Nana Bule","Bule","55a1e5b9-88df-e311-b8e5-6c3be5a8b200"
"Greg Chapman","Chapman","9da1e5b9-88df-e311-b8e5-6c3be5a8b200"
"Can Comertoglu","Comertoglu","c9a1e5b9-88df-e311-b8e5-6c3be5a8b200"
"Robin Counts","Counts","d7a1e5b9-88df-e311-b8e5-6c3be5a8b200"
"Ofer Daliot","Daliot","eba1e5b9-88df-e311-b8e5-6c3be5a8b200"
"Cliff Didcock","Didcock","19a2e5b9-88df-e311-b8e5-6c3be5a8b200"
"Eva Elznicova","Elznicova","4fa2e5b9-88df-e311-b8e5-6c3be5a8b200"
"Daniel Escapa","Escapa","5da2e5b9-88df-e311-b8e5-6c3be5a8b200"
"William Flash","Flash","75a2e5b9-88df-e311-b8e5-6c3be5a8b200"
"Viggo Forde","Forde","83a2e5b9-88df-e311-b8e5-6c3be5a8b200"
"Kari Furse","Furse","9ba2e5b9-88df-e311-b8e5-6c3be5a8b200"
"Chris Gallagher","Gallagher","a1a2e5b9-88df-e311-b8e5-6c3be5a8b200"
"Hugo Garcia","Garcia","a9a2e5b9-88df-e311-b8e5-6c3be5a8b200"
"Eric Gilmore","Gilmore","bfa2e5b9-88df-e311-b8e5-6c3be5a8b200"
"Jim Glynn","Glynn","c7a2e5b9-88df-e311-b8e5-6c3be5a8b200"
"Ryan Gregg","Gregg","e7a2e5b9-88df-e311-b8e5-6c3be5a8b200"
"Uzi Hefetz","Hefetz","35a3e5b9-88df-e311-b8e5-6c3be5a8b200"
"Roland Hofmann","Hofmann","61a3e5b9-88df-e311-b8e5-6c3be5a8b200"
"Viara Kalnakova","Kalnakova","a9a3e5b9-88df-e311-b8e5-6c3be5a8b200"
"Petr Karásek","Karásek","afa3e5b9-88df-e311-b8e5-6c3be5a8b200"
"Roxanne Kenison","Kenison","c7a3e5b9-88df-e311-b8e5-6c3be5a8b200"
"Oliver Kiel","Kiel","dba3e5b9-88df-e311-b8e5-6c3be5a8b200"
"Ivan Komashinsky","Komashinsky","09a4e5b9-88df-e311-b8e5-6c3be5a8b200"
"Jason Kozleski","Kozleski","19a4e5b9-88df-e311-b8e5-6c3be5a8b200"
"Benno Kurmann","Kurmann","39a4e5b9-88df-e311-b8e5-6c3be5a8b200"
"George Li","Li","73a4e5b9-88df-e311-b8e5-6c3be5a8b200"
"Robert Lyon","Lyon","9fa4e5b9-88df-e311-b8e5-6c3be5a8b200"
"Tete Mensa-Annan","Mensa-Annan","ffa4e5b9-88df-e311-b8e5-6c3be5a8b200"
"Fabricio Noriega","Noriega","55a5e5b9-88df-e311-b8e5-6c3be5a8b200"
"Tom O'Neill","O'Neill","5fa5e5b9-88df-e311-b8e5-6c3be5a8b200"
"Wilson Pais","Pais","6fa5e5b9-88df-e311-b8e5-6c3be5a8b200"
"Ian Palangio","Palangio","71a5e5b9-88df-e311-b8e5-6c3be5a8b200"
"Rok Palčič","Palčič","73a5e5b9-88df-e311-b8e5-6c3be5a8b200"
"Flemming Pedersen","Pedersen","89a5e5b9-88df-e311-b8e5-6c3be5a8b200"
"Terrence Philip","Philip","9fa5e5b9-88df-e311-b8e5-6c3be5a8b200"
"David Probst","Probst","c9a5e5b9-88df-e311-b8e5-6c3be5a8b200"
"Olivier Renaud","Renaud","f1a5e5b9-88df-e311-b8e5-6c3be5a8b200"
"Tihomir Sasic","Sasic","4ba6e5b9-88df-e311-b8e5-6c3be5a8b200"
"Naoki Sato","Sato","4fa6e5b9-88df-e311-b8e5-6c3be5a8b200"
"Isabelle Scemla","Scemla","55a6e5b9-88df-e311-b8e5-6c3be5a8b200"
"Gary Schare","Schare","5ba6e5b9-88df-e311-b8e5-6c3be5a8b200"
"Susanne Schustin","Schustin","67a6e5b9-88df-e311-b8e5-6c3be5a8b200"
"Alex Simmons","Simmons","8da6e5b9-88df-e311-b8e5-6c3be5a8b200"
"Hoe Yew Soon","Soon","b5a6e5b9-88df-e311-b8e5-6c3be5a8b200"
"Ryan Spanton","Spanton","b9a6e5b9-88df-e311-b8e5-6c3be5a8b200"
"Iben Thorell","Thorell","0fa7e5b9-88df-e311-b8e5-6c3be5a8b200"
"Bruno Torres","Torres","21a7e5b9-88df-e311-b8e5-6c3be5a8b200"
"Florian Voss","Voss","6fa7e5b9-88df-e311-b8e5-6c3be5a8b200"
"Thiti Wang-Aryattawanich","Wang-Aryattawanich","83a7e5b9-88df-e311-b8e5-6c3be5a8b200"
"James Wittrell","Wittrell","afa7e5b9-88df-e311-b8e5-6c3be5a8b200"
"Robin Wood","Wood","b3a7e5b9-88df-e311-b8e5-6c3be5a8b200"
"Karin Zimprich","Zimprich","e3a7e5b9-88df-e311-b8e5-6c3be5a8b200"
"Shaun Beasley","Beasley","9c7a70c3-4ec8-e411-80ee-c4346bac7be8"
"Kim Abercrombie","Abercrombie","a230c305-4fc8-e411-80ee-c4346bac7be8"
"Marco Tanara","Tanara","02fa7133-4fc8-e411-80ee-c4346bac7be8"
"Bertie Hinton","Hinton","1a4f0c57-5666-e711-80f2-c4346bacfbbc"
"Shelby Paul","Paul","bde6db77-5666-e711-80f2-c4346bacfbbc"
"Isaac Lightner","Lightner","48b6c6a5-88d2-e411-80e9-c4346bad5694"
"","","58dbd239-d12e-e711-8110-c4346bad9668"
"Roland Roybal","Roybal","77a07064-1ae7-e611-80f4-e0071b661f01"
"Romeo Gooding","Gooding","79a07064-1ae7-e611-80f4-e0071b661f01"
"Hallie Jacobs","Jacobs","7ba07064-1ae7-e611-80f4-e0071b661f01"
"Joni Hernandez","Hernandez","7da07064-1ae7-e611-80f4-e0071b661f01"
"Tracie Blevins","Blevins","7fa07064-1ae7-e611-80f4-e0071b661f01"
"Leland Fusco","Fusco","81a07064-1ae7-e611-80f4-e0071b661f01"
"Hector Clausen","Clausen","83a07064-1ae7-e611-80f4-e0071b661f01"
"Amos Conger","Conger","85a07064-1ae7-e611-80f4-e0071b661f01"
"Eva Colon","Colon","87a07064-1ae7-e611-80f4-e0071b661f01"
"Brandie Diaz","Diaz","8ba07064-1ae7-e611-80f4-e0071b661f01"
"Consuelo Moses","Moses","8da07064-1ae7-e611-80f4-e0071b661f01"
"Pearlie Blackburn","Blackburn","91a07064-1ae7-e611-80f4-e0071b661f01"
"Sammy McCormick","McCormick","93a07064-1ae7-e611-80f4-e0071b661f01"
"Ladonna Carlson","Carlson","95a07064-1ae7-e611-80f4-e0071b661f01"
"Brain Rey","Rey","97a07064-1ae7-e611-80f4-e0071b661f01"
"Karl McKee","McKee","99a07064-1ae7-e611-80f4-e0071b661f01"
"Kendrick Carbajal","Carbajal","9ba07064-1ae7-e611-80f4-e0071b661f01"
"Adrienne McMillan","McMillan","9da07064-1ae7-e611-80f4-e0071b661f01"
"Pearl Chavez","Chavez","9fa07064-1ae7-e611-80f4-e0071b661f01"
"Dudley Garay","Garay","a1a07064-1ae7-e611-80f4-e0071b661f01"
"Sue Vance","Vance","a3a07064-1ae7-e611-80f4-e0071b661f01"
"Trina Duncan","Duncan","a5a07064-1ae7-e611-80f4-e0071b661f01"
"Calvin Conte","Conte","a7a07064-1ae7-e611-80f4-e0071b661f01"
"Tommie Bowers","Bowers","a9a07064-1ae7-e611-80f4-e0071b661f01"
"Bobbi Christian","Christian","aba07064-1ae7-e611-80f4-e0071b661f01"
"Maynard Lafferty","Lafferty","afa07064-1ae7-e611-80f4-e0071b661f01"
"Freida Farley","Farley","b1a07064-1ae7-e611-80f4-e0071b661f01"
"Jodi Ferrell","Ferrell","b3a07064-1ae7-e611-80f4-e0071b661f01"
"Ora Rodriguez","Rodriguez","b5a07064-1ae7-e611-80f4-e0071b661f01"
"Alexis Fry","Fry","b7a07064-1ae7-e611-80f4-e0071b661f01"
"Andrew Book","Book","b9a07064-1ae7-e611-80f4-e0071b661f01"
"Darrell Bromley","Bromley","bba07064-1ae7-e611-80f4-e0071b661f01"
"Mack Fannin","Fannin","bda07064-1ae7-e611-80f4-e0071b661f01"
"Eloise Steele","Steele","bfa07064-1ae7-e611-80f4-e0071b661f01"
"Terrie Patrick","Patrick","c1a07064-1ae7-e611-80f4-e0071b661f01"
"Rudolph Schiller","Schiller","c3a07064-1ae7-e611-80f4-e0071b661f01"
"Jayne Carr","Carr","c5a07064-1ae7-e611-80f4-e0071b661f01"
"Catalina Weeks","Weeks","c7a07064-1ae7-e611-80f4-e0071b661f01"
"Carol McLaughlin","McLaughlin","c9a07064-1ae7-e611-80f4-e0071b661f01"
"Heriberto Nathan","Nathan","cba07064-1ae7-e611-80f4-e0071b661f01"
"Everett Fielder","Fielder","cda07064-1ae7-e611-80f4-e0071b661f01"
"Claudia Ballard","Ballard","cfa07064-1ae7-e611-80f4-e0071b661f01"
"Margarita Russo","Russo","d1a07064-1ae7-e611-80f4-e0071b661f01"
"Randy Thiel","Thiel","d3a07064-1ae7-e611-80f4-e0071b661f01"
"Max McLean","McLean","d5a07064-1ae7-e611-80f4-e0071b661f01"
"Clay Clemente","Clemente","d7a07064-1ae7-e611-80f4-e0071b661f01"
"Bette Goodman","Goodman","d9a07064-1ae7-e611-80f4-e0071b661f01"
"Trudy Dickson","Dickson","dba07064-1ae7-e611-80f4-e0071b661f01"
"Amie Gonzales","Gonzales","dfa07064-1ae7-e611-80f4-e0071b661f01"
"Nanette Cervantes","Cervantes","e5a07064-1ae7-e611-80f4-e0071b661f01"
"Angelo Razo","Razo","eba07064-1ae7-e611-80f4-e0071b661f01"
"Susanne Holcomb","Holcomb","eda07064-1ae7-e611-80f4-e0071b661f01"
"Ty Tinker","Tinker","efa07064-1ae7-e611-80f4-e0071b661f01"
"Gay Gilmore","Gilmore","f1a07064-1ae7-e611-80f4-e0071b661f01"
"Jill David","David","f3a07064-1ae7-e611-80f4-e0071b661f01"
"Summer Knight","Knight","f5a07064-1ae7-e611-80f4-e0071b661f01"
"Kate Floyd","Floyd","f7a07064-1ae7-e611-80f4-e0071b661f01"
"Reggie Amaral","Amaral","f9a07064-1ae7-e611-80f4-e0071b661f01"
"Francine Duran","Duran","fba07064-1ae7-e611-80f4-e0071b661f01"
"Leann Valencia","Valencia","fda07064-1ae7-e611-80f4-e0071b661f01"
"Davis Flournoy","Flournoy","ffa07064-1ae7-e611-80f4-e0071b661f01"
"Judy Simon","Simon","01a17064-1ae7-e611-80f4-e0071b661f01"
"Frankie Mundy","Mundy","03a17064-1ae7-e611-80f4-e0071b661f01"
"Janna Santana","Santana","05a17064-1ae7-e611-80f4-e0071b661f01"
"Wayne Goolsby","Goolsby","07a17064-1ae7-e611-80f4-e0071b661f01"
"Ashley Chinn","Chinn","09a17064-1ae7-e611-80f4-e0071b661f01"
"Winifred Pollard","Pollard","0ba17064-1ae7-e611-80f4-e0071b661f01"
"Kenya Briggs","Briggs","0da17064-1ae7-e611-80f4-e0071b661f01"
"Tony Sellars","Sellars","0fa17064-1ae7-e611-80f4-e0071b661f01"
"Greta Rodriquez","Rodriquez","11a17064-1ae7-e611-80f4-e0071b661f01"
"Lucille Frazier","Frazier","13a17064-1ae7-e611-80f4-e0071b661f01"
"Morgan Bird","Bird","15a17064-1ae7-e611-80f4-e0071b661f01"
"Dawn Phelps","Phelps","17a17064-1ae7-e611-80f4-e0071b661f01"
"Reba Potts","Potts","19a17064-1ae7-e611-80f4-e0071b661f01"
"Hal Matheson","Matheson","1ba17064-1ae7-e611-80f4-e0071b661f01"
"Marianne Watson","Watson","1da17064-1ae7-e611-80f4-e0071b661f01"
"Katelyn Merritt","Merritt","1fa17064-1ae7-e611-80f4-e0071b661f01"
"Bernadette Foley","Foley","21a17064-1ae7-e611-80f4-e0071b661f01"
"Dianna Woodward","Woodward","23a17064-1ae7-e611-80f4-e0071b661f01"
"Abraham McCormick","McCormick","25a17064-1ae7-e611-80f4-e0071b661f01"
"Lizzie Foley","Foley","27a17064-1ae7-e611-80f4-e0071b661f01"
"Cheri Castaneda","Castaneda","29a17064-1ae7-e611-80f4-e0071b661f01"
"Allison Dickson","Dickson","2ba17064-1ae7-e611-80f4-e0071b661f01"
"Florine Wilkerson","Wilkerson","2da17064-1ae7-e611-80f4-e0071b661f01"
"Christal Robles","Robles","2fa17064-1ae7-e611-80f4-e0071b661f01"
"Lula Walter","Walter","31a17064-1ae7-e611-80f4-e0071b661f01"
"Rickie Seely","Seely","33a17064-1ae7-e611-80f4-e0071b661f01"
"Clarence Desimone","Desimone","35a17064-1ae7-e611-80f4-e0071b661f01"
"Christie Dawson","Dawson","37a17064-1ae7-e611-80f4-e0071b661f01"
"Martina Welch","Welch","39a17064-1ae7-e611-80f4-e0071b661f01"
"Tabatha Guy","Guy","3ba17064-1ae7-e611-80f4-e0071b661f01"
"Jolene Keith","Keith","3da17064-1ae7-e611-80f4-e0071b661f01"
"Faith Ratliff","Ratliff","3fa17064-1ae7-e611-80f4-e0071b661f01"
"Jennifer Rivas","Rivas","41a17064-1ae7-e611-80f4-e0071b661f01"
"Tamra Riggs","Riggs","43a17064-1ae7-e611-80f4-e0071b661f01"
"Mike Fogarty","Fogarty","45a17064-1ae7-e611-80f4-e0071b661f01"
"Reed Hermann","Hermann","47a17064-1ae7-e611-80f4-e0071b661f01"
"Eva Dawson","Dawson","49a17064-1ae7-e611-80f4-e0071b661f01"
"Pamela Golden","Golden","4ba17064-1ae7-e611-80f4-e0071b661f01"
"Lawanda Massey","Massey","4da17064-1ae7-e611-80f4-e0071b661f01"
"Orville Eagle","Eagle","4fa17064-1ae7-e611-80f4-e0071b661f01"
"Laurie Norman","Norman","51a17064-1ae7-e611-80f4-e0071b661f01"
"Gracie George","George","53a17064-1ae7-e611-80f4-e0071b661f01"
"Faith Charles","Charles","55a17064-1ae7-e611-80f4-e0071b661f01"
"Maryanne Wilcox","Wilcox","57a17064-1ae7-e611-80f4-e0071b661f01"
"Madge Sutton","Sutton","59a17064-1ae7-e611-80f4-e0071b661f01"
"Bob Kozak","Kozak","5ba17064-1ae7-e611-80f4-e0071b661f01"
"Kellie Leblanc","Leblanc","5da17064-1ae7-e611-80f4-e0071b661f01"
"Dick Cowley","Cowley","5fa17064-1ae7-e611-80f4-e0071b661f01"
"Vicky Barker","Barker","61a17064-1ae7-e611-80f4-e0071b661f01"
"Katheryn Dickson","Dickson","63a17064-1ae7-e611-80f4-e0071b661f01"
"Jay Orth","Orth","65a17064-1ae7-e611-80f4-e0071b661f01"
"June Low","Low","67a17064-1ae7-e611-80f4-e0071b661f01"
"Reina Cabatana","Cabatana","69a17064-1ae7-e611-80f4-e0071b661f01"
"Brady Hannon","Hannon","6ba17064-1ae7-e611-80f4-e0071b661f01"
"Simon Raley","Raley","6da17064-1ae7-e611-80f4-e0071b661f01"
"Wilson Chew","Chew","6fa17064-1ae7-e611-80f4-e0071b661f01"
"Edgar Dominquez","Dominquez","71a17064-1ae7-e611-80f4-e0071b661f01"
"Efrain Schreiner","Schreiner","73a17064-1ae7-e611-80f4-e0071b661f01"
"Joseph Gonsalves","Gonsalves","75a17064-1ae7-e611-80f4-e0071b661f01"
"Matthew Everson","Everson","77a17064-1ae7-e611-80f4-e0071b661f01"
"Ricardo Seely","Seely","79a17064-1ae7-e611-80f4-e0071b661f01"
"Norbert Sandberg","Sandberg","7ba17064-1ae7-e611-80f4-e0071b661f01"
"Van Amundson","Amundson","7da17064-1ae7-e611-80f4-e0071b661f01"
"Samuel McBride","McBride","7fa17064-1ae7-e611-80f4-e0071b661f01"
"Victor Timm","Timm","81a17064-1ae7-e611-80f4-e0071b661f01"
"Kris Nakamura","Nakamura","83a17064-1ae7-e611-80f4-e0071b661f01"
"Ryan Brim","Brim","85a17064-1ae7-e611-80f4-e0071b661f01"
"Luke Lundgren","Lundgren","87a17064-1ae7-e611-80f4-e0071b661f01"
"Jorge Gault","Gault","89a17064-1ae7-e611-80f4-e0071b661f01"
"Mallory Rosario","Rosario","1bb028ba-da09-e711-8107-e0071b6a1051"
"Jennifer Wilkins","Wilkins","2d0f7e14-0c56-e711-8135-e0071b6a7021"


================================================
File: component_config/sample-config/out/tables/contacts.csv.manifest
================================================
{"primary_key": ["contactid"], "incremental": true, "columns": ["fullname", "lastname", "contactid"]}

================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: src/component.py
================================================
import json
import logging
import os

from keboola.component import ComponentBase, UserException
from keboola.component.base import sync_action
from keboola.component.dao import OauthCredentials
from keboola.component.sync_actions import SelectElement

from configuration import Configuration
from dynamics.client import DynamicsClient
from dynamics.result import DynamicsWriter

STATE_AUTH_ID = "auth_id"
STATE_REFRESH_TOKEN = "#refresh_token"


class Component(ComponentBase):

    def __init__(self):

        super().__init__()

        self.cfg: Configuration
        self._client: DynamicsClient = None

    def run(self):

        self.__init_configuration()
        self.init_client()

        logging.info(f"Downloading data for endpoint \"{self.cfg.endpoint}\".")

        _has_more = True
        _next_link = None
        _req_count = 0
        column_metadata = self._client.list_columns_from_metadata()
        _pk = column_metadata[self.cfg.endpoint]['primary_key']
        if not self.cfg.destination.table_name:
            res_name = f'{self.cfg.endpoint}.csv'
        else:
            res_name = f'{self.cfg.destination.table_name}.csv'

        res_table = self.create_out_table_definition(res_name,
                                                     primary_key=_pk,
                                                     incremental=self.cfg.destination.incremental)

        writer = DynamicsWriter(res_table.full_path)

        total_rows = 0
        while _has_more is True:

            _req_count += 1
            _results, _next_link = self._client.download_data(self.cfg.endpoint, self.cfg.columns,
                                                              next_link_url=_next_link)  # noqa

            if len(_results) == 0:
                _has_more = False
            else:
                total_rows += len(_results)
                writer.writerows(_results)
                _has_more = True if _next_link else False
            if total_rows % 2000 == 0:
                logging.info(f"Downloaded {total_rows} rows so far.")

        logging.info(f"Made {_req_count} requests to the API in total for endpoint \"{self.cfg.endpoint}\". "
                     f"Downloaded total {total_rows} rows")

        if total_rows > 0:
            writer.close()
            res_table.columns = writer.get_result_columns()
            self.write_manifest(res_table)

    def init_client(self):
        organization_url = self.configuration.parameters.get('organization_url')
        if not organization_url:
            raise UserException('You must fill in the Organization URL')

        if custom_creds := self.configuration.parameters.get('custom_credentials'):
            credentials = OauthCredentials('', '', json.loads(custom_creds['#data']), '',
                                           custom_creds['appKey'],
                                           custom_creds['#appSecret'])
        else:
            credentials = self.configuration.oauth_credentials

        if not credentials:
            raise UserException("The configuration is not authorized. Please authorize it first.")

        refresh_token = self.get_state_file().get(STATE_REFRESH_TOKEN, [])
        auth_id = self.get_state_file().get(STATE_AUTH_ID, [])

        if refresh_token and auth_id == credentials["id"]:
            logging.info("Refresh token loaded from state file")

        else:
            refresh_token = credentials.data['refresh_token']
            logging.info("Refresh token loaded from authorization")

        self._client = DynamicsClient(credentials.appKey,
                                      credentials.appSecret, organization_url,
                                      refresh_token)

        self.write_state_file({
            STATE_REFRESH_TOKEN: self._client.refresh_token,
            STATE_AUTH_ID: credentials["id"]
        })

    def __init_configuration(self):
        try:
            self._validate_parameters(self.configuration.parameters, Configuration.get_dataclass_required_parameters(),
                                      'Row')
        except UserException as e:
            raise UserException(f"{e} The configuration is invalid. Please check that you added a configuration row.")
        self.cfg: Configuration = Configuration.fromDict(parameters=self.configuration.parameters)

    @sync_action('list_endpoints')
    def list_endpoints(self):
        self.init_client()
        endpoints = self._client.list_entity_metadata()
        return [SelectElement(el['PublicCollectionName']) for el in endpoints if el['PublicCollectionName']]

    @sync_action('list_columns')
    def list_columns(self):
        self.init_client()
        self.__init_configuration()
        columns = self._client.list_columns(self.cfg.endpoint)
        return [SelectElement(value=f"{el['Name']}",
                              label=f"{el['Name']} [{'PK, ' if el.get('is_pkey') else ''}"
                                    f"{el['Type']}]") for el in columns]

    @sync_action('testConnection')
    def test_connection(self):
        self.init_client()
        self._client.list_entity_metadata()

    @sync_action('generate_schema')
    def generate_schema(self):
        self.init_client()
        self.__init_configuration()
        endpoints = self._client.list_columns_from_metadata()
        json.dump(endpoints, open(os.path.join(self.files_out_path, 'schema.json'), 'w+'))


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        detail = ''
        if len(exc.args) > 1:
            # remove extra argument to make logging.exception log properly
            detail = exc.args[1]
            exc.args = exc.args[:1]
        logging.exception(exc, extra={"additional_detail": detail})
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: src/configuration.py
================================================
import dataclasses
from dataclasses import dataclass
from typing import List

import dataconf


class ConfigurationBase:

    @staticmethod
    def fromDict(parameters: dict):
        return dataconf.dict(parameters, Configuration, ignore_unexpected=True)
        pass

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith('pswd_'):
            return value.replace('pswd_', '#', 1)
        else:
            return value

    @classmethod
    def get_dataclass_required_parameters(cls) -> List[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: List[str]

        """
        return [cls._convert_private_value_inv(f.name) for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING
                and f.default_factory == dataclasses.MISSING]


@dataclass
class Destination(ConfigurationBase):
    table_name: str = ''
    primary_key: list[str] = dataclasses.field(default_factory=list)
    incremental: bool = True


@dataclass
class Configuration(ConfigurationBase):
    organization_url: str
    endpoint: str
    destination: Destination
    columns: list[str] = dataclasses.field(default_factory=list)
    debug: bool = False


================================================
File: src/dynamics/client.py
================================================
import logging
import os
import xml.etree.ElementTree as ET

import requests
from keboola.component import UserException
from keboola.http_client import HttpClient
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry


class DynamicsClient(HttpClient):
    MSFT_LOGIN_URL = 'https://login.microsoftonline.com/common/oauth2/token'
    MAX_RETRIES = 7
    PAGE_SIZE = 2000

    def __init__(self, client_id, client_secret, resource_url, refresh_token, max_page_size: int = PAGE_SIZE):

        self.client_id = client_id
        self.client_secret = client_secret
        self.resource_url = os.path.join(resource_url, '')
        self.refresh_token = refresh_token
        self._max_page_size = max_page_size
        _accessToken = self.refresh_tokens()
        super().__init__(base_url=os.path.join(resource_url, 'data'), max_retries=self.MAX_RETRIES, auth_header={
            'Authorization': f'Bearer {_accessToken}'
        })

    def refresh_tokens(self):

        headers_refresh = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json'
        }

        body_refresh = {
            'client_id': self.client_id,
            'grant_type': 'refresh_token',
            'client_secret': self.client_secret,
            'resource': self.resource_url,
            'refresh_token': self.refresh_token
        }

        resp = requests.post(self.MSFT_LOGIN_URL, headers=headers_refresh, data=body_refresh)
        code, response_json = resp.status_code, resp.json()

        if code == 200:

            if response_json.get('refresh_token', None):
                self.refresh_token = response_json.get('refresh_token')

                logging.info(f"New access token expires in {response_json.get('expires_in', '')} s"
                             f"New refresh token expires in {response_json.get('refresh_token_expires_in', '')} s")

            logging.debug("Access token refreshed successfully.")
            return response_json['access_token']

        else:
            raise UserException(f"Could not refresh access token. Received {code} - {response_json}.")

    def __response_hook(self, res, *args, **kwargs):

        if res.status_code == 401:
            token = self.refresh_tokens()
            self.update_auth_header({"Authorization": f'Bearer {token}'})

            res.request.headers['Authorization'] = f'Bearer {token}'
            s = requests.Session()
            return self.requests_retry_session(session=s).send(res.request)

    def requests_retry_session(self, session=None):

        session = session or requests.Session()
        retry = Retry(
            total=self.max_retries,
            read=self.max_retries,
            connect=self.max_retries,
            backoff_factor=self.backoff_factor,
            status_forcelist=self.status_forcelist,
            allowed_methods=('GET', 'POST', 'PATCH', 'UPDATE', 'DELETE')
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        # append response hook
        session.hooks['response'].append(self.__response_hook)
        return session

    def list_entity_metadata(self) -> dict:

        url = os.path.join(self.resource_url, 'Metadata/DataEntities')

        response = self.get_raw(url, is_absolute_path=True)
        try:
            response.raise_for_status()
            json_data = response.json()
            return json_data['value']

        except requests.HTTPError as e:
            raise e

    def download_data(self, endpoint: str, columns: list[str], query=None, next_link_url=None):

        prefer_value = f"odata.maxpagesize={self._max_page_size}"

        headers_query = {
            'Prefer': prefer_value
        }

        if next_link_url:
            full_url = next_link_url

        else:
            full_url = os.path.join(self.base_url, endpoint)
            query_parts = list()
            if columns:
                query_parts.append(f"$select={','.join(columns)}")

            if query:
                query_parts.append(query)

            if query_parts:
                full_url = f"{full_url}?{'&'.join(query_parts)}"

        response = self.get_raw(full_url, headers=headers_query, is_absolute_path=True)
        try:
            response.raise_for_status()
            json_data = response.json()
            _results = json_data['value']
            _nextLink = json_data.get('@odata.nextLink', None)
            return _results, _nextLink

        except requests.HTTPError as e:

            _err_msg = response.json().get('error', {})

            if _err_msg and 'Could not find a property named' in _err_msg:
                _add_msg = 'When querying foreign key fields, do not forget to ommit "fk" part of the field, e.g. ' + \
                           '"fk_accountid" -> "_accountid". Please, refer to the documentation for more information.'

            else:
                _add_msg = ''

            raise UserException(''.join([f"Could not query endpoint \"{endpoint}\". ",
                                         f"Received: {response.status_code} - {_err_msg.get('message')} ",
                                         _add_msg]), _err_msg) from e

    def list_columns(self, endpoint):
        """
        List endpoint available columns
        Args:
            endpoint:

        Returns:

        """

        col_metadata = self.list_columns_from_metadata()
        columns = col_metadata[endpoint]['columns']
        for col in columns:
            if col['Name'] in col_metadata[endpoint]['primary_key']:
                col['is_pkey'] = True

        return columns

    def list_columns_from_metadata(self) -> dict:
        """
        Get column names indexed by available datasets,
            e.g. {"dataset": "columns":["col1","col2"], "primary_keys":["col1"]}
        Returns: dict

        """
        entity_metadata = self.list_entity_metadata()

        entity_metadata_mapping = {e['PublicEntityName']: e for e in entity_metadata
                                   if e['PublicCollectionName']}
        response = self.get_raw('$metadata', params={'$format': 'application/atom;odata.metadata=minimal'})

        root = ET.fromstring(response.text)
        column_names = {}
        for entity_type in root.findall('.//{http://docs.oasis-open.org/odata/ns/edm}EntityType'):
            entity_name = entity_type.attrib['Name']
            if entity_name not in entity_metadata_mapping:
                continue

            dataset_name = entity_metadata_mapping[entity_name]['PublicCollectionName']
            column_names[dataset_name] = {}
            column_names[dataset_name]['columns'] = [p.attrib for p in
                                                     entity_type.findall(
                                                         '{http://docs.oasis-open.org/odata/ns/edm}Property')]

            keys = entity_type.findall('{http://docs.oasis-open.org/odata/ns/edm}Key')
            if keys:
                column_names[dataset_name]['primary_key'] = [p.attrib['Name'] for p in keys[0].findall(
                    '{http://docs.oasis-open.org/odata/ns/edm}PropertyRef')]
            else:
                column_names[dataset_name]['primary_key'] = []

        return column_names


================================================
File: src/dynamics/result.py
================================================
import csv

FORMATTED_VALUE_LABEL = "@OData.Community.Display.V1.FormattedValue"


class DynamicsWriter:

    def __init__(self, output_path: str):

        self.full_table_path = output_path
        self.__column_map = None
        self.__writer: csv.DictWriter = None
        self.__out_stream = None

    def set_column_map(self, object_data: dict):
        if not self.__column_map:

            all_columns = []

            for o in object_data:
                all_columns += o.keys()

            all_columns = list(all_columns)
            map_columns = {}

            for column in all_columns:
                if column.startswith('_') is True:
                    map_columns[column] = self._get_valid_kbc_storage_name(column)
                elif self._is_formatted_value_column(column):
                    map_columns[column] = self._get_shortened_formatted_value_column_name(column)
                elif '@odata' in column:
                    continue
                else:
                    map_columns[column] = column

            self.__column_map = map_columns

    def _get_valid_kbc_storage_name(self, column_name):
        if not self._is_formatted_value_column(column_name):
            return f'fk{column_name}'
        column_cleaned = self._get_shortened_formatted_value_column_name(column_name)
        return f"fk{column_cleaned}"

    @staticmethod
    def _is_formatted_value_column(column_name: str) -> bool:
        if FORMATTED_VALUE_LABEL in column_name:
            return True

    @staticmethod
    def _get_shortened_formatted_value_column_name(column_name: str) -> str:
        name_with_removed_formatted_value = column_name.replace(FORMATTED_VALUE_LABEL, "")
        return f"{name_with_removed_formatted_value}_formattedValue"

    def _get_writer(self, columns: list[str]) -> csv.DictWriter:
        if not self.__writer:
            self.__out_stream = open(self.full_table_path, 'w+')
            self.__writer = csv.DictWriter(self.__out_stream,
                                           fieldnames=columns, extrasaction='ignore')
        return self.__writer

    def get_result_columns(self) -> list[str]:
        return list(self.__column_map.values())

    def writerows(self, data_to_write: dict):
        self.set_column_map(data_to_write)
        self._get_writer(list(self.__column_map.keys())).writerows(data_to_write)

    def close(self):
        if self.__out_stream:
            self.__out_stream.close()


