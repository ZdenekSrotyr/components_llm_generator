Directory structure:
└── kds_consulting_team-kds-team.app-snowflake-byodb-view-writer/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── TEMPLATE_README.md
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   ├── view_creator.py
    │   └── dbstorage/
    │       ├── __init__.py
    │       └── snowflake_client.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
FILE: README.md
================================================
Snowflake BYODB View Writer
=============

Takes all tables in selected bucket and creates views containing datatypes in the external db within the same Snowflake
account.

**Table of contents:**

[TOC]

Functionality notes
===================

It is advisable to enable the RO role for the project, so the View creating role has only read access. Also, to support
shared buckets the RO role must be enabled in both projects, otherwise the component will fail when shared tables are
enabled in the configuration.

Following diagram depicts the workflow of the component:

![diagram](docs/imgs/diagram.png)


Prerequisites
=============


Create dedicated user with read access to the KBC project databse and view creation access to the external database:

```sql
-- create user
CREATE
USER "MANAGE_PRJ"
    PASSWORD = "XXXXXX"
    DEFAULT_ROLE = "KEBOOLA_XX";

-- Create role that will be used to create the Views
CREATE ROLE "MANAGE_ROLE";

-- Assign necessary grants for EXTERNAL DB View Creation
GRANT
USAGE
ON
DATABASE
EXTERNALDB TO ROLE MANAGE_ROLE;
GRANT
CREATE SCHEMA ON DATABASE EXTERNALDB TO ROLE MANAGE_ROLE;

-- assign this role to the existing KBC Project role
GRANT
ROLE
KEBOOLA_5689 TO ROLE MANAGE_ROLE; 
-- OR GRANT ROLE KEBOOLA_5689_RO TO ROLE MANAGE_ROLE;
-- if you have RO role enabled.

-- Assign the KBC Project role that owns all objects in the Storage to the user
-- this is needed because KBC grants ownership to the existing tables. GRANT SELECT ON FUTURE to different role would break it.

GRANT ROLE
"MANAGE_ROLE" TO USER "MANAGE_PRJ";


-- READ ONLY ROLE FOR THE EXTERNAL SCHEMA
GRANT USAGE ON future
schemas in database "EXTERNALDB" TO ROLE EXAMPLE_ROLE;
GRANT USAGE ON all
schemas in database "EXTERNALDB" TO ROLE EXAMPLE_ROLE;
GRANT
SELECT
ON future views in database "EXTERNALDB" TO ROLE EXAMPLE_ROLE;
GRANT
SELECT
ON all views in database "EXTERNALDB" TO ROLE EXAMPLE_ROLE;

```

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in
the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone git@bitbucket.org:kds_consulting_team/kds-team.app-snowflake-byodb-view-writer.git kds-team.app-snowflake-byodb-view-writer
cd kds-team.app-snowflake-byodb-view-writer
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)



================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - export TAG=${BITBUCKET_BRANCH//\//-}
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo "Pushing test image to repo. [tag=${TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - export TAG=${BITBUCKET_BRANCH//\//-}
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo "Pushing test image to repo. [tag=${TAG}]"
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:$TAG
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:$TAG
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential && apt-get install -y git

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
keboola.component==1.4.2
keboola.utils
snowflake-connector-python==3.0.0
git+https://github.com/keboola/sapi-python-client.git
mock
freezegun
dataconf


================================================
FILE: TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
FILE: component_config/component_long_description.md
================================================
Replicate Storage tables as Views in selected destination DB. 


================================================
FILE: component_config/component_short_description.md
================================================
Replicate Storage tables as Views in selected destination DB.


================================================
FILE: component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "extractor configuration",
  "required": [
    "destination_db",
    "bucket_ids"
  ],
  "properties": {
    "destination_db": {
      "type": "string",
      "title": "Destination DB name",
      "description": "Name of the destination database in Snowflake",
      "propertyOrder": 160
    },
    "bucket_ids": {
      "type": "array",
      "title": "Storage Buckets",
      "description": "Storage Buckets. If left empty, all buckets in the project will be used.",
      "items": {
        "enum": [],
        "type": "string",
        "minLength": 5,
        "title": "Bucket ID"
      },
      "format": "select",
      "uniqueItems": true,
      "options": {
        "async": {
          "label": "Re-load buckets",
          "action": "get_buckets"
        }
      },
      "propertyOrder": 161
    },
    "custom_schema_mapping": {
      "type": "boolean",
      "title": "Custom schema mapping",
      "default": false,
      "description": "Map buckets to custom schemas",
      "required": true,
      "format": "checkbox",
      "propertyOrder": 162
    },
    "schema_mapping": {
      "type": "array",
      "format": "table",
      "uniqueItems": true,
      "options": {
        "dependencies": {
          "custom_schema_mapping": true
        }
      },
      "items": {
        "type": "object",
        "title": "Mapping",
        "required": [
          "bucket_id",
          "destination_schema"
        ],
        "properties": {
          "bucket_id": {
            "type": "string",
            "title": "Storage Bucket",
            "watch": {
              "bid": "bucket_ids"
            },
            "enumSource": "bid",
            "propertyOrder": 1
          },
          "destination_schema": {
            "type": "string",
            "title": "Destination Schema",
            "propertyOrder": 100
          }
        }
      },
      "title": "Schema Mapping",
      "propertyOrder": 163
    },
    "additional_options": {
      "type": "object",
      "title": "Additional Options",
      "format": "grid-strict",
      "required": [
        "column_case",
        "view_case"
      ],
      "properties": {
        "schema_display_helper": {
          "type": "string",
          "description": "Helper dummy element to render schema related options",
          "template": "{{val}}",
          "watch": {
            "val": "custom_schema_mapping"
          },
          "options": {
            "hidden": true
          }
        },
        "column_case": {
          "type": "string",
          "title": "Column case",
          "enum": [
            "original",
            "upper",
            "lower"
          ],
          "options": {
            "grid_columns": 4
          },
          "default": "original",
          "propertyOrder": 25
        },
        "view_case": {
          "type": "string",
          "title": "View Case",
          "enum": [
            "original",
            "upper",
            "lower"
          ],
          "options": {
            "grid_columns": 4
          },
          "default": "original",
          "propertyOrder": 20
        },
        "schema_case": {
          "type": "string",
          "required": true,
          "title": "Schema Case",
          "enum": [
            "original",
            "upper",
            "lower"
          ],
          "options": {
            "grid_columns": 4,
            "dependencies": {
              "schema_display_helper": "false"
            }
          },
          "default": "original",
          "propertyOrder": 10
        },
        "use_bucket_alias": {
          "type": "boolean",
          "format": "checkbox",
          "title": "Use bucket alias",
          "description": "Use bucket alias (user defined name) in the VIEW name instead of the Bucket ID",
          "options": {
            "grid_columns": 4,
            "dependencies": {
              "schema_display_helper": "false"
            }
          },
          "default": true,
          "propertyOrder": 30
        },
        "drop_stage_prefix": {
          "type": "boolean",
          "format": "checkbox",
          "title": "Drop in/out prefix",
          "description": "Drop in/out prefix from resulting schema name",
          "options": {
            "grid_columns": 4,
            "dependencies": {
              "schema_display_helper": "false"
            }
          },
          "default": false,
          "propertyOrder": 32
        },
        "use_table_alias": {
          "type": "boolean",
          "format": "checkbox",
          "title": "Use table use defined name",
          "description": "Use table user defined name in the VIEW name instead of the default name (ID)",
          "options": {
            "grid_columns": 4
          },
          "default": false,
          "propertyOrder": 35
        },
        "ignore_shared_tables": {
          "type": "boolean",
          "format": "checkbox",
          "title": "Ignore shared tables",
          "description": "Skip shared tables. Enable only if RO role is used and enabled in all projects",
          "options": {
            "grid_columns": 4
          },
          "default": true,
          "propertyOrder": 40
        }
      },
      "propertyOrder": 180
    }
  }
}


================================================
FILE: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Snowflake Credentials",
  "required": [
    "username",
    "#password",
    "account",
    "warehouse",
    "role"
  ],
  "properties": {
    "#storage_token": {
      "type": "string",
      "title": "Storage Token",
      "format": "password",
      "propertyOrder": 100
    },
    "username": {
      "type": "string",
      "title": "User Name",
      "propertyOrder": 110
    },
    "#password": {
      "type": "string",
      "title": "Password",
      "format": "password",
      "propertyOrder": 120
    },
    "account": {
      "type": "string",
      "title": "Account",
      "description": "Snowflake account, e.g. cID.eu-central-1",
      "propertyOrder": 130
    },
    "warehouse": {
      "type": "string",
      "title": "Warehouse",
      "description": "Snowflake Warehouse name",
      "propertyOrder": 140
    },
    "role": {
      "type": "string",
      "title": "Role",
      "description": "Snowflake role name. If emtpy, default role will be used.",
      "propertyOrder": 150
    },
    "db_name_prefix": {
      "type": "string",
      "title": "DB Name Prefix",
      "default": "KEBOOLA_",
      "description": "Keboola generated DB names are formed as {PREFIX}{PROJECT_ID}. The prefixes can differ based on BYODB deployment setup. Typically KEBOOLA_ or SAPI_",
      "propertyOrder": 160
    }
  }
}



================================================
FILE: component_config/configuration_description.md
================================================
Configuration description.


================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "verbose",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
FILE: src/component.py
================================================
'''
Template Component main class.

'''
import logging
from typing import List

from kbcstorage.client import Client
from keboola.component.base import ComponentBase, sync_action
from keboola.component.exceptions import UserException
# configuration variables
from keboola.component.sync_actions import SelectElement

import configuration
from dbstorage import snowflake_client
from dbstorage.snowflake_client import Credentials
from view_creator import ViewCreator

KEY_API_TOKEN = '#api_token'
KEY_PRINT_HELLO = 'print_hello'

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [KEY_PRINT_HELLO]
REQUIRED_IMAGE_PARS = []


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()
        self._configuration: configuration.Configuration
        self._snowflake_client: snowflake_client.SnowflakeClient()

    def _init_configuration(self):
        self.validate_configuration_parameters(configuration.Configuration.get_dataclass_required_parameters())
        self._configuration: configuration.Configuration = configuration.Configuration.load_from_dict(
            self.configuration.parameters)

    def run(self):
        """
        Main execution code
        """

        # check for missing configuration parameters

        self._init_configuration()

        # config token support
        storage_token = self._get_storage_token()
        view_creator = ViewCreator(Credentials(account=self._configuration.account,
                                               user=self._configuration.username,
                                               password=self._configuration.pswd_password,
                                               warehouse=self._configuration.warehouse,
                                               role=self._configuration.role),
                                   self._get_kbc_root_url(),
                                   storage_token,
                                   self.environment_variables.project_id,
                                   system_name_prefix=self._configuration.db_name_prefix)

        additional_options = self._configuration.additional_options or configuration.AdditionalOptions()

        bucket_ids = self._configuration.bucket_ids
        if not bucket_ids:
            logging.info('No buckets specified, processing all available buckets')
            bucket_ids = view_creator.get_all_bucket_ids()

        # validate schema names, check for duplicates
        # validate schema mapping
        self._configuration.validate_schema_mapping(bucket_ids)
        schema_mapping = self._configuration.schema_mapping

        view_creator.validate_schema_names(bucket_ids, additional_options.use_bucket_alias,
                                           additional_options.drop_stage_prefix, schema_mapping)

        for bucket_id in bucket_ids:
            logging.info(f"Creating views for {bucket_id} in destination database {self._configuration.destination_db}")
            view_creator.create_views_from_bucket(bucket_id, self._configuration.destination_db,
                                                  column_name_case=additional_options.column_case,
                                                  view_name_case=additional_options.view_case,
                                                  schema_name_case=additional_options.schema_case,
                                                  use_bucket_alias=additional_options.use_bucket_alias,
                                                  use_table_alias=additional_options.use_table_alias,
                                                  session_id=self.environment_variables.run_id,
                                                  skip_shared_tables=additional_options.ignore_shared_tables,
                                                  drop_stage_prefix=additional_options.drop_stage_prefix,
                                                  schema_mapping=schema_mapping)

    @sync_action('get_buckets')
    def get_available_buckets(self) -> List[SelectElement]:
        """
        Sync action for getting list of available buckets
        Returns:

        """
        sapi_client = Client(self._get_kbc_root_url(), self._get_storage_token())

        buckets = sapi_client.buckets.list()
        return [SelectElement(value=b['id'], label=f'({b["stage"]}) {b["name"]}') for b in buckets]

    def _get_kbc_root_url(self):
        return f'https://{self.environment_variables.stack_id}'

    def _get_storage_token(self) -> str:
        return self.configuration.parameters.get('#storage_token') or self.environment_variables.token


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
FILE: src/configuration.py
================================================
import dataclasses
import json
from dataclasses import dataclass
from typing import List, Optional

import dataconf
from keboola.component import UserException


class ConfigurationBase:

    @staticmethod
    def _convert_private_value(value: str):
        return value.replace('"#', '"pswd_')

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith('pswd_'):
            return value.replace('pswd_', '#', 1)
        else:
            return value

    @staticmethod
    def load_from_dict(configuration: dict):
        """
        Initialize the configuration dataclass object from dictionary.
        Args:
            configuration: Dictionary loaded from json configuration.

        Returns:

        """
        json_conf = json.dumps(configuration)
        json_conf = ConfigurationBase._convert_private_value(json_conf)
        return dataconf.loads(json_conf, Configuration, ignore_unexpected=True)

    @classmethod
    def get_dataclass_required_parameters(cls) -> List[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: List[str]

        """
        return [cls._convert_private_value_inv(f.name) for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING
                and f.default_factory == dataclasses.MISSING]


@dataclass
class AdditionalOptions(ConfigurationBase):
    column_case: str = 'original'
    view_case: str = 'original'
    schema_case: str = 'original'
    use_bucket_alias: bool = True
    drop_stage_prefix: bool = False
    use_table_alias: bool = False
    ignore_shared_tables: bool = True


@dataclass
class SchemaMapping(ConfigurationBase):
    bucket_id: str
    destination_schema: str


@dataclass
class Configuration(ConfigurationBase):
    # Connection options
    account: str
    warehouse: str
    username: str
    pswd_password: str
    role: str
    destination_db: str
    # Row configuration
    bucket_ids: List[str]
    additional_options: Optional[AdditionalOptions] = None
    schema_mapping: List[SchemaMapping] = dataclasses.field(default_factory=list)
    debug: bool = False
    pswd_storage_token: str = ''
    db_name_prefix: str = 'KEBOOLA_'

    def validate_schema_mapping(self, bucket_ids: List[str]):
        """
        Validates schema mapping based on provided list of valid bucket IDs
        Args:
            bucket_ids: Valid bucket ids.

        Returns:

        """
        invalid_mapping = [m.bucket_id for m in self.schema_mapping if m.bucket_id not in bucket_ids]
        if self.schema_mapping and invalid_mapping:
            raise UserException(f"Some bucket names are invalid in the schema mapping: {invalid_mapping}. "
                                f"Please use on of the selected buckets: {bucket_ids}")



================================================
FILE: src/view_creator.py
================================================
from dataclasses import dataclass
from typing import Dict, List

from kbcstorage.client import Client
from keboola.component import UserException

from configuration import SchemaMapping
from dbstorage.snowflake_client import SnowflakeClient, Credentials


@dataclass
class StorageDataType:
    type: str
    length: str = None
    nullable: bool = None
    type_provider: str = ''
    length_provider: str = ''
    nullable_provider: str = ''


class ViewCreator:

    def __init__(self,
                 snowflake_credentials: Credentials,
                 kbc_root_url: str,
                 storage_token: str,
                 project_id: str,
                 system_name_prefix: str = 'KEBOOLA_'):

        self._snowflake_client = SnowflakeClient()
        self.__snowflake_credentials = snowflake_credentials
        self._sapi_client = Client(kbc_root_url, storage_token)
        self._project_id = project_id
        self._system_name_prefix = system_name_prefix
        self._current_project_id = project_id

    def _group_by_timestamp(self, data: dict):
        result = {}
        # Iterate since end (ordered by latest)
        for d in data[::-1]:
            if not result.get(d['timestamp']):
                result[d['timestamp']] = []
            result[d['timestamp']].append(d)

        return result

    def _get_column_datatype(self, metadata: dict, column_name: str) -> StorageDataType:
        """
        Loads datatype metadata of particular column
        Args:
            metadata:
            column_name:

        Returns:

        """
        # KBC converts empty object to list
        metadata = metadata or {}

        column_metadata = metadata.get(column_name, [])
        datatype = StorageDataType('')

        for md_item in column_metadata[::-1]:
            if not datatype.type and md_item['key'] in ['KBC.datatype.basetype']:
                datatype.type = md_item['value']
                datatype.type_provider = md_item['provider']
            if not datatype.length and md_item['key'] == 'KBC.datatype.length':
                datatype.length = md_item['value']
                datatype.length_provider = md_item['provider']
            if md_item['key'] == 'KBC.datatype.nullable':
                datatype.nullable = bool(md_item['value'])
                datatype.nullable_provider = md_item['provider']
            # stop if all found
            if datatype.type and datatype.length is not None and datatype.nullable is not None:
                break
            else:
                continue

        if not datatype.type:
            datatype = StorageDataType('TEXT')
        return datatype

    def _get_table_columns(self, table_response: dict) -> Dict[str, StorageDataType]:
        columns = table_response['columns']
        metadata = table_response['columnMetadata']

        column_datatypes = dict()

        for column in columns:
            column_datatypes[column] = self._get_column_datatype(metadata, column)

        return column_datatypes

    def _build_column_definitions(self, table_columns: Dict[str, StorageDataType], column_name_case: str = 'original',
                                  is_native_typed: bool = False) -> str:
        column_definitions = []
        for name, dtype in table_columns.items():
            # Anything that is not STRING needs to be wrapped in  NULLIF
            if not is_native_typed and (dtype.type.upper() != 'STRING' or dtype.nullable):
                identifier_name = f'NULLIF("{name}", \'\')'
            else:
                identifier_name = f'"{name}"'

            column_def = f'{identifier_name}::{dtype.type}'
            # Only NUMERIC types can have length
            if dtype.length and dtype.type.upper() in ['NUMERIC', 'STRING']:
                column_def += f'({dtype.length})'
            column_def += f' AS "{self._convert_case(name, column_name_case)}"'
            column_definitions.append(column_def)

        return ','.join(column_definitions)

    @staticmethod
    def _convert_case(identifier: str, case_conversion: str = 'original'):
        """
        Modifies the case of the name identifier.
        'original' to keep the case unchanged, 'upper'/'lower' to force the case of the identifier
        Args:
            identifier: string to convert
            case_conversion: 'original' to keep the case unchanged, 'upper'/'lower'

        Returns:

        """
        if case_conversion == 'original':
            pass
        elif case_conversion == 'upper':
            identifier = identifier.upper()
        elif case_conversion == 'lower':
            identifier = identifier.lower()
        else:
            raise ValueError(
                f"Invalid case option '{case_conversion}', supported values are ['original','upper','lower']")
        return identifier

    def get_all_bucket_ids(self):
        return [b['id'] for b in self._sapi_client.buckets.list()]

    def validate_schema_names(self, bucket_ids: List[str], use_bucket_alias: bool, drop_stage_prefix: bool,
                              schema_mapping: List[SchemaMapping] = None):
        """
        Validates schema names to prevent duplicates in the destination.
        Args:
            bucket_ids:
            use_bucket_alias:
            drop_stage_prefix:
            schema_mapping: List[configuration.SchemaMapping]:

        Returns:

        """
        bucket_details = [self._sapi_client.buckets.detail(bucket_id) for bucket_id in bucket_ids]
        schema_names = [self._get_destination_schema_name(bd, use_bucket_alias, drop_stage_prefix, schema_mapping) for
                        bd in
                        bucket_details]
        seen = set()
        duplicates = []
        for s in schema_names:
            if s in seen:
                duplicates.append(s)
            seen.add(s)
        if duplicates:
            raise UserException(f'Current setting would lead to a duplicate schema names. '
                                f'Try to turn off the "drop stage prefix" or "Use bucket alias" options. '
                                f'Duplicate schemas:{duplicates} ')

    def create_views_from_bucket(self, bucket_id: str, destination_database: str,
                                 schema_name_case: str = 'original',
                                 view_name_case: str = 'original',
                                 column_name_case: str = 'original',
                                 use_bucket_alias: bool = True,
                                 drop_stage_prefix: bool = False,
                                 use_table_alias: bool = False,
                                 session_id: str = '',
                                 skip_shared_tables: bool = True,
                                 schema_mapping: List[SchemaMapping] = None):
        """
        Creates views with datatypes for all tables in the bucket.
        Args:
            bucket_id: Source KBC Storage bucket ID
            destination_database: Destination DB name in Snowflake.
            column_name_case: str: Modifies the case of the COLUMN name identifier.
                                    'original' to keep the case unchanged, 'upper'/'lower' to force the case
                                    of the identifier
            view_name_case: str: Modifies the case of the VIEW name identifier.
                                    'original' to keep the case unchanged, 'upper'/'lower' to force the case
                                    of the identifier
            schema_name_case: str: Modifies the case of the SCHEMA name identifier.
                                    'original' to keep the case unchanged, 'upper'/'lower' to force the case
                                    of the identifier
            session_id: Optional ID to use in session ID
            use_bucket_alias: bool: Use bucket alias instead of the Bucket ID for view name
            use_table_alias: bool: Use user defined table alias instead of the table ID for view name
            skip_shared_tables: skip shared tables from processing
            drop_stage_prefix: drop bucket stage prefix from schema name
            schema_mapping: List[SchemaMapping]: List of bucket/schema mappings.
                                                 If specified, other schema related parameters are ignored.

        Returns:

        """
        tables_resp = self._sapi_client.buckets.list_tables(bucket_id, include=['columns', 'columnMetadata'])

        session_parameters = None
        if session_id:
            session_parameters = {
                'QUERY_TAG': f'{{"runId":"{session_id}"}}'
            }
        with self._snowflake_client.connect(self.__snowflake_credentials, session_parameters=session_parameters):
            if self.__snowflake_credentials.role:
                self._snowflake_client.use_role(self.__snowflake_credentials.role)
            bucket_detail = self._sapi_client.buckets.detail(bucket_id)

            # skip shared buckets if requested
            if bucket_detail.get('sourceBucket') and skip_shared_tables:
                return

            destination_schema = self._get_destination_schema_name(bucket_detail, use_bucket_alias, drop_stage_prefix,
                                                                   schema_mapping)

            self._snowflake_client.create_if_not_exist_schema(destination_database,
                                                              self._convert_case(destination_schema, schema_name_case))
            for table in tables_resp:
                # update tale def according to alias
                source_table = self._handle_alias(table)
                # skip shared tables if requested
                if source_table.get('is_shared') and skip_shared_tables:
                    continue

                table_columns = self._get_table_columns(table)

                self._create_view_in_external_db(bucket_detail, destination_schema, table, source_table, table_columns,
                                                 destination_database,
                                                 schema_name_case, view_name_case, column_name_case,
                                                 use_table_alias)

    def _handle_alias(self, table: dict):
        """
        Retrieves source table of alias if present and changes the ROLE to appropriate source project
        Args:
            table:

        Returns:

        """
        source_table = {}
        if table['isAlias']:
            source_table = table['sourceTable']
            source_table['bucket_id'] = '.'.join(source_table['id'].split('.')[0:2])
            source_table['table_name'] = '.'.join(source_table['id'].split('.')[-1:])
            # FIX we want to use source table metadata, there are none on alias
            table['columnMetadata'] = source_table['columnMetadata']

        if table['isAlias'] and source_table['project']['id'] != int(self._project_id):
            # it is shared bucket, change role to source project
            source_table['is_shared'] = True

        return source_table

    def _get_destination_schema_name(self, bucket_detail: dict, use_alias=True, drop_stage_prefix: bool = False,
                                     schema_mapping: List[SchemaMapping] = None):
        """
        Generates destination schema name based on parameters
        Args:
            bucket_detail:
            use_alias:
            drop_stage_prefix:
            schema_mapping: List[SchemaMapping]: If specified, other parameters are ignored.

        Returns:

        """
        # build name from mapping if specified
        if schema_mapping and any([mapping := m for m in schema_mapping if m.bucket_id == bucket_detail['id']]):
            schema_name = mapping.destination_schema
        else:
            if use_alias:
                schema_name = f'{bucket_detail["stage"]}_{bucket_detail["displayName"]}'
            else:
                schema_name = bucket_detail['id'].replace('.', '_')
            if drop_stage_prefix:
                schema_name = schema_name[len(bucket_detail['stage']) + 1:]

        return schema_name

    def _create_view_in_external_db(self, bucket_detail: dict, destination_schema_name: str, table: dict,
                                    source_table: dict,
                                    table_columns: Dict[str, StorageDataType],
                                    destination_database: str,
                                    schema_name_case: str = 'original',
                                    view_name_case: str = 'original',
                                    column_name_case: str = 'original',
                                    use_table_alias: bool = False):
        """

        Args:
            bucket_detail: detail of the source bucket
            destination_schema_name: name of the destination schema
            table: detail of the storage table
            source_table: (dict) if not empty defines source of the alias table
            table_columns:
            destination_database:
            view_name_case:
            schema_name_case:
            column_name_case:
            use_table_alias: Use user defined table name

        Returns:

        """
        column_definitions = self._build_column_definitions(table_columns, column_name_case,
                                                            table.get('isTyped', False))
        bucket_id = bucket_detail['id']
        # use display or default name
        destination_table_name = table['displayName'] if use_table_alias else table['name']
        destination_table = f'"{destination_database}"' \
                            f'."{self._convert_case(destination_schema_name, schema_name_case)}"' \
                            f'."{self._convert_case(destination_table_name, view_name_case)}"'

        source_table_id = f'"{bucket_id}"."{table["name"]}"'
        source_project_id = self._project_id
        if source_table:
            source_table["id"].split('.')
            source_table_id = f'"{source_table["bucket_id"]}"."{source_table["table_name"]}"'
            source_project_id = source_table['project']['id']

        source_table_identifier = f'"{self.get_project_db_name(source_project_id)}".{source_table_id}'
        columns_definition = f'{column_definitions}, "_timestamp"::TIMESTAMP AS "_timestamp"'

        self._snowflake_client.create_or_replace_view(destination_table, columns_definition, source_table_identifier,
                                                      True)

    def get_project_db_name(self, project_id):
        return f'{self._system_name_prefix}{project_id}'



================================================
FILE: src/dbstorage/__init__.py
================================================



================================================
FILE: src/dbstorage/snowflake_client.py
================================================
import functools
import logging
from contextlib import contextmanager
from dataclasses import dataclass, asdict

import snowflake
from snowflake.connector import SnowflakeConnection
from snowflake.connector.cursor import SnowflakeCursor


@dataclass
class Credentials:
    account: str
    user: str
    password: str
    warehouse: str
    database: str = None
    schema: str = None
    role: str = None


class NotConnectedError(Exception):
    pass


def _check_connection(func):
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        if not self._connection:
            raise NotConnectedError()
        return func(self, *args, **kwargs)

    return wrapper


def validate_sql_placeholders(func):
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        for a in args:
            if isinstance(a, str) and ';' in a:
                raise ValueError(f'Invalid SQL parameter {a}')
        return func(self, *args, **kwargs)

    return wrapper


class SnowflakeClient:
    def __init__(self):
        self.__connection = None
        self.__cursor = None

    @contextmanager
    def connect(self, credentials_obj: Credentials, session_parameters=None):
        try:
            if not session_parameters:
                session_parameters = {}
            cfg = asdict(credentials_obj)
            cfg['session_parameters'] = session_parameters
            self.__connection = snowflake.connector.connect(**cfg)
            yield self
        finally:
            self.close()

    @_check_connection
    def execute_query(self, query):
        logging.debug(f"{query}")
        self._cursor.execute(query).fetchall()

    @validate_sql_placeholders
    def create_or_replace_view(self, name, columns_definition: str, source_table: str, copy_grants: bool = False):
        copy_grants_query = ''
        if copy_grants:
            copy_grants_query = ' COPY GRANTS'
        statement = f"CREATE OR REPLACE VIEW {name}{copy_grants_query} " \
                    f"AS SELECT {columns_definition} FROM {source_table}"
        logging.info(f"Creating view {name}. (Query in detail)", extra={"full_message": statement})
        self.execute_query(statement)

    @validate_sql_placeholders
    def create_or_replace_schema(self, database: str, schema_name: str, copy_grants: bool = False):
        copy_grants_query = ''
        if copy_grants:
            copy_grants_query = ' COPY GRANTS'
        statement = f'CREATE OR REPLACE SCHEMA "{database}"."{schema_name}"{copy_grants_query};'
        self.execute_query(statement)

    @validate_sql_placeholders
    def create_if_not_exist_schema(self, database: str, schema_name: str, copy_grants: bool = False):
        copy_grants_query = ''
        if copy_grants:
            copy_grants_query = ' COPY GRANTS'
        statement = f'CREATE SCHEMA IF NOT EXISTS "{database}"."{schema_name}"{copy_grants_query};'
        self.execute_query(statement)

    @validate_sql_placeholders
    @_check_connection
    def use_role(self, role: str):
        self.execute_query(f'USE ROLE {role};')

    @property
    def _cursor(self) -> SnowflakeCursor:
        if not self.__cursor:
            self.__cursor = self._connection.cursor(snowflake.connector.DictCursor)
        return self.__cursor

    @property
    def _connection(self) -> SnowflakeConnection:
        return self.__connection

    def close(self):
        if self.__cursor:
            self.__cursor.close()
            self.__cursor = None
        if self._connection:
            self._connection.close()

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


