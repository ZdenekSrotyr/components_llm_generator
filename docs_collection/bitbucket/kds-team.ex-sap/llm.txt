Directory structure:
└── kds_consulting_team-kds-team.ex-sap/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   └── loggerConfiguration.json
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   └── sap_client/
    │       ├── __init__.py
    │       ├── client.py
    │       ├── data_source_model.py
    │       └── sap_snowflake_mapping.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
FILE: README.md
================================================
SAP Extractor
=============

Description

**Table of contents:**

[TOC]

Functionality notes
===================

Prerequisites
=============

Get the API token, register application, etc.

Features
========

| **Feature**             | **Note**                                      |
|-------------------------|-----------------------------------------------|
| Generic UI form         | Dynamic UI form                               |
| Row Based configuration | Allows structuring the configuration in rows. |
| oAuth                   | oAuth authentication enabled                  |
| Incremental loading     | Allows fetching data in new increments.       |
| Backfill mode           | Support for seamless backfill setup.          |
| Date range filter       | Specify date range.                           |

Supported endpoints
===================

If you need more endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/)

Configuration
=============

Param 1
-------

Param 2
-------

Output
======

List of tables, foreign keys, schema.

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone https://bitbucket.org/kds_consulting_team/kds-team.ex-sap/src/master/ kds-team.ex-sap
cd kds-team.ex-sap
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)



================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.11-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential git

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
keboola.component==1.4.3
keboola.utils
git+https://github.com/keboola/python-http-client.git@feature/async
keboola.csvwriter
mock
freezegun
dataconf
aiolimiter # not included yet in async client
certifi==2024.7.4


================================================
FILE: component_config/component_long_description.md
================================================
SAP Extractor


================================================
FILE: component_config/component_short_description.md
================================================
SAP Extractor


================================================
FILE: component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "SAP Extractor configuration",
  "properties": {
    "source": {
      "type": "object",
      "title": "Source settings",
      "propertyOrder": 1,
      "properties": {
        "resource_alias": {
          "type": "string",
          "required": true,
          "title": "List Resources",
          "description": "Use this to list tables available to fetch.",
          "options": {
            "async": {
              "label": "List Resources",
              "action": "listResources"
            }
          },
          "items": {
            "enum": [],
            "type": "string"
          },
          "enum": [],
          "propertyOrder": 1
        },
        "limit": {
          "type": "integer",
          "title": "Limit",
          "default": 10000,
          "description": "The limit for paging.",
          "propertyOrder": 2
        },
        "batch_size": {
          "type": "integer",
          "title": "Maximum concurrent requests",
          "default": 2,
          "description": "The maximum number of requests to process at a time.",
          "propertyOrder": 3
        },
        "sync_type": {
          "type": "string",
          "required": true,
          "title": "Sync method",
          "default": "full_sync",
          "enum": [
            "full_sync",
            "incremental_sync"
          ],
          "options": {
            "enum_titles": [
              "Full sync",
              "Incremental sync"
            ]
          },
          "uniqueItems": true,
          "description": "Full sync will fetch all data from the source table. Incremental sync will fetch only data that has changed since the last run.",
          "propertyOrder": 4
        },
        "paging_method": {
          "type": "string",
          "required": true,
          "title": "Paging method",
          "default": "offset",
          "enum": [
            "offset",
            "key"
          ],
          "options": {
            "enum_titles": [
              "Offset",
              "Key"
            ]
          },
          "uniqueItems": true,
          "description": "DataSource pagination method",
          "propertyOrder": 5
        }
      }
    },
    "destination": {
      "title": "Destination",
      "type": "object",
      "propertyOrder": 2,
      "required": [
        "output_table_name",
        "load_type"
      ],
      "properties": {
        "output_table_name": {
          "type": "string",
          "title": "Storage Table Name (Optional)",
          "description": "Name of the table stored in Storage. Defaults to resource name.",
          "propertyOrder": 10
        },
        "load_type": {
          "type": "string",
          "enum": [
            "full_load",
            "incremental_load"
          ],
          "options": {
            "enum_titles": [
              "Full Load",
              "Incremental Load"
            ]
          },
          "default": "full_load",
          "format": "checkbox",
          "title": "Load Type",
          "description": "If Full load is used, the destination table will be overwritten every run. If incremental load is used, data will be upserted into the destination table. Tables with a primary key will have rows updated, tables without a primary key will have rows appended.",
          "propertyOrder": 20
        }
      }
    }
  }
}


================================================
FILE: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "SAP Extractor configuration",
  "properties": {
    "authentication": {
      "type": "object",
      "title": "Authentication",
      "required": [
        "server_url",
        "username",
        "#password"
      ],
      "propertyOrder": 1,
      "properties": {
        "server_url": {
          "type": "string",
          "title": "Server URL",
          "description": "For example: https://sapserver.provider.cz:45300/sap/bc/http/sap/YACTUM_DP",
          "propertyOrder": 1
        },
        "username": {
          "type": "string",
          "title": "Username",
          "propertyOrder": 2
        },
        "#password": {
          "type": "string",
          "format": "password",
          "title": "Password",
          "propertyOrder": 3
        },
        "verify": {
          "type": "boolean",
          "title": "Verify SSL Certificate",
          "description": "Enables or disables SSL certificate verification",
          "propertyOrder": 4
        }
      }
    }
  }
}


================================================
FILE: component_config/configuration_description.md
================================================
Configuration description.


================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
FILE: src/component.py
================================================
import asyncio
import json
import logging
from typing import Union
import os
import shutil

from keboola.component.base import ComponentBase, sync_action
from keboola.csvwriter import ElasticDictWriter
from keboola.component.exceptions import UserException
from keboola.component.sync_actions import SelectElement
from keboola.component.dao import TableDefinition

from sap_client.client import SAPClient, SapClientException
from sap_client.sap_snowflake_mapping import SAP_TO_SNOWFLAKE_MAP
from configuration import Configuration, SyncActionConfiguration


class Component(ComponentBase):

    def __init__(self):
        super().__init__()
        self._configuration: Configuration
        self.state = None

    def run(self):
        """
        Main execution code
        """
        self._init_configuration()
        self.state = self.get_state_file()

        server_url = self._configuration.authentication.server_url
        resource_alias = self._configuration.source.resource_alias
        limit = self._configuration.source.limit
        batch_size = self._configuration.source.batch_size
        username = self._configuration.authentication.username
        password = self._configuration.authentication.pswd_password
        paging_method = self._configuration.source.paging_method
        sync_type = self._configuration.source.sync_type
        output_table_name = self._configuration.destination.output_table_name
        load_type = self._configuration.destination.load_type
        debug = self._configuration.debug
        verify = self._configuration.authentication.verify

        temp_dir = os.path.join(self.data_folder_path, "temp")
        os.makedirs(temp_dir, exist_ok=True)

        statefile_columns = self.state.get(resource_alias, {}).get("columns", [])

        previous_delta_max = self._init_delta(sync_type, resource_alias)

        client = SAPClient(server_url=server_url,
                           username=username,
                           password=password,
                           destination=temp_dir,
                           limit=limit,
                           batch_size=batch_size,
                           delta=previous_delta_max,
                           verify=verify,
                           debug=debug)

        output_table_name = output_table_name or resource_alias
        incremental = load_type != "full_load"

        out_table = self.create_out_table_definition(name=output_table_name, incremental=incremental)

        try:
            asyncio.run(
                client.fetch(resource_alias, paging_method)
            )
        except SapClientException as e:
            raise UserException(f"An error occurred while fetching resource: {e}")

        files = os.listdir(temp_dir)

        if files:
            with ElasticDictWriter(out_table.full_path, statefile_columns) as wr:
                wr.writeheader()
                for json_file in files:
                    json_file_path = os.path.join(temp_dir, json_file)
                    with open(json_file_path, 'r') as file:
                        content = json.load(file)
                        for row in content:
                            wr.writerow(self._ensure_proper_column_names(row))

            out_table = self.add_column_metadata(client, out_table)
            self.write_manifest(out_table)

            self.state.setdefault(resource_alias, {})["columns"] = wr.fieldnames

            # Clean temp folder (for local runs)
            shutil.rmtree(temp_dir)
        else:
            logging.warning(f"No data were fetched for resource {resource_alias}.")

        max_delta_pointer = client.max_delta_pointer
        if max_delta_pointer:
            self.state[resource_alias]["delta_max"] = max_delta_pointer
            logging.info(f"Delta pointer for resource {resource_alias} was set to {max_delta_pointer}.")

        self.write_state_file(self.state)

    def _init_delta(self, sync_mode: str, resource_alias: str) -> Union[bool, int, str]:
        """This method initializes delta sync by setting delta pointer to the last value from state file."""
        previous_delta_max = None
        if sync_mode == "incremental_sync":
            previous_delta_max = self.state.get(resource_alias, {}).get("delta_max", False)

            if not previous_delta_max:
                logging.warning("Delta sync is enabled, but no previous delta pointer was found in state file. "
                                "Full sync will be performed.")

        return previous_delta_max

    @staticmethod
    def add_column_metadata(client: SAPClient, out_table: TableDefinition):
        # TODO: How does adding metadata act when not all columns have metadata set?
        pks = []
        for column in client.metadata:
            col_md = client.metadata.get(column)
            datatype = SAP_TO_SNOWFLAKE_MAP[col_md.get("TYPE")]
            if datatype in ["STRING", "INTEGER", "NUMERIC"]:
                length = str(col_md.get("LENGTH"))
            else:
                length = None
            out_table.table_metadata.add_column_data_type(column=column,
                                                          data_type=datatype,
                                                          length=length)

            if col_md.get("KEY"):
                pks.append(column)

        if pks:
            out_table.primary_key = pks
            logging.info(f"Primary key set to {pks}.")

        return out_table

    def _init_configuration(self, sync_act: bool = False) -> None:
        if not sync_act:
            self._configuration = Configuration.load_from_dict(self.configuration.parameters)
            self.validate_configuration_parameters(Configuration.get_dataclass_required_parameters())
        else:
            self._configuration = SyncActionConfiguration.load_from_dict(self.configuration.parameters)
            self.validate_configuration_parameters(SyncActionConfiguration.get_dataclass_required_parameters())

    @staticmethod
    def _ensure_proper_column_names(original_dict: dict):
        """
        Transforms dictionary keys by removing a leading '/' character and replacing
        other '/' characters with '_'.

        Parameters:
        - original_dict: The original dictionary with keys to transform.

        Returns:
        dict: A new dictionary with transformed keys.
        """
        transformed_dict = {}
        for key, value in original_dict.items():
            new_key = key.lstrip('/').replace('/', '_')
            transformed_dict[new_key] = value
        return transformed_dict

    @sync_action("listResources")
    def list_resources(self) -> list[SelectElement]:
        self._init_configuration(sync_act=True)

        server_url = self._configuration.authentication.server_url
        username = self._configuration.authentication.username
        password = self._configuration.authentication.pswd_password
        verify = self._configuration.authentication.verify

        client = SAPClient(server_url, username, password, "", verify=verify)

        try:
            sources = asyncio.run(client.list_sources())
        except SapClientException as e:
            raise UserException(f"An error occurred while fetching list of resources: {e}")

        return [
            SelectElement(
                label=f"name: {s['SOURCE_TEXT']}, type: {s['SOURCE_TYPE']}",
                value=s['SOURCE_ALIAS']
            )
            for s in sources
        ]


"""
        Main entrypoint
"""

if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
FILE: src/configuration.py
================================================
import dataclasses
import json
from dataclasses import dataclass
from typing import List

import dataconf


class ConfigurationBase:
    @staticmethod
    def _convert_private_value(value: str):
        return value.replace('"#', '"pswd_')

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith("pswd_"):
            return value.replace("pswd_", "#", 1)
        else:
            return value

    @classmethod
    def load_from_dict(cls, configuration: dict):
        """
        Initialize the configuration dataclass object from dictionary.
        Args:
            configuration: Dictionary loaded from json configuration.

        Returns:

        """
        json_conf = json.dumps(configuration)
        json_conf = ConfigurationBase._convert_private_value(json_conf)
        return dataconf.loads(json_conf, cls, ignore_unexpected=True)

    @classmethod
    def get_dataclass_required_parameters(cls) -> List[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: List[str]

        """
        return [cls._convert_private_value_inv(f.name)
                for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING
                and f.default_factory == dataclasses.MISSING]


@dataclass
class Authentication(ConfigurationBase):
    server_url: str
    username: str
    pswd_password: str
    verify: bool = False


@dataclass
class Source(ConfigurationBase):
    resource_alias: str
    sync_type: str
    paging_method: str
    limit: int = 10_000
    batch_size: int = 2


@dataclass
class Destination(ConfigurationBase):
    output_table_name: str = ""
    load_type: str = "full_load"


@dataclass
class Configuration(ConfigurationBase):
    authentication: Authentication
    source: Source
    destination: Destination
    debug: bool = False


@dataclass
class SyncActionConfiguration(ConfigurationBase):
    authentication: Authentication



================================================
FILE: src/sap_client/__init__.py
================================================



================================================
FILE: src/sap_client/client.py
================================================
import asyncio
from functools import wraps
import json
import logging
from typing import Union
import os
import uuid
import httpx

from keboola.http_client import AsyncHttpClient

from .data_source_model import DataSource


class SapClientException(Exception):
    pass


def set_timeout(timeout):
    def decorator(func):
        @wraps(func)
        async def wrapper(self, *args, **kwargs):
            original_timeout = self.client.timeout
            self.client.timeout = timeout
            try:
                result = await func(self, *args, **kwargs)
            finally:
                self.client.timeout = original_timeout
            return result

        return wrapper

    return decorator


DEFAULT_LIMIT = 10_000
DEFAULT_BATCH_SIZE = 2
DEFAULT_TIMEOUT = 1800


class SAPClient(AsyncHttpClient):
    DATA_SOURCES_ENDPOINT = "DATA_SOURCES"
    METADATA_ENDPOINT = "$metadata"

    def __init__(self, server_url: str, username: str, password: str, destination: str, limit: int = DEFAULT_LIMIT,
                 delta: Union[bool, int] = False, batch_size: int = DEFAULT_BATCH_SIZE, verify: bool = True,
                 debug=False):
        """Implements SAP client for fetching data from SAP Data Sources.
        Args:
            server_url: SAP server url.
            username: Username for authentication.
            password: Password for authentication.
            destination: Destination folder for storing fetched data.
            limit: Limit for one request.
            delta: Delta pointer.
            batch_size: Number of parallel requests.
            verify: Verify SSL certificate.
        """
        auth = (username, password)
        default_headers = {'Accept-Encoding': 'gzip, deflate'}

        super().__init__(server_url, auth=auth, default_headers=default_headers, retries=3,
                         retry_status_codes=[503, 500], verify_ssl=verify, timeout=DEFAULT_TIMEOUT)

        self.destination = destination
        self.limit = limit
        self.delta = delta
        self.delta_values = []
        self.verify = verify
        self.batch_size = batch_size
        self.stop = False
        self.metadata = {}
        self.debug = debug

        if self.delta:
            logging.info(f"Delta sync is enabled, delta pointer: {self.delta}.")
            self.delta_values.append(self.delta)

    @set_timeout(5)
    async def list_sources(self):
        try:
            r = await self._get(self.DATA_SOURCES_ENDPOINT)
        except (httpx.ConnectError, httpx.ConnectTimeout):
            raise SapClientException("Unable to list sources. Check the connection to the server.")

        sources = r.get("DATA_SOURCES", [])

        if sources:
            sources = [
                {'SOURCE_ALIAS': source['SOURCE_ALIAS'],
                 'SOURCE_TEXT': source['SOURCE_TEXT'],
                 'PAGING': source['PAGING'],
                 'SOURCE_TYPE': source['SOURCE_TYPE'],
                 'DELTA': source['DELTA']
                 } for source in sources]

        return sources

    async def fetch(self, resource_alias: str, paging_method: str = "offset"):
        await self.validate_source(resource_alias)

        resource_info = await self._get_resource_metadata(resource_alias)
        data_source = DataSource.from_dict(resource_info)
        self.metadata = data_source.metadata

        await self.check_delta_support(resource_alias, data_source)

        if self.delta:
            await self.fetch_and_store_full(resource_alias)
        elif data_source.PAGING:
            await self.fetch_with_paging(resource_alias, paging_method)
        else:
            await self.fetch_and_store_full(resource_alias)
            logging.info(f"Resource {resource_alias} does not support paging. "
                         f"The component will try to fetch the data in one request.")

    async def validate_source(self, resource_alias: str):
        sources = await self.list_sources()

        is_source_present = any(s['SOURCE_ALIAS'] == resource_alias for s in sources)
        if not is_source_present:
            raise SapClientException(f"{resource_alias} resource is not available.")
        logging.info(f"{resource_alias} resource will be fetched.")

    async def check_delta_support(self, resource_alias: str, data_source: DataSource):
        if self.delta and not data_source.DELTA:
            raise SapClientException(f"Resource {resource_alias} does not support delta function.")

    async def fetch_and_store_full(self, resource_alias: str):
        page = await self._fetch_full(resource_alias)
        await self._store_results(page, resource_alias)

    async def fetch_with_paging(self, resource_alias: str, paging_method: str):
        logging.info(f"Resource {resource_alias} supports paging.")

        if paging_method == "offset":
            async for page in self._fetch_paging_offset(resource_alias):
                await self._store_results(page, resource_alias)
        elif paging_method == "key":
            async for page in self._fetch_paging_key(resource_alias):
                await self._store_results(page, resource_alias)
        else:
            raise SapClientException(f"Unsupported paging method: {paging_method}")

    async def _fetch_paging_offset(self, resource_alias: str, page: int = 0):
        params = {
            "page": page if page else 1,
            "limit": self.limit
        }
        tasks = []

        while not self.stop:
            for _ in range(self.batch_size):
                endpoint = self._join_url_parts(self.DATA_SOURCES_ENDPOINT, resource_alias)
                tasks.append(self._get_and_process(endpoint, params.copy()))
                params["page"] += 1

            # Wait for all tasks to complete and iterate over results.
            results = await asyncio.gather(*tasks)
            for result in results:
                yield result

            tasks.clear()

    async def _fetch_paging_key(self, resource_alias: str):
        params = {
            "limit": self.limit
        }

        # get blocks
        endpoint = self._join_url_parts(self.DATA_SOURCES_ENDPOINT, resource_alias, "$key_blocks")
        r = await self._get(endpoint, params=params)
        blocks = r.get("DATA_SOURCE", {}).get("KEY_BLOCKS")
        if not blocks:
            raise SapClientException("Unable to obtain key blocks.")  # TODO: fallback to offset paging

        tasks = []

        for block in blocks:
            params = {
                "key_min": block.get("KEY_MIN"),
                "key_max": block.get("KEY_MAX")
            }
            endpoint = self._join_url_parts(self.DATA_SOURCES_ENDPOINT, resource_alias)
            tasks.append(self._get_and_process(endpoint, params.copy()))

            if len(tasks) == self.batch_size:
                results = await asyncio.gather(*tasks)
                for result in results:
                    yield result
                tasks.clear()

        # Process any remaining tasks
        if tasks:
            results = await asyncio.gather(*tasks)
            for result in results:
                yield result

    async def _fetch_full(self, resource_alias: str):
        """Fetches all data from resource_alias. Also takes into account delta pointer if set. In such case only fetches
        data that were changed since last fetch."""

        endpoint = self._get_data_sources_endpoint(resource_alias)
        params = self._get_request_params({})

        response = await self._get(endpoint, params=params)
        entities = response.get("DATA_SOURCE", {}).get("ENTITIES", [])

        if entities:
            entity = entities[0]  # ONLY ONE ENTITY FOR ONE DATA SOURCE IS SUPPORTED

            columns_specification = entity.get("COLUMNS")
            columns = self._get_columns(columns_specification)

            self._set_delta_pointer(entity)

            rows = entity.get("ROWS")
            if rows:
                return self._process_result(rows, columns)

        return []

    def _get_data_sources_endpoint(self, resource_alias: str):
        if self.delta:
            return self._join_url_parts(self.DATA_SOURCES_ENDPOINT, resource_alias, "$delta")
        else:
            return self._join_url_parts(self.DATA_SOURCES_ENDPOINT, resource_alias)

    def _get_request_params(self, params: dict) -> dict:
        if self.delta:
            params["delta_pointer"] = self.delta

        return params

    async def _store_results(self, results: list[dict], name: str) -> None:
        if not self.destination:
            logging.warning("Destination not set, results will not be stored.")
            return

        if results:
            output_filename = os.path.join(self.destination, f"{name}_{uuid.uuid4()}.json")
            with open(output_filename, "w", encoding="utf-8") as f:
                json.dump(results, f, ensure_ascii=False, indent=4)

    async def _get_and_process(self, endpoint, params):
        """Helper method for async processing used with resources that support paging."""
        r = await self._get(endpoint, params=params)
        data_source = r.get("DATA_SOURCE", {})
        entities = data_source.get("ENTITIES", [])

        if entities:
            entity = entities[0]  # ONLY ONE ENTITY FOR ONE DATA SOURCE IS SUPPORTED
            columns_specification = entity.get("COLUMNS")

            self._set_delta_pointer(entity)

            columns = self._get_columns(columns_specification)
            rows = entity.get("ROWS")
            if rows:
                return self._process_result(rows, columns)
            else:
                self.stop = True

        return None

    def _set_delta_pointer(self, entity: dict) -> None:
        if delta_pointer := entity.get("DELTA_POINTER"):
            logging.debug(f"Delta pointer received: {delta_pointer}")
            try:
                delta_pointer = int(delta_pointer)
            except ValueError:
                try:
                    delta_pointer = float(delta_pointer)
                except ValueError:
                    raise SapClientException(f"Only integer and float {delta_pointer} values are supported. "
                                             f"Delta pointer received: {delta_pointer}")
            self.delta_values.append(delta_pointer)
        else:
            logging.debug("No delta pointer received.")

    async def _get_resource_metadata(self, resource) -> dict:
        endpoint = f"{self.DATA_SOURCES_ENDPOINT}/{resource}/{self.METADATA_ENDPOINT}"
        r = await self._get(endpoint)
        return r.get("DATA_SOURCE")

    @staticmethod
    def _process_result(rows: list[dict], columns: list):
        return [dict(zip(columns, row)) for row in rows]

    @staticmethod
    def _get_columns(columns_specification: list):
        return [item['COLUMN_ALIAS'] for item in sorted(columns_specification, key=lambda x: x['POSITION'])]

    async def _get(self, endpoint: str, params=None) -> dict:
        if params is None:
            params = {}

        if self.debug:
            # workaround for debug logging not working properly in AsyncClient
            logging.debug(f"Fetching data from {endpoint} with params: {params}")

        try:
            return await self.get(endpoint, params=params)
        except httpx.ReadTimeout:
            raise SapClientException(f"Maximum timeout of {DEFAULT_TIMEOUT} seconds reached while fetching data"
                                     f" from {endpoint}.")
        except httpx.ConnectError as e:
            raise SapClientException(f"Cannot fetch data from {endpoint}, exception: {e}")

    @staticmethod
    def _join_url_parts(*parts) -> str:
        return "/".join(str(part).strip("/") for part in parts)

    @property
    def max_delta_pointer(self) -> Union[int, str, None]:
        logging.debug(f"Client Delta values: {self.delta_values}")
        return self._max_timestamp_or_id(self.delta_values)

    @staticmethod
    def _max_timestamp_or_id(values: list):
        if not values:
            return None
        # sometimes can come different length of values, so we need to normalize them
        max_length = max(len(str(value)) for value in values)
        normalized_data = [str(value).ljust(max_length, '0') for value in values]
        max_normalized = max(normalized_data)
        max_value = values[normalized_data.index(max_normalized)]
        return max_value



================================================
FILE: src/sap_client/data_source_model.py
================================================
from dataclasses import dataclass
from typing import List


@dataclass
class Column:
    POSITION: int
    COLUMN_ALIAS: str
    COLUMN_TEXT: str
    TYPE: str
    LENGTH: int
    DECIMALS: int
    KEY: bool


@dataclass
class Entity:
    ENTITY_ALIAS: str
    ENTITY_TEXT: str
    ENTITY_TYPE: str
    DELTA_POINTER: str
    COLUMNS: List[Column]


@dataclass
class DataSource:
    SOURCE_ALIAS: str
    SOURCE_TEXT: str
    SOURCE_TYPE: str
    PAGING: bool
    DELTA: bool
    ENTITIES: List[Entity]

    @classmethod
    def from_dict(cls, data: dict):
        data_uppercase = {key.upper(): value for key, value in data.items()}
        return cls(**data_uppercase)

    @staticmethod
    def _get_ordered_columns(columns_specification: Entity):
        columns = columns_specification.get('COLUMNS', [])
        sorted_columns = sorted(columns, key=lambda x: x['POSITION'])
        return {col['COLUMN_ALIAS']: col for col in sorted_columns}

    @property
    def metadata(self):
        entity: Entity = self.ENTITIES[0]
        return self._get_ordered_columns(entity)



================================================
FILE: src/sap_client/sap_snowflake_mapping.py
================================================
from keboola.component.dao import SupportedDataTypes

SAP_TO_SNOWFLAKE_MAP = {
    'CHAR': SupportedDataTypes.STRING.value,
    'NUM': SupportedDataTypes.NUMERIC.value,
    'STRING': SupportedDataTypes.STRING.value,
    'BOOLEAN': SupportedDataTypes.BOOLEAN.value,
    'INT': SupportedDataTypes.INTEGER.value,
    'INT8': SupportedDataTypes.INTEGER.value,
    'PACKED': SupportedDataTypes.NUMERIC.value,  # Guess, please verify
    'DECFLOAT16': SupportedDataTypes.FLOAT.value,  # Guess, please verify
    'DECFLOAT34': SupportedDataTypes.FLOAT.value,  # Guess, please verify
    'FLOAT': SupportedDataTypes.FLOAT.value,
    'DATE': SupportedDataTypes.DATE.value,
    'TIME': SupportedDataTypes.TIMESTAMP.value,  # Guess, assuming TIME is represented as TIMESTAMP
    'UTCLONG': SupportedDataTypes.TIMESTAMP.value,  # Guess, please verify
    'HEX': SupportedDataTypes.STRING.value,  # Assuming hexadecimal values are stored as strings
    'XSTRING': SupportedDataTypes.STRING.value  # Guess, please verify
}



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


