Directory structure:
└── kds_consulting_team-kds-team.wr-lytics-v2/
    ├── flake8.cfg
    ├── deploy.sh
    ├── docker-compose.yml
    ├── change_log.md
    ├── src/
    │   └── component.py
    ├── bitbucket-pipelines.yml
    ├── tests/
    │   ├── test_component.py
    │   ├── data_test/
    │   │   ├── data1/
    │   │   │   ├── config.json
    │   │   │   ├── in/
    │   │   │   │   ├── state.json
    │   │   │   │   ├── tables/
    │   │   │   │   │   ├── test.csv
    │   │   │   │   │   └── test.csv.manifest
    │   │   │   │   └── files/
    │   │   │   │       ├── query.lql
    │   │   │   │       └── order1.xml
    │   │   │   └── out/
    │   │   │       ├── tables/
    │   │   │       │   └── test.csv
    │   │   │       └── files/
    │   │   │           └── order1.xml
    │   │   ├── data_invalid_dest_col/
    │   │   │   ├── config.json
    │   │   │   ├── in/
    │   │   │   │   ├── state.json
    │   │   │   │   ├── tables/
    │   │   │   │   │   ├── test.csv
    │   │   │   │   │   └── test.csv.manifest
    │   │   │   │   └── files/
    │   │   │   │       ├── query.lql
    │   │   │   │       └── order1.xml
    │   │   │   └── out/
    │   │   │       ├── tables/
    │   │   │       │   └── test.csv
    │   │   │       └── files/
    │   │   │           └── order1.xml
    │   │   └── data_invalid_stream/
    │   │       ├── config.json
    │   │       ├── in/
    │   │       │   ├── state.json
    │   │       │   ├── tables/
    │   │       │   │   ├── test.csv
    │   │       │   │   └── test.csv.manifest
    │   │       │   └── files/
    │   │       │       ├── query.lql
    │   │       │       └── order1.xml
    │   │       └── out/
    │   │           ├── tables/
    │   │           │   └── test.csv
    │   │           └── files/
    │   │               └── order1.xml
    │   └── __init__.py
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── configuration_description.md
    │   ├── component_short_description.md
    │   ├── stack_parameters.json
    │   ├── configSchema.json
    │   ├── configRowSchema.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── tables/
    │       │   │   ├── test.csv
    │       │   │   └── test.csv.manifest
    │       │   └── files/
    │       │       └── order1.xml
    │       └── out/
    │           ├── tables/
    │           │   └── test.csv
    │           └── files/
    │               └── order1.xml
    ├── scripts/
    │   ├── update_dev_portal_properties.sh
    │   ├── run_kbc_tests.ps1
    │   ├── run.bat
    │   ├── build_n_run.ps1
    │   └── build_n_test.sh
    ├── requirements.txt
    ├── docs/
    │   └── imgs/
    ├── Dockerfile
    ├── LICENSE.md
    └── README.md

================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "asigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "asigning travis tag"
	export TAG="$TRAVIS_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog


================================================
File: /src/component.py
================================================
'''
Template Component main class.

'''
import csv
import functools
import glob
import gzip
import json
import logging
import os
import re
import shutil
import sys
from enum import Enum
from pathlib import Path
from typing import List

import requests
from kbc.env_handler import KBCEnvHandler
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

LYTICS_API_URL = 'https://api.lytics.io'
# configuration variables
KEY_USER_PARS = 'user_parameters'

KEY_PATH = 'path'
KEY_MODE = 'mode'
KEY_METHOD = 'method'

# additional request params
KEY_HEADERS = 'headers'
KEY_ADDITIONAL_PARS = 'additional_requests_pars'
STATUS_FORCELIST = (500, 501, 502, 503)
MAX_RETRIES = 3

# DYNAMIC PARS

KEY_TOKEN = '#token'
KEY_STREAM = 'stream'
KEY_MODEL_TYPE = 'model_type'

KEY_LOAD_OPTIONS = 'loading_options'
KEY_LOAD_TYPE = 'load_type'
KEY_DRYRUN = 'dryrun'
KEY_TIMESTAMP_FIELD = 'timestamp_field'

KEY_LQL_BLOCKS = 'lql_blocks'
KEY_NAME = 'name'
KEY_MODEL_MAPPING = 'model_mapping'
KEY_SRC_COL = 'src_col'
KEY_DST_NAME = 'dst_name'
KEY_SHORT_DESC = 'short_desc'
KEY_TYPE = 'type'
KEY_IS_BY = 'is_by'

KEY_RAW_QUERY = 'raw_query'

# #### Keep for debug
KEY_DEBUG = 'debug'

MANDATORY_PARS = [KEY_TOKEN, KEY_STREAM]
MANDATORY_IMAGE_PARS = []

APP_VERSION = '0.0.1'


class LqlValidationException(Exception):
    """
    Throw on validation error.
    """

    def __init__(self, message, full_message):
        message = message
        full_message = full_message


class LyticsTypes(Enum):
    INT = "INT",
    NUMBER = "NUMBER",
    STRING = "STRING",
    DATE = "DATE",
    EMAIL = "EMAIL",
    EMAIL_DOMAIN = "EMAIL_DOMAIN",
    CUSTOM_LQL = "CUSTOM_LQL"


class LoadTypes(Enum):
    UPDATE_MODEL_AND_DATA = "UPDATE_MODEL_AND_DATA",
    MODEL_ONLY = "MODEL_ONLY",
    DATA_ONLY = "DATA_ONLY"

    @classmethod
    def list(cls):
        return list(map(lambda c: c.name, cls))

    @classmethod
    def validate_fields(cls, fields: List[str]):
        errors = []
        for f in fields:
            if f not in cls.list():
                errors.append(f'"{f}" is not valid {cls.__name__} value!')
        if errors:
            raise ValueError(
                ', '.join(errors) + f'\n Supported {cls.__name__} values are: [{cls.list()}]')


def response_error_handling(func):
    """Function, that handles response handling of HTTP requests.
    """

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        try:
            r = func(*args, **kwargs)
            r.raise_for_status()
        except requests.HTTPError as e:
            if e.response.status_code in [401, 403]:
                raise Exception(f"{r.json()['message']}. Please check your API token and permissions!")
            elif r.status_code > 299:
                raise Exception(f"Failed to send request with error {r.json()['message']}")
        return r

    return wrapper


class Component(KBCEnvHandler):

    def __init__(self, debug=False):
        # for easier local project setup
        default_data_dir = Path(__file__).resolve().parent.parent.joinpath('data').as_posix() \
            if not os.environ.get('KBC_DATADIR') else None

        KBCEnvHandler.__init__(self, MANDATORY_PARS, log_level=logging.DEBUG if debug else logging.INFO,
                               data_path=default_data_dir)
        # override debug from config
        if self.cfg_params.get(KEY_DEBUG):
            debug = True
        if debug:
            logging.getLogger().setLevel(logging.DEBUG)
        logging.info('Running version %s', APP_VERSION)
        logging.info('Loading configuration...')

        try:
            self.validate_config(MANDATORY_PARS)
        except ValueError as e:
            logging.exception(e)
            exit(1)
        # validate stream name
        stream = self.cfg_params[KEY_STREAM]
        if not self._test_lql_name_valid(stream):
            raise ValueError(
                f'Invalid stream name "{stream}". Stream name cannot contain empty characters!')
        # intialize instance parameteres
        # set constants
        self.cfg_params[KEY_PATH] = 'https://bulk.lytics.io/collect/bulk/' + self.cfg_params[KEY_STREAM]
        self.cfg_params[KEY_METHOD] = 'POST'

        timestamp_field = self.cfg_params.get(KEY_TIMESTAMP_FIELD, None)

        self.cfg_params[KEY_ADDITIONAL_PARS] = [
            {
                "key": "params",
                "value": {
                    "dryrun": self.cfg_params.get(KEY_DRYRUN, False),
                    "filename": stream + '.csv',
                    "timestamp_field": timestamp_field
                }
            }
        ]
        self.cfg_params[KEY_HEADERS] = [{
            "key": "Authorization",
            "value": self.cfg_params[KEY_TOKEN]
        }, {
            "key": "Content-Type",
            "value": "application/csv"
        }]

        self.dry_run = self.cfg_params[KEY_LOAD_OPTIONS].get(KEY_DRYRUN)
        self.load_type = self.cfg_params[KEY_LOAD_OPTIONS].get(KEY_LOAD_TYPE, LoadTypes.UPDATE_MODEL_AND_DATA.name)
        self._auth_token = self.cfg_params[KEY_TOKEN]

        LoadTypes.validate_fields([self.load_type])

    def run(self):
        '''
        Main execution code
        '''
        params = self.cfg_params  # noqa

        logging.info('Processing input mapping.')
        in_tables = glob.glob(self.tables_in_path + "/*[!.manifest]")
        if len(in_tables) == 0:
            logging.exception('There is no table specified on the input mapping! You must provide one input table!')
            exit(1)
        elif len(in_tables) > 1:
            logging.error(
                'There is more than one table specified on the input mapping! You must provide single input table!!')
            exit(1)

        in_table = in_tables[0]

        logging.info("Building parameters..")
        # build headers
        headers = self._build_headers()
        # build additional parameters
        additional_params = self._build_request_parameters()
        additional_params['headers'] = headers

        if self.dry_run:
            logging.warning("Running in DRY RUN mode.")

        logging.info(f"Running in Load Mode: {self.load_type}")

        if self.load_type != LoadTypes.DATA_ONLY.name:
            logging.info("Processing model...")
            query_path = self._process_lql(in_table)

            if not self.dry_run:
                try:
                    logging.info("Upserting LQL query into Lytics.")
                    self.upload_lql_query(query_path)
                except Exception as e:
                    logging.error(f'Failed to send the query {e}')
                    exit(1)

        if self.load_type in (LoadTypes.DATA_ONLY.name, LoadTypes.UPDATE_MODEL_AND_DATA.name):
            logging.info(f"Pushing data to the stream: {params[KEY_STREAM]}")
            self.send_binary_data(params[KEY_PATH], additional_params, in_table, compress=True)

    logging.info("Writer finished")

    def query_test_evaluation(self, query_path, in_table, dry_run=False):
        # build sample data
        sample_data = {}
        with open(in_table, mode='r') as input_m:
            reader = csv.DictReader(input_m)
            sample_data = [line for i, line in enumerate(reader) if i <= 5]

        headers = self._get_auth_header()
        headers['Content-Type'] = 'text/plain'
        for line in sample_data:
            params = {'headers': headers, "params": line}
            res = self.send_binary_data(LYTICS_API_URL + '/api/query/_test', params, query_path)
            if dry_run:
                logging.warning(json.dumps(res.json()["data"]))

    def upload_lql_query(self, query_path):
        headers = self._get_auth_header()
        headers['Content-Type'] = 'text/plain'
        params = {'headers': headers}
        self.send_binary_data(LYTICS_API_URL + '/api/query', params, query_path)

    def _build_headers(self):
        headers = {}
        for h in self.cfg_params[KEY_HEADERS]:
            headers[h["key"]] = h["value"]
        return headers

    def _build_request_parameters(self):
        additional_params = {}
        for h in self.cfg_params[KEY_ADDITIONAL_PARS]:
            # convert boolean
            val = h["value"]
            if isinstance(val, str) and val.lower() in ['false', 'true']:
                val = val.lower() in ['true']
            additional_params[h["key"]] = val
        return additional_params

    def _get_auth_header(self):
        return {'Authorization': self._auth_token}

    @response_error_handling
    def send_request(self, url, additional_params, method='POST'):
        s = requests.Session()

        r = self._requests_retry_session(session=s).request(method, url, **additional_params)

        return r

    def send_binary_data(self, url, additional_request_params, in_table, compress=False):
        in_path = in_table
        if compress:
            in_path = in_path + '.gz'
            with gzip.open(in_path, 'wb') as f_out:
                shutil.copyfileobj(open(in_table, mode='rb'), f_out)

        with open(in_path, mode='rb') as in_file:
            additional_request_params['data'] = in_file
            return self.send_request(url, additional_request_params)

    def _requests_retry_session(self, session=None):
        session = session or requests.Session()
        retry = Retry(
            total=MAX_RETRIES,
            read=MAX_RETRIES,
            connect=MAX_RETRIES,
            backoff_factor=0.5,
            status_forcelist=STATUS_FORCELIST,
            allowed_methods=('GET', 'POST', 'PATCH', 'UPDATE')
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        return session

    def _process_lql(self, in_table):
        params = self.cfg_params
        if params.get(KEY_RAW_QUERY):
            # hacker mode
            logging.info("Running in hacker mode. Full query definition is being used.")
            query = params.get(KEY_RAW_QUERY)
        else:
            logging.info("Building LQL query from blocks.")
            query = self.build_lql(in_table)

        if query:
            query_path = os.path.join(self.files_in_path, 'query.lql')
            with open(query_path, 'wt') as out:
                out.write(query)

            # test query
            try:
                logging.warning("Running dry run of the LQL / data upload.",
                                extra={"full_message": json.dumps(query)})
                self.query_test_evaluation(query_path, in_table, self.dry_run)
            except Exception as e:
                if "Invalid test" in str(e):
                    error = self._process_evaluation_error(str(e), query)
                    logging.error(f'{error}. See log detail for full query. ',
                                  extra={"full_message": json.dumps(query)})
                else:
                    logging.error(str(e), extra={"full_message": json.dumps(query)})

                exit(1)
        return query_path

    def build_lql(self, in_table):
        # validate model
        lql_blocks = self.cfg_params.get(KEY_LQL_BLOCKS, [])
        self._validate_lql_blocks(in_table, lql_blocks)

        model_type = self.cfg_params[KEY_MODEL_TYPE]
        query = self._build_query_from_blocks(lql_blocks, self.cfg_params[KEY_STREAM], model_type)
        return query

    def _validate_lql_blocks(self, in_table, lql_blocks):
        errmsgs = list()
        for block in lql_blocks:
            msg = self._validate_model_mapping(in_table, block.get(KEY_MODEL_MAPPING))
            errmsgs.extend(msg)

        if errmsgs:
            raise ValueError(f'Input mapping validation failed: {",".join(errmsgs)}')

    def _validate_model_mapping(self, in_table, model_mapping):
        with open(in_table, mode='r') as input_m:
            reader = csv.DictReader(input_m)
            header = reader.fieldnames
            missing_cols = []
            err_name_cols = []
            for m in model_mapping:
                if m[KEY_TYPE] != LyticsTypes.CUSTOM_LQL.name and m[KEY_SRC_COL] not in header:
                    missing_cols.append(m[KEY_SRC_COL])
                if not self._test_lql_name_valid(m[KEY_DST_NAME]):
                    err_name_cols.append(m[KEY_DST_NAME])

        errmsgs = []
        if missing_cols:
            errmsgs.append(f'Some source columns specified in mapping do not exist in the source! {missing_cols}')
        if err_name_cols:
            errmsgs.append(
                f'Some destination column names contain invalid characters! Check for any whitespaces! {err_name_cols}')

        return errmsgs

    def _test_lql_name_valid(self, name):
        return not bool(re.search(r'\s', name))

    def _build_query_from_blocks(self, lql_blocks, stream, model_type):
        query_lines = []
        by_columns = set()
        query = 'SELECT'
        query_lines.append(query)
        select_lines = []
        nr_blocks = len(lql_blocks)
        for idx, block in enumerate(lql_blocks):
            model_mapping = block[KEY_MODEL_MAPPING]
            block_name = block[KEY_NAME]
            # add separator
            select_lines.append(self._create_block_separator(block_name))

            # build query
            block_lines, curr_by_columns = self._build_lql_block(model_mapping)
            if idx < nr_blocks - 1:
                block_lines += ',\n'
            select_lines.append(block_lines)

            by_columns.update(curr_by_columns)

        # build body
        select_lines_str = '\n'.join(select_lines)
        query_lines.append(select_lines_str)
        from_cl = f"\n\nFROM {stream}\n" \
                  f"  INTO {model_type} BY {' OR '.join(by_columns)}\n" \
                  f"  ALIAS {stream}"
        query_lines.append(from_cl)

        return self._format_lql(query_lines)

    def _create_block_separator(self, block_name):
        return f'\n-- ------------------------------- {block_name.upper()} -------------------------------\n'

    def _build_lql_block(self, model_mapping):
        """

        :param model_mapping:
        :return:
        """
        query_line_tokens = []
        query_lines = []
        # at this point I know it exists
        by_columns = []
        for ix, m in enumerate(model_mapping):
            if m[KEY_IS_BY]:
                by_columns.append(m[KEY_DST_NAME])

            source = m[KEY_SRC_COL]
            data_type = m[KEY_TYPE]
            kind = ''
            # custom LQL
            if data_type == LyticsTypes.CUSTOM_LQL.name:
                # extract type from src
                kind_spl = source.lower().split(' kind ')
                if len(kind_spl) > 1:
                    data_type = kind_spl[1]
                else:
                    data_type = None
                source = source[0:len(kind_spl[0])]

            if data_type:
                kind = f'KIND {data_type}'

            if data_type == LyticsTypes.EMAIL.name:
                source = f'email({m[KEY_SRC_COL]})'
                kind = ''

            if data_type == LyticsTypes.EMAIL_DOMAIN.name:
                source = f'emaildomain({m[KEY_SRC_COL]})'
                kind = ''

            line_tokens = [source, 'AS', m[KEY_DST_NAME], 'SHORTDESC', f'"{m[KEY_SHORT_DESC]}"', kind]
            query_line_tokens.append(line_tokens)

        query_lines = self._align_ident(query_line_tokens)
        query_lines_str = ',\n'.join(query_lines)
        return query_lines_str, by_columns

    def _align_ident(self, token_lists):
        largest_idents = {}
        block_lines = []
        lists_w_empty_lines = []
        # collect largest idents and add empty chars
        for tlist in token_lists:
            new_list = tlist.copy()
            prev_idx = 0
            for idx, t in enumerate(tlist):
                size = len(t)
                if size > largest_idents.get(idx, 0):
                    largest_idents[idx] = size
                new_list.insert(prev_idx + idx + 1, '')
                prev_idx += 1
            lists_w_empty_lines.append(new_list)

        # build block string
        for tlist in lists_w_empty_lines:
            prev_idx = 0
            for idx in range(int((len(tlist) - 1) / 2)):
                ident = (largest_idents.get(idx, 1) - len(tlist[prev_idx + idx])) + 2
                tlist[prev_idx + idx + 1] = ' '.join(['' for i in range(ident)])
                prev_idx += 1

            line = ''.join(tlist)
            block_lines.append(line.strip())

        return block_lines

    def _format_lql(self, query_lines):
        query = '\n'.join(query_lines)
        return query

    def _process_evaluation_error(self, msg, query):
        error_msg = msg.split("error", 1)[1]
        error_near = ''
        if re.search(r'Line:(\d+)', error_msg):
            line_nr = re.search(r'Line:(\d+)', error_msg)[0].split(':')[1]
            col_nr = re.search(r'Col:(\d+)', error_msg)[0].split(':')[1]
            error_near = query.split('\n')[int(line_nr) - 1][int(col_nr) - 5:int(col_nr) + 5]

        return f'{error_msg}, near: "{error_near}"'


"""
        Main entrypoint
"""
if __name__ == "__main__":
    if len(sys.argv) > 1:
        debug_arg = sys.argv[1]
    else:
        debug_arg = False
    try:
        comp = Component(debug_arg)
        comp.run()
    except requests.HTTPError as er:
        if er.response.status_code == 401:
            er.args = (er.args[0] + ' Check your API key!',)
        logging.exception(er)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(1)


================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import mock
import os
import unittest
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    def setUp(self) -> None:
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'data_test', 'data1')
        os.environ["KBC_DATADIR"] = path
        self.data_test_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                          'data_test')

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()

    def test_invalid_stream_fails(self):
        os.environ["KBC_DATADIR"] = os.path.join(self.data_test_dir, 'data_invalid_stream')
        with self.assertRaises(ValueError):
            comp = Component()

    def test_invalid_dest_col_fails(self):
        os.environ["KBC_DATADIR"] = os.path.join(self.data_test_dir, 'data_invalid_dest_col')
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()

    def test_build_lql_valid(self):
        os.environ["KBC_DATADIR"] = os.path.join(self.data_test_dir, 'data1')

        comp = Component()
        with open(os.path.join(comp.files_in_path, 'query.lql')) as f:
            valid_lql = f.read()
        gen = comp.build_lql(os.path.join(comp.tables_in_path, 'test.csv'))
        self.assertEqual(valid_lql, gen)


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /tests/data_test/data1/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "debug": true,
    "#token": "XXXXXXXXXXXXXXXX",
       "stream": "custom-keboola-testing-model",
        "raw_query": "",
        "lql_blocks": [
            {
                "name": "Identifiers",
                "model_mapping": [
                    {
                        "type": "EMAIL",
                        "is_by": true,
                        "src_col": "email",
                        "dst_name": "email",
                        "short_desc": "Email Address"
                    }
                ]
            },
            {
                "name": "Subscriptions",
                "model_mapping": [
                    {
                        "type": "STRING",
                        "is_by": false,
                        "src_col": "name",
                        "dst_name": "subtype",
                        "short_desc": "Subscription Type"
                    },
                    {
                        "type": "DATE",
                        "is_by": false,
                        "src_col": "date",
                        "dst_name": "subscription_start_date",
                        "short_desc": "Subscription Start Date"
                    },
                    {
                        "type": "NUMBER",
                        "is_by": false,
                        "src_col": "price",
                        "dst_name": "subscription_end_date",
                        "short_desc": "Subscription End Date"
                    }
                ]
            }
        ],
        "model_type": "user",
        "loading_options": {
            "dryrun": true,
            "load_type": "UPDATE_MODEL_AND_DATA",
            "timestamp_field": ""
        }
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"XXX_123\"}",
        "oauthVersion": "2.0",
        "appKey": "123456",
        "#appSecret": "1223456789-CiN"
      }
    }
  }
}


================================================
File: /tests/data_test/data1/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /tests/data_test/data1/in/tables/test.csv
================================================
"email","price","date","name","test"
"david@keboola.com","150","1.1.20","testing_event","a"
"milan@keboola.com","150","1.1.20","testing_event","a"
"masha.reutovski@keboola.com","150","1.1.20","testing_event","a"


================================================
File: /tests/data_test/data1/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /tests/data_test/data1/in/files/query.lql
================================================
SELECT

-- ------------------------------- IDENTIFIERS -------------------------------

email(email) AS email SHORTDESC "Email Address",


-- ------------------------------- SUBSCRIPTIONS -------------------------------

name  AS subtype                 SHORTDESC "Subscription Type"       KIND STRING,
date  AS subscription_start_date SHORTDESC "Subscription Start Date" KIND DATE,
price AS subscription_end_date   SHORTDESC "Subscription End Date"   KIND NUMBER


FROM custom-keboola-testing-model
  INTO user BY email
  ALIAS custom-keboola-testing-model

================================================
File: /tests/data_test/data1/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /tests/data_test/data1/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /tests/data_test/data1/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /tests/data_test/data_invalid_dest_col/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "debug": true,
    "#token": "XXXXXX",
       "stream": "custom-keboola-testing-model",
        "raw_query": "",
        "lql_blocks": [
            {
                "name": "Identifiers",
                "model_mapping": [
                    {
                        "type": "EMAIL",
                        "is_by": true,
                        "src_col": "email",
                        "dst_name": "ema  il",
                        "short_desc": "Email Address"
                    }
                ]
            },
            {
                "name": "Subscriptions",
                "model_mapping": [
                    {
                        "type": "STRING",
                        "is_by": false,
                        "src_col": "name",
                        "dst_name": "subtype",
                        "short_desc": "Subscription Type"
                    },
                    {
                        "type": "DATE",
                        "is_by": false,
                        "src_col": "date",
                        "dst_name": "subscription_start_date",
                        "short_desc": "Subscription Start Date"
                    },
                    {
                        "type": "NUMBER",
                        "is_by": false,
                        "src_col": "price",
                        "dst_name": "subscription_end_date",
                        "short_desc": "Subscription End Date"
                    }
                ]
            }
        ],
        "model_type": "user",
        "loading_options": {
            "dryrun": true,
            "load_type": "UPDATE_MODEL_AND_DATA",
            "timestamp_field": ""
        }
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"XXX_123\"}",
        "oauthVersion": "2.0",
        "appKey": "123456",
        "#appSecret": "1223456789-CiN"
      }
    }
  }
}


================================================
File: /tests/data_test/data_invalid_dest_col/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /tests/data_test/data_invalid_dest_col/in/tables/test.csv
================================================
"email","price","date","name","test"
"david@keboola.com","150","1.1.20","testing_event","a"
"milan@keboola.com","150","1.1.20","testing_event","a"
"masha.reutovski@keboola.com","150","1.1.20","testing_event","a"


================================================
File: /tests/data_test/data_invalid_dest_col/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /tests/data_test/data_invalid_dest_col/in/files/query.lql
================================================
SELECT

-- ------------------------------- IDENTIFIERS -------------------------------

email(email) AS email SHORTDESC "Email Address",


-- ------------------------------- SUBSCRIPTIONS -------------------------------

SubType                 AS subtype                 SHORTDESC "Subscription Type"       KIND STRING,
subscription_start_date AS subscription_start_date SHORTDESC "Subscription Start Date" KIND DATE,
subscription_end_dat    AS subscription_end_date   SHORTDESC "Subscription End Date"   KIND DATE,
subscription_revenue    AS subscription_revenue    SHORTDESC "Subscription Revenue"    KIND NUMBER,
last_login_date         AS last_login_date         SHORTDESC "Last Login Date"         KIND DATE,
last_brand_engaged      AS test(sss)               SHORTDESC "Last Brand Engaged",
merch_revenue           AS merch_revenue           SHORTDESC "Merch Revenue"           KIND NUMBER,
transactions            AS transactions            SHORTDESC "Number of Transactions"  KIND INT,
last_transaction        AS last_transaction        SHORTDESC "Last Transaction Date"   KIND DATE


FROM custom-keboola-testing-model
  INTO user BY email
  ALIAS custom-keboola-testing-model

================================================
File: /tests/data_test/data_invalid_dest_col/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /tests/data_test/data_invalid_dest_col/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /tests/data_test/data_invalid_dest_col/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /tests/data_test/data_invalid_stream/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "debug": true,
    "#token": "XXXXX",
       "stream": "custom-keboola-testing-  model",
        "raw_query": "",
        "lql_blocks": [
            {
                "name": "Identifiers",
                "model_mapping": [
                    {
                        "type": "EMAIL",
                        "is_by": true,
                        "src_col": "email",
                        "dst_name": "email",
                        "short_desc": "Email Address"
                    }
                ]
            },
            {
                "name": "Subscriptions",
                "model_mapping": [
                    {
                        "type": "STRING",
                        "is_by": false,
                        "src_col": "name",
                        "dst_name": "subtype",
                        "short_desc": "Subscription Type"
                    },
                    {
                        "type": "DATE",
                        "is_by": false,
                        "src_col": "date",
                        "dst_name": "subscription_start_date",
                        "short_desc": "Subscription Start Date"
                    },
                    {
                        "type": "NUMBER",
                        "is_by": false,
                        "src_col": "price",
                        "dst_name": "subscription_end_date",
                        "short_desc": "Subscription End Date"
                    }
                ]
            }
        ],
        "model_type": "user",
        "loading_options": {
            "dryrun": true,
            "load_type": "UPDATE_MODEL_AND_DATA",
            "timestamp_field": ""
        }
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"XXX_123\"}",
        "oauthVersion": "2.0",
        "appKey": "123456",
        "#appSecret": "1223456789-CiN"
      }
    }
  }
}


================================================
File: /tests/data_test/data_invalid_stream/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /tests/data_test/data_invalid_stream/in/tables/test.csv
================================================
"email","price","date","name","test"
"david@keboola.com","150","1.1.20","testing_event","a"
"milan@keboola.com","150","1.1.20","testing_event","a"
"masha.reutovski@keboola.com","150","1.1.20","testing_event","a"


================================================
File: /tests/data_test/data_invalid_stream/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /tests/data_test/data_invalid_stream/in/files/query.lql
================================================
SELECT

-- ------------------------------- IDENTIFIERS -------------------------------

email(email) AS email SHORTDESC "Email Address",


-- ------------------------------- SUBSCRIPTIONS -------------------------------

SubType                 AS subtype                 SHORTDESC "Subscription Type"       KIND STRING,
subscription_start_date AS subscription_start_date SHORTDESC "Subscription Start Date" KIND DATE,
subscription_end_dat    AS subscription_end_date   SHORTDESC "Subscription End Date"   KIND DATE,
subscription_revenue    AS subscription_revenue    SHORTDESC "Subscription Revenue"    KIND NUMBER,
last_login_date         AS last_login_date         SHORTDESC "Last Login Date"         KIND DATE,
last_brand_engaged      AS test(sss)               SHORTDESC "Last Brand Engaged",
merch_revenue           AS merch_revenue           SHORTDESC "Merch Revenue"           KIND NUMBER,
transactions            AS transactions            SHORTDESC "Number of Transactions"  KIND INT,
last_transaction        AS last_transaction        SHORTDESC "Last Transaction Date"   KIND DATE


FROM custom-keboola-testing-model
  INTO user BY email
  ALIAS custom-keboola-testing-model

================================================
File: /tests/data_test/data_invalid_stream/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /tests/data_test/data_invalid_stream/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /tests/data_test/data_invalid_stream/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: /component_config/component_long_description.md
================================================
Write data to custom Lytics streams. Allows sending large volumes of data using gzipped stream and dry run mode 
to verify your data.

================================================
File: /component_config/configuration_description.md
================================================
A **single table** on the input must be specified.

- The data is sent as gzipped csv via the [bulk upload API](https://learn.lytics.com/documentation/developer/api-docs/data-upload#bulk-csv-upload-bulk-csv-upload-post) 
so large volumes are supported. 
- The event stream is automatically created if does not exist.
- Creates / Updates a LQL query based on parameters with alias matching the Stream Name.
- May be executed multiple times

### Dry run

Dry run to verify the data. Only do a dry-run to see if the data is formatted correctly and the query is structured properly. 

**NOTE:**  The data upload and query dry run is executed regardless the `Model -> Load Type` setup. 
When in dry run mode a sample data row is sent to the `query/test` endpoint and the result printed in the 
job log to verify it behaves properly. The job log will contain record like this:

```
Running dry run of the LQL / data upload.
{"_created": "2020-09-22T13:33:43.741754223Z", "_modified": "2020-09-22T13:33:43.741754223Z", "email": "david@keboola.com", "last_order_date": "2020-01-01T00:00:00Z", "name": "keboola.com", "order_value": "150", "test": "a"}
```
Moreover, the generated LQL query will be available in the log detail after clicking on `Running dry run of the LQL / data upload.` event.

## LQL blocks

Model mapping that will generate the LQL query. It is structured into separate blocks, that are visually separated for better readability. 
It is recommended to keep the first block `Identifiers` containing only identifier columns.

Query with the same alias as the `Stream name` will be created or updated according to the specified mapping.

No model is created if the mapping is empty.


### Block column definition

Mapping of source column tables to the destination table columns

- **Column** - Name of the input table column
- **Column name** - Destination (LQL) column name. Must not contain blank characters
- **Description** - Column description
- **Type** - if set to `Email`, `email()` function will be applied to the field
- **Is Identifier** - If set to true, the field will be used in the `BY` clause. May be set only on one column.

![lql block](docs/imgs/lql_block.png)

#### Data Types

Apart from standard primitive datatypes, additional are supported:

- **EMAIL** - `email()` function will be applied to the field
- **EMAIL_DOMAIN** - `emaildomain()` function will be applied to the field

##### **CUSTOM_LQL**

When `CUSTOM_LQL` datatype is selected you may specify custom LQL (function) in the `Column` field 
instead of the source table column name. This allows to apply some
 additional LQL functions such as `Map` datatypes. 
 The name of the actual existing column from the source table must be included.
 It is possible to define the KIND as well.
 
 **Examples**:
 
 `map(key1, todate(date_field)) KIND map[string]time` - where `date_field` is a column in the input table
 `domain(url)`- where `url` is a column in the input table



## Raw query (hacker mode)

Optionally you may choose to specify the whole LQL query manually. In such case you may paste your LQL code
into the `Raw query field` and all LQL blocks will be overridden. Also the `Stream name` will take no effect. 

**NOTE** Be sure to refer to existing column names in the input table.

================================================
File: /component_config/component_short_description.md
================================================
With Lytics, get insights that drive activation. 
The Lytics customer data platform enables your marketing to meaningfully drive engagement with customers and prospects.

================================================
File: /component_config/stack_parameters.json
================================================
{}

================================================
File: /component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Authorization",
  "format": "object",
  "required": [
    "#token"
  ],
  "properties": {
    "#token": {
      "type": "string",
      "title": "API token",
      "format": "password",
      "propertyOrder": 200
    }
  }
}

================================================
File: /component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Streams",
  "format": "grid",
  "required": [
    "stream",
    "model_type",
    "raw_query"
  ],
  "properties": {
    "stream": {
      "options": {
        "grid_columns": 10
      },
      "type": "string",
      "title": "Stream",
      "minLength": 1,
      "description": "Stream path",
      "propertyOrder": 300
    },
    "model_type": {
      "type": "string",
      "default": "user",
      "minLength": 1,
      "description": "This is USER for all user profiles. (Technically you could create other types, such as \"account\".)",
      "propertyOrder": 320,
      "options": {
        "grid_columns": 10
      },
      "title": "Model Type"
    },
    "loading_options": {
      "type": "object",
      "title": "Loading Options",
      "propertyOrder": 400,
      "format": "grid",
      "properties": {
        "load_type": {
          "type": "string",
          "title": "Load type",
          "minLength": 1,
          "propertyOrder": 350,
          "description": "Data load type",
          "required": true,
          "enum": [
            "UPDATE_MODEL_AND_DATA",
            "MODEL_ONLY",
            "DATA_ONLY"
          ],
          "options": {
            "grid_columns": 4,
            "enum_titles": [
              "Update Model and Data",
              "Update Model only",
              "Update Data Only"
            ]
          }
        },
        "dryrun": {
          "title": "Dry run",
          "description": "Dry run to verify the data and dry run the LQL query (result outputted in the job log).",
          "type": "boolean",
          "format": "checkbox",
          "propertyOrder": 400,
          "options": {
            "grid_columns": 6
          }
        },
        "timestamp_field": {
          "type": "string",
          "title": "Timestamp Field [Optional]",
          "description": "The name of the column or field in file that contains event timestamp.",
          "propertyOrder": 600
        }
      }
    },
    "lql_blocks": {
      "type": "array",
      "format": "tabs-top",
      "title": "LQL Blocks",
      "description": "Model column mapping that will generate / update the underlying LQL query.",
      "minItems": 1,
      "propertyOrder": 900,
      "items": {
        "title": "Block",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Block name",
            "propertyOrder": 1
          },
          "model_mapping": {
            "type": "array",
            "title": "Columns",
            "uniqueItems": true,
            "propertyOrder": 5,
            "items": {
              "format": "grid-strict",
              "title": "column",
              "properties": {
                "src_col": {
                  "type": "string",
                  "format": "textarea",
                  "minLength": 1,
                  "title": "Column",
                  "options": {
                    "grid_columns": 6
                  },
                  "description": "Source column",
                  "propertyOrder": 1
                },
                "dst_name": {
                  "type": "string",
                  "title": "Column Name",
                  "format": "textarea",
                  "minLength": 1,
                  "description": "Destination column",
                  "propertyOrder": 2,
                  "options": {
                    "grid_columns": 6
                  }
                },
                "short_desc": {
                  "type": "string",
                  "format": "textarea",
                  "title": "Description",
                  "description": "Short description",
                  "propertyOrder": 3,
                  "options": {
                    "grid_columns": 5
                  }
                },
                "type": {
                  "type": "string",
                  "title": "Type",
                  "description": "Column data type",
                  "enum": [
                    "INT",
                    "NUMBER",
                    "STRING",
                    "DATE",
                    "EMAIL",
                    "EMAIL_DOMAIN",
                    "CUSTOM_LQL"
                  ],
                  "propertyOrder": 4,
                  "options": {
                    "grid_columns": 3
                  }
                },
                "is_by": {
                  "type": "boolean",
                  "title": "Is Identifier",
                  "format": "checkbox",
                  "propertyOrder": 5,
                  "options": {
                    "grid_columns": 2
                  }
                }
              }
            }
          }
        }
      }
    },
    "raw_query": {
                  "type": "string",
                  "format": "sql",
                  "title": "Raw query",

                  "description": "Raw LQL query (Hacker Mode), overrides any blocks.",
                  "propertyOrder": 1000
                }
  }
}

================================================
File: /component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#token": "TEST_TOKEN",
    "dryrun": false,
    "stream": "custom-keboola",
    "filename": "keboola-import.csv",
    "timestamp_field": ""
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"XXX_123\"}",
        "oauthVersion": "2.0",
        "appKey": "123456",
        "#appSecret": "1223456789-CiN"
      }
    }
  }
}


================================================
File: /component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi

================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.5.2.zip#egg=kbc
https://bitbucket.org/kds_consulting_team/kds-team.processor-csv-to-json/get/0.4.0.zip#egg=csv2json
mock
freezegun
nested-lookup

================================================
File: /Dockerfile
================================================
FROM python:3.7.2-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /README.md
================================================
# KBC Lytics Writer

Write data to custom Lytics streams. Allows sending large volumes of data using gzipped stream and dry run mode 
to verify your data.

**Table of contents:**  
  
[TOC]


# Functionality notes

Send events to your custom event stream. Takes a **single table** on the input, containing the data.

- The data is sent as gzipped csv via the [bulk upload API](https://learn.lytics.com/documentation/developer/api-docs/data-upload#bulk-csv-upload-bulk-csv-upload-post) 
so large volumes are supported. 
- The event stream is automatically created if does not exist.
- Creates a LQL query based on parameters with alias matching the Stream Name.
- May be executed multiple times


Each row represents a **single stream**. The query is split into **blocks** for better readability. 

# Configuration

## Authorization

**API Token:** Your Lytics API token

## Stream configuration 

Each row represents a **single stream**. The query is split into **blocks** for better readability. 


## Stream

Name of the event stream. Note that ifn the event stream does not exist already, it is created automatically.

## Model Type

Type of the table you want to update. By default `user`, but you may want to update also `content` or other.


## Loading Options

![Loding Opts](docs/imgs/loading_opts.png)



### Load Type

The load type defines what actions will be performed on each exectuion:

- **Update Model and Data** - uploads model (LQL query) and loads data each time
- **Update Model Only** - Only updates the LQL query
- **Update Data Only** - Only loads data to the data stream, the LQL query stays intact

### Dry run

Dry run to verify the data. Only do a dry-run to see if the data is formatted correctly and the query is structured properly. 

**NOTE:**  The data upload and query dry run is executed regardless the `Model -> Load Type` setup. 
When in dry run mode a sample data row is sent to the `query/test` endpoint and the result printed in the 
job log to verify it behaves properly. The job log will contain record like this:

```
Running dry run of the LQL / data upload.
{"_created": "2020-09-22T13:33:43.741754223Z", "_modified": "2020-09-22T13:33:43.741754223Z", "email": "david@keboola.com", "last_order_date": "2020-01-01T00:00:00Z", "name": "keboola.com", "order_value": "150", "test": "a"}
```

Moreover, the generated LQL query will be available in the log detail after clicking on `Running dry run of the LQL / data upload.` event:

![Dry](docs/imgs/dry_run_lql.png)

The LQL itself is available under the `_full_message` attribute:

![Dry lql](docs/imgs/sample_lql.png)


### Timestamp Field

Optional parameter. The name of the column or field in file that contains event timestamp.



## LQL blocks

Model mapping that will generate the LQL query. It is structured into separate blocks, that are visually separated for better readability. 
It is recommended to keep the first block `Identifiers` containing only identifier columns.

Example LQL output:

```
SELECT

-- ------------------------------- IDENTIFIERS -------------------------------

email(email) AS email SHORTDESC "Email Address",


-- ------------------------------- SUBSCRIPTIONS -------------------------------

name  AS subtype                 SHORTDESC "Subscription Type"       KIND STRING,
date  AS subscription_start_date SHORTDESC "Subscription Start Date" KIND DATE,
price AS subscription_end_date   SHORTDESC "Subscription End Date"   KIND NUMBER


FROM custom-keboola-testing-model
  INTO user BY email
  ALIAS custom-keboola-testing-model
```

Query with the same alias as the `Stream name` will be created or updated according to the specified mapping.

No model is created if the mapping is empty.


### Block column definition

Mapping of source column tables to the destination table columns

- **Column** - Name of the input table column
- **Column name** - Destination (LQL) column name. Must not contain blank characters
- **Description** - Column description
- **Type** - if set to `Email`, `email()` function will be applied to the field
- **Is Identifier** - If set to true, the field will be used in the `BY` clause. May be set only on one column.

![lql block](docs/imgs/lql_block.png)

#### Data Types

Apart from standard primitive datatypes, additional are supported:

- **EMAIL** - `email()` function will be applied to the field
- **EMAIL_DOMAIN** - `emaildomain()` function will be applied to the field

##### **CUSTOM_LQL**

When `CUSTOM_LQL` datatype is selected you may specify custom LQL (function) in the `Column` field 
instead of the source table column name. This allows to apply some
 additional LQL functions such as `Map` datatypes. 
 The name of the actual existing column from the source table must be included.
 It is possible to define the KIND as well.
 
 **Examples**:
 
 `map(key1, todate(date_field)) KIND map[string]time` - where `date_field` is a column in the input table
 `domain(url)`- where `url` is a column in the input table



## Raw query (hacker mode)

Optionally you may choose to specify the whole LQL query manually. In such case you may paste your LQL code
into the `Raw query field` and all LQL blocks will be overridden. Also the `Stream name` will take no effect. 

**NOTE** Be sure to refer to existing column names in the input table.

![Raw query](docs/imgs/raw_query.png) 


# Development

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in the docker-compose file:

```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

