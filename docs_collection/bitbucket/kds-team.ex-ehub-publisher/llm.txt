Directory structure:
└── kds_consulting_team-kds-team.ex-ehub-publisher/
    ├── flake8.cfg
    ├── deploy.sh
    ├── docker-compose.yml
    ├── src/
    │   ├── schemas/
    │   │   ├── transaction.json
    │   │   ├── campaign_commission_groups.json
    │   │   ├── campaign_categories.json
    │   │   ├── campaign.json
    │   │   ├── voucher.json
    │   │   ├── campaign_restrictions.json
    │   │   └── creative.json
    │   ├── component.py
    │   ├── json_parser_multi.py
    │   └── client/
    │       ├── __init__.py
    │       └── client.py
    ├── bitbucket-pipelines.yml
    ├── tests/
    │   ├── test_component.py
    │   └── __init__.py
    ├── component_config/
    │   ├── logger
    │   ├── component_long_description.md
    │   ├── configuration_description.md
    │   ├── component_short_description.md
    │   ├── loggerConfiguration.json
    │   ├── configSchema.json
    │   ├── configRowSchema.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── tables/
    │       │   │   ├── test.csv
    │       │   │   └── test.csv.manifest
    │       │   └── files/
    │       │       └── order1.xml
    │       └── out/
    │           ├── tables/
    │           │   └── test.csv
    │           └── files/
    │               └── order1.xml
    ├── scripts/
    │   ├── update_dev_portal_properties.sh
    │   ├── run_kbc_tests.ps1
    │   ├── run.bat
    │   ├── build_n_run.ps1
    │   └── build_n_test.sh
    ├── requirements.txt
    ├── docs/
    │   └── imgs/
    ├── TEMPLATE_README.md
    ├── Dockerfile
    ├── LICENSE.md
    └── README.md

================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /src/schemas/transaction.json
================================================
{
  "name": "publisher_transaction",
  "description": "",
  "primary_keys": [
    "id",
    "publisherId"
  ],
  "fields": [
    {
      "name": "publisherId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "commission",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "productId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "lastClickData1",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "creativeId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "ip",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "campaignId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "newCustomer",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "firstClickDateTime",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "lastClickIp",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "type",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "orderId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "dateInserted",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "lastClickReferrerUrl",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "firstClickData2",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "status",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "firstClickData1",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "lastClickData2",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "firstClickIp",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "uuid",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "payoutStatus",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "lastClickDateTime",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "amount",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "clickCount",
      "description": "",
      "base_type": "STRING"
    }
  ]
}

================================================
File: /src/schemas/campaign_commission_groups.json
================================================
{
  "name": "publisher_campaign_commission_groups",
  "description": "",
  "primary_keys": [
    "campaign_id",
    "name",
    "publisherId"
  ],
  "fields": [
    {
      "name": "campaign_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "publisherId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "commissions",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "status",
      "description": "",
      "base_type": "STRING"
    }
  ]
}

================================================
File: /src/schemas/campaign_categories.json
================================================
{
  "name": "publisher_campaign_categories",
  "description": "",
  "primary_keys": [
    "id",
    "campaign_id",
    "publisherId"
  ],
  "fields": [
    {
      "name": "campaign_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "publisherId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "name",
      "description": "",
      "base_type": "STRING"
    }
  ]
}

================================================
File: /src/schemas/campaign.json
================================================
{
  "name": "publisher_campaign",
  "description": "",
  "primary_keys": [
    "id",
    "publisherId"
  ],
  "fields": [
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "publisherId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "description",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "commissionDescription",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "averageAmount",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "hasFeed",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "cookieLifetime",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "web",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "logoUrl",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "tracking",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "country",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "domainTracking",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "restrictedWords",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "defaultLink",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "maxApprovalInterval",
      "description": "",
      "base_type": "STRING"
    }
  ]
}

================================================
File: /src/schemas/voucher.json
================================================
{
  "name": "publisher_voucher",
  "description": "",
  "primary_keys": [
    "id",
    "publisherId",
    "campaignId"
  ],
  "fields": [
    {
      "name": "publisherId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "campaignId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "campaignName",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "url",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "validTill",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "validFrom",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "code",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "isValid",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "rules",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "type",
      "description": "",
      "base_type": "STRING"
    }
  ]
}

================================================
File: /src/schemas/campaign_restrictions.json
================================================
{
  "name": "publisher_campaign_restrictions",
  "description": "",
  "primary_keys": [
    "publisherId",
    "campaign_id"
  ],
  "fields": [
    {
      "name": "name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "campaign_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "description",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "note",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "publisherId",
      "description": "",
      "base_type": "STRING"
    }
  ]
}

================================================
File: /src/schemas/creative.json
================================================
{
  "name": "publisher_creative",
  "description": "",
  "primary_keys": [
    "id",
    "publisherId",
    "campaignId"
  ],
  "fields": [
    {
      "name": "publisherId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "campaignId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "type",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "imageUrl",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "destinationUrl",
      "description": "",
      "base_type": "STRING"
    }
  ]
}

================================================
File: /src/component.py
================================================
import copy
import logging
import dateparser
import warnings

from typing import Callable, List, Dict

from keboola.component.base import ComponentBase, sync_action
from keboola.component.exceptions import UserException
from keboola.csvwriter import ElasticDictWriter
from keboola.utils.helpers import comma_separated_values_to_list

from client import EHubClient, EHubClientException
from json_parser_multi import MulitCsvJsonParser

KEY_API_TOKEN = '#api_token'
KEY_PUBLISHER_IDS = "publisher_ids"

KEY_FETCH_CAMPAIGNS = "fetch_campaigns"
KEY_FETCH_VOUCHERS = "fetch_vouchers"
KEY_FETCH_CREATIVES = "fetch_creatives"
KEY_FETCH_TRANSACTIONS = "fetch_transactions"

KEY_TRANSACTION_OPTIONS = "transaction_options"
KEY_TRANSACTION_OPTIONS_FETCH_MODE = "fetch_mode"
KEY_TRANSACTION_OPTIONS_DATE_FROM = "date_from"
KEY_TRANSACTION_OPTIONS_DATE_TO = "date_to"

KEY_DESTINATION = "destination_settings"
KEY_LOAD_MODE = "load_mode"

REQUIRED_PARAMETERS = [KEY_API_TOKEN, KEY_PUBLISHER_IDS]
REQUIRED_IMAGE_PARS = []

DEFAULT_LOAD_MODE = "incremental_load"
DEFAULT_DATE_FROM = "1 week ago"
DEFAULT_DATE_TO = "now"

# Ignore dateparser warnings regarding pytz
warnings.filterwarnings(
    "ignore",
    message="The localize method is no longer necessary, as this time zone supports the fold attribute",
)


class Component(ComponentBase):

    def __init__(self):
        self.client = None
        self.result_writers = {}
        self.incremental = None
        self.publisher_ids = None
        super().__init__()

    def run(self):
        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        self.validate_image_parameters(REQUIRED_IMAGE_PARS)
        params = self.configuration.parameters

        self.init_client()
        self.init_publisher_ids()

        destination_settings = params.get(KEY_DESTINATION, {})
        load_mode = destination_settings.get(KEY_LOAD_MODE, DEFAULT_LOAD_MODE)
        self.incremental = load_mode != "full_load"

        if not self.publisher_ids:
            raise UserException("No publisher IDs set")

        if params.get(KEY_FETCH_CAMPAIGNS):
            logging.info("Fetching publisher campaign data")
            self.fetch_and_save_campaigns()
        if params.get(KEY_FETCH_VOUCHERS):
            logging.info("Fetching publisher voucher  data")
            self.fetch_and_save_vouchers()
        if params.get(KEY_FETCH_CREATIVES):
            logging.info("Fetching publisher creative data")
            self.fetch_and_save_creatives()
        if params.get(KEY_FETCH_TRANSACTIONS):
            logging.info("Fetching publisher transaction data")
            self.fetch_and_save_transactions()

        self._close_all_result_writers()

    def init_client(self):
        params = self.configuration.parameters
        api_key = params.get(KEY_API_TOKEN)
        self.client = EHubClient(api_key)

    def init_publisher_ids(self):
        params = self.configuration.parameters
        self.publisher_ids = comma_separated_values_to_list(params.get(KEY_PUBLISHER_IDS))

    @sync_action('testConnection')
    def test_connection(self):
        self.init_client()
        self.init_publisher_ids()

        failed_publishers = []
        for publisher_id in self.publisher_ids:
            try:
                self.client.get_single_publisher_campaign(publisher_id)
            except EHubClientException:
                failed_publishers.append(publisher_id)
        if failed_publishers:
            raise UserException(
                f"Failed to authorize the connection with the following Publisher IDs {failed_publishers}. "
                f"Either API Key is Invalid, or the Publisher ID")
        if not self.publisher_ids:
            raise UserException("Cannot test connection without any publisher IDs")

    def fetch_and_save_campaigns(self) -> None:
        self._initialize_result_writer("campaign")
        self._initialize_result_writer("campaign_categories")
        self._initialize_result_writer("campaign_commission_groups")
        self._initialize_result_writer("campaign_restrictions")
        parser = MulitCsvJsonParser(dont_parse_list=['commissions'])
        for publisher_id in self.publisher_ids:
            try:
                for page in self.client.get_publisher_campaigns(publisher_id):
                    parsed = parser.parse_data(page, "campaign")
                    for table in parsed:
                        parsed[table] = self._add_key_value_to_data(parsed[table], "publisherId", publisher_id)
                    self._get_result_writer("campaign").writerows(parsed["campaign"])
                    self._get_result_writer("campaign_categories").writerows(parsed["categories"])
                    self._get_result_writer("campaign_commission_groups").writerows(parsed["commissionGroups"])
                    self._get_result_writer("campaign_restrictions").writerows(parsed["restrictions"])
            except EHubClientException as ehub_exc:
                raise UserException(
                    "Fetching data from eHUB failed, check your API Key and Publisher IDs") from ehub_exc

    def fetch_and_save_vouchers(self) -> None:
        try:
            self._fetch_and_save_data_for_all_publishers("voucher", self.client.get_publisher_vouchers)
        except EHubClientException as ehub_exc:
            raise UserException("Fetching data from eHUB failed, check your API Key and Publisher IDs") from ehub_exc

    def fetch_and_save_creatives(self) -> None:
        try:
            self._fetch_and_save_data_for_all_publishers("creative", self.client.get_publisher_creatives)
        except EHubClientException as ehub_exc:
            raise UserException("Fetching data from eHUB failed, check your API Key and Publisher IDs") from ehub_exc

    def fetch_and_save_transactions(self) -> None:
        params = self.configuration.parameters
        transaction_options = params.get(KEY_TRANSACTION_OPTIONS)
        fetch_mode = transaction_options.get(KEY_TRANSACTION_OPTIONS_FETCH_MODE)

        if fetch_mode == "full_fetch":
            self._fetch_and_save_transactions_full()
        else:
            date_from = transaction_options.get(KEY_TRANSACTION_OPTIONS_DATE_FROM)
            date_to = transaction_options.get(KEY_TRANSACTION_OPTIONS_DATE_TO)
            self._fetch_and_save_transactions_incremental(date_from, date_to)

    def _fetch_and_save_transactions_full(self):
        try:
            self._fetch_and_save_data_for_all_publishers("transaction", self.client.get_publisher_transactions)
        except EHubClientException as ehub_exc:
            raise UserException("Fetching data from eHUB failed, check your API Key and Publisher IDs") from ehub_exc

    def _fetch_and_save_transactions_incremental(self, date_from: str = DEFAULT_DATE_FROM,
                                                 date_to: str = DEFAULT_DATE_TO):
        parsed_date_from = self._parse_date(date_from)
        parsed_date_to = self._parse_date(date_to)
        logging.info(
            f"Fetching transaction data incrementally based on the Insert Date ; "
            f"from {parsed_date_from} till {parsed_date_to}")
        try:
            self._fetch_and_save_data_for_all_publishers("transaction", self.client.get_publisher_transactions,
                                                         date_from=parsed_date_from, date_to=parsed_date_to)
        except EHubClientException as ehub_exc:
            raise UserException("Fetching data from eHUB failed, check your API Key and Publisher IDs") from ehub_exc

    def _fetch_and_save_data_for_all_publishers(self, object_name: str, fetcher_function: Callable, **kwargs) -> None:
        self._initialize_result_writer(object_name)
        for publisher_id in self.publisher_ids:
            self._fetch_and_save_data(object_name, fetcher_function, publisher_id, **kwargs)

    def _fetch_and_save_data(self, object_name: str, fetcher_function: Callable, publisher_id: str, **kwargs) -> None:
        for page in fetcher_function(publisher_id, **kwargs):
            page = self._add_key_value_to_data(page, "publisherId", publisher_id)
            self._get_result_writer(object_name).writerows(page)

    @staticmethod
    def _add_key_value_to_data(data: List[Dict], key: str, value: str) -> List[Dict]:
        for i, row in enumerate(data):
            data[i][key] = value
        return data

    def _initialize_result_writer(self, object_name: str) -> None:
        if object_name not in self.result_writers:
            table_schema = self.get_table_schema_by_name(object_name)
            table_definition = self.create_out_table_definition_from_schema(table_schema, incremental=self.incremental)
            writer = ElasticDictWriter(table_definition.full_path, table_definition.columns)
            self.result_writers[object_name] = {"table_definition": table_definition, "writer": writer}

    def _get_result_writer(self, object_name: str) -> ElasticDictWriter:
        return self.result_writers.get(object_name).get("writer")

    def _close_all_result_writers(self) -> None:
        for writer_name in self.result_writers:
            self._close_result_writer(writer_name)

    def _close_result_writer(self, writer_name: str) -> None:
        writer = self._get_result_writer(writer_name)
        table_definition = self.result_writers.get(writer_name).get("table_definition")
        writer.close()
        table_definition.columns = copy.deepcopy(writer.fieldnames)
        self.write_manifest(table_definition)

    @staticmethod
    def _parse_date(date_to_parse: str) -> str:
        try:
            parsed = dateparser.parse(date_to_parse)
            return parsed.strftime("%Y-%m-%dT%H:%M:%S.%f")
        except (AttributeError, TypeError) as err:
            raise UserException(f"Failed to parse date {date_to_parse}, make sure the date is either in YYYY-MM-DD "
                                f"format or relative date i.e. 5 days ago, 1 month ago, yesterday, etc.") from err


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: /src/json_parser_multi.py
================================================
from typing import Optional, List


class ParserException(Exception):
    pass


class MulitCsvJsonParser:
    def __init__(self, dont_parse_list: Optional[List]):
        self.dont_parse_list = dont_parse_list or []

    def parse_data(self, json_data, main_table_name):
        self.validate_parser_input(json_data)
        data = {}
        for row in json_data:
            parsed_row = self._parse_row_to_tables(row, main_table_name)
            for key in parsed_row:
                if key not in data:
                    data[key] = []
                data[key].extend(parsed_row[key])
        return data

    def _parse_row_to_tables(self, data_object, main_table_name):
        table_data = {main_table_name: []}

        def init_table(key):
            if key not in table_data:
                table_data[key] = []

        def parse_list(table_name, key, customer_data, current_foreign_id):
            init_table(key)
            foreign_key = f"{table_name}_id"
            for i in customer_data[key]:
                table_data[key].append({foreign_key: current_foreign_id, "value": i})

        def parse_list_of_dicts(table_name, key, customer_data, foreign_key):
            init_table(key)
            foreign_key_name = f"{table_name}_id"
            for index, d in enumerate(customer_data[key]):
                parse_nested_dict(d, key, foreign_key_name=foreign_key_name, foreign_key=foreign_key, table_index=index)

        def get_primary_key(customer_data):
            primary_key = "id"
            if "id" in customer_data:
                primary_key = customer_data["id"]
            return primary_key

        def parse_nested_dict(customer_data, table_name, foreign_key_name="", foreign_key="", table_index=0):
            primary_key = get_primary_key(customer_data)
            for index, key in enumerate(customer_data):
                type_of_var = type(customer_data[key])
                if self._is_list_of_dicts(customer_data[key]) and key not in self.dont_parse_list:
                    parse_list_of_dicts(table_name, key, customer_data, primary_key)
                elif type_of_var == dict and key not in self.dont_parse_list:
                    flatten_simple_dict(customer_data[key], table_name, table_index)
                elif type_of_var == list and key not in self.dont_parse_list:
                    parse_list(table_name, key, customer_data, primary_key)
                else:
                    parse_object(table_name, key, customer_data, foreign_key_name, foreign_key, index)

        def parse_object(table_name, key, customer_data, foreign_key_name, foreign_key, index):
            if index == 0:
                table_data[table_name].append({})
            table_size = len(table_data[table_name])
            if foreign_key_name and foreign_key:
                table_data[table_name][table_size - 1][foreign_key_name] = foreign_key
            table_data[table_name][table_size - 1][key] = customer_data[key]

        def flatten_simple_dict(data, table_name, index):
            for d_key in data:
                new_key = f"{table_name}_{d_key}"
                if len(table_data[table_name]) < index + 1:
                    table_data[table_name].append({})
                table_data[table_name][index][new_key] = data[d_key]

        parse_nested_dict(data_object, main_table_name)
        return table_data

    @staticmethod
    def _is_list_of_dicts(object_):
        type_of_var = type(object_)
        if type_of_var != list:
            return False
        return all(isinstance(i, dict) for i in object_)

    @staticmethod
    def validate_parser_input(json_data):
        if not isinstance(json_data, list):
            raise ParserException("Data input to parser must be a list of dictionaries")


================================================
File: /src/client/__init__.py
================================================
from .client import EHubClient, EHubClientException  # noqa

================================================
File: /src/client/client.py
================================================
from keboola.http_client import HttpClient
from requests.exceptions import HTTPError

BASE_URL = "https://api.ehub.cz/v3/"

PUBLISHER_ENDPOINT = "publishers"

CAMPAIGN_LIST_ENDPOINT = "campaigns"
VOUCHER_LIST_ENDPOINT = "vouchers"
CREATIVE_LIST_ENDPOINT = "creatives"
TRANSACTION_LIST_ENDPOINT = "transactions"

DEFAULT_PAGE_SIZE = 50


class EHubClientException(Exception):
    pass


class EHubClient(HttpClient):
    def __init__(self, token):
        self.token = token
        super().__init__(BASE_URL)

    def get_single_publisher_campaign(self, publisher_id: str):
        parameters = {"apiKey": self.token, "perPage": 1, "page": 1}
        return self._get_endpoint(f"{PUBLISHER_ENDPOINT}/{publisher_id}/{CAMPAIGN_LIST_ENDPOINT}", parameters)

    def get_publisher_vouchers(self, publisher_id):
        return self._get_publisher_data(publisher_id, VOUCHER_LIST_ENDPOINT, "vouchers")

    def get_publisher_transactions(self, publisher_id, date_from: str = None, date_to: str = None):
        extra_params = {}
        if date_to and date_from:
            extra_params = {"dateInsertedFrom": date_from, "dateInsertedTo": date_to}
        return self._get_publisher_data(publisher_id, TRANSACTION_LIST_ENDPOINT, "transactions", **extra_params)

    def get_publisher_creatives(self, publisher_id):
        return self._get_publisher_data(publisher_id, CREATIVE_LIST_ENDPOINT, "creatives")

    def get_publisher_campaigns(self, publisher_id):
        return self._get_publisher_data(publisher_id, CAMPAIGN_LIST_ENDPOINT, "campaigns")

    def _get_publisher_data(self, publisher_id, endpoint, object_name, **extra_params):
        endpoint_path = f"{PUBLISHER_ENDPOINT}/{publisher_id}/{endpoint}"
        # IMPORTANT PAGINATION STARTS AT 1 (for some reason)
        parameters = {"apiKey": self.token, "perPage": DEFAULT_PAGE_SIZE, "page": 1, **extra_params}
        return self._paginate_endpoint(endpoint_path, parameters, object_name)

    def _paginate_endpoint(self, endpoint, parameters, data_object):
        has_more = True
        while has_more:
            response = self._get_endpoint(endpoint, parameters)
            yield response.get(data_object)
            if response.get("totalItems") <= parameters.get("page") * 50:
                has_more = False
            parameters["page"] += 1

    def _get_endpoint(self, endpoint, parameters):
        try:
            return self.get(endpoint_path=endpoint, params=parameters)
        except HTTPError as http_err:
            raise EHubClientException(http_err) from http_err


================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: /component_config/logger
================================================
gelf

================================================
File: /component_config/component_long_description.md
================================================
This component allows you to fetch data from the  Publisher endpoints of the eHub API

================================================
File: /component_config/component_short_description.md
================================================
eHub is an Internet marketing service. It is used for affiliate marketing

================================================
File: /component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: /component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "eHUB Authorization",
  "required": [
    "#api_token",
    "publisher_ids"
  ],
  "properties": {
    "#api_token": {
      "type": "string",
      "title": "API Key",
      "format": "password",
      "propertyOrder": 10
    },
    "publisher_ids": {
      "type": "string",
      "title": "Publisher IDs",
      "description": "Comma separated list of Publisher IDs",
      "propertyOrder": 20
    },
    "test_connection": {
      "type": "button",
      "format": "test-connection",
      "propertyOrder": 30
    }
  }
}


================================================
File: /component_config/configRowSchema.json
================================================
{
  "type": "object",
  "id": "rootschema",
  "required": [
    "fetch_campaigns",
    "fetch_vouchers",
    "fetch_creatives",
    "fetch_transactions"
  ],
  "properties": {
    "fetch_campaigns": {
      "type": "boolean",
      "title": "Fetch Campaigns",
      "description": "Fetch all publisher campaign data",
      "propertyOrder": 20,
      "format": "checkbox",
      "default": true
    },
    "fetch_vouchers": {
      "type": "boolean",
      "title": "Fetch Vouchers",
      "description": "Fetch all publisher voucher data",
      "propertyOrder": 30,
      "format": "checkbox",
      "default": true
    },
    "fetch_creatives": {
      "type": "boolean",
      "title": "Fetch Creatives",
      "description": "Fetch all publisher creatives data",
      "propertyOrder": 40,
      "format": "checkbox",
      "default": true
    },
    "fetch_transactions": {
      "type": "boolean",
      "title": "Fetch Transactions",
      "description": "Fetch all publisher transaction data",
      "propertyOrder": 50,
      "format": "checkbox",
      "default": true
    },
    "transaction_options": {
      "type": "object",
      "title": "Transactions Fetching Options",
      "propertyOrder": 60,
      "properties": {
        "fetch_mode": {
          "type": "string",
          "title": "Fetch Mode",
          "required": true,
          "enum": [
            "full_fetch",
            "incremental_fetch"
          ],
          "options": {
            "enum_titles": [
              "Fetch all data",
              "Fetch data incrementally"
            ]
          },
          "propertyOrder": 10,
          "default": true
        },
        "date_from": {
          "type": "string",
          "title": "Fetch From Date",
          "options": {
            "dependencies": {
              "fetch_mode": [
                "incremental_fetch"
              ]
            }
          },
          "default": "1 week ago",
          "description": "Used for fetching the data with the dateInsertedFrom filter. The date should be in YYYY-MM-DD format or relative date i.e. 5 days ago, yesterday, etc.",
          "propertyOrder": 30
        },
        "date_to": {
          "type": "string",
          "title": "Fetch To Date",
          "options": {
            "dependencies": {
              "fetch_mode": [
                "incremental_fetch"
              ]
            }
          },
          "default": "now",
          "description": "Used for fetching the data with the dateInsertedTo filter. The date should be in YYYY-MM-DD format or relative date i.e. 5 days ago, yesterday, etc.",
          "propertyOrder": 40
        }
      },
      "options": {
        "dependencies": {
          "fetch_transactions": true
        }
      }
    },
    "destination_settings": {
      "title": "Destination",
      "type": "object",
      "propertyOrder": 70,
      "properties": {
        "load_mode": {
          "type": "string",
          "required": true,
          "enum": [
            "full_load",
            "incremental_load"
          ],
          "options": {
            "enum_titles": [
              "Full Load",
              "Incremental Load"
            ]
          },
          "default": "incremental_load",
          "title": "Load Mode",
          "description": "If Full load is used, the destination table will be overwritten every run. If incremental load is used, data will be upserted into the destination table. Tables with a primary key will have rows updated, tables without a primary key will have rows appended.",
          "propertyOrder": 20
        }
      }
    }
  }
}

================================================
File: /component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: /component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /requirements.txt
================================================
keboola.component==1.4.0
keboola.csvwriter==1.0.1
dateparser~=1.1.1
keboola.utils
keboola.http-client
mock
freezegun


================================================
File: /TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

================================================
File: /Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /README.md
================================================
eHUB Publisher Extractor
=============

eHub is an Internet marketing service. It is used for affiliate marketing

This component allows you to fetch data from the Publisher endpoints of the eHub API

**Table of contents:**

[TOC]

Supported endpoints
===================

* Campaigns
* Vouchers
* Creative
* Transactions

If you need more endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/)

Prerequisites
=============

Get the API token on the [API page of eHUB](https://pm.ehub.cz/api/), this page also contains the Publisher IDs of your
account

Configuration
=============

- API Key (#api_token) - [REQ] API key generated in eHUB
- Publisher IDs (publisher_ids) - [REQ] Comma separated list of Publisher IDs
- Fetch Campaigns (fetch_campaigns) - [REQ] boolean, if true fetch publisher campaign data
- Fetch Vouchers (fetch_vouchers) - [REQ] boolean, if true fetch publisher voucher data
- Fetch Creatives (fetch_creatives) - [REQ] boolean, if true fetch publisher creatives data
- Fetch Transactions (fetch_transactions) - [REQ] boolean, if true fetch publisher transaction data
- Transactions Fetching Options (transaction_options) - [OPT] Options on how to fetch transaction data
    - Fetch Mode (fetch_mode) - [OPT] either 'full_fetch'; get all historical, or 'incremental_fetch' to fetch data based on from and to date
    - Fetch From Date (date_from) - [OPT] Used for fetching the data with the dateInsertedFrom filter. The date should
      be in YYYY-MM-DD format or relative date i.e. 5 days ago, yesterday, etc.
    - Fetch To Date (date_to) - [OPT] Used for fetching the data with the dateInsertedTo filter. The date should be
      in YYYY-MM-DD format or relative date i.e. 5 days ago, yesterday, etc.
- Destination (destination_settings) - [OPT] description
    - Load Mode (load_mode) - [OPT] If Full load is used, the destination table will be overwritten every run. If
      incremental load is used, data will be upserted into the destination table. Tables with a primary key will have
      rows updated, tables without a primary key will have rows appended.

Sample Configuration
=============

```json
{
  "parameters": {
    "#api_token": "SECRET_VALUE",
    "publisher_ids": "SECRET_VALUE",
    "fetch_campaigns": true,
    "fetch_vouchers": true,
    "fetch_creatives": true,
    "fetch_transactions": true,
    "transaction_options": {
      "fetch_mode": "incremental_fetch",
      "date_from": "5 week ago",
      "date_to": "now"
    },
    "destination_settings": {
      "load_mode": "incremental_load"
    }
  }
}
```

Output
======

List of tables, foreign keys, schema.

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in
the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)

