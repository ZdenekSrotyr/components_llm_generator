Directory structure:
└── kds_consulting_team-kds-team.app-gd-maql-executioner/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── scripts/
    │   ├── build_n_test.sh
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── main.py
    │   └── lib/
    │       ├── client.py
    │       └── component.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
File: README.md
================================================
# MAQL Executioner for GoodData

MAQL is an analytical language used in GoodData to perform all analytical tasks. This component allows to execute a MAQL query against a GoodData project and perform various integration. For MAQL reference, refer to [MAQL documentation](https://help.gooddata.com/doc/en/reporting-and-dashboards/maql-analytical-query-language).

Further reference:
- [list datasets by project](https://help.gooddata.com/display/API/API+Reference#/reference/data-integration/list-datasets-by-project/list-datasets-by-project),
- [acquiring object identifiers](https://help.gooddata.com/doc/en/project-and-user-administration/administering-projects-and-project-objects/acquiring-object-identifiers-for-project-metadata)
- [deleting records from dataset](https://help.gooddata.com/doc/en/building-on-gooddata-platform/data-preparation-and-distribution/additional-data-load-reference/data-load-tutorials/deleting-records-from-datasets)

### Use cases

The component can be used for automated deletion of records from certain datasets.

#### Date based deletion

To delete records from dataset based on date value, you can specify an input table with one row and column, which would contain the date value (e.g. `2017-01-01`) and then specify the following query:

```
DELETE FROM {attr.dataset.factsof} WHERE {datetransportbegin.keboola.date.yyyymmdd} < "{{ROW}}";
```

The `{{ROW}}` would be automatically replaced by value from the input table.

#### Attribute value based deletion

To delete records matching certain criteria, conditions can be specified in the input table. A condition can be anything, a list of values or a single value.

For the query:

```
DELETE FROM {attr.dataset.factsof} WHERE {label.dataset.attribute} IN {{ROW}}
```

and specify values in the input table, for example: `("1234532", "attributeValue")` and in the next row `("nextValue")`. All of the values specified in the input table will be inputed instead of `{{ROW}}` and executed.

## Configuration

A sample of the configuration can be found in the [component's repository](https://bitbucket.org/kds_consulting_team/kds-team.app-gd-maql-executioner/src/master/component_config/sample-config/).

### Parameters

The component accepts following parameters:

- login - login to GoodData, must have admin privileges,
- password - password associated with login,
- project ID - GoodData project ID,
- query - a MAQL query, which will be executed. If a row placeholder `{{ROW}}` is present in the query and a input table is specified, all of the rows in the input table are inputted into the query instead of the placeholder, one-by-one,
- custom domain (opt.) - if whitelabelled domain is used, specify it.


================================================
File: Dockerfile
================================================
FROM python:3.7.2-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential
RUN pip install flake8
RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python3", "-u", "/code/src/main.py"]



================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
File: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        script:
          - export APP_IMAGE=$APP_IMAGE
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
#          - echo 'Pushing test image to repo. [tag=test]'
#          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#          - docker tag $APP_IMAGE:latest $REPOSITORY:test
#          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
File: change_log.md
================================================
**0.0.2**
Added integration for executing queries without specified input table.

**0.0.1**
Working version of the component able to execute MAQL queries.


================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi



================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
File: requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.4.zip#egg=kbc
logging_gelf==0.0.18


================================================
File: component_config/component_long_description.md
================================================
# MAQL Executioner for GoodData

MAQL is an analytical language used in GoodData to perform all analytical tasks. This component allows to execute a MAQL query against a GoodData project and perform various integration. For MAQL reference, refer to [MAQL documentation](https://help.gooddata.com/doc/en/reporting-and-dashboards/maql-analytical-query-language).

Further reference:
- [list datasets by project](https://help.gooddata.com/display/API/API+Reference#/reference/data-integration/list-datasets-by-project/list-datasets-by-project),
- [acquiring object identifiers](https://help.gooddata.com/doc/en/project-and-user-administration/administering-projects-and-project-objects/acquiring-object-identifiers-for-project-metadata)
- [deleting records from dataset](https://help.gooddata.com/doc/en/building-on-gooddata-platform/data-preparation-and-distribution/additional-data-load-reference/data-load-tutorials/deleting-records-from-datasets)

### Use cases

The component can be used for automated deletion of records from certain datasets.

#### Date based deletion

To delete records from dataset based on date value, you can specify an input table with one row and column, which would contain the date value (e.g. `2017-01-01`) and then specify the following query:

```
DELETE FROM {attr.dataset.factsof} WHERE {datetransportbegin.keboola.date.yyyymmdd} < "{{ROW}}";
```

The `{{ROW}}` would be automatically replaced by value from the input table.

#### Attribute value based deletion

To delete records matching certain criteria, conditions can be specified in the input table. A condition can be anything, a list of values or a single value.

For the query:

```
DELETE FROM {attr.dataset.factsof} WHERE {label.dataset.attribute} IN {{ROW}}
```

and specify values in the input table, for example: `("1234532", "attributeValue")` and in the next row `("nextValue")`. All of the values specified in the input table will be inputed instead of `{{ROW}}` and executed.


================================================
File: component_config/component_short_description.md
================================================
MAQL is an analytical language used by GoodData.


================================================
File: component_config/configSchema.json
================================================
{
  "title": "Parameters",
  "type": "object",
  "required": [
      "username",
      "#password",
      "projectId",
      "customDomain",
      "query"
  ],
  "properties": {
      "username": {
          "type": "string",
          "title": "Login",
          "description": "The email address used to log in to GoodData. Must have <strong>admin</strong> privileges.",
          "propertyOrder": 100
      },
      "#password": {
          "type": "string",
          "format": "password",
          "propertyOrder": 200,
          "title": "Password",
          "description": "Password associated with the login."
      },
      "projectId": {
        "type": "string",
        "title": "Project ID",
        "description": "GoodData project ID.",
        "propertyOrder": 300
    },
    "customDomain": {
      "type": "string",
      "title": "Custom domain",
      "description": "If project is white-labeled, specify the custom domain in format <i>https://domain.gooddata.com</i>.</br>Defaults for regions: <ul><li>US, AP - <i>https://secure.gooddata.com/</i>,</li><li>EU - <i>https://keboola.eu.gooddata.com/</i>.</li>",
      "propertyOrder": 400
  },
      "query": {
          "type": "string",
          "format": "textarea",
          "options": {
              "input_height": "100px"
            },
          "default": "SYNCHRONIZE {dataset.data1};",
          "propertyOrder": 500,
          "title": "Query",
          "description": "A valid MAQL query. For MAQL reference refer to <a href='https://help.gooddata.com/doc/en/reporting-and-dashboards/maql-analytical-query-language'>MAQL documentation</a>."
      }
  }
}


================================================
File: component_config/configuration_description.md
================================================
The component accepts following parameters:

- login - login to GoodData, must have admin privileges,
- password - password associated with login,
- project ID - GoodData project ID,
- query - a MAQL query, which will be executed. If a row placeholder `{{ROW}}` is present in the query and a input table is specified, all of the rows in the input table are inputted into the query instead of the placeholder, one-by-one,
- custom domain (opt.) - if whitelabelled domain is used, specify it.


================================================
File: component_config/stack_parameters.json
================================================
{
    "connection.keboola.com": {
      "gooddataUrl": "https://secure.gooddata.com"
    },
    "connection.eu-central-1.keboola.com": {
      "gooddataUrl": "https://keboola.eu.gooddata.com"
    },
    "connection.ap-southeast-2.keboola.com": {
        "gooddataUrl": "https://secure.gooddata.com"
    }
  }


================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "columns": ["parcelId"],
          "where_values": []
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "username": "testy@mctestface.com",
    "#password": "pswd1234",
    "projectId": "projectid12345678",
    "customDomain": "",
    "query": "DELETE FROM {attr.outcmainfact_parcel.factsof} WHERE {label.outcmainfact_parcel.parcel_id} IN {{ROW}}"
  },
  "image_parameters": {
    "gooddataUrl": "https://keboola.eu.gooddata.com"
  }
}



================================================
File: component_config/sample-config/in/state.json
================================================
{}


================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"parcelId"
"(""12345678"")"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "parcelId"
    ],
    "metadata": []
}


================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi


================================================
File: src/main.py
================================================
import logging
import os
import sys
import logging_gelf.handlers
import logging_gelf.formatters
from lib.component import MAQLComponent

# Environment setup
sys.tracebacklimit = 0

# Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)-8s : [line:%(lineno)3s] %(message)s',
    datefmt="%Y-%m-%d %H:%M:%S")

if 'KBC_LOGGER_ADDR' in os.environ and 'KBC_LOGGER_PORT' in os.environ:

    logger = logging.getLogger()
    logging_gelf_handler = logging_gelf.handlers.GELFTCPSocketHandler(
        host=os.getenv('KBC_LOGGER_ADDR'), port=int(os.getenv('KBC_LOGGER_PORT')))
    logging_gelf_handler.setFormatter(
        logging_gelf.formatters.GELFFormatter(null_character=True))
    logger.addHandler(logging_gelf_handler)

    # remove default logging to stdout
    logger.removeHandler(logger.handlers[0])

APP_VERSION = '0.0.3'

if __name__ == '__main__':

    logging.info("Running component version %s..." % APP_VERSION)
    c = MAQLComponent()
    c.run()
    logging.info("MAQL execution finished!")



================================================
File: src/lib/client.py
================================================
import json
import logging
import os
import sys
import time
from kbc.client_base import HttpClientBase


class MAQLClient(HttpClientBase):

    def __init__(self, username, password, projectId, baseGoodDataUrl):

        self.paramUsername = username  # don't forget to lower this
        self.paramPassword = password
        self.paramProjectId = projectId
        self.paramBaseGoodDataUrl = baseGoodDataUrl

        HttpClientBase.__init__(
            self, base_url=self.paramBaseGoodDataUrl, max_retries=10)

        self._getSstToken()

    def _getSstToken(self):

        reqHeaders = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        reqBody = json.dumps({
            "postUserLogin": {
                "login": self.paramUsername,
                "password": self.paramPassword,
                "remember": 1,
                "verify_level": 2
            }
        })

        reqUrl = os.path.join(self.base_url, 'gdc/account/login')

        respObj = self.post_raw(url=reqUrl, headers=reqHeaders, data=reqBody)
        respSc, respJs = respObj.status_code, respObj.json()

        if respSc == 200:

            self.varSstToken = respJs['userLogin']['token']
            logging.info("SST token obtained.")

        else:

            logging.error("Could not obtain SST token.")
            logging.error("Received: %s - %s." % (respSc, respJs))
            sys.exit(1)

    def _getTtToken(self):

        reqHeaders = {
            'Accept': 'application/json',
            'X-GDC-AuthSST': self.varSstToken
        }

        reqUrl = os.path.join(self.base_url, 'gdc/account/token')

        respObj = self.get_raw(url=reqUrl, headers=reqHeaders)
        respSc, respJs = respObj.status_code, respObj.json()

        if respSc == 200:

            self.varTtToken = respJs['userToken']['token']

        else:

            logging.error("There was an error, when obtaining TT token.")
            logging.error("Received: %s - %s" % (respSc, respJs))
            sys.exit(2)

    def _buildHeader(self):

        self._getTtToken()

        _headerTemplate = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'X-GDC-AuthTT': self.varTtToken
        }

        self.reqHeader = _headerTemplate

    def sendQuery(self, query):

        self._buildHeader()

        reqBody = json.dumps({
            'manage': {
                'maql': query
            }
        })

        reqUrl = os.path.join(self.base_url, f'gdc/md/{self.paramProjectId}/dml/manage')
        logging.info("Executing query \"%s\"." % query)

        respObj = self.post_raw(url=reqUrl, headers=self.reqHeader, data=reqBody)
        respSc, respJs = respObj.status_code, respObj.json()

        if respSc == 200:

            return respJs['uri'].split('/')[-1]

        else:

            logging.error("Could not start an ETL task.")
            logging.error("Received: %s - %s." % (respSc, respJs))
            logging.error("Application failed at query: %s" % query)
            sys.exit(1)

    def checkEtlStatus(self, integrationId):

        self._buildHeader()

        reqUrl = os.path.join(self.base_url, f'gdc/md/{self.paramProjectId}/etltask/{integrationId}')
        jobRunning = True

        logging.info("Checking job info at %s." % reqUrl)
        startTime = time.time()

        while jobRunning is True:

            respReq = self.get_raw(url=reqUrl, headers=self.reqHeader)
            respSc, respJs = respReq.status_code, respReq.json()

            if respSc == 401:
                self._buildHeader()
                continue

            taskStateMsg = respJs['taskState']['msg']
            taskStateStatus = respJs['taskState']['status']

            if taskStateStatus == 'RUNNING':

                elapsedTime = int(time.time() - startTime)
                if (elapsedTime % 600) == 0:
                    logging.info(f"ETL task {integrationId} is still running.")

                time.sleep(5)

            elif taskStateStatus == 'ERROR':

                logging.error("There was an error for ETL task %s." % integrationId)
                logging.error("Received: %s - %s." % (taskStateMsg, taskStateStatus))
                sys.exit(1)
                jobRunning = False

            elif taskStateStatus == 'OK':

                endTime = time.time()
                elapsedTime = int(endTime - startTime)
                logging.info("Task successful. Elapsed time: %ss." % elapsedTime)
                jobRunning = False

            else:

                logging.error("Unhandled exception.")
                logging.error("Exception: %s - %s." % (taskStateStatus, taskStateMsg))
                sys.exit(2)



================================================
File: src/lib/component.py
================================================
import csv
import json
import logging
import re
import sys
from lib.client import MAQLClient
from kbc.env_handler import KBCEnvHandler


KEY_USERNAME = 'username'
KEY_PASSWORD = '#password'
KEY_PROJECTID = 'projectId'
KEY_CUSTOMDOMAIN = 'customDomain'
KEY_QUERY = 'query'
KEY_GDURL = 'gooddataUrl'

MANDATORY_PARAMETERS = [KEY_USERNAME, KEY_PASSWORD, KEY_PROJECTID, KEY_QUERY]


class MAQLComponent(KBCEnvHandler):

    def __init__(self):

        KBCEnvHandler.__init__(self, MANDATORY_PARAMETERS)
        self.validate_config(MANDATORY_PARAMETERS)

        self.paramUsername = self.cfg_params[KEY_USERNAME]
        self.paramPassword = self.cfg_params[KEY_PASSWORD]
        self.paramProjectId = self.cfg_params[KEY_PROJECTID]
        self.paramCustomDomain = self.cfg_params[KEY_CUSTOMDOMAIN]
        self.paramQuery = self.cfg_params[KEY_QUERY]
        self.paramGooddataUrl = self.image_params[KEY_GDURL]

        self._processAndValidateParameters()
        self._getInputTables()

        self.client = MAQLClient(username=self.paramUsername,
                                 password=self.paramPassword,
                                 projectId=self.paramProjectId,
                                 baseGoodDataUrl=self.paramGooddataUrl)

    def _processAndValidateParameters(self):

        custDomain = re.sub(r'\s', '', self.paramCustomDomain)

        if custDomain != '':

            rxgString = r'https://.*\.gooddata\.com/*'
            rgxCheck = re.fullmatch(rxgString, custDomain)

            if rgxCheck is None:

                logging.error("%s is not a valid GoodData domain." %
                              custDomain)
                sys.exit(1)

            else:

                self.paramGooddataUrl = custDomain

        logging.info("Using domain %s." % self.paramGooddataUrl)

        maqlQuery = re.sub(r'\s', ' ', self.paramQuery).strip()

        if maqlQuery == '':

            logging.error("No query was specified.")
            sys.exit(1)

        else:

            self.paramQuery = maqlQuery

    def _getInputTables(self):

        if '{{ROW}}' in self.paramQuery:

            inputTables = self.configuration.get_input_tables()
            logging.debug(inputTables)

            if len(inputTables) == 0:

                logging.error("No input tables provided.")
                sys.exit(1)

            elif len(inputTables) > 1:

                logging.error("Multiple input tables provided. Please specify a single table.")
                sys.exit(1)

            inputTablePath = inputTables[0]['full_path']

            with open(inputTablePath + '.manifest') as manFile:

                manifest = json.load(manFile)

            inputTableColumns = manifest['columns']

            if len(inputTableColumns) != 1:

                logging.error("Please specify only one column in the input table.")
                sys.exit(1)

            else:

                self.varInputTablePath = inputTables[0]['full_path']

        else:

            self.varInputTablePath = None

    def run(self):

        if self.varInputTablePath is not None:

            with open(self.varInputTablePath) as inFile:

                reader = csv.reader(inFile)
                next(reader)

                for row in reader:

                    maqlQuery = re.sub('{{ROW}}', row[0], self.paramQuery)
                    logging.debug("Query:")
                    logging.debug(maqlQuery)

                    integrationId = self.client.sendQuery(maqlQuery)
                    self.client.checkEtlStatus(integrationId)

        else:

            integrationId = self.client.sendQuery(self.paramQuery)
            self.client.checkEtlStatus(integrationId)



================================================
File: tests/__init__.py
================================================



================================================
File: tests/test_component.py
================================================


