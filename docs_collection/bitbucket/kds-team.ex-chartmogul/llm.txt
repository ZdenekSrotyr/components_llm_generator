Directory structure:
└── kds_consulting_team-kds-team.ex-chartmogul/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── .travis.yml
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   └── chartmogul_client/
    │       ├── client.py
    │       ├── mappings.json
    │       └── mappings.py
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            ├── build_n_test.yml
            └── deploy.yml

================================================
FILE: README.md
================================================
# Chartmogul Data Source Connector

ChartMogul is the leading subscription analytics platform to measure, understand, and grow recurring revenue of subscription businesses.
This component allows users to extract ChartMogul subscription data from the ChartMogul API. 

**Table of Contents**

[TOC]

## Configuration

### Authorization

To run this component, API keys are required. API keys must be `Active` with at least `Read` access level.

#### Obtaining API tokens
    Follow these steps in your ChartMogul web app:
      1. [Profile] - bottom left corner of the platform
      2. [Admin]
      3. Click on the user you wish to authorize as
      4. API Keys

### Row configuration
  - Endpoint - [REQ]
      1. `activities`
      2. `customers`
      3. `customers_subscriptions` - endpoint `customers` extraction will be inclusive with this endpoint
      4. `invoices`
      5. `key_metrics`
  - Incremental Load
  - Start date - [REQ for `key_metrics`][OPT for `activities`] 
      - Start date of the request. E.g., 2021-01-01, 1 day ago, 2 weeks ago
  - End date - [REQ for `key_metrics`][OPT for `activities`] 
      - End date of the request. E.g., 2021-01-01, 1 day ago, 2 weeks ago
      - If End Date is specified for `activities`, Start Date is also required.
  - Interval - [REQ for `key_metrics`]
      1. day
      2. week
      3. month
  - Geo [OPT for `key_metrics`]
      - A comma-separated list of ISO 3166-1 Alpha-2 formatted country codes to filter the results (e.g., US, GB, DE)
  - Plans [OPT for `key_metrics`]
      - A comma-separated list of plan names (as configured in your ChartMogul account) to filter the results. Note: Spaces must be URL-encoded and the names are case-sensitive (e.g., Silver%20plan,Gold%20plan,Enterprise%20plan).

  ### Sample configuration parameters
  ``` json
  {
    "parameters": {
        "#api_token": "123456789",
        "incrementalLoad": false,
        "endpoints": "key_metrics",
        "additional_params_activities": {
            "end-date": "",
            "start-date": ""
        },
        "additional_params_key_metrics": {
            "geo": "",
            "plans": "",
            "end-date": "2021-12-15",
            "interval": "week",
            "start-date": "2021-01-01"
        }
    }
  }
  ```

Supported endpoints
===================

If you need more endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/).


Development
===================

If required, change the local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the docker-compose file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace, and run the component with the following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with Keboola, please refer to the
[deployment section of our developer
documentation](https://developers.keboola.com/extend/component/deployment/).



================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          # - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            # - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            # - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.11-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential git

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
keboola.component==1.4.3
git+https://github.com/SgtMarmite/python-http-client.git@async-http-client
keboola.utils
keboola.json-to-csv==0.0.12
mock
freezegun
backoff
chartmogul==3.1.2
urllib3
dateparser
keboola.csvwriter
aiolimiter



================================================
FILE: .travis.yml
================================================
sudo: false

services:
  - docker

jobs:
  include:
    - stage: tests
      script:
        - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
        - docker run $APP_IMAGE python -m unittest discover
      # push test image to ECR - uncomment for testing before deployment
      #  - docker pull quay.io/keboola/developer-portal-cli-v2:latest
      #  - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
      #  - docker tag $APP_IMAGE:latest $REPOSITORY:test
      #  - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
      #  - docker push $REPOSITORY:test
      #  - docker pull quay.io/keboola/syrup-cli:latest
    - stage: deploy_dev_portal
      if: branch = master
      script: "./scripts/update_dev_portal_properties.sh"

before_script:
  - export APP_IMAGE=keboola-component
  - docker -v
  - docker build -t $APP_IMAGE .
  - chmod +x ./scripts/update_dev_portal_properties.sh
  - chmod +x ./deploy.sh

after_success:
  - docker images

deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh
  on:
    tags: true
    branch: master



================================================
FILE: component_config/component_long_description.md
================================================
ChartMogul is the leading subscription analytics platform. It provides subscription analytics and revenue recognition solutions to subscription businesses so they can measure, understand, and grow their recurring revenue.

This connector fetches subscription data from the ChartMogul API (activities, customers, subscriptions, invoices, and key metrics for deeper insights).


================================================
FILE: component_config/component_short_description.md
================================================
ChartMogul is a real-time reporting and analytics solution for subscription businesses.


================================================
FILE: component_config/configRowSchema.json
================================================
{
    "type": "object",
    "title": "Row configuration",
    "required": [
        "endpoints",
        "incrementalLoad"
    ],
    "properties": {
        "endpoints": {
            "type": "string",
            "title": "Endpoint",
            "enum": [
                "activities",
                "customers",
                "customers_subscriptions",
                "invoices",
                "key_metrics"
            ],
            "default": "customers",
            "description": "[customers] will be included in the extraction in [customers_subscriptions].",
            "propertyOrder": 100
        },
        "incrementalLoad": {
            "type": "boolean",
            "title": "Incremental load",
            "format": "checkbox",
            "propertyOrder": 200
        },
        "additional_params_activities": {
            "title": "Additional query parameters",
            "type": "object",
            "options": {
                "dependencies": {
                    "endpoints": "activities"
                }
            },
            "required": [
                "start-date",
                "end-date"
            ],
            "properties": {
                "start-date": {
                    "type": "string",
                    "title": "Start date",
                    "description": "[Optional] — Example: 2021-01-01, 1 day ago, 2 weeks ago",
                    "propertyOrder": 500
                },
                "end-date": {
                    "type": "string",
                    "title": "End date",
                    "description": "[Optional] — Example: 2021-01-01, 1 day ago, 2 weeks ago",
                    "propertyOrder": 600
                }
            },
            "propertyOrder": 400
        },
        "additional_params_key_metrics": {
            "title": "Additional query parameters",
            "type": "object",
            "options": {
                "dependencies": {
                    "endpoints": "key_metrics"
                }
            },
            "required": [
                "start-date",
                "end-date",
                "interval",
                "geo",
                "plans"
            ],
            "properties": {
                "start-date": {
                    "type": "string",
                    "title": "Start date",
                    "description": "[Required] — Example: 2021-01-01, 1 day ago, 2 weeks ago",
                    "propertyOrder": 500
                },
                "end-date": {
                    "type": "string",
                    "title": "End date",
                    "description": "[Required] — Example: 2021-01-01, 1 day ago, 2 weeks ago",
                    "propertyOrder": 600
                },
                "interval": {
                    "type": "string",
                    "title": "Interval",
                    "enum": [
                        "month",
                        "week",
                        "day"
                    ],
                    "default": "month",
                    "propertyOrder": 700
                },
                "geo": {
                    "type": "string",
                    "title": "Geo",
                    "description": "[Optional] A comma-separated list of ISO 3166-1 Alpha-2 formatted country codes to filter the results (e.g., US, GB, DE).",
                    "propertyOrder": 800
                },
                "plans": {
                    "type": "string",
                    "title": "Plans",
                    "description": "[Optional] A comma-separated list of plan names (as configured in your ChartMogul account) to filter the results. Note: Spaces must be URL-encoded and the names are case-sensitive (e.g., Silver%20plan,Gold%20plan,Enterprise%20plan).",
                    "propertyOrder": 900
                }
            },
            "propertyOrder": 400
        }
    }
}


================================================
FILE: component_config/configSchema.json
================================================
{
    "type": "object",
    "title": "Authentication",
    "required": [
        "#api_token"
    ],
    "properties": {
        "#api_token": {
            "type": "string",
            "format": "password",
            "title": "API Token",
            "propertyOrder": 100
        }
    }
}


================================================
FILE: component_config/configuration_description.md
================================================
### Authorization

To run this component, API keys are required. API keys are required to be `Active` and contains `Read` as a minimum access level.

#### Obtaining API Tokens
    Follow path below in your ChartMogul web app:
      1. [Profile] - bottom left corner of the platform
      2. [Admin]
      3. Click on the user you wish to authorize as
      4. API Keys

### Row configuration
  - Endpoint - [REQ]
      1. `activities`
      2. `customers`
      3. `customers_subscriptions` - endpoint `customers` extraction will be inclusive with this endpoint
      4. `invoices`
      5. `key_metrics`
  - Incremental Load
  - Start date - [REQ for `key_metrics`][OPT for `activities`] 
      - Start date of the request. Eg: 2021-01-01, 1 day ago, 2 weeks ago
  - End date - [REQ for `key_metrics`][OPT for `activities`] 
      - End date of the request. Eg: 2021-01-01, 1 day ago, 2 weeks ago
      - If End Date is specified for `activities`, Start Date will be required.
  - Interval - [REQ for `key_metrics`]
      1. day
      2. week
      3. month
  - Geo [OPT for `key_metrics`]
      - A comma-separated list of ISO 3166-1 Alpha-2 formatted country codes to filter the results to, e.g. US,GB,DE
  - Plans [OPT for `key_metrics`]
      - A comma-separated list of plan names (as configured in your ChartMogul account) to filter the results to. Note that spaces must be url-encoded and the names are case-sensitive, e.g. Silver%20plan,Gold%20plan,Enterprise%20plan.



================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
      "input": {
          "files": [],
          "tables": [
              {
                  "source": "in.c-test.test",
                  "destination": "test.csv",
                  "limit": 50,
                  "columns": [],
                  "where_values": [],
                  "where_operator": "eq"
              }
          ]
      },
      "output": {
          "files": [],
          "tables": []
      }
  },
  "parameters": {
      "#api_token": "API_TOKEN",
      "incrementalLoad": false,
      "endpoints": "key_metrics",
      "additional_params_activities": {
          "end-date": "",
          "start-date": ""
      },
      "additional_params_key_metrics": {
          "geo": "",
          "plans": "",
          "end-date": "2021-12-15",
          "interval": "week",
          "start-date": "2021-01-01"
      }
  },
  "action": "run",
  "image_parameters": {
      "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
      "oauth_api": {
          "id": "OAUTH_API_ID",
          "credentials": {
              "id": "main",
              "authorizedFor": "Myself",
              "creator": {
                  "id": "1234",
                  "description": "me@keboola.com"
              },
              "created": "2016-01-31 00:13:30",
              "#data": "{\"refresh_token\":\"XXXXX-TOKEN\"}",
              "oauthVersion": "2.0",
              "appKey": "12345",
              "#appSecret": "123qwe-CiN"
          }
      }
  }
}


================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
FILE: src/component.py
================================================
import asyncio
import dateparser
import json
import logging
import os
import shutil

from keboola.component.base import ComponentBase
from keboola.component.exceptions import UserException
from keboola.csvwriter import ElasticDictWriter

import chartmogul

from chartmogul_client.client import ChartMogulClient, ChartMogulClientException
from chartmogul_client.mappings import pkeys_map

# configuration variables
KEY_API_TOKEN = '#api_token'
KEY_INCREMENTAL_LOAD = 'incrementalLoad'
KEY_ENDPOINT = 'endpoints'
KEY_ADDITIONAL_PARAMS = 'additional_params_'
KEY_DEBUG = 'debug'

REQUIRED_PARAMETERS = [
    KEY_API_TOKEN,
    KEY_INCREMENTAL_LOAD,
    KEY_ENDPOINT
]


class Component(ComponentBase):

    def __init__(self):
        super().__init__()
        self.state_columns = {}

    def run(self):
        params = self.configuration.parameters
        debug = params.get(KEY_DEBUG, False)
        self.validate_params(params)

        endpoint = params.get(KEY_ENDPOINT)
        previous_state = self.get_state_file()
        self.state_columns = previous_state.get("columns", {})
        incremental = params.get(KEY_INCREMENTAL_LOAD)

        # Setting up additional params (on key_metrics endpoint actually uses statefile data)
        if endpoint in ['activities', 'key_metrics']:
            additional_params = params.get(KEY_ADDITIONAL_PARAMS+endpoint, {})
            logging.info(f"Using additional params: {additional_params}")
        else:
            additional_params = {}

        # Parse date into the required format
        if additional_params.get('start-date'):
            additional_params['start-date'] = dateparser.parse(additional_params['start-date']).strftime("%Y-%m-%d")
        if additional_params.get('end-date'):
            additional_params['end-date'] = dateparser.parse(additional_params['end-date']).strftime("%Y-%m-%d")

        temp_path = os.path.join(self.data_folder_path, "temp")

        cm_client = ChartMogulClient(
            api_token=params.get(KEY_API_TOKEN),
            incremental=incremental,
            state=previous_state,
            destination=temp_path,
            debug=debug)

        # Process endpoint
        try:
            logging.info(f"Processing endpoint: {endpoint}")
            result_mapping = asyncio.run(cm_client.fetch(endpoint=endpoint, additional_params=additional_params))
        except ChartMogulClientException as e:
            raise UserException(f"Failed to fetch data from endpoint {endpoint}, exception: {e}")

        if os.path.isdir(temp_path):
            for subfolder in os.listdir(temp_path):
                self.process_subfolder(temp_path, subfolder, self.tables_out_path, result_mapping, incremental)

        new_statefile = {"columns": {table: self.state_columns.get(table) for table in self.state_columns}}

        self.write_state_file(new_statefile)

        # Clean temp folder (primarily for local runs)
        shutil.rmtree(temp_path)

    def process_subfolder(self, temp_path: str, subfolder: str, tables_out_path: str, result_mapping: dict,
                          incremental: bool):
        """
        Process a subfolder containing JSON files, write valid rows to an output table, and update state information.

        Args:
            temp_path (str): The path to the temporary directory containing the subfolder.
            subfolder (str): The name of the subfolder to process.
            tables_out_path (str): The path to the directory where output tables will be saved.
            result_mapping (dict): TableMapping dict returned by fetch method of ChartMogul client.
            incremental (bool): Defines manifest increment value.

        Returns:
            None

        Note:
            If no valid rows are found, the output table file is deleted.
        """
        valid_rows = False
        subfolder_path = os.path.join(temp_path, subfolder)
        if not os.path.isdir(subfolder_path):
            return

        if self.are_files_in_directory(subfolder_path):

            out_table_path = os.path.join(tables_out_path, subfolder)
            mapping = self.extract_table_details(result_mapping)
            fieldnames = mapping.get(subfolder, {}).get("columns", [])

            pk = pkeys_map.get(subfolder, [])

            with ElasticDictWriter(out_table_path, fieldnames) as wr:
                wr.writeheader()

                for json_file in os.listdir(subfolder_path):
                    json_file_path = os.path.join(subfolder_path, json_file)

                    with open(json_file_path, 'r') as file:
                        content = json.load(file)
                        for row in content:
                            if row:
                                wr.writerow(row)
                                valid_rows = True

            if valid_rows:
                table = self.create_out_table_definition(subfolder, primary_key=pk, incremental=incremental)
                self.state_columns[subfolder] = wr.fieldnames
                self.write_manifest(table)
            else:
                # do not store empty tables, this leads to output mapping fail
                if os.path.exists(out_table_path):
                    os.remove(out_table_path)

    @staticmethod
    def are_files_in_directory(path):
        if os.path.exists(path) and os.path.isdir(path):
            files = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]
            return len(files) > 0
        else:
            return False

    def validate_params(self, params):
        """
        Validating user input configuration values
        """
        self.ensure_non_empty_params(params)
        endpoint = self.get_validated_endpoints(params)
        self.validate_api_token(params[KEY_API_TOKEN])
        additional_params = self.get_additional_params(params, endpoint)
        start_date, end_date = self.get_dates(additional_params)

        if endpoint == 'key_metrics':
            self.validate_key_metrics_dates(start_date, end_date)
        elif endpoint == 'activities':
            self.validate_activities_dates(start_date, end_date)

    @staticmethod
    def ensure_non_empty_params(params):
        if not params:
            raise UserException('Please input configuration.')

    @staticmethod
    def get_validated_endpoints(params):
        endpoint = params.get(KEY_ENDPOINT)
        if not endpoint:
            raise UserException('Please select an endpoint.')
        return endpoint

    @staticmethod
    def validate_api_token(api_token):
        config = chartmogul.Config(api_token)
        try:
            chartmogul.Ping.ping(config).get()
        except Exception as err:
            raise UserException(f'API Token error: {err}')

    @staticmethod
    def get_additional_params(params, endpoints):
        additional_params_key = f'additional_params_{endpoints}'
        return params.get(additional_params_key, {})

    @staticmethod
    def get_dates(additional_params):
        return additional_params.get('start-date'), additional_params.get('end-date')

    def validate_key_metrics_dates(self, start_date, end_date):
        if not start_date or not end_date:
            raise UserException('[Start date] and [End Date] are required.')
        self.validate_date_order(start_date, end_date)

    def validate_activities_dates(self, start_date, end_date):
        if end_date and not start_date:
            raise UserException('Please specify [Start Date] when [End Date] is specified.')
        elif start_date and end_date:
            self.validate_date_order(start_date, end_date)

    @staticmethod
    def validate_date_order(start_date, end_date):
        start_date_form = dateparser.parse(start_date)
        end_date_form = dateparser.parse(end_date)
        day_diff = (end_date_form - start_date_form).days

        if day_diff < 0:
            raise UserException('[Start Date] cannot exceed [End Date]')

    def extract_table_details(self, data, parent_prefix=''):
        output = {}

        # Get the current table name with any necessary prefixes
        current_table_name = parent_prefix + data["table_name"]

        # Store columns and primary keys for the current table
        output[current_table_name] = {
            "columns": list(data["column_mappings"].values()),
            "primary_keys": data["primary_keys"]
        }

        # If there are child tables, extract details recursively for each child table
        for child_name, child_data in data["child_tables"].items():
            output.update(self.extract_table_details(child_data, current_table_name + "_"))

        return output


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
FILE: src/chartmogul_client/client.py
================================================
import asyncio
import json
import logging
import os
import uuid
from pathlib import Path
from urllib.parse import urljoin
from typing import AsyncIterable

from httpx import HTTPStatusError
from keboola.http_client.async_client import AsyncHttpClient
from keboola.json_to_csv import Parser, TableMapping

CHARTMOGUL_BASEURL = 'https://api.chartmogul.com/v1/'

CHARTMOGUL_ENDPOINT_CONFIGS = {
    'activities': {
        'endpoint': 'activities',
        'dataType': 'entries'
    },
    'customers': {
        'endpoint': 'customers',
        'dataType': 'entries'
    },
    'customers_subscriptions': {
        'endpoint': 'customers/{{customers_uuid}}/subscriptions',
        'dataType': 'entries'
    },
    'key_metrics': {
        'endpoint': 'metrics/all',
        'dataType': 'entries'
    },
    'invoices': {
        'endpoint': 'invoices',
        'dataType': 'invoices'
    }
}

MAX_REQUESTS_PER_SECOND = BATCH_SIZE = 40


class ChartMogulClientException(Exception):
    pass


class ChartMogulClient(AsyncHttpClient):
    def __init__(self, destination, api_token, incremental=False, state=None, batch_size: int = BATCH_SIZE,
                 debug: bool = False):
        super().__init__(base_url=CHARTMOGUL_BASEURL,
                         auth=(api_token, ''),
                         retries=5,
                         retry_status_codes=[402, 429, 500, 502, 503, 504],
                         max_requests_per_second=MAX_REQUESTS_PER_SECOND,
                         timeout=10,
                         debug=debug)

        # Request parameters
        self.processed_records = 0
        self.parser = None
        self.destination = destination
        self.incremental = incremental
        self.batch_size = batch_size
        mappings = Path(os.path.abspath(__file__)).parent.joinpath('mappings.json').as_posix()
        self._table_mappings = json.load(open(mappings))

    async def fetch(self, endpoint, additional_params=None) -> dict:

        table_mapping = TableMapping.build_from_legacy_mapping({endpoint: self._table_mappings[endpoint]})
        self.parser = Parser(main_table_name=endpoint, table_mapping=table_mapping, analyze_further=True)

        if endpoint == 'customers':
            await self._fetch_customers()

        elif endpoint == 'customers_subscriptions':
            customer_uuids = await self._fetch_customers(save_results=False)
            if customer_uuids:
                async for results in self._fetch_customers_subscriptions(customer_uuids):
                    parsed = self.parser.parse_data(results)
                    await self.save_result(parsed)
            else:
                raise ChartMogulClientException("Cannot fetch customer subscriptions, reason: No customers found.")

        elif endpoint == 'activities':
            async for results in self._fetch_activities(endpoint, additional_params):
                parsed = self.parser.parse_data(results)
                await self.save_result(parsed)

        elif endpoint == 'key_metrics':
            async for results in self._fetch_key_metrics(endpoint, additional_params):
                parsed = self.parser.parse_data(results)
                await self.save_result(parsed)

        elif endpoint == 'invoices':
            async for results in self._fetch_invoices(endpoint):
                parsed = self.parser.parse_data(results)
                await self.save_result(parsed)

        else:
            raise ChartMogulClientException(f"Unsupported endpoint: {endpoint}")

        return self.parser.table_mapping.as_dict()

    async def save_result(self, results: dict) -> None:
        for result in results:
            path = os.path.join(self.destination, result)
            os.makedirs(path, exist_ok=True)

            full_path = os.path.join(path, f"{uuid.uuid4()}.json")
            with open(full_path, "w") as json_file:
                json.dump(results.get(result), json_file, indent=4)
        self.parser._csv_file_results = {}

    async def _fetch_customers_subscriptions(self, customer_uuids) -> AsyncIterable:
        tasks = []
        for i, customer_uuid in enumerate(customer_uuids):
            tasks.append(self._fetch_customer_subscriptions(customer_uuid))

            # Check if the batch size is reached or if we are at the last customer
            if len(tasks) == self.batch_size or i == len(customer_uuids) - 1:
                results = await asyncio.gather(*tasks)
                for result in results:
                    yield result

                tasks.clear()

    async def _fetch_customer_subscriptions(self, customer_uuid) -> list:
        endpoint_params = {}

        all_entries = []
        while True:
            endpoint = f'customers/{customer_uuid}/subscriptions'
            endpoint = urljoin(CHARTMOGUL_BASEURL, endpoint)

            r = await self._get(endpoint, params=endpoint_params)
            entries = r.get(CHARTMOGUL_ENDPOINT_CONFIGS["customers_subscriptions"]["dataType"])
            for entry in entries:
                entry["customers_uuid"] = customer_uuid

            all_entries.extend(entries)

            if not r.get('has_more'):
                break
            else:
                endpoint_params['cursor'] = r.get('cursor')

        self.processed_records += 1

        if self.processed_records % 1000 == 0:
            logging.info(f"Fetched {self.processed_records} customer subscriptions.")

        return all_entries

    async def _fetch_activities(self, endpoint, additional_params) -> AsyncIterable:
        endpoint_url = urljoin(CHARTMOGUL_BASEURL, endpoint)

        endpoint_params = {'per_page': 200}
        for p in additional_params:
            if additional_params[p]:
                endpoint_params[p] = additional_params[p]

        while True:
            r = await self._get(endpoint_url, params=endpoint_params)
            yield r.get(CHARTMOGUL_ENDPOINT_CONFIGS[endpoint]["dataType"], {})

            if not r.get('has_more'):
                break
            else:
                endpoint_params['cursor'] = r.get('cursor')

    async def _fetch_key_metrics(self, endpoint, additional_params) -> AsyncIterable:
        endpoint_url = urljoin(CHARTMOGUL_BASEURL, CHARTMOGUL_ENDPOINT_CONFIGS[endpoint]["endpoint"])
        endpoint_params = {}

        for p in additional_params:
            if additional_params[p]:
                endpoint_params[p] = additional_params[p]

        r = await self._get(endpoint_url, params=endpoint_params)
        yield r.get(CHARTMOGUL_ENDPOINT_CONFIGS[endpoint]["dataType"], {})

    async def _fetch_invoices(self, endpoint) -> AsyncIterable:
        endpoint_url = urljoin(CHARTMOGUL_BASEURL, CHARTMOGUL_ENDPOINT_CONFIGS[endpoint]["endpoint"])
        endpoint_params = {}

        while True:
            r = await self._get(endpoint_url, params=endpoint_params)
            yield r.get(CHARTMOGUL_ENDPOINT_CONFIGS[endpoint]["dataType"], {})

            if not r.get('has_more'):
                break
            else:
                endpoint_params['cursor'] = r.get('cursor')

    async def _fetch_customers(self, save_results: bool = True) -> list:
        customer_uuids = []
        next_page_cursor = None

        while True:
            customer_uuids_page, next_page_cursor = await self._fetch_customers_page(next_page_cursor, save_results)
            customer_uuids.extend(customer_uuids_page)
            if next_page_cursor is None:
                break

        return customer_uuids

    async def _fetch_customers_page(self, next_page_cursor: str = None, save_results: bool = True) -> list:
        endpoint_url = urljoin(CHARTMOGUL_BASEURL, "customers")
        parser = self.parser if save_results else Parser(main_table_name="customers", analyze_further=True)

        params = {
            'per_page': 200,
        }

        if next_page_cursor is not None:
            params['cursor'] = next_page_cursor

        results = []

        r = await self._get(endpoint_url, params=params)
        data = r.get(CHARTMOGUL_ENDPOINT_CONFIGS["customers"]["dataType"], {})

        next_page_cursor = r.get('cursor', None)

        if data:
            parsed = parser.parse_data(data)
            if save_results:
                await self.save_result(parsed)

            for customer in parsed.get("customers", []):
                results.append(customer.get("uuid"))
        return results, next_page_cursor

    async def _get(self, endpoint: str, params=None) -> dict:
        if params is None:
            params = {}

        r = await self.get_raw(endpoint, params=params)

        try:
            r.raise_for_status()
        except HTTPStatusError:
            raise ChartMogulClientException(f"Cannot fetch resource: {endpoint}")

        try:
            return r.json()
        except json.decoder.JSONDecodeError as e:
            raise ChartMogulClientException(f"Cannot parse response for {endpoint}, exception: {e}") from e



================================================
FILE: src/chartmogul_client/mappings.json
================================================
{
    "customers": {
        "id": {
            "type": "column",
            "mapping": {
                "destination": "id",
                "primaryKey": true
            }
        },
        "uuid": {
            "type": "column",
            "mapping": {
                "destination": "uuid",
                "primaryKey": true
            }
        },
        "external_id": "external_id",
        "external_ids": {
            "type": "column",
            "forceType": true,
            "mapping": {
                "destination": "external_ids"
            }
        },
        "data_source_uuid": "data_source_uuid",
        "data_source_uuids": {
            "forceType": true,
            "type": "column",
            "mapping": {
                "destination": "data_source_uuids"
            }
        },
        "name": "name",
        "company": "company",
        "email": "email",
        "status": "status",
        "lead_created_at": "lead_created_at",
        "free_trial_started_at": "free_trial_started_at",
        "customer-since": "customer-since",
        "city": "city",
        "state": "state",
        "country": "country",
        "zip": "zip",
        "attributes.tags": {
            "forceType": true,
            "type": "column",
            "mapping": {
                "destination": "attributes_tags"
            }
        },
        "attributes.stripe.uid": "attributes_stripe_uid",
        "attributes.stripe.coupon": "attributes_stripe_coupon",
        "attributes.clearbit.company.name": "attributes_clearbit_company_name",
        "attributes.clearbit.company.legalName": "attributes_clearbit_company_legalName",
        "attributes.clearbit.company.domain": "attributes_clearbit_company_domain",
        "attributes.clearbit.company.url": "attributes_clearbit_company_url",
        "attributes.clearbit.company.category.sector": "attributes_clearbit_company_category_sector",
        "attributes.clearbit.company.category.industryGroup": "attributes_clearbit_company_category_industryGroup",
        "attributes.clearbit.company.category.industry": "attributes_clearbit_company_category_industry",
        "attributes.clearbit.company.category.subIndustry": "attributes_clearbit_company_category_subIndustry",
        "attributes.clearbit.company.metrics.raised": "attributes_clearbit_company_metrics_raised",
        "attributes.clearbit.company.metrics.employees": "attributes_clearbit_company_metrics_employees",
        "attributes.clearbit.company.metrics.googleRank": "attributes_clearbit_company_metrics_googleRank",
        "attributes.clearbit.company.metrics.alexaGlobalRank": "attributes_clearbit_company_metrics_alexaGlobalRank",
        "attributes.clearbit.company.metrics.marketCap": "attributes_clearbit_company_metrics_marketCap",
        "attributes.clearbit.person.name.fullName": "attributes_clearbit_person_name_fullName",
        "attributes.clearbit.person.employment.name": "attributes_clearbit_person_employment_name",
        "attributes.custom.CAC": "attributes_custom_CAC",
        "attributes.custom.utmCampaign": "attributes_custom_utmCampaign",
        "attributes.custom.convertedAt": "attributes_custom_convertedAt",
        "attributes.custom.pro": "attributes_custom_pro",
        "attributes.custom.salesRep": "attributes_custom_salesRep",
        "address.address.zip": "address_address.zip",
        "address.city": "address_city",
        "address.country": "address_country",
        "address.state": "address_state",
        "mrr": "mrr",
        "arr": "arr",
        "billing-system-url": "billing-system-url",
        "chartmogul-url": "chartmogul-url",
        "billing-system-type": "billing-system-type",
        "currency": "currency",
        "currency-sign": "currency-sign"
    },
    "activities": {
        "description": "description",
        "activity-mrr-movement": "activity-mrr-movement",
        "activity-mrr": "activity-mrr",
        "activity-arr": "activity-arr",
        "date": "date",
        "type": "type",
        "currency": "currency",
        "subscription-external-id": "subscription-external-id",
        "plan-external-id": "plan-external-id",
        "customer-name": "customer-name",
        "customer-uuid": "customer-uuid",
        "customer-external-id": "customer-external-id",
        "billing-connector-uuid": "billing-connector-uuid",
        "uuid": {
            "type": "column",
            "mapping": {
                "destination": "uuid",
                "primaryKey": true
            }
        }
    },
    "customers_subscriptions": {
        "id": {
            "type": "column",
            "mapping": {
                "destination": "uuid",
                "primaryKey": true
            }
        },
        "external_id": "external_id",
        "subscription_set_external_id": "subscription_set_external_id",
        "quantity": "quantity",
        "mrr": "mrr",
        "arr": "arr",
        "status": "status",
        "plan": "plan",
        "billing-cycle": "billing-cycle",
        "billing-cycle-count": "billing-cycle-count",
        "start-date": "start-date",
        "end-date": "end-date",
        "currency": "currency",
        "currency-sign": "currency-sign",
        "uuid": "plan_uuid",
        "data_source_uuid": "data_source_uuid",
        "cancellation_dates": {
            "type": "column",
            "forceType": true,
            "mapping": {
                "destination": "cancellation_dates"
            }
        },
        "customers_uuid": {
            "type": "column",
            "mapping": {
                "destination": "customers_uuid",
                "primaryKey": true
            }
        }
    },
    "key_metrics": {
        "date": {
            "type": "column",
            "mapping": {
                "destination": "date",
                "primaryKey": true
            }
        },
        "customer-churn-rate": "customer-churn-rate",
        "mrr-churn-rate": "mrr-churn-rate",
        "customers": "customers",
        "asp": "asp",
        "arpa": "arpa",
        "arr": "arr",
        "mrr": "mrr",
        "ltv": "ltv"
    },
    "invoices": {
        "uuid": {
            "type": "column",
            "mapping": {
                "destination": "uuid",
                "primaryKey": true
            }
        },
        "customer_uuid": "customer_uuid",
        "external_id": "external_id",
        "date": "date",
        "due_date": "due_date",
        "currency": "currency",
        "line_items": {
            "type": "table",
            "destination": "invoices_line_items",
            "tableMapping": {
                "uuid": {
                    "type": "column",
                    "mapping": {
                        "destination": "uuid",
                        "primaryKey": true
                    }
                },
                "external_id": "external_id",
                "description": "description",
                "type": "type",
                "subscription_uuid": "subscription_uuid",
                "subscription_external_id": "subscription_external_id",
                "subscription_set_external_id": "subscription_set_external_id",
                "plan_uuid": "plan_uuid",
                "prorated": "prorated",
                "service_period_start": "service_period_start",
                "service_period_end": "service_period_end",
                "amount_in_cents": "amount_in_cents",
                "quantity": "quantity",
                "discount_code": "discount_code",
                "discount_amount_in_cents": "discount_amount_in_cents",
                "tax_amount_in_cents": "tax_amount_in_cents",
                "transaction_fees_in_cents": "transaction_fees_in_cents",
                "transaction_fees_currency": "transaction_fees_currency",
                "discount_description": "discount_description",
                "event_order": "event_order",
                "account_code": "account_code",
                "balance_transfer": "balance_transfer",
                "parent_uuid": {
                    "type": "user",
                    "mapping": {
                        "destination": "invoices_uuid"
                    }
                }
            }
        },
        "transactions": {
            "type": "table",
            "destination": "invoices_transactions",
            "tableMapping": {
                "uuid": {
                    "type": "column",
                    "mapping": {
                        "destination": "uuid",
                        "primaryKey": true
                    }
                },
                "external_id": "external_id",
                "type": "type",
                "date": "date",
                "result": "result",
                "amount_in_cents": "amount_in_cents",
                "transaction_fees_in_cents": "transaction_fees_in_cents",
                "transaction_fees_currency": "transaction_fees_currency",
                "parent_uuid": {
                    "type": "user",
                    "mapping": {
                        "destination": "invoices_uuid"
                    }
                }
            }
        }
    }
}


================================================
FILE: src/chartmogul_client/mappings.py
================================================
pkeys_map = {
    "customers": ["id", "uuid"],
    "customers_subscriptions": ["uuid", "customers_uuid"],
    "activities": ["uuid"],
    "invoices": ["uuid"],
    "invoices_line_items": ["uuid", "invoices_uuid"],
    "invoices_transactions": ["uuid", "invoices_uuid"],
    "key_metrics": ["date"]
}



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import os
import unittest

import mock
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: .github/workflows/build_n_test.yml
================================================
name: Build & Test
on: [ push ]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_IMAGE: keboola-component
      KBC_DEVELOPERPORTAL_USERNAME: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
      KBC_DEVELOPERPORTAL_VENDOR: ${{ secrets.KBC_DEVELOPERPORTAL_VENDOR }}
      KBC_DEVELOPERPORTAL_APP: ${{ secrets.KBC_DEVELOPERPORTAL_APP }}
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --tag=$APP_IMAGE
      - name: Run Flake Lint
        run: docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
      - name: Unit Test
        run: docker run $APP_IMAGE python -m unittest discover
      - name: Set tag env
        run: echo "GITHUB_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

        # Push test tag, uncomment to enable
#      - name: Push test image
#        uses: odinuv/action-push-to-ecr@master
#        with:
#          vendor: ${{ secrets.KBC_DEVELOPERPORTAL_VENDOR }}
#          app_id: ${{ secrets.KBC_DEVELOPERPORTAL_APP }}
#          username: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
#          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
#          tag: test
#          push_latest: true
#          source_image: keboola-component


================================================
FILE: .github/workflows/deploy.yml
================================================
name: Deploy to developer portal

on:
  push:
    tags:
      - '[0-9]*.[0-9]*.[0-9]*'

jobs:
  build_n_deploy:
    runs-on: ubuntu-latest
    env:
      APP_IMAGE: keboola-component
      KBC_DEVELOPERPORTAL_USERNAME: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
      KBC_DEVELOPERPORTAL_VENDOR: ${{ secrets.KBC_DEVELOPERPORTAL_VENDOR }}
      KBC_DEVELOPERPORTAL_APP: ${{ secrets.KBC_DEVELOPERPORTAL_APP }}
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --tag=$APP_IMAGE
      - name: Run Flake Lint
        run: docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
      - name: Unit Test
        run: docker run $APP_IMAGE python -m unittest discover

        # Functional tests in project - uncomment to enable
#      - name: Functional tests
#        run: |
#          docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
#          docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test

      - uses: actions/checkout@v2
      - name: Set tag env
        run: echo "GITHUB_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Deploy
        run: |
          docker pull quay.io/keboola/developer-portal-cli-v2:latest
          chmod +x ./scripts/update_dev_portal_properties.sh
          chmod +x ./deploy.sh
      - name: Update Developer portal properties
        run: ./scripts/update_dev_portal_properties.sh
      - name: Deploy
        run: ./deploy.sh

