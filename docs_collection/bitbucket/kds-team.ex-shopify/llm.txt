Directory structure:
└── kds_consulting_team-kds-team.ex-shopify/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── .pydevproject
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── schema/
    │   ├── customers.json
    │   ├── order.json
    │   └── products.json
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── result.py
    │   └── shopify_cli.py
    └── tests/
        ├── __init__.py
        ├── test_component.py
        └── data_examples/
            ├── data1/
            │   ├── config.json
            │   └── in/
            │       ├── state.json
            │       ├── files/
            │       │   ├── 151971405_21702.strip.print.gif.manifest
            │       │   ├── 151971412_30221.strip.print.gif.manifest
            │       │   ├── 151971423_5655.strip.print.gif.manifest
            │       │   ├── 151971432_compiler_complaint.png.manifest
            │       │   ├── 151971450_duty_calls.png.manifest
            │       │   └── 151971455_duty_calls.png.manifest
            │       └── tables/
            │           ├── fooBar
            │           ├── fooBar.manifest
            │           ├── orphaned.csv
            │           ├── orphaned_manifest.csv.manifest
            │           ├── sample.csv
            │           ├── sample.csv.manifest
            │           ├── sliced.csv.manifest
            │           └── sliced.csv/
            │               └── .gitkeep
            ├── data2/
            │   └── config.json
            └── data3/
                └── config.json

================================================
FILE: README.md
================================================
# Shopify Extractor

Shopify extractor for Keboola Connection.
Download all objects under [Orders](https://shopify.dev/docs/admin-api/rest/reference/orders/order#index-2020-10),
[Products](https://shopify.dev/docs/admin-api/rest/reference/products/product),
[inventory items](https://shopify.dev/api/admin-rest/2021-10/resources/inventoryitem#resource_object),
[levels](https://shopify.dev/api/admin-rest/2021-10/resources/inventorylevel#top),
[locations](https://shopify.dev/api/admin-rest/2021-10/resources/location#top)[Event](https://shopify.dev/docs/admin-api/rest/reference/events/event)
and
[Customer](https://shopify.dev/docs/admin-api/rest/reference/customers) hierarchies.

Data is always loaded incrementally.

**Credits:** Client part of this application is partially inspired by
[Singer.IO shopify TAP project](https://github.com/singer-io/tap-shopify)

**Table of contents:**

[TOC]

# Shopify setup - Prerequisites

To enable this application you need to create a
custom [application](https://help.shopify.com/en/manual/apps/custom-apps) :

- In the left panel in Shopify select "Apps"
- Click "Develop apps" on the top of the webpage (it is next to the green "Customize your store" button)
- Click "Create an App"
- Name the app, ex. "Keboola Extractor app"
- Click "Configure Admin API Scopes"
- Enable `Read access` for following objects:
    - `Orders` : "read_orders"
    - `Products` : "read_products"
    - `Inventory` : "read_inventory"
    - `Customers` : "read_customers"
    - `Events` : "read_marketing_events"
    - `Locations` : "read_locations"

- Save the scopes
- Click "Install app"
- Copy the Admin API access token, store it somewhere safe

- use this Admin API access token to authorize the app in the "Admin API access token" field

# Configuration

## Admin password

Admin password of your private app.

## Shop name

Your shop id found in url, e.g. `[shop_id]`.myshopify.com

## Loading Options

### Fetch parameter

Define which date field (`updated_at` or `created_at`) will be used for filtering while fetching data from Shopify.
 Any data that was updated or created in the range will be fetched.

### Period from and to dates

Will fetch data filtering on the defined fetch parameter.
Accepts date in `YYYY-MM-DD` format or dateparser string i.e. `5 days ago`, `1 month ago`, `yesterday`, etc.

### Load type

The result tables will be updated based on the primary key if set to Incremental update.
Full load overwrites the destination table each time.

## Endpoints

Following endpoints are supported

### Products

### Inventory

This allows to
retrieve [inventory items](https://shopify.dev/api/admin-rest/2021-10/resources/inventoryitem#resource_object),
its' [levels](https://shopify.dev/api/admin-rest/2021-10/resources/inventorylevel#top)
and [locations](https://shopify.dev/api/admin-rest/2021-10/resources/location#top) based on related products.

**NOTE** this endpoint is available only if Products endpoint is checked.

To link product variant with inventory_item and inventory_level follow the diagram below, the datasets can be joined
through
their primary foreign/primary keys:

![model](https://shopify.dev/assets/api/reference/inventory-4b12bfe5466efda91c64da3c488e58b9b52cce2feae2ad7119115e377b226103.png)

### Orders

### Transactions

Download transactions related to Orders.

### Customers

### Events

Downloads events related to selected Resources. These need to be selected in the `resources` fields

#### Event Types

You may download specific event types to limit the result size. Specify the event names separated with comma
e.g. `confirmed, create, destroy`. If omitted all possible types are downloaded

Note that different resources generate different types of event.
See the [docs](https://shopify.dev/docs/admin-api/rest/reference/events/event#resources-that-can-create-events) for a
list of possible verbs.

## Development

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in the docker-compose
file:

```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```shell script
git clone git@bitbucket.org:kds_consulting_team/kds-team.ex-shopify.git
cd kds-team.ex-shopify
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

# Integration

For information about deployment and integration with KBC, please refer to
the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
            - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:$TEST_TAG
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog



================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "asigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "asigning travis tag"
	export TAG="$TRAVIS_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.9-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example,
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.5.0.zip#egg=kbc
mock
freezegun
ShopifyAPI==12.4.0
pyactiveresource==2.2.2
backoff==2.1.2


================================================
FILE: .pydevproject
================================================
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?eclipse-pydev version="1.0"?><pydev_project>
<pydev_property name="org.python.pydev.PYTHON_PROJECT_VERSION">python interpreter</pydev_property>
<pydev_property name="org.python.pydev.PYTHON_PROJECT_INTERPRETER">Default</pydev_property>
</pydev_project>



================================================
FILE: component_config/component_long_description.md
================================================
Download all objects under [Orders](https://shopify.dev/docs/admin-api/rest/reference/orders/order#index-2020-10), 
[Products](https://shopify.dev/docs/admin-api/rest/reference/products/product), 
[inventory items](https://shopify.dev/api/admin-rest/2021-10/resources/inventoryitem#resource_object), 
[levels](https://shopify.dev/api/admin-rest/2021-10/resources/inventorylevel#top), 
[locations](https://shopify.dev/api/admin-rest/2021-10/resources/location#top)[Event](https://shopify.dev/docs/admin-api/rest/reference/events/event) and 
[Customer](https://shopify.dev/docs/admin-api/rest/reference/customers) hierarchies. 

To enable this application you need to:
 
- [enable private app development](https://help.shopify.com/en/manual/apps/private-apps#enable-private-app-development-from-the-shopify-admin) for your store. 
- Create a private application
- Enable `Read access` ADMIN API PERMISSIONS for following following objects:
    - `Orders`
    - `Products`
    - `Inventory`
    - `Customers`
    
    

Additional documentation is available [here](https://bitbucket.org/kds_consulting_team/kds-team.ex-shopify/src/master/README.md)


================================================
FILE: component_config/component_short_description.md
================================================
Shopify is a commerce platform that allows anyone to set up an online store and sell their products.


================================================
FILE: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "extractor configuration",
  "required": [
    "shop",
    "#api_token",
    "loading_options",
    "endpoints"
  ],
  "properties": {
    "shop": {
      "type": "string",
      "title": "Shop name",
      "description": "Your shop id found in url, e.g. [shop_id].myshopify.com",
      "propertyOrder": 250
    },
    "api_version": {
      "type": "string",
      "title": "API version",
      "default": "2024-01",
      "description": "The API version, gets updated regularly based on the <a href=\"https://shopify.dev/api/usage/versioning#release-schedule\">Shopify release cycle</a>",
      "propertyOrder": 251,
      "readOnly": true
    },
    "endpoints": {
      "type": "object",
      "title": "Endpoints",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "title": "Setup",
            "required": [
              "filters",
              "types"
            ],
            "properties": {
              "types": {
                "type": "string",
                "title": "Event Types",
                "format": "textarea",
                "options": {
                  "input_height": "100px"
                },
                "description": "Comma separated list of required event types. e.g. 'confirmed', 'create', 'destroy'. If omitted all possible types are downloaded.  Different resources generate different types of event. See the docs for a list of possible verbs.",
                "uniqueItems": true,
                "propertyOrder": 700
              },
              "filters": {
                "type": "array",
                "items": {
                  "enum": [
                    "Article",
                    "Blog",
                    "Collection",
                    "Comment",
                    "Order",
                    "Page",
                    "PriceRule",
                    "Product",
                    "ApiPermission"
                  ],
                  "type": "string"
                },
                "title": "Types",
                "format": "select",
                "description": "Resource Types",
                "uniqueItems": true,
                "propertyOrder": 360
              }
            }
          },
          "title": "Events",
          "maxItems": 1,
          "description": "Download Events.",
          "propertyOrder": 4000
        },
        "orders": {
          "type": "boolean",
          "title": "Orders",
          "format": "checkbox",
          "default": true,
          "propertyOrder": 30
        },
        "products": {
          "type": "boolean",
          "title": "Products",
          "format": "checkbox",
          "default": true,
          "propertyOrder": 40
        },
        "products_archived": {
          "type": "boolean",
          "title": "Archived",
          "format": "checkbox",
          "default": false,
          "options": {
            "dependencies": {
              "products": true
            }
          },
          "description": "Get archived products",
          "propertyOrder": 41
        },
        "products_drafts": {
          "type": "boolean",
          "title": "Drafts",
          "format": "checkbox",
          "default": false,
          "options": {
            "dependencies": {
              "products": true
            }
          },
          "description": "Get drafts of products",
          "propertyOrder": 42
        },
        "product_metafields": {
          "type": "boolean",
          "title": "Metafields",
          "format": "checkbox",
          "default": false,
          "options": {
            "dependencies": {
              "products": true
            }
          },
          "description": "Get metafields related to products",
          "propertyOrder": 43
        },
        "variant_metafields": {
          "type": "boolean",
          "title": "Variant Metafields",
          "format": "checkbox",
          "default": false,
          "options": {
            "dependencies": {
              "products": true
            }
          },
          "description": "Get metafields related to product variants",
          "propertyOrder": 44
        },
        "inventory": {
          "type": "boolean",
          "title": "Product - Inventory",
          "format": "checkbox",
          "default": true,
          "options": {
            "dependencies": {
              "products": true
            }
          },
          "description": "Get inventory levels and locations related to products",
          "propertyOrder": 45
        },
        "transactions": {
          "type": "boolean",
          "title": "Transactions",
          "format": "checkbox",
          "default": false,
          "options": {
            "dependencies": {
              "orders": true
            }
          },
          "description": "Get transaction for orders",
          "propertyOrder": 43
        }
      },
      "customers": {
        "type": "boolean",
        "title": "Customers",
        "format": "checkbox",
        "default": true,
        "propertyOrder": 46
      },
      "propertyOrder": 500
    },
    "#api_token": {
      "type": "string",
      "title": "Admin API access token",
      "format": "password",
      "description": "Admin API access token of your Shopify custom app.",
      "propertyOrder": 200
    },
    "loading_options": {
      "type": "object",
      "title": "Loading Options",
      "format": "grid",
      "description": "Data is fetched incrementally based on the last updated datetime",
      "required": [
        "incremental_output",
        "date_since",
        "date_to"
      ],
      "properties": {
        "fetch_parameter": {
          "enum": [
            "updated_at",
            "created_at"
          ],
          "type": "string",
          "title": "Fetch parameter",
          "default": "updated_at",
          "description": "Field/parameter to be used for filtering data from API.",
          "propertyOrder": 300
        },
        "date_since": {
          "type": "string",
          "title": "Period from date [including].",
          "default": "1 week ago",
          "description": " Date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc. If left empty, all records are downloaded.",
          "propertyOrder": 400
        },
        "date_to": {
          "type": "string",
          "title": "Period to date [excluding].",
          "default": "now",
          "description": " Date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc. If left empty, it is set to the current datetime.",
          "propertyOrder": 450
        },
        "incremental_output": {
          "enum": [
            0,
            1
          ],
          "type": "number",
          "title": "Load type",
          "default": 1,
          "options": {
            "enum_titles": [
              "Full Load",
              "Incremental Update"
            ]
          },
          "description": "If set to Incremental update, the result tables will be updated based on primary key. Full load overwrites the destination table each time. NOTE: If you wish to remove deleted records, this needs to be set to Full load and the Period from attribute empty.",
          "propertyOrder": 450
        }
      },
      "propertyOrder": 400
    }
  }
}


================================================
FILE: component_config/configuration_description.md
================================================
To enable this application you need to create a
custom [application](https://help.shopify.com/en/manual/apps/custom-apps) :

- In the left panel in Shopify select "Apps"
- Click "Develop apps" on the top of the webpage (it is next to the green "Customize your store" button)
- Click "Create an App"
- Name the app, ex. "Keboola Extractor app"
- Click "Configure Admin API Scopes"
- Enable `Read access` for following objects:
    - `Orders` : "read_orders"
    - `Products` : "read_products"
    - `Inventory` : "read_inventory"
    - `Customers` : "read_customers"
    - `Events` : "read_marketing_events"
    - `Locations` : "read_locations"
  
- Save the scopes
- Click "Install app"
- Copy the Admin API access token, store it somewhere safe

- use this Admin API access token to authorize the app in the "Admin API access token" field

Additional documentation
is [available here](https://bitbucket.org/kds_consulting_team/kds-team.ex-shopify/src/master/README.md).


================================================
FILE: component_config/stack_parameters.json
================================================
{}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: schema/customers.json
================================================
{
  "customers": [
    {
      "id": 207119551,
      "email": "bob.norman@hostmail.com",
      "accepts_marketing": false,
      "created_at": "2020-11-04T16:30:27-05:00",
      "updated_at": "2020-11-04T16:30:27-05:00",
      "first_name": "Bob",
      "last_name": "Norman",
      "orders_count": 1,
      "state": "disabled",
      "total_spent": "199.65",
      "last_order_id": 450789469,
      "note": null,
      "verified_email": true,
      "multipass_identifier": null,
      "tax_exempt": false,
      "phone": "+16136120707",
      "tags": "",
      "last_order_name": "#1001",
      "currency": "USD",
      "addresses": [
        {
          "id": 207119551,
          "customer_id": 207119551,
          "first_name": null,
          "last_name": null,
          "company": null,
          "address1": "Chestnut Street 92",
          "address2": "",
          "city": "Louisville",
          "province": "Kentucky",
          "country": "United States",
          "zip": "40202",
          "phone": "555-625-1199",
          "name": "",
          "province_code": "KY",
          "country_code": "US",
          "country_name": "United States",
          "default": true
        }
      ],
      "accepts_marketing_updated_at": "2005-06-12T11:57:11-04:00",
      "marketing_opt_in_level": null,
      "tax_exemptions": [],
      "admin_graphql_api_id": "gid://shopify/Customer/207119551",
      "default_address": {
        "id": 207119551,
        "customer_id": 207119551,
        "first_name": null,
        "last_name": null,
        "company": null,
        "address1": "Chestnut Street 92",
        "address2": "",
        "city": "Louisville",
        "province": "Kentucky",
        "country": "United States",
        "zip": "40202",
        "phone": "555-625-1199",
        "name": "",
        "province_code": "KY",
        "country_code": "US",
        "country_name": "United States",
        "default": true
      }
    }
  ]
}


================================================
FILE: schema/order.json
================================================
{
  "orders": [
    {
      "id": 450789469,
      "email": "bob.norman@hostmail.com",
      "closed_at": null,
      "created_at": "2008-01-10T11:00:00-05:00",
      "updated_at": "2008-01-10T11:00:00-05:00",
      "number": 1,
      "note": null,
      "token": "b1946ac92492d2347c6235b4d2611184",
      "gateway": "authorize_net",
      "test": false,
      "total_price": "598.94",
      "subtotal_price": "597.00",
      "total_weight": 0,
      "total_tax": "11.94",
      "taxes_included": false,
      "currency": "USD",
      "financial_status": "partially_refunded",
      "confirmed": true,
      "total_discounts": "10.00",
      "total_line_items_price": "597.00",
      "cart_token": "68778783ad298f1c80c3bafcddeea02f",
      "buyer_accepts_marketing": false,
      "name": "#1001",
      "referring_site": "http://www.otherexample.com",
      "landing_site": "http://www.example.com?source=abc",
      "cancelled_at": null,
      "cancel_reason": null,
      "total_price_usd": "598.94",
      "checkout_token": "bd5a8aa1ecd019dd3520ff791ee3a24c",
      "reference": "fhwdgads",
      "user_id": null,
      "location_id": null,
      "source_identifier": "fhwdgads",
      "source_url": null,
      "processed_at": "2008-01-10T11:00:00-05:00",
      "device_id": null,
      "phone": "+557734881234",
      "customer_locale": null,
      "app_id": null,
      "browser_ip": "0.0.0.0",
      "landing_site_ref": "abc",
      "order_number": 1001,
      "discount_applications": [
        {
          "type": "discount_code",
          "value": "10.0",
          "value_type": "fixed_amount",
          "allocation_method": "across",
          "target_selection": "all",
          "target_type": "line_item",
          "code": "TENOFF"
        }
      ],
      "discount_codes": [
        {
          "code": "TENOFF",
          "amount": "10.00",
          "type": "fixed_amount"
        }
      ],
      "note_attributes": [
        {
          "name": "custom engraving",
          "value": "Happy Birthday"
        },
        {
          "name": "colour",
          "value": "green"
        }
      ],
      "payment_gateway_names": [
        "bogus"
      ],
      "processing_method": "direct",
      "checkout_id": 901414060,
      "source_name": "web",
      "fulfillment_status": null,
      "tax_lines": [
        {
          "price": "11.94",
          "rate": 0.06,
          "title": "State Tax",
          "price_set": {
            "shop_money": {
              "amount": "11.94",
              "currency_code": "USD"
            },
            "presentment_money": {
              "amount": "11.94",
              "currency_code": "USD"
            }
          }
        }
      ],
      "tags": "",
      "contact_email": "bob.norman@hostmail.com",
      "order_status_url": "https://apple.myshopify.com/690933842/orders/b1946ac92492d2347c6235b4d2611184/authenticate?key=814c23fdde9f54028c19785d77f64844",
      "presentment_currency": "USD",
      "total_line_items_price_set": {
        "shop_money": {
          "amount": "597.00",
          "currency_code": "USD"
        },
        "presentment_money": {
          "amount": "597.00",
          "currency_code": "USD"
        }
      },
      "total_discounts_set": {
        "shop_money": {
          "amount": "10.00",
          "currency_code": "USD"
        },
        "presentment_money": {
          "amount": "10.00",
          "currency_code": "USD"
        }
      },
      "total_shipping_price_set": {
        "shop_money": {
          "amount": "0.00",
          "currency_code": "USD"
        },
        "presentment_money": {
          "amount": "0.00",
          "currency_code": "USD"
        }
      },
      "subtotal_price_set": {
        "shop_money": {
          "amount": "597.00",
          "currency_code": "USD"
        },
        "presentment_money": {
          "amount": "597.00",
          "currency_code": "USD"
        }
      },
      "total_price_set": {
        "shop_money": {
          "amount": "598.94",
          "currency_code": "USD"
        },
        "presentment_money": {
          "amount": "598.94",
          "currency_code": "USD"
        }
      },
      "total_tax_set": {
        "shop_money": {
          "amount": "11.94",
          "currency_code": "USD"
        },
        "presentment_money": {
          "amount": "11.94",
          "currency_code": "USD"
        }
      },
      "line_items": [
        {
          "id": 466157049,
          "variant_id": 39072856,
          "title": "IPod Nano - 8gb",
          "quantity": 1,
          "sku": "IPOD2008GREEN",
          "variant_title": "green",
          "vendor": null,
          "fulfillment_service": "manual",
          "product_id": 632910392,
          "requires_shipping": true,
          "taxable": true,
          "gift_card": false,
          "name": "IPod Nano - 8gb - green",
          "variant_inventory_management": "shopify",
          "properties": [
            {
              "name": "Custom Engraving Front",
              "value": "Happy Birthday"
            },
            {
              "name": "Custom Engraving Back",
              "value": "Merry Christmas"
            }
          ],
          "product_exists": true,
          "fulfillable_quantity": 1,
          "grams": 200,
          "price": "199.00",
          "total_discount": "0.00",
          "fulfillment_status": null,
          "price_set": {
            "shop_money": {
              "amount": "199.00",
              "currency_code": "USD"
            },
            "presentment_money": {
              "amount": "199.00",
              "currency_code": "USD"
            }
          },
          "total_discount_set": {
            "shop_money": {
              "amount": "0.00",
              "currency_code": "USD"
            },
            "presentment_money": {
              "amount": "0.00",
              "currency_code": "USD"
            }
          },
          "discount_allocations": [
            {
              "amount": "3.34",
              "discount_application_index": 0,
              "amount_set": {
                "shop_money": {
                  "amount": "3.34",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "3.34",
                  "currency_code": "USD"
                }
              }
            }
          ],
          "admin_graphql_api_id": "gid://shopify/LineItem/466157049",
          "tax_lines": [
            {
              "title": "State Tax",
              "price": "3.98",
              "rate": 0.06,
              "price_set": {
                "shop_money": {
                  "amount": "3.98",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "3.98",
                  "currency_code": "USD"
                }
              }
            }
          ]
        },
        {
          "id": 518995019,
          "variant_id": 49148385,
          "title": "IPod Nano - 8gb",
          "quantity": 1,
          "sku": "IPOD2008RED",
          "variant_title": "red",
          "vendor": null,
          "fulfillment_service": "manual",
          "product_id": 632910392,
          "requires_shipping": true,
          "taxable": true,
          "gift_card": false,
          "name": "IPod Nano - 8gb - red",
          "variant_inventory_management": "shopify",
          "properties": [],
          "product_exists": true,
          "fulfillable_quantity": 1,
          "grams": 200,
          "price": "199.00",
          "total_discount": "0.00",
          "fulfillment_status": null,
          "price_set": {
            "shop_money": {
              "amount": "199.00",
              "currency_code": "USD"
            },
            "presentment_money": {
              "amount": "199.00",
              "currency_code": "USD"
            }
          },
          "total_discount_set": {
            "shop_money": {
              "amount": "0.00",
              "currency_code": "USD"
            },
            "presentment_money": {
              "amount": "0.00",
              "currency_code": "USD"
            }
          },
          "discount_allocations": [
            {
              "amount": "3.33",
              "discount_application_index": 0,
              "amount_set": {
                "shop_money": {
                  "amount": "3.33",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "3.33",
                  "currency_code": "USD"
                }
              }
            }
          ],
          "admin_graphql_api_id": "gid://shopify/LineItem/518995019",
          "tax_lines": [
            {
              "title": "State Tax",
              "price": "3.98",
              "rate": 0.06,
              "price_set": {
                "shop_money": {
                  "amount": "3.98",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "3.98",
                  "currency_code": "USD"
                }
              }
            }
          ]
        },
        {
          "id": 703073504,
          "variant_id": 457924702,
          "title": "IPod Nano - 8gb",
          "quantity": 1,
          "sku": "IPOD2008BLACK",
          "variant_title": "black",
          "vendor": null,
          "fulfillment_service": "manual",
          "product_id": 632910392,
          "requires_shipping": true,
          "taxable": true,
          "gift_card": false,
          "name": "IPod Nano - 8gb - black",
          "variant_inventory_management": "shopify",
          "properties": [],
          "product_exists": true,
          "fulfillable_quantity": 1,
          "grams": 200,
          "price": "199.00",
          "total_discount": "0.00",
          "fulfillment_status": null,
          "price_set": {
            "shop_money": {
              "amount": "199.00",
              "currency_code": "USD"
            },
            "presentment_money": {
              "amount": "199.00",
              "currency_code": "USD"
            }
          },
          "total_discount_set": {
            "shop_money": {
              "amount": "0.00",
              "currency_code": "USD"
            },
            "presentment_money": {
              "amount": "0.00",
              "currency_code": "USD"
            }
          },
          "discount_allocations": [
            {
              "amount": "3.33",
              "discount_application_index": 0,
              "amount_set": {
                "shop_money": {
                  "amount": "3.33",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "3.33",
                  "currency_code": "USD"
                }
              }
            }
          ],
          "admin_graphql_api_id": "gid://shopify/LineItem/703073504",
          "tax_lines": [
            {
              "title": "State Tax",
              "price": "3.98",
              "rate": 0.06,
              "price_set": {
                "shop_money": {
                  "amount": "3.98",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "3.98",
                  "currency_code": "USD"
                }
              }
            }
          ]
        }
      ],
      "fulfillments": [
        {
          "id": 255858046,
          "order_id": 450789469,
          "status": "failure",
          "created_at": "2020-11-04T16:46:58-05:00",
          "service": "manual",
          "updated_at": "2020-11-04T16:46:58-05:00",
          "tracking_company": "USPS",
          "shipment_status": null,
          "location_id": 905684977,
          "line_items": [
            {
              "id": 466157049,
              "variant_id": 39072856,
              "title": "IPod Nano - 8gb",
              "quantity": 1,
              "sku": "IPOD2008GREEN",
              "variant_title": "green",
              "vendor": null,
              "fulfillment_service": "manual",
              "product_id": 632910392,
              "requires_shipping": true,
              "taxable": true,
              "gift_card": false,
              "name": "IPod Nano - 8gb - green",
              "variant_inventory_management": "shopify",
              "properties": [
                {
                  "name": "Custom Engraving Front",
                  "value": "Happy Birthday"
                },
                {
                  "name": "Custom Engraving Back",
                  "value": "Merry Christmas"
                }
              ],
              "product_exists": true,
              "fulfillable_quantity": 1,
              "grams": 200,
              "price": "199.00",
              "total_discount": "0.00",
              "fulfillment_status": null,
              "price_set": {
                "shop_money": {
                  "amount": "199.00",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "199.00",
                  "currency_code": "USD"
                }
              },
              "total_discount_set": {
                "shop_money": {
                  "amount": "0.00",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "0.00",
                  "currency_code": "USD"
                }
              },
              "discount_allocations": [
                {
                  "amount": "3.34",
                  "discount_application_index": 0,
                  "amount_set": {
                    "shop_money": {
                      "amount": "3.34",
                      "currency_code": "USD"
                    },
                    "presentment_money": {
                      "amount": "3.34",
                      "currency_code": "USD"
                    }
                  }
                }
              ],
              "admin_graphql_api_id": "gid://shopify/LineItem/466157049",
              "tax_lines": [
                {
                  "title": "State Tax",
                  "price": "3.98",
                  "rate": 0.06,
                  "price_set": {
                    "shop_money": {
                      "amount": "3.98",
                      "currency_code": "USD"
                    },
                    "presentment_money": {
                      "amount": "3.98",
                      "currency_code": "USD"
                    }
                  }
                }
              ]
            }
          ],
          "tracking_number": "1Z2345",
          "tracking_numbers": [
            "1Z2345"
          ],
          "tracking_url": "https://tools.usps.com/go/TrackConfirmAction_input?qtc_tLabels1=1Z2345",
          "tracking_urls": [
            "https://tools.usps.com/go/TrackConfirmAction_input?qtc_tLabels1=1Z2345"
          ],
          "receipt": {
            "testcase": true,
            "authorization": "123456"
          },
          "name": "#1001.0",
          "admin_graphql_api_id": "gid://shopify/Fulfillment/255858046"
        }
      ],
      "refunds": [
        {
          "id": 509562969,
          "order_id": 450789469,
          "created_at": "2020-11-04T16:46:58-05:00",
          "note": "it broke during shipping",
          "user_id": 799407056,
          "processed_at": "2020-11-04T16:46:58-05:00",
          "restock": true,
          "admin_graphql_api_id": "gid://shopify/Refund/509562969",
          "refund_line_items": [
            {
              "id": 104689539,
              "quantity": 1,
              "line_item_id": 703073504,
              "location_id": 487838322,
              "restock_type": "legacy_restock",
              "subtotal": 195.67,
              "total_tax": 3.98,
              "subtotal_set": {
                "shop_money": {
                  "amount": "195.67",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "195.67",
                  "currency_code": "USD"
                }
              },
              "total_tax_set": {
                "shop_money": {
                  "amount": "3.98",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "3.98",
                  "currency_code": "USD"
                }
              },
              "line_item": {
                "id": 703073504,
                "variant_id": 457924702,
                "title": "IPod Nano - 8gb",
                "quantity": 1,
                "sku": "IPOD2008BLACK",
                "variant_title": "black",
                "vendor": null,
                "fulfillment_service": "manual",
                "product_id": 632910392,
                "requires_shipping": true,
                "taxable": true,
                "gift_card": false,
                "name": "IPod Nano - 8gb - black",
                "variant_inventory_management": "shopify",
                "properties": [],
                "product_exists": true,
                "fulfillable_quantity": 1,
                "grams": 200,
                "price": "199.00",
                "total_discount": "0.00",
                "fulfillment_status": null,
                "price_set": {
                  "shop_money": {
                    "amount": "199.00",
                    "currency_code": "USD"
                  },
                  "presentment_money": {
                    "amount": "199.00",
                    "currency_code": "USD"
                  }
                },
                "total_discount_set": {
                  "shop_money": {
                    "amount": "0.00",
                    "currency_code": "USD"
                  },
                  "presentment_money": {
                    "amount": "0.00",
                    "currency_code": "USD"
                  }
                },
                "discount_allocations": [
                  {
                    "amount": "3.33",
                    "discount_application_index": 0,
                    "amount_set": {
                      "shop_money": {
                        "amount": "3.33",
                        "currency_code": "USD"
                      },
                      "presentment_money": {
                        "amount": "3.33",
                        "currency_code": "USD"
                      }
                    }
                  }
                ],
                "admin_graphql_api_id": "gid://shopify/LineItem/703073504",
                "tax_lines": [
                  {
                    "title": "State Tax",
                    "price": "3.98",
                    "rate": 0.06,
                    "price_set": {
                      "shop_money": {
                        "amount": "3.98",
                        "currency_code": "USD"
                      },
                      "presentment_money": {
                        "amount": "3.98",
                        "currency_code": "USD"
                      }
                    }
                  }
                ]
              }
            },
            {
              "id": 709875399,
              "quantity": 1,
              "line_item_id": 466157049,
              "location_id": 487838322,
              "restock_type": "legacy_restock",
              "subtotal": 195.66,
              "total_tax": 3.98,
              "subtotal_set": {
                "shop_money": {
                  "amount": "195.66",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "195.66",
                  "currency_code": "USD"
                }
              },
              "total_tax_set": {
                "shop_money": {
                  "amount": "3.98",
                  "currency_code": "USD"
                },
                "presentment_money": {
                  "amount": "3.98",
                  "currency_code": "USD"
                }
              },
              "line_item": {
                "id": 466157049,
                "variant_id": 39072856,
                "title": "IPod Nano - 8gb",
                "quantity": 1,
                "sku": "IPOD2008GREEN",
                "variant_title": "green",
                "vendor": null,
                "fulfillment_service": "manual",
                "product_id": 632910392,
                "requires_shipping": true,
                "taxable": true,
                "gift_card": false,
                "name": "IPod Nano - 8gb - green",
                "variant_inventory_management": "shopify",
                "properties": [
                  {
                    "name": "Custom Engraving Front",
                    "value": "Happy Birthday"
                  },
                  {
                    "name": "Custom Engraving Back",
                    "value": "Merry Christmas"
                  }
                ],
                "product_exists": true,
                "fulfillable_quantity": 1,
                "grams": 200,
                "price": "199.00",
                "total_discount": "0.00",
                "fulfillment_status": null,
                "price_set": {
                  "shop_money": {
                    "amount": "199.00",
                    "currency_code": "USD"
                  },
                  "presentment_money": {
                    "amount": "199.00",
                    "currency_code": "USD"
                  }
                },
                "total_discount_set": {
                  "shop_money": {
                    "amount": "0.00",
                    "currency_code": "USD"
                  },
                  "presentment_money": {
                    "amount": "0.00",
                    "currency_code": "USD"
                  }
                },
                "discount_allocations": [
                  {
                    "amount": "3.34",
                    "discount_application_index": 0,
                    "amount_set": {
                      "shop_money": {
                        "amount": "3.34",
                        "currency_code": "USD"
                      },
                      "presentment_money": {
                        "amount": "3.34",
                        "currency_code": "USD"
                      }
                    }
                  }
                ],
                "admin_graphql_api_id": "gid://shopify/LineItem/466157049",
                "tax_lines": [
                  {
                    "title": "State Tax",
                    "price": "3.98",
                    "rate": 0.06,
                    "price_set": {
                      "shop_money": {
                        "amount": "3.98",
                        "currency_code": "USD"
                      },
                      "presentment_money": {
                        "amount": "3.98",
                        "currency_code": "USD"
                      }
                    }
                  }
                ]
              }
            }
          ],
          "transactions": [
            {
              "id": 179259969,
              "order_id": 450789469,
              "kind": "refund",
              "gateway": "bogus",
              "status": "success",
              "message": null,
              "created_at": "2005-08-05T12:59:12-04:00",
              "test": false,
              "authorization": "authorization-key",
              "location_id": null,
              "user_id": null,
              "parent_id": 801038806,
              "processed_at": "2005-08-05T12:59:12-04:00",
              "device_id": null,
              "receipt": {},
              "error_code": null,
              "source_name": "web",
              "currency_exchange_adjustment": null,
              "amount": "209.00",
              "currency": "USD",
              "admin_graphql_api_id": "gid://shopify/OrderTransaction/179259969"
            }
          ],
          "order_adjustments": []
        }
      ],
      "total_tip_received": "0.0",
      "admin_graphql_api_id": "gid://shopify/Order/450789469",
      "shipping_lines": [
        {
          "id": 369256396,
          "title": "Free Shipping",
          "price": "0.00",
          "code": "Free Shipping",
          "source": "shopify",
          "phone": null,
          "requested_fulfillment_service_id": null,
          "delivery_category": null,
          "carrier_identifier": null,
          "discounted_price": "0.00",
          "price_set": {
            "shop_money": {
              "amount": "0.00",
              "currency_code": "USD"
            },
            "presentment_money": {
              "amount": "0.00",
              "currency_code": "USD"
            }
          },
          "discounted_price_set": {
            "shop_money": {
              "amount": "0.00",
              "currency_code": "USD"
            },
            "presentment_money": {
              "amount": "0.00",
              "currency_code": "USD"
            }
          },
          "discount_allocations": [],
          "tax_lines": []
        }
      ],
      "billing_address": {
        "first_name": "Bob",
        "address1": "Chestnut Street 92",
        "phone": "555-625-1199",
        "city": "Louisville",
        "zip": "40202",
        "province": "Kentucky",
        "country": "United States",
        "last_name": "Norman",
        "address2": "",
        "company": null,
        "latitude": 45.41634,
        "longitude": -75.6868,
        "name": "Bob Norman",
        "country_code": "US",
        "province_code": "KY"
      },
      "shipping_address": {
        "first_name": "Bob",
        "address1": "Chestnut Street 92",
        "phone": "555-625-1199",
        "city": "Louisville",
        "zip": "40202",
        "province": "Kentucky",
        "country": "United States",
        "last_name": "Norman",
        "address2": "",
        "company": null,
        "latitude": 45.41634,
        "longitude": -75.6868,
        "name": "Bob Norman",
        "country_code": "US",
        "province_code": "KY"
      },
      "client_details": {
        "browser_ip": "0.0.0.0",
        "accept_language": null,
        "user_agent": null,
        "session_hash": null,
        "browser_width": null,
        "browser_height": null
      },
      "payment_details": {
        "credit_card_bin": null,
        "avs_result_code": null,
        "cvv_result_code": null,
        "credit_card_number": "•••• •••• •••• 4242",
        "credit_card_company": "Visa"
      },
      "customer": {
        "id": 207119551,
        "email": "bob.norman@hostmail.com",
        "accepts_marketing": false,
        "created_at": "2020-11-04T16:46:58-05:00",
        "updated_at": "2020-11-04T16:46:58-05:00",
        "first_name": "Bob",
        "last_name": "Norman",
        "orders_count": 1,
        "state": "disabled",
        "total_spent": "199.65",
        "last_order_id": 450789469,
        "note": null,
        "verified_email": true,
        "multipass_identifier": null,
        "tax_exempt": false,
        "phone": "+16136120707",
        "tags": "",
        "last_order_name": "#1001",
        "currency": "USD",
        "accepts_marketing_updated_at": "2005-06-12T11:57:11-04:00",
        "marketing_opt_in_level": null,
        "tax_exemptions": [],
        "admin_graphql_api_id": "gid://shopify/Customer/207119551",
        "default_address": {
          "id": 207119551,
          "customer_id": 207119551,
          "first_name": null,
          "last_name": null,
          "company": null,
          "address1": "Chestnut Street 92",
          "address2": "",
          "city": "Louisville",
          "province": "Kentucky",
          "country": "United States",
          "zip": "40202",
          "phone": "555-625-1199",
          "name": "",
          "province_code": "KY",
          "country_code": "US",
          "country_name": "United States",
          "default": true
        }
      }
    }
  ]
}


================================================
FILE: schema/products.json
================================================
{
  "products": [
    {
      "id": 632910392,
      "title": "IPod Nano - 8GB",
      "body_html": "<p>It's the small iPod with one very big idea: Video. Now the world's most popular music player, available in 4GB and 8GB models, lets you enjoy TV shows, movies, video podcasts, and more. The larger, brighter display means amazing picture quality. In six eye-catching colors, iPod nano is stunning all around. And with models starting at just $149, little speaks volumes.</p>",
      "vendor": "Apple",
      "product_type": "Cult Products",
      "created_at": "2020-11-04T16:46:58-05:00",
      "handle": "ipod-nano",
      "updated_at": "2020-11-04T16:46:58-05:00",
      "published_at": "2007-12-31T19:00:00-05:00",
      "template_suffix": null,
      "published_scope": "web",
      "tags": "Emotive, Flash Memory, MP3, Music",
      "admin_graphql_api_id": "gid://shopify/Product/632910392",
      "variants": [
        {
          "id": 808950810,
          "product_id": 632910392,
          "title": "Pink",
          "price": "199.00",
          "sku": "IPOD2008PINK",
          "position": 1,
          "inventory_policy": "continue",
          "compare_at_price": null,
          "fulfillment_service": "manual",
          "inventory_management": "shopify",
          "option1": "Pink",
          "option2": null,
          "option3": null,
          "created_at": "2020-11-04T16:46:58-05:00",
          "updated_at": "2020-11-04T16:46:58-05:00",
          "taxable": true,
          "barcode": "1234_pink",
          "grams": 567,
          "image_id": 562641783,
          "weight": 1.25,
          "weight_unit": "lb",
          "inventory_item_id": 808950810,
          "inventory_quantity": 10,
          "old_inventory_quantity": 10,
          "requires_shipping": true,
          "admin_graphql_api_id": "gid://shopify/ProductVariant/808950810",
          "presentment_prices": [
            {
              "price": {
                "currency_code": "USD",
                "amount": "199.00"
              },
              "compare_at_price": null
            }
          ]
        },
        {
          "id": 49148385,
          "product_id": 632910392,
          "title": "Red",
          "price": "199.00",
          "sku": "IPOD2008RED",
          "position": 2,
          "inventory_policy": "continue",
          "compare_at_price": null,
          "fulfillment_service": "manual",
          "inventory_management": "shopify",
          "option1": "Red",
          "option2": null,
          "option3": null,
          "created_at": "2020-11-04T16:46:58-05:00",
          "updated_at": "2020-11-04T16:46:58-05:00",
          "taxable": true,
          "barcode": "1234_red",
          "grams": 567,
          "image_id": null,
          "weight": 1.25,
          "weight_unit": "lb",
          "inventory_item_id": 49148385,
          "inventory_quantity": 20,
          "old_inventory_quantity": 20,
          "requires_shipping": true,
          "admin_graphql_api_id": "gid://shopify/ProductVariant/49148385",
          "presentment_prices": [
            {
              "price": {
                "currency_code": "USD",
                "amount": "199.00"
              },
              "compare_at_price": null
            }
          ]
        },
        {
          "id": 39072856,
          "product_id": 632910392,
          "title": "Green",
          "price": "199.00",
          "sku": "IPOD2008GREEN",
          "position": 3,
          "inventory_policy": "continue",
          "compare_at_price": null,
          "fulfillment_service": "manual",
          "inventory_management": "shopify",
          "option1": "Green",
          "option2": null,
          "option3": null,
          "created_at": "2020-11-04T16:46:58-05:00",
          "updated_at": "2020-11-04T16:46:58-05:00",
          "taxable": true,
          "barcode": "1234_green",
          "grams": 567,
          "image_id": null,
          "weight": 1.25,
          "weight_unit": "lb",
          "inventory_item_id": 39072856,
          "inventory_quantity": 30,
          "old_inventory_quantity": 30,
          "requires_shipping": true,
          "admin_graphql_api_id": "gid://shopify/ProductVariant/39072856",
          "presentment_prices": [
            {
              "price": {
                "currency_code": "USD",
                "amount": "199.00"
              },
              "compare_at_price": null
            }
          ]
        },
        {
          "id": 457924702,
          "product_id": 632910392,
          "title": "Black",
          "price": "199.00",
          "sku": "IPOD2008BLACK",
          "position": 4,
          "inventory_policy": "continue",
          "compare_at_price": null,
          "fulfillment_service": "manual",
          "inventory_management": "shopify",
          "option1": "Black",
          "option2": null,
          "option3": null,
          "created_at": "2020-11-04T16:46:58-05:00",
          "updated_at": "2020-11-04T16:46:58-05:00",
          "taxable": true,
          "barcode": "1234_black",
          "grams": 567,
          "image_id": null,
          "weight": 1.25,
          "weight_unit": "lb",
          "inventory_item_id": 457924702,
          "inventory_quantity": 40,
          "old_inventory_quantity": 40,
          "requires_shipping": true,
          "admin_graphql_api_id": "gid://shopify/ProductVariant/457924702",
          "presentment_prices": [
            {
              "price": {
                "currency_code": "USD",
                "amount": "199.00"
              },
              "compare_at_price": null
            }
          ]
        }
      ],
      "options": [
        {
          "id": 594680422,
          "product_id": 632910392,
          "name": "Color",
          "position": 1,
          "values": [
            "Pink",
            "Red",
            "Green",
            "Black"
          ]
        }
      ],
      "images": [
        {
          "id": 850703190,
          "product_id": 632910392,
          "position": 1,
          "created_at": "2020-11-04T16:46:58-05:00",
          "updated_at": "2020-11-04T16:46:58-05:00",
          "alt": null,
          "width": 123,
          "height": 456,
          "src": "https://cdn.shopify.com/s/files/1/0006/9093/3842/products/ipod-nano.png?v=1604526418",
          "variant_ids": [],
          "admin_graphql_api_id": "gid://shopify/ProductImage/850703190"
        },
        {
          "id": 562641783,
          "product_id": 632910392,
          "position": 2,
          "created_at": "2020-11-04T16:46:58-05:00",
          "updated_at": "2020-11-04T16:46:58-05:00",
          "alt": null,
          "width": 123,
          "height": 456,
          "src": "https://cdn.shopify.com/s/files/1/0006/9093/3842/products/ipod-nano-2.png?v=1604526418",
          "variant_ids": [
            808950810
          ],
          "admin_graphql_api_id": "gid://shopify/ProductImage/562641783"
        }
      ],
      "image": {
        "id": 850703190,
        "product_id": 632910392,
        "position": 1,
        "created_at": "2020-11-04T16:46:58-05:00",
        "updated_at": "2020-11-04T16:46:58-05:00",
        "alt": null,
        "width": 123,
        "height": 456,
        "src": "https://cdn.shopify.com/s/files/1/0006/9093/3842/products/ipod-nano.png?v=1604526418",
        "variant_ids": [],
        "admin_graphql_api_id": "gid://shopify/ProductImage/850703190"
      }
    },
    {
      "id": 921728736,
      "title": "IPod Touch 8GB",
      "body_html": "<p>The iPod Touch has the iPhone's multi-touch interface, with a physical home button off the touch screen. The home screen has a list of buttons for the available applications.</p>",
      "vendor": "Apple",
      "product_type": "Cult Products",
      "created_at": "2020-11-04T16:46:58-05:00",
      "handle": "ipod-touch",
      "updated_at": "2020-11-04T16:46:58-05:00",
      "published_at": "2008-09-25T20:00:00-04:00",
      "template_suffix": null,
      "published_scope": "web",
      "tags": "",
      "admin_graphql_api_id": "gid://shopify/Product/921728736",
      "variants": [
        {
          "id": 447654529,
          "product_id": 921728736,
          "title": "Black",
          "price": "199.00",
          "sku": "IPOD2009BLACK",
          "position": 1,
          "inventory_policy": "continue",
          "compare_at_price": null,
          "fulfillment_service": "shipwire-app",
          "inventory_management": "shipwire-app",
          "option1": "Black",
          "option2": null,
          "option3": null,
          "created_at": "2020-11-04T16:46:58-05:00",
          "updated_at": "2020-11-04T16:46:58-05:00",
          "taxable": true,
          "barcode": "1234_black",
          "grams": 567,
          "image_id": null,
          "weight": 1.25,
          "weight_unit": "lb",
          "inventory_item_id": 447654529,
          "inventory_quantity": 13,
          "old_inventory_quantity": 13,
          "requires_shipping": true,
          "admin_graphql_api_id": "gid://shopify/ProductVariant/447654529",
          "presentment_prices": [
            {
              "price": {
                "currency_code": "USD",
                "amount": "199.00"
              },
              "compare_at_price": null
            }
          ]
        }
      ],
      "options": [
        {
          "id": 891236591,
          "product_id": 921728736,
          "name": "Title",
          "position": 1,
          "values": [
            "Black"
          ]
        }
      ],
      "images": [],
      "image": null
    }
  ]
}


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi


================================================
FILE: src/component.py
================================================
'''
Template Component main class.

'''
import datetime
import logging
import os
import sys
from pathlib import Path
from typing import List

from kbc.env_handler import KBCEnvHandler
from kbc.result import ResultWriter, KBCTableDef

from result import OrderWriter, ProductsWriter, CustomersWriter
from shopify_cli import ShopifyClient

# configuration variables
KEY_API_TOKEN = '#api_token'

KEY_SINCE_DATE = 'date_since'
KEY_TO_DATE = 'date_to'
KEY_INCREMENTAL_OUTPUT = 'incremental_output'
KEY_FETCH_PARAMETER = 'fetch_parameter'
KEY_LOADING_OPTIONS = 'loading_options'

KEY_ENDPOINTS = 'endpoints'
KEY_ORDERS = 'orders'
KEY_PRODUCTS = 'products'
KEY_PRODUCTS_ARCHIVED = 'products_archived'
KEY_PRODUCTS_DRAFTS = 'products_drafts'
KEY_CUSTOMERS = 'customers'
KEY_EVENTS = 'events'
KEY_INVENTORY = 'inventory'

KEY_SHOP = 'shop'

# #### Keep for debug
KEY_DEBUG = 'debug'

# list of mandatory parameters => if some is missing, component will fail with readable message on initialization.
MANDATORY_PARS = [KEY_API_TOKEN, KEY_SHOP, KEY_LOADING_OPTIONS, KEY_ENDPOINTS]
MANDATORY_IMAGE_PARS = []


class UserException(Exception):
    pass


class Component(KBCEnvHandler):

    def __init__(self, debug=False):
        # for easier local project setup
        default_data_dir = Path(__file__).resolve().parent.parent.joinpath('data').as_posix() \
            if not os.environ.get('KBC_DATADIR') else None

        KBCEnvHandler.__init__(self, MANDATORY_PARS, log_level=logging.DEBUG if debug else logging.INFO,
                               data_path=default_data_dir)
        # override debug from config
        if self.cfg_params.get(KEY_DEBUG):
            debug = True
        if debug:
            logging.getLogger().setLevel(logging.DEBUG)
        else:
            logging.getLogger('pyactiveresource.connection').setLevel(
                logging.WARNING)  # avoid detail logs from the library
            logging.getLogger('backoff').setLevel(
                logging.WARNING)  # avoid detail logs from the library
        logging.info('Loading configuration...')

        try:
            # validation of mandatory parameters. Produces ValueError
            self.validate_config(MANDATORY_PARS)
            self.validate_image_parameters(MANDATORY_IMAGE_PARS)
        except ValueError as e:
            logging.exception(e)
            exit(1)

        self.validate_api_token(self.cfg_params[KEY_API_TOKEN])

        self.client = ShopifyClient(self.cfg_params[KEY_SHOP], self.cfg_params[KEY_API_TOKEN],
                                    self.cfg_params.get('api_version', '2022-10'))
        self.extraction_time = datetime.datetime.now().isoformat()

        # shared customers writer
        self._customer_writer = CustomersWriter(self.tables_out_path, 'customer', extraction_time=self.extraction_time,
                                                file_headers=self.get_state_file())
        self._metafields_writer = ResultWriter(self.tables_out_path,
                                               KBCTableDef(name='metafields',
                                                           pk=['id'],
                                                           columns=self.get_state_file().get(
                                                               'metafields.csv', []),
                                                           destination=''),
                                               flatten_objects=True, child_separator='__', fix_headers=True)

    def run(self):
        '''
        Main execution code
        '''
        params = self.cfg_params  # noqa

        last_state = self.get_state_file()
        fetch_parameter = params[KEY_LOADING_OPTIONS].get(KEY_FETCH_PARAMETER) or 'updated_at'
        since = params[KEY_LOADING_OPTIONS].get(KEY_SINCE_DATE) or '2005-01-01'
        until = params[KEY_LOADING_OPTIONS].get(KEY_TO_DATE) or 'now'

        start_date, end_date = self.get_date_period_converted(since, until)
        results = []
        endpoints = params[KEY_ENDPOINTS]

        if endpoints.get(KEY_ORDERS):
            logging.info(f'Getting orders since {start_date} to {end_date}')
            results.extend(self.download_orders(fetch_parameter, start_date, end_date, last_state))

        if endpoints.get(KEY_PRODUCTS):
            logging.info(f'Getting products since {start_date} to {end_date}')
            results.extend(self.download_products(fetch_parameter, start_date, end_date, last_state))

        if endpoints.get(KEY_CUSTOMERS):
            # special case, results collected at the end
            logging.info(f'Getting customers since {start_date} to {end_date}')
            self.download_customers(fetch_parameter, start_date, end_date)

        if endpoints.get(KEY_EVENTS) and len(endpoints[KEY_EVENTS]) > 0:
            logging.info(f'Getting events since {start_date} to {end_date}')
            results.extend(self.download_events(endpoints[KEY_EVENTS][0], fetch_parameter, start_date, end_date))

        # collect customers
        self._customer_writer.close()
        results.extend(self._customer_writer.collect_results())

        # collect metafields
        self._metafields_writer.close()
        results.extend(self._metafields_writer.collect_results())

        # update column names in statefile
        for r in results:
            file_name = os.path.basename(r.full_path)
            last_state[file_name] = r.table_def.columns
        self.write_state_file(last_state)
        incremental = params[KEY_LOADING_OPTIONS].get(KEY_INCREMENTAL_OUTPUT, False)
        self.create_manifests(results, incremental=incremental)

    def get_product_status(self):
        status = ['active']
        if KEY_PRODUCTS_ARCHIVED in self.cfg_params[KEY_ENDPOINTS]:
            if self.cfg_params[KEY_ENDPOINTS][KEY_PRODUCTS_ARCHIVED]:
                status.append('archived')
        if KEY_PRODUCTS_DRAFTS in self.cfg_params[KEY_ENDPOINTS]:
            if self.cfg_params[KEY_ENDPOINTS][KEY_PRODUCTS_ARCHIVED]:
                status.append('draft')
        return ','.join(status)

    def download_orders(self, fetch_field, start_date, end_date, file_headers):
        with OrderWriter(self.tables_out_path, 'order', extraction_time=self.extraction_time,
                         customers_writer=self._customer_writer,
                         file_headers=file_headers) as writer_orders, \
                ResultWriter(self.tables_out_path,
                             KBCTableDef(name='transactions',
                                         pk=['order_id', 'id'],
                                         columns=file_headers.get('transactions.csv', []),
                                         destination=''), fix_headers=True,
                             flatten_objects=False, child_separator='__') as writer_transactions:
            orders_processed = 0
            for o in self.client.get_orders(fetch_field, start_date, end_date):
                writer_orders.write(o)
                orders_processed += 1

                if self.cfg_params[KEY_ENDPOINTS].get('transactions'):
                    self.download_transactions(writer_transactions, o['id'])

                if orders_processed % 1000 == 0:
                    logging.info(f"Downloading records: {orders_processed} - {orders_processed + 1000}")

        results = writer_orders.collect_results()
        results.extend(writer_transactions.collect_results())

        return results

    def download_products(self, fetch_field, start_date, end_date, file_headers):
        inventory_writer = ResultWriter(self.tables_out_path,
                                        KBCTableDef(name='inventory_items', pk=['id'],
                                                    columns=[],
                                                    destination=''),
                                        flatten_objects=True, child_separator='__')
        inventory_level_writer = ResultWriter(self.tables_out_path,
                                              KBCTableDef(name='inventory_levels',
                                                          pk=['inventory_item_id', 'location_id'],
                                                          columns=[],
                                                          destination=''),
                                              fix_headers=True,
                                              flatten_objects=True, child_separator='__')
        if self.cfg_params[KEY_ENDPOINTS].get(KEY_INVENTORY):
            logging.info('Getting inventory levels and locations for products')

        with ProductsWriter(self.tables_out_path, 'product',
                            extraction_time=self.extraction_time,
                            file_headers=file_headers) as writer:
            for o in self.client.get_products(fetch_field, start_date, end_date, self.get_product_status()):
                variants = [p['variants'] for p in o]
                inventory_ids = [str(v['inventory_item_id']) for sublist in variants for v in sublist]
                writer.write_all(o)
                if o and self.cfg_params[KEY_ENDPOINTS].get(KEY_INVENTORY):
                    self.download_product_inventory(inventory_writer, inventory_ids)
                    self.download_product_inventory_levels(inventory_level_writer, inventory_ids)

                if self.cfg_params[KEY_ENDPOINTS].get('product_metafields'):
                    self.download_metafields('products', [p['id'] for p in o])

                if self.cfg_params[KEY_ENDPOINTS].get('variant_metafields'):
                    self.download_metafields('variants', [v['id'] for sublist in variants for v in sublist])

        inventory_writer.close()
        inventory_level_writer.close()

        results = writer.collect_results()
        results.extend(inventory_level_writer.collect_results())
        results.extend(inventory_writer.collect_results())
        results.extend(self.download_locations())

        return results

    def download_locations(self):
        with ResultWriter(self.tables_out_path,
                          KBCTableDef(name='locations', pk=['id'],
                                      columns=[],
                                      destination=''),
                          flatten_objects=True, child_separator='__') as writer:
            for item in self.client.get_locations():
                writer.write(item)

        return writer.collect_results()

    def download_metafields(self, object_type: str, owner_ids: List[str]):
        for oid in owner_ids:
            for metafield in self.client.get_metafields(object_type, oid):
                self._metafields_writer.write(metafield)

    def download_product_inventory(self, writer, inventory_ids):
        for chunk in self._split_array_to_chunks(inventory_ids, 49):
            for item in self.client.get_inventory_items(chunk):
                writer.write(item)

    def download_product_inventory_levels(self, writer, inventory_ids):
        for chunk in self._split_array_to_chunks(inventory_ids, 49):
            for item in self.client.get_inventory_item_levels(chunk):
                writer.write(item)

    def download_customers(self, fetch_field, start_date, end_date):
        for o in self.client.get_customers(fetch_field, start_date, end_date):
            self._customer_writer.write(o)

    def download_transactions(self, writer, order_id):
        for transaction in self.client.get_transactions(order_id):
            writer.write(transaction)

    def download_events(self, param, fetch_field, start_date, end_date):
        headers = [
            "id",
            "subject_id",
            "created_at",
            "subject_type",
            "verb",
            "arguments",
            "body",
            "message",
            "author",
            "description",
            "path"
        ]
        with ResultWriter(self.tables_out_path,
                          KBCTableDef(name='events', pk=['id'],
                                      columns=headers,
                                      destination=''),
                          fix_headers=True, flatten_objects=True, child_separator='__') as writer:

            # iterate over types

            types = self.parse_comma_separated_values(param['types'])
            filters = param['filters']
            if not types:
                types = [None]
            for t in types:
                for o in self.client.get_events(fetch_field, start_date, end_date, filter_resource=filters,
                                                event_type=t):
                    writer.write(o)

        results = writer.collect_results()
        return results

    @staticmethod
    def _split_array_to_chunks(items: list, chunk_size: int):
        """
        Helper method to split items into chunks of specified size
        Args:
            items:
            chunk_size:

        Returns:

        """
        buffered = 0
        buffer = []
        for p in items:
            buffered += 1
            buffer.append(p)
            if buffered >= chunk_size:
                results = buffer.copy()
                buffer = []
                yield results
        if buffer:
            yield buffer

    @staticmethod
    def parse_comma_separated_values(param) -> List[str]:
        cols = []
        if param:
            cols = [p.strip() for p in param.split(",")]
        return cols

    @staticmethod
    def validate_api_token(token):
        try:
            for letter in token:
                letter.encode('latin-1')
        except UnicodeEncodeError:
            raise UserException("Password/API token that was entered is not valid, please re-enter it."
                                " Make sure to follow the custom app creation in the description of the component")


"""
        Main entrypoint
"""
if __name__ == "__main__":
    if len(sys.argv) > 1:
        debug_arg = sys.argv[1]
    else:
        debug_arg = False
    try:
        comp = Component(debug_arg)
        comp.run()
    except Exception as exc:
        logging.exception(exc)
        exit(1)



================================================
FILE: src/result.py
================================================
from kbc.result import ResultWriter, KBCTableDef

EXTRACTION_TIME = 'extraction_time'

KEY_ROW_NR = 'row_nr'


class LineItemWriter(ResultWriter):
    def __init__(self, result_dir_path, extraction_time, additional_pk: list = None, prefix='', file_headers=None):
        pk = ['id']
        if additional_pk:
            pk.extend(additional_pk)
        file_name = f'{prefix}line_item'
        ResultWriter.__init__(self, result_dir_path,
                              KBCTableDef(name=file_name, pk=pk, columns=file_headers.get(f'{file_name}.csv', []),
                                          destination=''),
                              fix_headers=True, flatten_objects=True, child_separator='__')
        self.extraction_time = extraction_time

        self.result_dir_path = result_dir_path

        # discount_allocations writer
        self.discount_allocations_writer = ResultWriter(result_dir_path,
                                                        KBCTableDef(name=f'{prefix}line_item_discount_allocations',
                                                                    pk=[KEY_ROW_NR, 'line_item_id'],
                                                                    columns=file_headers.get(
                                                                        f'{prefix}line_item_discount_allocations.csv',
                                                                        []),
                                                                    destination=''),
                                                        flatten_objects=True,
                                                        fix_headers=True,
                                                        child_separator='__')
        # tax_lines writer
        self.tax_lines_writer = ResultWriter(result_dir_path,
                                             KBCTableDef(name=f'{prefix}line_item_tax_lines',
                                                         pk=[KEY_ROW_NR, 'line_item_id'],
                                                         columns=file_headers.get(
                                                             f'{prefix}line_item_tax_lines.csv',
                                                             []),
                                                         destination=''),
                                             flatten_objects=True,
                                             fix_headers=True,
                                             child_separator='__')

    def write(self, data, file_name=None, user_values=None, object_from_arrays=False, write_header=True):
        # flatten obj
        line_item_id = data['id']

        for idx, el in enumerate(data.pop('discount_allocations', [])):
            el[KEY_ROW_NR] = idx
            self.discount_allocations_writer.write(el, user_values={"line_item_id": line_item_id,
                                                                    EXTRACTION_TIME: self.extraction_time})

        for idx, el in enumerate(data.pop('tax_lines', [])):
            el[KEY_ROW_NR] = idx
            self.tax_lines_writer.write(el, user_values={"line_item_id": line_item_id,
                                                         EXTRACTION_TIME: self.extraction_time})

        super().write(data, file_name, user_values, object_from_arrays, write_header)

    def collect_results(self):
        results = []
        results.extend(self.discount_allocations_writer.collect_results())
        results.extend(self.tax_lines_writer.collect_results())
        results.extend(super().collect_results())
        return results

    def close(self):
        self.discount_allocations_writer.close()
        self.tax_lines_writer.close()
        super().close()


class FulfillmentsWriter(ResultWriter):
    def __init__(self, result_dir_path, extraction_time, additional_pk: list = None, prefix='', file_headers=None):
        pk = ['id', 'order_id']
        if not additional_pk:
            pk.extend(additional_pk)

        ResultWriter.__init__(self, result_dir_path,
                              KBCTableDef(name=f'{prefix}fulfillments', pk=pk,
                                          columns=file_headers.get(
                                              f'{prefix}fulfillments.csv', []), destination=''),
                              fix_headers=True, flatten_objects=True, child_separator='__')
        self.extraction_time = extraction_time

        self.result_dir_path = result_dir_path
        # lineitems writer
        self.line_item_writer = LineItemWriter(result_dir_path, extraction_time, additional_pk=['fulfillment_id'],
                                               prefix='fulfillment_', file_headers=file_headers)

        # discount_allocations writer
        self.discount_allocations_writer = ResultWriter(result_dir_path,
                                                        KBCTableDef(name='fulfillment_discount_allocations',
                                                                    pk=[KEY_ROW_NR, 'fulfillment_id'],
                                                                    columns=file_headers.get(
                                                                        'fulfillment_discount_allocations.csv', []),
                                                                    destination=''),
                                                        flatten_objects=True,
                                                        fix_headers=True,
                                                        child_separator='__')
        # tax_lines writer
        self.tax_lines_writer = ResultWriter(result_dir_path,
                                             KBCTableDef(name='fulfillment_tax_lines',
                                                         pk=[KEY_ROW_NR, 'fulfillment_id'],
                                                         columns=file_headers.get(
                                                             'fulfillment_tax_lines.csv',
                                                             []),
                                                         destination=''),
                                             flatten_objects=True,
                                             fix_headers=True,
                                             child_separator='__')

    def write(self, data, file_name=None, user_values=None, object_from_arrays=False, write_header=True):
        # flatten obj
        fulfillment_id = data['id']
        line_items = data.pop('line_items', [])
        self.line_item_writer.write_all(line_items, user_values={"fulfillment_id": fulfillment_id,
                                                                 EXTRACTION_TIME: self.extraction_time})

        for idx, el in enumerate(data.pop('discount_applications', [])):
            el[KEY_ROW_NR] = idx
            self.discount_allocations_writer.write(el, user_values={"fulfillment_id": fulfillment_id,
                                                                    EXTRACTION_TIME: self.extraction_time})

        for idx, el in enumerate(data.pop('tax_lines', [])):
            el[KEY_ROW_NR] = idx
            self.tax_lines_writer.write(el, user_values={"fulfillment_id": fulfillment_id})

        super().write(data, file_name, user_values, object_from_arrays, write_header)

    def collect_results(self):
        results = []
        results.extend(self.line_item_writer.collect_results())
        results.extend(self.discount_allocations_writer.collect_results())
        results.extend(self.tax_lines_writer.collect_results())
        results.extend(super().collect_results())
        return results

    def close(self):
        self.line_item_writer.close()
        self.discount_allocations_writer.close()
        self.tax_lines_writer.close()
        super().close()


class OrderWriter(ResultWriter):

    def __init__(self, result_dir_path, result_name, extraction_time, customers_writer, file_headers=None):

        ResultWriter.__init__(self, result_dir_path,
                              KBCTableDef(name=result_name, pk=['id'],
                                          columns=file_headers.get('order.csv', []),
                                          destination=''),
                              fix_headers=True, flatten_objects=True, child_separator='__')
        self.extraction_time = extraction_time
        # custom user added col
        self.user_value_cols = ['extraction_time']
        self.result_dir_path = result_dir_path

        # lineitems writer
        self.line_item_writer = LineItemWriter(result_dir_path, extraction_time, additional_pk=['order_id'],
                                               file_headers=file_headers)

        # fulfillments writer
        self.fulfillments_writer = FulfillmentsWriter(result_dir_path, extraction_time, additional_pk=['order_id'],
                                                      prefix='order_',
                                                      file_headers=file_headers)

        # discount_applications writer
        self.discount_applications_writer = ResultWriter(result_dir_path,
                                                         KBCTableDef(name='order_discount_applications',
                                                                     pk=['order_id', KEY_ROW_NR],
                                                                     columns=file_headers.get(
                                                                         'order_discount_applications.csv', []),
                                                                     destination=''),
                                                         fix_headers=True,
                                                         flatten_objects=True,
                                                         child_separator='__')

        # discount_codes writer
        self.discount_codes_writer = ResultWriter(result_dir_path,
                                                  KBCTableDef(name='order_discount_codes',
                                                              pk=['order_id', KEY_ROW_NR],
                                                              columns=file_headers.get(
                                                                  'order_discount_codes.csv', []),
                                                              destination=''),
                                                  fix_headers=True,
                                                  flatten_objects=True,
                                                  child_separator='__')

        # tax_lines writer
        self.tax_lines_writer = ResultWriter(result_dir_path,
                                             KBCTableDef(name='order_tax_lines',
                                                         pk=['order_id', KEY_ROW_NR],
                                                         columns=file_headers.get(
                                                             'order_tax_lines.csv', []),
                                                         destination=''),
                                             fix_headers=True,
                                             flatten_objects=True,
                                             child_separator='__')

        # customer writer
        self.customer_writer = customers_writer

    def write(self, data, file_name=None, user_values=None, object_from_arrays=False, write_header=True):
        if not data:
            return

        # flatten obj
        order_id = data['id']
        line_items = data.pop('line_items')
        self.line_item_writer.write_all(line_items, user_values={"order_id": order_id,
                                                                 EXTRACTION_TIME: self.extraction_time})

        self.fulfillments_writer.write_all(data.pop('fulfillments', []), user_values={"order_id": order_id,
                                                                                      EXTRACTION_TIME:
                                                                                          self.extraction_time})

        for idx, el in enumerate(data.pop('discount_applications', [])):
            el[KEY_ROW_NR] = idx
            self.discount_applications_writer.write(el, user_values={"order_id": order_id,
                                                                     EXTRACTION_TIME: self.extraction_time})

        for idx, el in enumerate(data.pop('discount_codes', [])):
            el[KEY_ROW_NR] = idx
            self.discount_codes_writer.write(el, user_values={"order_id": order_id,
                                                              EXTRACTION_TIME: self.extraction_time})

        for idx, el in enumerate(data.pop('tax_lines', [])):
            el[KEY_ROW_NR] = idx
            self.tax_lines_writer.write(el, user_values={"order_id": order_id,
                                                         EXTRACTION_TIME: self.extraction_time})

        customer = data.pop('customer', {})
        if customer:
            data['customer_id'] = customer.get('id', '')
            self.customer_writer.write(customer)

        super().write(data, user_values=user_values)

    def collect_results(self):
        results = []
        results.extend(self.line_item_writer.collect_results())
        results.extend(self.fulfillments_writer.collect_results())
        results.extend(self.discount_applications_writer.collect_results())
        results.extend(self.tax_lines_writer.collect_results())
        results.extend(self.discount_codes_writer.collect_results())
        results.extend(super().collect_results())
        return results

    def close(self):
        self.line_item_writer.close()
        self.fulfillments_writer.close()
        self.discount_applications_writer.close()
        self.discount_codes_writer.close()
        self.tax_lines_writer.close()
        super().close()


# ###################### PRODUCTS

class ProductVariantWriter(ResultWriter):
    def __init__(self, result_dir_path, extraction_time, file_headers, additional_pk: list = None):
        pk = ['id', 'product_id']
        if additional_pk:
            pk.extend(additional_pk)

        ResultWriter.__init__(self, result_dir_path,
                              KBCTableDef(name='product_variant', pk=pk,
                                          columns=file_headers.get('product_variant.csv', []),
                                          destination=''),
                              fix_headers=True, flatten_objects=True, child_separator='__')
        self.extraction_time = extraction_time

        self.result_dir_path = result_dir_path

        # presentment_prices writer
        self.presentment_prices_writer = ResultWriter(result_dir_path,
                                                      KBCTableDef(name='product_variant_presentment_prices',
                                                                  pk=[KEY_ROW_NR, 'product_variant_id'],
                                                                  columns=file_headers.get(
                                                                      'product_variant_presentment_prices.csv', []),
                                                                  destination=''),
                                                      fix_headers=True, flatten_objects=True, child_separator='__')

    def write(self, data, file_name=None, user_values=None, object_from_arrays=False, write_header=True):
        # flatten obj
        product_variant_id = data['id']

        for idx, el in enumerate(data.pop('presentment_prices', [])):
            el[KEY_ROW_NR] = idx
            self.presentment_prices_writer.write(el, user_values={"product_variant_id": product_variant_id,
                                                                  EXTRACTION_TIME: self.extraction_time})

        super().write(data, file_name, user_values, object_from_arrays, write_header)

    def collect_results(self):
        results = []
        results.extend(self.presentment_prices_writer.collect_results())
        results.extend(super().collect_results())
        return results

    def close(self):
        self.presentment_prices_writer.close()
        super().close()


class ProductsWriter(ResultWriter):

    def __init__(self, result_dir_path, result_name, extraction_time, file_headers):
        ResultWriter.__init__(self, result_dir_path,
                              KBCTableDef(name=result_name, pk=['id'],
                                          columns=file_headers.get(
                                              f'{result_name}.csv', []),
                                          destination=''),
                              fix_headers=True, flatten_objects=True, child_separator='__')
        self.extraction_time = extraction_time
        # custom user added col
        self.user_value_cols = ['extraction_time']
        self.result_dir_path = result_dir_path

        # variants writer
        self.variants_writer = ProductVariantWriter(result_dir_path, extraction_time, file_headers)

        # options writer
        self.product_options_writer = ResultWriter(result_dir_path, KBCTableDef(name='product_options',
                                                                                pk=['id', 'product_id'],
                                                                                columns=file_headers.get(
                                                                                    'product_options.csv', []),
                                                                                destination=''),
                                                   fix_headers=True, flatten_objects=True, child_separator='__')
        # images writer
        self.product_images_writer = ResultWriter(result_dir_path, KBCTableDef(name='product_images',
                                                                               pk=['id', 'product_id'],
                                                                               columns=file_headers.get(
                                                                                   'product_images.csv', []),
                                                                               destination=''),
                                                  fix_headers=True, flatten_objects=True, child_separator='__')

    def write(self, data, file_name=None, user_values=None, object_from_arrays=False, write_header=True):
        product_id = data['id']
        self.product_images_writer.write_all(data.pop('images', []), user_values={'product_id': product_id,
                                                                                  EXTRACTION_TIME:
                                                                                      self.extraction_time})

        self.product_options_writer.write_all(data.pop('options', []), user_values={
            EXTRACTION_TIME: self.extraction_time})

        self.variants_writer.write_all(data.pop('variants', []), user_values={'product_id': product_id,
                                                                              EXTRACTION_TIME: self.extraction_time})

        super().write(data, user_values=user_values)

    def collect_results(self):
        results = []
        results.extend(self.product_options_writer.collect_results())
        results.extend(self.product_images_writer.collect_results())
        results.extend(self.variants_writer.collect_results())
        results.extend(super().collect_results())
        return results

    def close(self):
        self.product_options_writer.close()
        self.product_images_writer.close()
        self.variants_writer.close()
        super().close()


# ############ CUSTOMERS


class CustomersWriter(ResultWriter):
    """
    Sliced
    """

    def __init__(self, result_dir_path, result_name, extraction_time, file_headers):
        ResultWriter.__init__(self, result_dir_path,
                              KBCTableDef(name=result_name, pk=['id'],
                                          columns=file_headers.get(
                                              'customer.csv', []),
                                          destination=''),
                              fix_headers=True, flatten_objects=True, child_separator='__')
        self.extraction_time = extraction_time
        # custom user added col
        self.user_value_cols = ['extraction_time']

        # addresses writer
        self.address_writer = ResultWriter(result_dir_path, KBCTableDef(name='customer_addresses',
                                                                        pk=['id', 'customer_id'],
                                                                        columns=file_headers.get(
                                                                            'customer_addresses.csv', []),
                                                                        destination=''),
                                           fix_headers=True, flatten_objects=True, child_separator='__')

    def write(self, data, file_name=None, user_values=None, object_from_arrays=False, write_header=True):
        self.address_writer.write_all(data.pop('addresses', []), user_values={
            EXTRACTION_TIME: self.extraction_time})

        super().write(data, user_values=user_values, write_header=True)

    def collect_results(self):
        results = super().collect_results()
        results.extend(self.address_writer.collect_results())

        return results

    def close(self):
        self.address_writer.close()
        super().close()



================================================
FILE: src/shopify_cli.py
================================================
import datetime
import functools
import json
import logging
import math
import sys
import time
from enum import Enum
from typing import Type, List, Union

import backoff
import pyactiveresource
import pyactiveresource.formats
import shopify
from pyactiveresource.connection import ResourceNotFound, UnauthorizedAccess, ClientError
# ##################  Taken from Sopify Singer-Tap
from shopify import PaginatedIterator

RESULTS_PER_PAGE = 250

# We've observed 500 errors returned if this is too large (30 days was too
# large for a customer)
DATE_WINDOW_SIZE = 30

# We will retry a 500 error a maximum of 5 times before giving up
MAX_RETRIES = 5
BASE_SLEEP_TIME = 10


class ShopifyClientError(Exception):
    pass


def is_not_status_code_fn(status_code):
    def gen_fn(exc):
        if getattr(exc, 'code', None) and exc.code not in status_code:
            return True
        # Retry other errors up to the max
        return False

    return gen_fn


# Taken from Sopify Singer-Tap
def leaky_bucket_handler(details):
    logging.info("Received 429 -- sleeping for %s seconds",
                 details['wait'])


# Taken from Sopify Singer-Tap
def retry_handler(details):
    logging.info("Received 500 or retryable error -- Retry %s/%s",
                 details['tries'], MAX_RETRIES)


# ################  Taken from Sopify Singer-Tap
# pylint: disable=unused-argument
def retry_after_wait_gen(**kwargs):
    # This is called in an except block so we can retrieve the exception
    # and check it.

    # Advance past initial .send() call
    yield  # type: ignore[misc]

    exc_info = sys.exc_info()
    if exc_info[1] is None:
        yield 5
    elif exc_info[1]:
        resp = exc_info[1].response
        # Retry-After is an undocumented header. But honoring
        # it was proven to work in our spikes.
        # It's been observed to come through as lowercase, so fallback if not present
        sleep_time_str = resp.headers.get('Retry-After', resp.headers.get('retry-after', 0))
        yield math.floor(float(sleep_time_str) * 1.5)


def error_handling(fnc):
    @backoff.on_exception(backoff.expo,
                          (pyactiveresource.connection.ServerError,
                           pyactiveresource.formats.Error
                           ),
                          giveup=is_not_status_code_fn(range(500, 599)),
                          on_backoff=retry_handler,
                          max_tries=MAX_RETRIES)
    @backoff.on_exception(retry_after_wait_gen,
                          pyactiveresource.connection.ClientError,
                          giveup=is_not_status_code_fn([429]),
                          on_backoff=leaky_bucket_handler,
                          # No jitter as we want a constant value
                          jitter=None)
    @functools.wraps(fnc)
    def wrapper(*args, **kwargs):
        return fnc(*args, **kwargs)

    return wrapper


def response_error_handling(func):
    """Function, that handles response handling of HTTP requests.
    """

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ResourceNotFound as e:
            logging.error(e, exc_info=True)
            # Handle different error codes
            raise ShopifyClientError('The resource was not found. Please check your Shop ID!') from e
        except UnauthorizedAccess as e:
            error_msg = json.loads(e.response.body.decode('utf-8'))["errors"]
            raise ShopifyClientError(f'{error_msg}; Please check your credentials and app permissions!') from e
        except ClientError as e:
            error_msg = json.loads(e.response.body.decode('utf-8'))["errors"]
            raise ShopifyClientError(f'Request to {e.url} failed; Error: {error_msg}') from e

    return wrapper


class Error(Exception):
    """Base exception for the API interaction module"""


class OutOfOrderIdsError(Error):
    """Raised if our expectation of ordering by ID is violated"""


# data

class ShopifyResource(Enum):
    Article = "Article"
    Blog = "Blog"
    Collection = "Collection"
    Comment = "Comment"
    Order = "Order"
    Page = "Page"
    PriceRule = "PriceRule"
    Product = "Product"
    ApiPermission = "ApiPermission"

    @classmethod
    def list(cls):
        return list(map(lambda c: c.value, cls))

    @classmethod
    def validate_fields(cls, fields: List[str]):
        errors = []
        for f in fields:
            if f not in cls.list():
                errors.append(f'"{f}" is not valid Shopify resource!')
        if errors:
            raise ValueError(
                ', '.join(errors) + f'\n Supported Resources are: [{cls.list()}]')


def _get_date_param_min(fetch_parameter: str):
    return f"{fetch_parameter}_min"


def _get_date_param_max(fetch_parameter: str):
    return f"{fetch_parameter}_max"


class ShopifyClient:

    def __init__(self, shop: str, access_token: str, api_version: str = '2022-10'):
        shop_url = f'{shop}.myshopify.com'
        self.session = shopify.Session(shop_url, api_version, access_token)
        self.wait_time_seconds = BASE_SLEEP_TIME
        shopify.ShopifyResource.activate_session(self.session)

    def get_orders(self, fetch_parameter: str, datetime_min: datetime.datetime = None,
                   datetime_max: datetime.datetime = datetime.datetime.now().replace(microsecond=0),
                   status='any', fields=None, results_per_page=RESULTS_PER_PAGE):
        """
        Get orders
        Args:
            fetch_parameter: Field to fetch
            datetime_min:
            datetime_max:
            status:
            fields:
            results_per_page:

        Returns: Generator object, list of orders

        """

        additional_params = {}
        if fields:
            additional_params['fields'] = fields

        return self.get_objects_paginated(shopify.Order,
                                          datetime_min=datetime_min,
                                          datetime_max=datetime_max,
                                          results_per_page=results_per_page,
                                          status=status,
                                          datetime_param_min=_get_date_param_min(fetch_parameter),
                                          datetime_param_max=_get_date_param_max(fetch_parameter),
                                          **additional_params)

    def get_transactions(self, order_id: str, results_per_page=RESULTS_PER_PAGE):
        """
        Get orders
        Args:
            order_id: Order ID

        Returns: Generator object, list of orders

        """

        additional_params = {'order_id': order_id}

        return self.get_objects_paginated_simple(shopify.Transaction, results_per_page=results_per_page,
                                                 **additional_params)

    def get_metafields(self, resource: str, resource_id: str, results_per_page=RESULTS_PER_PAGE):

        additional_params = {'resource': resource, 'resource_id': resource_id}

        return self.get_objects_paginated_simple(shopify.Metafield, results_per_page,
                                                 **additional_params)

    def get_products(self, fetch_parameter: str, datetime_min: datetime.datetime = None,
                     datetime_max: datetime.datetime = datetime.datetime.now().replace(microsecond=0),
                     status='active', fields=None, results_per_page=RESULTS_PER_PAGE, return_chunk_size=90):
        """
        Get products
        Args:
            fetch_parameter: Field to fetch
            datetime_min:
            datetime_max:
            status:
            fields:
            results_per_page:
            return_chunk_size: Max size of the chunk of products to return

        Returns: Generator object, list of products

        """

        additional_params = {}
        if fields:
            additional_params['fields'] = fields

        buffered = 0
        buffer = []
        for p in self.get_objects_paginated(shopify.Product,
                                            datetime_min=datetime_min,
                                            datetime_max=datetime_max,
                                            results_per_page=results_per_page,
                                            status=status,
                                            datetime_param_min=_get_date_param_min(fetch_parameter),
                                            datetime_param_max=_get_date_param_max(fetch_parameter),
                                            **additional_params):
            buffered += 1
            buffer.append(p)
            if buffered >= return_chunk_size:
                results = buffer.copy()
                buffer = []
                yield results
        yield buffer

    def get_inventory_items(self, inventory_ids: list,
                            results_per_page=RESULTS_PER_PAGE):

        additional_params = {'ids': ','.join(inventory_ids)}
        return self.get_objects_paginated_simple(shopify.InventoryItem,
                                                 results_per_page=results_per_page,
                                                 **additional_params)

    def get_inventory_item_levels(self, inventory_ids: list,
                                  results_per_page=RESULTS_PER_PAGE):

        additional_params = {'inventory_item_ids': ','.join(inventory_ids)}
        return self.get_objects_paginated_simple(shopify.InventoryLevel,
                                                 results_per_page=results_per_page,
                                                 **additional_params)

    def get_locations(self, results_per_page=RESULTS_PER_PAGE):

        return self.get_objects_paginated_simple(shopify.Location,
                                                 results_per_page=results_per_page)

    def get_events(self, fetch_parameter: str, datetime_min: datetime.datetime = None,
                   datetime_max: datetime.datetime = datetime.datetime.now().replace(microsecond=0),
                   filter_resource: List[Union[ShopifyResource, str]] = None, event_type: str = None,
                   fields: List[str] = None,
                   results_per_page: int = RESULTS_PER_PAGE
                   ):

        """
        Retrieves a list of events.

        Args:
            fetch_parameter: Field to fetch
            datetime_min:
            datetime_max:
            filter_resource: Filter on certain events by the type of resource it produced. e.g.['Order','Product']
            event_type:
                eg 'confirmed', 'create', 'destroy' The type of event that occurred. Different resources generate
                different types of event. See the [docs](
                https://shopify.dev/docs/admin-api/rest/reference/events/event#resources-that-can-create-events) for
                a list of possible verbs.
            fields: List of fields to limit the response
            results_per_page:

        Returns:

        """

        additional_params = {}
        if filter_resource:
            if isinstance(filter_resource[0], ShopifyResource):
                filter_resource = [f.name for f in filter_resource]
            else:
                ShopifyResource.validate_fields(filter_resource)
            additional_params['filter'] = ','.join([f for f in filter_resource])

        if event_type:
            additional_params['verb'] = event_type

        if fields:
            additional_params['fields'] = fields

        return self.get_objects_paginated(shopify.Event,
                                          datetime_min=datetime_min,
                                          datetime_max=datetime_max,
                                          datetime_param_min='created_at_min',
                                          datetime_param_max='created_at_max',
                                          results_per_page=results_per_page,
                                          **additional_params)

    def get_customers(self, fetch_parameter: str, datetime_min: datetime.datetime = None,
                      datetime_max: datetime.datetime = datetime.datetime.now().replace(microsecond=0),
                      state=None, fields=None, results_per_page=RESULTS_PER_PAGE):
        additional_params = {}
        if fields:
            additional_params['fields'] = fields

        if state:
            additional_params['state'] = state

        return self.get_objects_paginated(shopify.Customer,
                                          datetime_min=datetime_min,
                                          datetime_max=datetime_max,
                                          results_per_page=results_per_page,
                                          datetime_param_min=_get_date_param_min(fetch_parameter),
                                          datetime_param_max=_get_date_param_max(fetch_parameter),
                                          **additional_params)

    @response_error_handling
    @error_handling
    def call_api_all_pages(self, shopify_object: Type[shopify.ShopifyResource], query_params):
        # this makes the PaginatedCollection iterator actually fetch all pages automatically
        query_params['no_iter_next'] = False
        return PaginatedIterator(shopify_object.find(**query_params))

    def get_objects_paginated_simple(self, shopify_object: Type[shopify.ShopifyResource],
                                     results_per_page=RESULTS_PER_PAGE,
                                     **kwargs):
        query_params = {**{
            "limit": results_per_page
        }, **kwargs}

        result_iterator = self.call_api_all_pages(shopify_object, query_params)

        # iterate through pages (the iterator does this on the background
        for collection in result_iterator:
            self.check_api_limit_use()
            for obj in collection:
                yield obj.to_dict()

    def get_objects_paginated(self, shopify_object: Type[shopify.ShopifyResource],
                              datetime_min: datetime.datetime = None,
                              datetime_max: datetime.datetime = datetime.datetime.now().replace(microsecond=0),
                              date_window_size: int = DATE_WINDOW_SIZE,
                              results_per_page=RESULTS_PER_PAGE,
                              datetime_param_min='updated_at_min',
                              datetime_param_max='updated_at_max',
                              **kwargs):
        """
        Get all objects and paginate per date. The pagination is also limited by the ``date_window_size`` parameter,
        that prevents overloading the API and getting too many 500s.
        Args:
            shopify_object (Type[shopify.ShopifyResource]): Shopify object to retrieve.
            datetime_min (datetime): Min date
            datetime_max (datetime): Max date
            date_window_size: Size of the window to get in each request days
            results_per_page:
            datetime_param_min: field date min parameter
            datetime_param_max: field date max parameter
            **kwargs:

        Yields:
            Array of objects as dict

        """
        datetime_min = datetime_min.replace(microsecond=0)

        stop_time = datetime_max

        # Page through till the end of the result set
        # NOTE: "Artificial" pagination done in Singer Tap, keeping it since it apparently causes 500 errors
        # when requesting full period. Eg. paging per window_size (1day)
        # however it was simplified to leverage shopify native pagination function
        while datetime_min < stop_time:

            # ## Original Singer Tap comment
            # It's important that `updated_at_min` has microseconds
            # truncated. Why has been lost to the mists of time but we
            # think it has something to do with how the API treats
            # microseconds on its date windows. Maybe it's possible to
            # drop data due to rounding errors or something like that?
            datetime_max = datetime_min + datetime.timedelta(days=date_window_size)
            if datetime_max > stop_time:
                datetime_max = stop_time

            query_params = {**{
                datetime_param_min: datetime_min.isoformat(),
                datetime_param_max: datetime_max.isoformat(),
                "limit": results_per_page
            }, **kwargs}

            result_iterator = self.call_api_all_pages(shopify_object, query_params)

            # iterate through pages (the iterator does this on the background
            for collection in result_iterator:
                self.check_api_limit_use()
                for obj in collection:
                    yield obj.to_dict()

            datetime_min = datetime_max

    def check_api_limit_use(self):
        used_credits, max_credits = self._try_get_credits()
        if int(used_credits) >= int(max_credits) - 1:
            time.sleep(self.wait_time_seconds)

    def _try_get_credits(self):
        """
        Sometimes shopify.Limits.api_credit_limit_param() fails because the X-Shopify-Shop-Api-Call-Limit is lower case
        Returns:

        """
        used_credits, max_credits = 1, 1
        lower_case_ratelimit = shopify.Limits.CREDIT_LIMIT_HEADER_PARAM.lower()
        header_found = False
        for key, value in shopify.Limits.response().headers.items():
            if key.lower() == lower_case_ratelimit:
                used_credits, max_credits = value.split("/")
                header_found = True
                break
        if not header_found:
            logging.warning(f"Header {lower_case_ratelimit} was not found in the response!")
        return used_credits, max_credits



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import mock
import os
import unittest
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    def setUp(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'data_examples', 'data1')
        os.environ["KBC_DATADIR"] = path

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()

    def test_run_invalid_parameters_fail_user_error(self):
        with self.assertRaises(SystemExit) as cm:
            comp = Component()
            comp.run()

        self.assertEqual(cm.exception.code, 1)


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: tests/data_examples/data1/config.json
================================================
{
    "storage": {
        "input": {
            "files": [
                {
                    "tags": [
                        "dilbert"
                    ],
                    "processed_tags": []
                },
                {
                    "tags": [
                        "xkcd"
                    ],
                    "processed_tags": []
                }
            ],
            "tables": [
                {
                    "source": "in.c-main.test",
                    "destination": "sample.csv",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq"
                },
                {
                    "source": "in.c-main.test2",
                    "destination": "fooBar",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq"
                }
            ]
        },
        "output": {
            "tables": [
                {
                    "source": "results.csv",
                    "destination": "out.c-main.test",
                    "incremental": false,
                    "primary_key": [],
                    "delete_where_values": [],
                    "delete_where_operator": "eq"
                },
                {
                    "source": "results-new.csv",
                    "destination": "out.c-main.test2",
                    "incremental": false,
                    "primary_key": [],
                    "delete_where_values": [],
                    "delete_where_operator": "eq"
                }
            ],
            "files": [
                {
                    "source": "processed.png",
                    "tags": [
                        "processed-file"
                    ],
                    "is_public": false,
                    "is_permanent": false,
                    "is_encrypted": true,
                    "notify": false
                }
            ]
        }
    },
    "parameters": {
        "fooBar": {
            "foo": 42,
            "bar": 24
        },
        "baz": "bazBar"
    },
    "action": "test",
    "image_parameters": {},
    "authorization": {
        "oauth_api": {
            "id": "123456",
            "credentials": {
                "id": "main",
                "authorizedFor": "Myself",
                "creator": {
                    "id": "1234",
                    "description": "me@keboola.com"
                },
                "created": "2016-01-31 00:13:30",
                "oauthVersion": "2.0",
                "appKey": "myappkey",
                "#data": "{\"mykey\":\"myval\"}",
                "#appSecret": "myappsecret"
            }
        }
    }
}



================================================
FILE: tests/data_examples/data1/in/state.json
================================================
{
  "test_state": 1234
}


================================================
FILE: tests/data_examples/data1/in/files/151971405_21702.strip.print.gif.manifest
================================================
{
    "id": 151971405,
    "name": "21702.strip.print.gif",
    "created": "2015-11-01T20:14:19+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert"
    ],
    "max_age_days": 180,
    "size_bytes": 4931
}


================================================
FILE: tests/data_examples/data1/in/files/151971412_30221.strip.print.gif.manifest
================================================
{
    "id": 151971412,
    "name": "30221.strip.print.gif",
    "created": "2015-11-01T20:14:27+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert"
    ],
    "max_age_days": 180,
    "size_bytes": 21230
}


================================================
FILE: tests/data_examples/data1/in/files/151971423_5655.strip.print.gif.manifest
================================================
{
    "id": 151971423,
    "name": "5655.strip.print.gif",
    "created": "2015-11-01T20:14:35+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert"
    ],
    "max_age_days": 180,
    "size_bytes": 20276
}


================================================
FILE: tests/data_examples/data1/in/files/151971432_compiler_complaint.png.manifest
================================================
{
    "id": 151971432,
    "name": "compiler_complaint.png",
    "created": "2015-11-01T20:14:48+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "xkcd"
    ],
    "max_age_days": 180,
    "size_bytes": 14833
}


================================================
FILE: tests/data_examples/data1/in/files/151971450_duty_calls.png.manifest
================================================
{
    "id": 151971450,
    "name": "duty_calls.png",
    "created": "2015-11-01T20:14:57+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "xkcd"
    ],
    "max_age_days": 180,
    "size_bytes": 30027
}


================================================
FILE: tests/data_examples/data1/in/files/151971455_duty_calls.png.manifest
================================================
{
    "id": 151971455,
    "name": "duty_calls.png",
    "created": "2016-11-01T20:14:57+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "xkcd"
    ],
    "max_age_days": 180,
    "size_bytes": 30027
}


================================================
FILE: tests/data_examples/data1/in/tables/fooBar
================================================
"id","timestamp"



================================================
FILE: tests/data_examples/data1/in/tables/fooBar.manifest
================================================
{
    "id": "in.c-main.test2",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test2",
    "name": "test2",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-09-22T17:04:52+0200",
    "last_change_date": "2015-09-22T17:04:53+0200",
    "last_import_date": "2015-09-22T17:04:53+0200",
    "rows_count": 0,
    "data_size_bytes": 32768,
    "is_alias": false,
    "columns": [
        "id",
        "timestamp"
    ],
    "attributes": []
}


================================================
FILE: tests/data_examples/data1/in/tables/orphaned.csv
================================================
"id","timestamp"



================================================
FILE: tests/data_examples/data1/in/tables/orphaned_manifest.csv.manifest
================================================
{
    "id": "in.c-main.test",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-11-02T09:11:37+0100",
    "last_change_date": "2015-11-02T09:11:37+0100",
    "last_import_date": "2015-11-02T09:11:37+0100",
    "rows_count": 400,
    "data_size_bytes": 81920,
    "is_alias": false,
    "columns": [
        "x",
        "Sales",
        "CompPrice",
        "Income",
        "Advertising",
        "Population",
        "Price",
        "ShelveLoc",
        "Age",
        "Education",
        "Urban",
        "US",
        "High"
    ],
    "attributes": []
}


================================================
FILE: tests/data_examples/data1/in/tables/sample.csv
================================================
"x","Sales","CompPrice","Income","Advertising","Population","Price","ShelveLoc","Age","Education","Urban","US","High"
"1","9.5","138","73","11","276","120","Bad","42","17","Yes","Yes","Yes"
"2","11.22","111","48","16","260","83","Good","65","10","Yes","Yes","Yes"
"3","10.06","113","35","10","269","80","Medium","59","12","Yes","Yes","Yes"
"4","7.4","117","100","4","466","97","Medium","55","14","Yes","Yes","No"
"5","4.15","141","64","3","340","128","Bad","38","13","Yes","No","No"
"6","10.81","124","113","13","501","72","Bad","78","16","No","Yes","Yes"
"7","6.63","115","105","0","45","108","Medium","71","15","Yes","No","No"
"8","11.85","136","81","15","425","120","Good","67","10","Yes","Yes","Yes"
"9","6.54","132","110","0","108","124","Medium","76","10","No","No","No"
"10","4.69","132","113","0","131","124","Medium","76","17","No","Yes","No"
"11","9.01","121","78","9","150","100","Bad","26","10","No","Yes","Yes"
"12","11.96","117","94","4","503","94","Good","50","13","Yes","Yes","Yes"
"13","3.98","122","35","2","393","136","Medium","62","18","Yes","No","No"
"14","10.96","115","28","11","29","86","Good","53","18","Yes","Yes","Yes"
"15","11.17","107","117","11","148","118","Good","52","18","Yes","Yes","Yes"
"16","8.71","149","95","5","400","144","Medium","76","18","No","No","Yes"
"17","7.58","118","32","0","284","110","Good","63","13","Yes","No","No"
"18","12.29","147","74","13","251","131","Good","52","10","Yes","Yes","Yes"
"19","13.91","110","110","0","408","68","Good","46","17","No","Yes","Yes"
"20","8.73","129","76","16","58","121","Medium","69","12","Yes","Yes","Yes"
"21","6.41","125","90","2","367","131","Medium","35","18","Yes","Yes","No"
"22","12.13","134","29","12","239","109","Good","62","18","No","Yes","Yes"
"23","5.08","128","46","6","497","138","Medium","42","13","Yes","No","No"
"24","5.87","121","31","0","292","109","Medium","79","10","Yes","No","No"
"25","10.14","145","119","16","294","113","Bad","42","12","Yes","Yes","Yes"
"26","14.9","139","32","0","176","82","Good","54","11","No","No","Yes"
"27","8.33","107","115","11","496","131","Good","50","11","No","Yes","Yes"
"28","5.27","98","118","0","19","107","Medium","64","17","Yes","No","No"
"29","2.99","103","74","0","359","97","Bad","55","11","Yes","Yes","No"
"30","7.81","104","99","15","226","102","Bad","58","17","Yes","Yes","No"
"31","13.55","125","94","0","447","89","Good","30","12","Yes","No","Yes"
"32","8.25","136","58","16","241","131","Medium","44","18","Yes","Yes","Yes"
"33","6.2","107","32","12","236","137","Good","64","10","No","Yes","No"
"34","8.77","114","38","13","317","128","Good","50","16","Yes","Yes","Yes"
"35","2.67","115","54","0","406","128","Medium","42","17","Yes","Yes","No"
"36","11.07","131","84","11","29","96","Medium","44","17","No","Yes","Yes"
"37","8.89","122","76","0","270","100","Good","60","18","No","No","Yes"
"38","4.95","121","41","5","412","110","Medium","54","10","Yes","Yes","No"
"39","6.59","109","73","0","454","102","Medium","65","15","Yes","No","No"
"40","3.24","130","60","0","144","138","Bad","38","10","No","No","No"
"41","2.07","119","98","0","18","126","Bad","73","17","No","No","No"
"42","7.96","157","53","0","403","124","Bad","58","16","Yes","No","No"
"43","10.43","77","69","0","25","24","Medium","50","18","Yes","No","Yes"
"44","4.12","123","42","11","16","134","Medium","59","13","Yes","Yes","No"
"45","4.16","85","79","6","325","95","Medium","69","13","Yes","Yes","No"
"46","4.56","141","63","0","168","135","Bad","44","12","Yes","Yes","No"
"47","12.44","127","90","14","16","70","Medium","48","15","No","Yes","Yes"
"48","4.38","126","98","0","173","108","Bad","55","16","Yes","No","No"
"49","3.91","116","52","0","349","98","Bad","69","18","Yes","No","No"
"50","10.61","157","93","0","51","149","Good","32","17","Yes","No","Yes"
"51","1.42","99","32","18","341","108","Bad","80","16","Yes","Yes","No"
"52","4.42","121","90","0","150","108","Bad","75","16","Yes","No","No"
"53","7.91","153","40","3","112","129","Bad","39","18","Yes","Yes","No"
"54","6.92","109","64","13","39","119","Medium","61","17","Yes","Yes","No"
"55","4.9","134","103","13","25","144","Medium","76","17","No","Yes","No"
"56","6.85","143","81","5","60","154","Medium","61","18","Yes","Yes","No"
"57","11.91","133","82","0","54","84","Medium","50","17","Yes","No","Yes"
"58","0.91","93","91","0","22","117","Bad","75","11","Yes","No","No"
"59","5.42","103","93","15","188","103","Bad","74","16","Yes","Yes","No"
"60","5.21","118","71","4","148","114","Medium","80","13","Yes","No","No"
"61","8.32","122","102","19","469","123","Bad","29","13","Yes","Yes","Yes"
"62","7.32","105","32","0","358","107","Medium","26","13","No","No","No"
"63","1.82","139","45","0","146","133","Bad","77","17","Yes","Yes","No"
"64","8.47","119","88","10","170","101","Medium","61","13","Yes","Yes","Yes"
"65","7.8","100","67","12","184","104","Medium","32","16","No","Yes","No"
"66","4.9","122","26","0","197","128","Medium","55","13","No","No","No"
"67","8.85","127","92","0","508","91","Medium","56","18","Yes","No","Yes"
"68","9.01","126","61","14","152","115","Medium","47","16","Yes","Yes","Yes"
"69","13.39","149","69","20","366","134","Good","60","13","Yes","Yes","Yes"
"70","7.99","127","59","0","339","99","Medium","65","12","Yes","No","No"
"71","9.46","89","81","15","237","99","Good","74","12","Yes","Yes","Yes"
"72","6.5","148","51","16","148","150","Medium","58","17","No","Yes","No"
"73","5.52","115","45","0","432","116","Medium","25","15","Yes","No","No"
"74","12.61","118","90","10","54","104","Good","31","11","No","Yes","Yes"
"75","6.2","150","68","5","125","136","Medium","64","13","No","Yes","No"
"76","8.55","88","111","23","480","92","Bad","36","16","No","Yes","Yes"
"77","10.64","102","87","10","346","70","Medium","64","15","Yes","Yes","Yes"
"78","7.7","118","71","12","44","89","Medium","67","18","No","Yes","No"
"79","4.43","134","48","1","139","145","Medium","65","12","Yes","Yes","No"
"80","9.14","134","67","0","286","90","Bad","41","13","Yes","No","Yes"
"81","8.01","113","100","16","353","79","Bad","68","11","Yes","Yes","Yes"
"82","7.52","116","72","0","237","128","Good","70","13","Yes","No","No"
"83","11.62","151","83","4","325","139","Good","28","17","Yes","Yes","Yes"
"84","4.42","109","36","7","468","94","Bad","56","11","Yes","Yes","No"
"85","2.23","111","25","0","52","121","Bad","43","18","No","No","No"
"86","8.47","125","103","0","304","112","Medium","49","13","No","No","Yes"
"87","8.7","150","84","9","432","134","Medium","64","15","Yes","No","Yes"
"88","11.7","131","67","7","272","126","Good","54","16","No","Yes","Yes"
"89","6.56","117","42","7","144","111","Medium","62","10","Yes","Yes","No"
"90","7.95","128","66","3","493","119","Medium","45","16","No","No","No"
"91","5.33","115","22","0","491","103","Medium","64","11","No","No","No"
"92","4.81","97","46","11","267","107","Medium","80","15","Yes","Yes","No"
"93","4.53","114","113","0","97","125","Medium","29","12","Yes","No","No"
"94","8.86","145","30","0","67","104","Medium","55","17","Yes","No","Yes"
"95","8.39","115","97","5","134","84","Bad","55","11","Yes","Yes","Yes"
"96","5.58","134","25","10","237","148","Medium","59","13","Yes","Yes","No"
"97","9.48","147","42","10","407","132","Good","73","16","No","Yes","Yes"
"98","7.45","161","82","5","287","129","Bad","33","16","Yes","Yes","No"
"99","12.49","122","77","24","382","127","Good","36","16","No","Yes","Yes"
"100","4.88","121","47","3","220","107","Bad","56","16","No","Yes","No"
"101","4.11","113","69","11","94","106","Medium","76","12","No","Yes","No"
"102","6.2","128","93","0","89","118","Medium","34","18","Yes","No","No"
"103","5.3","113","22","0","57","97","Medium","65","16","No","No","No"
"104","5.07","123","91","0","334","96","Bad","78","17","Yes","Yes","No"
"105","4.62","121","96","0","472","138","Medium","51","12","Yes","No","No"
"106","5.55","104","100","8","398","97","Medium","61","11","Yes","Yes","No"
"107","0.16","102","33","0","217","139","Medium","70","18","No","No","No"
"108","8.55","134","107","0","104","108","Medium","60","12","Yes","No","Yes"
"109","3.47","107","79","2","488","103","Bad","65","16","Yes","No","No"
"110","8.98","115","65","0","217","90","Medium","60","17","No","No","Yes"
"111","9","128","62","7","125","116","Medium","43","14","Yes","Yes","Yes"
"112","6.62","132","118","12","272","151","Medium","43","14","Yes","Yes","No"
"113","6.67","116","99","5","298","125","Good","62","12","Yes","Yes","No"
"114","6.01","131","29","11","335","127","Bad","33","12","Yes","Yes","No"
"115","9.31","122","87","9","17","106","Medium","65","13","Yes","Yes","Yes"
"116","8.54","139","35","0","95","129","Medium","42","13","Yes","No","Yes"
"117","5.08","135","75","0","202","128","Medium","80","10","No","No","No"
"118","8.8","145","53","0","507","119","Medium","41","12","Yes","No","Yes"
"119","7.57","112","88","2","243","99","Medium","62","11","Yes","Yes","No"
"120","7.37","130","94","8","137","128","Medium","64","12","Yes","Yes","No"
"121","6.87","128","105","11","249","131","Medium","63","13","Yes","Yes","No"
"122","11.67","125","89","10","380","87","Bad","28","10","Yes","Yes","Yes"
"123","6.88","119","100","5","45","108","Medium","75","10","Yes","Yes","No"
"124","8.19","127","103","0","125","155","Good","29","15","No","Yes","Yes"
"125","8.87","131","113","0","181","120","Good","63","14","Yes","No","Yes"
"126","9.34","89","78","0","181","49","Medium","43","15","No","No","Yes"
"127","11.27","153","68","2","60","133","Good","59","16","Yes","Yes","Yes"
"128","6.52","125","48","3","192","116","Medium","51","14","Yes","Yes","No"
"129","4.96","133","100","3","350","126","Bad","55","13","Yes","Yes","No"
"130","4.47","143","120","7","279","147","Bad","40","10","No","Yes","No"
"131","8.41","94","84","13","497","77","Medium","51","12","Yes","Yes","Yes"
"132","6.5","108","69","3","208","94","Medium","77","16","Yes","No","No"
"133","9.54","125","87","9","232","136","Good","72","10","Yes","Yes","Yes"
"134","7.62","132","98","2","265","97","Bad","62","12","Yes","Yes","No"
"135","3.67","132","31","0","327","131","Medium","76","16","Yes","No","No"
"136","6.44","96","94","14","384","120","Medium","36","18","No","Yes","No"
"137","5.17","131","75","0","10","120","Bad","31","18","No","No","No"
"138","6.52","128","42","0","436","118","Medium","80","11","Yes","No","No"
"139","10.27","125","103","12","371","109","Medium","44","10","Yes","Yes","Yes"
"140","12.3","146","62","10","310","94","Medium","30","13","No","Yes","Yes"
"141","6.03","133","60","10","277","129","Medium","45","18","Yes","Yes","No"
"142","6.53","140","42","0","331","131","Bad","28","15","Yes","No","No"
"143","7.44","124","84","0","300","104","Medium","77","15","Yes","No","No"
"144","0.53","122","88","7","36","159","Bad","28","17","Yes","Yes","No"
"145","9.09","132","68","0","264","123","Good","34","11","No","No","Yes"
"146","8.77","144","63","11","27","117","Medium","47","17","Yes","Yes","Yes"
"147","3.9","114","83","0","412","131","Bad","39","14","Yes","No","No"
"148","10.51","140","54","9","402","119","Good","41","16","No","Yes","Yes"
"149","7.56","110","119","0","384","97","Medium","72","14","No","Yes","No"
"150","11.48","121","120","13","140","87","Medium","56","11","Yes","Yes","Yes"
"151","10.49","122","84","8","176","114","Good","57","10","No","Yes","Yes"
"152","10.77","111","58","17","407","103","Good","75","17","No","Yes","Yes"
"153","7.64","128","78","0","341","128","Good","45","13","No","No","No"
"154","5.93","150","36","7","488","150","Medium","25","17","No","Yes","No"
"155","6.89","129","69","10","289","110","Medium","50","16","No","Yes","No"
"156","7.71","98","72","0","59","69","Medium","65","16","Yes","No","No"
"157","7.49","146","34","0","220","157","Good","51","16","Yes","No","No"
"158","10.21","121","58","8","249","90","Medium","48","13","No","Yes","Yes"
"159","12.53","142","90","1","189","112","Good","39","10","No","Yes","Yes"
"160","9.32","119","60","0","372","70","Bad","30","18","No","No","Yes"
"161","4.67","111","28","0","486","111","Medium","29","12","No","No","No"
"162","2.93","143","21","5","81","160","Medium","67","12","No","Yes","No"
"163","3.63","122","74","0","424","149","Medium","51","13","Yes","No","No"
"164","5.68","130","64","0","40","106","Bad","39","17","No","No","No"
"165","8.22","148","64","0","58","141","Medium","27","13","No","Yes","Yes"
"166","0.37","147","58","7","100","191","Bad","27","15","Yes","Yes","No"
"167","6.71","119","67","17","151","137","Medium","55","11","Yes","Yes","No"
"168","6.71","106","73","0","216","93","Medium","60","13","Yes","No","No"
"169","7.3","129","89","0","425","117","Medium","45","10","Yes","No","No"
"170","11.48","104","41","15","492","77","Good","73","18","Yes","Yes","Yes"
"171","8.01","128","39","12","356","118","Medium","71","10","Yes","Yes","Yes"
"172","12.49","93","106","12","416","55","Medium","75","15","Yes","Yes","Yes"
"173","9.03","104","102","13","123","110","Good","35","16","Yes","Yes","Yes"
"174","6.38","135","91","5","207","128","Medium","66","18","Yes","Yes","No"
"175","0","139","24","0","358","185","Medium","79","15","No","No","No"
"176","7.54","115","89","0","38","122","Medium","25","12","Yes","No","No"
"177","5.61","138","107","9","480","154","Medium","47","11","No","Yes","No"
"178","10.48","138","72","0","148","94","Medium","27","17","Yes","Yes","Yes"
"179","10.66","104","71","14","89","81","Medium","25","14","No","Yes","Yes"
"180","7.78","144","25","3","70","116","Medium","77","18","Yes","Yes","No"
"181","4.94","137","112","15","434","149","Bad","66","13","Yes","Yes","No"
"182","7.43","121","83","0","79","91","Medium","68","11","Yes","No","No"
"183","4.74","137","60","4","230","140","Bad","25","13","Yes","No","No"
"184","5.32","118","74","6","426","102","Medium","80","18","Yes","Yes","No"
"185","9.95","132","33","7","35","97","Medium","60","11","No","Yes","Yes"
"186","10.07","130","100","11","449","107","Medium","64","10","Yes","Yes","Yes"
"187","8.68","120","51","0","93","86","Medium","46","17","No","No","Yes"
"188","6.03","117","32","0","142","96","Bad","62","17","Yes","No","No"
"189","8.07","116","37","0","426","90","Medium","76","15","Yes","No","Yes"
"190","12.11","118","117","18","509","104","Medium","26","15","No","Yes","Yes"
"191","8.79","130","37","13","297","101","Medium","37","13","No","Yes","Yes"
"192","6.67","156","42","13","170","173","Good","74","14","Yes","Yes","No"
"193","7.56","108","26","0","408","93","Medium","56","14","No","No","No"
"194","13.28","139","70","7","71","96","Good","61","10","Yes","Yes","Yes"
"195","7.23","112","98","18","481","128","Medium","45","11","Yes","Yes","No"
"196","4.19","117","93","4","420","112","Bad","66","11","Yes","Yes","No"
"197","4.1","130","28","6","410","133","Bad","72","16","Yes","Yes","No"
"198","2.52","124","61","0","333","138","Medium","76","16","Yes","No","No"
"199","3.62","112","80","5","500","128","Medium","69","10","Yes","Yes","No"
"200","6.42","122","88","5","335","126","Medium","64","14","Yes","Yes","No"
"201","5.56","144","92","0","349","146","Medium","62","12","No","No","No"
"202","5.94","138","83","0","139","134","Medium","54","18","Yes","No","No"
"203","4.1","121","78","4","413","130","Bad","46","10","No","Yes","No"
"204","2.05","131","82","0","132","157","Bad","25","14","Yes","No","No"
"205","8.74","155","80","0","237","124","Medium","37","14","Yes","No","Yes"
"206","5.68","113","22","1","317","132","Medium","28","12","Yes","No","No"
"207","4.97","162","67","0","27","160","Medium","77","17","Yes","Yes","No"
"208","8.19","111","105","0","466","97","Bad","61","10","No","No","Yes"
"209","7.78","86","54","0","497","64","Bad","33","12","Yes","No","No"
"210","3.02","98","21","11","326","90","Bad","76","11","No","Yes","No"
"211","4.36","125","41","2","357","123","Bad","47","14","No","Yes","No"
"212","9.39","117","118","14","445","120","Medium","32","15","Yes","Yes","Yes"
"213","12.04","145","69","19","501","105","Medium","45","11","Yes","Yes","Yes"
"214","8.23","149","84","5","220","139","Medium","33","10","Yes","Yes","Yes"
"215","4.83","115","115","3","48","107","Medium","73","18","Yes","Yes","No"
"216","2.34","116","83","15","170","144","Bad","71","11","Yes","Yes","No"
"217","5.73","141","33","0","243","144","Medium","34","17","Yes","No","No"
"218","4.34","106","44","0","481","111","Medium","70","14","No","No","No"
"219","9.7","138","61","12","156","120","Medium","25","14","Yes","Yes","Yes"
"220","10.62","116","79","19","359","116","Good","58","17","Yes","Yes","Yes"
"221","10.59","131","120","15","262","124","Medium","30","10","Yes","Yes","Yes"
"222","6.43","124","44","0","125","107","Medium","80","11","Yes","No","No"
"223","7.49","136","119","6","178","145","Medium","35","13","Yes","Yes","No"
"224","3.45","110","45","9","276","125","Medium","62","14","Yes","Yes","No"
"225","4.1","134","82","0","464","141","Medium","48","13","No","No","No"
"226","6.68","107","25","0","412","82","Bad","36","14","Yes","No","No"
"227","7.8","119","33","0","245","122","Good","56","14","Yes","No","No"
"228","8.69","113","64","10","68","101","Medium","57","16","Yes","Yes","Yes"
"229","5.4","149","73","13","381","163","Bad","26","11","No","Yes","No"
"230","11.19","98","104","0","404","72","Medium","27","18","No","No","Yes"
"231","5.16","115","60","0","119","114","Bad","38","14","No","No","No"
"232","8.09","132","69","0","123","122","Medium","27","11","No","No","Yes"
"233","13.14","137","80","10","24","105","Good","61","15","Yes","Yes","Yes"
"234","8.65","123","76","18","218","120","Medium","29","14","No","Yes","Yes"
"235","9.43","115","62","11","289","129","Good","56","16","No","Yes","Yes"
"236","5.53","126","32","8","95","132","Medium","50","17","Yes","Yes","No"
"237","9.32","141","34","16","361","108","Medium","69","10","Yes","Yes","Yes"
"238","9.62","151","28","8","499","135","Medium","48","10","Yes","Yes","Yes"
"239","7.36","121","24","0","200","133","Good","73","13","Yes","No","No"
"240","3.89","123","105","0","149","118","Bad","62","16","Yes","Yes","No"
"241","10.31","159","80","0","362","121","Medium","26","18","Yes","No","Yes"
"242","12.01","136","63","0","160","94","Medium","38","12","Yes","No","Yes"
"243","4.68","124","46","0","199","135","Medium","52","14","No","No","No"
"244","7.82","124","25","13","87","110","Medium","57","10","Yes","Yes","No"
"245","8.78","130","30","0","391","100","Medium","26","18","Yes","No","Yes"
"246","10","114","43","0","199","88","Good","57","10","No","Yes","Yes"
"247","6.9","120","56","20","266","90","Bad","78","18","Yes","Yes","No"
"248","5.04","123","114","0","298","151","Bad","34","16","Yes","No","No"
"249","5.36","111","52","0","12","101","Medium","61","11","Yes","Yes","No"
"250","5.05","125","67","0","86","117","Bad","65","11","Yes","No","No"
"251","9.16","137","105","10","435","156","Good","72","14","Yes","Yes","Yes"
"252","3.72","139","111","5","310","132","Bad","62","13","Yes","Yes","No"
"253","8.31","133","97","0","70","117","Medium","32","16","Yes","No","Yes"
"254","5.64","124","24","5","288","122","Medium","57","12","No","Yes","No"
"255","9.58","108","104","23","353","129","Good","37","17","Yes","Yes","Yes"
"256","7.71","123","81","8","198","81","Bad","80","15","Yes","Yes","No"
"257","4.2","147","40","0","277","144","Medium","73","10","Yes","No","No"
"258","8.67","125","62","14","477","112","Medium","80","13","Yes","Yes","Yes"
"259","3.47","108","38","0","251","81","Bad","72","14","No","No","No"
"260","5.12","123","36","10","467","100","Bad","74","11","No","Yes","No"
"261","7.67","129","117","8","400","101","Bad","36","10","Yes","Yes","No"
"262","5.71","121","42","4","188","118","Medium","54","15","Yes","Yes","No"
"263","6.37","120","77","15","86","132","Medium","48","18","Yes","Yes","No"
"264","7.77","116","26","6","434","115","Medium","25","17","Yes","Yes","No"
"265","6.95","128","29","5","324","159","Good","31","15","Yes","Yes","No"
"266","5.31","130","35","10","402","129","Bad","39","17","Yes","Yes","No"
"267","9.1","128","93","12","343","112","Good","73","17","No","Yes","Yes"
"268","5.83","134","82","7","473","112","Bad","51","12","No","Yes","No"
"269","6.53","123","57","0","66","105","Medium","39","11","Yes","No","No"
"270","5.01","159","69","0","438","166","Medium","46","17","Yes","No","No"
"271","11.99","119","26","0","284","89","Good","26","10","Yes","No","Yes"
"272","4.55","111","56","0","504","110","Medium","62","16","Yes","No","No"
"273","12.98","113","33","0","14","63","Good","38","12","Yes","No","Yes"
"274","10.04","116","106","8","244","86","Medium","58","12","Yes","Yes","Yes"
"275","7.22","135","93","2","67","119","Medium","34","11","Yes","Yes","No"
"276","6.67","107","119","11","210","132","Medium","53","11","Yes","Yes","No"
"277","6.93","135","69","14","296","130","Medium","73","15","Yes","Yes","No"
"278","7.8","136","48","12","326","125","Medium","36","16","Yes","Yes","No"
"279","7.22","114","113","2","129","151","Good","40","15","No","Yes","No"
"280","3.42","141","57","13","376","158","Medium","64","18","Yes","Yes","No"
"281","2.86","121","86","10","496","145","Bad","51","10","Yes","Yes","No"
"282","11.19","122","69","7","303","105","Good","45","16","No","Yes","Yes"
"283","7.74","150","96","0","80","154","Good","61","11","Yes","No","No"
"284","5.36","135","110","0","112","117","Medium","80","16","No","No","No"
"285","6.97","106","46","11","414","96","Bad","79","17","No","No","No"
"286","7.6","146","26","11","261","131","Medium","39","10","Yes","Yes","No"
"287","7.53","117","118","11","429","113","Medium","67","18","No","Yes","No"
"288","6.88","95","44","4","208","72","Bad","44","17","Yes","Yes","No"
"289","6.98","116","40","0","74","97","Medium","76","15","No","No","No"
"290","8.75","143","77","25","448","156","Medium","43","17","Yes","Yes","Yes"
"291","9.49","107","111","14","400","103","Medium","41","11","No","Yes","Yes"
"292","6.64","118","70","0","106","89","Bad","39","17","Yes","No","No"
"293","11.82","113","66","16","322","74","Good","76","15","Yes","Yes","Yes"
"294","11.28","123","84","0","74","89","Good","59","10","Yes","No","Yes"
"295","12.66","148","76","3","126","99","Good","60","11","Yes","Yes","Yes"
"296","4.21","118","35","14","502","137","Medium","79","10","No","Yes","No"
"297","8.21","127","44","13","160","123","Good","63","18","Yes","Yes","Yes"
"298","3.07","118","83","13","276","104","Bad","75","10","Yes","Yes","No"
"299","10.98","148","63","0","312","130","Good","63","15","Yes","No","Yes"
"300","9.4","135","40","17","497","96","Medium","54","17","No","Yes","Yes"
"301","8.57","116","78","1","158","99","Medium","45","11","Yes","Yes","Yes"
"302","7.41","99","93","0","198","87","Medium","57","16","Yes","Yes","No"
"303","5.28","108","77","13","388","110","Bad","74","14","Yes","Yes","No"
"304","10.01","133","52","16","290","99","Medium","43","11","Yes","Yes","Yes"
"305","11.93","123","98","12","408","134","Good","29","10","Yes","Yes","Yes"
"306","8.03","115","29","26","394","132","Medium","33","13","Yes","Yes","Yes"
"307","4.78","131","32","1","85","133","Medium","48","12","Yes","Yes","No"
"308","5.9","138","92","0","13","120","Bad","61","12","Yes","No","No"
"309","9.24","126","80","19","436","126","Medium","52","10","Yes","Yes","Yes"
"310","11.18","131","111","13","33","80","Bad","68","18","Yes","Yes","Yes"
"311","9.53","175","65","29","419","166","Medium","53","12","Yes","Yes","Yes"
"312","6.15","146","68","12","328","132","Bad","51","14","Yes","Yes","No"
"313","6.8","137","117","5","337","135","Bad","38","10","Yes","Yes","No"
"314","9.33","103","81","3","491","54","Medium","66","13","Yes","No","Yes"
"315","7.72","133","33","10","333","129","Good","71","14","Yes","Yes","No"
"316","6.39","131","21","8","220","171","Good","29","14","Yes","Yes","No"
"317","15.63","122","36","5","369","72","Good","35","10","Yes","Yes","Yes"
"318","6.41","142","30","0","472","136","Good","80","15","No","No","No"
"319","10.08","116","72","10","456","130","Good","41","14","No","Yes","Yes"
"320","6.97","127","45","19","459","129","Medium","57","11","No","Yes","No"
"321","5.86","136","70","12","171","152","Medium","44","18","Yes","Yes","No"
"322","7.52","123","39","5","499","98","Medium","34","15","Yes","No","No"
"323","9.16","140","50","10","300","139","Good","60","15","Yes","Yes","Yes"
"324","10.36","107","105","18","428","103","Medium","34","12","Yes","Yes","Yes"
"325","2.66","136","65","4","133","150","Bad","53","13","Yes","Yes","No"
"326","11.7","144","69","11","131","104","Medium","47","11","Yes","Yes","Yes"
"327","4.69","133","30","0","152","122","Medium","53","17","Yes","No","No"
"328","6.23","112","38","17","316","104","Medium","80","16","Yes","Yes","No"
"329","3.15","117","66","1","65","111","Bad","55","11","Yes","Yes","No"
"330","11.27","100","54","9","433","89","Good","45","12","Yes","Yes","Yes"
"331","4.99","122","59","0","501","112","Bad","32","14","No","No","No"
"332","10.1","135","63","15","213","134","Medium","32","10","Yes","Yes","Yes"
"333","5.74","106","33","20","354","104","Medium","61","12","Yes","Yes","No"
"334","5.87","136","60","7","303","147","Medium","41","10","Yes","Yes","No"
"335","7.63","93","117","9","489","83","Bad","42","13","Yes","Yes","No"
"336","6.18","120","70","15","464","110","Medium","72","15","Yes","Yes","No"
"337","5.17","138","35","6","60","143","Bad","28","18","Yes","No","No"
"338","8.61","130","38","0","283","102","Medium","80","15","Yes","No","Yes"
"339","5.97","112","24","0","164","101","Medium","45","11","Yes","No","No"
"340","11.54","134","44","4","219","126","Good","44","15","Yes","Yes","Yes"
"341","7.5","140","29","0","105","91","Bad","43","16","Yes","No","No"
"342","7.38","98","120","0","268","93","Medium","72","10","No","No","No"
"343","7.81","137","102","13","422","118","Medium","71","10","No","Yes","No"
"344","5.99","117","42","10","371","121","Bad","26","14","Yes","Yes","No"
"345","8.43","138","80","0","108","126","Good","70","13","No","Yes","Yes"
"346","4.81","121","68","0","279","149","Good","79","12","Yes","No","No"
"347","8.97","132","107","0","144","125","Medium","33","13","No","No","Yes"
"348","6.88","96","39","0","161","112","Good","27","14","No","No","No"
"349","12.57","132","102","20","459","107","Good","49","11","Yes","Yes","Yes"
"350","9.32","134","27","18","467","96","Medium","49","14","No","Yes","Yes"
"351","8.64","111","101","17","266","91","Medium","63","17","No","Yes","Yes"
"352","10.44","124","115","16","458","105","Medium","62","16","No","Yes","Yes"
"353","13.44","133","103","14","288","122","Good","61","17","Yes","Yes","Yes"
"354","9.45","107","67","12","430","92","Medium","35","12","No","Yes","Yes"
"355","5.3","133","31","1","80","145","Medium","42","18","Yes","Yes","No"
"356","7.02","130","100","0","306","146","Good","42","11","Yes","No","No"
"357","3.58","142","109","0","111","164","Good","72","12","Yes","No","No"
"358","13.36","103","73","3","276","72","Medium","34","15","Yes","Yes","Yes"
"359","4.17","123","96","10","71","118","Bad","69","11","Yes","Yes","No"
"360","3.13","130","62","11","396","130","Bad","66","14","Yes","Yes","No"
"361","8.77","118","86","7","265","114","Good","52","15","No","Yes","Yes"
"362","8.68","131","25","10","183","104","Medium","56","15","No","Yes","Yes"
"363","5.25","131","55","0","26","110","Bad","79","12","Yes","Yes","No"
"364","10.26","111","75","1","377","108","Good","25","12","Yes","No","Yes"
"365","10.5","122","21","16","488","131","Good","30","14","Yes","Yes","Yes"
"366","6.53","154","30","0","122","162","Medium","57","17","No","No","No"
"367","5.98","124","56","11","447","134","Medium","53","12","No","Yes","No"
"368","14.37","95","106","0","256","53","Good","52","17","Yes","No","Yes"
"369","10.71","109","22","10","348","79","Good","74","14","No","Yes","Yes"
"370","10.26","135","100","22","463","122","Medium","36","14","Yes","Yes","Yes"
"371","7.68","126","41","22","403","119","Bad","42","12","Yes","Yes","No"
"372","9.08","152","81","0","191","126","Medium","54","16","Yes","No","Yes"
"373","7.8","121","50","0","508","98","Medium","65","11","No","No","No"
"374","5.58","137","71","0","402","116","Medium","78","17","Yes","No","No"
"375","9.44","131","47","7","90","118","Medium","47","12","Yes","Yes","Yes"
"376","7.9","132","46","4","206","124","Medium","73","11","Yes","No","No"
"377","16.27","141","60","19","319","92","Good","44","11","Yes","Yes","Yes"
"378","6.81","132","61","0","263","125","Medium","41","12","No","No","No"
"379","6.11","133","88","3","105","119","Medium","79","12","Yes","Yes","No"
"380","5.81","125","111","0","404","107","Bad","54","15","Yes","No","No"
"381","9.64","106","64","10","17","89","Medium","68","17","Yes","Yes","Yes"
"382","3.9","124","65","21","496","151","Bad","77","13","Yes","Yes","No"
"383","4.95","121","28","19","315","121","Medium","66","14","Yes","Yes","No"
"384","9.35","98","117","0","76","68","Medium","63","10","Yes","No","Yes"
"385","12.85","123","37","15","348","112","Good","28","12","Yes","Yes","Yes"
"386","5.87","131","73","13","455","132","Medium","62","17","Yes","Yes","No"
"387","5.32","152","116","0","170","160","Medium","39","16","Yes","No","No"
"388","8.67","142","73","14","238","115","Medium","73","14","No","Yes","Yes"
"389","8.14","135","89","11","245","78","Bad","79","16","Yes","Yes","Yes"
"390","8.44","128","42","8","328","107","Medium","35","12","Yes","Yes","Yes"
"391","5.47","108","75","9","61","111","Medium","67","12","Yes","Yes","No"
"392","6.1","153","63","0","49","124","Bad","56","16","Yes","No","No"
"393","4.53","129","42","13","315","130","Bad","34","13","Yes","Yes","No"
"394","5.57","109","51","10","26","120","Medium","30","17","No","Yes","No"
"395","5.35","130","58","19","366","139","Bad","33","16","Yes","Yes","No"
"396","12.57","138","108","17","203","128","Good","33","14","Yes","Yes","Yes"
"397","6.14","139","23","3","37","120","Medium","55","11","No","Yes","No"
"398","7.41","162","26","12","368","159","Medium","40","18","Yes","Yes","No"
"399","5.94","100","79","7","284","95","Bad","50","12","Yes","Yes","No"
"400","9.71","134","37","0","27","120","Good","49","16","Yes","Yes","Yes"



================================================
FILE: tests/data_examples/data1/in/tables/sample.csv.manifest
================================================
{
    "id": "in.c-main.test",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-11-02T09:11:37+0100",
    "last_change_date": "2015-11-02T09:11:37+0100",
    "last_import_date": "2015-11-02T09:11:37+0100",
    "rows_count": 400,
    "data_size_bytes": 81920,
    "is_alias": false,
    "columns": [
        "x",
        "Sales",
        "CompPrice",
        "Income",
        "Advertising",
        "Population",
        "Price",
        "ShelveLoc",
        "Age",
        "Education",
        "Urban",
        "US",
        "High"
    ],
    "attributes": []
}


================================================
FILE: tests/data_examples/data1/in/tables/sliced.csv.manifest
================================================
{
    "id": "in.c-main.test",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-11-02T09:11:37+0100",
    "last_change_date": "2015-11-02T09:11:37+0100",
    "last_import_date": "2015-11-02T09:11:37+0100",
    "rows_count": 400,
    "data_size_bytes": 81920,
    "is_alias": false,
    "columns": [
        "x",
        "Sales",
        "CompPrice",
        "Income",
        "Advertising",
        "Population",
        "Price",
        "ShelveLoc",
        "Age",
        "Education",
        "Urban",
        "US",
        "High"
    ],
    "attributes": []
}


================================================
FILE: tests/data_examples/data1/in/tables/sliced.csv/.gitkeep
================================================
[Empty file]


================================================
FILE: tests/data_examples/data2/config.json
================================================
{
}


================================================
FILE: tests/data_examples/data3/config.json
================================================
{
	"parameters": {}
}

