Directory structure:
└── kds_consulting_team-kds-team.wr-oracle-custom/
    ├── tests/
    │   ├── __init__.py
    │   ├── test_component.py
    │   └── functional/
    │       └── data_full_truncate/
    │           ├── in/
    │           │   ├── tables/
    │           │   │   ├── test_types.csv.manifest
    │           │   │   └── test_types.csv
    │           │   ├── state.json
    │           │   └── tables-kmoch/
    │           │       ├── XXX.csv.manifest
    │           │       └── XXX.csv
    │           ├── test.csv
    │           ├── out/
    │           │   ├── tables/
    │           │   │   └── test.csv
    │           │   └── files/
    │           │       └── order1.xml
    │           ├── test.csv.manifest
    │           └── config.json
    ├── TEMPLATE_README.md
    ├── Dockerfile
    ├── flake8.cfg
    ├── src/
    │   ├── db_writer/
    │   │   ├── writer.py
    │   │   ├── __init__.py
    │   │   ├── sql_loader.py
    │   │   └── table_schema.py
    │   ├── component.py
    │   ├── db_common/
    │   │   ├── __init__.py
    │   │   └── db_connection.py
    │   └── configuration.py
    ├── LICENSE.md
    ├── docs/
    │   └── imgs/
    ├── requirements.txt
    ├── bitbucket-pipelines.yml
    ├── component_config/
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── configRowSchema.json
    │   ├── component_long_description.md
    │   ├── sample-config/
    │   │   ├── in/
    │   │   │   ├── tables/
    │   │   │   │   ├── test.csv
    │   │   │   │   └── test.csv.manifest
    │   │   │   ├── state.json
    │   │   │   └── files/
    │   │   │       └── order1.xml
    │   │   ├── out/
    │   │   │   ├── tables/
    │   │   │   │   └── test.csv
    │   │   │   └── files/
    │   │   │       └── order1.xml
    │   │   └── config.json
    │   ├── loggerConfiguration.json
    │   └── logger
    ├── deploy.sh
    ├── docker-compose.yml
    ├── scripts/
    │   ├── build_n_test.sh
    │   ├── update_dev_portal_properties.sh
    │   ├── build_n_run.ps1
    │   ├── run.bat
    │   └── run_kbc_tests.ps1
    └── README.md

================================================
File: /tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: /tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /tests/functional/data_full_truncate/in/tables/test_types.csv.manifest
================================================
{
    "id": "out.c-oracle-test-data.test_types",
    "uri": "https:\/\/connection.csas.keboola.cloud\/v2\/storage\/tables\/out.c-oracle-test-data.test_types",
    "name": "test_types",
    "primary_key": [],
    "distribution_key": [],
    "created": "2023-01-17T11:14:21+0100",
    "last_change_date": "2023-01-17T11:14:48+0100",
    "last_import_date": "2023-01-17T11:14:48+0100",
    "columns": [
        "COL_DECIMAL",
        "COL_FLOAT",
        "COL_INTEGER",
        "COL_DATE",
        "COL_VARCHAR",
        "COL_CHAR",
        "COL_DATETIME"
    ],
    "metadata": [
        {
            "id": "54649637",
            "key": "KBC.createdBy.component.id",
            "value": "keboola.synapse-transformation",
            "provider": "system",
            "timestamp": "2023-01-17T11:14:49+0100"
        },
        {
            "id": "54649638",
            "key": "KBC.createdBy.configuration.id",
            "value": "12947091",
            "provider": "system",
            "timestamp": "2023-01-17T11:14:49+0100"
        },
        {
            "id": "54649639",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "keboola.synapse-transformation",
            "provider": "system",
            "timestamp": "2023-01-17T11:14:50+0100"
        },
        {
            "id": "54649640",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "12947091",
            "provider": "system",
            "timestamp": "2023-01-17T11:14:50+0100"
        }
    ],
    "column_metadata": {
        "COL_DECIMAL": [
            {
                "id": "54649641",
                "key": "KBC.datatype.type",
                "value": "decimal",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649642",
                "key": "KBC.datatype.nullable",
                "value": "1",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649643",
                "key": "KBC.datatype.basetype",
                "value": "NUMERIC",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649644",
                "key": "KBC.datatype.length",
                "value": "20,5",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            }
        ],
        "COL_FLOAT": [
            {
                "id": "54649645",
                "key": "KBC.datatype.type",
                "value": "float",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649646",
                "key": "KBC.datatype.nullable",
                "value": "1",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649647",
                "key": "KBC.datatype.basetype",
                "value": "FLOAT",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649648",
                "key": "KBC.datatype.length",
                "value": "53",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            }
        ],
        "COL_INTEGER": [
            {
                "id": "54649649",
                "key": "KBC.datatype.type",
                "value": "bigint",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649650",
                "key": "KBC.datatype.nullable",
                "value": "1",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649651",
                "key": "KBC.datatype.basetype",
                "value": "INTEGER",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            }
        ],
        "COL_DATE": [
            {
                "id": "54649652",
                "key": "KBC.datatype.type",
                "value": "date",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649653",
                "key": "KBC.datatype.nullable",
                "value": "1",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649654",
                "key": "KBC.datatype.basetype",
                "value": "DATE",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            }
        ],
        "COL_VARCHAR": [
            {
                "id": "54649655",
                "key": "KBC.datatype.type",
                "value": "nvarchar",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649656",
                "key": "KBC.datatype.nullable",
                "value": "1",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649657",
                "key": "KBC.datatype.basetype",
                "value": "STRING",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649658",
                "key": "KBC.datatype.length",
                "value": "256",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            }
        ],
        "COL_CHAR": [
            {
                "id": "54649659",
                "key": "KBC.datatype.type",
                "value": "varchar",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649660",
                "key": "KBC.datatype.nullable",
                "value": "",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649661",
                "key": "KBC.datatype.basetype",
                "value": "STRING",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649662",
                "key": "KBC.datatype.length",
                "value": "1",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            }
        ],
        "COL_DATETIME": [
            {
                "id": "54649663",
                "key": "KBC.datatype.type",
                "value": "datetime2",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649664",
                "key": "KBC.datatype.nullable",
                "value": "1",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649665",
                "key": "KBC.datatype.basetype",
                "value": "TIMESTAMP",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            },
            {
                "id": "54649666",
                "key": "KBC.datatype.length",
                "value": "7",
                "provider": "keboola.synapse-transformation",
                "timestamp": "2023-01-17T11:14:50+0100"
            }
        ]
    }
}

================================================
File: /tests/functional/data_full_truncate/in/tables/test_types.csv
================================================
"COL_DECIMAL","COL_FLOAT","COL_INTEGER","COL_DATE","COL_VARCHAR","COL_CHAR","COL_DATETIME"
"6666.33330","123.43","987654321","2022-11-14","žluťoučký kůň","Y","2023-01-17 10:14:14.5033333"
"222.33330","345.43","987654321","2022-11-14","single quote' two single''quotes","n","2023-01-17 10:14:15.2200000"


================================================
File: /tests/functional/data_full_truncate/in/state.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "https://api2.timedoctor.com/",
      "authentication": {
        "type": "login",
        "loginRequest": {
          "endpoint": "/api/1.0/login",
          "method": "POST",
          "params": {
            "email": "robert@gymbeam.com",
            "password": {
              "attr": "#password"
            },
            "permission": "read"
          },
          "headers": {
            "accept": "application/json"
          }
        },
        "format": "json",
        "apiRequest": {
          "query": {
            "token": "data.token"
          }
        },
        "expires": {
          "response": "data.expiresAt"
        }
      },
      "pagination": {
        "method": "pagenum",
        "limit": 200,
        "firstPage": 0
      }
    },
    "config": {
      "name": "Time Doctor 2 Template",
      "Description": "Downloads users, projects, tasks, worklogs, notifications and user related info.",
      "debug": false,
      "outputBucket": "timedoctor-2-iterations-test",
      "#password": "KBC::ProjectSecure::eJwBOgHF/mE6Mjp7aTowO3M6OTk6It71AgBPDXvOTm5pOPYaES1IlpBnkop2cZfa0E7t1RrD2ocdpnyMptcuPxQ/hRSNExLEK2kET9H/E9HlTSnF6Q0OMT67gazFA3t1IqY0ypN9PR11lzJncgqaqv3CDZx3HEECASI7aToxO3M6MTg0OiIBAgMAeGVez2/nHl36SUiQv1vPJofmrO9Ycm3Z8Zb1zMOFZ23AAbQWX1Y/Km9CJzfPYAF7fcEAAAB+MHwGCSqGSIb3DQEHBqBvMG0CAQAwaAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAyBJR+GnWAmKiMcTu0CARCAO9O+4p7Q4MRuZV+KB+MaCr9BtlJUGBqDFeU8qwCFI2y1oO04OP/0r9rbKmj7Vferp1nVyPwav+cP7LqlIjt9nVt8/A==",
      "jobs": [
        {
          "endpoint": "/api/1.0/authorization",
          "dataField": "data.companies",
          "dataType": "authorization",
          "children": [
            {
              "endpoint": "/api/1.0/users?company={companyid}",
              "dataField": "data",
              "dataType": "users",
              "placeholders": {
                "companyid": "id"
              },
              "children": [
                {
                  "endpoint": "/api/1.0/activity/worklog?company={2:companyid}&user={1:userid}",
                  "dataField": "data.0",
                  "dataType": "worklog",
                  "placeholders": {
                    "2:companyid": "id",
                    "1:userid": "id"
                  },
                  "params": {
                    "detail": "true",
                    "task-project-names": "true",
                    "from": {
                      "attr": "datetime-from"
                    },
                    "to": {
                      "attr": "datetime-to"
                    }
                  }
                },
                {
                  "endpoint": "/api/1.0/activity/timeuse?company={2:companyid}&user={1:userid}",
                  "dataField": "data.0",
                  "dataType": "timeuse",
                  "placeholders": {
                    "2:companyid": "id",
                    "1:userid": "id"
                  },
                  "params": {
                    "from": {
                      "attr": "datetime-from"
                    },
                    "to": {
                      "attr": "datetime-to"
                    }
                  }
                },
                {
                  "endpoint": "/api/1.0/activity/edit-time?company={2:companyid}&user={1:userid}",
                  "dataField": "data.0",
                  "dataType": "edit-time",
                  "placeholders": {
                    "2:companyid": "id",
                    "1:userid": "id"
                  },
                  "params": {
                    "from": {
                      "attr": "datetime-from"
                    },
                    "to": {
                      "attr": "datetime-to"
                    }
                  }
                }
              ]
            },
            {
              "endpoint": "/api/1.0/projects?company={companyid}",
              "dataField": "data",
              "dataType": "projects",
              "placeholders": {
                "companyid": "id"
              },
              "params": {
                "all": "true"
              }
            },
            {
              "endpoint": "/api/1.0/tasks?company={companyid}",
              "dataField": "data",
              "dataType": "tasks",
              "placeholders": {
                "companyid": "id"
              }
            }
          ]
        }
      ],
      "mappings": {
        "authorization": {
          "none": "none"
        },
        "users": {
          "id": {
            "mapping": {
              "destination": "user_id",
              "primaryKey": true
            }
          },
          "name": "name",
          "employeeId": "employee_id",
          "exists": "exists",
          "active": "active",
          "email": "email",
          "createdAt": "created_at"
        },
        "projects": {
          "id": {
            "mapping": {
              "destination": "project_id",
              "primaryKey": true
            }
          },
          "name": "project_name",
          "creatorId": "creator_id",
          "weight": "weight",
          "deleted": "deleted",
          "scope": "scope"
        },
        "tasks": {
          "id": {
            "mapping": {
              "destination": "task_id",
              "primaryKey": true
            }
          },
          "name": "task_name",
          "project.id": "project_id",
          "status": "status",
          "reporterId": "reporter_id",
          "deleted": "deleted",
          "folders.id": "folders_id",
          "folders.weight": "folders_weight"
        },
        "worklog": {
          "userId": {
            "mapping": {
              "destination": "userId",
              "primaryKey": true
            }
          },
          "start": {
            "mapping": {
              "destination": "start",
              "primaryKey": true
            }
          },
          "time": "time",
          "mode": "mode",
          "taskId": "task_id",
          "taskName": "task_name",
          "projectId": "project_id",
          "projectName": "project_name",
          "deviceId": "device_id"
        },
        "timeuse": {
          "parent_id": {
            "type": "user",
            "mapping": {
              "destination": "user_id",
              "primaryKey": true
            }
          },
          "start": {
            "mapping": {
              "destination": "start",
              "primaryKey": true
            }
          },
          "time": "time",
          "score": "score",
          "category": "category",
          "type": "type",
          "value": "value",
          "title": "title"
        },
        "edit-time": {
          "id": {
            "mapping": {
              "destination": "id",
              "primaryKey": true
            }
          },
          "start": {
            "mapping": {
              "destination": "start",
              "primaryKey": true
            }
          },
          "time": "time",
          "approved": "approved",
          "operation": "operation",
          "taskId": "task_id",
          "projectId": "project_id",
          "reason": "reason"
        }
      }
    },
    "iterations": [
      {
        "datetime-from": {
          "function": "date",
          "args": [
            "Y-m-d\\TH:i:s\\Z",
            {
              "function": "strtotime",
              "args": [
                "-5 day"
              ]
            }
          ]
        },
        "datetime-to": {
          "function": "date",
          "args": [
            "Y-m-d\\TH:i:s\\Z",
            {
              "function": "strtotime",
              "args": [
                "-4 day"
              ]
            }
          ]
        },
        "incrementalOutput": false
      }

    ]
  }
}

================================================
File: /tests/functional/data_full_truncate/in/tables-kmoch/XXX.csv.manifest
================================================
{
    "id": "in.c-vkmoch_test.XXX",
    "uri": "https:\/\/connection.csas.keboola.cloud\/v2\/storage\/tables\/in.c-vkmoch_test.XXX",
    "name": "XXX",
    "primary_key": [],
    "distribution_key": [],
    "created": "2022-11-14T16:11:57+0100",
    "last_change_date": "2022-11-14T09:25:40+0100",
    "last_import_date": "2022-11-14T09:25:40+0100",
    "columns": [
        "COL_DECIMAL",
        "COL_INTEGER",
        "COL_DATE",
        "COL_VARCHAR",
        "COL_CHAR",
        "SYS_DATETIME"
    ],
    "metadata": [],
    "column_metadata": {
        "COL_DECIMAL": [],
        "COL_INTEGER": [],
        "COL_DATE": [],
        "COL_VARCHAR": [],
        "COL_CHAR": [],
        "SYS_DATETIME": []
    }
}

================================================
File: /tests/functional/data_full_truncate/in/tables-kmoch/XXX.csv
================================================
"COL_DECIMAL","COL_INTEGER","COL_DATE","COL_VARCHAR","COL_CHAR","SYS_DATETIME"
"6666.33330","987654321","2022-11-14","žluťoučký kůň","Y","Nov 14 2022  8:25AM"


================================================
File: /tests/functional/data_full_truncate/test.csv
================================================
symbol,symbol_name
1,Samsarass
2,dfdsfsd


================================================
File: /tests/functional/data_full_truncate/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /tests/functional/data_full_truncate/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /tests/functional/data_full_truncate/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": ["EMAIL_ID"],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "symbol",
        "EMAIL"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /tests/functional/data_full_truncate/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "db": {
      "host_port": "localhost:1521",
      "database": "xe",
      "user": "system",
      "#password": "oracle"
    },
    "schema": "SYSTEM",
    "custom_column_mapping": false,
    "pre_run_script": false,
    "loading_options": {
      "load_type": "full_load",
      "full_load_mode": "truncate_as_delete"
    },
    "sql_loader_options": {
      "rows": 6000,
      "bindsize": 8000000,
      "readsize": 8000001
    },
    "table_name": "TEST_DATA",
    "post_run_script": false,
    "debug": true
  },
  "action": "run",
  "image_parameters": {
    "approved_hostnames": [
      {
        "host": "localhost",
        "port": "1521"
      }
    ]
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"XXXXX-TOKEN\"}",
        "oauthVersion": "2.0",
        "appKey": "12345",
        "#appSecret": "123qwe-CiN"
      }
    }
  }
}


================================================
File: /TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

================================================
File: /Dockerfile
================================================
FROM python:3.10-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential && apt-get install -y wget

RUN pip install flake8

RUN pip install -r /code/requirements.txt

# Prepare Oracle drivers
RUN wget -O /tmp/instantclient-basiclite.zip https://download.oracle.com/otn_software/linux/instantclient/218000/instantclient-basic-linux.x64-21.8.0.0.0dbru.zip
RUN wget -O /tmp/instantclient-sqlplus-linux.x64-21.8.0.0.0dbru.zip https://download.oracle.com/otn_software/linux/instantclient/218000/instantclient-sqlplus-linux.x64-21.8.0.0.0dbru.zip
RUN wget -O /tmp/instantclient-tools-linux.x64-21.8.0.0.0dbru.zip https://download.oracle.com/otn_software/linux/instantclient/218000/instantclient-tools-linux.x64-21.8.0.0.0dbru.zip


RUN apt-get update -q \
 && apt-get install -y unzip ssh libmcrypt-dev libaio1 wget --no-install-recommends

# Oracle instantclient
#COPY --from=1 /tmp/instantclient-basiclite.zip /tmp/instantclient-basiclite.zip
#COPY --from=1 /tmp/instantclient-sdk.zip /tmp/instantclient-sdk.zip
#COPY --from=1 /tmp/instantclient-sqlplus.zip /tmp/instantclient-sqlplus.zip

RUN unzip /tmp/instantclient-basiclite.zip -d /usr/local/
RUN unzip /tmp/instantclient-sqlplus-linux.x64-21.8.0.0.0dbru.zip -d /usr/local/
RUN unzip /tmp/instantclient-tools-linux.x64-21.8.0.0.0dbru.zip -d /usr/local/

RUN ln -s /usr/local/instantclient_21_8 /usr/local/instantclient
RUN ln -s /usr/local/instantclient/sqldr /usr/local/instantclient/sqldr
RUN ln -s /usr/local/instantclient/sqlplus /usr/bin/sqlplus

# https://stackoverflow.com/questions/48527958/docker-error-getting-username-from-password-database
RUN useradd -u 1000 kbc_dummy

# https://stackoverflow.com/questions/66922967/problems-connecting-oracledb-from-aws-lambda-using-python-38#comment118302837_66922967
ENV LD_LIBRARY_PATH=/usr/local/instantclient
ENV PATH=/usr/local/instantclient:$PATH



WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]

================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /src/db_writer/writer.py
================================================
import csv
import logging
import logging.handlers
import os
from dataclasses import dataclass, asdict
from pathlib import Path
from typing import List, Iterable, Optional, Literal, Tuple

import oracledb
from oracledb import DatabaseError

from configuration import SQLLoaderOptions, DefaultFormatOptions
from db_common.db_connection import DbConnection
from db_writer.sql_loader import SQLLoaderExecutor
from db_writer.table_schema import TableSchema, ColumnSchema


class OracleConnection(DbConnection):

    def __init__(self, username: str, password: str, host: str, port: int, service_name: str,
                 insta_client_path: str = os.environ.get("HOME") + "/Downloads/instantclient_19_8",
                 logger: str = __name__):
        self.__username = username
        self.__password = password
        self.host = host
        self.port = port
        self.service_name = service_name
        self._insta_client_path = insta_client_path
        self.__connection: oracledb.Connection | None = None
        self._connected = False
        self._logger = logging.getLogger(logger)

    @property
    def dsn(self) -> str:
        return f'{self.host}:{self.port}/{self.service_name}'

    @property
    def connected(self) -> bool:
        return self._connected

    @staticmethod
    def escape(identifier: str) -> str:
        return f'"{identifier.upper()}"'

    def test_connection(self) -> None:
        self.connect()
        self.__connection.close()

    def connect(self) -> None:
        # You must always call init_oracle_client() to use thick mode in any platform
        oracledb.init_oracle_client(lib_dir=self._insta_client_path)

        self.__connection = oracledb.connect(user=self.__username, password=self.__password, dsn=self.dsn)
        self._connected = True

    @property
    def connection(self) -> oracledb.Connection:
        if not self.connected:
            raise WriterUserException("The connection is not initialized, please call connect() method first.")

        return self.__connection

    def run_procedure(self, procedure_name, parameters: list = None, keyword_parameters: dict = None):
        cur = self.connection.cursor()
        try:
            cur.callproc(procedure_name, parameters, keyword_parameters=keyword_parameters)
        except oracledb.DatabaseError as e:
            error, = e.args
            raise WriterUserException(f"Procedure '{procedure_name}', with parameters: {parameters} "
                                      f"call failed with error: {error.message}",
                                      db_error=error)
        finally:
            cur.close()

    def perform_query(self, query: str, bind_parameters: Optional[dict] = None) -> Iterable[dict]:
        """

        Args:
            query: Query string. Bind parameters are in query string prefixed with :. E.g. select * from t where ID=:id.
            bind_parameters: Dictionary of key value parameters to be bind to query. e.g. {"id":123}

        Returns:

            """
        cursor = self.connection.cursor()

        self._logger.debug(f'Running query: \n "{query}" \n '
                           f'Parameters: {bind_parameters}')
        try:
            cursor.execute(query, bind_parameters)
        except oracledb.DatabaseError as e:
            error, = e.args
            raise WriterUserException(f"Query failed with error: {error.message}",
                                      {"query": query, "parameters": bind_parameters}, db_error=error)

        try:
            for res in cursor.fetchall():
                yield res
        except oracledb.InterfaceError as e:
            if e.args[0].full_code == 'DPY-1003':
                self._logger.debug("Query returned no results..")

        cursor.close()

    def get_session_id(self) -> Tuple[int, int]:
        query = "SELECT SID, SERIAL# FROM V$SESSION WHERE AUDSID = Sys_Context('USERENV', 'SESSIONID')"
        res = self.perform_query(query)
        result = list(res)[0]
        return result[0], result[1]


class TableNotFoundError(Exception):
    pass


class OracleMetadataProvider:
    def __init__(self, connection: DbConnection):
        self.__connection = connection

    NO_LENGTH_DATATYPES = ('DATE', 'LONG', 'TIMESTAMP')
    NO_PRECISION_DATATYPES = ('FLOAT',)

    def get_table_metadata(self, schema: str, table_name: str) -> TableSchema:
        table_schema = TableSchema(table_name, [])
        query = """SELECT COLUMN_NAME, DATA_TYPE, 
                         DATA_LENGTH, DATA_PRECISION, NULLABLE as nullable  
                    FROM ALL_TAB_COLS 
                    where TABLE_NAME = :table_name AND OWNER = :schema"""  # noqa
        results = self.__connection.perform_query(query, {"table_name": table_name, "schema": schema})
        if not results:
            raise TableNotFoundError(f"The specified table {schema}.{table_name} was not found.")

        for res in results:
            col = ColumnSchema(name=res[0],
                               source_type_signature=self._get_column_datatype_signature(res[1], res[2], res[3],
                                                                                         res[4]),
                               source_type=res[1],
                               length=res[2],
                               nullable=res[4])
            table_schema.add_column(col)
        return table_schema

    @staticmethod
    def _get_column_datatype_signature(dtype, length, precision, nullable) -> str:
        datatype = dtype
        dtype_stripped = dtype.split('(')[0]
        if length and dtype_stripped.upper() not in OracleMetadataProvider.NO_LENGTH_DATATYPES:
            datatype += f'({length}'
            if precision and dtype_stripped.upper() not in OracleMetadataProvider.NO_PRECISION_DATATYPES:
                datatype += f',{precision}'

            datatype += ')'

        datatype += ' NULL' if nullable else ' NOT NULL'

        return datatype


@dataclass
class OracleCredentials:
    username: str
    password: str
    host: str
    port: int
    service_name: str
    insta_client_path: str = os.environ.get("HOME") + "/Downloads/instantclient_19_8"


class WriterUserException(Exception):
    def __init__(self, *args, db_error: Optional[oracledb.DatabaseError] = None):
        self.db_error = db_error
        super().__init__(*args)


class OracleWriter:

    def __init__(self, oracle_credentials: OracleCredentials, log_folder: str,
                 sql_loader_options: SQLLoaderOptions,
                 default_format: DefaultFormatOptions,
                 sql_loader_path: str = 'sqlldr',
                 load_batch_size: int = 5000,
                 verbose_logging: bool = False, db_trace_enabled=False):
        self.__credentials = oracle_credentials
        self._logger = self._set_logger(log_folder, verbose_logging)
        self._connection = OracleConnection(**asdict(self.__credentials),
                                            logger=__name__)
        self._metadata_provider = OracleMetadataProvider(self._connection)
        self._sql_loader_options = sql_loader_options

        self._sql_loader = SQLLoaderExecutor(self._connection.dsn,
                                             oracle_credentials.username,
                                             oracle_credentials.password,
                                             global_format=default_format,
                                             log_folder=log_folder,
                                             sql_loader_path=sql_loader_path)
        self.log_folder = log_folder
        self._batch_size = load_batch_size
        self.trace_enabled = db_trace_enabled
        self._ext_session_id = ''
        self._default_format = default_format

    def connect(self, ext_session_id: str = ''):
        self._logger.debug("Connecting to database.")
        try:
            self._connection.connect()
            self._logger.info("Setting default NLS session.")
            self._set_default_session()
        except DatabaseError as e:
            raise WriterUserException(f"Login to database failed, please check your credentials. Detail: {e}") from e

        self._ext_session_id = ext_session_id
        if self.trace_enabled:
            self._enable_db_trace()
            self._logger.debug(f"DB Trace enabled and outputting to: {self.get_trace_file_path()}")

    def test_connection(self):
        self.connect()
        self.close_connection()

    def _set_default_session(self):
        self.execute_script("alter session set NLS_NUMERIC_CHARACTERS = '. '")
        self.execute_script(f"alter session set NLS_TIMESTAMP_FORMAT = '{self._default_format.timestamp_format}'")
        self.execute_script(f"alter session set NLS_DATE_FORMAT = '{self._default_format.date_format}'")

    def close_connection(self):
        self._logger.debug("Closing the connection.")
        self._connection.connection.close()
        if self.trace_enabled:
            self._disable_db_trace()

    def _enable_db_trace(self):
        sid, serial = self._connection.get_session_id()
        query = f"""
        begin
          dbms_monitor.session_trace_enable (
            session_id => {sid}, 
            serial_num => {serial}, 
            waits      => true, 
            binds      => true,
            plan_stat  => 'all_executions');
        end;
        """  # noqa
        res = self._connection.perform_query(query)
        list(res)
        self.trace_enabled = True

    def _disable_db_trace(self):
        sid, serial = self._connection.get_session_id()
        query = f"""
        begin
          dbms_monitor.session_trace_disable (
            session_id => {sid}, 
            serial_num => {serial});
        end;
        """  # noqa
        res = self._connection.perform_query(query)
        list(res)
        self.trace_enabled = True

    def get_trace_file_path(self) -> str:
        if not self.trace_enabled:
            raise WriterUserException("The db trace is not enabled in the constructor")
        sid, serial = self._connection.get_session_id()

        query = f"""select
                   r.value                                ||'/diag/rdbms/'||
                   sys_context('USERENV','DB_NAME')       ||'/'||
                   sys_context('USERENV','INSTANCE_NAME') ||'/trace/'||
                   sys_context('USERENV','DB_NAME')       ||'_ora_'||p.spid||'.trc'
                   as tracefile_name
                from v$session s, v$parameter r, v$process p
                where r.name = 'diagnostic_dest'
                and s.sid = {sid}
                and p.addr = s.paddr
                """
        res = self._connection.perform_query(query)
        return list(res)[0][0]

    def _set_logger(self, log_folder: str, verbose: bool = False) -> logging.Logger:
        sql_log_path = Path(f'{log_folder}/writer_debug.log')
        sql_log_path.parent.mkdir(parents=True, exist_ok=True)

        class DebugFilter(logging.Filter):
            def filter(self, rec):
                return rec.levelno == logging.DEBUG

        handler = logging.handlers.WatchedFileHandler(sql_log_path, mode="w")
        # handler.addFilter(DebugFilter())
        formatter = logging.Formatter("[%(asctime)s]:  %(message)s")
        handler.setFormatter(formatter)
        logger = logging.getLogger(__name__)
        level = 'DEBUG' if verbose else 'INFO'
        logger.setLevel(level)
        logger.addHandler(handler)

        return logger

    def execute_script(self, script: str, continue_on_failure: bool = False):
        res = self._connection.perform_query(script)
        return list(res)

    def upload_full(self, data_path: str, schema: str, table_name: str, columns: List[str],
                    pre_procedure: Optional[str] = None, pre_procedure_parameters: Optional[list] = None):

        table_metadata = self._metadata_provider.get_table_metadata(schema, table_name)
        self._validate_schema(columns, table_metadata.columns)

        sql_loader_mode = 'REPLACE'
        if pre_procedure:
            self._logger.info(f"Running PRE procedure '{pre_procedure}' with parameters {pre_procedure_parameters}")
            self._connection.run_procedure(pre_procedure, pre_procedure_parameters)
            # the procedure is expected to empty the table
            sql_loader_mode = 'INSERT'
        self._logger.info(f"Inserting data in full mode using SQL*Loader, mode: {sql_loader_mode}")
        self._load_data_into_table(data_path, schema, table_name, columns,
                                   table_metadata.columns,
                                   method='sqlldr',
                                   mode=sql_loader_mode)

    def upload_incremental(self, data_path: str, schema: str, table_name: str, columns: List[str],
                           primary_key: Optional[List[str]] = None,
                           method: Literal['query', 'sqlldr'] = 'sqlldr'):
        """
        Perform upsert or append if no primary key is defined.

        Args:
            data_path:
            schema:
            table_name:
            columns:
            primary_key:
            method: Literal['query', 'sqlldr']: data load method

        Returns:

        """
        self._logger.debug(f"Getting metadata for table: {schema}.{table_name}")
        table_metadata = self._metadata_provider.get_table_metadata(schema, table_name)

        self._validate_schema(columns, table_metadata.columns)
        target_table_name = self._build_table_identifier(schema, table_name)
        if primary_key and method == 'query':
            # upsert mode
            try:
                self._perform_upsert(data_path, table_name, target_table_name, columns, primary_key, table_metadata,
                                     method=method)
            except Exception as e:
                # always drop temp table
                self._drop_temp_table(table_name)
                raise e
        else:
            # append mode
            self._load_data_into_table(data_path, schema, table_name, columns, table_metadata.columns,
                                       method=method,
                                       mode='APPEND')

    def _build_table_identifier(self, schema: str | None, table_name: str):
        target_table_name = self._connection.escape(table_name)
        if schema:
            target_table_name = f'{self._connection.escape(schema)}.{target_table_name}'

        return target_table_name

    def _perform_upsert(self, data_path: str, table_name: str, target_table_name: str,
                        columns: List[str], primary_key: List[str], table_metadata: TableSchema,
                        method: Literal['query', 'sqlldr']):
        temp_table_name = self._create_temp_table(table_name, table_metadata.columns)

        self._load_data_into_table(data_path, None, temp_table_name, columns, table_metadata.columns, method=method)

        escape = self._connection.escape
        join_clause = ' AND '.join([f'a.{escape(col)}=b.{escape(col)}' for col in primary_key])

        update_clause = ', '.join([f'a.{escape(col)}=b.{escape(col)}' for col in columns if col not in primary_key])

        insert_clause = ', '.join(columns)
        insert_values_clause = ', '.join([f'b.{escape(col)}' for col in columns])

        merge_query = f"""MERGE INTO {target_table_name} a
                                    USING (SELECT * FROM {temp_table_name}) b
                                    ON ({join_clause})
                                    WHEN MATCHED THEN UPDATE SET {update_clause}
                                    WHEN NOT MATCHED THEN INSERT ({insert_clause}) VALUES ({insert_values_clause})
                                    """

        res = self._connection.perform_query(merge_query)
        list(res)
        # TODO: Is it necessary to commit, if so when?
        self._logger.debug("Executing Commit")
        self._connection.connection.commit()

        drop_query = f"DROP TABLE {temp_table_name}"
        self._logger.info("Removing temporary table")
        res = self._connection.perform_query(drop_query)
        list(res)

    def _create_temp_table(self, table_name: str, columns: List[ColumnSchema]) -> str:

        column_signatures = [f'{self._connection.escape(col.name)} {col.source_type_signature}' for col in columns]

        temp_table_name = self._get_temp_table_name(table_name)
        query = f"""CREATE TABLE {temp_table_name}
                    ({', '.join(column_signatures)})
        """
        self._logger.debug("Creating temporary table.")
        try:
            res = self._connection.perform_query(query)
            # just trigger the results
            list(res)
        except WriterUserException as e:
            if e.db_error.full_code == 'ORA-00955':
                # table already exists error skipped
                self._logger.debug(f"Temporary table {temp_table_name} already exists!")
            else:
                raise e

        return temp_table_name

    def _drop_temp_table(self, table_name: str) -> str:

        temp_table_name = self._get_temp_table_name(table_name)
        query = f"DROP TABLE {temp_table_name}"
        self._logger.debug("Dropping temporary table.")
        try:
            res = self._connection.perform_query(query)
            # just trigger the results
            list(res)
        except WriterUserException as e:
            if e.db_error.full_code == 'ORA-00955':
                # table already exists error skipped
                self._logger.debug(f"Temporary table {temp_table_name} already exists!")
            elif e.db_error.full_code == 'ORA-00942':
                # table does not exist error skipped
                self._logger.debug(f"Temporary table {temp_table_name} does not exist!")
            else:
                raise e

        return temp_table_name

    def _get_temp_table_name(self, table_name):
        temp_table_name = f'KBC_TMP_{self._ext_session_id}_{table_name.upper()}'
        return temp_table_name

    def _load_data_into_table(self, data_path: str, schema: str | None, table_name: str, columns: List[str],
                              destination_schema: List[ColumnSchema],
                              method: Literal['sqlldr', 'query'] = 'sqlldr', mode='INSERT'):
        # important to order by CSV column order
        indexed_schema = {col.name: col for col in destination_schema}
        columns_involved = [indexed_schema[col] for col in columns]

        if method == 'sqlldr':
            self._logger.info(f"Running load mode: {method}")
            table_identifier = self._build_table_identifier(schema, table_name)
            columns_types = self._get_sqlldr_types(columns_involved)
            self._sql_loader.load_data(data_path, table_identifier, columns_types,
                                       mode=mode, errors=0,
                                       **asdict(self._sql_loader_options))
        elif method == 'query':
            self._logger.info(f"Running load mode: '{method}'")
            self._insert_records_query(data_path, schema, table_name, columns)

    def _insert_records_query(self, data_path: str, schema: str, table_name: str, columns: List[str],
                              skip_first_line: bool = True):
        cursor = self._connection.connection.cursor()
        # Predefine the memory areas to match the table definition
        # cursor.setinputsizes(None, 25)

        table_identifier = self._build_table_identifier(schema, table_name)
        values_clause = ', '.join([f':{i}' for i, col in enumerate(columns)])
        columns_clause = ', '.join([col for col in columns])
        insert_query = f"INSERT INTO {table_identifier} ({columns_clause}) VALUES ({values_clause})"

        self._logger.debug(f"Executing insert queries with parameters: batch_size={self._batch_size}")
        self._logger.debug(f"Insert query template: {insert_query}")

        with open(data_path, 'r') as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=',')
            buffer = []
            if skip_first_line:
                csv_file.readline()
            for line in csv_reader:
                buffer.append(line)
                if len(buffer) % self._batch_size == 0:
                    cursor.executemany(insert_query, buffer)
                    buffer = []
            if buffer:
                cursor.executemany(insert_query, buffer)

        cursor.close()
        # TODO: Is it necessary to commit, if so when?
        self._logger.debug("Executing Commit")
        self._connection.connection.commit()

    def _validate_schema(self, columns: List[str], destination_columns: List[ColumnSchema]):
        expected_names = [col.name for col in destination_columns]
        mismatched = [col for col in columns if col not in expected_names]
        if mismatched:
            raise WriterUserException(f"The destination schema does not contain specified columns: {mismatched}. "
                                      f"The expected schema is: {expected_names}. "
                                      "Please check the column mapping and case")

    def _get_sqlldr_types(self, columns_involved: List[ColumnSchema]) -> List[Tuple[str, str]]:
        """
        Returns column names with SQLLoader type annotations
        Args:
            columns_involved:

        Returns:

        """
        result_typed = list()
        for c in columns_involved:
            col_type = c.source_type.split('(')[0]
            # Use only dates
            sqlldr_type = ''
            if col_type.upper() in ['TIMESTAMP', 'DATE']:
                sqlldr_type = col_type
            if 'CHAR' in col_type.upper():
                sqlldr_type = f'CHAR({c.length})'
            result_typed.append((c.name, sqlldr_type))

        return result_typed


================================================
File: /src/db_writer/sql_loader.py
================================================
import logging
import os
import subprocess
import tempfile
from pathlib import Path
from typing import Literal, List, Tuple

from configuration import DefaultFormatOptions


class SQLLoaderException(Exception):
    pass


class CTLFileBuilder:
    CTLLoadMode = Literal['INSERT', 'TRUNCATE', 'REPLACE']

    @staticmethod
    def _load_data_into(table_name: str, character_set: str = 'UTF8'):
        return f'load data CHARACTERSET {character_set} into table {table_name}'

    @staticmethod
    def _fields_terminated_by(terminator: str, enclosure: str = '\\"'):
        return f'FIELDS CSV WITH EMBEDDED TERMINATED BY "{terminator}" OPTIONALLY ENCLOSED BY "{enclosure}"'

    @staticmethod
    def _column_list(columns: List[Tuple[str, str]]):
        column_strings = [f"{c[0]}{' ' + c[1] if c[1] else ''}" for c in columns]
        column_expression = ", \n ".join(column_strings)
        return f'({column_expression})'

    @staticmethod
    def _mode(mode: CTLLoadMode):
        return mode

    @staticmethod
    def _date_default_format(_format: str):
        return f'DATE FORMAT "{_format}"'

    @staticmethod
    def _timestamp_default_format(_format: str):
        return f'TIMESTAMP FORMAT "{_format}"'

    @classmethod
    def build(cls, table_name: str,
              columns: List[Tuple[str, str]],
              mode: CTLLoadMode = 'INSERT',
              default_format: DefaultFormatOptions = None,
              field_delimiter: str = ',') -> Path:
        """
        Builds SQL loader control file in temporary location.

        Args:
            table_name:
            columns: List[Tuple[str, str]]: Column name / Optional Type definition tuple,
                e.g. [('COLA', "DATE YY_MM_DD")]
            mode:
            default_format:
            field_delimiter:

        Returns: Result file path

        """

        fd, ctl_path = tempfile.mkstemp(suffix='sqlldr.ctl')

        with os.fdopen(fd, 'w', encoding='utf-8') as out:
            out.write(cls._load_data_into(table_name))
            out.write('\n')
            out.write(cls._mode(mode))
            out.write('\n')
            out.write(cls._fields_terminated_by(field_delimiter))
            out.write('\n')
            if default_format:
                out.write(cls._date_default_format(default_format.date_format))
                out.write('\n')
                out.write(cls._timestamp_default_format(default_format.timestamp_format))
                out.write('\n')
            out.write('TRAILING NULLCOLS')
            out.write('\n')
            out.write(cls._column_list(columns))

        return Path(ctl_path)


class SQLLoaderExecutor:

    def __init__(self, host_string: str, user: str, password: str,
                 global_format: DefaultFormatOptions = None,
                 sql_loader_path: str = 'sqlldr',
                 log_folder: str = './temp/logs'):
        """

        Args:
            sql_loader_path: Path or command name to sql loader executable (sqlldr)
            log_folder:
            global_format: dict: GLOBAL format masks
                e.g. {'date_format': 'YY-MM-DD',
                      'timestamp_format': 'YYYY-MM-DD HH24:MI:SS.FF6'}
        """
        self.host = host_string
        self._sql_loader_path = sql_loader_path
        self._log_folder = log_folder
        self._global_format = global_format
        self.__user = user
        self.__password = password

    @property
    def _uid_string(self) -> str:
        uid = f"{self.__user}/{self.__password}@{self.host}"

        # needed for SYS user
        if self.__user.lower() == 'sys':
            uid += ' AS SYSDBA'

        # wrap in quotes
        return f"'{uid}'"

    def _prepare_log_folder(self):
        if not os.path.exists(self._log_folder):
            os.makedirs(self._log_folder, exist_ok=True)

    def load_data(self, data_path: str,
                  table_name: str,
                  columns: List[Tuple[str, str]],
                  skip_first_line: bool = True,
                  mode: Literal['INSERT', 'TRUNCATE', 'REPLACE'] = 'INSERT',
                  field_delimiter: str = ',',
                  errors: int = 50,
                  rows: int = 5000,
                  bindsize: int = 8000000,
                  **kwargs):
        """

        Performs sqlldr command to load data.

        Additional parameters:
         control -- control file name

          discard -- discard file name
          discardmax -- number of discards to allow          (Default all)
          skip -- number of logical records to skip    (Default 0)
          load -- number of logical records to load    (Default all)
          errors -- number of errors to allow            (Default 50)
          rows -- number of rows in conventional path bind array or between direct
    path data saves
                   (Default: Conventional path 64, Direct path all)
         bindsize -- size of conventional path bind array in bytes  (Default 256000)
        silent -- suppress messages during run (header,feedback,errors,discards,
    partitions)
         direct -- use direct path                      (Default FALSE)
         parallel -- do parallel load                     (Default FALSE)
          file -- file to allocate extents from
        skip_unusable_indexes -- disallow/allow unusable indexes or index partitions
        (Default FALSE)
        skip_index_maintenance -- do not maintain indexes, mark affected indexes as
        unusable  (Default FALSE)
        commit_discontinued -- commit loaded rows when load is discontinued  (Default
        FALSE)
          readsize -- size of read buffer                  (Default 1048576)
        external_table -- use external table for load; NOT_USED, GENERATE_ONLY, EXECUTE
         (Default NOT_USED)
        columnarrayrows -- number of rows for direct path column array  (Default 5000)
        streamsize -- size of direct path stream buffer in bytes  (Default 256000)
        multithreading -- use multithreading in direct path
        resumable -- enable or disable resumable for current session  (Default FALSE)
        resumable_name -- text string to help identify resumable statement
        resumable_timeout -- wait time (in seconds) for RESUMABLE  (Default 7200)
        date_cache -- size (in entries) of date conversion cache  (Default 1000)

        Args:

            data_path: Path of input CSV file
            table_name:
            columns: List[Tuple[str, str]]: Column name / Optional Type definition tuple,
                e.g. [('COLA', "DATE YY_MM_DD")]
            skip_first_line: Flag whether to skip first line (header)
            mode:
            field_delimiter:
            errors:
            rows:
            bindsize:
            **kwargs:

        Returns:

        """
        self._prepare_log_folder()
        ctl_file_path = CTLFileBuilder.build(table_name, columns, mode, self._global_format, field_delimiter)
        skip = 1 if skip_first_line else 0
        logging.info(f"Sqlldr control file \n: {open(ctl_file_path, 'r').read()}")
        parameters = {
            "userid": self._uid_string,
            "control": ctl_file_path,
            "data": data_path,
            "bad": self.bad_log_path,
            "log": self.log_file_path,
            "errors": errors,
            "rows": rows,
            "skip": skip,
            "bindsize": bindsize
        }

        parameters = {**parameters, **kwargs}
        self._execute_sqlloader(parameters)

    @property
    def bad_log_path(self) -> str:
        return Path(f'{self._log_folder}/bad.log').as_posix()

    @property
    def log_file_path(self) -> str:
        return Path(f'{self._log_folder}/log.log').as_posix()

    @staticmethod
    def _build_args_from_dict(parameters: dict):
        args = [f"{key}={value}" for key, value in parameters.items()]
        return args

    def _execute_sqlloader(self, parameters: dict):
        additional_args = self._build_args_from_dict(parameters)
        args = [self._sql_loader_path] + additional_args
        process = subprocess.Popen(args,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)

        logging.info(f'Running SQL loader command: {args}')
        stdout, stderr = process.communicate()
        process.poll()

        if process.poll() != 0:
            full_log = open(self.log_file_path, 'r').read()
            raise SQLLoaderException(f'Failed to execute the SQL*Loader script. Log in event detail. {stderr}',
                                     full_log)
        elif stderr:
            logging.warning(stderr)

        logging.info('SQL*Loader command finished', extra={'additional_detail': stdout})


================================================
File: /src/db_writer/table_schema.py
================================================
from dataclasses import dataclass, field
from typing import List, Dict, Callable
from typing import Optional


@dataclass
class ColumnSchema:
    """
    Defines the name and type specifications of a single field in a table
    """
    name: str
    source_type: Optional[str] = None
    source_type_signature: Optional[str] = None
    base_type_converter: Callable[[str | None], str] = field(default=lambda s: s)
    description: Optional[str] = None
    nullable: bool = False
    length: Optional[str] = None
    default: Optional[str] = None
    additional_properties: dict = field(default_factory=dict)

    @property
    def base_type(self):
        return self.base_type_converter(self.source_type)


@dataclass
class TableSchema:
    """
    TableSchema class is used to define the schema and metadata of a table.
    """
    name: str
    columns: List[ColumnSchema]
    primary_keys: Optional[List[str]] = None
    parent_tables: Optional[List[str]] = None
    description: Optional[str] = None
    additional_properties: dict = field(default_factory=dict)

    @property
    def field_names(self) -> List[str]:
        return [column.name for column in self.columns]

    @property
    def csv_name(self) -> str:
        return f"{self.name}.csv"

    def add_column(self, column: ColumnSchema) -> None:
        """
        Adds extra field to the tableschema.
        Args:
            column:  ColumnSchema to add to the list of columns

        """
        self.columns.append(column)


def init_table_schema_from_dict(json_table_schema: Dict,
                                base_type_converter: Callable[[str | None], str] = field(
                                    default=lambda s: s)) -> TableSchema:
    """
    Function to initialize a Table Schema from a dictionary.
    Example of the json_table_schema structure:
    {
      "name": "product",
      "description": "this table holds data on products",
      "parent_tables": [],
      "primary_keys": [
        "id"
      ],
      "columns": [
        {
          "name": "id",
          "base_type": "string",
          "description": "ID of the product",
          "length": "100",
          "nullable": false
        },
        {
          "name": "name",
          "base_type": "string",
          "description": "Plain-text name of the product",
          "length": "1000",
          "default": "Default Name"
        }
      ]
    }
    """
    try:
        json_table_schema["columns"] = [ColumnSchema(**{**_field, **{"base_type_converter": base_type_converter}}) for
                                        _field in json_table_schema["columns"]]
    except TypeError as type_error:
        raise KeyError(
            f"When creating the table schema the definition of columns failed : {type_error}") from type_error
    try:
        ts = TableSchema(**json_table_schema)
    except TypeError as type_error:
        raise KeyError(
            f"When creating the table schema the definition of the table failed : {type_error}") from type_error
    return ts


================================================
File: /src/component.py
================================================
"""
Template Component main class.

"""
import logging
import os
from dataclasses import asdict
from typing import List

from keboola.component.base import ComponentBase, sync_action
from keboola.component.exceptions import UserException

# configuration variables
import configuration
from db_writer.sql_loader import SQLLoaderException
from db_writer.writer import OracleWriter, OracleCredentials, WriterUserException, OracleConnection

INSTA_CLIENT_PATH = os.environ.get('ORACLE_INSTANT_CLI_PATH', '/usr/local/instantclient_21_8')

SQLLDR_PATH = os.environ.get('SQLLOADER_PATH', '/usr/local/instantclient_21_8/sqlldr')


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()
        self._configuration: configuration.Configuration
        self._oracle_writer: OracleWriter

    def run(self):
        """
        Main execution code
        """
        self._init_loggers()
        self._init_configuration()
        self._validate_host_names()
        self._init_writer_client()

        if not self.get_input_tables_definitions():
            raise UserException("No input table specified. Please provide one input table in the input mapping!")
        input_table = self.get_input_tables_definitions()[0]
        loading_options = self._configuration.loading_options
        load_type = loading_options.load_type

        columns = self._map_columns(input_table.columns)

        if self._configuration.pre_run_scripts and self._configuration.pre_run_scripts.script:
            logging.info(f"Pre script detected, running: {self._configuration.pre_run_scripts.script}")
            self._oracle_writer.execute_script(self._configuration.pre_run_scripts.script,
                                               self._configuration.pre_run_scripts.continue_on_failure)

        if load_type == 'full_load':
            pre_procedure = loading_options.full_load_procedure
            pre_procedure_params = loading_options.full_load_procedure_parameters_list
            self._oracle_writer.upload_full(input_table.full_path,
                                            schema=self._configuration.schema,
                                            table_name=self._configuration.table_name,
                                            columns=columns,
                                            pre_procedure=pre_procedure,
                                            pre_procedure_parameters=pre_procedure_params)
        elif load_type == 'incremental':
            self._oracle_writer.upload_incremental(input_table.full_path,
                                                   schema=self._configuration.schema,
                                                   table_name=self._configuration.table_name,
                                                   columns=columns,
                                                   primary_key=input_table.primary_key,
                                                   method=loading_options.incremental_load_mode
                                                   )

        if self._configuration.post_run_scripts and self._configuration.post_run_scripts.script:
            logging.info(f"Post script detected, running: {self._configuration.post_run_scripts.script}")
            self._oracle_writer.execute_script(self._configuration.post_run_scripts.script,
                                               self._configuration.post_run_scripts.continue_on_failure)

        logging.info("Process finished.")

    def _validate_host_names(self):
        approved_hostnames = self.configuration.image_parameters.get("approved_hostnames")
        host = self._configuration.db.host
        port = self._configuration.db.port
        if approved_hostnames:
            valid_host = any([(host == h['host'] and str(port) == str(h['port']))
                              for h in approved_hostnames])
            if not valid_host:
                raise UserException(f'Hostname "{host}" with port "{port}" is not approved.')

    def _init_loggers(self):
        class DebugFilter(logging.Filter):
            def filter(self, rec):
                return not (rec.levelno == logging.DEBUG and rec.name == 'db_writer.writer')

        if self.configuration.parameters.get('debug', False):
            # let db_writer handle the debug logging in debug mode
            for h in logging.getLogger().handlers:
                h.addFilter(DebugFilter())

    def _init_configuration(self):
        self.validate_configuration_parameters(configuration.Configuration.get_dataclass_required_parameters())
        self._configuration: configuration.Configuration = configuration.Configuration.load_from_dict(
            self.configuration.parameters)

    def _get_oracle_credentials(self) -> OracleCredentials:
        db_json = self.configuration.parameters.get('db', {})
        self._validate_parameters(db_json, configuration.DbOptions.get_dataclass_required_parameters(), 'Credentials')
        # build credentials
        db_config = configuration.DbOptions.load_from_dict(db_json)

        return OracleCredentials(username=db_config.user,
                                 password=db_config.pswd_password,
                                 insta_client_path=INSTA_CLIENT_PATH,
                                 host=db_config.host, port=db_config.port, service_name=db_config.database)

    def _init_writer_client(self):
        credentials = self._get_oracle_credentials()
        sql_loader_path = SQLLDR_PATH
        self._oracle_writer = OracleWriter(credentials,
                                           default_format=self._configuration.default_format_options,
                                           log_folder=self.files_out_path,
                                           sql_loader_path=sql_loader_path,
                                           sql_loader_options=self._configuration.sql_loader_options,
                                           verbose_logging=self._configuration.debug)
        self._oracle_writer.connect(ext_session_id=self.environment_variables.run_id)

    def _map_columns(self, columns: List[str]) -> List[str]:
        if not self._configuration.columns:
            return columns

        invalid_mapping: List[str] = list()
        for mapping in self._configuration.columns:
            if mapping.source_name not in columns:
                invalid_mapping.append(mapping.source_name)

            idx = columns.index(mapping.source_name)
            columns[idx] = mapping.destination_name

        if invalid_mapping:
            raise UserException(f"Some source column names in mapping do not exist in the source table: "
                                f"{invalid_mapping}")
        return columns

    @sync_action('load_table_columns')
    def load_available_columns(self):
        if not self.configuration.tables_input_mapping:
            raise UserException("No input table specified. Please provide one input table in the input mapping!")
        input_table = self.configuration.tables_input_mapping[0]
        return [{"value": c, "label": c} for c in input_table.columns]

    @sync_action('testConnection')
    def test_connection(self):
        credentials = self._get_oracle_credentials()
        connection = OracleConnection(**asdict(credentials),
                                      logger=__name__)
        connection.test_connection()


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except (UserException, WriterUserException, SQLLoaderException) as exc:
        detail = ''
        if len(exc.args) > 1:
            # remove extra argument to make logging.exception log properly
            detail = exc.args[1]
            exc.args = exc.args[:1]
        logging.exception(exc, extra={"additional_detail": detail})
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)
    logging.info("Code execution end")
    # force stop, because in some cases the process was hanging
    exit(0)


================================================
File: /src/db_common/db_connection.py
================================================
from typing import Protocol, Optional, Iterable


class DbConnection(Protocol):

    def test_connection(self) -> None:
        """Raises Connection error on connection failure"""

    def connect(self) -> None:
        """Connect to database"""

    def perform_query(self, query: str, bind_parameters: Optional[dict] = None) -> Iterable[dict]:
        """Performs query"""


class DbApiConnection:

    def __init__(self, connection):
        self._connection = connection


================================================
File: /src/configuration.py
================================================
import dataclasses
import json
from dataclasses import dataclass
from typing import List, Optional

import dataconf
from keboola.utils.helpers import comma_separated_values_to_list


class ConfigurationBase:

    @staticmethod
    def _convert_private_value(value: str):
        return value.replace('"#', '"pswd_')

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith('pswd_'):
            return value.replace('pswd_', '#', 1)
        else:
            return value

    @classmethod
    def load_from_dict(cls, configuration: dict):
        """
        Initialize the configuration dataclass object from dictionary.
        Args:
            configuration: Dictionary loaded from json configuration.

        Returns:

        """
        json_conf = json.dumps(configuration)
        json_conf = ConfigurationBase._convert_private_value(json_conf)
        return dataconf.loads(json_conf, cls, ignore_unexpected=True)

    @classmethod
    def get_dataclass_required_parameters(cls) -> List[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: List[str]

        """
        return [cls._convert_private_value_inv(f.name) for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING
                and f.default_factory == dataclasses.MISSING]


@dataclass
class DbOptions(ConfigurationBase):
    host_port: str
    database: str
    user: str
    pswd_password: str

    @property
    def host(self) -> str:
        return self.host_port.split(':')[0]

    @property
    def port(self) -> int:
        return int(self.host_port.split(':')[1])


@dataclass
class Script(ConfigurationBase):
    continue_on_failure: bool
    script: str


@dataclass
class LoadingOptions(ConfigurationBase):
    load_type: str
    full_load_mode: Optional[str] = 'truncate_as_delete'
    incremental_load_mode: Optional[str] = 'sql_loader'
    full_load_procedure: Optional[str] = None
    full_load_procedure_parameters: Optional[str] = None
    mode: Optional[str] = None

    @property
    def full_load_procedure_parameters_list(self):
        if self.full_load_procedure_parameters:
            return comma_separated_values_to_list(self.full_load_procedure_parameters)
        else:
            return None


@dataclass
class SQLLoaderOptions(ConfigurationBase):
    rows: int = 5000
    bindsize: int = 8000000
    readsize: int = 8000001


@dataclass
class DefaultFormatOptions(ConfigurationBase):
    date_format: str = 'YYYY-MM-DD'
    timestamp_format: str = "YYYY-MM-DD HH24:MI:SS.FF6"


@dataclass
class ColumnMapping(ConfigurationBase):
    source_name: str
    destination_name: str


@dataclass
class Configuration(ConfigurationBase):
    # Connection options
    db: DbOptions
    schema: str
    table_name: str
    loading_options: LoadingOptions
    default_format_options: DefaultFormatOptions
    sql_loader_options: Optional[SQLLoaderOptions] = None
    post_run_script: bool = False
    post_run_scripts: Optional[Script] = None
    pre_run_script: bool = False
    pre_run_scripts: Optional[Script] = None
    custom_column_mapping: bool = False
    columns: List[ColumnMapping] = None
    debug: bool = False

    def __post_init__(self):
        if not self.sql_loader_options:
            self.sql_loader_options = SQLLoaderOptions()


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /requirements.txt
================================================
keboola.component==1.4.0
dataconf
keboola.utils
oracledb
mock
freezegun


================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - export TAG=${BITBUCKET_BRANCH//\//-}
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo "Pushing test image to repo. [tag=${TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TAG
  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - export TAG=${BITBUCKET_BRANCH//\//-}
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo "Pushing test image to repo. [tag=${TAG}]"
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:$TAG
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:$TAG
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /component_config/component_short_description.md
================================================
Oracle Writer short description

================================================
File: /component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Authorization",
  "required": [
    "db"
  ],
  "properties": {
    "db": {
      "type": "object",
      "title": "Authorization",
      "required": [
        "#password",
        "host_port",
        "user",
        "database"
      ],
      "properties": {
        "host_port": {
          "type": "string",
          "title": "Hostname/Port",
          "enum": [
            "10.254.0.12:16210",
            "10.254.0.12:16211",
            "10.254.0.12:15210",
            "10.254.0.12:15211",
            "10.254.0.12:16610"
          ],
          "propertyOrder": 100
        },
        "database": {
          "type": "string",
          "title": "Service Name/SID",
          "propertyOrder": 250
        },
        "user": {
          "type": "string",
          "title": "User",
          "propertyOrder": 450
        },
        "#password": {
          "type": "string",
          "title": "Password",
          "format": "password",
          "propertyOrder": 500
        }
      },
      "propertyOrder": 1
    },
    "test_connection": {
      "type": "button",
      "format": "test-connection",
      "propertyOrder": 500
    }
  }
}

================================================
File: /component_config/configuration_description.md
================================================
Configuration description.

================================================
File: /component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Table configuration",
  "required": [
    "table_name",
    "loading_options",
    "custom_column_mapping"
  ],
  "properties": {
    "schema": {
      "type": "string",
      "title": "Destination table schema",
      "propertyOrder": 100
    },
    "table_name": {
      "type": "string",
      "title": "Destination table name",
      "propertyOrder": 102
    },
    "default_format_options": {
      "title": "Default Format (NLS)",
      "type": "object",
      "propertyOrder": 103,
      "properties": {
        "date_format": {
          "type": "string",
          "title": "DATE format mask",
          "default": "YYYY-MM-DD",
          "propertyOrder": 10
        },
        "timestamp_format": {
          "type": "string",
          "title": "TIMESTAMP format mask",
          "default": "YYYY-MM-DD HH24:MI:SS.FF6",
          "propertyOrder": 10
        }
      }
    },
    "loading_options": {
      "type": "object",
      "propertyOrder": 150,
      "title": "Loading options",
      "required": [
        "load_type"
      ],
      "properties": {
        "load_type": {
          "type": "string",
          "title": "Load Type",
          "enum": [
            "incremental",
            "full_load"
          ],
          "propertyOrder": 150
        },
        "full_load_mode": {
          "type": "string",
          "title": "Mode",
          "required": true,
          "default": "truncate_as_delete",
          "options": {
            "enum_titles": [
              "Defined Procedure (SQL*Loader INSERT)",
              "SQL*Loader - REPLACE (DELETE)"
            ],
            "dependencies": {
              "load_type": "full_load"
            }
          },
          "enum": [
            "defined_procedure",
            "truncate_as_delete"
          ],
          "propertyOrder": 150
        },
        "incremental_load_mode": {
          "type": "string",
          "title": "Mode",
          "required": true,
          "default": "sqlldr",
          "options": {
            "enum_titles": [
              "SQL*Loader (Append Only)",
              "Query (Upsert)"
            ],
            "dependencies": {
              "load_type": "incremental"
            }
          },
          "enum": [
            "sqlldr",
            "query"
          ],
          "propertyOrder": 150
        },
        "full_load_procedure": {
          "type": "string",
          "title": "Full Load Procedure Name",
          "description": "Name of procedure to be called prior full load.",
          "options": {
            "dependencies": {
              "full_load_mode": "defined_procedure"
            }
          },
          "propertyOrder": 300
        },
        "full_load_procedure_parameters": {
          "type": "string",
          "format": "textarea",
          "title": "Full Load Procedure Parameters",
          "description": "Comma separated list of parameters of procedure to be called prior full load.",
          "options": {
            "dependencies": {
              "full_load_mode": "defined_procedure"
            }
          },
          "propertyOrder": 301
        },
        "mode": {
          "type": "string",
          "description": "Helper dummy element to render sql_loader_options",
          "template": "{{full}}-{{incr}}",
          "watch": {
            "full": "loading_options.full_load_mode",
            "incr": "loading_options.incremental_load_mode"
          },
          "options": {
            "hidden": true
          }
        }
      }
    },
    "sql_loader_options": {
      "title": "SQL*Loader parameters",
      "type": "object",
      "propertyOrder": 155,
      "options": {
        "dependencies": {
          "loading_options.mode": [
            "undefined-sqlldr",
            "truncate_as_delete-undefined",
            "defined_procedure-undefined"
          ]
        }
      },
      "properties": {
        "rows": {
          "type": "number",
          "description": "Number of rows in conventional path bind array or between direct path data saves",
          "title": "rows",
          "default": 5000,
          "propertyOrder": 10
        },
        "bindsize": {
          "type": "number",
          "description": "size of conventional path bind array in bytes",
          "title": "bindsize",
          "default": 8000000,
          "propertyOrder": 10
        },
        "readsize": {
          "type": "number",
          "description": "size of read buffer",
          "title": "readsize",
          "default": 8000001,
          "propertyOrder": 10
        }
      }
    },
    "pre_run_script": {
      "type": "boolean",
      "title": "Run SQL Script in Oracle before the writer execution",
      "format": "checkbox",
      "propertyOrder": 180
    },
    "pre_run_scripts": {
      "title": "Pre run script",
      "type": "object",
      "propertyOrder": 185,
      "options": {
        "dependencies": {
          "pre_run_script": true
        }
      },
      "required": [
        "continue_on_failure",
        "script"
      ],
      "properties": {
        "continue_on_failure": {
          "type": "boolean",
          "format": "checkbox",
          "title": "Continue on failure",
          "default": false,
          "propertyOrder": 1
        },
        "script": {
          "type": "string",
          "title": "Script",
          "propertyOrder": 10
        }
      }
    },
    "post_run_script": {
      "type": "boolean",
      "title": "Run SQL Script in Oracle after the writer execution",
      "format": "checkbox",
      "propertyOrder": 185
    },
    "post_run_scripts": {
      "title": "Post run script",
      "type": "object",
      "propertyOrder": 186,
      "options": {
        "dependencies": {
          "post_run_script": true
        }
      },
      "required": [
        "continue_on_failure",
        "script"
      ],
      "properties": {
        "continue_on_failure": {
          "type": "boolean",
          "format": "checkbox",
          "title": "Continue on failure",
          "default": false,
          "propertyOrder": 1
        },
        "script": {
          "type": "string",
          "title": "Script",
          "propertyOrder": 10
        }
      }
    },
    "custom_column_mapping": {
      "type": "boolean",
      "title": "Custom Column Mapping",
      "format": "checkbox",
      "propertyOrder": 200
    },
    "columns": {
      "type": "array",
      "format": "table",
      "options": {
        "dependencies": {
          "custom_column_mapping": true
        }
      },
      "items": {
        "type": "object",
        "title": "Column",
        "required": [
          "source_name",
          "destination_name"
        ],
        "properties": {
          "source_name": {
            "type": "string",
            "title": "Source Column",
            "propertyOrder": 1
          },
          "destination_name": {
            "type": "string",
            "title": "Destination Column",
            "propertyOrder": 100
          }
        }
      },
      "title": "Columns",
      "propertyOrder": 600
    }
  }
}

================================================
File: /component_config/component_long_description.md
================================================
Oracle Writer long description

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: /component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: /component_config/logger
================================================
gelf

================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "2.4"
services:
  # for development purposes
  dev:
    build: .
    platform: linux/amd64
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    tty: true
    stdin_open: true
    environment:
      - KBC_DATADIR=./data
      - ORACLE_DB_HOST=oracle
      - ORACLE_DB_PORT=1521
      - ORACLE_DB_USER=system
      - ORACLE_DB_PASSWORD=oracle
      - ORACLE_DB_DATABASE=xe
    depends_on:
      - oracle
    links:
      - oracle
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh
  oracle:
    #    build: https://github.com/keboola/docker-oracle-xe-11g.git
    image: wnameless/oracle-xe-11g-r2
    ports:
      - "8080:8080"
      - "1521:1521"

================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /README.md
================================================
Oracle Writer
=============

Description

**Table of contents:**

[TOC]

Functionality notes
===================

Prerequisites
=============

Get the API token, register application, etc.

Features
========

| **Feature**             | **Note**                                      |
|-------------------------|-----------------------------------------------|
| Generic UI form         | Dynamic UI form                               |
| Row Based configuration | Allows structuring the configuration in rows. |
| oAuth                   | oAuth authentication enabled                  |
| Incremental loading     | Allows fetching data in new increments.       |
| Backfill mode           | Support for seamless backfill setup.          |
| Date range filter       | Specify date range.                           |

Supported endpoints
===================

If you need more endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/)

Configuration
=============

Param 1
-------

Param 2
-------

Output
======

List of tables, foreign keys, schema.

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone git@bitbucket.org:kds_consulting_team/kds-team.wr-oracle-custom.git kds-team.wr-oracle-custom
cd kds-team.wr-oracle-custom
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)


