Directory structure:
└── kds_consulting_team-kds-team.ex-prism-gemius/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   └── gemius/
    │       ├── __init__.py
    │       ├── prism_client.py
    │       └── prism_ex_service.py
    └── tests/
        ├── __init__.py
        ├── test_component.py
        └── sample-configs/
            └── default-config/
                ├── config.json
                └── in/
                    └── tables/
                        ├── campaigns.csv
                        └── campaigns.csv.manifest

================================================
FILE: README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola-python-util-lib](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/) library providing useful methods for KBC related tasks and boilerplate methods often needed by components, for more details see [documentation](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/README.md)


## Recommended component architecture
It is recommended to use the [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [KBCEnvHandler](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/docs/env_handler.md?at=master)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClientBase](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/docs/client_base.md?at=master)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters

**Process results using [result.py](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/docs/result.md?at=master) package**

- No need to use pandas
- Enables basic json response flattening
- Fixed headers, user values and more useful functionality


### Example component
This template contains functional example of an [extractor component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


##Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git update-index --chmod=+x deploy.sh
git update-index --chmod=+x scripts/update_dev_portal_properties.sh
git add .
git commit -m 'initial'
git push -u origin master
```


##Setting up the CI
 - Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
 - Set `KBC_DEVELOPERPORTAL_APP` env variable in Bitbucket (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `APP_IMAGE` - arbitrary tag name of the docker image e.g. “keboola-component”
 - `KBC_STORAGE_TOKEN` - in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

### Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

### Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:
 - `configuration_schema.json`
 - `short_description.md`
 - `long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

### Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
 
## Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        script:
          - export APP_IMAGE=$APP_IMAGE
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
#          - echo 'Pushing test image to repo. [tag=test]'
#          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#          - docker tag $APP_IMAGE:latest $REPOSITORY:test
#          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog



================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.7.2-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
Copyright (c) 2018 Keboola DS

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.0.zip#egg=kbc
mock
freezegun


================================================
FILE: component_config/component_long_description.md
================================================
Receive data that accurately and completely describe how Internet users use his site. Different aspects 
of web site use are measured using various metrics and indicators. The results 
are presented in the form of statistics ranging from simple statistics, such as the number of Page Views on a given section of 
the web site, to more complex analysis, like technical analysis of individual Internet user’s technical capabilities.

Extractor allows:
- Download daily [Sampled Reports]((https://prism.gemius.com/api/docs/#tag/sampledreports)) 
including [trends](https://prism.gemius.com/api/docs/#operation/getSampledReportTrend)
- Download specific [Monitoring Reports](https://prism.gemius.com/api/docs/#operation/getMonitoringReportTree)
- Get all available [project](https://prism.gemius.com/api/docs/#tag/projects) metadata


================================================
FILE: component_config/component_short_description.md
================================================
gemiusPrism is a special research service that provides data on Internet user behavior on company web sites.


================================================
FILE: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Gemius Prism extractor configuration",
  "required": [
    "project_ids",
    "#api_token",
    "sampled_reports",
    "monitoring_reports"
  ],
  "properties": {
    "project_ids": {
      "type": "array",
      "title": "Gemius Prism project IDs",
      "description": "Array of Prism project ids (to be found in URL https://prism.gemius.com/app/projects/show/desktop?projectId=xxx) If left empty data for all available projects are downloaded - Note that multiple project IDs might not work with other configuration than sampled reports..",
      "propertyOrder": 100,
      "items": {
        "type": "string",
        "title": "ID"
      }
    },
    "#api_token": {
      "type": "string",
      "title": "Gemius Prism API token",
      "format": "password",
      "propertyOrder": 200
    },
    "sampled_reports": {
      "type": "array",
      "propertyOrder": 380,
      "title": "Sampled Report",
      "description": "Sampled report table data for specified project and structure.",
      "maxItems": 1,
      "items": {
        "format": "grid",
        "type": "object",
        "title": "config",
        "required": [
          "from_date",
          "to_date",
          "backfill_mode",
          "structure_id",
          "vsender_type",
          "include_trends",
          "metrics",
          "custom_metrics",
          "node_filters"
        ],
        "properties": {
          "from_date": {
            "type": "string",
            "format": "string",
            "title": "From Date [including]",
            "description": "Date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc.",
            "propertyOrder": 300
          },
          "to_date": {
            "type": "string",
            "format": "string",
            "title": "To date [excluding]",
            "default": "today",
            "description": "Date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc.",
            "propertyOrder": 350
          },
          "backfill_mode": {
            "type": "object",
            "format": "grid",
            "required": [
              "backfill_enabled",
              "backfill_max_window"
            ],
            "title": "Backfill mode",
            "description": "If backfill mode is enabled, each consecutive run of the component will continue from the end of the last run period, until current date is reached. The size of the backfill window is used to specify the maximum chunk of the interval that will be used in one run.",
            "propertyOrder": 355,
            "properties": {
              "backfill_enabled": {
                "type": "number",
                "enum": [
                  0,
                  1
                ],
                "default": 0,
                "options": {
                  "enum_titles": [
                    "No",
                    "Yes"
                  ]
                }
              },
              "backfill_max_window": {
                "type": "number",
                "title": "Size of the backfill window in days",
                "description": "Set maximum number of days that will be used to split the reported interval and used in one call. "
              }
            }
          },
          "structure_id": {
            "type": "string",
            "title": "Structure ID",
            "description": "Gemius Prism structure ID [Try 1 if not sure]",
            "propertyOrder": 460
          },
          "vsender_type": {
            "enum": [
              "thirdpartycookie",
              "browserid"
            ],
            "type": "string",
            "title": "Vsender Type",
            "description": "",
            "default": "browserid",
            "propertyOrder": 470
          },
          "node_filters": {
            "type": "array",
            "description": "Required node path as found in URL structure. Without the end node - e.g. portal.cz/show/myshow",
            "propertyOrder": 500,
            "items": {
              "format": "grid",
              "type": "string",
              "title": "Node",
              "required": [
                "node"
              ],
              "properties": {
                "node": {
                  "type": "string",
                  "title": "Node",
                  "description": "Required node path as found in URL structure. Without the end node - e.g. portal.cz/show/myshow",
                  "propertyOrder": 1000
                }
              }
            },
            "title": "Required Nodes"
          },
          "include_trends": {
            "type": "number",
            "propertyOrder": 510,
            "enum": [
              0,
              1
            ],
            "default": 0,
            "options": {
              "enum_titles": [
                "No",
                "Yes"
              ]
            }
          },
          "metrics": {
            "type": "array",
            "items": {
              "format": "grid",
              "type": "object",
              "title": "Metric",
              "required": [
                "metric",
                "modificator"
              ],
              "properties": {
                "metric": {
                  "enum": [
                    "NoVt",
                    "TotTm",
                    "NoPV",
                    "NoBc",
                    "TotC",
                    "TotRv",
                    "NoEn",
                    "NoEx",
                    "NoC",
                    "NoVr",
                    "NetSV",
                    "StTm",
                    "AvVpVr",
                    "AvVIntr",
                    "AvVL",
                    "ROI",
                    "TotPr",
                    "AvCt",
                    "AvRv",
                    "CRt",
                    "VrTmAv",
                    "PVTmAv",
                    "VTmAv",
                    "BR",
                    "NoA",
                    "NoRpVr",
                    "EnR",
                    "ExR",
                    "AvNetSVVr",
                    "NoCVr",
                    "CVrRt",
                    "StNoVid",
                    "AvStNoViV",
                    "AvStTmVid",
                    "StRt",
                    "GrossSV",
                    "SpotSV",
                    "NetST",
                    "SpotST",
                    "CNoEv",
                    "CNoUVal",
                    "CNoPV",
                    "CNoA",
                    "CNoVt",
                    "CSuVal"
                  ],
                  "type": "string",
                  "title": "Metric",
                  "description": "Sampled report metric",
                  "propertyOrder": 1000
                },
                "modificator": {
                  "enum": [
                    "none",
                    "change",
                    "share",
                    "share_in_total",
                    "change_in_percentage"
                  ],
                  "type": "string",
                  "title": "Mdificator",
                  "description": "Metric modificator",
                  "default": "daily",
                  "propertyOrder": 2000
                }
              }
            },
            "title": "Metrics",
            "description": "Choose metrics to download or leave empty to get all supported metrics."
          },
          "custom_metrics": {
            "type": "array",
            "items": {
              "format": "grid",
              "type": "object",
              "title": "Custom Metric",
              "required": [
                "metricId",
                "modificator"
              ],
              "properties": {
                "metricId": {
                  "type": "number",
                  "title": "Custom Metric ID",
                  "description": "Custom metric ID.",
                  "default": 0,
                  "propertyOrder": 1000
                },
                "modificator": {
                  "enum": [
                    "none",
                    "change",
                    "share",
                    "share_in_total",
                    "change_in_percentage"
                  ],
                  "type": "string",
                  "title": "Modificator",
                  "description": "Metric modificator",
                  "default": "daily",
                  "propertyOrder": 2000
                }
              }
            },
            "title": "Custom metrics"
          }
        }
      }
    },
    "monitoring_reports": {
      "type": "array",
      "propertyOrder": 380,
      "title": "Monitoring Report",
      "description": "Data for all nodes definded in data structure for given period type.",
      "maxItems": 1,
      "items": {
        "format": "grid",
        "type": "object",
        "title": "config",
        "required": [
          "vsender_type",
          "period",
          "report_id"
        ],
        "properties": {
          "report_id": {
            "type": "string",
            "title": "Report ID",
            "description": "Gemius Prism Monitoring report id",
            "propertyOrder": 460
          },
          "vsender_type": {
            "enum": [
              "thirdpartycookie",
              "browserid"
            ],
            "type": "string",
            "title": "Vsender Type",
            "description": "",
            "default": "browserid",
            "propertyOrder": 470
          },
          "period": {
            "type": "string",
            "title": "Period",
            "propertyOrder": 475,
            "enum": [
              "CURRENT_DAY",
              "PREVIOUS_DAY",
              "CURRENT_WEEK",
              "PREVIOUS_WEEK",
              "CURRENT_MONTH",
              "PREVIOUS_MONTH"
            ],
            "default": "CURRENT_WEEK"
          }
        }
      }
    }
  }
}


================================================
FILE: component_config/configuration_description.md
================================================
Testing configuration description.


================================================
FILE: component_config/stack_parameters.json
================================================
{}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi


================================================
FILE: src/component.py
================================================
'''
Created on 15. 04. 2019

@author: esner
'''
import logging
import os
from datetime import datetime
from datetime import timedelta

import pytz
from kbc.env_handler import KBCEnvHandler
from kbc.result import KBCTableDef
from kbc.result import ResultWriter

from gemius.prism_ex_service import PrismExService

KEY_BACKFILL_WINDOW = 'backfill_max_window'

KEY_BACKFILL_ENABLED = 'backfill_enabled'

KEY_REPORT_ID = 'report_id'

KEY_PROJECT_IDS = 'project_ids'
KEY_API_TOKEN = '#api_token'

KEY_INCLUDE_TRENDS = 'include_trends'

KEY_SAMPLED_REPORT = 'sampled_reports'
KEY_OFFLINE_REPORTS = 'offline_reports'
KEY_MONITORING_REPORTS = 'monitoring_reports'

KEY_PERIOD = 'period'
KEY_PERIOD_FROM = 'from_date'
KEY_PERIOD_TO = 'to_date'

KEY_STRUCTURE_ID = 'structure_id'
KEY_VSENDER_TYPE = 'vsender_type'
KEY_METRICS = 'metrics'
KEY_CUSTOM_METRICS = 'custom_metrics'

KEY_BACKFILL_MODE = 'backfill_mode'

KEY_NODE_FILTERS = 'node_filters'

MANDATORY_PARS = [KEY_PROJECT_IDS, KEY_API_TOKEN]

APP_VERSION = '0.0.7'


class Component(KBCEnvHandler):

    def __init__(self, debug=False):
        KBCEnvHandler.__init__(self, MANDATORY_PARS)
        # override debug from config
        if self.cfg_params.get('debug'):
            debug = True

        self.set_default_logger('DEBUG' if debug else 'INFO')
        logging.info('Running version %s', APP_VERSION)
        logging.info('Loading configuration...')

        try:
            self.validate_config()
        except ValueError as e:
            logging.error(e)
            exit(1)

        # intialize instance parameteres
        self.prism_srv = PrismExService(self.cfg_params[KEY_API_TOKEN])

    def run(self, debug=False):
        '''
        Main execution code
        '''

        params = self.cfg_params

        # get projects
        all_projects = self._get_n_store_projects()

        if self.cfg_params.get(KEY_PROJECT_IDS, []):
            project_ids = self.cfg_params[KEY_PROJECT_IDS]
        else:
            project_ids = all_projects

        result_files = []
        # ####### iterate through all projects
        for project_id in project_ids:

            # get sampled reports
            if len(params.get(KEY_SAMPLED_REPORT, [])) > 0:
                # validate params
                self._validate_sample_report_params(params[KEY_SAMPLED_REPORT][0])

                periods, from_date, to_date = self._get_sampled_peroid(params[KEY_SAMPLED_REPORT][0])
                # collect results
                rs = self._get_sampled_reports(periods, from_date, to_date, params[KEY_SAMPLED_REPORT][0], project_id)
                result_files.extend(rs)
                # set state to last ran period
                if params[KEY_SAMPLED_REPORT][0].get(KEY_BACKFILL_MODE, {}).get(KEY_BACKFILL_ENABLED):
                    self.write_state_file({'last_period': {'start_date': str(from_date),
                                                           'end_date': str(to_date)}})

            # get offline reports
            if len(params.get(KEY_MONITORING_REPORTS, [])) > 0:
                rs = self._get_monitoring_reports(params[KEY_MONITORING_REPORTS][0], project_id)
                result_files.extend(rs)

            logging.info('Building manifest files..')
            self._process_results_sliced(result_files)

        logging.info('Extraction finished sucessfully!')

    def _process_results(self, res_files, output_bucket):
        for res in res_files:
            dest_bucket = 'in.c-kds-team-ex-prism-gemius-' + \
                          str(self.kbc_config_id)
            if output_bucket:
                suffix = '-' + output_bucket
            else:
                suffix = ''

            # build manifest
            self.configuration.write_table_manifest(
                file_name=res['full_path'],
                destination=dest_bucket + suffix + '.' + res['name'],
                primary_key=res['pkey'],
                incremental=True)

    def _process_results_sliced(self, res_files):
        res_sliced_folders = {}
        for file in res_files:
            res_sliced_folders.update({file['name']: file['pkey']})

        for folder in res_sliced_folders:
            self.create_sliced_tables(folder, res_sliced_folders[folder], True)

    def _get_backfill_period(self, interval, from_date):
        state = self.get_state_file()
        diff = timedelta(days=interval)

        if state and state.get('last_period'):
            last_end_date = datetime.strptime(
                state['last_period']['end_date'], '%Y-%m-%d %H:%M:%S.%f')

            start_date = last_end_date

        else:
            start_date = from_date
            last_end_date = start_date

        if (last_end_date.date() + diff) >= datetime.now(pytz.utc).date() + timedelta(days=1):
            end_date = datetime.now(pytz.utc).replace(tzinfo=None)
        else:
            end_date = last_end_date + diff
        return start_date, end_date

    def _get_sampled_reports(self, periods, from_date, to_date, params, project_id):
        """
        Gets and stores sampled reports results
        :param periods:
        :param from_date:
        :param to_date:
        :param params:
        :return:
        """
        report_req_param = {'structure_id': params[KEY_STRUCTURE_ID],
                            'node_filters': params.get(KEY_NODE_FILTERS),
                            'vsender_type': params[KEY_VSENDER_TYPE],
                            'output_folder_path': os.path.join(self.tables_out_path),
                            'metrics': params.get(KEY_METRICS),
                            'custom_metrics': params.get(KEY_CUSTOM_METRICS),
                            'include_trends': params.get(KEY_INCLUDE_TRENDS, False),
                            'project_id': project_id}

        logging.info('Retrieving reports for given period [%s - %s], with filter:%s',
                     str(from_date), str(to_date), str(params.get(KEY_NODE_FILTERS)))

        result_files = []
        for period in periods:
            report_req_param['start_date'] = period['start_date']
            report_req_param['end_date'] = period['end_date']

            result_files += self.prism_srv.get_n_save_sampled_report_node_tree(**report_req_param)
        return result_files

    def _get_n_store_projects(self):
        tb_def = KBCTableDef('projects', [], ['id'])
        p_writer = ResultWriter(self.tables_out_path, tb_def)

        logging.info('Getting all projects..')
        res = self.prism_srv.get_projects()
        p_writer.write_all(res)

        logging.info('Building project manifest files.')
        self.create_manifests(p_writer.collect_results())
        # return project ids
        return [p['id'] for p in res]

    def _get_offline_reports(self, param, last_state):
        pass

    def _get_monitoring_reports(self, params, project_id):
        return self.prism_srv.get_n_save_monitoring_report(self.tables_out_path, project_id, params[KEY_REPORT_ID],
                                                           params[KEY_VSENDER_TYPE],
                                                           params[KEY_PERIOD])

    def _get_sampled_peroid(self, params):
        backfill_mode = params.get(KEY_BACKFILL_MODE)
        if backfill_mode and not (
                params.get(KEY_PERIOD_FROM) and params.get(KEY_PERIOD_TO)):
            logging.error(
                'Period from and Period To paremeters must be defined when backfill mode is on!')
            exit(1)

        if not (params.get(KEY_PERIOD_FROM) or params.get(KEY_PERIOD_TO)):
            logging.error(
                'Period from and Period To paremeters must be defined for Sampled Repot mode is on!')
            exit(1)
        from_date, to_date = self.get_date_period_converted(params[KEY_PERIOD_FROM],
                                                            params[KEY_PERIOD_TO])
        # get periods either backfill or standard
        if params.get(KEY_BACKFILL_MODE) and params[KEY_BACKFILL_MODE][KEY_BACKFILL_ENABLED]:
            from_date, to_date = self._get_backfill_period(params[KEY_BACKFILL_MODE][KEY_BACKFILL_WINDOW], from_date)

        periods = self.split_dates_to_chunks(
            from_date, to_date, 0, '%Y-%m-%d')
        return periods, from_date, to_date

    def _validate_sample_report_params(self, params):
        try:
            self.validate_parameters(params, [KEY_VSENDER_TYPE, KEY_PERIOD_TO, KEY_PERIOD_FROM, KEY_STRUCTURE_ID],
                                     'Sampled Report params')
        except ValueError as e:
            logging.error(e)
            exit(1)


"""
        Main entrypoint
"""
if __name__ == "__main__":
    comp = Component()
    comp.run()



================================================
FILE: src/gemius/__init__.py
================================================
[Empty file]


================================================
FILE: src/gemius/prism_client.py
================================================
'''
Created on 15. 04. 2019

@author: esner
'''
import json

from kbc.client_base import HttpClientBase

DEFAULT_BASE = 'https://prism.gemius.com/api/projects'

VALID_METRICS = ["NoVt", "TotTm", "NoPV", "NoBc", "TotC", "TotRv", "NoEn",
                 "NoEx", "NoC", "NoVr", "NetSV", "StTm", "AvVpVr",
                 "AvVIntr", "AvVL", "ROI", "TotPr", "AvCt", "AvRv", "CRt",
                 "VrTmAv", "PVTmAv", "VTmAv", "BR", "NoA", "NoRpVr", "EnR", "ExR", "AvNetSVVr",
                 "NoCVr", "CVrRt", "StNoVid", "AvStNoViV", "AvStTmVid", "StRt",
                 "GrossSV", "SpotSV", "NetST", "SpotST", "CNoEv", "CNoUVal", "CNoPV", "CNoA", "CNoVt", "CSuVal"]
'''
Unsupported (not documented) metrics
"VLen", "NoNPvBc","NoNBc","BcV","VrTm","Vt","PVt","NoIntr","TotIntr","FD","FVRt","SVt","SCRt","SD",
"SDRt","SPVt","SAvT", "FDRt", "SEnt", "SC,"FC","FAvTeV", "SAvL","FCRt",
"AvStTmVr","StTmVid"
'''

VALID_MODIFICATORS = ["none", "change", "share", "share_in_total", "change_in_percentage"]

MAX_PAGE_SIZE = 500


class Client(HttpClientBase):

    def __init__(self, token, service_base_url=DEFAULT_BASE):
        base_url = service_base_url + '/'
        auth_header = {'Authorization': 'Bearer ' + token,
                       'Content-Type': 'application/json',
                       'Accept': 'application/json'}
        HttpClientBase.__init__(self, base_url=base_url, default_http_header=auth_header)

    def get_projects(self):
        res = self.get(DEFAULT_BASE)
        return res['accountProjects']

    def get_monitoring_report(self, project_id, report_id, period, vsender_type, metrics=None, custom_metrics=None):
        url = DEFAULT_BASE + '/' + str(project_id) + '/monitoringreports/' + str(report_id) + '/tree/' + period
        params = dict()
        if metrics:
            params['metrics'] = metrics
        if custom_metrics:
            params['customMetrics'] = custom_metrics
        params['vsenderType'] = vsender_type
        return self.get(url, params=params)

    def get_offline_report_list(self, project_id, report_id):
        """
        Return list of Offline Reports
        :param project_id:
        :param report_id:
        :return:
        """
        url = DEFAULT_BASE + '/' + str(project_id) + '/reports/' + str(report_id) + '/offlinereports'
        return self.get(url)

    def _get_offline_report(self, project_id, report_id, offline_report_id, nr_rows, page_nr):
        url = DEFAULT_BASE + '/' + str(project_id) + '/reports/' + str(report_id) + '/offlinereports/' + str(
            offline_report_id) + '/table'
        params = {
            "numberOfRows": nr_rows,
            "pageNumber": page_nr
        }

        return self.get(url, params=params)

    def get_sapled_report_all_pages(self, project_id, structure_id, period, segmentationNodeId, metrics,
                                    vsender_type=None,
                                    custom_metrics=None, page_size=MAX_PAGE_SIZE):
        '''

        Params:
        period -- {"startDate" : "2018-01-01",
                   "endDate" : "2018-01-01",
                   "periodFilter: "all"}
        pagination -- {"pageNumber": 1,
                        "rowsPerPage": <=500}
        metrics -- [{"metric" : ,
                     "modificator" : }]

        '''
        page_nr = 1
        pagination = {"pageNumber": page_nr,
                      "rowsPerPage": page_size}
        # get root node with header and main row info
        res = self._get_sampled_report(project_id, structure_id, period, segmentationNodeId, pagination, metrics,
                                       vsender_type,
                                       custom_metrics)
        res_data = self._parse_sampled_response(res)

        page_nr += 1
        pagination['pageNumber'] = page_nr
        hasNext = len(res['rows']) >= page_size
        # iterate through data pages
        while hasNext:
            res = self._get_sampled_report(project_id, structure_id, period, segmentationNodeId, pagination, metrics,
                                           vsender_type,
                                           custom_metrics)

            hasNext = len(res['rows']) != 0 and len(res['rows']) < page_size
            page_nr += 1
            pagination['pageNumber'] = page_nr
            res_data['data'] += res_data['data'] + res['rows']

        return res_data

    def _parse_sampled_response(self, response):
        parsed = {'mainRow': response['mainRow'],
                  'header': response['definitions'],
                  'data': response['rows']}

        return parsed

    def _get_sampled_report(self, project_id, structure_id, period, segmentationNodeId, pagination, metrics,
                            vsender_type=None,
                            custom_metrics=None):
        '''

        Params:
        period -- {"startDate" : "2018-01-01",
                   "endDate" : "2018-01-01",
                   "periodFilter: "all"}
        pagination -- {"pageNumber": 1,
                        "rowsPerPage": <=500}
        metrics -- [{"metric" : ,
                     "modificator" : }]

        '''
        url = self.base_url + project_id + '/structures/' + str(structure_id) + '/table'
        # url = 'http://ptsv2.com/t/10now-1539777619/post'
        data = {}
        data['period'] = period
        if segmentationNodeId:
            data['segmentationNodeId'] = segmentationNodeId
        if pagination:
            data['pagingAndSortingOptions'] = pagination
        if metrics:
            data['metrics'] = metrics
        if custom_metrics:
            data['customMetrics'] = custom_metrics
        if vsender_type:
            data['vsenderType'] = vsender_type

        return self.post(url=url, data=json.dumps(data))

    def get_sampled_report_trend(self, project_id, structure_id, period, segmentationNodeId, node_label, metric,
                                 period_unit='day', vsender_type=None,
                                 custom_metric=None):
        '''

        Params:
        period -- {"startDate" : "2018-01-01",
                   "endDate" : "2018-01-01",

        metrics -- [{"metric" : ,
                     "modificator" : }]

        '''
        url = self.base_url + project_id + '/structures/' + str(structure_id) + '/trend'
        # url = 'http://ptsv2.com/t/10now-1539777619/post'
        data = {}
        data['period'] = period
        data['periodUnit'] = period_unit
        if segmentationNodeId:
            data['segmentationNodeId'] = segmentationNodeId
        if metric:
            data['metric'] = metric
        if custom_metric:
            data['customMetric'] = custom_metric
        if vsender_type:
            data['vsenderType'] = vsender_type

        res = self.post(url=url, data=json.dumps(data))
        return self._parse_trend_data(res, metric, period_unit, segmentationNodeId, node_label)

    def _parse_trend_data(self, res, metric, period_unit, segmentationNodeId, node_label):
        for item in res['values']:
            item['node_id'] = segmentationNodeId
            item['period_unit'] = period_unit
            item['metric'] = metric['metric']
            item['metric_modificator'] = metric['modificator']
            item['node_label'] = node_label
        return res['values']



================================================
FILE: src/gemius/prism_ex_service.py
================================================
'''
Created on 15. 04. 2019

@author: esner
'''
import csv
import logging
import os

from gemius import prism_client
from gemius.prism_client import Client

SAMPLED_REPORT_FILENAME = 'sampled-report'
SAMPLED_REPORT_TREND_FILENAME = 'sampled-report-trend'

REPORT_FIXED_HEADER = ['start_date', 'end_date', 'url_path', 'nodeId']
TREND_FIXED_HEADER = ['timestamp', 'value', 'node_id', 'period_unit', 'metric', 'metric_modificator', 'node_label']
REPORT_PKEY = REPORT_FIXED_HEADER
REPORT_TREND_PKEY = ['timestamp', 'node_id', 'period_unit', 'metric', 'metric_modificator']


class PrismExService(Client):

    def __init__(self, token, service_base_url=prism_client.DEFAULT_BASE):
        Client.__init__(self, token,
                        service_base_url=service_base_url)

    def get_n_save_sampled_report_node_tree(self, project_id, structure_id, start_date, end_date, node_filters,
                                            vsender_type,
                                            output_folder_path, period_filter='all', metrics=None, custom_metrics=None,
                                            include_trends=False,
                                            period_unit='day'):

        if not metrics:
            metrics = self._get_all_metrics()

        periods_dict = {"startDate": start_date,
                        "endDate": end_date,
                        "periodFilter": period_filter}

        node_filter = self._prepare_node_filter(node_filters)

        # prepare request params
        node_args = {"structure_id": structure_id,
                     "period": periods_dict,
                     "segmentationNodeId": None,
                     "metrics": metrics,
                     "vsender_type": vsender_type,
                     "custom_metrics": custom_metrics,
                     "project_id": project_id}

        # get and process root nodes
        roots = self.get_sapled_report_all_pages(**node_args)
        root_data = self._filter_branch_level(
            roots.get('data'), node_filter.get(0))

        result_files = []
        table_dest_file = None
        # get data
        if root_data:
            # build header
            data_header = roots['header']
            report_header = REPORT_FIXED_HEADER + data_header
            # get fixed data
            fixed_data = [start_date, end_date]

            table_dest_path = os.path.join(
                output_folder_path, SAMPLED_REPORT_FILENAME, 'report' + start_date + '_' + end_date)
            trend_dest_path = os.path.join(
                output_folder_path, SAMPLED_REPORT_TREND_FILENAME, 'trend' + start_date + '_' + end_date)
            # create empty directories
            if not os.path.exists(os.path.dirname(table_dest_path)):
                os.makedirs(os.path.dirname(table_dest_path))
            if not os.path.exists(os.path.dirname(trend_dest_path)):
                os.makedirs(os.path.dirname(trend_dest_path))

            with open(table_dest_path, 'w+', newline='') as table_dest_file, open(trend_dest_path, 'w+',
                                                                                  newline='') as trend_dest_file:
                writer = csv.writer(table_dest_file, delimiter=',',
                                    quotechar='"', quoting=csv.QUOTE_MINIMAL)
                writer.writerow(report_header)
                # trend table
                trend_writer = csv.DictWriter(trend_dest_file, delimiter=',',
                                              quotechar='"', quoting=csv.QUOTE_MINIMAL, fieldnames=TREND_FIXED_HEADER)
                trend_writer.writeheader()

                # iterate through root nodes and write to csv
                for root_node in root_data:
                    node_set = dict()
                    node_set[root_node['nodeId']] = root_node['label']
                    data_records = []
                    url_nodes = []
                    node_args['segmentationNodeId'] = root_node['nodeId']
                    data_records = self._save_n_iterate_branch(
                        root_data, data_records, node_filter, 1, url_nodes, fixed_data, node_args, node_set)

                    # write table branch row
                    writer.writerows(data_records)

                    # ### get and process trend data for current branch nodes
                    if include_trends:
                        # extra argument taken by trend endpoint
                        trend_args = node_args.copy()
                        trend_args['period_unit'] = period_unit
                        self._get_n_write_all_trends(node_set, trend_args, trend_writer)

            # set result files
            result_files = [{'full_path': table_dest_path,
                             'name': SAMPLED_REPORT_FILENAME,
                             'pkey': REPORT_PKEY},
                            {'full_path': trend_dest_path,
                             'name': SAMPLED_REPORT_TREND_FILENAME,
                             'pkey': REPORT_TREND_PKEY}
                            ]

        else:
            logging.warning('No data for specified period [%s - %s] and filter [%s]',
                            start_date, end_date, ','.join(node_filters))

        return result_files

    def _save_n_iterate_branch(self, branch_data, data_records, node_filter, level, url_nodes, additional_data,
                               node_params, node_set):
        for node in branch_data:

            if node.get('values'):
                if len(url_nodes) != level - 1:
                    # traversed back to node, truncate category list
                    del url_nodes[level - 1:]

                url_nodes.append(node['label'])
                value = node['values']
                node_set[node['nodeId']] = '/'.join(url_nodes)
                # set next nodeid
                node_params['segmentationNodeId'] = node['nodeId']

                data = self.get_sapled_report_all_pages(**node_params)
                curr_lvl_data = self._filter_branch_level(
                    data['data'], node_filter.get(level))

                if curr_lvl_data:
                    self._save_n_iterate_branch(
                        curr_lvl_data, data_records, node_filter, level + 1, url_nodes, additional_data, node_params,
                        node_set)
                else:
                    data_records.append(
                        additional_data + ['/'.join(url_nodes)] + [data['mainRow']['nodeId']] + value)
            else:
                raise RuntimeError(
                    'Json structure has unexpected format! [{}]'.format(data))
        return data_records

    def _filter_branch_level(self, level_data, level_filter):
        if not level_filter:
            return level_data

        return [r for r in level_data if r['label'].replace('/', '') in level_filter]

    def _prepare_node_filter(self, node_filters):
        filter_levels = {}
        for f in node_filters:
            split = f.split('/')
            for i, s in enumerate(split):
                filter_levels[i] = filter_levels.get(i, []) + [s]
        return filter_levels

    def _get_all_metrics(self):
        return [{"metric": metric, "modificator": "none"} for metric in prism_client.VALID_METRICS]

    def _get_n_write_all_trends(self, node_set, node_args, writer):
        """
        Get trends data. Currently iterates only through all standard metrics
        :param node_set:
        :param node_args:
        :return:
        """
        metrics = node_args.pop('metrics')
        # unsupported yet
        node_args.pop('custom_metrics')

        for node in node_set:
            node_args['segmentationNodeId'] = node
            node_args['node_label'] = node_set[node]
            res = self._get_trends_for_metrics(node_args, metrics)
            writer.writerows(res)

    def _get_trends_for_metrics(self, node_args, metrics):

        result_data = []
        for metric in metrics:
            node_args['metric'] = metric
            res = self.get_sampled_report_trend(**node_args)
            result_data.extend(res)

        return result_data

    def get_n_save_monitoring_report(self, output_folder_path, project_id, report_id, vsender_type, period,
                                     metrics=None, cutom_metrics=None):
        res = self.get_monitoring_report(project_id, report_id, period, vsender_type, metrics, cutom_metrics)

        data = self.parse_monitored_report(res, period)
        if len(data) == 0:
            logging.warning('Report %s does not contain any data for period %s', report_id, period)
            return []
        header = data[0].keys()

        res_file_name = 'monitoring_report_' + report_id
        rep_dest_path = os.path.join(
            output_folder_path, res_file_name, 'mon_report_' + period + '_' + project_id)
        # create empty directories
        if not os.path.exists(os.path.dirname(rep_dest_path)):
            os.makedirs(os.path.dirname(rep_dest_path))

        # write data
        with open(rep_dest_path, 'w+', newline='') as table_dest_file:
            writer = csv.DictWriter(table_dest_file, delimiter=',',
                                    quotechar='"', quoting=csv.QUOTE_MINIMAL, fieldnames=header)
            writer.writeheader()
            writer.writerows(data)

        result_files = [{'full_path': rep_dest_path,
                         'name': res_file_name,
                         'pkey': ['guaranteed_tu', 'period', 'node_id']}]

        return result_files

    def parse_monitored_report(self, resp, period):
        end_timestamp = resp['guaranteedTU']
        root_node_id = resp['rootNodeId']
        header = resp['definitions']
        items = resp['values']
        for item in items:
            item['guaranteed_tu'] = end_timestamp
            item['root_node_id'] = root_node_id
            item['period'] = period
            item['node_id'] = item.pop('id')
            # insert values
            for i, val in enumerate(item['values']):
                item[header[i]] = val
            # remove values object
            item.pop('values')
        return items



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: tests/sample-configs/default-config/config.json
================================================
{
	"storage": {
		"input": {
			"files": [],
			"tables": [{
					"source": "out.c-Eventbrite.new_contacts",
					"destination": "contacts.csv",
					"limit": 50,
					"columns": [],
					"where_values": [],
					"where_operator": "eq"
				}, {
					"source": "out.c-Eventbrite.new_events",
					"destination": "campaigns.csv",
					"limit": 50,
					"columns": [],
					"where_values": [],
					"where_operator": "eq"
				}, {
					"source": "out.c-Eventbrite.event_attendees_distinct",
					"destination": "campaignRelations.csv",
					"limit": 50,
					"columns": [],
					"where_values": [],
					"where_operator": "eq"
				}
			]
		},
		"output": {
			"files": [],
			"tables": []
		}
	},
	"parameters": {
		"project_id": "1234",
		"#api_token": "XXX",
		"period_from": "2010-09-01",
		"period_to": "2010-10-10",
		"relative_period": "",
		"structure_id": "1",
		"vsender_type": "browserid",
		"node_filters": ["novaplus.nova.cz/porad/ulice"],
		"metrics": [],
		"custom_metrics": [],
		"backfill_mode" : 1
	},
	"image_parameters": {},
	"authorization": {
		"oauth_api": {
			"id": "OAUTH_API_ID",
			"credentials": {
				"id": "main",
				"authorizedFor": "Myself",
				"creator": {
					"id": "1234",
					"description": "me@keboola.com"
				},
				"created": "2016-01-31 00:13:30",
				"#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
				"oauthVersion": "2.0",
				"appKey": "000000004C184A49",
				"#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
			}
		}
	}
}



================================================
FILE: tests/sample-configs/default-config/in/tables/campaigns.csv
================================================
"id","name"
"223","Streaming time share"
"224","Stream views per user"
"23","Page views share"
"200","Stream views"
"13","Page view duration [s]"
"214","Streaming time composition (relative)"
"201","Streaming time [s]"
"220","Stream views share"
"98","Page views composition (relative)"
"230","Stream visits per user"
"202","Stream visits"
"18","Page views composition"
"215","Stream view duration [s]"
"9","Page views per user"
"176","Page views (site-centric)"
"205","Stream views composition"
"227","Streaming time per user [s]"
"8","Page views"
"208","Stream views composition (relative)"
"211","Streaming time composition"
"54","Max audience duplication (%)"



================================================
FILE: tests/sample-configs/default-config/in/tables/campaigns.csv.manifest
================================================
{
    "id": "out.c-Eventbrite.new_events",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/out.c-Eventbrite.new_events",
    "name": "new_events",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

