Directory structure:
└── kds_consulting_team-kds-team.wr-exasol/
    ├── .travis.yml
    ├── README_template.md
    ├── flake8.cfg
    ├── deploy.sh
    ├── docker-compose.yml
    ├── change_log.md
    ├── src/
    │   ├── component.py
    │   └── exasol/
    │       ├── __init__.py
    │       └── client.py
    ├── bitbucket-pipelines.yml
    ├── tests/
    │   ├── test_component.py
    │   ├── __init__.py
    │   ├── functional/
    │   │   ├── incremetal-upload/
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           └── tables/
    │   │   │   │               └── exasol_test_incremental_upload.csv
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               ├── state.json
    │   │   │               └── tables/
    │   │   │                   └── exasol_test_incremental_upload.csv
    │   │   └── full-upload/
    │   │       ├── expected/
    │   │       │   └── data/
    │   │       │       └── out/
    │   │       │           └── tables/
    │   │       │               └── exasol_test_full_upload.csv
    │   │       └── source/
    │   │           └── data/
    │   │               ├── config.json
    │   │               └── in/
    │   │                   ├── state.json
    │   │                   └── tables/
    │   │                       └── exasol_test_full_upload.csv
    │   └── test_functional.py
    ├── component_config/
    │   ├── logger
    │   ├── component_long_description.md
    │   ├── configuration_description.md
    │   ├── component_short_description.md
    │   ├── loggerConfiguration.json
    │   ├── configSchema.json
    │   ├── configRowSchema.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── tables/
    │       │   │   ├── test.csv
    │       │   │   └── test.csv.manifest
    │       │   └── files/
    │       │       └── order1.xml
    │       └── out/
    │           ├── tables/
    │           │   └── test.csv
    │           └── files/
    │               └── order1.xml
    ├── scripts/
    │   ├── update_dev_portal_properties.sh
    │   ├── run_kbc_tests.ps1
    │   ├── run.bat
    │   ├── build_n_run.ps1
    │   └── build_n_test.sh
    ├── requirements.txt
    ├── Dockerfile
    ├── LICENSE.md
    └── README.md

================================================
File: /.travis.yml
================================================
sudo: false

services:
  - docker

jobs:
  include:
    - stage: tests
      script:
        - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
        - docker run $APP_IMAGE python -m unittest discover
      # push test image to ECR - uncomment for testing before deployment
      #  - docker pull quay.io/keboola/developer-portal-cli-v2:latest
      #  - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
      #  - docker tag $APP_IMAGE:latest $REPOSITORY:test
      #  - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
      #  - docker push $REPOSITORY:test
      #  - docker pull quay.io/keboola/syrup-cli:latest
    - stage: deploy_dev_portal
      if: branch = master
      script: "./scripts/update_dev_portal_properties.sh"

before_script:
  - export APP_IMAGE=keboola-component
  - docker -v
  - docker build -t $APP_IMAGE .
  - chmod +x ./scripts/update_dev_portal_properties.sh
  - chmod +x ./deploy.sh

after_success:
  - docker images

deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh
  on:
    tags: true
    branch: master


================================================
File: /README_template.md
================================================
KBC Component
=============

Description

**Table of contents:**

[TOC]

Functionality notes
===================

Prerequisites
=============

Get the API token, register application, etc.

Features
========

| **Feature**             | **Note**                                      |
|-------------------------|-----------------------------------------------|
| Generic UI form         | Dynamic UI form                               |
| Row Based configuration | Allows structuring the configuration in rows. |
| oAuth                   | oAuth authentication enabled                  |
| Incremental loading     | Allows fetching data in new increments.       |
| Backfill mode           | Support for seamless backfill setup.          |
| Date range filter       | Specify date range.                           |

Supported endpoints
===================

If you need more endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/)

Configuration
=============

Param 1
-------

Param 2
-------

Output
======

List of tables, foreign keys, schema.

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the docker-compose file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)


================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog


================================================
File: /src/component.py
================================================
import logging
from exasol import ExasolClient, ExasolClientError
from typing import List, Any, Dict
from keboola.component.dao import TableDefinition
from keboola.component.base import ComponentBase, UserException
import os

KEY_DATABASE_PARAMS = "db"
KEY_EXASOL_USERNAME = "user"
KEY_EXASOL_TOKEN = '#refresh_token'
KEY_EXASOL_PASSWORD = "#password"
KEY_SCHEMA_NAME = "schema"
KEY_HOST = "host"
KEY_PORT = "port"
KEY_PRIMARY_KEY = "primaryKey"
KEY_DEBUG = "debug"

KEY_CASE_SENSITIVE = "caseSensitive"
KEY_TABLES = "tables"
KEY_DB_TABLE_NAME = "dbName"
KEY_INCREMENTAL = "incremental"
KEY_COLUMNS = "items"

REQUIRED_PARAMETERS = [KEY_DATABASE_PARAMS, KEY_DB_TABLE_NAME]
REQUIRED_IMAGE_PARS = []


class Component(ComponentBase):
    def __init__(self) -> None:
        super().__init__(required_parameters=REQUIRED_PARAMETERS,
                         required_image_parameters=REQUIRED_IMAGE_PARS)
        self.exasol_client = None

    def init_client(self) -> ExasolClient:
        try:
            params = self.configuration.parameters
            dubug = params.get(KEY_DEBUG, True)
            db_params = params.get(KEY_DATABASE_PARAMS)
            exasol_user = db_params.get(KEY_EXASOL_USERNAME)
            os.environ["USER"] = exasol_user
            refresh_token = db_params.get(KEY_EXASOL_TOKEN)
            password = db_params.get(KEY_EXASOL_PASSWORD)
            schema = db_params.get(KEY_SCHEMA_NAME)
            host = db_params.get(KEY_HOST)
            port = db_params.get(KEY_PORT)

            params = self.configuration.parameters
            case_sensitive = True
            if params.get(KEY_CASE_SENSITIVE, "Case sensitive") == "Non case sensitive":
                case_sensitive = False

            exasol_client = ExasolClient(exasol_user, schema, host, port, dubug, password=password,
                                         token=refresh_token, case_sensitive=case_sensitive)
            exasol_client.login()
            return exasol_client
        except ExasolClientError as exasol_exc:
            raise UserException(exasol_exc) from exasol_exc

    def test_connection(self):
        self.init_client()

    def run(self) -> None:
        self.exasol_client = self.init_client()

        params = self.configuration.parameters
        input_table = self.get_input_table()
        input_columns = params.get(KEY_COLUMNS)
        table_name = params.get(KEY_DB_TABLE_NAME)
        incremental = params.get(KEY_INCREMENTAL)
        primary_keys = params.get(KEY_PRIMARY_KEY, [])

        self.validate_primary_key(primary_keys, input_columns, incremental)
        primary_key = primary_keys[0] if 0 < len(primary_keys) else None

        self.create_table_if_not_exist(table_name, input_columns, primary_key)

        if incremental:
            self.write_incremental(table_name, input_table, primary_key, input_columns)
        else:
            self.write_full(table_name, input_table, primary_key, input_columns)

    def get_input_table(self) -> TableDefinition:
        input_tables = self.get_input_tables_definitions()
        if len(input_tables) == 0:
            raise UserException("No input table added. Please add an input table")
        elif len(input_tables) > 1:
            raise UserException("Too many input tables added. Please add only one input table")
        return input_tables[0]

    @staticmethod
    def validate_columns(input_columns: List[Dict], existing_table_columns: List[str]) -> None:
        existing_table_columns = [existing_table_column.lower() for existing_table_column in existing_table_columns]
        input_columns = [input_column["name"].lower() for input_column in input_columns]
        error_messages = []
        if len(input_columns) != len(existing_table_columns):
            error_messages.append(f"The amount of columns in the input table ({len(input_columns)}) does not match the "
                                  f"amount of columns in the existing table in Exasol ({len(existing_table_columns)})")
        for input_column in input_columns:
            if input_column not in existing_table_columns:
                error_messages.append(
                    f"Column {input_column} not in existing table in Exasol")
        for existing_table_column in existing_table_columns:
            if existing_table_column not in input_columns:
                error_messages.append(
                    f"Column {existing_table_column} is missing in the input table")
        if error_messages:
            raise UserException(". ".join(error_messages))

    @staticmethod
    def validate_primary_key(primary_keys: List, input_columns: List[Dict], incremental: bool) -> None:
        if len(primary_keys) > 1:
            raise UserException("Only one primary key can be set")
        primary_key = primary_keys[0] if 0 < len(primary_keys) else None
        if incremental and not primary_key:
            raise UserException("To use incremental, please set a primary key")
        primary_key_in_columns = False
        for input_column in input_columns:
            if primary_key == input_column["dbName"]:
                primary_key_in_columns = True
        if primary_key and not primary_key_in_columns and incremental:
            raise UserException("Primary key is not in the columns of the table")

    def create_table_if_not_exist(self, table_name, input_columns, primary_key):
        logging.info(f"Checking if table {table_name} exists")
        table_exists = self._check_if_table_exists(table_name)

        if not table_exists:
            logging.info(f"Table {table_name} does not exists, creating it")
            self._create_table(table_name, input_columns, primary_key)

    def write_incremental(self, table_name: str, input_table: TableDefinition, primary_key: str,
                          input_columns: List[Dict]) -> None:

        logging.info("Uploading using incremental update")
        existing_table_columns = self._get_exasol_columns(table_name)
        self.validate_columns(input_columns, existing_table_columns)
        staging_table_name = self.exasol_client.create_staging_table_like(table_name)
        self._upload_file_to_table(input_table.full_path, staging_table_name)
        self._upsert(table_name, staging_table_name, primary_key, input_columns)
        self._drop_table(staging_table_name)

    def write_full(self, table_name: str, input_table: TableDefinition, primary_key: str,
                   input_columns: List[Dict]) -> None:
        logging.info("Uploading using full load")
        staging_table_name = self.exasol_client.generate_staging_table_name(table_name)
        self._create_table(staging_table_name, input_columns, primary_key)
        self._upload_file_to_table(input_table.full_path, staging_table_name)
        self._swap_tables(table_name, staging_table_name)

    def _drop_table(self, table_name: str) -> None:
        try:
            self.exasol_client.drop_table(table_name)
        except ExasolClientError as exasol_error:
            raise UserException(exasol_error) from exasol_error

    def _upsert(self, table_name: str, staging_table_name: str, primary_key: str,
                input_columns: List[Dict[str, Any]]) -> None:
        try:
            self.exasol_client.upsert(table_name, staging_table_name, primary_key, input_columns)
        except ExasolClientError as exasol_error:
            raise UserException(exasol_error) from exasol_error

    def _upload_file_to_table(self, input_table_path: str, staging_table_name: str) -> None:
        try:
            self.exasol_client.upload_file_to_table(input_table_path, staging_table_name)
        except ExasolClientError as exasol_error:
            raise UserException(exasol_error) from exasol_error

    def _swap_tables(self, table_name: str, staging_table_name: str) -> None:
        try:
            self.exasol_client.swap_tables(table_name, staging_table_name)
        except ExasolClientError as exasol_error:
            raise UserException(exasol_error) from exasol_error

    def _check_if_table_exists(self, table_name: str) -> bool:
        try:
            return self.exasol_client.check_if_table_exists(table_name)
        except ExasolClientError as exasol_error:
            raise UserException(exasol_error) from exasol_error

    def _create_table(self, table_name, input_columns, primary_key):
        try:
            self.exasol_client.create_table(table_name, input_columns, primary_key)
        except ExasolClientError as exasol_error:
            raise UserException(exasol_error) from exasol_error

    def _get_exasol_columns(self, table_name: str) -> List[str]:
        try:
            return self.exasol_client.get_table_columns(table_name)
        except ExasolClientError as exasol_error:
            raise UserException(exasol_error) from exasol_error


if __name__ == "__main__":
    try:
        comp = Component()
        # comp.test_connection()
        comp.run()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: /src/exasol/__init__.py
================================================
from .client import ExasolClient, ExasolClientError  # noqa


================================================
File: /src/exasol/client.py
================================================
import pyexasol
from random import randint
import logging
import csv
import operator
from pyexasol.exceptions import ExaConnectionDsnError, ExaRequestError, ExaConnectionFailedError, ExaQueryError
from pyexasol.statement import ExaStatement
from typing import Any
from typing import Dict
from typing import List

TABLE_DESC_COLUMN_NAME_POSITION = 3


class ExasolClientError(Exception):
    pass


class ExasolClient:
    def __init__(self, user: str, schema: str, host: str, port: str, debug: bool, password=None,
                 token=None, case_sensitive=True) -> None:
        self.logger = logging.getLogger("exasol_logger")
        if debug:
            self.logger.setLevel(logging.DEBUG)
        self.user = user
        self.token = token
        self.password = password
        self.schema = schema
        self.host = host
        self.port = port
        self.dsn = ":".join([host, port])
        self.client = None
        self.d_qoute = "\""
        self.s_qoute = "\'"
        if not case_sensitive:
            self.d_qoute = ""
            self.s_qoute = ""
        self.case_sensitive = case_sensitive

    def set_case_sensitive(self, case_sensitive):
        if case_sensitive:
            self.d_qoute = "\""
        elif not case_sensitive:
            self.d_qoute = ""

    def login(self) -> None:
        try:
            if self.token:
                self.client = pyexasol.connect(dsn=self.dsn,
                                               user=self.user,
                                               refresh_token=self.token,
                                               protocol_version=3,
                                               schema=self.schema,
                                               encryption=True,
                                               quote_ident=self.case_sensitive)
            elif self.password:
                self.client = pyexasol.connect(dsn=self.dsn,
                                               user=self.user,
                                               password=self.password,
                                               protocol_version=3,
                                               schema=self.schema,
                                               encryption=True,
                                               quote_ident=self.case_sensitive)
            else:
                raise ExasolClientError(
                    "You must specify a Personal Access Token or Username and Password to log into Exasol")
        except ExaConnectionDsnError as connection_exc:
            raise ExasolClientError(connection_exc.message) from connection_exc
        except ExaConnectionFailedError as connection_exc:
            raise ExasolClientError(f"{connection_exc.message}. Please recheck port number and that your "
                                    f"Exasol database/cluster is on") from connection_exc
        except ExaRequestError as auth_error:
            raise ExasolClientError(
                f"{auth_error.message}. Please recheck Personal Access token validity and schema") from auth_error

    def execute_query(self, query: str) -> ExaStatement:
        try:
            return self.client.execute(query)
        except ExaQueryError as query_error:
            raise ExasolClientError(f"{query_error.message}. {query_error.query}")

    def check_if_table_exists(self, table_name: str) -> bool:
        table_exists = False
        if not self.case_sensitive:
            table_name = table_name.upper()
        query = f"""
        SELECT * FROM EXA_ALL_TABLES WHERE TABLE_SCHEMA = '{self.schema}' 
        and TABLE_NAME = '{table_name}' """  # noqa
        self.logger.debug(f"running query {query}")
        results = self.execute_query(query)
        results = results.fetchall()
        if results:
            table_exists = True
        return table_exists

    def get_tables_in_schema(self) -> List:
        query = f"""
        SELECT * FROM EXA_ALL_TABLES WHERE TABLE_SCHEMA = '{self.schema}'
        """
        self.logger.debug(f"running query {query}")
        results = self.execute_query(query)
        results = results.fetchall()
        return results

    def get_table_columns(self, table_name: str) -> List[str]:
        if not self.case_sensitive:
            table_name = table_name.upper()
        query = f"""
        SELECT * FROM EXA_ALL_COLUMNS WHERE COLUMN_SCHEMA = '{self.schema}' 
        AND COLUMN_TABLE =  '{table_name}'
        """  # noqa
        self.logger.debug(f"running query {query}")
        results = self.execute_query(query)
        results = results.fetchall()
        columns = []
        for result in results:
            columns.append(result[TABLE_DESC_COLUMN_NAME_POSITION].strip())
        return columns

    def create_table(self, table_name: str, columns: List[Dict], primary_key: str = "") -> None:
        columns_string = self.get_columns_string(columns, primary_key)
        query = f"""
        CREATE TABLE {self.d_qoute}{table_name}{self.d_qoute} ({columns_string})
        """
        self.logger.debug(f"running query {query}")
        self.execute_query(query)

    def upload_file_to_table(self, file_path: str, table_name: str) -> None:
        logging.info("Uploading data to staging table")
        try:
            self.client.import_from_file(file_path, table_name, import_params={'skip': 1})
            stmt = self.client.last_statement()
            print(f'IMPORTED {stmt.rowcount()} rows in {stmt.execution_time}s')
        except pyexasol.exceptions.ExaQueryError as exc:
            raise ExasolClientError(exc.message)

    def download_table(self, table_name: str, file_name: str, order_column=None):
        self.client.export_to_file(file_name, table_name, export_params={'with_column_names': False})
        if order_column is not None:
            self.order_file(file_name, order_column)

    def order_file(self, file_name, order_column):
        with open(file_name, newline='') as csvfile:
            rdr = csv.reader(csvfile)
            li = sorted(rdr, key=operator.itemgetter(order_column), reverse=True)
        with open(file_name, 'w') as csvout:
            wrtr = csv.writer(csvout)
            wrtr.writerows(li)

    def get_columns_string(self, input_columns: List[Dict], primary_key: str) -> str:
        column_strings = []
        for input_column in input_columns:
            not_null_str = "" if input_column["nullable"] else "NOT NULL"
            pkey_str = "PRIMARY KEY" if input_column["name"] == primary_key else ""
            size_str = f"({input_column['size']})" if input_column["type"] in ["VARCHAR", "CHAR", "DECIMAL"] else ""
            column_str = f"""
                {self.d_qoute}{input_column['name']}{self.d_qoute} {input_column["type"]} {size_str} {not_null_str} {pkey_str}
                """  # noqa
            column_strings.append(column_str)
        return ", ".join(column_strings)

    def swap_tables(self, live_table_name: str, staging_table_name: str) -> None:
        temp_table_name = "_".join([staging_table_name, "swap_table"])

        rename_live_to_temp = f"""
        RENAME TABLE {self.d_qoute}{live_table_name}{self.d_qoute} TO {self.d_qoute}{temp_table_name}{self.d_qoute};
        """
        self.logger.debug(f"running query {rename_live_to_temp}")
        self.execute_query(rename_live_to_temp)

        rename_staging_to_live = f"RENAME TABLE {self.d_qoute}{staging_table_name}{self.d_qoute} " \
                                 f"To {self.d_qoute}{live_table_name}{self.d_qoute}"
        self.logger.debug(f"running query {rename_staging_to_live}")
        self.execute_query(rename_staging_to_live)

        self.drop_table(temp_table_name)

    def drop_table(self, table_name: str) -> None:
        drop_query = f"DROP TABLE {self.d_qoute}{table_name}{self.d_qoute};"
        self.logger.debug(f"running query {drop_query}")
        self.execute_query(drop_query)

    def create_staging_table_like(self, live_table_name: str) -> str:
        staging_table_name = self.generate_staging_table_name(live_table_name)
        query = f"CREATE TABLE {self.d_qoute}{staging_table_name}{self.d_qoute}" \
                f" LIKE {self.d_qoute}{live_table_name}{self.d_qoute};"
        self.logger.debug(f"running query {query}")
        self.execute_query(query)
        return staging_table_name

    @staticmethod
    def random_int_string(n: int) -> str:
        range_start = 10 ** (n - 1)
        range_end = (10 ** n) - 1
        randint(range_start, range_end)
        return str(randint(range_start, range_end))

    def upsert(self, live_table_name: str, staging_table_name: str, primary_key: str,
               columns: List[Dict[str, Any]]) -> None:
        merge_column_string = self.get_merge_column_string(columns, primary_key, "live", "staging")
        insert_values_string = self.get_insert_values_string(columns, "staging")
        merge_query = f"""  MERGE INTO {self.d_qoute}{live_table_name}{self.d_qoute} as live
                        USING {self.d_qoute}{staging_table_name}{self.d_qoute} as staging
                        ON live.{self.d_qoute}{primary_key}{self.d_qoute} = staging.{self.d_qoute}{primary_key}{self.d_qoute}
                        WHEN MATCHED THEN UPDATE SET {merge_column_string}
                        WHEN NOT MATCHED THEN INSERT VALUES ({insert_values_string});
                       """  # noqa
        self.logger.debug(f"running query {merge_query}")
        self.execute_query(merge_query)

    def get_merge_column_string(self, input_columns: List[Dict[str, Any]], primary_key: str, live_table_name: str,
                                stage_table_name: str) -> str:
        column_strings = []
        for input_column in input_columns:
            if input_column["name"] != primary_key:
                col_str = f"{live_table_name}.{self.d_qoute}{input_column['name']}{self.d_qoute} = " \
                          f"{stage_table_name}.{self.d_qoute}{input_column['name']}{self.d_qoute} "
                column_strings.append(col_str)
        return ", ".join(column_strings)

    def get_insert_values_string(self, input_columns: List[Dict[str, Any]], stage_table_name: str) -> str:
        column_strings = []
        for input_column in input_columns:
            col_str = f"{stage_table_name}.{self.d_qoute}{input_column['name']}{self.d_qoute}"
            column_strings.append(col_str)
        return ", ".join(column_strings)

    def insert_from_staging_table(self, table_name: str, staging_table_name: str) -> None:
        query = f"INSERT INTO {self.d_qoute}{table_name}{self.d_qoute} " \
                f"SELECT * FROM {self.d_qoute}{staging_table_name}{self.d_qoute}"
        self.logger.debug(f"running query {query}")
        self.execute_query(query)

    def generate_staging_table_name(self, live_table_name):
        rand_int = self.random_int_string(10)
        return "_".join(["staging", live_table_name, rand_int])


================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run -e EXASOL_CLOUD_SCHEMA -e EXASOL_CLOUD_PORT -e EXASOL_CLOUD_HOST -e EXASOL_CLOUD_REFRESH_TOKEN -e EXASOL_CLOUD_USER $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run -e EXASOL_CLOUD_SCHEMA -e EXASOL_CLOUD_PORT -e EXASOL_CLOUD_HOST -e EXASOL_CLOUD_REFRESH_TOKEN -e EXASOL_CLOUD_USER $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run -e EXASOL_CLOUD_SCHEMA -e EXASOL_CLOUD_PORT -e EXASOL_CLOUD_HOST -e EXASOL_CLOUD_REFRESH_TOKEN -e EXASOL_CLOUD_USER $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: /tests/functional/incremetal-upload/expected/data/out/tables/exasol_test_incremental_upload.csv
================================================
Monique Clark,veronicabarnett@gmail.com,"1656 Wendy Crossing Port Charles, IA 61886",Stuart Ltd
Shari Hernandez,sdelgado@yahoo.com,"89565 Spears Court Apt. 692 Rothside, TN 55822",Rodriguez-Lucas
Michael Singh,sarahmatthews@hotmail.com,"6415 Alvarez Estates Suite 554 Shawmouth, AR 65828",Hendrix PLC
Patricia Miller,robert27@hotmail.com,"0830 Webster Mill Charlesside, MA 85214","Jones, Ferguson and Bright"
Melissa Hernandez,millercarol@yahoo.coma,"073 Brandon Trace Lake Kellyview, MA 38800",Davis-Buchanan
Rebecca Contreras,michael68@gmail.com,"1471 King Crest Johnsonberg, NV 11661",Peterson-Stokes
Wayne Martin DVM,masoncolleen@hotmail.com,"648 Kimberly Passage Suite 180 Petersonfurt, NY 79093",Mora-Stephens
Devin Morrison,martindiaz@gmail.com,"9767 Jessica Track Apt. 436 Autumnstad, SC 03144",Walker LLC
Holly Nash,laura65@hotmail.com,"7326 Reed Fields Apt. 822 Combsburgh, CO 75920",Morgan-Beasley
Kyle Ramos,jclarke@gmail.com,"95163 Rowe Mill Apt. 832 East Carrie, NJ 86584",Harding Group
Anita Travis,hendersonteresa@yahoo.com,"159 Nicole Haven Apt. 458 Tapiaton, ND 36812",Jackson-Baxter
Craig Gonzalez,ericsavage@hotmail.com,"0897 Hudson Garden Fordville, VT 14114",Farrell-Tran
Scott Coleman,elizabethwatkins@yahoo.com,"9076 Juarez Park Apt. 677 Mariahshire, NC 24659",Brown-Anderson
Tammy Sanford,elizabeth20@hotmail.com,"533 Burnett Isle Andrewberg, DE 20957",Watkins-Horton
Timothy Kennedy,dgilbert@hotmail.com,"236 Mary Passage West Tammy, MS 75445",Schwartz PLC
Carrie Walsh,boylejoe@hotmail.com,"3219 Donna Via Apt. 842 South Nancyton, MI 87056",Rich LLC


================================================
File: /tests/functional/incremetal-upload/source/data/config.json
================================================
{
  "parameters": {
    "db": {
    },
    "items": [
      {
        "name": "name",
        "dbName": "name",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      },
      {
        "name": "email",
        "dbName": "email",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      },
      {
        "name": "address",
        "dbName": "address",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      },
      {
        "name": "company",
        "dbName": "company",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      }
    ],
    "dbName": "exasol_test_incremental_upload",
    "incremental": true,
    "caseSensitive": "Case sensitive",
    "primaryKey" : ["name"]

  }
}



================================================
File: /tests/functional/incremetal-upload/source/data/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /tests/functional/incremetal-upload/source/data/in/tables/exasol_test_incremental_upload.csv
================================================
"name","email","address","company"
"Melissa Hernandez","millercarol@yahoo.coma","073 Brandon Trace Lake Kellyview, MA 38800","Davis-Buchanan"
"Shari Hernandez","sdelgado@yahoo.com","89565 Spears Court Apt. 692 Rothside, TN 55822","Rodriguez-Lucas"
"Scott Coleman","elizabethwatkins@yahoo.com","9076 Juarez Park Apt. 677 Mariahshire, NC 24659","Brown-Anderson"
"Anita Travis","hendersonteresa@yahoo.com","159 Nicole Haven Apt. 458 Tapiaton, ND 36812","Jackson-Baxter"
"Wayne Martin DVM","masoncolleen@hotmail.com","648 Kimberly Passage Suite 180 Petersonfurt, NY 79093","Mora-Stephens"
"Monique Clark","veronicabarnett@gmail.com","1656 Wendy Crossing Port Charles, IA 61886","Stuart Ltd"
"Devin Morrison","martindiaz@gmail.com","9767 Jessica Track Apt. 436 Autumnstad, SC 03144","Walker LLC"
"Holly Nash","laura65@hotmail.com","7326 Reed Fields Apt. 822 Combsburgh, CO 75920","Morgan-Beasley"
"Kyle Ramos","jclarke@gmail.com","95163 Rowe Mill Apt. 832 East Carrie, NJ 86584","Harding Group"
"Timothy Kennedy","dgilbert@hotmail.com","236 Mary Passage West Tammy, MS 75445","Schwartz PLC"
"Carrie Walsh","boylejoe@hotmail.com","3219 Donna Via Apt. 842 South Nancyton, MI 87056","Rich LLC"
"Michael Singh","sarahmatthews@hotmail.com","6415 Alvarez Estates Suite 554 Shawmouth, AR 65828","Hendrix PLC"
"Tammy Sanford","elizabeth20@hotmail.com","533 Burnett Isle Andrewberg, DE 20957","Watkins-Horton"
"Patricia Miller","robert27@hotmail.com","0830 Webster Mill Charlesside, MA 85214","Jones, Ferguson and Bright"
"Rebecca Contreras","michael68@gmail.com","1471 King Crest Johnsonberg, NV 11661","Peterson-Stokes"
"Craig Gonzalez","ericsavage@hotmail.com","0897 Hudson Garden Fordville, VT 14114","Farrell-Tran"


================================================
File: /tests/functional/full-upload/expected/data/out/tables/exasol_test_full_upload.csv
================================================
Monique Clark,veronicabarnett@gmail.com,"1656 Wendy Crossing Port Charles, IA 61886",Stuart Ltd
Shari Hernandez,sdelgado@yahoo.com,"89565 Spears Court Apt. 692 Rothside, TN 55822",Rodriguez-Lucas
Michael Singh,sarahmatthews@hotmail.com,"6415 Alvarez Estates Suite 554 Shawmouth, AR 65828",Hendrix PLC
Patricia Miller,robert27@hotmail.com,"0830 Webster Mill Charlesside, MA 85214","Jones, Ferguson and Bright"
Melissa Hernandez,millercarol@yahoo.coma,"073 Brandon Trace Lake Kellyview, MA 38800",Davis-Buchanan
Rebecca Contreras,michael68@gmail.com,"1471 King Crest Johnsonberg, NV 11661",Peterson-Stokes
Wayne Martin DVM,masoncolleen@hotmail.com,"648 Kimberly Passage Suite 180 Petersonfurt, NY 79093",Mora-Stephens
Devin Morrison,martindiaz@gmail.com,"9767 Jessica Track Apt. 436 Autumnstad, SC 03144",Walker LLC
Holly Nash,laura65@hotmail.com,"7326 Reed Fields Apt. 822 Combsburgh, CO 75920",Morgan-Beasley
Kyle Ramos,jclarke@gmail.com,"95163 Rowe Mill Apt. 832 East Carrie, NJ 86584",Harding Group
Anita Travis,hendersonteresa@yahoo.com,"159 Nicole Haven Apt. 458 Tapiaton, ND 36812",Jackson-Baxter
Craig Gonzalez,ericsavage@hotmail.com,"0897 Hudson Garden Fordville, VT 14114",Farrell-Tran
Scott Coleman,elizabethwatkins@yahoo.com,"9076 Juarez Park Apt. 677 Mariahshire, NC 24659",Brown-Anderson
Tammy Sanford,elizabeth20@hotmail.com,"533 Burnett Isle Andrewberg, DE 20957",Watkins-Horton
Timothy Kennedy,dgilbert@hotmail.com,"236 Mary Passage West Tammy, MS 75445",Schwartz PLC
Carrie Walsh,boylejoe@hotmail.com,"3219 Donna Via Apt. 842 South Nancyton, MI 87056",Rich LLC


================================================
File: /tests/functional/full-upload/source/data/config.json
================================================
{
  "parameters": {
    "db": {
    },
    "items": [
      {
        "name": "name",
        "dbName": "name",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      },
      {
        "name": "email",
        "dbName": "email",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      },
      {
        "name": "address",
        "dbName": "address",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      },
      {
        "name": "company",
        "dbName": "company",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      }
    ],
    "dbName": "exasol_test_full_upload",
    "incremental": false,
    "caseSensitive": "Case sensitive"

  }
}



================================================
File: /tests/functional/full-upload/source/data/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /tests/functional/full-upload/source/data/in/tables/exasol_test_full_upload.csv
================================================
"name","email","address","company"
"Melissa Hernandez","millercarol@yahoo.coma","073 Brandon Trace Lake Kellyview, MA 38800","Davis-Buchanan"
"Shari Hernandez","sdelgado@yahoo.com","89565 Spears Court Apt. 692 Rothside, TN 55822","Rodriguez-Lucas"
"Scott Coleman","elizabethwatkins@yahoo.com","9076 Juarez Park Apt. 677 Mariahshire, NC 24659","Brown-Anderson"
"Anita Travis","hendersonteresa@yahoo.com","159 Nicole Haven Apt. 458 Tapiaton, ND 36812","Jackson-Baxter"
"Wayne Martin DVM","masoncolleen@hotmail.com","648 Kimberly Passage Suite 180 Petersonfurt, NY 79093","Mora-Stephens"
"Monique Clark","veronicabarnett@gmail.com","1656 Wendy Crossing Port Charles, IA 61886","Stuart Ltd"
"Devin Morrison","martindiaz@gmail.com","9767 Jessica Track Apt. 436 Autumnstad, SC 03144","Walker LLC"
"Holly Nash","laura65@hotmail.com","7326 Reed Fields Apt. 822 Combsburgh, CO 75920","Morgan-Beasley"
"Kyle Ramos","jclarke@gmail.com","95163 Rowe Mill Apt. 832 East Carrie, NJ 86584","Harding Group"
"Timothy Kennedy","dgilbert@hotmail.com","236 Mary Passage West Tammy, MS 75445","Schwartz PLC"
"Carrie Walsh","boylejoe@hotmail.com","3219 Donna Via Apt. 842 South Nancyton, MI 87056","Rich LLC"
"Michael Singh","sarahmatthews@hotmail.com","6415 Alvarez Estates Suite 554 Shawmouth, AR 65828","Hendrix PLC"
"Tammy Sanford","elizabeth20@hotmail.com","533 Burnett Isle Andrewberg, DE 20957","Watkins-Horton"
"Patricia Miller","robert27@hotmail.com","0830 Webster Mill Charlesside, MA 85214","Jones, Ferguson and Bright"
"Rebecca Contreras","michael68@gmail.com","1471 King Crest Johnsonberg, NV 11661","Peterson-Stokes"
"Craig Gonzalez","ericsavage@hotmail.com","0897 Hudson Garden Fordville, VT 14114","Farrell-Tran"


================================================
File: /tests/test_functional.py
================================================
import json
import os
from pathlib import Path
import unittest
from datadirtest import DataDirTester, TestDataDir
from keboola.component import CommonInterface

from src.exasol import ExasolClient


class ExasolWriterIntegrationTest(TestDataDir):
    def run_component(self):
        config_dict = self.ci.configuration.config_data
        super().run_component()
        if config_dict["parameters"]["incremental"]:
            super().run_component()
        self.download_result_tables()

    def get_client(self):
        config_dict = self.ci.configuration.config_data

        case_sensitive = True
        if config_dict['parameters']['caseSensitive'] == "Non case sensitive":
            case_sensitive = False

        exasol_client = ExasolClient(config_dict["parameters"]['db']['user'],
                                     config_dict['parameters']['db']['schema'],
                                     config_dict['parameters']['db']['host'],
                                     config_dict['parameters']['db']['port'],
                                     True,
                                     token=config_dict['parameters']['db']['#refresh_token'],
                                     case_sensitive=case_sensitive)
        exasol_client.login()
        return exasol_client

    def download_result_tables(self):
        config_dict = self.ci.configuration.config_data

        exasol_client = self.get_client()

        out_tables_path = self.ci.tables_out_path
        if not os.path.exists(out_tables_path):
            os.makedirs(out_tables_path)

        table_name = config_dict['parameters']['dbName']
        out_table_name = f"{table_name}.csv"
        out_table = os.path.join(out_tables_path, out_table_name)
        exasol_client.download_table(table_name, out_table, order_column=1)

    def _inject_exasol_credentials(self):
        config_dict = self.ci.configuration.config_data
        user = os.environ['EXASOL_CLOUD_USER']
        schema = os.environ['EXASOL_CLOUD_SCHEMA']
        host = os.environ['EXASOL_CLOUD_HOST']
        port = os.environ['EXASOL_CLOUD_PORT']
        refresh_token = os.environ['EXASOL_CLOUD_REFRESH_TOKEN']

        config_dict["parameters"]['db']['user'] = user
        config_dict['parameters']['db']['schema'] = schema
        config_dict['parameters']['db']['host'] = host
        config_dict['parameters']['db']['port'] = port
        config_dict['parameters']['db']['#refresh_token'] = refresh_token

        with open(os.path.join(self.ci.data_folder_path, 'config.json'), 'w+') as cfg_out:
            json.dump(config_dict, cfg_out)

    def setUp(self):
        """
        Executes before test.
        """
        super().setUp()
        source_out_files = os.path.join(self.data_dir, "source", "data", "out", "files")
        expected_out_files = os.path.join(self.data_dir, "expected", "data", "out", "files")
        source_out_tables = os.path.join(self.data_dir, "source", "data", "out", "tables")
        source_in_files = os.path.join(self.data_dir, "source", "data", "in", "files")
        Path(source_out_files).mkdir(parents=True, exist_ok=True)
        Path(source_in_files).mkdir(parents=True, exist_ok=True)
        Path(source_out_tables).mkdir(parents=True, exist_ok=True)
        Path(expected_out_files).mkdir(parents=True, exist_ok=True)
        # just because I'm lazy
        self.ci = CommonInterface(data_folder_path=os.path.join(self.data_dir, "source", "data"))
        # load secrets from environment
        self._inject_exasol_credentials()

    def tearDown(self) -> None:
        """
        Executes after test
        """
        exasol_client = self.get_client()
        tables_in_schema = exasol_client.get_tables_in_schema()
        tables_in_schema = [table_data[1] for table_data in tables_in_schema]
        for table in tables_in_schema:
            exasol_client.drop_table(table)


class TestComponent(unittest.TestCase):

    def test_functional(self):
        functional_tests = DataDirTester(test_data_dir_class=ExasolWriterIntegrationTest)
        functional_tests.run()


if __name__ == "__main__":
    unittest.main()


================================================
File: /component_config/logger
================================================
gelf

================================================
File: /component_config/component_long_description.md
================================================
This component enables you to write data into an exasol schema. If tables exist you can overwrite them, append to them,
or update them. If tables do not exist they can be created

================================================
File: /component_config/component_short_description.md
================================================
EXASOL is a high-performance, in-memory, MPP database specifically designed for analytics

================================================
File: /component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: /component_config/configSchema.json
================================================
{
  "title": "Authorization settings",
  "type": "object",
  "properties": {
    "db": {
      "type": "object",
      "title": "Exasol Authorization",
      "propertyOrder": 1,
      "required": [
        "user",
        "host",
        "port",
        "schema"
      ],
      "properties": {
        "user": {
          "type": "string",
          "title": "Username",
          "propertyOrder": 10
        },
        "#refresh_token": {
          "type": "string",
          "title": "Personal Access Token",
          "description": "Enter if you are accessing SaaS version of Exasol",
          "propertyOrder": 20
        },
        "#password": {
          "type": "string",
          "title": "Password",
          "description": "Enter if you are accessing non-SaaS version of Exasol",
          "propertyOrder": 25
        },
        "host": {
          "type": "string",
          "title": "Host",
          "description": "Host link eg. xyz.xyz.exasol.com ",
          "propertyOrder": 30
        },
        "port": {
          "type": "string",
          "title": "Port",
          "default" : "8563",
          "propertyOrder": 110
        },
        "schema": {
          "type": "string",
          "title": "Schema",
          "description": "Name of schema in exasol",
          "propertyOrder": 120
        }
      }
    }
  }
}

================================================
File: /component_config/configRowSchema.json
================================================
{
  "title": "Table settings",
  "type": "object",
  "required": [
    "dbName"
  ],
  "properties": {
    "dbName": {
      "type": "string",
      "title": "Table name",
      "description": "Name of table in Exasol",
      "propertyOrder": 10
    },
    "primaryKey": {
      "type": "string",
      "title": "Primary key",
      "description": "Primary key for table in Exasol, only one is allowed",
      "propertyOrder": 12
    },
    "caseSensitive": {
            "type": "string",
            "title": "Case sensitive",
            "enum": [
              "Case sensitive",
              "Non case sensitive"
            ],
            "default":  "Case sensitive",
            "propertyOrder": 60
          },
    "items": {
      "type": "array",
      "format": "grid",
      "title": "Columns",
      "propertyOrder": 30,
      "uniqueItems": true,
      "items": {
        "type": "object",
        "title": "Column",
        "properties": {
          "name": {
            "type": "string",
            "title": "Column name",
            "propertyOrder": 40
          },
          "dbName": {
            "type": "string",
            "title": "Exasol column name",
            "description": "Name of column in Exasol table",
            "propertyOrder": 50
          },
          "type": {
            "type": "string",
            "title": "Data type",
            "enum": [
              "BIGINT",
              "BOOLEAN",
              "DATE",
              "DOUBLE",
              "DOUBLE PRECISION",
              "FLOAT",
              "INT",
              "INTEGER",
              "TIMESTAMP",
              "VARCHAR(256)"
            ],
            "default": "VARCHAR(256)",
            "propertyOrder": 60
          },
          "nullable": {
            "type": "boolean",
            "format": "checkbox",
            "title": "Nullable",
            "propertyOrder": 70
          }
        }
      }
    },
    "loading_options": {
      "type": "object",
      "title": "Loading Options",
      "propertyOrder": 190,
      "format": "grid",
      "required": [
        "load_type"
      ],
      "properties": {
        "load_type": {
          "type": "string",
          "enum": [
            "Full Load",
            "Incremental Update"
          ],
          "default": " Full Load",
          "title": "Load type",
          "description": "If set to Incremental update, duplicate rows will be replaced and new rows will be inserted. Full load overwrites the destination table each time",
          "propertyOrder": 200
        }
      }
    }
  }
}

================================================
File: /component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: /component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /requirements.txt
================================================
keboola.component==1.1.0
keboola.utils
keboola.http-client
mock~=4.0.3
freezegun~=1.1.0
pyexasol~=0.20.0
pyopenssl~=20.0.1
https://bitbucket.org/kds_consulting_team/datadirtest/get/1.5.1.zip#egg=datadirtest


================================================
File: /Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /README.md
================================================
# Exasol Writer

EXASOL is a high-performance, in-memory, MPP database specifically designed for analytics.

This component enables you to write data into an exasol schema. If tables exist you can overwrite them, append to them,
or update them. If tables do not exist they can be created

**Table of contents:**

[TOC]

# Authorization

- Username (user) - [REQ]
- Personal Access Token (#refresh_token) - [REQ] "Password" that can be gotten from the 3. step (copy login) in "Connect
  via tools"
- Host (host) - [REQ] Host link eg. xyz.xyz.exasol.com
- Port (port) - [REQ] port of exasol host, default is 8563
- Schema (schema) - [REQ] Name of schema in exasol

# Row config

- Table name (dbName) - [REQ] Name of table in Exasol
- Primary key (primaryKey) - [OPT] Primary key for table in Exasol, only one is allowed
- Columns (items) - [OPT] Dictionary with the following elements:
    - Column name (name) - [OPT] name of column in Keboola
    - Firebolt column name (dbName) - [OPT] Name of column in Exasol table
    - Data type (type) - [OPT] type of data VARCHAR(256), INTEGER, etc.
    - Nullable (nullable) - [OPT] False if not nullable
- Loading Options (loading_options) - [OPT] If set to Incremental update, duplicate rows will be replaced and new rows
  will be inserted. Full load overwrites the destination table each time. Append mode will be append to a table (No
  checks are made for duplicate data)

# Sample configuration

```json
{
  "parameters": {
    "db": {
      "user": "user@mail.com",
      "#refresh_token": "YOUR_PAT_HERE",
      "host": "xxxxx.xxx.exasol.com",
      "port": "8563",
      "schema": "MYSCHEMA"
    },
    "items": [
      {
        "name": "first_name",
        "dbName": "first_name",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      },
      {
        "name": "last_name",
        "dbName": "last_name",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      },
      {
        "name": "message",
        "dbName": "message",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      },
      {
        "name": "pay",
        "dbName": "pay",
        "type": "INTEGER",
        "nullable": false,
        "size": ""
      },
      {
        "name": "extra",
        "dbName": "extra",
        "type": "VARCHAR(256)",
        "nullable": false,
        "size": ""
      }
    ],
    "dbName": "mytable",
    "loading_options": {
      "load_type": "Incremental Update"
    },
    "primaryKey": "first_name"
  }
}


```

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in the docker-compose
file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)

