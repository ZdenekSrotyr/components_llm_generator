Directory structure:
└── kds_consulting_team-kds-team.app-snowflake-query-runner/
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    ├── .travis.yml
    ├── change_log.md
    ├── Dockerfile
    ├── flake8.cfg
    ├── src/
    │   └── component.py
    ├── LICENSE.md
    ├── requirements.txt
    ├── bitbucket-pipelines.yml
    ├── component_config/
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── stack_parameters.json
    │   ├── configuration_description.md
    │   ├── configRowSchema.json
    │   ├── component_long_description.md
    │   └── sample-config/
    │       ├── in/
    │       │   └── state.json
    │       └── config.json
    ├── deploy.sh
    ├── docker-compose.yml
    ├── scripts/
    │   ├── build_n_test.sh
    │   └── update_dev_portal_properties.sh
    └── README.md

================================================
File: /tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
File: /tests/test_component.py
================================================
import unittest

from component import Component


class TestComponent(unittest.TestCase):

    def test_split_sql_queries_empty_string_returns_empty_list(self):
        sql_string = ""
        expected = []
        result = Component.split_sql_queries(sql_string)
        self.assertEqual(result, expected)

    def test_split_sql_queries_single_query(self):
        sql_string = "SELECT * FROM table1"
        expected = ["SELECT * FROM table1"]
        result = Component.split_sql_queries(sql_string)
        self.assertEqual(result, expected)

    def test_split_sql_queries_multiple_queries(self):
        sql_string = "SELECT * FROM table1; SELECT * FROM table2; SELECT * FROM table3;"
        expected = ["SELECT * FROM table1;", "SELECT * FROM table2;", "SELECT * FROM table3;"]
        result = Component.split_sql_queries(sql_string)
        self.assertEqual(result, expected)

    def test_split_sql_queries_with_semicolon_in_quotes(self):
        sql_string = "SELECT * FROM table1; SELECT ';'; SELECT * FROM table3;"
        expected = ["SELECT * FROM table1;", "SELECT ';';", "SELECT * FROM table3;"]
        result = Component.split_sql_queries(sql_string)
        self.assertEqual(result, expected)

    def test_split_sql_queries_with_empty_queries(self):
        sql_string = "SELECT * FROM table1; SELECT * FROM table2;"
        expected = ["SELECT * FROM table1;", "SELECT * FROM table2;"]
        result = Component.split_sql_queries(sql_string)
        self.assertEqual(result, expected)

    def test_split_sql_queries_with_comments(self):
        sql_string = '''/*
 Some ;comment; here
 */

// some inline comment; here
SELECT * FROM table1; SELECT * FROM table2;
'''
        expected = ['/*\n Some ;comment; here\n */\n\n// some inline comment; here\nSELECT * FROM table1;',
                    'SELECT * FROM table2;']
        result = Component.split_sql_queries(sql_string)
        self.assertEqual(result, expected)


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /.travis.yml
================================================
sudo: false

services:
  - docker

jobs:
  include:
    - stage: tests
      script:
        - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
        - docker run $APP_IMAGE python -m unittest discover
      # push test image to ECR - uncomment for testing before deployment
      #  - docker pull quay.io/keboola/developer-portal-cli-v2:latest
      #  - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
      #  - docker tag $APP_IMAGE:latest $REPOSITORY:test
      #  - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
      #  - docker push $REPOSITORY:test
      #  - docker pull quay.io/keboola/syrup-cli:latest
    - stage: deploy_dev_portal
      if: branch = master
      script: "./scripts/update_dev_portal_properties.sh"

before_script:
  - export APP_IMAGE=keboola-component
  - docker -v
  - docker build -t $APP_IMAGE .
  - chmod +x ./scripts/update_dev_portal_properties.sh
  - chmod +x ./deploy.sh

after_success:
  - docker images

deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh
  on:
    tags: true
    branch: master


================================================
File: /change_log.md
================================================
**0.0.1**
First testing version of the application.

================================================
File: /Dockerfile
================================================
FROM python:3.12-slim
ENV PYTHONIOENCODING utf-8

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential
RUN apt-get install -y git
RUN pip install flake8

COPY requirements.txt ./code/requirements.txt
COPY flake8.cfg ./code/flake8.cfg

RUN pip install -r /code/requirements.txt

COPY ./src ./code/src/
COPY ./tests ./code/tests/

WORKDIR /code/

CMD ["python", "-u", "/code/src/component.py"]



================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /src/component.py
================================================
import logging
import os
import re
import sys
from dataclasses import dataclass

import snowflake.connector
from keboola.component.base import ComponentBase, sync_action
from keboola.component.exceptions import UserException
from keboola.component.sync_actions import ValidationResult, MessageType

# Snowflake database settings
KEY_ACCT = 'account'
KEY_USER = 'username'
KEY_PASS = '#password'
KEY_WRHS = 'warehouse'

# Historize Tables
KEY_DB = 'database'
KEY_SCHEMA = 'schema'
KEY_QUERY = 'query'

MANDATORY_PARAMETERS = [KEY_ACCT, KEY_USER, KEY_PASS, KEY_WRHS, KEY_QUERY]

KEY_RUNID = 'KBC_RUNID'

# configuration variables
KEY_DEBUG = 'debug'

# list of mandatory parameters => if some is missing, component will fail with readable message on initialization.

APP_VERSION = '0.0.3'
sys.tracebacklimit = 0


@dataclass
class SnowflakeCredentials:
    host: str
    warehouse: str
    username: str
    password: str
    database: str
    schema: str
    cursor: snowflake.connector.cursor = snowflake.connector.DictCursor


@dataclass
class KBCEnvironment:
    run_id: str


@dataclass
class Parameters:
    query: str


class Component(ComponentBase):

    def __init__(self):
        super().__init__()
        logging.getLogger('snowflake.connector').setLevel(logging.WARNING)

        self.kbc = KBCEnvironment(os.environ.get(KEY_RUNID, '@@@123'))
        self.snfk = SnowflakeCredentials(self.configuration.parameters[KEY_ACCT],
                                         self.configuration.parameters[KEY_WRHS],
                                         self.configuration.parameters[KEY_USER],
                                         self.configuration.parameters[KEY_PASS],
                                         self.configuration.parameters.get(KEY_DB)
                                         if self.configuration.parameters.get(KEY_DB) != '' else None,
                                         self.configuration.parameters.get(KEY_SCHEMA)
                                         if self.configuration.parameters.get(KEY_SCHEMA) != '' else None,
                                         snowflake.connector.DictCursor)

    def _log_query(self, query):
        logging.info(f"Running query: {query}")

    def create_snfk_connection(self):

        self.snfk_conn = snowflake.connector.connect(user=self.snfk.username, password=self.snfk.password,
                                                     account=self.snfk.host,
                                                     database=self.snfk.database,
                                                     warehouse=self.snfk.warehouse,
                                                     session_parameters={
                                                         'QUERY_TAG': f'{{"runId":"{self.kbc.run_id}"}}'
                                                     })

    @staticmethod
    def split_sql_queries(sql_string):
        # taken from Keboola TR UI
        pattern = (r"\s*((?:'[^'\\]*(?:\\.[^'\\]*)*'|\"[^\"\\]*(?:\\.[^\"\\]*)*\"|\$\$(?:.|\n|\r)*?\$\$|\/\*[^*]*\*+"
                   r"(?:[^*/][^*]*\*+)*\/|#.*|--.*|\/\/.*|[^\"';#])+(?:;|$))")
        queries = re.split(pattern, sql_string)
        queries = [query.strip() for query in queries if query.strip()]
        return queries

    @sync_action("testConnection")
    def test_connection(self):
        try:
            self.create_snfk_connection()
            self.snfk_conn.close()
            return ValidationResult("Connection successful.", MessageType.SUCCESS)

        except snowflake.connector.errors.Error as e:
            return ValidationResult(f"Connection failed: {e}", MessageType.WARNING)

        except Exception as e:
            return ValidationResult(f"Unexpected error: {e}", MessageType.WARNING)

    def run(self):
        try:
            # validation of mandatory parameters. Produces ValueError
            self.validate_configuration_parameters(MANDATORY_PARAMETERS)
            self.parameters = Parameters(self.configuration.parameters.get(KEY_QUERY))
        except ValueError as e:
            raise UserException(e)

        self.create_snfk_connection()

        with self.snfk_conn:
            with self.snfk_conn.cursor(self.snfk.cursor) as snfk_cursor:
                if self.snfk.schema is not None:
                    use_schema_sql = f'USE SCHEMA "{self.snfk.schema}";'
                    self._log_query(use_schema_sql)
                    snfk_cursor.execute(use_schema_sql)

                for query in self.split_sql_queries(self.parameters.query):
                    query = query.strip()
                    if query == '':
                        continue
                    self._log_query(query)
                    snfk_cursor.execute(query)


if __name__ == "__main__":
    try:
        comp = Component()
        comp.execute_action()
    except (UserException, snowflake.connector.errors.DatabaseError) as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /requirements.txt
================================================
keboola.component==1.6.8
snowflake-connector-python==3.12.1

================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG

  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            # - echo 'Pushing test image to repo. [tag=test]'
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
File: /component_config/component_short_description.md
================================================
Snowflake offers a cloud-based data storage and analytics service known as 'data warehouse-as-a-service,' allowing users to store and analyze data using cloud-based hardware and software.

================================================
File: /component_config/configSchema.json
================================================
{
    "title": "Snowflake Connection",
    "type": "object",
    "required": [
        "account",
        "username",
        "#password",
        "warehouse"
    ],
    "properties": {
        "account": {
            "title": "Account",
            "type": "string",
            "description": "Account identifier of the Snowflake instance. This is a prefix of your Snowflake instance URL, e.g., <strong>keboola.eu-central-1</strong>.</br>See <a href='https://docs.snowflake.com/en/user-guide/connecting.html#your-snowflake-account-name'>the documentation for more information</a>.",
            "propertyOrder": 100
        },
        "username": {
            "title": "Username",
            "type": "string",
            "description": "Snowflake user that will be used to run queries",
            "propertyOrder": 200
        },
        "#password": {
            "title": "Password",
            "type": "string",
            "format": "password",
            "description": "Password authenticating the Snowflake user",
            "propertyOrder": 300
        },
        "warehouse": {
            "title": "Warehouse",
            "type": "string",
            "description": "Name of the Snowflake warehouse to be used",
            "propertyOrder": 400
        },
        "test_connection": {
            "type": "button",
            "format": "sync-action",
            "options": {
                "async": {
                    "label": "TEST CONNECTION",
                    "action": "testConnection"
                }
            },
            "propertyOrder": 500
        }
    }
}


================================================
File: /component_config/stack_parameters.json
================================================
{}

================================================
File: /component_config/configuration_description.md
================================================
## Configuration-Specific Parameters

The following parameters need to be specified to connect successfully to a Snowflake instance:

- `account`: Snowflake account name, [see Snowflake documentation for more information](https://docs.snowflake.com/en/user-guide/connecting.html#your-snowflake-account-name)
- `username`: Snowflake user that will be used to log in to the instance
- `#password`: Password for the specified Snowflake user
- `warehouse`: Name of the Snowflake warehouse where queries will run

## Row-Specific Parameters

Each row allows to specify a query to be run, as well as a database and schema to be used. Parameters are:

- `database`: Name of the Snowflake database to use
- `schema`: Snowflake schema where the query will be run
- `query`: Query to execute

================================================
File: /component_config/configRowSchema.json
================================================
{
    "title": "Parameters",
    "type": "object",
    "required": [
        "database",
        "schema",
        "query"
    ],
    "properties": {
        "database": {
            "title": "Database",
            "type": "string",
            "description": "Snowflake database where the query will be executed",
            "propertyOrder": 100
        },
        "schema": {
            "title": "Schema",
            "description": "Snowflake schema where the query will be executed",
            "type": "string",
            "propertyOrder": 200
        },
        "query": {
            "title": "Query",
            "description": "Query to execute",
            "type": "string",
            "format": "editor",
            "options": {
                "editor": {
                    "mode": "text/x-sql"
                }
            },
            "propertyOrder": 300
        }
    }
}

================================================
File: /component_config/component_long_description.md
================================================
# Snowflake Query Runner

This application enables users to run any query against their Snowflake warehouse straight from Keboola.

It is row-based, meaning it accepts configuration-specific parameters used by each row run: account, username, #password, and warehouse. Each row allows you to specify a query to be run, as well as a database and schema to be used.

================================================
File: /component_config/sample-config/in/state.json
================================================
{}

================================================
File: /component_config/sample-config/config.json
================================================
{
  "parameters": {
    "account": "keboola",
    "warehouse": "KEBOOLA_WH",
    "username": "snowflake_user",
    "#password": "p@ssw0rd",
    "query": "SELECT * FROM PRODUCT LIMIT 1;",
    "schema": "in.c-shipmonk_binlog",
    "database": "MY_DB",
    "debug": false
  }
}

================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "asigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "asigning travis tag"
	export TAG="$TRAVIS_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
      - KBC_STACKID=connection.keboola.com
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi

================================================
File: /README.md
================================================
# Snowflake Query Runner

Snowflake offers a cloud-based data storage and analytics service known as "data warehouse-as-a-service", allowing users to store and analyze data using cloud-based hardware and software.

This application enables you to run any query against your Snowflake warehouse directly from the Keboola platform.

**Table of contents:**  
  
[TOC]

# Configuration

The application is row-based, and as such, accepts configuration-specific parameters used by each row run.

## Configuration-Specific Parameters

The following parameters need to be specified to connect successfully to a Snowflake instance:

- `account`: Snowflake account name [(see Snowflake documentation for more information)](https://docs.snowflake.com/en/user-guide/connecting.html#your-snowflake-account-name)
- `username`: Snowflake user that will be used to log in to the instance
- `#password`: Password for the specified Snowflake user
- `warehouse`: Name of the Snowflake warehouse where queries will be run

## Row-Specific Parameters

Each row allows to specify a query to be run, as well as a database and schema to be used. Parameters are:

- `database`: Name of the Snowflake database to use
- `schema`: Snowflake schema where the query will be run
- `query`: Query to execute

## Development

If needed, change the path to the local data folder (the `CUSTOM_FOLDER` placeholder) in the docker-compose file:

```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, initialize the workspace, and run the component with the following commands:

```
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

# Integration

For information about deployment and integration with Keboola, please refer to the [deployment section of the developer documentation](https://developers.keboola.com/extend/component/deployment/). 

