Directory structure:
└── kds_consulting_team-kds-team.wr-firebolt/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── mypy.ini
    ├── requirements.txt
    ├── test-requirements.txt
    ├── .pre-commit-config.yaml
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── firebolt/
    │   │   ├── __init__.py
    │   │   ├── auth.py
    │   │   ├── client.py
    │   │   ├── engine.py
    │   │   ├── exceptions.py
    │   │   ├── index.py
    │   │   ├── parser.py
    │   │   └── table.py
    │   └── s3/
    │       ├── __init__.py
    │       └── client.py
    └── tests/
        ├── __init__.py
        ├── test_component.py
        ├── test_functional.py
        └── functional/
            ├── delete/
            │   └── source/
            │       └── data/
            │           ├── config.json
            │           └── in/
            │               └── tables/
            │                   └── firebolt_data_DEFAULT.csv
            ├── full-load/
            │   └── source/
            │       └── data/
            │           ├── config.json
            │           └── in/
            │               └── tables/
            │                   └── firebolt_data_DEFAULT.csv
            └── incremental/
                └── source/
                    └── data/
                        ├── config.json
                        └── in/
                            └── tables/
                                └── firebolt_data_DEFAULT.csv

================================================
FILE: README.md
================================================
Firebolt Writer
=============

Firebolt is a cloud data warehouse for quick data analysis. 
The Firebolt Writer writes data to Firebolt tables and creates views for those tables.

**Table of contents:**

[TOC]

Functionality notes
===================

This writer works by creating views in Firebolt. There is always a background table along with a view.

For Full Load a new background table is uploaded, the view is deleted and recreated with the new background table. Then
the old background table is deleted.

For Incremental Load a new background table is uploaded, rows with primary keys not in the new background table 
are imported in from the old background table. The view is deleted and recreated with the new background table. Then
the old background table is deleted.

For Delete, the table with rows to delete is uploaded to firebolt (to_delete table). 
A new background table is created and rows with primary keys not in the to_delete background
table are imported in from the old background table. The view is deleted and recreated with the new background table. Then
the old background table is deleted.

Prerequisites
=============

Firebolt account / db setup.

Features
========

| **Feature**             | **Note**                                      |
|-------------------------|-----------------------------------------------|
| Custom UI               | Dynamic UI                              |
| Row Based configuration | Allows structuring the configuration in rows. |
| Incremental loading     | Allows fetching data in new increments.       |

Supported endpoints
===================

If you need more endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/)

Configuration
=============

### Parameters

- `"db"` - Connection settings
    - `"user"`- "example@example.com",
    - `"database"` -  Firebolt database name (default ingest engine will be used)
    - `"#password"`- Firebolt password
    - `"aws_api_key_id"` - OPT - AWS S3 key
    - `"#aws_api_key_secret"` - OPT - AWS S3 key
    - `"staging_bucket"`: - OPT - AWS S3 bucket

**NOTE**: AWS credentials may be left empty in AWS stack or provided as part of an `root.s3` parameter:

```json
"s3": {
    "isSliced": true,
    "region": "us-east-1",
    "bucket": "kbc-sapi-files",
    "key": "",
    "credentials": {
      "access_key_id": "CCCC",
      "secret_access_key": "AA..I+T",
      "session_token": "AAAA...POP"
    }
  }
```

- `"dbName"` - result firebolt db name
- `"table_type"`: `Fact` or `Dimension` - Firebolt table type
- `"loading_options"` - Object
    - `"load_type"`- one of`Full load` (overwrite result), `Append` (append data to existing table)
        
- `"items"` - List of column type mapping
    - `name` - source column name
      `dbName` - firebolt destination column name
      `type` -  e.g. `text`, `int`, `timestamp`
      `nullable` - boolean
      `size` - 

**Indexes**

- `primaryIndex` - Array of string column names
- `aggregation_indexes` - array of objects (only for)
    - example: 
    ```
  {
                "aggregations": [
                    {
                        "function": "MIN",
                        "column": "last_update_time"
                    },
                    {
                        "function": "MAX",
                        "column": "last_update_time"
                    }
                ],
                "index_name": "kbc_account",
                "key_columns": [
                    "account_id"
                ]
            }
  ```

### Sample configuration

```json
{
  "parameters": {
    "db": {
      "user": "example@example.com",
      "database": "test_db",
      "#password": "aaaaaaa",
      "aws_api_key_id": "AAAAAAA",
      "#aws_api_key_secret": "CCCCCCCC",
      "staging_bucket": "firebolt-test"
    },
        "items": [
            {
                "name": "account_id",
                "dbName": "account_id",
                "type": "VARCHAR",
                "nullable": false,
                "size": ""
            },
            {
                "name": "engine_id",
                "dbName": "engine_id",
                "type": "VARCHAR",
                "nullable": false,
                "size": ""
            },
            {
                "name": "id",
                "dbName": "id",
                "type": "VARCHAR",
                "nullable": false,
                "size": ""
            },
            {
                "name": "compute_provider_id",
                "dbName": "compute_provider_id",
                "type": "VARCHAR",
                "nullable": false,
                "size": ""
            },
            {
                "name": "compute_region_id",
                "dbName": "compute_region_id",
                "type": "VARCHAR",
                "nullable": false,
                "size": ""
            },
            {
                "name": "desired_status",
                "dbName": "desired_status",
                "type": "VARCHAR",
                "nullable": false,
                "size": ""
            }
        ],
        "aggregation_indexes": [
            {
                "aggregations": [
                    {
                        "function": "MIN",
                        "column": "last_update_time"
                    },
                    {
                        "function": "MAX",
                        "column": "last_update_time"
                    }
                ],
                "index_name": "kbc_account",
                "key_columns": [
                    "account_id"
                ]
            }
        ],
        "dbName": "core_engine_revisions",
        "tableId": "in.c-keboola-ex-aws-s3-753365763.core_engine_revisions",
        "table_type": "Fact",
        "join_indexes": [],
        "primaryIndex": [
            "account_id",
            "engine_id",
            "id"
        ],
        "incremental": false,
        "loading_options": {
            "load_type": "Full load"
        },
        "primaryKey": []
  },
  "image_parameters": {},
  "action": "run"
}
```




Post-Run scripts
======

You can specify SQL scripts that the engine in Firebolt will run after all tables and views are done being uploaded. 
Post run scripts are defined with the "post_run_scripts" parameter which is a dictionary that contains the "scripts" parameter
holding all the scripts in a list as strings. There are specific placeholder strings that can be used to replace table or view names, they are always 
in curly brackets {}:

{VIEW} - will be replaced as the name of the view created by the writer
{BACKGROUND_TABLE} - will be replaced as the name of the current background table created by the writer

you can also set specific object names to the scripts
{OBJECT_} - will be replaced as a specific object name described in the "custom_objects" dictionary
{OBJECT_DYNAMIC_} - will be replaced as a specific object name described in the "custom_objects" dictionary along with a unique id per run, so the name of the object is unique
```json

 "post_run_scripts": {
      "continue_on_failure": true,
      "scripts": [
        "SELECT * FROM {VIEW}",
        "SELECT * FROM {OBJECT_this}"
        "SELECT * FROM {OBJECT_DYNAMIC_that}"
      ],
      "custom_objects" : {
        "this" : "hello",
         "that" : "hi"
 }
    }

```

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the docker-compose file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone git clone https://bitbucket.org/kds_consulting_team/kds-team.wr-firebolt.git
cd kds-team.wr-firebolt
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)



================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest tests/test_component.py
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run -e FIREBOLT_USER_NAME -e FIREBOLT_PASSWORD -e FIREBOLT_TEST_DB_NAME -e FIREBOLT_STAGING_BUCKET -e AWS_API_KEY_ID -e AWS_API_KEY_SECRET -e FIREBOLT_DRIVER -e AWS_REGION $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            #            - echo 'Pushing test image to repo. [tag=test]'
            #            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            #            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            #            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            #            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest tests/test_component.py
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog



================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}

    echo "Deploying to AWS version"
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP_S3} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY requirements.txt /code/test-requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt
RUN pip install -r /code/test-requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: mypy.ini
================================================
[mypy]
ignore_missing_imports = True


================================================
FILE: requirements.txt
================================================
keboola.component==1.2.0
keboola.utils
keboola.http-client
retry~=0.9.2
boto3~=1.21.42
mock~=4.0.3
freezegun~=1.2.1
https://bitbucket.org/kds_consulting_team/datadirtest/get/1.5.1.zip#egg=datadirtest
botocore~=1.24.42
requests~=2.27.1
datadirtest~=1.5.1


================================================
FILE: test-requirements.txt
================================================
mock
freezegun
https://bitbucket.org/kds_consulting_team/datadirtest/get/1.5.1.zip#egg=datadirtest


================================================
FILE: .pre-commit-config.yaml
================================================
repos:

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.0.1
    hooks:
      - id: check-json

  - repo: https://gitlab.com/pycqa/flake8
    rev: 3.7.9
    hooks:
      - id: flake8
        args: [ '--config=flake8.cfg' ]


================================================
FILE: component_config/component_long_description.md
================================================
Firebolt is the world’s fastest cloud data warehouse for data engineers, purpose-built for high-performance analytics. 
It provides sub-second query performance at terabyte to petabyte scale, at a fraction of the cost compared to alternatives. 
Companies adopting Firebolt have deployed high performance data analytics applications across internal BI as well as customer-facing use cases. 
Get started at [firebolt.io](https://www.firebolt.io/?utm_source=partner&utm_medium=referral&utm_campaign=keboola)

This component enables you to write data to a Firebolt table in a specified database.


================================================
FILE: component_config/component_short_description.md
================================================
Firebolt is the world’s fastest cloud data warehouse for data engineers, 
purpose-built for high-performance analytics.


================================================
FILE: component_config/configRowSchema.json
================================================
{
  "title": "Table settings",
  "type": "object",
  "required": [
    "dbName",
    "table_type"
  ],
  "properties": {
    "dbName": {
      "type": "string",
      "title": "Name of table in Firebolt",
      "propertyOrder": 10
    },
    "table_type": {
      "type": "string",
      "enum": [
        "Dimension",
        "Fact"
      ],
      "default": 0,
      "title": "Table type",
      "propertyOrder": 15
    },
    "primaryIndex": {
      "type": "array",
      "format": "table",
      "title": "Primary indexes",
      "uniqueItems": true,
      "propertyOrder": 20,
      "items": {
        "type": "string",
        "title": "Primary index"
      }
    },
    "items": {
      "type": "array",
      "format": "grid",
      "title": "Columns",
      "propertyOrder": 30,
      "uniqueItems": true,
      "items": {
        "type": "object",
        "title": "Column",
        "properties": {
          "name": {
            "type": "string",
            "title": "Column name",
            "propertyOrder": 40
          },
          "dbName": {
            "type": "string",
            "title": "Firebolt column name",
            "description": "Name of column in Firebolt table",
            "propertyOrder": 50
          },
          "type": {
            "type": "string",
            "title": "Data type",
            "enum": [
              "TEXT",
              "INT"
            ],
            "propertyOrder": 60
          },
          "nullable": {
            "type": "boolean",
            "format": "checkbox",
            "title": "Nullable",
            "propertyOrder": 70
          }
        }
      }
    },
    "aggregation_indexes": {
      "type": "array",
      "format": "grid",
      "title": "Aggregation indexes",
      "uniqueItems": true,
      "propertyOrder": 100,
      "options": {
        "dependencies": {
          "table_type": "Fact"
        }
      },
      "items": {
        "type": "object",
        "title": "Aggregation Index",
        "properties": {
          "index_name": {
            "type": "string",
            "title": "Index name",
            "description": "Name of index in Firebolt",
            "propertyOrder": 115
          },
          "key_columns": {
            "type": "array",
            "format": "table",
            "title": "Key Columns",
            "description": "Column name from the fact table used for the index",
            "uniqueItems": true,
            "propertyOrder": 120,
            "items": {
              "type": "string",
              "title": "Key Column"
            }
          },
          "aggregations": {
            "type": "array",
            "format": "table",
            "title": "Aggregation",
            "description": "Specifies the aggregation function applied on a specific column",
            "propertyOrder": 130,
            "items": {
              "type": "object",
              "title": "Aggregation",
              "properties": {
                "function": {
                  "title": "Function",
                  "type": "string",
                  "enum": [
                    "SUM",
                    "AVG",
                    "COUNT"
                  ],
                  "propertyOrder": 140
                },
                "column": {
                  "title": "Column name",
                  "type": "string",
                  "propertyOrder": 150
                }
              }
            }
          }
        }
      }
    },
    "join_indexes": {
      "type": "array",
      "options": {
        "dependencies": {
          "table_type": "Dimension"
        }
      },
      "format": "grid",
      "title": "Join indexes",
      "propertyOrder": 160,
      "uniqueItems": true,
      "items": {
        "type": "object",
        "title": "Join Index",
        "properties": {
          "index_name": {
            "type": "string",
            "title": "Index name",
            "description": "Name of index in Firebolt",
            "propertyOrder": 115
          },
          "join_index_column": {
            "type": "string",
            "title": "Join index column",
            "description": "The column name that is being used in the join’s on clause",
            "propertyOrder": 170
          },
          "dimension_columns": {
            "type": "array",
            "format": "table",
            "propertyOrder": 180,
            "title": "Dimension columns",
            "description": "The column name which is being loaded into memory from the dimension tabl",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "title": "Dimension column"
            }
          }
        }
      }
    },
    "loading_options": {
      "type": "object",
      "title": "Loading Options",
      "propertyOrder": 190,
      "format": "grid",
      "required": [
        "load_type"
      ],
      "properties": {
        "load_type": {
          "type": "string",
          "enum": [
            "Full Load",
            "Incremental Update"
          ],
          "default": " Full Load",
          "title": "Load type",
          "description": "If set to Incremental update, data will be appended to a table in Firebolt (No checks are made for duplicate data). Full load overwrites the destination table each time.",
          "propertyOrder": 200
        },
        "append_timestamp": {
          "type": "boolean",
          "default": false,
          "format": "checkbox",
          "title": "Append timestamp",
          "propertyOrder": 210,
          "description": "If checked, will append timestamp to a timestamp column in firebolt, based on upload time"
        }
      }
    }
  }
}


================================================
FILE: component_config/configSchema.json
================================================
{
  "title": "Authorization settings",
  "type": "object",
  "properties": {
    "db": {
      "type": "object",
      "title": "Firebolt Authorization",
      "propertyOrder": 1,
      "required": [
        "user",
        "#password",
        "database"
      ],
      "properties": {
        "user": {
          "type": "string",
          "title": "Username",
          "description": "Your Firebolt username",
          "propertyOrder": 10
        },
        "#password": {
          "type": "string",
          "title": "Password",
          "description": "Your Firebolt password",
          "propertyOrder": 20
        },
        "database": {
          "type": "string",
          "title": "Database name",
          "description": "Name of Firebolt database you wish to write data to",
          "propertyOrder": 30
        },
        "engine_name": {
          "type": "string",
          "title": "Engine name",
          "description": "Name of Firebolt engine you wish to write data with, it must be linked with the engine",
          "propertyOrder": 35
        },
        "aws_api_key_id": {
          "type": "string",
          "title": "API key Id",
          "propertyOrder": 110
        },
        "#aws_api_key_secret": {
          "type": "string",
          "title": "API key secret",
          "propertyOrder": 120
        },
        "aws_region": {
          "type": "string",
          "title": "Database region",
          "description": "AWS region of the staging bucket ",
          "propertyOrder": 130
        },
        "staging_bucket": {
          "type": "string",
          "title": "Staging bucket",
          "description": "Name of Staging bucket in s3",
          "propertyOrder": 140
        }
      }
    }
  }
}


================================================
FILE: component_config/configuration_description.md
================================================
Testing configuration description.


================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
FILE: src/component.py
================================================
import logging
import copy
from random import randint
from botocore.exceptions import ClientError as S3ClientError
from keboola.component.base import ComponentBase, UserException
from requests.exceptions import RetryError

from firebolt import FireboltClient, FireboltTableFactory, TableType, FireboltClientException
from s3 import S3Client
from typing import Any, Dict, List, Optional
from firebolt.index import PrimaryIndex
from firebolt.table import FireboltExternalTable, FireboltTable, FireboltFactTable, FireboltDimensionTable
from keboola.component.dao import TableDefinition

STAGING_TABLE_PREFIX = 'KBC_STAGING_'

KEY_FIREBOLT = "db"
KEY_FIREBOLT_USERNAME = 'user'
KEY_FIREBOLT_PASSWORD = '#password'
KEY_DATABASE_NAME = "database"
KEY_ENGINE_NAME = "engine_name"
KEY_REFRESH_TOKEN = "firebolt_refresh_token"

KEY_TABLES = "tables"
KEY_DB_TABLE_NAME = "dbName"
KEY_TABLE_TYPE = "table_type"
KEY_PRIMARY_INDEXES = "primaryIndex"
KEY_LOADING_OPTIONS = "loading_options"
KEY_LOAD_TYPE = "load_type"
KEY_APPEND_TIMESTAMP = "append_timestamp"
KEY_TABLE_AGGREGATION_INDEXES = "aggregation_indexes"
KEY_TABLE_JOIN_INDEXES = "join_indexes"
KEY_COLUMNS = "items"

KEY_AWS_API_KEY_ID = 'aws_api_key_id'
KEY_AWS_API_KEY_SECRET = '#aws_api_key_secret'
KEY_AWS_STAGING_BUCKET = "staging_bucket"
KEY_AWS_REGION = "aws_region"

KEY_POST_RUN_SCRIPTS = "post_run_scripts"
KEY_POST_RUN_RUN = "run"
KEY_CONTINUE_ON_FAILURE = "continue_on_failure"
KEY_SCRIPTS = "script"
CUSTOM_CUSTOM_OBJECTS = "custom_objects"

REQUIRED_PARAMETERS: List = []
REQUIRED_IMAGE_PARS: List = []

APPEND_TIMESTAMP_COLUMN_NAME = "upload_timestamp"


def handle_fb_exceptions(func):
    def func_wrapper(*args: Any, **kwargs: Any):
        try:
            return func(*args, **kwargs)
        except FireboltClientException as e:
            raise UserException(e) from e

    return func_wrapper


class Component(ComponentBase):
    def __init__(self) -> None:
        super().__init__(required_parameters=REQUIRED_PARAMETERS,
                         required_image_parameters=REQUIRED_IMAGE_PARS)

        params = self.configuration.parameters
        firebolt_params = params.get(KEY_FIREBOLT)
        firebolt_username = firebolt_params.get(KEY_FIREBOLT_USERNAME)
        firebolt_password = firebolt_params.get(KEY_FIREBOLT_PASSWORD)
        database_name = firebolt_params.get(KEY_DATABASE_NAME)
        engine_name = firebolt_params.get(KEY_ENGINE_NAME)
        self.firebolt_client = FireboltClient(database_name, firebolt_username, firebolt_password,
                                              engine_name=engine_name)

        aws_api_key_id = firebolt_params.get(KEY_AWS_API_KEY_ID)
        aws_api_key_secret = firebolt_params.get(KEY_AWS_API_KEY_SECRET)
        aws_region = firebolt_params.get(KEY_AWS_REGION)
        self.staging_bucket = firebolt_params.get(KEY_AWS_STAGING_BUCKET)
        self.s3_client = S3Client(aws_api_key_id, aws_api_key_secret, aws_region)

    def test_connection(self) -> None:
        self._init_clients()
        try:
            self.s3_client.login()
            self.s3_client.list_objects_in_bucket(self.staging_bucket)
        except S3ClientError as s3_client_error:
            raise UserException("Specified S3 credentials are not valid") from s3_client_error

    @handle_fb_exceptions
    def _init_clients(self) -> None:
        self.firebolt_client.login()
        self.s3_client.login()

    @handle_fb_exceptions
    def run(self) -> None:
        params = self.configuration.parameters
        self._init_clients()

        self.start_ingest_engine()

        view_name = params.get(KEY_DB_TABLE_NAME)

        table_type = TableType(params.get(KEY_TABLE_TYPE))

        loading_options = params.get(KEY_LOADING_OPTIONS)
        load_type = loading_options.get(KEY_LOAD_TYPE)
        input_columns = params.get(KEY_COLUMNS)
        input_columns = self.convert_column_types(input_columns)
        input_table_primary_indexes = params.get(KEY_PRIMARY_INDEXES, [])

        input_table = self.get_input_table()

        logging.info("Validating table settings")
        self.validate_table_settings(view_name, input_columns, table_type, input_table_primary_indexes)

        # Check if table exists for view name
        table = self.firebolt_client.get_table(view_name, table_type)
        if table:
            raise UserException("The table name you provided already exists in Firebolt. "
                                "This component generates views, which cannot have the "
                                "same names as existing tables in Firebolt")

        old_background_table = self.get_current_background_table(view_name, table_type)

        if load_type == "Delete from" and not old_background_table:
            raise UserException("Cannot Delete from table, the table does not exist")

        logging.info("Uploading Data to new background table")
        if load_type in ["Full load", "Incremental load"]:
            new_background_table = self.create_background_table_object(params, table_type)
        elif load_type == "Delete from":
            new_background_table = self.create_background_table_object(params, table_type, to_delete=True)
        else:
            raise UserException(f"Load type {load_type} not supported")
        self.upload_data_to_table(new_background_table, input_table)

        if load_type in ["Incremental load"] and old_background_table:
            logging.info("Performing Incremental Update")
            self.union_tables(new_background_table, old_background_table)

        if load_type == "Delete from":
            logging.info("Deleting rows from table")
            delete_background_table = copy.copy(new_background_table)
            new_background_table = self.create_background_table_object(params, table_type)
            self.firebolt_client.delete_from_table(new_background_table, delete_background_table, old_background_table)
            self.drop_table(delete_background_table)

        logging.info("Creating table indexes")
        self.create_table_indexes(new_background_table)

        view_exists = self.check_view_exists(view_name)

        if view_exists:
            logging.info("Dropping view")
            self.drop_view(view_name)

        logging.info("Recreating view")
        self.create_view(view_name, new_background_table.name)

        # delete old table
        if old_background_table:
            logging.info("Dropping old background table")
            self.drop_table(old_background_table)

        self.s3_client.clean_bucket(self.staging_bucket, prefix=STAGING_TABLE_PREFIX)

        post_run_scripts = params.get(KEY_POST_RUN_SCRIPTS, {})
        run = post_run_scripts.get(KEY_POST_RUN_RUN)
        if post_run_scripts and run:
            continue_on_failure = post_run_scripts.get(KEY_CONTINUE_ON_FAILURE)
            scripts = post_run_scripts.get(KEY_SCRIPTS)
            custom_script_objects = post_run_scripts.get(CUSTOM_CUSTOM_OBJECTS)
            self.run_post_run_scripts(scripts, continue_on_failure, view_name=view_name,
                                      background_table_name=new_background_table.name,
                                      custom_script_objects=custom_script_objects)

    def create_background_table_object(self, table_params: Dict, table_type: TableType,
                                       to_delete: bool = False) -> FireboltTable:
        background_table_name = self.generate_background_table_name(table_params["dbName"], to_delete=to_delete)

        updated_table_params = table_params.copy()
        updated_table_params["dbName"] = background_table_name

        # create background table
        table = self.create_table_object_from_params(updated_table_params, table_type)
        self.firebolt_client.create_table(table)

        # Add indexes to table object
        table = self.add_indexes_to_table(table, updated_table_params)

        return table

    def upload_data_to_table(self, table: FireboltTable, input_table: TableDefinition) -> None:
        s3_file_name = self.get_s3_staging_file_name(table.name)
        self.upload_data_to_s3(input_table, s3_file_name)

        # create external table
        logging.info("Creating External table")
        external_table = self.create_external_table_from_table(table, s3_file_name)

        # ingest to table
        logging.info("Ingesting data from external table to background table")
        self.firebolt_client.ingest_from_external_to_table(external_table, table)

        self.drop_table(external_table)

    @staticmethod
    def get_s3_staging_file_name(table_name: str) -> str:
        return "_".join([STAGING_TABLE_PREFIX, table_name])

    def get_input_table(self) -> TableDefinition:
        input_tables = self.get_input_tables_definitions()
        if len(input_tables) == 0:
            raise UserException("No input table added. Please add an input table")
        elif len(input_tables) > 1:
            raise UserException("Too many input tables added. Please add only one input table")
        return input_tables[0]

    @staticmethod
    def random_with_n_digits(n: int) -> int:
        range_start = 10 ** (n - 1)
        range_end = (10 ** n) - 1
        return randint(range_start, range_end)

    def start_ingest_engine(self) -> None:
        logging.info(f"Starting Ingest engine {self.firebolt_client.engine.name}, this might take a couple of minutes")
        self.firebolt_client.start_ingest_engine()
        logging.info(f"Ingest engine : {self.firebolt_client.engine.name} is ready")

    @staticmethod
    def validate_name(name, name_type):
        if len(name) < 1:
            raise UserException(f"{name_type} name must not be empty")
        if not name.replace('_', '').isalnum():
            raise UserException(f"{name_type} name '{name}' is invalid, "
                                "the name should only contain alphanumeric and underscore '_' characters")
        if not name[0].replace('_', '').isalpha():
            raise UserException(f"{name_type} '{name}' is invalid, "
                                "the first character must be a letter or underscore '_'")

    def validate_table_settings(self, table_view_name: str, input_columns: List[Dict], table_type: TableType,
                                input_table_primary_indexes: List[str]) -> None:

        self.validate_name(table_view_name, "Table/View")

        for input_column in input_columns:
            self.validate_name(input_column["dbName"], "Column")

        self.validate_primary_indexes(input_columns, input_table_primary_indexes)

        if table_type == TableType.Fact and not input_table_primary_indexes:
            raise UserException("Fact table must include primary index")

        firebolt_table_name = self.firebolt_client.get_table_name_from_view(table_view_name)
        if firebolt_table_name:
            firebolt_table = self.firebolt_client.get_table(firebolt_table_name, table_type)

        else:
            firebolt_table = None
        if firebolt_table:
            self.compare_columns(firebolt_table.columns, input_columns)
            self.compare_primary_indexes(firebolt_table.primary_indexes, input_table_primary_indexes)

    def compare_columns(self, db_table_columns: List[Dict], input_table_columns: List[Dict]) -> None:
        match = True
        issues = []
        if len(db_table_columns) != len(input_table_columns):
            raise UserException("Input table columns do not match the columns of the existing firebolt table"
                                f"Table in the database has {len(db_table_columns)} columns and the input table"
                                f"has {len(input_table_columns)} columns")

        input_table_column_names = [column["dbName"] for column in input_table_columns]

        for db_table_column in db_table_columns:
            if db_table_column["name"] not in input_table_column_names:
                issues.append(f"{db_table_column['name']} is Missing in input table")
                match = False
            else:
                matching_column = self.get_input_table_column_by_name(input_table_columns, db_table_column["name"])
                if matching_column and db_table_column["type"].lower() != matching_column["type"].lower():
                    issues.append(f"type of : {db_table_column['name']} ({db_table_column['type']}) "
                                  f"in db does not match the input : {matching_column['dbName']} "
                                  f"({matching_column['type']})")
                    match = False
        if not match:
            raise UserException("Input table columns do not match the columns of the existing firebolt table : "
                                f"{issues}")

    @staticmethod
    def get_input_table_column_by_name(input_table_columns: List[Dict], name: str) -> Optional[Dict]:
        for input_table_column in input_table_columns:
            if input_table_column['dbName'] == name:
                return input_table_column
        return None

    @staticmethod
    def compare_primary_indexes(firebolt_primary_indexes: PrimaryIndex, input_primary_indexes: List[str]) -> None:
        if set(input_primary_indexes) != set(firebolt_primary_indexes.columns):
            raise UserException(
                "Input table primary_indexes do not match the primary_indexes of the existing firebolt table")

    @handle_fb_exceptions
    def create_external_table_from_table(self, table: FireboltTable, input_csv_name: str) -> FireboltTable:
        external_table_name = "_".join(["ex", table.name])
        external_table = FireboltExternalTable(external_table_name)
        external_table.columns = table.columns
        self.firebolt_client.create_external_table(external_table, input_csv_name, self.staging_bucket,
                                                   self.s3_client.key_id, self.s3_client.key_secret)
        return external_table

    def add_indexes_to_table(self, table: FireboltTable, input_table_params: Dict) -> FireboltTable:
        if isinstance(table, FireboltFactTable):
            table = self.add_aggregation_indexes_to_fact_table(table, input_table_params)
        if isinstance(table, FireboltDimensionTable):
            table = self.add_join_indexes_to_dimension_table(table, input_table_params)
        return table

    def create_table_object_from_params(self, input_table_params: Dict[str, Any],
                                        table_type: TableType) -> FireboltTable:
        table = FireboltTableFactory.get_firebolt_table(input_table_params["dbName"], table_type)
        table.columns = self.get_input_table_columns(input_table_params)
        primary_index_columns = input_table_params.get(KEY_PRIMARY_INDEXES, [])
        table.set_primary_index(primary_index_columns)
        return table

    def add_aggregation_indexes_to_fact_table(self, fact_table: FireboltFactTable,
                                              input_table_params: Dict) -> FireboltFactTable:
        input_aggregation_indexes = input_table_params.get(KEY_TABLE_AGGREGATION_INDEXES, [])
        for input_aggregation_index in input_aggregation_indexes:
            index_name = self.generate_index_name(input_aggregation_index["index_name"])
            key_columns = input_aggregation_index["key_columns"]
            aggregations = input_aggregation_index["aggregations"]
            fact_table.add_aggregation_index(index_name, key_columns, aggregations)
        return fact_table

    def add_join_indexes_to_dimension_table(self, dimension_table: FireboltDimensionTable,
                                            input_table_params: Dict) -> FireboltDimensionTable:
        input_join_indexes = input_table_params.get(KEY_TABLE_JOIN_INDEXES, [])
        for input_join_index in input_join_indexes:
            index_name = self.generate_index_name(input_join_index["index_name"])
            join_index_column = input_join_index["join_index"]
            dimension_columns = input_join_index.get("dimension_columns")
            if not dimension_columns:
                dimension_columns = []
            dimension_table.add_join_index(index_name, join_index_column, dimension_columns)
        return dimension_table

    @staticmethod
    def get_input_table_columns(input_table_params: Dict) -> List[Dict]:
        columns = []
        for column in input_table_params[KEY_COLUMNS]:
            columns.append({"name": column["dbName"],
                            "type": column["type"],
                            "nullable": column["nullable"]})
        return columns

    def convert_column_types(self, input_columns: List[Dict]) -> List[Dict]:
        new_columns = []
        for column in input_columns:
            column["type"] = self.convert_keboola_datatype_to_firebolt_datatype(column["type"])
            new_columns.append(column)
        return new_columns

    @staticmethod
    def convert_keboola_datatype_to_firebolt_datatype(datatype: str) -> str:
        # this function is needed as datatype synonyms are automatically converted
        # eg. VARCHAR, TEXT, STRING are auto-converted to text
        if datatype.lower() in {"varchar", "string"}:
            return "text"
        elif datatype.lower() == "integer":
            return "int"
        elif datatype.lower() == "datetime":
            return "timestamp"
        else:
            return datatype.lower()

    def upload_data_to_s3(self, input_table: TableDefinition, table_name: str) -> None:
        try:
            self.s3_client.upload_to_bucket(table_name, input_table.full_path, self.staging_bucket)
        except S3ClientError as client_error:
            raise UserException(f"An error occurred when uploading data to S3 {client_error}") from client_error

    def get_run_id(self) -> int:
        return self.environment_variables.run_id or self.random_with_n_digits(8)

    def get_config_id(self) -> int:
        return self.environment_variables.config_id or self.random_with_n_digits(8)

    def generate_background_table_name(self, table_name: str, to_delete: bool = False) -> str:
        run_id = str(self.get_run_id()).split(".")[-1]
        if to_delete:
            return "_".join([table_name, str(self.get_config_id()), run_id, "to_delete"])
        return "_".join([table_name, str(self.get_config_id()), run_id, "background_table"])

    def generate_index_name(self, index_name: str) -> str:
        run_id = str(self.get_run_id()).split(".")[-1]
        return "_".join([index_name, str(self.get_config_id()), run_id])

    def drop_table(self, table: FireboltTable) -> None:
        self.drop_table_indexes(table)
        self._drop_table(table.name)

    @handle_fb_exceptions
    def union_tables(self, incremental_table: FireboltTable, old_table: FireboltTable) -> None:
        self.firebolt_client.union_tables(incremental_table, old_table)

    @handle_fb_exceptions
    def check_view_exists(self, view_name: str) -> bool:
        return self.firebolt_client.check_view_exists(view_name)

    @handle_fb_exceptions
    def drop_table_indexes(self, table: FireboltTable) -> None:
        self.firebolt_client.drop_table_indexes(table)

    @handle_fb_exceptions
    def _drop_table(self, table_name: str) -> None:
        self.firebolt_client.drop_table(table_name)

    @handle_fb_exceptions
    def drop_view(self, view_name: str) -> None:
        self.firebolt_client.drop_view(view_name)

    @handle_fb_exceptions
    def create_view(self, view_name: str, table_name: str) -> None:
        self.firebolt_client.create_view(view_name, table_name)

    @handle_fb_exceptions
    def create_table_indexes(self, table: FireboltTable) -> None:
        self.firebolt_client.update_table_indexes(table)

    @handle_fb_exceptions
    def get_current_background_table(self, view_name: str, table_type: TableType) -> Optional[FireboltTable]:
        current_background_table_name = self.firebolt_client.get_table_name_from_view(view_name)
        if current_background_table_name:
            return self.firebolt_client.get_table(current_background_table_name, table_type)
        return None

    def run_post_run_scripts(self, scripts: str,
                             continue_on_failure: bool,
                             view_name: str,
                             background_table_name: str,
                             custom_script_objects: Dict) -> None:
        logging.info("Running Post Run Scripts")
        scripts = scripts.split(';')
        whole_scripts = [script for script in scripts if len(script) > 4]
        for i, script in enumerate(whole_scripts):
            script = self.replace_script_object_names(script, view_name, background_table_name, custom_script_objects)
            logging.info(f"Running script #{i + 1}")
            try:
                self.firebolt_client.engine.run_sql(script)
                logging.info(f"Script #{i + 1} ran successfully")
            except (FireboltClientException, RetryError) as fb_exc:
                logging.info(f"Script #{i + 1} failed due to : {fb_exc}")
                if not continue_on_failure:
                    raise UserException(fb_exc) from fb_exc

    def replace_script_object_names(self, script: str,
                                    view_name: str,
                                    background_table_name: str,
                                    custom_script_objects: Dict) -> str:
        run_id = str(self.get_run_id()).split(".")[-1]
        dynamic_str = "_".join([str(self.get_config_id()), run_id])
        script = script.replace("{VIEW}", view_name)
        script = script.replace("{BACKGROUND_TABLE}", background_table_name)

        if custom_script_objects:
            l_c = "{"
            r_c = "}"
            for custom_object_name, value in custom_script_objects.items():

                dynamic_name = f"{l_c}OBJECT_DYNAMIC_{custom_object_name}{r_c}"
                non_dynamic_name = f"{l_c}OBJECT_{custom_object_name}{r_c}"
                if dynamic_name in script:
                    script = script.replace(dynamic_name, f"{value}_{dynamic_str}")
                if non_dynamic_name in script:
                    script = script.replace(non_dynamic_name, value)
        return script

    @staticmethod
    def validate_primary_indexes(input_columns: List, input_table_primary_indexes: List) -> None:
        nullable_error_columns = []
        for input_column in input_columns:
            if input_column["dbName"] in input_table_primary_indexes and input_column["nullable"]:
                nullable_error_columns.append(input_column["dbName"])
        if nullable_error_columns:
            raise UserException(
                f"Primary Indexes must not be nullable, columns {nullable_error_columns} are set as nullable.")


if __name__ == "__main__":
    try:
        comp = Component()
        comp.test_connection()
        comp.run()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
FILE: src/firebolt/__init__.py
================================================
from .client import FireboltClient  # noqa
from .table import FireboltExternalTable, FireboltTableFactory, TableType  # noqa
from .exceptions import FireboltClientException, FireboltValidationException  # noqa



================================================
FILE: src/firebolt/auth.py
================================================
"""Authorization

Contains functions used for fetching access tokens to authorize the firebolt client
"""

from keboola.http_client import HttpClient
from typing import Tuple

AUTH_URL = 'https://api.app.firebolt.io/auth/v1'
LOGIN_ENDPOINT = "login"
REFRESH_ENDPOINT = 'refresh'


def get_authentication_token(firebolt_user: str, firebolt_pass: str) -> Tuple[str, str]:
    headers = {'Content-Type': 'application/json;charset=UTF-8'}
    data = {"username": firebolt_user, "password": firebolt_pass}
    auth_client = HttpClient(AUTH_URL)
    response = auth_client.post(endpoint_path=LOGIN_ENDPOINT, headers=headers, json=data)
    refresh_token = response.get("refresh_token")
    access_token = response.get("access_token")
    return refresh_token, access_token


def refresh_access_token(refresh_token: str) -> str:
    headers = {'Content-Type': 'application/json;charset=UTF-8'}
    data = {"refresh_token": refresh_token}
    auth_client = HttpClient(AUTH_URL)
    response = auth_client.post(endpoint_path=REFRESH_ENDPOINT, headers=headers, json=data)
    access_token = response.get("access_token")
    return access_token



================================================
FILE: src/firebolt/client.py
================================================
"""Firebolt client

Contains functions used for fetching access tokens to authorize the firebolt client
"""
import logging
from requests.exceptions import ConnectionError
from typing import Optional, List
from .engine import FireboltEngine
from .exceptions import FireboltValidationException, FireboltClientException
from .parser import get_aggregation_index_strings, parse_join_indexes
from .parser import get_columns_string, get_primary_indexes_string
from .parser import parse_table_columns, parse_primary_indexes, parse_aggregation_indexes
from .table import TableType, FireboltTableFactory, FireboltTable
from .index import IndexFactory

FIREBOLT_SCHEMA = "schema"
FIREBOLT_TABLE_NAME = "table_name"


class FireboltClient:
    def __init__(self, database_name: str, firebolt_user: str, firebolt_pass: str, engine_name: str = None):
        self._firebolt_user = firebolt_user
        self._firebolt_pass = firebolt_pass
        self.engine_name = engine_name
        self.engine = FireboltEngine(database_name)

    def login(self) -> None:
        try:
            self.engine.login(self._firebolt_user, self._firebolt_pass, self.engine_name)
        except ConnectionError as conn_exc:
            raise FireboltClientException(conn_exc) from conn_exc

    def start_ingest_engine(self) -> None:
        if not self.engine.get_engine_status():
            self.engine.start_engine()

    def stop_ingest_engine(self) -> None:
        self.engine.stop_engine()

    def check_view_exists(self, view_name: str) -> bool:
        response_data = self.get_table_name_from_view(view_name)
        if response_data:
            return True
        return False

    def get_table_name_from_view(self, view_name: str) -> Optional[str]:
        sql_script = f"SELECT * FROM information_schema.views WHERE table_name =  '{view_name}'"
        response_data = self.engine.run_sql(sql_script).get("data")
        if len(response_data) > 0:
            ddl = response_data[0].get("ddl")
            return ddl.split("FROM")[1].strip()
        return None

    def get_table(self, table_name: str, table_type: TableType) -> Optional[FireboltTable]:
        table = FireboltTableFactory.get_firebolt_table(table_name, table_type)

        columns = self.get_table_columns(table)
        table.set_column(columns)

        primary_indexes = self.get_table_primary_indexes(table)
        table.set_primary_index(primary_indexes)

        if table_type == TableType.Dimension:
            join_indexes = self.get_table_join_indexes(table)
            table.set_join_indexes(join_indexes)

        if table_type == TableType.Fact:
            aggregation_indexes = self.get_table_aggregation_indexes(table)
            table.set_aggregation_indexes(aggregation_indexes)

        if table.columns:
            return table
        return None

    def get_table_columns(self, table: FireboltTable) -> Optional[List]:
        sql_script = f"DESCRIBE {table.name}"
        response_dict = self.engine.run_sql(sql_script)
        if response_dict.get('data'):
            return parse_table_columns(response_dict.get('data'))
        return None

    def get_table_primary_indexes(self, table):
        get_index_script = f"show indexes {table.name}"
        response = self.engine.run_sql(get_index_script)
        return parse_primary_indexes(response.get("data")) if response.get("data") else []

    def get_table_join_indexes(self, table):
        index_data = self.fetch_indexes()
        join_indexes = parse_join_indexes(index_data)
        return [join_index for join_index in join_indexes if join_index.table_name == table.name]

    def get_table_aggregation_indexes(self, table):
        index_data = self.fetch_indexes()
        aggregation_indexes = parse_aggregation_indexes(index_data)
        return [aggregation_index for aggregation_index in aggregation_indexes if
                aggregation_index.table_name == table.name]

    def fetch_indexes(self):
        get_index_script = "show indexes"
        return self.engine.run_sql(get_index_script).get("data")

    def get_table_schema(self, table):
        sql_script = "SHOW TABLES"
        response = self.engine.run_sql(sql_script)
        for response_table in response.get("data"):
            if response_table[FIREBOLT_TABLE_NAME] == table.name:
                return response_table[FIREBOLT_SCHEMA]

    def drop_table(self, table_name):
        drop_script = f"DROP TABLE {table_name}"
        self.engine.run_sql(drop_script)

    def drop_join_index(self, join_index_name):
        drop_script = f"DROP join index {join_index_name}"
        self.engine.run_sql(drop_script)

    def drop_aggregating_index(self, aggregating_index_name):
        drop_script = f"DROP aggregating index {aggregating_index_name}"
        self.engine.run_sql(drop_script)

    def truncate_table(self, table_name):
        truncate_script = f"TRUNCATE {table_name}"
        self.engine.run_sql(truncate_script)

    def create_table_with_schema(self, table_schema):
        self.engine.run_sql(table_schema)

    def create_view(self, view_name, table_name):
        sql_script = f"CREATE VIEW {view_name} AS SELECT * FROM {table_name}"
        self.engine.run_sql(sql_script)

    def drop_view(self, view_name):
        sql_script = f"DROP VIEW {view_name}"
        self.engine.run_sql(sql_script)

    def create_table(self, table):
        columns_string = get_columns_string(table.columns)
        primary_indexes_string = get_primary_indexes_string(table.primary_indexes)
        sql_script = f"""
                CREATE {table.get_table_type()} TABLE {table.name} ( {columns_string} ) 
                {"PRIMARY INDEX" if table.primary_indexes.columns else ""} {primary_indexes_string};
                """  # noqa
        self.engine.run_sql(sql_script)

    def drop_table_indexes(self, table):
        if table.type == TableType.Fact:
            self._drop_table_aggregation_indexes(table)
        if table.type == TableType.Dimension:
            self._drop_table_join_indexes(table)

    def _drop_table_join_indexes(self, table):
        for join_index in table.join_indexes:
            self.drop_join_index(join_index.name)

    def _drop_table_aggregation_indexes(self, table):
        for aggregation_index in table.aggregation_indexes:
            self.drop_aggregating_index(aggregation_index.name)

    def update_table_indexes(self, table):
        if table.type == TableType.Fact:
            self._update_table_aggregation_indexes(table)
        if table.type == TableType.Dimension:
            self._update_table_join_indexes(table)

    def _update_table_aggregation_indexes(self, table):
        for aggregation_index in table.aggregation_indexes:
            index_exists, index_is_different = self.check_table_index(table, aggregation_index)
            if index_is_different and index_exists:
                logging.warning(f"Specified index {aggregation_index.name} is different from the one in Firebolt,"
                                f" dropping the one in Firebolt and creating a new one")
                self.drop_aggregating_index(aggregation_index.name)
                index_exists = False
            if not index_exists:
                self._create_aggregation_index(table, aggregation_index)

    def check_table_index(self, table, index):
        existing_index = self.get_index_by_name(index.name)
        index_exists, index_is_different = False, False

        if existing_index:
            index_exists = True
            index_is_different = existing_index != index

            if existing_index.table_name != table.name:
                raise FireboltValidationException(f"Index {index.name} specified for {table.name}, "
                                                  f"already exists for table {existing_index.table_name} "
                                                  f"choose a different name")

        return index_exists, index_is_different

    def get_index_by_name(self, index_name):
        index_data = self.fetch_indexes()
        for index_datum in index_data:
            if index_name == index_datum["index_name"]:
                return IndexFactory.get_index(index_datum)
        return None

    def _create_aggregation_index(self, table, aggregation_index):
        aggregation_indexes = get_aggregation_index_strings(aggregation_index.aggregations)
        aggregating_table_columns = aggregation_index.key_columns + aggregation_indexes
        aggregating_table_columns = ", ".join(aggregating_table_columns)

        sql_script = f"""CREATE AND GENERATE AGGREGATING INDEX {aggregation_index.name} 
                             ON {table.name} 
                             ( {aggregating_table_columns} );
                          """  # noqa
        self.engine.run_sql(sql_script)

    def _update_table_join_indexes(self, table):
        for join_index in table.join_indexes:
            index_exists, index_is_different = self.check_table_index(table, join_index)
            if index_is_different and index_exists:
                logging.warning(f"Specified index {join_index.name} is different from the one in Firebolt,"
                                f" dropping the one in Firebolt and creating a new one")
                self.drop_join_index(join_index.name)
                index_exists = False
            if not index_exists:
                self._create_join_index(table, join_index)

    def _create_join_index(self, table, join_index):
        join_columns = [join_index.join_index_column] + join_index.dimension_columns
        join_index_columns = self.get_column_list_string(join_columns)
        sql_script = f"CREATE AND GENERATE JOIN INDEX {join_index.name} ON {table.name} ({join_index_columns});"
        self.engine.run_sql(sql_script)

    def create_external_table(self, table, csv_name, s3_staging_bucket, aws_key_id, aws_key_secret):
        columns_string = get_columns_string(table.columns)
        external_table_url = "".join(["s3://", s3_staging_bucket, '/'])
        sql_script = f"""
            CREATE EXTERNAL TABLE {table.name} 
            ( {columns_string} ) 
            URL = '{external_table_url}' 
            CREDENTIALS = ( AWS_KEY_ID = '{aws_key_id}' AWS_SECRET_KEY = '{aws_key_secret}')  
            OBJECT_PATTERN= '{csv_name}'
            TYPE = (CSV SKIP_HEADER_ROWS=1); """  # noqa
        self.engine.run_sql(sql_script)

    def ingest_from_external_to_table(self, external_table, table):
        sql_script = f"""
                   INSERT INTO {table.name}
                   SELECT *
                   FROM   {external_table.name};  
                   """  # noqa
        self.engine.run_sql(sql_script)

    def ingest_from_table_to_table(self, ingesting_table, final_table):
        ingest_script = f"INSERT INTO {final_table.name} SELECT * FROM   {ingesting_table.name};"
        self.engine.run_sql(ingest_script)

    def download_table(self, table_name):
        download_data_script = f"SELECT * FROM {table_name};"
        return self.engine.run_sql(download_data_script).get("data")

    def download_table_descriptions(self):
        download_data_script = "Show tables;"
        return self.engine.run_sql(download_data_script).get("data")

    def download_view_descriptions(self):
        download_data_script = "SELECT * FROM information_schema.views;"
        return self.engine.run_sql(download_data_script).get("data")

    def download_table_indexes(self):
        download_data_script = "Show indexes;"
        return self.engine.run_sql(download_data_script).get("data")

    def union_tables(self, incremental_table, old_table):
        id_columns = self.get_column_list_string(incremental_table.primary_indexes.columns, incremental_table.columns)
        if len(incremental_table.primary_indexes.columns) > 1:
            union_script = f"""insert into {incremental_table.name}  
                               SELECT * from {old_table.name} 
                               where CONCAT({id_columns}) NOT IN 
                               (SELECT CONCAT({id_columns}) FROM {incremental_table.name})"""  # noqa
        else:
            union_script = f"""insert into {incremental_table.name}  
                               SELECT * from {old_table.name} 
                               where {id_columns} NOT IN 
                               (SELECT {id_columns} FROM {incremental_table.name})"""  # noqa
        self.engine.run_sql(union_script)

    def delete_from_table(self, new_table, table_with_data_to_delete, old_table):
        id_columns = self.get_column_list_string(new_table.primary_indexes.columns, new_table.columns)
        if len(new_table.primary_indexes.columns) > 1:
            union_script = f"""insert into {new_table.name}  
                                       SELECT * from {old_table.name} 
                                       where CONCAT({id_columns}) NOT IN 
                                       (SELECT CONCAT({id_columns}) FROM {table_with_data_to_delete.name})"""  # noqa
        else:
            union_script = f"""insert into {new_table.name}  
                                       SELECT * from {old_table.name} 
                                       where {id_columns} NOT IN 
                                       (SELECT {id_columns} FROM {table_with_data_to_delete.name})"""  # noqa
        self.engine.run_sql(union_script)

    @staticmethod
    def get_column_list_string(primary_columns, all_columns):
        col_names = []
        for column in primary_columns:
            col_type = [col["type"] for col in all_columns if col["name"] == column][0]
            if col_type != "text":
                col_names.append(f"CAST(\"{column}\" AS TEXT)")
            else:
                col_names.append(f"\"{column}\"")
        return ",".join(col_names)



================================================
FILE: src/firebolt/engine.py
================================================
import time
import requests
import logging
from requests.exceptions import ConnectionError
from typing import Dict
from keboola.http_client import HttpClient
from .auth import get_authentication_token
from .exceptions import FireboltClientException
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

CORE_URL = "https://api.app.firebolt.io/core/v1"
ACCOUNT_ENDPOINT = "/account"
ACCOUNTS_ENDPOINT = "/accounts"
ENGINES_ENDPOINT = "/engines"
DATABASES_ENDPOINT = "/databases"
BINDINGS_ENDPOINT = "/bindings"
IAM_URL = "https://api.app.firebolt.io/iam/v2"


class FireboltEngine(HttpClient):
    def __init__(self, database_name: str):
        self.database_name = database_name
        self.authorization_header = None
        self.url = None
        self.name = None
        self.id = None
        self.account_id = None
        self.firebolt_user = None
        super().__init__(CORE_URL, max_retries=3)

    @staticmethod
    def _construct_auth_header(access_token):
        return {'Authorization': f'Bearer {access_token}'}

    def login(self, firebolt_user: str, firebolt_pass: str, engine_name: str = None) -> None:
        refresh_token, access_token = get_authentication_token(firebolt_user, firebolt_pass)
        authorization_header = self._construct_auth_header(access_token)
        self.firebolt_user = firebolt_user
        self.authorization_header = authorization_header
        self.account_id = self.get_account_id()

        if engine_name:
            self.id = self.get_engine_id_by_name(engine_name)
            self.check_engine_and_database_binding(engine_name, self.database_name)
        else:
            self.id = self.get_default_engine_of_database(self.database_name)
        self.url = self.get_engine_url_by_id(self.id)
        self.name = self.get_engine_name_from_url(self.url)

    def get_account_id(self) -> str:
        account_url = "".join([IAM_URL, ACCOUNT_ENDPOINT])
        response = self.get(endpoint_path=account_url, is_absolute_path=True, headers=self.authorization_header)
        try:
            account_id = response.get("account").get("id")
        except AttributeError:
            raise FireboltClientException("No Account ID was found for your login information")
        return account_id

    def get_default_engine_of_database(self, database_name: str) -> str:
        database_id = self.get_database_id(database_name)
        engine_id = self.get_default_engine_of_database_id(database_id)
        return engine_id

    def get_engine_id_by_name(self, engine_name: str) -> str:
        engines_url = "".join(
            [CORE_URL, ACCOUNTS_ENDPOINT, "/", self.account_id, ENGINES_ENDPOINT])
        response = self.get(endpoint_path=engines_url, is_absolute_path=True, headers=self.authorization_header)
        try:
            edges = response.get("edges")
            engine_data = [edge for edge in edges if edge.get("node").get("name") == engine_name][0]
            engine_id = engine_data.get("node").get("id").get("engine_id")
        except (AttributeError, IndexError):
            raise FireboltClientException(f"Could not find engine :{engine_name}")
        return engine_id

    def check_engine_and_database_binding(self, engine_name: str, database_name: str) -> None:
        database_id = self.get_database_id(database_name)
        engine_id = self.get_engine_id_by_name(engine_name)
        bindings_url = "".join(
            [CORE_URL, ACCOUNTS_ENDPOINT, "/", self.account_id, BINDINGS_ENDPOINT])
        response = self.get(endpoint_path=bindings_url, is_absolute_path=True, headers=self.authorization_header)
        edges = response.get("edges")
        binding = [edge for edge in edges if edge.get("node").get("id").get("engine_id") == engine_id][0]
        if binding.get("node").get("id").get("database_id") != database_id:
            raise FireboltClientException(
                f"Engine :{engine_name} is not bound to {database_name}, please make sure it is")

    def get_database_id(self, database_name: str) -> str:
        parameters = {"database_name": database_name}
        database_url = "".join(
            [CORE_URL, ACCOUNTS_ENDPOINT, "/", self.account_id, DATABASES_ENDPOINT, ":getIdByName"])
        response = self.get(endpoint_path=database_url, is_absolute_path=True, headers=self.authorization_header,
                            params=parameters)
        try:
            database_id = response.get("database_id").get("database_id")
        except AttributeError:
            raise FireboltClientException(
                f"Database {database_name} is not linked to your account "
                f"{self.firebolt_user} with account id {self.account_id}")
        return database_id

    def get_default_engine_of_database_id(self, database_id: str) -> str:
        parameters = {"filter.id_database_id_eq": database_id}
        bindings_url = "".join(
            [CORE_URL, ACCOUNTS_ENDPOINT, "/", self.account_id, BINDINGS_ENDPOINT])
        response = self.get(endpoint_path=bindings_url, is_absolute_path=True, headers=self.authorization_header,
                            params=parameters)
        try:
            edges = response.get("edges")
            default_binding = [edge for edge in edges if edge.get("node").get("engine_is_default")][0]
            default_engine_id = default_binding.get("node").get("id").get("engine_id")
        except (AttributeError, IndexError):
            raise FireboltClientException(f"Could not find default engine for database : {self.database_name}")
        return default_engine_id

    def run_sql(self, sql_script: str) -> requests.Response:
        logging.info(f"Running SQL script : {sql_script}")
        headers = self.authorization_header
        params = {'database': self.database_name}
        request_url = "".join(["https://", self.url, ":443"])
        headers["Content-Type"] = 'text/plain'
        try:
            response = self.post_raw(endpoint_path=request_url,
                                     is_absolute_path=True,
                                     headers=headers,
                                     params=params,
                                     data=sql_script)  # noqa
        except ConnectionError as conn_err:
            raise FireboltClientException(conn_err) from conn_err
        self._handle_http_error(response)
        try:
            response_data = response.json()
        except requests.exceptions.JSONDecodeError:
            raise FireboltClientException(f"Failed to process Firebolt response :{response.text}")
        return response_data

    def get_engine_url_by_id(self, engine_id: str) -> str:
        engine_url = "".join(
            [CORE_URL, ACCOUNTS_ENDPOINT, "/", str(self.account_id), ENGINES_ENDPOINT, "/", engine_id])
        response = self.get(endpoint_path=engine_url, is_absolute_path=True, headers=self.authorization_header)
        engine_url = response.get("engine").get("endpoint")
        return engine_url

    def start_engine(self) -> None:
        headers = self.authorization_header
        start_engine_url = "".join(
            [CORE_URL, ACCOUNTS_ENDPOINT, "/", str(self.account_id), ENGINES_ENDPOINT, "/", str(self.id), ":start"])
        self.post(endpoint_path=start_engine_url, is_absolute_path=True, headers=headers)
        engine_on = False
        while not engine_on:
            engine_on = self.get_engine_status()
            time.sleep(10)

    def stop_engine(self) -> None:
        headers = self.authorization_header
        stop_engine_url = "".join(
            [CORE_URL, ACCOUNTS_ENDPOINT, "/", str(self.account_id), ENGINES_ENDPOINT, "/", str(self.id), ":stop"])
        self.post(endpoint_path=stop_engine_url, is_absolute_path=True, headers=headers)

    @staticmethod
    def get_engine_name_from_url(engine_url: str) -> str:
        return engine_url.split(".")[0].replace("-", "_")

    def get_engine_id(self, url, authorization_header, database_name):
        engine = self.get_engine_data(url, authorization_header, database_name)
        return engine["node"]["id"]["engine_id"]

    def get_engine_status(self) -> bool:
        engine = self.get_engine_data(self.url, self.authorization_header, self.database_name)
        if engine["node"]["current_status_summary"] == 'ENGINE_STATUS_SUMMARY_RUNNING':
            return True
        else:
            return False

    def get_engine_data(self, url: str, authorization_header: Dict, database_name: str) -> Dict:
        headers = authorization_header
        params = {'database_name': database_name}
        engine_url = "".join([CORE_URL, ACCOUNTS_ENDPOINT, "/", str(self.account_id), ENGINES_ENDPOINT])
        response = self.get(endpoint_path=engine_url, is_absolute_path=True, headers=headers, params=params)
        engines = response.get("edges")
        for engine in engines:
            if engine["node"]["endpoint"] == url:
                return engine

    @staticmethod
    def _handle_http_error(response):
        try:
            response.raise_for_status()
        except requests.HTTPError as e:
            raise FireboltClientException(e.response.text) from e

    # override to continue on failure
    def _requests_retry_session(self, session=None):
        session = session or requests.Session()
        retry = Retry(
            total=self.max_retries,
            read=self.max_retries,
            connect=self.max_retries,
            backoff_factor=self.backoff_factor,
            status_forcelist=self.status_forcelist
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        return session



================================================
FILE: src/firebolt/exceptions.py
================================================
class FireboltClientException(Exception):
    pass


class FireboltValidationException(Exception):
    pass



================================================
FILE: src/firebolt/index.py
================================================
class FireboltIndex:
    def __init__(self, name, table_name):
        self.name = name
        self.table_name = table_name


class PrimaryIndex(FireboltIndex):
    def __init__(self, name, table_name, columns):
        super().__init__(name, table_name)
        self.columns = columns


class AggregationIndex(FireboltIndex):
    def __init__(self, name, table_name, key_columns, aggregations):
        super().__init__(name, table_name)
        self.key_columns = key_columns
        self.aggregations = aggregations

    def __eq__(self, other):
        if not isinstance(other, AggregationIndex):
            return False
        if self.name != other.name:
            return False
        if len(self.key_columns) != len(other.key_columns):
            return False
        if set(self.key_columns) != set(other.key_columns):
            return False
        if len(self.aggregations) != len(other.aggregations):
            return False
        for self_aggregation, other_aggregation in zip(self.aggregations, other.aggregations):
            # TODO FIX AGGREGATIONS
            # if self_aggregation["distinct"] != other_aggregation["distinct"]:
            #     return False
            if self_aggregation["column"].strip() != other_aggregation["column"].strip():
                return False
            if self_aggregation["function"].strip() != other_aggregation["function"].strip():
                return False
        return True


class JoinIndex(FireboltIndex):
    def __init__(self, name, table_name, join_index_column, dimension_columns):
        super().__init__(name, table_name)
        self.join_index_column = join_index_column
        self.dimension_columns = dimension_columns

    def __eq__(self, other):
        if not isinstance(other, JoinIndex):
            return False
        if self.name != other.name:
            return False
        if len(self.dimension_columns) != len(other.dimension_columns):
            return False
        if set(self.dimension_columns) != set(other.dimension_columns):
            return False
        if self.join_index_column != other.join_index_column:
            return False
        return True


class IndexFactory:
    @staticmethod
    def get_index(index_data):
        if index_data["type"] == "primary":
            return PrimaryIndex(index_data["index_name"], index_data["table_name"], index_data["expression"])
        if index_data["type"] == "aggregating":
            # TODO use parser
            expressions = [expression.replace("\"", "") for expression in index_data["expression"]]
            key_columns = IndexFactory.get_columns_from_expressions(expressions)
            aggregations = IndexFactory.get_aggregations_from_expressions(expressions)
            return AggregationIndex(index_data["index_name"], index_data["table_name"], key_columns, aggregations)
        if index_data["type"] == "join":
            # TODO use parser
            expressions = [expression.replace("\"", "") for expression in index_data["expression"]]
            join_index_column = expressions[0]
            dimension_columns = expressions[1:] if len(expressions) > 1 else []
            return JoinIndex(index_data["index_name"], index_data["table_name"], join_index_column, dimension_columns)

    # TODO use parser
    @staticmethod
    def get_aggregations_from_expressions(expressions):
        aggregations = []
        for expression in expressions:
            if "(" in expression:
                distinct = False
                if "distinct" in expression.lower():
                    distinct = True
                words = expression.replace(")", "").split("(")
                function = words[0]
                column = words[1].lower().replace("distinct", "")
                aggregations.append({
                    "column": column,
                    "function": function,
                    "distinct": distinct
                })
        return aggregations

    # TODO use parser
    @staticmethod
    def get_columns_from_expressions(expressions):
        columns = []
        for expression in expressions:
            if "(" not in expression:
                columns.append(expression)
        return columns



================================================
FILE: src/firebolt/parser.py
================================================
import json
from .index import AggregationIndex, JoinIndex
from .exceptions import FireboltClientException

FIREBOLT_TABLE_NAME = "table_name"
FIREBOLT_COLUMN_NAME = "column_name"
FIREBOLT_DATA_TYPE = "data_type"
FIREBOLT_NULLABLE = "nullable"
FIREBOLT_INDEX_TYPE = "type"
FIREBOLT_SCHEMA = "schema"

PRIMARY = "primary"
AGGREGATING = "aggregating"
JOIN = "join"


def parse_response(response):
    if response.status_code == 200:
        response_dict = json.loads(response.text)
    else:
        raise FireboltClientException(response.text)
    return response_dict


def parse_table_columns(table_data):
    columns = []
    for column in table_data:
        columns.append({"name": column[FIREBOLT_COLUMN_NAME],
                        "type": column[FIREBOLT_DATA_TYPE],
                        "nullable": column[FIREBOLT_NULLABLE]})
    return columns


def get_aggregation_index_strings(aggregation_indexes):
    aggregation_index_strings = []
    for aggregation_index in aggregation_indexes:
        aggregation_function = aggregation_index["function"]
        aggregation_column = aggregation_index["column"]
        distinct = aggregation_index.get("distinct", False)
        aggregation_index_string = "".join(
            [aggregation_function, "(", "distinct " if distinct else "", aggregation_column, ")"])
        aggregation_index_strings.append(aggregation_index_string)
    return aggregation_index_strings


def get_aggregations_from_expressions(expressions):
    aggregations = []
    for expression in expressions:
        if "(" in expression:
            distinct = False
            if "distinct" in expression.lower():
                distinct = True
            words = expression.replace(")", "").split("(")
            function = words[0]
            column = words[1].lower().replace("distinct", "")
            aggregations.append({
                "column": column,
                "function": function,
                "distinct": distinct
            })
    return aggregations


def get_columns_from_expressions(expressions):
    return [expression for expression in expressions if "(" not in expression]


def parse_primary_indexes(index_data):
    primary_indexes = []
    for index in index_data:
        if index[FIREBOLT_INDEX_TYPE] == PRIMARY:
            index_columns = index["expression"]
            primary_indexes.extend(index_columns)
    return primary_indexes


def parse_aggregation_indexes(index_data):
    aggregation_indexes = []
    for index in index_data:
        if index[FIREBOLT_INDEX_TYPE] == AGGREGATING:
            index_name = index["index_name"]
            key_columns, aggregations = parse_aggregation_expression(index)
            aggregation_indexes.append(AggregationIndex(index_name, index["table_name"], key_columns, aggregations))
    return aggregation_indexes


def parse_aggregation_expression(index_data):
    expressions = [expression.replace("\"", "") for expression in index_data["expression"]]
    key_columns = get_columns_from_expressions(expressions)
    aggregations = get_aggregations_from_expressions(expressions)
    return key_columns, aggregations


def parse_join_indexes(indexes):
    join_indexes = []
    for index in indexes:
        if index[FIREBOLT_INDEX_TYPE] == JOIN:
            index_name = index["index_name"]
            join_index_column, dimension_columns = parse_join_expression(index)
            join_indexes.append(JoinIndex(index_name, index["table_name"], join_index_column, dimension_columns))
    return join_indexes


def parse_join_expression(index_data):
    expressions = [expression.replace("\"", "") for expression in index_data["expression"]]
    join_index_column = expressions[0]
    dimension_columns = expressions[1:] if len(expressions) > 1 else []
    return join_index_column, dimension_columns


def get_primary_indexes_string(primary_indexes):
    primary_index_strs = [f"\"{primary_index}\"" for primary_index in primary_indexes.columns]
    return ", ".join(primary_index_strs)


def get_columns_string(input_columns):
    column_strings = []
    for input_column in input_columns:
        not_null_str = "NULL" if input_column["nullable"] else "NOT NULL"
        col_str = "".join(["\"", input_column["name"], "\""])
        column_strings.append(" ".join([col_str, input_column["type"], not_null_str]))
    return ", ".join(column_strings)



================================================
FILE: src/firebolt/table.py
================================================
from .index import PrimaryIndex, AggregationIndex, JoinIndex
from enum import Enum

FIREBOLT_INDEX_TYPE = "type"


class TableType(Enum):
    Fact = "Fact"
    Dimension = "Dimension"
    External = "External"
    DEFAULT = ""


class FireboltTable:
    def __init__(self, table_name):
        self.name = table_name
        self.exists = False
        self.columns = []
        self.primary_indexes = []
        self.type = TableType.DEFAULT

    def get_table_type(self):
        return self.type.name

    def set_column(self, columns):
        self.columns = columns

    def set_primary_index(self, columns):
        index_name = "_".join(["primary", self.name])
        self.primary_indexes = PrimaryIndex(index_name, self.name, columns)


class FireboltFactTable(FireboltTable):
    def __init__(self, table_name):
        super().__init__(table_name)
        self.aggregation_indexes = []
        self.type = TableType.Fact

    def set_aggregation_indexes(self, aggregation_indexes):
        self.aggregation_indexes = aggregation_indexes

    def add_aggregation_index(self, index_name, key_columns, aggregations):
        new_aggregation_index = AggregationIndex(index_name, self.name, key_columns, aggregations)
        for i, aggregation_index in enumerate(self.aggregation_indexes):
            if aggregation_index.name == new_aggregation_index.name and \
                    aggregation_index.table_name == new_aggregation_index.table_name and \
                    aggregation_index != new_aggregation_index:
                self.aggregation_indexes[i] = new_aggregation_index
                return
        self.aggregation_indexes.append(new_aggregation_index)


class FireboltDimensionTable(FireboltTable):
    def __init__(self, table_name):
        super().__init__(table_name)
        self.primary_indexes = []
        self.join_indexes = []
        self.type = TableType.Dimension

    def set_join_indexes(self, join_indexes):
        self.join_indexes = join_indexes

    def add_join_index(self, index_name, join_index_column, dimension_columns):
        join_index = JoinIndex(index_name, self.name, join_index_column, dimension_columns)
        self.join_indexes.append(join_index)


class FireboltExternalTable(FireboltTable):
    def __init__(self, table_name):
        super().__init__(table_name)
        self.type = TableType.External


class FireboltTableFactory:
    @staticmethod
    def get_firebolt_table(table_name, table_type):
        if table_type == TableType.Fact:
            return FireboltFactTable(table_name)
        if table_type == TableType.Dimension:
            return FireboltDimensionTable(table_name)



================================================
FILE: src/s3/__init__.py
================================================
from .client import S3Client # noqa


================================================
FILE: src/s3/client.py
================================================
import boto3
import logging
from botocore.exceptions import ClientError
from typing import List


class S3ClientException(Exception):
    pass


class S3Client:
    def __init__(self, key_id: str, key_secret: str, aws_region: str):
        self.key_id = key_id
        self.key_secret = key_secret
        self.aws_region = aws_region
        self.client = None
        self.resource = None

    def login(self):
        self.client = boto3.client('s3', aws_access_key_id=self.key_id, aws_secret_access_key=self.key_secret,
                                   region_name=self.aws_region)
        self.resource = boto3.resource('s3', aws_access_key_id=self.key_id, aws_secret_access_key=self.key_secret,
                                       region_name=self.aws_region)

    def upload_to_bucket(self, input_table_name: str, input_table_path: str, bucket_name: str) -> None:
        if self.client:
            with open(input_table_path, "rb") as f:
                self.client.upload_fileobj(f, bucket_name, input_table_name)
        else:
            raise S3ClientException("Log in to client before performing actions")

    def clean_bucket(self, bucket_name: str, prefix: str = 'KBC_STAGING_') -> None:
        if not self.client:
            raise S3ClientException("Log in to client before performing actions")
        try:
            bucket = self.resource.Bucket(bucket_name)
            bucket.objects.filter(Prefix=prefix).delete()
        except ClientError as e:
            logging.error(e)

    def check_if_bucket_exists(self, bucket_name: str) -> bool:
        if not self.client:
            raise S3ClientException("Log in to client before performing actions")
        if self.resource.Bucket(bucket_name) in self.resource.buckets.all():
            return True
        return False

    def list_objects_in_bucket(self, bucket_name: str) -> List:
        if not self.client:
            raise S3ClientException("Log in to client before performing actions")
        bucket = self.resource.Bucket(bucket_name)
        objects_in_bucket = []
        for my_bucket_object in bucket.objects.all():
            objects_in_bucket.append(my_bucket_object.key)
        return objects_in_bucket



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: tests/test_functional.py
================================================
import json
import os
import unittest
import logging
import csv
from operator import itemgetter
from random import randint
from datadirtest import DataDirTester, TestDataDir
from keboola.component import CommonInterface

from src.firebolt import FireboltClient
import warnings


class FireboltWriterIntegrationTest(TestDataDir):
    def run_component(self):
        os.environ['KBC_RUNID'] = "xx" + str(self.random_with_n_digits(8)) + "xx"
        self.ci.environment_variables.run_id = "xx" + str(self.random_with_n_digits(8)) + "xx"
        super().run_component()
        self.download_result_tables()

    def download_result_tables(self):
        fb_client = FireboltClient(firebolt_user=os.environ['FIREBOLT_USER_NAME'],
                                   firebolt_pass=os.environ['FIREBOLT_PASSWORD'],
                                   database_name=os.environ['FIREBOLT_TEST_DB_NAME'])
        fb_client.login()

        out_tables_path = self.ci.tables_out_path
        config_dict = self.ci.configuration.config_data
        table_name = config_dict["parameters"]["dbName"]
        table_data = fb_client.download_table(table_name)

        print()
        print("downloading result tables")
        print(table_name)
        try:
            run_id = fb_client.download_table_descriptions()[0]["table_name"].split("xx")[1]
        except IndexError:
            run_id = ""
        print(f"run_id : {run_id}")
        run_id = str(run_id)

        if not os.path.exists(out_tables_path):
            os.makedirs(out_tables_path)

        table_data_sorted = sorted(table_data, key=itemgetter('first_name'))
        self.write_data_to_file(os.path.join(out_tables_path, "table_data.csv"), table_data_sorted)
        table_description_data = fb_client.download_table_descriptions()
        for i, description in enumerate(table_description_data):
            for key in table_description_data[i]:
                if isinstance(table_description_data[i][key], str):
                    table_description_data[i][key] = table_description_data[i][key].replace(run_id, "")

        self.write_data_to_file(os.path.join(out_tables_path, "table_description_data.csv"),
                                table_description_data,
                                columns=["table_name", "state", "table_type", "column_count", "primary_index", "schema",
                                         "number_of_rows"])

        index_data = fb_client.download_table_indexes()
        for i, description in enumerate(index_data):
            for key in index_data[i]:
                if isinstance(index_data[i][key], str):
                    index_data[i][key] = index_data[i][key].replace(run_id, "")
        self.write_data_to_file(os.path.join(out_tables_path, "index_data.csv"),
                                index_data,
                                columns=["index_name", "table_name", "type", "expression"])

    @staticmethod
    def write_data_to_file(file_name, data, columns=None):
        with open(file_name, 'w') as csvfile:
            fieldnames = list(data[0].keys())
            if columns:
                fieldnames = columns
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames, extrasaction='ignore')
            writer.writeheader()
            for datum in data:
                writer.writerow(datum)

    def _inject_firebolt_credentials(self):
        config_dict = self.ci.configuration.config_data
        firebolt_user = os.environ['FIREBOLT_USER_NAME']
        firebolt_pass = os.environ['FIREBOLT_PASSWORD']
        database_name = os.environ['FIREBOLT_TEST_DB_NAME']
        staging_bucket = os.environ['FIREBOLT_STAGING_BUCKET']
        aws_id = os.environ['AWS_API_KEY_ID']
        aws_secret = os.environ['AWS_API_KEY_SECRET']
        fb_driver = os.environ['FIREBOLT_DRIVER']
        aws_region = os.environ['AWS_REGION']

        config_dict["parameters"]['db']['user'] = firebolt_user
        config_dict['parameters']['db']['#password'] = firebolt_pass
        config_dict['parameters']['db']['database'] = database_name
        config_dict['parameters']['db']['staging_bucket'] = staging_bucket
        config_dict['parameters']['db']['aws_api_key_id'] = aws_id
        config_dict['parameters']['db']['#aws_api_key_secret'] = aws_secret
        config_dict['parameters']['db']['driver'] = fb_driver
        config_dict['parameters']['db']['aws_region'] = aws_region

        with open(os.path.join(self.ci.data_folder_path, 'config.json'), 'w+') as cfg_out:
            json.dump(config_dict, cfg_out)

    def setUp(self):
        """
        Executes before test.
        """

        super().setUp()
        os.environ['KBC_CONFIGID'] = "2"

        print()
        print()
        print()
        print(f"Setup")
        print()
        print()
        print()

        self.ci = CommonInterface(data_folder_path=os.path.join(self.data_dir, "source", "data"))

        self._inject_firebolt_credentials()

        fb_client = FireboltClient(firebolt_user=os.environ['FIREBOLT_USER_NAME'],
                                   firebolt_pass=os.environ['FIREBOLT_PASSWORD'],
                                   database_name=os.environ['FIREBOLT_TEST_DB_NAME'])

        fb_client.login()
        self.cleanup_firebolt(fb_client)

        logging.info("Creating SETUP background table")
        fb_client.engine.run_sql(f"""CREATE {self.ci.configuration.parameters["table_type"]} 
        TABLE IF NOT EXISTS background_table 
        ( first_name text,last_name text,message text,pay int) primary index first_name;""")  # noqa

        logging.info("Ingesting SETUP Data")
        fb_client.engine.run_sql("""
        Insert into background_table VALUES ('Adam','Bako','Testing Firebolt', 300),
        ('Adama','Bakova','Hi Everyone', 150);""")  # noqa

        logging.info("Creating SETUP view")
        fb_client.engine.run_sql(f"""CREATE VIEW {self.ci.configuration.parameters["dbName"]} AS 
        SELECT * FROM background_table;""")  # noqa

    @staticmethod
    def random_with_n_digits(n: int) -> int:
        range_start = 10 ** (n - 1)
        range_end = (10 ** n) - 1
        return randint(range_start, range_end)

    def tearDown(self) -> None:
        """
        Executes after test
        """
        fb_client = FireboltClient(firebolt_user=os.environ['FIREBOLT_USER_NAME'],
                                   firebolt_pass=os.environ['FIREBOLT_PASSWORD'],
                                   database_name=os.environ['FIREBOLT_TEST_DB_NAME']
                                   )
        fb_client.login()

        self.cleanup_firebolt(fb_client)

    def cleanup_firebolt(self, fb_client):
        existing_indexes = fb_client.download_table_indexes()
        aggregation_indexes = [agg_index for agg_index in existing_indexes if agg_index["type"] == "aggregating"]
        join_indexes = [join_index for join_index in existing_indexes if join_index["type"] == "join"]

        views = fb_client.download_view_descriptions()
        tables = fb_client.download_table_descriptions()

        logging.info("Dropping Aggregation Indexes")
        for aggregation_index in aggregation_indexes:
            logging.info(f"Dropping {aggregation_index['index_name']}")
            fb_client.drop_aggregating_index(aggregation_index["index_name"])

        logging.info("Dropping Join Indexes")
        for join_index in join_indexes:
            logging.info(f"Dropping {join_index['index_name']}")
            fb_client.drop_join_index(join_index["index_name"])

        logging.info("Dropping Views")
        for view in views:
            logging.info(f"Dropping {view['table_name']}")
            fb_client.drop_view(view["table_name"])

        logging.info("Dropping Tables")
        for table in tables:
            logging.info(f"Dropping {table['table_name']}")
            fb_client.drop_table(table["table_name"])


class TestComponent(unittest.TestCase):

    def test_functional(self):
        warnings.filterwarnings(action="ignore", message="unclosed", category=ResourceWarning)
        functional_tests = DataDirTester(test_data_dir_class=FireboltWriterIntegrationTest)
        functional_tests.run()


if __name__ == "__main__":
    unittest.main()



================================================
FILE: tests/functional/delete/source/data/config.json
================================================
{
  "definition": {
    "component": "kds-team.wr-firebolt"
  },
  "parameters": {
    "db": {
      "user": "xxxxx",
      "database": "xxxxx",
      "#password": "xxxxx",
      "driver": "xxxxx",
      "aws_region": "xxxxx",
      "aws_api_key_id": "xxxxx",
      "#aws_api_key_secret": "xxxxx",
      "staging_bucket": "xxxxx"
    },
    "items": [
      {
        "name": "first_name",
        "dbName": "first_name",
        "type": "VARCHAR",
        "nullable": false,
        "size": ""
      },
      {
        "name": "last_name",
        "dbName": "last_name",
        "type": "VARCHAR",
        "nullable": false,
        "size": ""
      },
      {
        "name": "message",
        "dbName": "message",
        "type": "VARCHAR",
        "nullable": false,
        "size": ""
      },
      {
        "name": "pay",
        "dbName": "pay",
        "type": "INT",
        "nullable": false,
        "size": ""
      }
    ],
    "dbName": "delete_from",
    "table_type": "Dimension",
    "primaryIndex": [
      "first_name"
    ],
    "loading_options": {
      "load_type": "Delete from"
    }
  },
  "image_parameters": []
}


================================================
FILE: tests/functional/delete/source/data/in/tables/firebolt_data_DEFAULT.csv
================================================
first_name,last_name,message,pay
Adam,Bako,Firebolt works great,10
Libor,Balko,twas amazing,20


================================================
FILE: tests/functional/full-load/source/data/config.json
================================================
{
  "definition": {
    "component": "kds-team.wr-firebolt"
  },
  "parameters": {
    "db": {
      "user": "xxxxx",
      "database": "xxxxx",
      "#password": "xxxxx",
      "driver": "xxxxx",
      "aws_region": "xxxxx",
      "aws_api_key_id": "xxxxx",
      "#aws_api_key_secret": "xxxxx",
      "staging_bucket": "xxxxx"
    },
    "items": [
      {
        "name": "first_name",
        "dbName": "first_name",
        "type": "VARCHAR",
        "nullable": false,
        "size": ""
      },
      {
        "name": "last_name",
        "dbName": "last_name",
        "type": "VARCHAR",
        "nullable": false,
        "size": ""
      },
      {
        "name": "message",
        "dbName": "message",
        "type": "VARCHAR",
        "nullable": false,
        "size": ""
      },
      {
        "name": "pay",
        "dbName": "pay",
        "type": "INT",
        "nullable": false,
        "size": ""
      }
    ],
    "dbName": "full_load",
    "table_type": "Dimension",
    "primaryIndex": [
      "first_name"
    ],
    "loading_options": {
      "load_type": "Full load"
    }
  },
  "image_parameters": []
}


================================================
FILE: tests/functional/full-load/source/data/in/tables/firebolt_data_DEFAULT.csv
================================================
first_name,last_name,message,pay
Adam,Bako,Firebolt works great,10
Libor,Balko,twas amazing,20
Peter,Lopta,Ahoj,30
Marta,Simekova,Hello,40


================================================
FILE: tests/functional/incremental/source/data/config.json
================================================
{
  "definition": {
    "component": "kds-team.wr-firebolt"
  },
  "parameters": {
    "db": {
      "user": "xxxxx",
      "database": "xxxxx",
      "#password": "xxxxx",
      "driver": "xxxxx",
      "aws_region": "xxxxx",
      "aws_api_key_id": "xxxxx",
      "#aws_api_key_secret": "xxxxx",
      "staging_bucket": "xxxxx"
    },
    "items": [
      {
        "name": "first_name",
        "dbName": "first_name",
        "type": "VARCHAR",
        "nullable": false,
        "size": ""
      },
      {
        "name": "last_name",
        "dbName": "last_name",
        "type": "VARCHAR",
        "nullable": false,
        "size": ""
      },
      {
        "name": "message",
        "dbName": "message",
        "type": "VARCHAR",
        "nullable": false,
        "size": ""
      },
      {
        "name": "pay",
        "dbName": "pay",
        "type": "INT",
        "nullable": false,
        "size": ""
      }
    ],
    "dbName": "incremental",
    "table_type": "Dimension",
    "primaryIndex": [
      "first_name"
    ],
    "loading_options": {
      "load_type": "Incremental load"
    }
  },
  "image_parameters": []
}


================================================
FILE: tests/functional/incremental/source/data/in/tables/firebolt_data_DEFAULT.csv
================================================
first_name,last_name,message,pay
Adam,Bako,Firebolt works great yes,100
Libor,Balko,twas amazing,20
New,Person,hi amazing,20

