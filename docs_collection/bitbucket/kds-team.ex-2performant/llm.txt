Directory structure:
└── kds_consulting_team-kds-team.ex-2performant/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   └── state.json
    │       └── out/
    │           └── tables/
    │               ├── commissions.csv
    │               └── commissions.csv.manifest
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── main.py
    │   └── lib/
    │       ├── client.py
    │       ├── component.py
    │       └── result.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
File: README.md
================================================
# 2Performant Affiliate Extractor

The 2Performant extractor allows to download all commissions and their transactions.

To successfully use the extractor, a username and password used to access [network.2performant.com](https://network.2performant.com/) is needed.

## Configuration

A configuration of 3 mandatory parameters is required. A sample configuration of the component can be found in [component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-2performant/src/master/component_config/sample-config/).

- username (`username`) - a username used to login to 2performant;
- password (`#password`) - a password associated with username;
- month delta (`monthsBack`) - a positive integer marking the amount of months for which to download commissions;
- incremental load (`incremental`) - a boolean marking, whether incremental load should be used.

## Output

A table with commissions returned by the API. Table is loaded incrementally with column `id` used as primary key.

## Development

For developing the component, build and run the component with:

```
docker-compose build dev
docker-compose run --rm dev
```

================================================
File: Dockerfile
================================================
FROM python:3.7.2-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential
RUN pip install flake8
RUN pip install -r /code/requirements.txt

WORKDIR /code/

CMD ["python3", "-u", "/code/src/main.py"]

================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        script:
          - export APP_IMAGE=$APP_IMAGE
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
#          - echo 'Pushing test image to repo. [tag=test]'
#          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#          - docker tag $APP_IMAGE:latest $REPOSITORY:test
#          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: change_log.md
================================================
**0.1.2**
Added option to specify incremnetal load.

**0.1.1**
Added check for negative rollback parameters.

**0.1.0**
First working version of the extractor
Downloads all commissions within specified time range

================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.4.zip#egg=kbc
logging_gelf==0.0.18

================================================
File: component_config/component_long_description.md
================================================
# 2Performant Affiliate Extractor

The 2Performant extractor allows to download all commissions and their transactions.

To successfully use the extractor, a username and password used to access [network.2performant.com](https://network.2performant.com/) is needed.

## Configuration

A configuration of 3 mandatory parameters is required. A sample configuration of the component can be found in [component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-2performant/src/master/component_config/sample-config/).

- username (`username`) - a username used to login to 2performant;
- password (`#password`) - a password associated with username;
- month delta (`monthsBack`) - a positive integer marking the amount of months for which to download commissions;
- incremental load (`incremental`) - a boolean marking, whether incremental load should be used.

## Output

A table with commissions returned by the API. Table is loaded incrementally with column `id` used as primary key.

================================================
File: component_config/component_short_description.md
================================================
2perfomant service tracks commissions and affiliates.

================================================
File: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Parameters",
  "required": [
    "#password",
    "username",
    "monthsBack",
    "incremental"
  ],
  "properties": {
    "#password": {
      "type": "string",
      "title": "Password",
      "format": "password",
      "minLength": 1,
      "description": "User password used to log in to <a href='https://network.2performant.com/'>network.2performant.com</a>.",
      "propertyOrder": 200
    },
    "username": {
      "type": "string",
      "title": "Username",
      "description": "User name used to log in to <a href='https://network.2performant.com/'>network.2performant.com</a>.",
      "propertyOrder": 100,
      "minLength": 1,
      "default": ""
    },
    "monthsBack": {
      "type": "integer",
      "title": "Month delta",
      "default": 4,
      "maximum": 48,
      "minimum": 1,
      "description": "The amount of months, including this one, for which to download the data. Functionality is as follows: <ul><li>1 - downloads data for current month,</li><li>2 - downloads data for current and previous month,</li><li>3 - downloads data for this, previous and month prior to that,</li><li>4 - etc.</li>",
      "propertyOrder": 300
    },
    "incremental": {
      "type": "boolean",
      "title": "Incremental load",
      "default": true,
      "description": "Use incremental load to storage.",
      "propertyOrder": 400
    }
  }
}

================================================
File: component_config/configuration_description.md
================================================
#### Input

A configuration of 3 mandatory parameters is required. A sample configuration of the component can be found in [component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-2performant/src/master/component_config/sample-config/).

- username (`username`) - a username used to login to 2performant;
- password (`#password`) - a password associated with username;
- month delta (`monthsBack`) - a positive integer marking the amount of months for which to download commissions;
- incremental load (`incremental`) - a boolean marking, whether incremental load should be used.

#### Output

A table with commissions returned by the API. Table is loaded incrementally with column `id` used as primary key.

================================================
File: component_config/stack_parameters.json
================================================
{}

================================================
File: component_config/sample-config/config.json
================================================
{
  "parameters": {
    "username": "john@doe.com",
    "#password": "abcedfg123445",
    "monthsBack": 6,
    "incremental": true
  },
  "image_parameters": {}
}

================================================
File: component_config/sample-config/in/state.json
================================================
{}

================================================
File: component_config/sample-config/out/tables/commissions.csv
================================================
"id","actionid","user_id","amount","status","affrequest_id","description","created_at","updated_at","reason","transaction_id","stats_tags","history","currency","working_currency_code","program_id","registered_in_budget_lock","from_recruited","amount_in_working_currency","actiontype","user_name","user_role","user_unique_code","user_login","user_avatar_url","public_action_data_created_at","public_action_data_updated_at","public_action_data_rate","public_action_data_amount","public_action_data_ad_type","public_action_data_ad_id","public_action_data_source_ip","public_action_data_description","public_action_data_working_currency_code","public_action_data_amount_in_working_currency","public_click_data_created_at","public_click_data_source_ip","public_click_data_url","public_click_data_redirect_to","public_click_data_device_type"
"1","1","1","0.66","pending","1179934","DESCR1","2019-08-20T17:49:24Z","2019-08-20T17:49:24Z","","23371683","","","EUR","RON","1021","False","False","3.14","sale","Company1","affiliate","38354e075","user1","","2019-08-20T17:49:24Z","2019-08-20T17:49:24Z","12.0","5.54","product_store","17028417","165.225.73.0","","RON","26.2","2019-08-19T17:12:41Z","165.225.73.0","https://www.i/chiloti-barbati/","","Desktop"
"2","2","2","2.48","paid","857313","DESCR2","2019-08-20T17:40:27Z","2019-08-20T17:40:27Z","","23371649",",5775,","","EUR","RON","1021","False","False","11.71","sale","Company1","affiliate","00f779e88","user2","","2019-08-20T17:40:27Z","2019-08-20T17:40:27Z","12.0","20.63","quicklink","1021","2a02:2f08:f103::","","RON","97.61","2019-08-20T17:30:31Z","2a02:2f08:f103::","https://www.google.com/","","Desktop"


================================================
File: component_config/sample-config/out/tables/commissions.csv.manifest
================================================
{"primary_key": ["id"], "incremental": true}

================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi

================================================
File: src/main.py
================================================
import logging
import os
import sys
import logging_gelf.handlers
import logging_gelf.formatters
from lib.component import Component

# Environment setup
sys.tracebacklimit = 0

# Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)-8s : [line:%(lineno)3s] %(message)s',
    datefmt="%Y-%m-%d %H:%M:%S")

if 'KBC_LOGGER_ADDR' in os.environ and 'KBC_LOGGER_PORT' in os.environ:

    logger = logging.getLogger()
    logging_gelf_handler = logging_gelf.handlers.GELFTCPSocketHandler(
        host=os.getenv('KBC_LOGGER_ADDR'), port=int(os.getenv('KBC_LOGGER_PORT')))
    logging_gelf_handler.setFormatter(
        logging_gelf.formatters.GELFFormatter(null_character=True))
    logger.addHandler(logging_gelf_handler)

    # remove default logging to stdout
    logger.removeHandler(logger.handlers[0])

APP_VERSION = '0.1.3'

if __name__ == '__main__':

    logging.info("Running component version %s..." % APP_VERSION)
    c = Component()
    c.run()

    logging.info("Extraction finished!")


================================================
File: src/lib/client.py
================================================
import logging
import json
import os
import sys
from kbc.client_base import HttpClientBase

BASE_URL = 'https://api.2performant.com/'


class client2Performant(HttpClientBase):

    def __init__(self, username, password):

        self.paramUsername = username
        self.paramPassword = password

        _def_headers = {
            "Accept": "application/json",
            "Content-Type": "application/json"
        }

        HttpClientBase.__init__(self, base_url=BASE_URL, default_http_header=_def_headers,
                                status_forcelist=(502, 504), max_retries=10)

        self._login()

    def _login(self):

        _body = {
            "user": {
                "email": self.paramUsername,
                "password": self.paramPassword
            }
        }

        _urlLogin = os.path.join(self.base_url, 'users/sign_in.json')
        _reqLogin = self.post_raw(_urlLogin, data=json.dumps(_body))

        if _reqLogin.status_code == 200:

            self.varAccessToken = _reqLogin.headers['access-token']
            self.varClient = _reqLogin.headers['client']
            self.varUID = _reqLogin.headers['uid']

            logging.info("Credentials obtained.")

        else:

            logging.error("Could not login and obtain an access token.")
            logging.error(f"Response received: %{_reqLogin.status_code} - {_reqLogin.reason}.")

            sys.exit(1)

    def _getCommissions(self, page, dateFilter):

        _headers = {
            "access-token": self.varAccessToken,
            "uid": self.varUID,
            "client": self.varClient
        }

        _params = {
            "page": page,
            "filter[date]": dateFilter
        }

        _urlCommissions = os.path.join(self.base_url, 'advertiser/programs/default/commissions')
        _reqCommissions = self.get_raw(_urlCommissions, headers=_headers, params=_params)

        if _reqCommissions.status_code == 200:
            return _reqCommissions.json()['commissions']

        else:
            logging.error(f"Unhandled exception. Received {_reqCommissions.status_code} - {_reqCommissions.json()}.")
            sys.exit(1)

    def getPagedCommissions(self, dateFilter):

        allCommissions = []
        reachedEnd = False
        reqPage = 0

        while not reachedEnd:

            reqPage += 1
            _respCommissions = self._getCommissions(reqPage, dateFilter)

            if len(_respCommissions) == 0:
                reachedEnd = True

            else:
                allCommissions += _respCommissions

        return allCommissions


================================================
File: src/lib/component.py
================================================
import datetime
import logging
import sys
from lib.client import client2Performant
from lib.result import resultWriter
from kbc.env_handler import KBCEnvHandler


USERNAME_KEY = 'username'
PASSWORD_KEY = '#password'
MONTHS_KEY = 'monthsBack'
INCREMENTAL_KEY = 'incremental'

MANDATORY_PARAMS = [USERNAME_KEY, PASSWORD_KEY, MONTHS_KEY]


class Component(KBCEnvHandler):

    def __init__(self):

        KBCEnvHandler.__init__(self, MANDATORY_PARAMS)
        self.validate_config(MANDATORY_PARAMS)

        self.paramUsername = self.cfg_params[USERNAME_KEY]
        self.paramPassword = self.cfg_params[PASSWORD_KEY]
        self.paramMonths = self.cfg_params[MONTHS_KEY]
        self.paramIncremental = self.cfg_params[INCREMENTAL_KEY]

        if isinstance(self.paramMonths, int) is False:

            logging.error("Parameter \"monthsBack\" must be an integer!")
            sys.exit(1)

        elif int(self.paramMonths) <= 0:

            logging.error("Parameter \"monthsBack\" must be a positive integer!")
            sys.exit(1)

        if isinstance(self.paramIncremental, bool) is False:

            logging.error("Parameter \"incremental\" must be a boolean!")
            sys.exit(1)

        self.client = client2Performant(username=self.paramUsername, password=self.paramPassword)
        self.writer = resultWriter(self.data_path, incrementalLoad=self.paramIncremental)
        self.varMonthRange = self._generateDateRange(self.paramMonths - 1)

    @staticmethod
    def monthdelta(date, delta):
        m, y = (date.month+delta) % 12, date.year + ((date.month)+delta-1) // 12

        if not m:
            m = 12
        d = min(date.day, [31,
                           29 if y % 4 == 0 and not y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][m-1])
        return date.replace(day=d, month=m, year=y).strftime('%Y%m')

    def _generateDateRange(self, timeDelta):

        now = datetime.datetime.utcnow()
        for i in range(0, timeDelta + 1):

            yield Component.monthdelta(now, -i)

    def run(self):

        for month in self.varMonthRange:

            logging.info("Downloading data for %s..." % month)

            pagedResults = self.client.getPagedCommissions(month)
            flattenedResults = [self.writer.flattenJSON(r) for r in pagedResults]
            self.writer.writerCommissions.writerows(flattenedResults)

            logging.info("Data extraction for %s finished successfully!" % month)


================================================
File: src/lib/result.py
================================================
import csv
import json
import os
from kbc.result import KBCResult, KBCTableDef

FIELDS_COMMISSIONS = ['id', 'actionid', 'user_id', 'amount', 'status',
                      'affrequest_id', 'description', 'created_at', 'updated_at',
                      'reason', 'transaction_id', 'stats_tags', 'history', 'currency',
                      'working_currency_code', 'program_id', 'registered_in_budget_lock',
                      'from_recruited', 'amount_in_working_currency', 'actiontype', 'user_name',
                      'user_role', 'user_unique_code', 'user_login', 'user_avatar_url',
                      'public_action_data_created_at', 'public_action_data_updated_at',
                      'public_action_data_rate', 'public_action_data_amount', 'public_action_data_ad_type',
                      'public_action_data_ad_id', 'public_action_data_source_ip',
                      'public_action_data_description', 'public_action_data_working_currency_code',
                      'public_action_data_amount_in_working_currency', 'public_click_data_created_at',
                      'public_click_data_source_ip', 'public_click_data_url', 'public_click_data_redirect_to',
                      'public_click_data_device_type']
PK_COMMISSIONS = ['id']


class resultWriter:

    def __init__(self, dataPath, incrementalLoad):

        self.paramDataPath = dataPath
        self.paramIncremental = incrementalLoad
        self.run()

    def createTableDefinition(self, tableName, tableColumns, tablePK):

        _fileName = tableName + '.csv'
        _fullPath = os.path.join(
            self.paramDataPath, 'out', 'tables', _fileName)

        _tableDef = KBCTableDef(
            name=tableName, columns=tableColumns, pk=tablePK)
        _resultDef = KBCResult(file_name=_fileName,
                               full_path=_fullPath, table_def=_tableDef)

        return _resultDef

    @staticmethod
    def createWriter(tableDefinition):

        _writer = csv.DictWriter(open(tableDefinition.full_path, 'w'),
                                 fieldnames=tableDefinition.table_def.columns,
                                 restval='', extrasaction='ignore',
                                 quotechar='"', quoting=csv.QUOTE_ALL)

        _writer.writeheader()

        return _writer

    @staticmethod
    def createManifest(destination, pk=[], incremental=False):

        _manifest = {'primary_key': pk, 'incremental': incremental}

        with open(destination, 'w') as _manFile:
            json.dump(_manifest, _manFile)

    @staticmethod
    def flattenJSON(y):
        out = {}

        def flatten(x, name=''):
            if type(x) is dict:
                for a in x:
                    flatten(x[a], name + a + '_')
            elif type(x) is list:
                i = 0
                for a in x:
                    flatten(a, name + str(i) + '_')
                    i += 1
            else:
                out[name[:-1]] = x

        flatten(y)
        return out

    def run(self):

        _commissionTableDef = self.createTableDefinition('commissions', FIELDS_COMMISSIONS, PK_COMMISSIONS)
        self.writerCommissions = self.createWriter(_commissionTableDef)
        self.createManifest(destination=_commissionTableDef.full_path + '.manifest',
                            pk=_commissionTableDef.table_def.pk,
                            incremental=self.paramIncremental)


