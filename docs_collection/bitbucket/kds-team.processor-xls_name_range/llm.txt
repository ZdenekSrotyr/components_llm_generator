Directory structure:
└── kds_consulting_team-kds-team.processor-xls_name_range/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   └── component.py
    └── tests/
        ├── __init__.py
        ├── test_component.py
        └── test_functional.py

================================================
FILE: README.md
================================================
# XLSX name ranges processor

Converts named ranges in [`.xlsx`,.`xlsm`,`.xltx`,`.xltm`] files present in the `data/in/files/` into `csv` format. 
**All sheets** are processed. The result files are stored in `data/out/tables/` with manifests as a sliced tables.


**Table of contents:**  
  
[TOC]

## Functional notes

- The processor supports only [`.xlsx`,.`xlsm`,`.xltx`,`.xltm`] files
- All sheets are processed
- It is possible to continue on failure using the parameter flag
- It is possible to select multiple ranges based on regex pattern that will be treated as a single table.
- If same named range is found in multiple files or multiple ranges match the pattern, the number of columns must be the same otherwise the parsing will fail. 
One name range / pattern is considered as a one type of table.
- The result table table is matching the range name (lowercase) or the table name specified in the pattern. 
- Empty column names are automatically generated like `header_i` where `i` is index of the column from 
left hand side.

## Configuration

### Specify ranges

Processor allows two modes of filtering names which are mutually exclusive. If none of the parameters is specified, 
all ranges are downloaded.

Specify mode using one of the following parameters:

- **range_names** - *[OPT]* Extract only specified ranges. 
- **range_patterns** - *[OPT]* A list of objects with following structure: `{"pattern":"result_*", "res_table_name": "results"}`. 
Extract only ranges matching specified `regex` patterns. Property `res_table_name` specifies the result Storage table name.
- **continue_on_failure** - *[OPT]* Default: `0`. If specified or set to 1, the extraction will continue on parsing failures and affected files 
and ranges will be listed in the job log.
- **ignore_missing_ranges** - *[OPT]* Default: `true`. If set to false, the extraction will fail if a 
  specified range name is missing in the input sheets.
- **add_xls_filename** - *[OPT]* `true`/`false`. Default: `false`. Add column containing source file name, named `extracted_filename`. Useful when processing multiple files containing 
name range with the same name.
- **add_range_name** - *[OPT]* `true`/`false`. Default: `false`. Add column containing source range name or pattern, named `extracted_range_name`.
- **header_from_first_row** - *[OPT]* `true`/`false`. Default: `true`. If set to false, first line will be assumed to be data and
and header names will be automatically generated like `header_[i]` where [i] is index of the column. **NOTE** if left to `true` 
first row will be dropped from data and used as header.

### Sample configuration

```json
{
    "definition": {
        "component": "kds-team.processor-xlsx-name-ranges-2-csv"
    },
    "parameters": {
    	    "range_names": [],
    	    "range_patterns": [{"pattern":"Results*", "res_table_name": "results"}],
            "continue_on_failure": 1,
            "add_xls_filename": true,
            "add_range_name": true,
            "header_from_first_row": true
	}
}
```

#### Minimal configuration

Processes all ranges found in all sheets. Does not include filename or range name in the result and fails whenever there's 
a processing error. Taking header from first column.

```json
{
    "definition": {
        "component": "kds-team.processor-xlsx-name-ranges-2-csv"
    }
}
```
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kds-team.processor-csv2xlsx.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

# Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        script:
          - export APP_IMAGE=$APP_IMAGE
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
#          - echo 'Pushing test image to repo. [tag=test]'
#          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#          - docker tag $APP_IMAGE:latest $REPOSITORY:test
#          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog



================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.12-slim
ENV PYTHONIOENCODING utf-8

COPY ./src/ /code/src/
COPY ./tests/ /code/tests/
COPY ./scripts/ /code/scripts/
COPY ./deploy.sh /code/deploy.sh
COPY ./flake8.cfg /code/flake8.cfg
COPY ./requirements.txt /code/requirements.txt


# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
keboola.component==1.6.7
https://bitbucket.org/kds_consulting_team/datadirtest/get/1.8.2.zip#egg=datadirtest
regex==2024.7.24
mock
freezegun
openpyxl==3.1.5
pandas==2.2.2


================================================
FILE: component_config/component_long_description.md
================================================
Convert XLSX named ranges into CSV.


================================================
FILE: component_config/component_short_description.md
================================================
Convert XLSX named ranges into CSV.


================================================
FILE: component_config/configSchema.json
================================================
[Empty file]


================================================
FILE: component_config/configuration_description.md
================================================
[Empty file]


================================================
FILE: component_config/stack_parameters.json
================================================
{}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "range_names": [
      "Results"
    ],
    "continue_on_failure": 1
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi


================================================
FILE: src/component.py
================================================
import glob
import logging
import os
import sys
from pathlib import Path

import openpyxl
import pandas as pd
import regex
from keboola.component import ComponentBase, UserException
from keboola.component.dao import TableDefinition

# global constants'


# configuration variables
PAR_HEADER_FROM_FIRST_ROW = 'header_from_first_row'
RES_TABLE_NAME = 'res_table_name'
PAR_INCLUDE_FILENAME = 'add_xls_filename'
PAR_INCLUDE_RANGE_NAME = 'add_range_name'

FILENAME_COL_NAME = 'extracted_filename'
FILENAME_RANGE_NAME = 'extracted_range_name'

KEY_SHEET_NAME_PATTERN = 'sheet_name_pattern'
KEY_SHEET_INDEX = 'sheet_indexes'
KEY_RANGE_NAMES = 'range_names'
KEY_RANGE_PATTERNS = 'range_patterns'
KEY_CONTINUE_ON_ERR = 'continue_on_failure'
KEY_CONTINUE_IGNORE_MISSING = 'ignore_missing_ranges'

# #### Keep for debug
KEY_DEBUG = 'debug'
MANDATORY_PARS = []
MANDATORY_IMAGE_PARS = []


class XlsRangeParseError(Exception):
    """
    Custom ex
    """


class Component(ComponentBase):

    def __init__(self, debug=False):
        super().__init__()

        try:
            self.validate_configuration_parameters(MANDATORY_PARS)
            self.validate_image_parameters(MANDATORY_IMAGE_PARS)
        except ValueError as e:
            raise UserException(e)

        # validation
        if self.configuration.parameters.get(KEY_RANGE_NAMES) and self.configuration.parameters.get(KEY_RANGE_PATTERNS):
            raise ValueError(
                'Both range names and range patterns are specified. Please specify only one of the two or none!')

        # check if range patterns is list
        self.validate_range_patterns(self.configuration.parameters.get(KEY_RANGE_PATTERNS))

    @staticmethod
    def validate_range_patterns(range_patterns):
        if range_patterns:
            if not isinstance(range_patterns, list):
                raise ValueError(f"{KEY_RANGE_PATTERNS} must be a list of range pattern dictionaries")
            else:
                for pattern in range_patterns:
                    if not isinstance(pattern, dict):
                        raise ValueError(f"{KEY_RANGE_PATTERNS} must be a list of range pattern dictionaries")
                    elif not pattern.get("pattern") or not pattern.get("res_table_name"):
                        raise ValueError(f"{KEY_RANGE_PATTERNS} must be a list of range pattern dictionaries "
                                         f"containing a defined 'pattern' and 'res_table_name'")

    def run(self):
        '''
        Main execution code
        '''
        params = self.configuration.parameters  # noqa
        files = [f for f in glob.glob(self.files_in_path + "/**", recursive=True)
                 if not f.endswith('.manifest') and Path(f).is_file()]

        results = []
        for f in files:
            results.extend(self.process_sheets(f, params))

        self.write_manifests(results)

    def process_sheets(self, file, params) -> list[TableDefinition]:
        # LOAD FILE
        name = os.path.splitext(os.path.basename(file))[0]
        logging.info(f'Processing file {os.path.basename(file)}')
        wb = openpyxl.load_workbook(file, data_only=True, read_only=False)

        # STATS
        logging.info(f"File loaded: {os.path.basename(file)}")

        logging.info(f'Available sheets {wb.sheetnames}')
        def_names = wb.defined_names
        name_ranges = [b for b in def_names.values() if b.type == 'RANGE']

        name_range_labels = [a.name for a in name_ranges]

        logging.info(f"Available ranges: {name_range_labels}")

        missing_ranges = []

        if params.get(KEY_RANGE_NAMES):
            logging.info(f'Filtering defined range names {params[KEY_RANGE_NAMES]}')
            for label in params.get(KEY_RANGE_NAMES):
                if label not in name_range_labels:
                    logging.info(f'Name range {label} from configuration parameters not in available ranges')
                    missing_ranges.append(label)
            name_ranges = [{'range': n, 'pattern': {'pattern': n.name, RES_TABLE_NAME: n.name}} for n in name_ranges if
                           n.name in params[KEY_RANGE_NAMES]]
        elif params.get(KEY_RANGE_PATTERNS):
            logging.info(f'Filtering defined range patterns {params[KEY_RANGE_PATTERNS]}')
            name_ranges = self._match_by_patterns(name_ranges, params.get(KEY_RANGE_PATTERNS))
        else:
            name_ranges = [{'range': n, 'pattern': {'pattern': n.name, RES_TABLE_NAME: n.name}} for n in name_ranges]
            logging.info('No ranges specified, processing all available.')

        ignore_missing = params.get(KEY_CONTINUE_IGNORE_MISSING, True)

        if missing_ranges and ignore_missing is False:
            raise ValueError(f"Name ranges {missing_ranges} from configuration parameters not in available ranges,"
                             f" either remove them from the configuration or set continue_on_failure to true")

        if not name_ranges:
            logging.warning(
                f"No ranges matching the filter "
                f"'{params.get(KEY_RANGE_NAMES, params.get(KEY_RANGE_PATTERNS))}' found!")
        # process and output
        data = None
        cols = []
        results = []
        for a in name_ranges:
            try:
                data = self.data_frame_from_xlsx_region(wb, a, os.path.basename(file),
                                                        params.get(PAR_INCLUDE_FILENAME, False),
                                                        params.get(PAR_INCLUDE_RANGE_NAME, False),
                                                        params.get(PAR_HEADER_FROM_FIRST_ROW, True))
                cols = list(data.columns)
            except XlsRangeParseError as ex:
                if params.get(KEY_CONTINUE_ON_ERR):
                    logging.warning(
                        f"Could not extract {a['range'].name} range: {ex}! Continue on failure set, skipping.")
                    continue
                else:
                    logging.exception(ex)
                    exit(1)
            except Exception as ex:
                logging.error(f"Could not extract {a['range'].name} range!")
                logging.exception(ex)
                exit(2)

            if data is None:
                continue

            folder_name = a['pattern'][RES_TABLE_NAME].lower().strip()

            # construct result
            tb_def = self.create_out_table_definition(folder_name, schema=cols, incremental=False, has_header=False,
                                                      is_sliced=True)
            if not os.path.exists(Path(tb_def.full_path).as_posix()):
                os.makedirs(Path(tb_def.full_path).as_posix())
            file_name = name + '_' + a['range'].name + '.csv'
            full_path = os.path.join(tb_def.full_path, file_name)

            data.to_csv(full_path, index=False, header=False)
            results.append(tb_def)
            logging.info(f"File {file_name} saved.")
        return results

    def _match_by_patterns(self, name_ranges, patterns):
        res_ranges = list()
        for n in name_ranges:
            res_ranges.extend(
                [{'range': n, 'pattern': pattern} for pattern in patterns if regex.search(pattern['pattern'], n.name)])
        return res_ranges

    def data_frame_from_xlsx_region(self, wb, named_range, filename, include_filename=False, include_range_name=False,
                                    header_from_first_row=True):
        """
        Get a single rectangular region from the specified named region ('invoices')
        into dataframe object. Since its a portion of XLS using Pandas should be OK.
        """

        logging.info(f"Processing range {named_range['range'].name} defined as '{named_range['range'].attr_text}'...")

        # convert to list (openpyxl 2.3 returns a list but 2.4+ returns a generator)
        destinations = list(named_range['range'].destinations)
        if len(destinations) > 1:
            raise XlsRangeParseError(
                f'Range {named_range["range"].name} in workbook contains more than one region!'
            )
        ws, reg = destinations[0]
        # convert to worksheet object (openpyxl 2.3 returns a worksheet object
        # but 2.4+ returns the name of a worksheet)
        try:
            region = wb[ws][reg]

            df = pd.DataFrame([cell.value for cell in row] for row in region)

            # dropping first row
            # Assign header, wipe out first row, rename header
            if header_from_first_row:
                new_header = list(df.iloc[0])
                df = df[1:]
            else:
                new_header = ['' for i in range(len(list(df.iloc[0])))]

            # filename col
            if include_filename:
                df[FILENAME_COL_NAME] = os.path.basename(filename)
                new_header.append(FILENAME_COL_NAME)
            if include_range_name:
                df[FILENAME_RANGE_NAME] = named_range['range'].name
                new_header.append(FILENAME_RANGE_NAME)

            df.columns = new_header

            # check missing header names
            temp_col = df.columns
            cols = []
            i = 0
            for a in temp_col:
                a = str(a).strip().lower()
                if not a or a in ['', 'none', 'nan']:
                    # print('header_{} added'.format(i))
                    cols.append('header_{}'.format(i))
                    i += 1
                else:
                    cols.append(a)
        except Exception as ex:
            logging.warning(
                f'Failed to parse range {named_range["range"].name} defined as "{named_range["range"].attr_text}". '
                f'Error: "{ex}"')
            raise XlsRangeParseError(ex) from ex
        try:
            df.columns = cols
        except Exception as e:
            logging.warning(
                f"Could not rename columns for range {named_range['range'].name} defined as '"
                f"{named_range['range'].attr_text}! {e}")
            raise XlsRangeParseError(
                f"Could not rename columns for range {named_range['range'].name} defined "
                f"as '{named_range['range'].attr_text}! {e}") from e

        return df


"""
        Main entrypoint
"""
if __name__ == "__main__":
    if len(sys.argv) > 1:
        debug_arg = sys.argv[1]
    else:
        debug_arg = False
    try:
        comp = Component(debug_arg)
        comp.run()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as e1:
        logging.exception(e1)
        exit(1)



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: tests/test_functional.py
================================================
import os
import unittest

from datadirtest import DataDirTester


class TestComponent(unittest.TestCase):

    def test_functional(self):
        os.environ['KBC_STACKID'] = 'connection.keboola.com'
        os.environ['KBC_PROJECT_FEATURE_GATES'] = 'queuev2'
        functional_tests = DataDirTester(data_dir='./tests/functional_legacy')
        functional_tests.run()

    def test_functional_dtypes(self):
        os.environ['KBC_DATA_TYPE_SUPPORT'] = 'authoritative'
        functional_tests = DataDirTester(data_dir='./tests/functional_dtypes')
        functional_tests.run()


if __name__ == "__main__":
    unittest.main()


