Directory structure:
└── kds_consulting_team-kds-team.ex-zbozi-cz/
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    ├── TEMPLATE_README.md
    ├── Dockerfile
    ├── flake8.cfg
    ├── src/
    │   ├── dateutils.py
    │   ├── client.py
    │   ├── component.py
    │   └── json_parser.py
    ├── LICENSE.md
    ├── docs/
    │   └── imgs/
    ├── requirements.txt
    ├── bitbucket-pipelines.yml
    ├── .dockerignore
    ├── .devcontainer/
    │   └── devcontainer.json
    ├── component_config/
    │   ├── uiOptions.json
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── configRowSchema.json
    │   ├── component_long_description.md
    │   ├── sample-config/
    │   │   └── config.json
    │   ├── loggerConfiguration.json
    │   └── logger
    ├── .style.yapf
    ├── deploy.sh
    ├── docker-compose.yml
    ├── scripts/
    │   ├── build_n_test.sh
    │   ├── update_dev_portal_properties.sh
    │   ├── build_n_run.ps1
    │   ├── run.bat
    │   └── run_kbc_tests.ps1
    └── README.md

================================================
File: /tests/__init__.py
================================================
import sys
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
File: /tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import ZboziCZExtractor


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = ZboziCZExtractor()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

================================================
File: /Dockerfile
================================================
FROM python:3.10-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /src/dateutils.py
================================================
from dataclasses import dataclass
from datetime import datetime, date, timedelta
import itertools
import math
from typing import Iterable, Optional
import pytz

from keboola.utils import parse_datetime_interval
from keboola.component.exceptions import UserException

DAY = timedelta(days=1)
WEEK = 7 * DAY
TIMEZONE = pytz.timezone('CET')
ALLOWED_GRANULARITIES_FOR_ITEM_AND_CATEGORY_REPORTS = ('daily', 'monthly', 'entire_period')
ALLOWED_GRANULARITIES_FOR_AGGREGATED_REPORTS = ('hourly', 'daily', 'monthly')
DEFAULT_GRANULARITY = 'entire_period'
MAX_REPORT_PERIOD_FOR_ITEM_AND_CATEGORY_REPORTS = timedelta(days=31)


def month_breaks_expanding_between(start_date: date, end_date: date):
    """
    Given two instances of ``datetime.date``, generate a list of dates on
    the 1st of every month between the two dates (inclusive) and one extra month at the end.

    e.g. "5 Jan 2020" to "17 May 2020" would generate:

        1 Jan 2020, 1 Feb 2020, 1 Mar 2020, 1 Apr 2020, 1 May 2020, 1 June 2020

    """
    if start_date > end_date:
        raise ValueError(f"Start date {start_date} is not before end date {end_date}")

    year = start_date.year
    month = start_date.month

    while (year, month) <= (end_date.year, end_date.month):
        yield date(year, month, 1)
        if month == 12:
            month = 1
            year += 1
        else:
            month += 1
    yield date(year, month, 1)


def year_breaks_expanding_between(start_date: date, end_date: date):
    """
    Given two instances of ``datetime.date``, generate a list of dates on
    the 1st day of every year between the two dates (inclusive) and one extra year at the end.

    e.g. "5 Jan 2019" to "17 May 2022" would generate:

        1 Jan 2019, 1 Jan 2020, 1 Jan 2021, 1 Jan 2022, 1 Jan 2023

    """
    if start_date > end_date:
        raise ValueError(f"Start date {start_date} is not before end date {end_date}")

    year = start_date.year

    while year <= end_date.year:
        yield date(year, 1, 1)
        year += 1
    yield date(year, 1, 1)


@dataclass(slots=True, frozen=True)
class UnixTimestampPeriod:
    timestamp_from: int
    timestamp_to: int


@dataclass(slots=True)
class DatetimePeriod:
    datetime_from: datetime
    datetime_to: datetime

    def to_unix_timestamp_period(self):
        return UnixTimestampPeriod(timestamp_from=round(self.datetime_from.timestamp()),
                                   timestamp_to=round(self.datetime_to.timestamp()))

    @classmethod
    def from_unix_timestamp_period(cls, unix_timestamp_period: UnixTimestampPeriod, timezone=TIMEZONE):
        return cls(datetime_from=datetime.fromtimestamp(unix_timestamp_period.timestamp_from, tz=timezone),
                   datetime_to=datetime.fromtimestamp(unix_timestamp_period.timestamp_to, tz=timezone))

    def __str__(self) -> str:
        return (f'Period from {self.datetime_from.isoformat(timespec="seconds")}'
                f' to {self.datetime_to.isoformat(timespec="seconds")}')

    @property
    def total_days(self):
        return (self.datetime_to - self.datetime_from).days

    @classmethod
    def from_breaks(cls, breaks: Iterable[date]):
        start_datetimes = (datetime(year=start_date.year, month=start_date.month,
                                    day=start_date.day).astimezone(TIMEZONE).replace(hour=0,
                                                                                     minute=0,
                                                                                     second=0,
                                                                                     microsecond=0,
                                                                                     fold=0) for start_date in breaks)
        return [
            cls(datetime_from=start_end[0], datetime_to=start_end[1])
            for start_end in itertools.pairwise(start_datetimes)
        ]

    def split_to_days(self):
        return [
            self.__class__(datetime_from=self.datetime_from + i * DAY, datetime_to=self.datetime_from + (i + 1) * DAY)
            for i in range(self.total_days)
        ]

    def split_to_weeks(self):
        start_of_week = self.datetime_from - self.datetime_from.weekday() * DAY
        number_of_weeks = math.ceil(self.total_days / 7.0)
        return [
            self.__class__(datetime_from=start_of_week + i * WEEK, datetime_to=start_of_week + (i + 1) * WEEK)
            for i in range(number_of_weeks)
        ]

    def split_to_months(self):
        breaks = month_breaks_expanding_between(self.datetime_from.date(), self.datetime_to.date())
        return self.from_breaks(breaks)

    def split_to_years(self):
        breaks = year_breaks_expanding_between(self.datetime_from.date(), self.datetime_to.date())
        return self.from_breaks(breaks)


def parse_period_specs_basic(period_start: str, period_end: str):
    start_datetime_raw, end_datetime_raw = parse_datetime_interval(period_start, period_end)

    if start_datetime_raw.tzinfo is None:
        start_datetime_raw = start_datetime_raw.replace(tzinfo=pytz.UTC)
    if end_datetime_raw.tzinfo is None:
        end_datetime_raw = end_datetime_raw.replace(tzinfo=pytz.UTC)

    start_datetime, end_datetime = start_datetime_raw.astimezone(TIMEZONE), end_datetime_raw.astimezone(TIMEZONE)

    return DatetimePeriod(datetime_from=start_datetime, datetime_to=end_datetime)


def parse_period_specs_for_item_and_category_reports(period_start: str,
                                                     period_end: str,
                                                     granularity: Optional[str] = None):
    if granularity in (None, ''):
        granularity = DEFAULT_GRANULARITY
    if granularity not in ALLOWED_GRANULARITIES_FOR_ITEM_AND_CATEGORY_REPORTS:
        raise UserException(f"Granularity for by item and by category shop statisitcs reports must be one"
                            f" of {', '.join(ALLOWED_GRANULARITIES_FOR_ITEM_AND_CATEGORY_REPORTS)}.")

    period = parse_period_specs_basic(period_start, period_end)

    if granularity == 'entire_period':
        if period.datetime_to - period.datetime_from > MAX_REPORT_PERIOD_FOR_ITEM_AND_CATEGORY_REPORTS:
            raise UserException(f"When using the entire_period granularity,"
                                f" the time difference must be at most"
                                f" {MAX_REPORT_PERIOD_FOR_ITEM_AND_CATEGORY_REPORTS.days} days.")
        return [DatetimePeriod(datetime_from=period.datetime_from, datetime_to=period.datetime_to)]

    period.datetime_from = period.datetime_from.replace(hour=0, minute=0, second=0, microsecond=0, fold=0)
    period.datetime_to = (period.datetime_to + DAY).replace(hour=0, minute=0, second=0, microsecond=0, fold=0)
    if granularity == 'daily':
        return period.split_to_days()
    elif granularity == 'monthly':
        return period.split_to_months()


def parse_period_specs_for_aggregated_reports(period_start: str, period_end: str, granularity: str):
    if granularity not in ALLOWED_GRANULARITIES_FOR_AGGREGATED_REPORTS:
        raise UserException(f"Granularity for aggregated shop statistics reports must be one"
                            f" of {', '.join(ALLOWED_GRANULARITIES_FOR_AGGREGATED_REPORTS)}.")

    period = parse_period_specs_basic(period_start, period_end)

    if granularity == 'hourly':
        if period.total_days <= 7:
            return [period]
        else:
            return period.split_to_weeks()

    period.datetime_from = period.datetime_from.replace(hour=0, minute=0, second=0, microsecond=0, fold=0)
    period.datetime_to = (period.datetime_to + DAY).replace(hour=0, minute=0, second=0, microsecond=0, fold=0)
    if granularity == 'daily':
        if period.total_days <= 28:
            return [period]
        else:
            return period.split_to_months()
    elif granularity == "monthly":
        if period.total_days <= 365:
            return [period]
        else:
            return period.split_to_years()


================================================
File: /src/client.py
================================================
import logging
import time
from dataclasses import dataclass
from typing import Dict, FrozenSet, Generator, Iterator, Literal, Mapping, Optional, List

from keboola.component.exceptions import UserException
from keboola.http_client import HttpClient
from requests import Response, JSONDecodeError
from requests.exceptions import HTTPError

from dateutils import DatetimePeriod, UnixTimestampPeriod

ALLOWED_RESPONSE_FORMATS = Literal['json', 'csv']
BASE_URL = "https://api.zbozi.cz/"
MAX_UNPROCESSED_ITEM_STATISITCS_REPORT_REQUESTS = 5
MAX_ITEM_STATISITCS_REPORT_REQUESTS_PER_DAY = 50
MAX_ITEM_STATISITCS_REPORT_QUEUE_INFO_AGE_SECONDS = 6

AGGREGATED_STATISTICS_GRANULARITY_TYPE = Literal['hourly', 'daily', 'monthly']

REPORT_POLLING_INTERVAL = 30
REQUEST_RETRIES_TIMEOUT_SECONDS = 60 * 30    # 30 minutes
CHUNK_SIZE = 1024 * 8    # 8 MiB

DAY_SECONDS = 24 * 60 * 60    # 24 hours

AGGREGATED_STATISTICS_RATE_LIMIT_REFRESH_PERIOD_SECONDS = 20
STATISTICS_BY_CATEGORY_RATE_LIMIT_REFRESH_PERIOD_SECONDS = 8


@dataclass(slots=True, frozen=True)
class RateLimitInfo:
    retry_after: int
    requests_limit: int
    remaining_requests: int
    reset_time: int

    @classmethod
    def from_headers_dict(cls, headers_dict: Mapping):
        return cls(retry_after=int(headers_dict['Retry-After']),
                   requests_limit=int(headers_dict['X-RateLimit-Limit']),
                   remaining_requests=int(headers_dict['X-RateLimit-Remaining']),
                   reset_time=int(headers_dict['X-RateLimit-Reset']))


@dataclass(slots=True)
class ItemStatisticsReport:
    timestamp_from: int
    timestamp_to: int
    requested_at: Optional[int] = None
    processed: bool = False
    request_id: Optional[int] = None
    data_format: ALLOWED_RESPONSE_FORMATS = 'csv'
    data: Optional[Iterator[bytes]] = None

    @classmethod
    def from_request_dict(cls, request_dict: Dict):
        return cls(timestamp_from=request_dict['dateFrom'],
                   timestamp_to=request_dict['dateTo'],
                   requested_at=request_dict['created'],
                   processed=request_dict['processed'],
                   request_id=request_dict['requestId'],
                   data_format=request_dict['dataFormat'])

    def __str__(self) -> str:
        datetime_period = DatetimePeriod.from_unix_timestamp_period(
            UnixTimestampPeriod(timestamp_from=self.timestamp_from, timestamp_to=self.timestamp_to))
        return (f'Item statistics report for the {str(datetime_period)} with request ID of {self.request_id}'
                if self.request_id else f'Item statistics report for the {str(datetime_period)}')


@dataclass(slots=True, frozen=True)
class ItemStatisticsReportQueueInfo:
    obtained_at_timestamp: int
    requests_list: List[ItemStatisticsReport]

    @property
    def age_seconds(self):
        return time.time() - self.obtained_at_timestamp

    @property
    def is_stale(self):
        return self.age_seconds > MAX_ITEM_STATISITCS_REPORT_QUEUE_INFO_AGE_SECONDS

    @property
    def unprocessed_requests(self):
        return [report_request_info for report_request_info in self.requests_list if not report_request_info.processed]

    @property
    def unprocessed_requests_amount(self):
        return len(self.unprocessed_requests)

    @property
    def requests_in_the_last_24hrs(self):
        exactly_24_hrs_ago_timestamp = time.time() - DAY_SECONDS
        return [
            report_request_info for report_request_info in self.requests_list
            if report_request_info.requested_at > exactly_24_hrs_ago_timestamp
        ]

    @property
    def requests_in_the_last_24hrs_amount(self):
        return len(self.requests_in_the_last_24hrs)

    @property
    def unprocessed_requests_limit_slack(self):
        return MAX_UNPROCESSED_ITEM_STATISITCS_REPORT_REQUESTS - self.unprocessed_requests_amount

    @property
    def last_24hrs_limit_slack(self):
        return MAX_ITEM_STATISITCS_REPORT_REQUESTS_PER_DAY - self.requests_in_the_last_24hrs_amount

    @property
    def space_left(self):
        return min(self.unprocessed_requests_limit_slack, self.last_24hrs_limit_slack)

    @property
    def processed_requests(self):
        return [report_request_info for report_request_info in self.requests_list if report_request_info.processed]

    @property
    def processed_request_ids(self) -> FrozenSet[int]:
        return frozenset(report_request_info.request_id for report_request_info in self.processed_requests)

    def seconds_until_slack_in_24hrs_limit(self, n: int = 1) -> float:
        if n < 0:
            raise ValueError("Input argument must be positive.")
        if self.last_24hrs_limit_slack >= n:
            return 0.0
        requests_created_at_ordered: List[int] = sorted(
            report_request_info.requested_at for report_request_info in self.requests_in_the_last_24hrs)
        exactly_24_hrs_ago_timestamp = time.time() - DAY_SECONDS
        return requests_created_at_ordered[n - 1] - exactly_24_hrs_ago_timestamp


class ZboziCZAPIClientException(Exception):
    pass


class ZboziCZAPIClient(HttpClient):
    def __init__(self, shop_id: int, api_key: str):
        self.shop_id = shop_id
        super().__init__(base_url=BASE_URL, auth=(self.shop_id, api_key))
        self.rate_limit_infos: Dict[str, RateLimitInfo] = {}
        self._item_statistics_report_queue_info: Optional[ItemStatisticsReportQueueInfo] = None

    @property
    def item_statistics_report_queue_info(self):
        self.update_item_statistics_report_queue_info()
        return self._item_statistics_report_queue_info

    def request_endpoint(self,
                         endpoint_path: str,
                         http_method: str,
                         api_method_name: str,
                         expected_response_format: ALLOWED_RESPONSE_FORMATS = 'json',
                         **kwargs) -> Dict | Response:

        start_time = time.time()
        while time.time() - start_time < REQUEST_RETRIES_TIMEOUT_SECONDS:    # Loop until return or timeout for retries
            self._wait_until_rate_limit_reset(api_method_name)

            try:
                response = self._request_raw(http_method, endpoint_path, **kwargs)
            except HTTPError as http_err:
                raise ZboziCZAPIClientException(http_err) from http_err

            if response.status_code in (200, 201, 302, 429, 500, 504):
                self._update_rate_limit_info(api_method_name, response)

            if response.status_code in (200, 201):    # Response status OK
                if expected_response_format == 'json':
                    try:
                        return response.json()
                    except JSONDecodeError as json_error:
                        raise ZboziCZAPIClientException(json_error) from json_error
                elif expected_response_format == 'csv':
                    return response
                else:
                    raise ZboziCZAPIClientException(f'Unexpected response format specified: {expected_response_format}')
            elif response.status_code == 302:    # Response not ready yet, retrying
                pass
            elif response.status_code == 401:    # Unauthorized
                raise ZboziCZAPIClientException(
                    'Invalid API authorization, please check the Shop ID and API key provided are valid.')
            elif response.status_code == 403:    # User does not have access to given resource.
                raise ZboziCZAPIClientException('User does not have access to given resource,'
                                                ' please check you have permission to access the API resource.')
            elif response.status_code == 404:    # Resource not found
                raise ZboziCZAPIClientException('Requested resource not found.')
            elif response.status_code == 429:    # Ran out of request rate limit, retrying
                pass
            else:
                raise ZboziCZAPIClientException(f'Unexpected API response status code: {response.status_code}')
        raise ZboziCZAPIClientException(f"Request retries timed out after {round(time.time() - start_time)} seconds.")

    def get_shop(self) -> Dict:    # Only implemented for testing purposes
        http_method = 'GET'
        api_method_name = http_method + '_shop'
        endpoint_path = 'v1/shops/' + str(self.shop_id)
        return self.request_endpoint(endpoint_path=endpoint_path,
                                     http_method=http_method,
                                     api_method_name=api_method_name)

    def get_shop_aggregated_statistics_report(self, timestamp_from: int, timestamp_to: int,
                                              granularity: AGGREGATED_STATISTICS_GRANULARITY_TYPE) -> Dict:
        http_method = 'GET'
        api_method_name = http_method + '_shop_aggregated_statistics'
        endpoint_path = 'v1/shop/statistics/aggregated'
        params = {"timestampFrom": timestamp_from, "timestampTo": timestamp_to, "granularity": granularity}
        return self.request_endpoint(endpoint_path=endpoint_path,
                                     http_method=http_method,
                                     api_method_name=api_method_name,
                                     params=params)

    def get_shop_item_statistics_report_queue(self) -> Dict:
        http_method = 'GET'
        api_method_name = http_method + '_shop_item_statistics_report_queue'
        endpoint_path = 'v1/shop/statistics/item'
        return self.request_endpoint(endpoint_path=endpoint_path,
                                     http_method=http_method,
                                     api_method_name=api_method_name)

    def post_shop_item_statistics_report_request(self,
                                                 timestamp_from: int,
                                                 timestamp_to: int,
                                                 data_format: ALLOWED_RESPONSE_FORMATS = 'csv') -> Dict:
        http_method = 'POST'
        api_method_name = http_method + '_shop_item_statistics_report_request'
        endpoint_path = 'v1/shop/statistics/item'
        params = {"timestampFrom": timestamp_from, "timestampTo": timestamp_to, "dataFormat": data_format}
        start_time = time.time()
        while time.time() - start_time < REQUEST_RETRIES_TIMEOUT_SECONDS:
            if self.item_statistics_report_queue_info.space_left > 0:
                return self.request_endpoint(endpoint_path=endpoint_path,
                                             http_method=http_method,
                                             api_method_name=api_method_name,
                                             params=params)
            else:
                seconds_until_slack_in_24hrs_limit = \
                    self.item_statistics_report_queue_info.seconds_until_slack_in_24hrs_limit()
                if seconds_until_slack_in_24hrs_limit > REQUEST_RETRIES_TIMEOUT_SECONDS:
                    raise UserException(f"Rate limit hit, the shop item statistics report can't be enqueued"
                                        f" sooner than in {(seconds_until_slack_in_24hrs_limit / 60):.2f} minutes."
                                        f"Please run this extractor later.")
                logging.debug(f'Item statitics report queue is full'
                              f' (it contains'
                              f' {self.item_statistics_report_queue_info.unprocessed_requests_amount} requests),'
                              f' waiting {REPORT_POLLING_INTERVAL} until there are'
                              f' less than {MAX_UNPROCESSED_ITEM_STATISITCS_REPORT_REQUESTS} unprocessed requests.')
                time.sleep(REPORT_POLLING_INTERVAL)
        raise ZboziCZAPIClientException(f"Request retries timed out after {round(time.time() - start_time)} seconds.")

    def get_shop_item_statistics_report_in_csv(self, request_id: int) -> Iterator[bytes]:
        http_method = 'GET'
        api_method_name = http_method + '_shop_item_statistics_report_in_csv'
        endpoint_path = 'v1/shop/statistics/item/csv'
        params = {'requestId': request_id}
        response: Response = self.request_endpoint(endpoint_path=endpoint_path,
                                                   http_method=http_method,
                                                   api_method_name=api_method_name,
                                                   expected_response_format='csv',
                                                   params=params,
                                                   stream=True)
        return response.iter_content(chunk_size=CHUNK_SIZE)

    def get_shop_statistics_by_category_report(self, timestamp_from: int, timestamp_to: int) -> Dict:
        http_method = 'GET'
        api_method_name = http_method + '_shop_statistics_by_category_report'
        endpoint_path = 'v1/shop/statistics/category'
        params = {"timestampFrom": timestamp_from, "timestampTo": timestamp_to}
        return self.request_endpoint(endpoint_path=endpoint_path,
                                     http_method=http_method,
                                     api_method_name=api_method_name,
                                     params=params)

    def download_shop_item_statistics_reports_batch(self,
                                                    report_request_specs:
                                                    List[ItemStatisticsReport]) \
            -> Generator[ItemStatisticsReport, None, None]:
        if len(report_request_specs) > MAX_ITEM_STATISITCS_REPORT_REQUESTS_PER_DAY:
            raise UserException(f"Can't request no more than"
                                f" {MAX_ITEM_STATISITCS_REPORT_REQUESTS_PER_DAY} item statistics reports at once.")
        time_until_enough_slack_for_batch = \
            self.item_statistics_report_queue_info.seconds_until_slack_in_24hrs_limit(
                len(report_request_specs))
        if time_until_enough_slack_for_batch > REQUEST_RETRIES_TIMEOUT_SECONDS:
            raise UserException(f"Rate limit hit, the shop item statistics report batch can't be enqueued"
                                f" sooner than in {(time_until_enough_slack_for_batch / 60):.2f} minutes."
                                f"Please run this extractor later.")
        reports_to_enqueue = report_request_specs.copy()
        reports_to_download: List[ItemStatisticsReport] = []

        while len(reports_to_enqueue) > 0 or len(reports_to_download) > 0:
            for _ in range(min(self.item_statistics_report_queue_info.space_left, len(reports_to_enqueue))):
                report = reports_to_enqueue.pop(0)
                timestamp_from: int = report.timestamp_from
                timestamp_to: int = report.timestamp_to
                report_request_response_dict = \
                    self.post_shop_item_statistics_report_request(timestamp_from=timestamp_from,
                                                                  timestamp_to=timestamp_to)
                request_id: int = report_request_response_dict['data']['requestId']
                report.request_id = request_id
                reports_to_download.append(report)

                logging.debug(f'{str(report)} was enqueued successfully.')
            for _ in range(len(reports_to_download)):
                report = reports_to_download.pop(0)
                if report.request_id in self.item_statistics_report_queue_info.processed_request_ids:
                    report.data = self.get_shop_item_statistics_report_in_csv(report.request_id)
                    yield report
                else:
                    reports_to_download.append(report)
            if reports_to_enqueue:
                reports_to_enqueue_str = ',\n'.join(str(report_to_enqueue) for report_to_enqueue in reports_to_enqueue)
                logging.info(f'Some item statistics reports could not be enqueued,'
                             f' retrying.'
                             f' Reports left to enqueue:\n{reports_to_enqueue_str}.')
            if reports_to_download:
                reports_to_download_str = ',\n'.join(
                    str(report_to_download) for report_to_download in reports_to_download)
                logging.info(f'Some enqueued item statistics reports are not ready yet,'
                             f' retrying.'
                             f' Reports left to download:\n{reports_to_download_str}.')
            if len(reports_to_enqueue) > 0 or len(reports_to_download) > 0:
                logging.info(f'Waiting for reports to get processed on the server,'
                             f' going to poll the API again in {REPORT_POLLING_INTERVAL} seconds.')
                time.sleep(REPORT_POLLING_INTERVAL)

    def _update_rate_limit_info(self, api_method_name: str, response: Response):
        try:
            self.rate_limit_infos[api_method_name] = RateLimitInfo.from_headers_dict(response.headers)
        except KeyError as key_err:
            raise ZboziCZAPIClientException(key_err) from key_err
        except ValueError as val_err:
            raise ZboziCZAPIClientException(val_err) from val_err

    def _wait_until_rate_limit_reset(self, api_method_name: str):
        rate_limit_info = self.rate_limit_infos.get(api_method_name)
        if rate_limit_info and rate_limit_info.remaining_requests < 1:
            seconds_until_rate_limit_reset = rate_limit_info.reset_time - time.time()
            if seconds_until_rate_limit_reset > 0:
                logging.info(f'API request rate limit exceeded,'
                             f' waiting {seconds_until_rate_limit_reset:.3f} seconds until quota restarts.')
                time.sleep(seconds_until_rate_limit_reset)

    def update_item_statistics_report_queue_info(self, force: bool = False):
        if not force and self._item_statistics_report_queue_info:
            if not self._item_statistics_report_queue_info.is_stale:
                return    # Do not update if info is not stale.
        item_statistics_report_queue_dict = self.get_shop_item_statistics_report_queue()
        obtained_at_timestamp = time.time()
        self._item_statistics_report_queue_info = \
            ItemStatisticsReportQueueInfo(obtained_at_timestamp=obtained_at_timestamp,
                                          requests_list=[ItemStatisticsReport.from_request_dict(d)
                                                         for d in item_statistics_report_queue_dict['data']])


================================================
File: /src/component.py
================================================
import csv
import logging
import os
from datetime import datetime
from typing import Dict, List

from keboola.component.base import ComponentBase
from keboola.component.dao import TableDefinition
from keboola.component.exceptions import UserException
from keboola.component.interface import register_csv_dialect
from keboola.utils.header_normalizer import DefaultHeaderNormalizer

from client import (ZboziCZAPIClient, ItemStatisticsReport, AGGREGATED_STATISTICS_RATE_LIMIT_REFRESH_PERIOD_SECONDS,
                    STATISTICS_BY_CATEGORY_RATE_LIMIT_REFRESH_PERIOD_SECONDS)
from dateutils import (DatetimePeriod, UnixTimestampPeriod, parse_period_specs_for_item_and_category_reports,
                       parse_period_specs_for_aggregated_reports, TIMEZONE)
from json_parser import FlattenJsonParser

# configuration variables
KEY_API_KEY = '#api_key'
KEY_SHOP_ID = 'shop_id'
KEY_REPORT_TYPE = 'report_type'
KEY_REPORT_PERIOD = 'report_period'
KEY_PERIOD_START = 'period_start'
KEY_PERIOD_END = 'period_end'
KEY_GRANULARITY = 'granularity'
KEY_GRANULARITY_AGG = 'granularity_agg'

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = (KEY_SHOP_ID, KEY_API_KEY, KEY_REPORT_TYPE, KEY_REPORT_PERIOD)
REQUIRED_IMAGE_PARS = tuple()
REPORT_TYPES = ("shop_aggregated_statistics", "shop_statistics_by_category", "shop_item_statistics")

# Other constants
INPUT_CSV_DELIMETER = ';'
CSV_REPORT_TIMESTAMP_FROM_COLUMN_NAME = 'timestampFrom'
CSV_REPORT_TIMESTAMP_TO_COLUMN_NAME = 'timestampTo'
INCREMENTAL_LOADING = True

KEBOOLA_COMPONENT_TIMEOUT_SECONDS = 60 * 60  # 1 hour
OVERHEAD_PER_FILE_SECONDS = 1  # expecting 1 second of overhead for each CSV file created


def raise_user_exception_if_timeout_expected(number_of_files: int, seconds_per_file: int):
    expected_time_needed_seconds = number_of_files * (seconds_per_file + OVERHEAD_PER_FILE_SECONDS)
    expected_time_minutes, expected_time_seconds = divmod(expected_time_needed_seconds, 60)
    expected_time_hours, expected_time_minutes = divmod(expected_time_minutes, 60)
    if expected_time_needed_seconds > KEBOOLA_COMPONENT_TIMEOUT_SECONDS:
        raise UserException(
            f"Expected time needed for extraction"
            f" ({expected_time_hours} hours {expected_time_minutes} minutes {expected_time_seconds} seconds)"
            f" is longer than the Keboola Component timeout period of 1 hour.")


class ZboziCZExtractorException(Exception):
    pass


class ZboziCZExtractor(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()
        # Check for missing configuration parameters
        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        self.validate_image_parameters(REQUIRED_IMAGE_PARS)
        self.params: dict = self.configuration.parameters  # just for convenience
        # Access global parameters in data/config.json
        shop_id: int = self.params[KEY_SHOP_ID]
        api_key: str = self.params[KEY_API_KEY]
        # Create API client instance
        self.client = ZboziCZAPIClient(shop_id, api_key)
        # Create header normalizer instance
        self.header_normalizer = DefaultHeaderNormalizer()
        # Register KBC CSV dialect
        register_csv_dialect()

    def run(self):
        """
        Main execution code
        """
        report_type: str = self.params[KEY_REPORT_TYPE]
        if report_type == "shop_aggregated_statistics":
            self.download_and_transform_shop_aggregated_statistics_report()
        elif report_type == "shop_statistics_by_category":
            self.download_and_transform_shop_statistics_by_category_report()
        elif report_type == "shop_item_statistics":
            self.download_and_transform_shop_item_statistics_report()
        else:
            raise UserException(f"Report type must be one of {', '.join(REPORT_TYPES)}.")

    def download_and_transform_shop_item_statistics_report(self):
        csv.register_dialect('zbozi.cz', delimiter=INPUT_CSV_DELIMETER)
        period_start: str = self.params[KEY_REPORT_PERIOD][KEY_PERIOD_START]
        period_end: str = self.params[KEY_REPORT_PERIOD][KEY_PERIOD_END]
        granularity: str = self.params[KEY_REPORT_PERIOD].get(KEY_GRANULARITY, None)
        primary_key = ('itemId', 'productId', 'categoryId',
                       CSV_REPORT_TIMESTAMP_FROM_COLUMN_NAME, CSV_REPORT_TIMESTAMP_TO_COLUMN_NAME)

        incremental_loading: bool = INCREMENTAL_LOADING

        datetime_periods = parse_period_specs_for_item_and_category_reports(period_start, period_end, granularity)
        timestamp_from_str = datetime_periods[0].datetime_from.isoformat(timespec="seconds")
        timestamp_to_str = datetime_periods[-1].datetime_to.isoformat(timespec="seconds")

        period_list = [str(datetime_period) for datetime_period in datetime_periods]
        periods_str = ',\n'.join(period_list)

        logging.info(f'Downloading shop item statistics reports with {granularity} granularity'
                     f' within period {timestamp_from_str} to {timestamp_to_str} split into {len(period_list)} parts.')
        logging.debug(f' Downloading these these periods: \n{periods_str}.')

        output_table_definition: TableDefinition = self.create_out_table_definition('shop_item_stats.csv',
                                                                                    incremental=incremental_loading,
                                                                                    primary_key=list(primary_key),
                                                                                    is_sliced=True)

        os.makedirs(self.tables_in_path, exist_ok=True)
        os.makedirs(output_table_definition.full_path, exist_ok=True)

        unix_timestamp_periods = (datetime_period.to_unix_timestamp_period() for datetime_period in datetime_periods)
        item_statisitics_reports_batch = [
            ItemStatisticsReport(timestamp_from=unix_timestamp_period.timestamp_from,
                                 timestamp_to=unix_timestamp_period.timestamp_to)
            for unix_timestamp_period in unix_timestamp_periods
        ]

        for report_to_download in self.client.download_shop_item_statistics_reports_batch(
                item_statisitics_reports_batch):

            datetime_period = DatetimePeriod.from_unix_timestamp_period(
                UnixTimestampPeriod(timestamp_from=report_to_download.timestamp_from,
                                    timestamp_to=report_to_download.timestamp_to))

            timestamp_from_str = datetime_period.datetime_from.isoformat(timespec="seconds")
            timestamp_to_str = datetime_period.datetime_to.isoformat(timespec="seconds")

            input_table_definition: TableDefinition = self.create_in_table_definition(
                f'{report_to_download.request_id}.csv')

            logging.info(f'Download of item statistics report for the period from {timestamp_from_str}'
                         f' to {timestamp_to_str} started.')

            csv_byte_chunk_iterator = report_to_download.data

            with open(input_table_definition.full_path, 'wb') as f:
                for csv_byte_chunk in csv_byte_chunk_iterator:
                    if csv_byte_chunk:
                        f.write(csv_byte_chunk)
            logging.info(f'Download of item statistics report for the period from {timestamp_from_str}'
                         f' to {timestamp_to_str} was successful, transforming.')

            with open(input_table_definition.full_path, 'r') as in_f, \
                    open(output_table_definition.full_path +
                         f'/{report_to_download.request_id}.csv', 'w') as out_f:

                dict_reader = csv.DictReader(in_f, dialect='zbozi.cz')
                fieldnames = list(dict_reader.fieldnames) + [
                    CSV_REPORT_TIMESTAMP_FROM_COLUMN_NAME, CSV_REPORT_TIMESTAMP_TO_COLUMN_NAME
                ]
                dict_writer = csv.DictWriter(out_f, dialect='kbc', fieldnames=fieldnames)
                # dict_writer.writeheader()
                for input_row in dict_reader:
                    processed_row = input_row | {
                        CSV_REPORT_TIMESTAMP_FROM_COLUMN_NAME: timestamp_from_str,
                        CSV_REPORT_TIMESTAMP_TO_COLUMN_NAME: timestamp_to_str
                    }
                    dict_writer.writerow(processed_row)

            logging.info(f'Transformation of item statistics report for the period from {timestamp_from_str}'
                         f' to {timestamp_to_str} was successful.')

        output_table_definition.columns = self.header_normalizer.normalize_header(fieldnames)

        # Save table manifest (shop_item_stats.csv.manifest) from the tabledefinition
        self.write_manifest(output_table_definition)

        logging.info(f'Extraction of shop item statistics report with {granularity} granularity'
                     f' from {timestamp_from_str} to {timestamp_to_str} was successful.')

    def download_and_transform_shop_statistics_by_category_report(self):
        period_start: str = self.params[KEY_REPORT_PERIOD][KEY_PERIOD_START]
        period_end: str = self.params[KEY_REPORT_PERIOD][KEY_PERIOD_END]
        granularity: str = self.params[KEY_REPORT_PERIOD].get(KEY_GRANULARITY, None)
        primary_key = ('categoryId', CSV_REPORT_TIMESTAMP_FROM_COLUMN_NAME, CSV_REPORT_TIMESTAMP_TO_COLUMN_NAME)

        incremental_loading: bool = INCREMENTAL_LOADING

        datetime_periods = parse_period_specs_for_item_and_category_reports(period_start, period_end, granularity)
        timestamp_from_str = datetime_periods[0].datetime_from.isoformat(timespec="seconds")
        timestamp_to_str = datetime_periods[-1].datetime_to.isoformat(timespec="seconds")

        logging.info(f'Going to attempt to extract shop statistics by category reports with {granularity} granularity'
                     f' from {timestamp_from_str} to {timestamp_to_str}.')
        raise_user_exception_if_timeout_expected(len(datetime_periods),
                                                 STATISTICS_BY_CATEGORY_RATE_LIMIT_REFRESH_PERIOD_SECONDS)

        output_table_definition: TableDefinition = self.create_out_table_definition('shop_stats_by_category.csv',
                                                                                    incremental=incremental_loading,
                                                                                    primary_key=list(primary_key),
                                                                                    is_sliced=True)

        os.makedirs(output_table_definition.full_path, exist_ok=True)
        flatten_json_parser = FlattenJsonParser()

        for datetime_period in datetime_periods:
            timestamp_from_str = datetime_period.datetime_from.isoformat(timespec="seconds")
            timestamp_to_str = datetime_period.datetime_to.isoformat(timespec="seconds")

            logging.info(f'Going to attempt to extract shop statistics by category report'
                         f' from {timestamp_from_str} to {timestamp_to_str}.')

            timestamp_period = datetime_period.to_unix_timestamp_period()
            response_dict = self.client.get_shop_statistics_by_category_report(timestamp_period.timestamp_from,
                                                                               timestamp_period.timestamp_to)
            data_dict = response_dict['data']
            flattened_data_dict: List[Dict] = flatten_json_parser.parse_data(data_dict)
            fieldnames = list(flattened_data_dict[0].keys()) + [
                CSV_REPORT_TIMESTAMP_FROM_COLUMN_NAME, CSV_REPORT_TIMESTAMP_TO_COLUMN_NAME
            ]
            with open(
                    f'{output_table_definition.full_path}/'
                    f'from_{timestamp_period.timestamp_from}'
                    f'_to_{timestamp_period.timestamp_to}.csv', 'w') as out_f:
                dict_writer = csv.DictWriter(out_f, dialect='kbc', fieldnames=fieldnames)
                for row in flattened_data_dict:
                    row_with_timestamps = row | {
                        CSV_REPORT_TIMESTAMP_FROM_COLUMN_NAME: timestamp_from_str,
                        CSV_REPORT_TIMESTAMP_TO_COLUMN_NAME: timestamp_to_str
                    }
                    dict_writer.writerow(row_with_timestamps)

            logging.info(f'Shop statistics by category report'
                         f' from {timestamp_from_str} to {timestamp_to_str} successfully downloaded.')

        output_table_definition.columns = self.header_normalizer.normalize_header(fieldnames)
        # Save table manifest (shop_item_stats.csv.manifest) from the tabledefinition
        self.write_manifest(output_table_definition)

        logging.info(f'Extraction of shop statistics by category report with {granularity} granularity'
                     f' from {timestamp_from_str} to {timestamp_to_str} was successful.')

    def download_and_transform_shop_aggregated_statistics_report(self):
        period_start: str = self.params[KEY_REPORT_PERIOD][KEY_PERIOD_START]
        period_end: str = self.params[KEY_REPORT_PERIOD][KEY_PERIOD_END]
        try:
            granularity: str = self.params[KEY_REPORT_PERIOD][KEY_GRANULARITY_AGG]
        except KeyError:
            raise UserException(f'Granularity ("{KEY_GRANULARITY_AGG}") must be specified.')
        primary_key = ('startTimestamp', 'granularity')
        incremental_loading: bool = INCREMENTAL_LOADING
        output_table_definition: TableDefinition = self.create_out_table_definition('shop_aggregated_stats.csv',
                                                                                    incremental=incremental_loading,
                                                                                    primary_key=list(primary_key),
                                                                                    is_sliced=True)

        os.makedirs(output_table_definition.full_path, exist_ok=True)

        datetime_periods = parse_period_specs_for_aggregated_reports(period_start, period_end, granularity)

        total_timestamp_from_str = datetime_periods[0].datetime_from.isoformat(timespec="seconds")
        total_timestamp_to_str = datetime_periods[-1].datetime_to.isoformat(timespec="seconds")

        logging.info(f'Going to attempt to extract shop aggregated statistics reports with {granularity} granularity'
                     f' from {total_timestamp_from_str} to {total_timestamp_to_str}.')
        raise_user_exception_if_timeout_expected(len(datetime_periods),
                                                 AGGREGATED_STATISTICS_RATE_LIMIT_REFRESH_PERIOD_SECONDS)

        flatten_json_parser = FlattenJsonParser()

        for datetime_period in datetime_periods:
            timestamp_period = datetime_period.to_unix_timestamp_period()
            timestamp_from_str = datetime_period.datetime_from.isoformat(timespec="seconds")
            timestamp_to_str = datetime_period.datetime_to.isoformat(timespec="seconds")

            logging.info(
                f'Going to attempt to extract aggregated shop statistics part report with {granularity} granularity'
                f' from {timestamp_from_str} to {timestamp_to_str}.')

            os.makedirs(self.tables_out_path, exist_ok=True)

            response_dict = self.client.get_shop_aggregated_statistics_report(
                timestamp_from=timestamp_period.timestamp_from,
                timestamp_to=timestamp_period.timestamp_to,
                granularity=granularity)

            data_dict = response_dict['data']
            flattened_data_dict: List[Dict] = flatten_json_parser.parse_data(data_dict)
            fieldnames = list(flattened_data_dict[0].keys()) + ['granularity']
            with open(
                    f'{output_table_definition.full_path}/'
                    f'from_{timestamp_period.timestamp_from}'
                    f'_to_{timestamp_period.timestamp_to}.csv', 'w') as out_f:
                dict_writer = csv.DictWriter(out_f, dialect='kbc', fieldnames=fieldnames)
                for row in flattened_data_dict:
                    start_timestamp = datetime.fromtimestamp(row['startTimestamp'],
                                                             tz=TIMEZONE).isoformat(timespec="seconds")
                    row_transformed = row | {'granularity': granularity, 'startTimestamp': start_timestamp}
                    dict_writer.writerow(row_transformed)

                logging.info(f'Extraction of aggregated shop statistics part with {granularity} granularity'
                             f' from {timestamp_from_str} to {timestamp_to_str} was successful.')

        output_table_definition.columns = self.header_normalizer.normalize_header(fieldnames)
        # Save table manifest (shop_item_stats.csv.manifest) from the tabledefinition
        self.write_manifest(output_table_definition)

        logging.info(f'Extraction of aggregated shop statistics with {granularity} granularity'
                     f' from {total_timestamp_from_str} to {total_timestamp_to_str} was successful.')


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = ZboziCZExtractor()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: /src/json_parser.py
================================================
class FlattenJsonParser:
    def __init__(self, child_separator: str = '_', exclude_fields=None, flatten_lists=False, keys_to_ignore=None):
        self.child_separator = child_separator
        self.exclude_fields = exclude_fields
        self.flatten_lists = flatten_lists
        self.keys_to_ignore = keys_to_ignore
        if self.keys_to_ignore is None:
            self.keys_to_ignore = set()

    def parse_data(self, data):
        for i, row in enumerate(data):
            data[i] = self._flatten_row(row)
        return data

    def parse_row(self, row: dict):
        return self._flatten_row(row)

    @staticmethod
    def _construct_key(parent_key, separator, child_key):
        if parent_key:
            return "".join([parent_key, separator, child_key])
        else:
            return child_key

    def _flatten_row(self, nested_dict):
        if len(nested_dict) == 0:
            return {}

        flattened_dict = dict()

        def _flatten(dict_object, key_name=None, name_with_parent=''):
            if isinstance(dict_object, dict):
                for key in dict_object:
                    if key not in self.keys_to_ignore:
                        new_parent_name = self._construct_key(name_with_parent, self.child_separator, key)
                        _flatten(dict_object[key], key_name=key, name_with_parent=new_parent_name)
                    else:
                        flattened_dict[key] = dict_object[key]
            elif isinstance(dict_object, (list, set, tuple)):
                if self.flatten_lists:
                    for index, item in enumerate(dict_object):
                        new_key_name = self._construct_key(name_with_parent, self.child_separator, str(index))
                        _flatten(item, key_name=new_key_name)
                else:
                    flattened_dict[name_with_parent] = dict_object
            else:
                flattened_dict[name_with_parent] = dict_object

        _flatten(nested_dict, None)
        return flattened_dict


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /requirements.txt
================================================
keboola.component==1.3.7
keboola.utils
keboola.http-client
mock
freezegun

================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /.dockerignore
================================================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]

# IDE files
.idea
.vscode
.devcontainer
.DS_Store
/example/.project
/example/.pydevproject

# Docs and scripts
docs

# KBC datafolder
/component_config/sample-config
data
/venv

================================================
File: /.devcontainer/devcontainer.json
================================================
// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.234.0/containers/docker-existing-dockerfile
{
	"name": "Existing Dockerfile",
	// Sets the run context to one level up instead of the .devcontainer folder.
	"context": "..",
	// Update the 'dockerFile' property if you aren't using the standard 'Dockerfile' filename.
	"dockerFile": "../Dockerfile",
	// Set *default* container specific settings.json values on container create.
	"settings": {},
	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [
		"ms-python.python",
		"ms-python.vscode-pylance"
	],
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],
	// Uncomment the next line to run commands after the container is created - for example installing curl.
	"postCreateCommand": "apt-get update && apt-get install -y git"
	// Uncomment when using a ptrace-based debugger like C++, Go, and Rust
	// "runArgs": [ "--cap-add=SYS_PTRACE", "--security-opt", "seccomp=unconfined" ],
	// Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker.
	// "mounts": [ "source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind" ],
	// Uncomment to connect as a non-root user if you've added one. See https://aka.ms/vscode-remote/containers/non-root.
	// "remoteUser": "vscode"
}

================================================
File: /component_config/uiOptions.json
================================================
[
    "genericDockerUI",
    "genericDockerUI-rows"
]

================================================
File: /component_config/component_short_description.md
================================================
Extract data from Zboží.cz (http://zbozi.cz). Get your daily impressions, clicks, cost and conversion data.

================================================
File: /component_config/configSchema.json
================================================
{
  "title": "Global Configuration",
  "type": "object",
  "required": [
    "#api_key",
    "shop_id"
  ],
  "properties": {
    "#api_key": {
      "propertyOrder": 10,
      "title": "API key",
      "type": "string",
      "description": "API key (API klíč)",
      "format": "password"
    },
    "shop_id": {
      "propertyOrder": 20,
      "title": "Shop ID",
      "type": "integer",
      "description": "Shop ID (ID provozovny)."
    }
  }
}

================================================
File: /component_config/configuration_description.md
================================================
This is an extractor that can extract either one of these 3 types of reports per configuration row for given Shop ID, granularity and time period from the [Zboží.cz API](https://api.zbozi.cz):
 - aggregated shop statistics,
 - shop statisitcs by item categories or
 - shop item statisitcs.

Most of the API methods require user authentication. The user authentication consists of the pair of a shop id (ID provozovny) and a generated API key (API klíč). Both of these credentials can be obtained from the [Zboží.cz Admin interface](https://admin.zbozi.cz).

================================================
File: /component_config/configRowSchema.json
================================================
{
  "title": "Report Configuration",
  "type": "object",
  "required": [
    "report_type",
    "report_period"
  ],
  "properties": {
    "report_type": {
      "propertyOrder": 10,
      "title": "Report type",
      "type": "string",
      "enum": [
        "shop_statistics_by_category",
        "shop_item_statistics",
        "shop_aggregated_statistics"
      ],
      "description": "Which report type you want to extract."
    },
    "report_period": {
      "title": "Reporting period",
      "type": "object",
      "description": "Must be less than 400 days ago. Maximum time elapsed between period start and end is 31 days. Rounded up to the next CET or CEST midnight or start of the next month respectively.",
      "required": [
        "period_start",
        "period_end"
      ],
      "properties": {
        "rtype": {
          "type": "string",
          "template": "{{report_type}}",
          "watch": {
            "report_type": "report_type"
          },
          "options": {
            "hidden": true
          }
        },
        "period_start": {
          "propertyOrder": 30,
          "default": "7 days ago",
          "title": "Period start",
          "type": "string",
          "description": "Start date of the reporting period. In relative format eg. 3 days ago, yesterday, or exact date in format YYYY-MM-DD."
        },
        "period_end": {
          "propertyOrder": 40,
          "default": "yesterday",
          "title": "Period end",
          "type": "string",
          "description": "End date of the reporting period. In relative format eg. 3 days ago, yesterday, or exact date in format YYYY-MM-DD."
        },
        "granularity": {
          "propertyOrder": 60,
          "title": "Time Granularity",
          "type": "string",
          "enum": [
            "daily",
            "monthly",
            "entire_period"
          ],
          "options": {
            "dependencies": {
              "rtype": [
                "shop_statistics_by_category",
                "shop_item_statistics"
              ]
            }
          },
          "description": "What granularity should be used for the time dimension."
        },
        "granularity_agg": {
          "propertyOrder": 60,
          "required": true,
          "title": "Time Granularity",
          "type": "string",
          "enum": [
            "hourly",
            "daily",
            "monthly"
          ],
          "options": {
            "dependencies": {
              "rtype": "shop_aggregated_statistics"
            }
          },
          "description": "What granularity should be used for the time dimension."
        }
      }
    }
  }
}

================================================
File: /component_config/component_long_description.md
================================================
This is an extractor that can extract either one of these 3 types of reports per configuration row for given Shop ID, granularity and time period from the [Zboží.cz API](https://api.zbozi.cz):
 - aggregated shop statistics,
 - shop statisitcs by item categories or
 - shop item statisitcs.

================================================
File: /component_config/sample-config/config.json
================================================
{
  "parameters": {
    "#api_key": "PLACEHOLDER",
    "shop_id": 42,
    "period_start": "2 days ago",
    "period_end": "today",
    "incremental_loading": true
  }
}

================================================
File: /component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: /component_config/logger
================================================
gelf

================================================
File: /.style.yapf
================================================
[style]
based_on_style = google
spaces_before_comment = 4
indent_width = 4
split_before_logical_operator = false
column_limit = 120
BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF = false
SPLIT_BEFORE_EXPRESSION_AFTER_OPENING_PAREN = false

================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

echo "Updating UI helpers to use"
value=`cat component_config/uiOptions.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} uiOptions --value="$value"
else
    echo "uiOptions is empty!"
fi

================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /README.md
================================================
# Zboží.cz API Extractor

This datasource component supports extracting 3 types of reports per configuration row for given Shop ID and time period from the [Zboží.cz API](https://api.zbozi.cz):
 - aggregated shop statistics,
 - shop statistics by item categories or
 - shop item statistics.

**Table of contents:**

[TOC]

<!-- Functionality notes
=================== -->

## Prerequisites
Most of the API methods require user authentication. The user authentication consists of a pair of a shop id (ID provozovny) and a generated API key (API klíč). Both of these credentials can be obtained from the [Zboží.cz Admin interface](https://admin.zbozi.cz).

## Supported endpoints
- GET `v1/shop/statistics/aggregated` - This endpoint is used to download [aggregated shop statistics](https://api.zbozi.cz/#/statistics/get_v1_shop_statistics_aggregated).
- GET `v1/shop/statistics/category` - This endpoint is used to download [shop statistics by category](https://api.zbozi.cz/#/statistics/get_v1_shop_statistics_category).
- GET `v1/shop/statistics/item` - This endpoint is used to check whether the item statistics report queue is full and whether the requested reports are ready to download.
- POST `v1/shop/statistics/item` - This endpoint is used to make the item statistics report request.
- GET `v1/shop/statistics/item/csv` - This endpoint is used to download the requested [item statistics report](https://api.zbozi.cz/#/statistics/get_v1_shop_statistics_item_csv).

If you need more endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/)

## Configuration

### Global configuraiton
 - API key (#api_key) - [REQ] API key (API klíč)
 - Shop ID (shop_id) - [REQ] Shop ID (ID provozovny).


### Row configuration
 - Report type (report_type) - [REQ] Which report type you want to extract.
 - Period start (period_start) - [REQ] Period start specification used to request the report. This can be formatted in various different ways (e.g. `2022-05-17 15:30:12`, `2 days ago`, `yesterday` and other formats supported by the [dateparser library](https://dateparser.readthedocs.io/en/latest/)). Has to be less than 400 days old. It is rounded down to previous midnight (including) in CET.
 - Period end (period_end) - [REQ] Period start specification used to request the report. This can be formatted in various different ways (e.g. `2022-05-17 15:30:12`, `2 days ago`, `yesterday` and other formats supported by the [dateparser library](https://dateparser.readthedocs.io/en/latest/)). Has to be less than 400 days old. It is rounded up to next midnight (excluding) in CET.
 - Granularity (granularity) - [REQ] What granularity should be used for the time dimension. This must be either of these:
    - `daily` to download a report with daily granularity,
    - `monthly` to download a report with monthly granularity or
    - `hourly` to download a report with hourly granularity. **NOTE** Available only for `Aggregated Shop Statistics` report
    - `entire_period` to extract the entire specified period as one report. **NOTE** Available only for `Shop by category statistics` or `shop item statistics` reports
    

### Sample Configuration
This sample configuration will download item statistics for both yesterday and the day before that, and combine them together into a single output table as specified in the section below.
```json
{
    "parameters": {
        "#api_key": "SECRET_VALUE",
        "shop_id": 42,
        "report_type": "shop_item_statistics",
        "period_start": "2 days ago",
        "period_end": "1 day ago",
        "granularity": "daily",
    }
}
```

## Output
No matter what kind of report is being extracted, the output of each configuration row is one table with a hardcoded name. Incremental loading is always enabled.

<!-- List of tables, foreign keys, schema. -->
### Aggregated shop statistics
Aggregated shop statistics are extracted as a table called `shop_aggregated_stats` that contains all the fields [the JSON schema](https://api.zbozi.cz/#/statistics/get_v1_shop_statistics_aggregated) the API specifies flattned as columns (with the underscore `_` used as a separator), and one new columns `granularity` that contains the used granularity (same as in user configuration). The field/column `startTimestamp` that originally contains the starts of the given time periods as [Unix time](https://en.wikipedia.org/wiki/Unix_time) is translated into [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) encoded date and time strings.

The primary key is composed of these two columns: `startTimestamp`, and `granularity`.

### Shop statistics by category
Shop item statistics are extracted as a table called `shop_stats_by_category` that contains all the fields [the JSON schema](https://api.zbozi.cz/#/statistics/get_v1_shop_statistics_category) the API specifies flattned as columns (with the underscore `_` used as a separator), and two new columns `timestampFrom` and `timestampTo` that contain [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) encoded date and time strings of the start and end of the period of each report.

Unless `entire_period` granularity is specified, these will be [CET](https://en.wikipedia.org/wiki/Central_European_Time) or [CEST](https://en.wikipedia.org/wiki/Central_European_Summer_Time) midnights (for each day if the `daily` granularity is used). If `monthly` granularity is specified, these will be such midnights at the start of each month.

The primary key is composed of these three columns: `categoryId`, `timestampFrom` and `timestampTo`.

### Shop item statistics
Shop item statistics are extracted as a table called `shop_item_stats` that contains all the columns [the CSV schema](https://api.zbozi.cz/#/statistics/get_v1_shop_statistics_item_csv) the API specifies, and two new columns `timestampFrom` and `timestampTo` that contain [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) encoded date and time strings of the start and end of the period of each report.

Unless `entire_period` granularity is specified, these will be [CET](https://en.wikipedia.org/wiki/Central_European_Time) or [CEST](https://en.wikipedia.org/wiki/Central_European_Summer_Time) midnights (for each day if the `daily` granularity is used). If `monthly` granularity is specified, these will be such midnights at the start of each month.

The primary key is composed of these three columns: `itemId`, `timestampFrom` and `timestampTo`.

## Development

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in
the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## Integration

For information about deployment and integration with KBC, please refer to the
[deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)

