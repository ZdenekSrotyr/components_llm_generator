Directory structure:
└── kds_consulting_team-kds-team.ex-trustpilot/
    ├── README.md
    ├── bitbucket-pipelines.yml
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           └── state.json
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run.sh
    │   ├── run_kbc_tests.ps1
    │   └── update_dev_portal_properties.sh
    ├── src/
    │   ├── main.py
    │   └── lib/
    │       ├── __init__.py
    │       ├── client.py
    │       └── component.py
    └── tests/
        ├── __init__.py
        └── test_component.py

================================================
FILE: README.md
================================================
# TrustPilot extractor

The TrustPilot extractor allows users to extract reviews for the specified business units. All that is needed is the API key and either IDs or names of the business units for which the reviews should be downloaded. Besides reviews, profile information and statistics are downloaded as well.

All tables are loaded incrementally to storage.

## Configuration

The sample configuration can be found in the [components' repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-trustpilot/src/master/component_config/sample-config/config.json).

### API Key (`#apiKey`)

The API Key is the main form of authentication for TrustPilot. If the wrong key is provided, the application fails due to not being authorized to download anything. Follow (this article) to learn, how to obtain the API key.

### Business Units (`businessUnits`)

The comma or new line separated list of business units, for which the reviews should be downloaded. If a business unit does not exist in TrustPilot database, no reviews are extracted for it. Follow [this article](https://developers.trustpilot.com/tutorials/how-to-find-your-business-unit-id) to learn, how to find the business unit identificator.

## Output

The output of the extractor are 3 tables: **business-units**. **business-units-statistics** and **reviews**. All of the tables are loaded incrementally and each has a unique primary key.

The sample of output tables can be found [here](https://bitbucket.org/kds_consulting_team/kds-team.ex-trustpilot/src/master/component_config/sample-config/out/tables/). 

## Development

For development purposes, it is strongly recommended to use the following commands:

```
docker-compose build dev
docker-compose run --rm dev
```


================================================
FILE: bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        script:
          - export APP_IMAGE=$APP_IMAGE
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
#          - echo 'Pushing test image to repo. [tag=test]'
#          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#          - docker tag $APP_IMAGE:latest $REPOSITORY:test
#          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh


================================================
FILE: change_log.md
================================================
**0.1.0**
Public version of the component.
Added descriptions to configurations, sample configurations and outputs.

**0.0.2**
Added manifests creation for tables

**0.0.1**
First working version of the component.


================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/run.sh
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM quay.io/keboola/docker-custom-python:latest

COPY . /code/

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/

CMD ["python", "-u", "/code/src/main.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
logging_gelf
https://github.com/keboola/python-docker-application/zipball/master#egg=keboola
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.0.zip#egg=kbc


================================================
FILE: component_config/component_long_description.md
================================================
# TrustPilot extractor

The TrustPilot extractor allows users to extract reviews for the specified business units. All that is needed is the API key and either IDs or names of the business units for which the reviews should be downloaded. Besides reviews, profile information and statistics are downloaded as well.

All tables are loaded incrementally to storage.

## Output

The output of the extractor are 3 tables: **business-units**. **business-units-statistics** and **reviews**. All of the tables are loaded incrementally and each has a unique primary key.

The sample of output tables can be found [here](https://bitbucket.org/kds_consulting_team/kds-team.ex-trustpilot/src/master/component_config/sample-config/out/tables/). 


================================================
FILE: component_config/component_short_description.md
================================================
Trustpilot is one of the largest review publishers for online businesses.


================================================
FILE: component_config/configSchema.json
================================================
{
    "title": "Parameters",
    "type": "object",
    "required": [
        "#apiKey",
        "businessUnits"
    ],
    "properties": {
        "#apiKey": {
            "type": "string",
            "description": "API Key for TrustPilot.",
            "format": "password",
            "title": "API Key"
        },
        "businessUnits": {
            "type": "string",
            "format": "textarea",
            "options": {
                "input_height": "100px"
            },
            "title": "Business Units",
            "description": "Comma or new line separated list of business units. IDs or names can be provided."
        }
    }
}


================================================
FILE: component_config/configuration_description.md
================================================
The sample configuration can be found in the [components' repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-trustpilot/src/master/component_config/sample-config/config.json).

### API Key (`#apiKey`)

The API Key is the main form of authentication for TrustPilot. If the wrong key is provided, the application fails due to not being authorized to download anything. Follow (this article) to learn, how to obtain the API key.

### Business Units (`businessUnits`)

The comma or new line separated list of business units, for which the reviews should be downloaded. If a business unit does not exist in TrustPilot database, no reviews are extracted for it. Follow [this article](https://developers.trustpilot.com/tutorials/how-to-find-your-business-unit-id) to learn, how to find the business unit identificator.

## Output

The output of the extractor are 3 tables: **business-units**. **business-units-statistics** and **reviews**. All of the tables are loaded incrementally and each has a unique primary key.

The sample of output tables can be found [here](https://bitbucket.org/kds_consulting_team/kds-team.ex-trustpilot/src/master/component_config/sample-config/out/tables/). 


================================================
FILE: component_config/stack_parameters.json
================================================
{}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {}
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#apiKey": "XXXXXXXXXXXXXXXX",
    "businessUnits":"www.tacticraft.dksa\nwww.tacticraft.dksa1234,www.test.com"
  },
  "image_parameters":{},
  "authorization": {}
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
FILE: scripts/run.sh
================================================
#!/bin/sh
set -e

python /code/src/main.py


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi


================================================
FILE: src/main.py
================================================
import logging
import logging_gelf.handlers
import logging_gelf.formatters
import os
import sys
from lib.component import Compoment

sys.tracebacklimit = 0

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)-8s : [line:%(lineno)3s] %(message)s',
    datefmt="%Y-%m-%d %H:%M:%S")

logger = logging.getLogger()
logging_gelf_handler = logging_gelf.handlers.GELFTCPSocketHandler(
    host=os.getenv('KBC_LOGGER_ADDR'),
    port=int(os.getenv('KBC_LOGGER_PORT'))
    )
logging_gelf_handler.setFormatter(logging_gelf.formatters.GELFFormatter(null_character=True))
logger.addHandler(logging_gelf_handler)

# removes the initial stdout logging
logger.removeHandler(logger.handlers[0])

APP_VERSION = '0.1.2'

if __name__ == '__main__':

    logging.info("Running application version %s." % APP_VERSION)

    component = Compoment()
    component.run()

    logging.info("Extraction complete.")



================================================
FILE: src/lib/__init__.py
================================================
[Empty file]


================================================
FILE: src/lib/client.py
================================================
import requests
# import sys
from kbc.client_base import HttpClientBase

BASE_URL = 'https://api.trustpilot.com/v1'


class TrustpilotClient(HttpClientBase):

    def __init__(self, api_token):

        _header = {'apikey': api_token}

        HttpClientBase.__init__(self, base_url=BASE_URL, default_http_header=_header)
        self.get_raw = requests.get

    def _find_business_unit(self, businessUnitName):

        _url = self.base_url + '/business-units/find'
        _params = {'name': businessUnitName}

        _rsp = self.get_raw(_url, _params, headers=self._auth_header)
        return _rsp.status_code, _rsp.json()

    def get_profile_info(self, businessUnitId):

        _url = self.base_url + f'/business-units/{businessUnitId}/profileinfo'

        _rsp = self.get_raw(_url, headers=self._auth_header)
        return _rsp.status_code, _rsp.json()

    def get_business_unit(self, businessUnitId):

        _url = self.base_url + f'/business-units/{businessUnitId}'

        _rsp = self.get_raw(_url, headers=self._auth_header)
        return _rsp.status_code, _rsp.json()

    def _get_business_unit_reviews(self, businessUnitId, page, perPage):

        _params = {'perPage': perPage,
                   'orderBy': 'createdat.desc',
                   'page': page}

        _url = self.base_url + f'/business-units/{businessUnitId}/reviews'
        _rsp = self.get_raw(_url, headers=self._auth_header, params=_params)

        return _rsp.status_code, _rsp.json()

    def get_paged_business_unit_reviews(self, businessUnitId):

        perPage = 100
        page = 0
        all_reviews = []

        while perPage == 100:

            page += 1
            _, _js = self._get_business_unit_reviews(businessUnitId, page, perPage)

            _reviews = _js['reviews']
            all_reviews += _reviews
            perPage = len(_reviews)

        return all_reviews



================================================
FILE: src/lib/component.py
================================================
import csv
import json
import logging
import os
import sys
from lib.client import TrustpilotClient
from kbc.env_handler import KBCEnvHandler


KEY_API_KEY = '#apiKey'
KEY_BUSINESS_UNITS = 'businessUnits'

MANDATORY_PARAMS = [KEY_API_KEY, KEY_BUSINESS_UNITS]

_FIELDS_BUSINESSUNIT_STATISTICS = ['id', 'displayName', 'name_identifying', 'websiteUrl',
                                   'trustScore', 'stars', 'country', 'status', 'numberOfReviews_total',
                                   'numberOfReviews_usedForTrustScoreCalculation', 'numberOfReviews_oneStar',
                                   'numberOfReviews_twoStars', 'numberOfReviews_threeStars',
                                   'numberOfReviews_fourStars', 'numberOfReviews_fiveStars']

_FIELDS_REVIEWS_DETAILS = ['id', 'consumer_id', 'consumer_displayName', 'consumer_displayLocation',
                           'consumer_numberOfReviews', 'businessUnit_id', 'location', 'stars',
                           'title', 'text', 'language', 'createdAt', 'updatedAt', 'companyReply',
                           'isVerified', 'numberOfLikes', 'status', 'countsTowardsTrustScore',
                           'countsTowardsLocationTrustScore']

_FIELDS_BUSINESSUNIT_PROFILE = ['businessUnitId', 'isSubscriber', 'email', 'phone', 'companyName',
                                'address_street', 'address_city', 'address_postcode', 'address_country',
                                'address_countryCode', 'description_header', 'description_text',
                                'socialmedia_facebook', 'socialmedia_linkedin', 'socialmedia_twitter',
                                'socialmedia_googleplus', 'socialmedia_youtube', 'socialmedia_instagram',
                                'facebookPageId', 'facebookPageUrl', 'isFacebookActivated', 'isCommentsEnabled',
                                'isIncentivisingUsers', 'isClaimed']


class Compoment(KBCEnvHandler):

    def __init__(self):

        KBCEnvHandler.__init__(self, MANDATORY_PARAMS)

        try:

            self.validate_config(mandatory_params=MANDATORY_PARAMS)

        except ValueError as e:

            logging.error(e)
            sys.exit(1)

        self.client = TrustpilotClient(self.cfg_params[KEY_API_KEY])

        _units = self.cfg_params[KEY_BUSINESS_UNITS]
        _units_list = [item.strip() for sublist in [bu.split(',')
                                                    for bu in _units.split('\n')] for item in sublist]

        try:
            _units_list.remove('')
        except ValueError:
            pass

        self.businessUnits = _units_list

        _stats_path = os.path.join(self.tables_out_path, 'business-units-statistics.csv')
        _reviews_path = os.path.join(self.tables_out_path, 'reviews.csv')
        _profiles_path = os.path.join(self.tables_out_path, 'business-units.csv')

        self.stats_writer = csv.DictWriter(open(_stats_path, 'w'), fieldnames=_FIELDS_BUSINESSUNIT_STATISTICS,
                                           restval='', extrasaction='ignore', quoting=csv.QUOTE_ALL)

        self.reviews_writer = csv.DictWriter(open(_reviews_path, 'w'), fieldnames=_FIELDS_REVIEWS_DETAILS,
                                             restval='', extrasaction='ignore', quoting=csv.QUOTE_ALL)

        self.profile_writer = csv.DictWriter(open(_profiles_path, 'w'), fieldnames=_FIELDS_BUSINESSUNIT_PROFILE,
                                             restval='', extrasaction='ignore', quoting=csv.QUOTE_ALL)

        self.stats_writer.writeheader()
        self.reviews_writer.writeheader()
        self.profile_writer.writeheader()

        self._create_manifest(_stats_path, PK=['id'])
        self._create_manifest(_profiles_path, PK=['businessUnitId'])
        self._create_manifest(_reviews_path, PK=['id', 'consumer_id', 'businessUnit_id'])

    def _create_manifest(self, path, incremental=True, PK=[], destination=''):

        _path = path + '.manifest'

        _manifest = {'incremental': incremental,
                     'destination': destination,
                     'primary_key': PK}

        with open(_path, 'w') as f:

            json.dump(_manifest, f)

    def find_business_unit(self, businessUnit):

        _sc, _js = self.client._find_business_unit(businessUnit)

        if _sc == 200:

            return _js['id']

        elif _sc == 401:

            logging.error(
                "Could not authenticate the request. Please check the API token.")
            sys.exit(1)

        elif _sc == 404:

            _sc_bu, _js_bu = self.client.get_profile_info(businessUnit)

            if _sc_bu == 200:

                return businessUnit

            else:

                logging.warn(
                    "Could not find business unit %s. Please check the configuration." % businessUnit)

    def _flatten_json(self, x, out={}, name=''):
        if type(x) is dict:
            for a in x:
                self._flatten_json(x[a], out, name + a + '_')
        else:
            out[name[:-1]] = x

        return out

    def get_and_write_statistics(self, businessUnitId):

        _sc, _js = self.client.get_business_unit(businessUnitId)

        if _sc != 200:

            logging.error(
                "There was an error downloading data for unit %s." % businessUnitId)
            sys.exit(1)

        del _js['links']
        self.stats_writer.writerow(self._flatten_json(_js))

    def get_and_write_profile_info(self, businessUnitId):

        _sc, _js = self.client.get_profile_info(businessUnitId)

        if _sc != 200:

            logging.error(
                "There was an error downloading profile info for unit %s." % businessUnitId)
            sys.exit(1)

        del _js['links']
        _profile = self._flatten_json(_js)
        _profile_sanitized = self._sanitize_columns(_profile)

        _to_write = {**{'businessUnitId': businessUnitId},
                     **_profile_sanitized}

        self.profile_writer.writerow(_to_write)

    @staticmethod
    def _sanitize_columns(dictionary):

        for key in dictionary:

            value = dictionary[key]
            dictionary[key] = str(value).replace('\n', '').replace('\r', '')

        return dictionary

    def get_and_write_reviews(self, businessUnitId):

        reviews = self.client.get_paged_business_unit_reviews(businessUnitId)

        for r in reviews:

            _flattened = self._flatten_json(r)
            del _flattened['links']
            del _flattened['consumer_links']
            del _flattened['businessUnit_links']

            _sanitized = self._sanitize_columns(_flattened)
            self.reviews_writer.writerow(_sanitized)

    def run(self):

        for bu in self.businessUnits:

            businessUnitId = self.find_business_unit(bu)
            if businessUnitId is None:

                continue

            logging.info(
                "Extracting business unit information for %s." % businessUnitId)
            self.get_and_write_statistics(businessUnitId)

            logging.info(
                "Extracting profile information for unit %s." % businessUnitId)
            self.get_and_write_profile_info(businessUnitId)

            logging.info("Extracting reviews for unit %s." % businessUnitId)
            self.get_and_write_reviews(businessUnitId)



================================================
FILE: tests/__init__.py
================================================
[Empty file]


================================================
FILE: tests/test_component.py
================================================
[Empty file]

