Directory structure:
└── kds_consulting_team-kds-team.ex-youtube-analytics/
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    ├── TEMPLATE_README.md
    ├── Dockerfile
    ├── flake8.cfg
    ├── src/
    │   ├── report_types.py
    │   ├── component.py
    │   ├── google_yt/
    │   │   ├── __init__.py
    │   │   └── client.py
    │   └── configuration.py
    ├── LICENSE.md
    ├── docs/
    │   └── imgs/
    ├── requirements.txt
    ├── bitbucket-pipelines.yml
    ├── component_config/
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── configRowSchema.json
    │   ├── component_long_description.md
    │   ├── sample-config/
    │   │   ├── in/
    │   │   │   ├── tables/
    │   │   │   │   ├── test.csv
    │   │   │   │   └── test.csv.manifest
    │   │   │   ├── state.json
    │   │   │   └── files/
    │   │   │       └── order1.xml
    │   │   ├── out/
    │   │   │   ├── tables/
    │   │   │   │   └── test.csv
    │   │   │   └── files/
    │   │   │       └── order1.xml
    │   │   └── config.json
    │   ├── loggerConfiguration.json
    │   └── logger
    ├── deploy.sh
    ├── docker-compose.yml
    ├── scripts/
    │   ├── build_n_test.sh
    │   ├── update_dev_portal_properties.sh
    │   ├── build_n_run.ps1
    │   └── run_kbc_tests.ps1
    └── README.md

================================================
File: /tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: /tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

================================================
File: /Dockerfile
================================================
FROM python:3.11-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /src/report_types.py
================================================
"""
Each output table is associated with a specific report type ID.
Here were prepared a structure listing dimensions a metrics that appear in specific report type ID.
We currently use only 'dimensions' list to specify which columns compose a primary key of the table.
The 'metrics' list are not used. We have it here only for completion.

Information on dimensions and metrics for individual report type IDs was retrieved from documentation found here:
- https://developers.google.com/youtube/reporting/v1/reports/channel_reports
- https://developers.google.com/youtube/reporting/v1/reports/content_owner_reports
"""

report_types = {
    'channel_annotations_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code',
                       'annotation_type', 'annotation_id'],
        'metrics': ['annotation_click_through_rate', 'annotation_close_rate', 'annotation_impressions',
                    'annotation_clickable_impressions', 'annotation_closable_impressions', 'annotation_clicks',
                    'annotation_closes']
    },
    'channel_basic_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code'],
        'metrics': ['views', 'comments', 'likes', 'dislikes', 'videos_added_to_playlists',
                    'videos_removed_from_playlists', 'shares', 'watch_time_minutes', 'average_view_duration_seconds',
                    'average_view_duration_percentage', 'annotation_click_through_rate', 'annotation_close_rate',
                    'annotation_impressions', 'annotation_clickable_impressions', 'annotation_closable_impressions',
                    'annotation_clicks', 'annotation_closes', 'card_click_rate', 'card_teaser_click_rate',
                    'card_impressions', 'card_teaser_impressions', 'card_clicks', 'card_teaser_clicks',
                    'subscribers_gained', 'subscribers_lost', 'red_views', 'red_watch_time_minutes']
    },
    'channel_cards_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code',
                       'card_type',
                       'card_id'],
        'metrics': ['card_click_rate', 'card_teaser_click_rate', 'card_impressions', 'card_teaser_impressions',
                    'card_clicks', 'card_teaser_clicks']
    },
    'channel_combined_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code',
                       'playback_location_type', 'traffic_source_type', 'device_type', 'operating_system'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'channel_demographics_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code',
                       'age_group', 'gender'],
        'metrics': ['views_percentage']
    },
    'channel_device_os_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code',
                       'device_type', 'operating_system'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'channel_end_screens_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code',
                       'end_screen_element_type', 'end_screen_element_id'],
        'metrics': ['end_screen_element_clicks', 'end_screen_element_impressions', 'end_screen_element_click_rate']
    },
    'channel_playback_location_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code',
                       'playback_location_type', 'playback_location_detail'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'channel_province_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code',
                       'province_code'],
        'metrics': ['	views', 'watch_time_minutes', 'average_view_duration_seconds',
                    'average_view_duration_percentage', 'annotation_click_through_rate', 'annotation_close_rate',
                    'annotation_impressions', 'annotation_clickable_impressions', 'annotation_closable_impressions',
                    'annotation_clicks', 'annotation_closes', 'card_click_rate', 'card_teaser_click_rate',
                    'card_impressions', 'card_teaser_impressions', 'card_clicks', 'card_teaser_clicks', 'red_views',
                    'red_watch_time_minutes']
    },
    'channel_sharing_service_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code',
                       'sharing_service'],
        'metrics': ['shares']
    },
    'channel_subtitles_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code',
                       'subtitle_language', 'subtitle_language_autotranslated'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'channel_traffic_source_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'live_or_on_demand', 'subscribed_status', 'country_code',
                       'traffic_source_type', 'traffic_source_detail'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'playlist_basic_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code'],
        'metrics': ['	views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'playlist_combined_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code', 'playback_location_type', 'traffic_source_type', 'device_type',
                       'operating_system'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'playlist_device_os_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code', 'device_type', 'operating_system'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'playlist_playback_location_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code', 'playback_location_type', 'playback_location_detail'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'playlist_province_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code', 'province_code'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'playlist_traffic_source_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code', 'traffic_source_type', 'traffic_source_detail'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'content_owner_basic_a3': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code'],
        'metrics': ['views', 'comments', 'shares', 'watch_time_minutes', 'average_view_duration_seconds',
                    'average_view_duration_percentage', 'annotation_click_through_rate', 'annotation_close_rate',
                    'annotation_impressions', 'annotation_clickable_impressions', 'annotation_closable_impressions',
                    'annotation_clicks', 'annotation_closes', 'card_click_rate', 'card_teaser_click_rate',
                    'card_impressions', 'card_teaser_impressions', 'card_clicks', 'card_teaser_clicks',
                    'subscribers_gained', 'subscribers_lost', 'videos_added_to_playlists',
                    'videos_removed_from_playlists', 'likes', 'dislikes', 'red_views', 'red_watch_time_minutes']
    },
    'content_owner_province_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code', 'province_code'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'annotation_click_through_rate', 'annotation_close_rate', 'annotation_impressions',
                    'annotation_clickable_impressions', 'annotation_closable_impressions', 'annotation_clicks',
                    'annotation_closes', 'card_click_rate', 'card_teaser_click_rate', 'card_impressions',
                    'card_teaser_impressions', 'card_clicks', 'card_teaser_clicks', 'red_views',
                    'red_watch_time_minutes']
    },
    'content_owner_playback_location_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code', 'playback_location_type', 'playback_location_detail'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'content_owner_traffic_source_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code', 'traffic_source_type', 'traffic_source_detail'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'content_owner_device_os_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code', 'device_type', 'operating_system'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'content_owner_demographics_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code', 'age_group', 'gender'],
        'metrics': ['']
    },
    'content_owner_sharing_service_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code', 'sharing_service'],
        'metrics': ['shares']
    },
    'content_owner_annotations_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code', 'annotation_type', 'annotation_id'],
        'metrics': ['annotation_click_through_rate', 'annotation_close_rate', 'annotation_impressions',
                    'annotation_clickable_impressions', 'annotation_closable_impressions', 'annotation_clicks',
                    'annotation_closes']
    },
    'content_owner_cards_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code', 'card_type', 'card_id'],
        'metrics': ['card_click_rate', 'card_teaser_click_rate', 'card_impressions', 'card_teaser_impressions',
                    'card_clicks', 'card_teaser_clicks']
    },
    'content_owner_end_screens_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code', 'end_screen_element_type', 'end_screen_element_id'],
        'metrics': ['end_screen_element_clicks', 'end_screen_element_impressions', 'end_screen_element_click_rate']
    },
    'content_owner_subtitles_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code', 'subtitle_language', 'subtitle_language_autotranslated'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'content_owner_combined_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'live_or_on_demand',
                       'subscribed_status', 'country_code', 'playback_location_type', 'traffic_source_type',
                       'device_type', 'operating_system'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'content_owner_playlist_basic_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'content_owner_playlist_province_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code', 'province_code'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'content_owner_playlist_playback_location_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code', 'playback_location_type', 'playback_location_detail'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'content_owner_playlist_traffic_source_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code', 'traffic_source_type', 'traffic_source_detail'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'content_owner_playlist_device_os_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code', 'device_type', 'operating_system'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'content_owner_playlist_combined_a1': {
        'dimensions': ['date', 'channel_id', 'playlist_id', 'video_id', 'live_or_on_demand', 'subscribed_status',
                       'country_code', 'playback_location_type', 'traffic_source_type', 'device_type',
                       'operating_system'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'playlist_starts',
                    'playlist_saves_added', 'playlist_saves_removed']
    },
    'content_owner_ad_rates_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'country_code', 'ad_type'],
        'metrics': ['estimated_youtube_ad_revenue', 'ad_impressions', 'estimated_cpm']
    },
    'content_owner_estimated_revenue_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'claimed_status', 'uploader_type', 'country_code'],
        'metrics': ['estimated_partner_revenue', 'estimated_partner_ad_revenue', 'estimated_partner_ad_auction_revenue',
                    'estimated_partner_ad_reserved_revenue', 'estimated_youtube_ad_revenue',
                    'estimated_monetized_playbacks', 'estimated_playback_based_cpm', 'ad_impressions', 'estimated_cpm',
                    'estimated_partner_red_revenue', 'estimated_partner_transaction_revenue']
    },
    'content_owner_asset_estimated_revenue_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type', 'country_code'],
        'metrics': ['estimated_partner_revenue', 'estimated_partner_ad_revenue', 'estimated_partner_ad_auction_revenue',
                    'estimated_partner_ad_reserved_revenue', 'estimated_partner_red_revenue',
                    'estimated_partner_transaction_revenue']
    },
    'content_owner_asset_basic_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type',
                       'live_or_on_demand', 'subscribed_status', 'country_code'],
        'metrics': ['views', 'comments', 'likes', 'dislikes', 'videos_added_to_playlists',
                    'videos_removed_from_playlists', 'shares', 'watch_time_minutes', 'average_view_duration_seconds',
                    'average_view_duration_percentage', 'annotation_click_through_rate', 'annotation_close_rate',
                    'annotation_impressions', 'annotation_clickable_impressions', 'annotation_closable_impressions',
                    'annotation_clicks', 'annotation_closes', 'card_click_rate', 'card_teaser_click_rate',
                    'card_impressions', 'card_teaser_impressions', 'card_clicks', 'card_teaser_clicks', 'red_views',
                    'red_watch_time_minutes']
    },
    'content_owner_asset_province_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type',
                       'live_or_on_demand', 'subscribed_status', 'country_code', 'province_code'],
        'metrics': ['	views', 'watch_time_minutes', 'average_view_duration_seconds',
                    'average_view_duration_percentage', 'annotation_click_through_rate', 'annotation_close_rate',
                    'annotation_impressions', 'annotation_clickable_impressions', 'annotation_closable_impressions',
                    'annotation_clicks', 'annotation_closes', 'card_click_rate', 'card_teaser_click_rate',
                    'card_impressions', 'card_teaser_impressions', 'card_clicks', 'card_teaser_clicks', 'red_views',
                    'red_watch_time_minutes']
    },
    'content_owner_asset_playback_location_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type',
                       'live_or_on_demand', 'subscribed_status', 'country_code', 'playback_location_type',
                       'playback_location_detail'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'content_owner_asset_traffic_source_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type',
                       'live_or_on_demand', 'subscribed_status', 'country_code', 'traffic_source_type',
                       'traffic_source_detail'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'content_owner_asset_device_os_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type',
                       'live_or_on_demand', 'subscribed_status', 'country_code', 'device_type', 'operating_system'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    },
    'content_owner_asset_demographics_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type',
                       'live_or_on_demand', 'subscribed_status', 'country_code', 'age_group', 'gender'],
        'metrics': ['views_percentage']
    },
    'content_owner_asset_sharing_service_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type',
                       'live_or_on_demand', 'subscribed_status', 'country_code', 'sharing_service'],
        'metrics': ['shares']
    },
    'content_owner_asset_annotations_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type',
                       'live_or_on_demand', 'subscribed_status', 'country_code', 'annotation_type', 'annotation_title'],
        'metrics': ['annotation_click_through_rate', 'annotation_close_rate', 'annotation_impressions',
                    'annotation_clickable_impressions', 'annotation_closable_impressions', 'annotation_clicks',
                    'annotation_closes']
    },
    'content_owner_asset_cards_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type',
                       'live_or_on_demand', 'subscribed_status', 'country_code', 'card_type', 'card_id'],
        'metrics': ['card_click_rate', 'card_teaser_click_rate', 'card_impressions', 'card_teaser_impressions',
                    'card_clicks', 'card_teaser_clicks']
    },
    'content_owner_asset_end_screens_a1': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type',
                       'live_or_on_demand', 'subscribed_status', 'country_code', 'end_screen_element_type',
                       'end_screen_element_id'],
        'metrics': ['end_screen_element_clicks', 'end_screen_element_impressions', 'end_screen_element_click_rate']
    },
    'content_owner_asset_combined_a2': {
        'dimensions': ['date', 'channel_id', 'video_id', 'asset_id', 'claimed_status', 'uploader_type',
                       'live_or_on_demand', 'subscribed_status', 'country_code', 'playback_location_type',
                       'traffic_source_type', 'device_type', 'operating_system'],
        'metrics': ['views', 'watch_time_minutes', 'average_view_duration_seconds', 'average_view_duration_percentage',
                    'red_views', 'red_watch_time_minutes']
    }
}


================================================
File: /src/component.py
================================================
"""
Component is a main class implementing specific YouTube reporting extractor.

"""
import csv
import logging
import os
from functools import cached_property

import backoff
from googleapiclient.errors import HttpError
from keboola.component.base import ComponentBase
from keboola.component.exceptions import UserException

from configuration import Configuration
from google_yt.client import Client
from report_types import report_types


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.

        The extractor algorithm is documented under the Component.run(self) method.
    """

    def __init__(self):
        super().__init__()
        self.conf = None
        self.client_yt = None
        logging.getLogger('googleapiclient.http').setLevel(logging.ERROR)

    def run(self):
        """Main execution code

        1) Initialize Configuration based on parameters section of component configuration

        2) Retrieve state information on running the component.
            The state comprises information of last run of the component:
            - onBehalfOfContentOwner .. ID of content owner if explicit owner was used
            - jobs .. mapping of report_type_id to existing jobs.
                Each job contains following fields:
                - created .. True / False flag indicating whether the job was created by the component
                - id .. ID of the job
                - lastReportCreateTime .. used as a filter to optimize number of requests to the API

        3) State cleanup
            Remove jobs that were created by the component but that are not requested in current run.
            (because of a change in component configuration)

        4) Create needed job(s)
            If a report type is requested for which there is no job in the system then such a job is created.

        5) Download reports
            For each requested report type check whether there were new report data available.
            When there are new report(s) for specific reporty type then collect most up-to-date information
            and prepare incremental output table for it.

        6) Write new state
        """

        # 1) Initialize Configuration
        self.conf: Configuration = Configuration.fromDict(parameters=self.configuration.parameters)

        # Check configuration validity - report problem early
        if not self.conf.report_settings.report_types:
            raise UserException('Configuration has no report types specified')
        if self.conf.on_behalf_of_content_owner and not self.conf.content_owner_id:
            raise UserException('Configuration assumes explicit content owner but none is specified')

        # Normalize configuration
        if not self.conf.on_behalf_of_content_owner:
            self.conf.content_owner_id = ''

        # 2) Retrieve state - get last state data/in/state.json from previous run
        previous_state = self.get_state_file()
        logging.debug(f'Original state: {previous_state}')

        # normalize state to a compatible version
        if 'onBehalfOfContentOwner' not in previous_state:
            previous_state['onBehalfOfContentOwner'] = ''
        if 'jobs' not in previous_state:
            previous_state['jobs'] = dict()

        # 3) Cleanup - remove created (by this configuration) jobs that are not requested
        for key, job in previous_state['jobs'].items():
            if job.get('created') and \
                    (self.conf.content_owner_id is not previous_state['onBehalfOfContentOwner']
                     or key not in self.conf.report_settings.report_types):
                context_description = f'Deleting job for {key}'
                self.client.delete_job(job_id=job['id'], on_behalf_of_owner=previous_state['onBehalfOfContentOwner'],
                                       context_description=context_description)

        context_description = 'listing all jobs' + \
                              (f' for owner {self.conf.content_owner_id}' if self.conf.content_owner_id else '')
        all_jobs = self.client.list_jobs(on_behalf_of_owner=self.conf.content_owner_id,
                                         context_description=context_description)

        new_state = {
            "onBehalfOfContentOwner": self.conf.content_owner_id,
            "jobs": dict()
        }

        # 4) Create needed jobs
        for report_type_id in self.conf.report_settings.report_types:
            # search corresponding job among all available jobs
            job_created = False
            job = next(filter(lambda x: x['reportTypeId'] == report_type_id, all_jobs), None)
            if not job:
                new_job_name = f'keboola_{report_type_id}'
                logging.warning(f"No existing job found, creating new one named: {new_job_name}")
                context_description = f'Creating job for {report_type_id}'
                job = self.client.create_job(new_job_name,
                                             report_type_id=report_type_id,
                                             on_behalf_of_owner=self.conf.content_owner_id,
                                             context_description=context_description)
                job_created = True
            job_from_state = previous_state['jobs'].get(report_type_id)
            if job_from_state and job_from_state['id'] == job['id']:
                new_state['jobs'][report_type_id] = job_from_state
            else:
                new_state['jobs'][report_type_id] = job
                job['created'] = job_created

        # 5) Download reports
        for job in new_state['jobs'].values():
            self.process_job(job)

        # 6) Write new state
        self.write_state_file(new_state)

    def process_job(self, job):
        """Process reports associated with a job

        There is one job for each report_type_id. There may be more reports associated with a job.
        Each report comprises data for one 24hour period. System may generate more than one report
        for each 24hour period. It makes sense to consider only the latest (report's createTime)
        report associated with specific 24hour period.

        job attributes:
            - created: boolean - flag whether the job was created by this configuration
            - id: str - job ID as maintained by the system
            - reportTypeId: str - system information
            - name: str - arbitrary name of the job
            - createTime: str - system information about the job (example: "2023-08-01T21:36:11Z")
            - lastReportCreateTime": str - information about last retrieved report

        """

        # Retrie reports that were not processed yet (if no state info available then request all)
        logging.info(f'Processing job for report: {job.get("reportTypeId")}')
        last_report_create_time = job.get('lastReportCreateTime')
        context_description = f'Listing reports after {last_report_create_time}'
        reports = self.client.list_reports(job_id=job['id'], created_after=last_report_create_time,
                                           context_description=context_description)
        if not reports:
            logging.warning(
                "No new reports were found, the jobs weren't created yet or there are no new reports. "
                "It may take up to 24 hours for a brand new job to generate reports.")
            return

        logging.info(f'{len(reports)} new reports found!')

        # Prepare output table description (manifest)
        # Note: We specify keys here but update columns information only after reports were downloaded
        report_type_id = job['reportTypeId']
        table_def = self.create_out_table_definition(f'{report_type_id}.csv',
                                                     incremental=True,
                                                     is_sliced=True,
                                                     primary_key=report_types[report_type_id]['dimensions']
                                                     )
        os.makedirs(table_def.full_path, exist_ok=True)

        report_raw_full_path = f'{self.files_out_path}/{report_type_id}.csv'
        os.makedirs(report_raw_full_path, exist_ok=True)

        # Retrieve create time of the latest available report and store it in the new state
        reports = sorted(reports, key=lambda d: d['createTime'], reverse=True)
        # By updating job object here we actually update an item in new state
        job['lastReportCreateTime'] = reports[0]['createTime']

        # Sort list of reports based on data period (startTime) and then on creation time (createTime).
        reports = sorted(reports, key=lambda d: d['startTime'] + d['createTime'])

        for index in range(len(reports)):
            report = reports[index]
            # Consider only the last report among a set of reports for specific date period
            if index + 1 == len(reports) or report['startTime'] != reports[index + 1]['startTime']:
                filename_raw = f'{report_raw_full_path}/{report["startTime"].replace(":", "_")}.csv'
                filename_tgt = f'{table_def.full_path}/{report["startTime"].replace(":", "_")}.csv'

                self.download_report_to_file(downloadUrl=report['downloadUrl'], target_filename=filename_raw)
                if not table_def.columns:
                    columns = self._read_columns(filename_raw)
                    table_def.columns = columns
                self._strip_header(filename_raw, filename_tgt)
        # We store the manifest only after columns were updated according to downloaded report
        self.write_manifest(table_def)

    @staticmethod
    def _read_columns(filename) -> list:
        with open(filename) as csvfile:
            csvreader = csv.reader(csvfile, delimiter=',')
            header = next(csvreader)
            return header

    @staticmethod
    def _strip_header(filename_raw, filename_tgt):
        """Copy csv file to destination without header line
        Args:
            filename_raw: Original csv file containing header line
            filename_tgt: Destination csv file without header line
        """
        with open(filename_raw, mode='rt') as src, open(filename_tgt, mode='wt') as tgt:
            src.readline()
            while True:
                row = src.readline()
                if not row:
                    break
                tgt.write(row)
        pass

    @backoff.on_exception(backoff.expo, HttpError, jitter=None, max_tries=3, base=1.7, factor=24)
    def download_report_to_file(self, downloadUrl: str, target_filename: str):
        """Download a report from media URL to target CSV file

        Args:
            downloadUrl: URL providing report data
            target_filename: Local file where to write the data
        """
        context_description = f'Downloading report to file {target_filename}'
        logging.info(context_description)
        self.client.download_report_file(download_url=downloadUrl, filename=target_filename,
                                         context_description=context_description)

    # Eventually we opted not to read report type ids dynamically.
    # Instead, we just use fixed set of types as retrieved from the API documentation.
    # @sync_action('list_report_types')
    # def list_report_types(self):
    #     report_type_ids = self.client.list_report_types()
    #     results = [SelectElement(value=tid['id'], label=f"{tid['name']} ({tid['id']})") for tid in report_type_ids]
    #     return results

    @cached_property
    def client(self) -> Client:
        """Retrieve google client for communication to the YT reporting service.

        If this is the first access to a client, application tries to create it. There are two options available:
        1) Create a client just by supplying an access token found in parameters as '#api_token'.
            It is used just during development when OAuth2 was not yet provided.
        2) Create a client using OAuth credentials from component configuration.
            This option ignores 'access_token'. It always creates a new token from a 'refresh_token'
        """
        if not self.client_yt:
            user = passwd = ''
            token_data = None
            api_token = self.configuration.parameters.get('#api_token')
            if not api_token:
                user = self.configuration.oauth_credentials.appKey
                passwd = self.configuration.oauth_credentials.appSecret
                token_data = self.configuration.oauth_credentials.data
            self.client_yt = Client(access_token=api_token, client_id=user, app_secret=passwd, token_data=token_data)
        return self.client_yt


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: /src/google_yt/client.py
================================================
import io
from functools import wraps

from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import Flow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from googleapiclient.http import MediaIoBaseDownload
from keboola.component.exceptions import UserException

SCOPES = ['https://www.googleapis.com/auth/yt-analytics-monetary.readonly']
API_SERVICE_NAME = 'youtubereporting'
API_VERSION = 'v1'


class Client:

    def __init__(self, access_token: str = None, client_id: str = None, app_secret: str = None,
                 token_data: dict = None):
        self.service = None
        if access_token:
            credentials = Credentials(token=access_token)
            pass
        else:
            client_secrets = {
                "web": {
                    "client_id": client_id,
                    "client_secret": app_secret,
                    "auth_uri": "https://oauth2.googleapis.com/auth",
                    "token_uri": "https://oauth2.googleapis.com/token"
                }
            }
            # make sure the token is expired explicitly to force refresh
            token_data['expires_at'] = 0
            credentials = Flow.from_client_config(client_secrets, scopes=SCOPES, token=token_data).credentials
        self.service = build(serviceName=API_SERVICE_NAME,
                             version=API_VERSION,
                             credentials=credentials)
        pass

    @staticmethod
    def handle_http_error(func):
        """Handle Http communication errors in a uniform manner

        It is used as a decorator. If the decorated function is called with context_description named parameter
        its contents will be used in UserException message.

        Raises:
            Exception: HttpError will be converted to UserException using context_description parameter
        """

        @wraps(func)
        def wrapper(self, *args, **kwargs):
            context_description = kwargs.get('context_description') if 'context_description' in kwargs else ''
            try:
                result = func(self, *args, **kwargs)
                return result
            except HttpError as error:
                raise UserException(f'{context_description} - Http error {error.status_code}: {error.reason}')
            except Exception:
                raise

        return wrapper

    @handle_http_error
    def list_report_types(self, on_behalf_of_owner='', include_system_managed=False, context_description=''):
        """Returns a list of report types that the channel or content owner can retrieve

        Uses API: https://developers.google.com/youtube/reporting/v1/reference/rest/v1/reportTypes/list

        Args:
            on_behalf_of_owner: explicit content owner
            include_system_managed: flag to include system managed types - we never use it actually
            context_description: text that will be used in handle_http_error decorator
        """
        kwargs = dict()
        if on_behalf_of_owner:
            kwargs['onBehalfOfContentOwner'] = on_behalf_of_owner
        if include_system_managed:
            kwargs['includeSystemManaged'] = include_system_managed
        results = self.service.reportTypes().list(**kwargs).execute()
        return results.get('reportTypes')

    @handle_http_error
    def create_job(self, name: str, report_type_id: str, on_behalf_of_owner='', context_description=''):
        """Create a job for specific report type.

        Uses API: https://developers.google.com/youtube/reporting/v1/reference/rest/v1/jobs/create

        API does not allow to create a 'systemManaged' job explicitly as it is already created by the system.
        (It is not allowed to specify a report type that is system managed)

        Args:
            name: Name of the job (maximum 100 characters)
            report_type_id: ID of a report type as listed by list_report_types(...)
            on_behalf_of_owner: If specified then specific channel owner reports will be listed
            context_description: text that will be used in handle_http_error decorator

        Returns:
            Job resource. Example
                {
                    'id': '5ce37f48-f2b6-4eaa-a0c5-afe6d4927f2a',
                    'reportTypeId': string,
                    'name': 'channel_cards_a1',
                    'createTime': '2023-08-01T21:22:27.501838Z',
                    'expireTime': timestamp,  # optional
                    'systemManaged': boolean  # optional
                }

        Raises:
            HttpError 400 - Bad Request - missing name or missing or non-existing report_type_id, or depricated
                403 - Forbidden - attempt to create system managed report
                409 - Conflict - resource already exists
        """
        body = {
            'name': name,
            'reportTypeId': report_type_id
        }
        kwargs = dict()
        if on_behalf_of_owner:
            kwargs['onBehalfOfContentOwner'] = on_behalf_of_owner

        results = self.service.jobs().create(body=body, **kwargs).execute()
        return results

    @handle_http_error
    def delete_job(self, job_id: str, on_behalf_of_owner='', context_description=''):
        """Delete existing job

        Uses API: https://developers.google.com/youtube/reporting/v1/reference/rest/v1/jobs/delete

        Args:
            job_id: ID of a job to delete
            on_behalf_of_owner: If specified then specific channel owner reports will be listed
            context_description: text that will be used in handle_http_error decorator
        """
        kwargs = {}
        if on_behalf_of_owner:
            kwargs['onBehalfOfContentOwner'] = on_behalf_of_owner
        try:
            self.service.jobs().delete(jobId=job_id, **kwargs).execute()
        except HttpError as ex:
            # we allow for non-existent job, other errors will be propagated
            if ex.status_code != 404:
                raise
        return

    @handle_http_error
    def list_jobs(self, on_behalf_of_owner: str = '', include_system_managed=False, context_description=''):
        """List jobs

        Uses API: https://developers.google.com/youtube/reporting/v1/reference/rest/v1/jobs/list

        Args:
            on_behalf_of_owner: If specified then specific channel owner reports will be listed.
                If not specified then current user channel reports will be listed.
            include_system_managed: If specified and True then system managed jobs will be listed.
            context_description: text that will be used in handle_http_error decorator

        Returns:
            A list of retrieved jobs. Example:
            [
               {
                'id': ''7a25fac7-a579-46ba-9aa2-6349600bd6eb'',
                'reportTypeId': 'channel_basic_a2',
                'name': 'basic_test',
                'createTime': '2023-07-31T04:47:02.012627Z'
               },
               ...
            ]
        """
        kwargs = {}
        if on_behalf_of_owner:
            kwargs['onBehalfOfContentOwner'] = on_behalf_of_owner
        if include_system_managed:
            kwargs['includeSystemManaged'] = include_system_managed

        results = self.service.jobs().list(**kwargs).execute()
        return results.get('jobs', [])

    @handle_http_error
    def list_reports(self, job_id: str, on_behalf_of_owner: str = '', created_after: str = '',
                     context_description=''):
        """List reports associated with specified job

        Uses API: https://developers.google.com/youtube/reporting/v1/reference/rest/v1/jobs.reports/list

        Args:
            job_id: ID of a job - must be specified
            on_behalf_of_owner: If specified then specific channel owner reports will be listed.
                If not specified then current user channel reports will be listed.
            created_after: Filter only reports newer than specified date.
                It is the best practice to specify value of createTime of latest retrieved report.
            context_description: text that will be used in handle_http_error decorator

        Returns:
            A list of retrieved reports. Example:
            [
               {
                'id': '8652265865',
                'jobId': '7a25fac7-a579-46ba-9aa2-6349600bd6eb',
                'startTime': '2023-07-29T07:00:00Z',
                'endTime': '2023-07-30T07:00:00Z',
                'createTime': '2023-07-31T04:47:02.012627Z',
                'download_url': 'https://youtubereporting.googleapis.com/.../jobs/7a2...6eb/reports/86...65?alt=media'
               },
               ...
            ]

        """
        kwargs = dict()
        if on_behalf_of_owner:
            kwargs['onBehalfOfContentOwner'] = on_behalf_of_owner
        if created_after:
            kwargs['createdAfter'] = created_after
        reports = []
        while True:
            results = self.service.jobs().reports().list(jobId=job_id, **kwargs).execute()
            if 'reports' not in results:
                break  # if there were no reports yet, there is no reports list at all
            reports.extend(results['reports'])
            if 'nextPageToken' not in results:
                break  # There are no more data, leave the loop
            kwargs['pageToken'] = results['nextPageToken']

        return reports

    @handle_http_error
    def download_report_file(self, download_url: str, filename: str, context_description=''):
        """Download generated report (specified by media URL) into a local file.

        GCP library provides dedicated method to download a stream of data into a local file.

        Args:
            download_url: URL providing report data
            filename: Target file where to write the data
            context_description: text that will be used in handle_http_error decorator
        """
        request = self.service.media().download_media(resourceName='')
        request.uri = download_url

        with io.FileIO(filename, mode='wb') as out_file:
            downloader = MediaIoBaseDownload(out_file, request)
            download_finished = False
            while download_finished is False:
                _, download_finished = downloader.next_chunk(num_retries=60)
            pass


================================================
File: /src/configuration.py
================================================
from dataclasses import dataclass

import dataconf


class ConfigurationBase:

    @staticmethod
    def fromDict(parameters: dict):
        return dataconf.dict(parameters, Configuration, ignore_unexpected=True)


@dataclass
class ReportSettings:
    report_types: list[str]


@dataclass
class Configuration(ConfigurationBase):
    report_settings: ReportSettings
    on_behalf_of_content_owner: bool = False
    content_owner_id: str = ''
    debug: bool = False


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /requirements.txt
================================================
keboola.component==1.4.4
keboola.utils
# keboola.http-client
mock
freezegun
google-api-python-client
google-auth-oauthlib

pyhocon~=0.3.60
dataconf~=2.2.1

backoff

================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
          - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:$TEST_TAG


  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - export TEST_TAG=${BITBUCKET_BRANCH//\//-}
            - echo "Pushing test image to repo. [tag=${TEST_TAG}]"
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:$TEST_TAG
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:$TEST_TAG
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /component_config/component_short_description.md
================================================
A leading online video platform where users can upload, share, and watch videos.

================================================
File: /component_config/configSchema.json
================================================
{
  "title": "YouTube reports",
  "type": "object",
  "required": [
    "on_behalf_of_content_owner",
    "report_settings"
  ],
  "properties": {
    "on_behalf_of_content_owner": {
      "type": "boolean",
      "title": "Use content owner ID",
      "format": "checkbox",
      "propertyOrder": 100,
      "description": "YouTube partners managing multiple accounts may run reports on behalf of different content owners.",
      "default": false
    },
    "content_owner_id": {
      "type": "string",
      "title": "Content owner",
      "propertyOrder": 200,
      "minLength": 1,
      "description": "Enter the ID of the content owner.",
      "options": {
        "dependencies": {
          "on_behalf_of_content_owner": true
        }
      }
    },
    "report_settings": {
      "title": "Report settings",
      "type": "object",
      "propertyOrder": 500,
      "required": [
        "report_types"
      ],
      "properties": {
        "report_types": {
          "type": "array",
          "title": "Report types",
          "propertyOrder": 250,
          "minLength": 1,
          "description": "Select one of the available report types described in the <a href='https://developers.google.com/youtube/reporting/v1/reports/'>documentation</a>.",
          "format": "select",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "channel_annotations_a1",
              "channel_basic_a2",
              "channel_cards_a1",
              "channel_combined_a2",
              "channel_demographics_a1",
              "channel_device_os_a2",
              "channel_end_screens_a1",
              "channel_playback_location_a2",
              "channel_province_a2",
              "channel_sharing_service_a1",
              "channel_subtitles_a2",
              "channel_traffic_source_a2",
              "playlist_basic_a1",
              "playlist_combined_a1",
              "playlist_device_os_a1",
              "playlist_playback_location_a1",
              "playlist_province_a1",
              "playlist_traffic_source_a1",
              "content_owner_basic_a3",
              "content_owner_province_a2",
              "content_owner_playback_location_a2",
              "content_owner_traffic_source_a2",
              "content_owner_device_os_a2",
              "content_owner_demographics_a1",
              "content_owner_sharing_service_a1",
              "content_owner_annotations_a1",
              "content_owner_cards_a1",
              "content_owner_end_screens_a1",
              "content_owner_subtitles_a2",
              "content_owner_combined_a2",
              "content_owner_playlist_basic_a1",
              "content_owner_playlist_province_a1",
              "content_owner_playlist_playback_location_a1",
              "content_owner_playlist_traffic_source_a1",
              "content_owner_playlist_device_os_a1",
              "content_owner_playlist_combined_a1",
              "content_owner_ad_rates_a1",
              "content_owner_estimated_revenue_a1",
              "content_owner_asset_estimated_revenue_a1",
              "content_owner_asset_basic_a2"
            ],
            "options": {
              "enum_titles": [
                "Channel annotations",
                "Channel user activity",
                "Channel cards",
                "Channel combined",
                "Channel demographics",
                "Channel device and OS",
                "Channel end screens",
                "Channel playback locations",
                "Channel province",
                "Channel sharing service",
                "Channel subtitles",
                "Channel traffic sources",
                "Playlist user activity",
                "Playlist combined",
                "Playlist device and OS",
                "Playlist playback locations",
                "Playlist province",
                "Playlist traffic sources",
                "Content owner user activity (content_owner_basic_a3)",
                "Content Owner user activity by province (content_owner_province_a2)",
                "Content owner playback locations",
                "Content owner traffic sources",
                "Content owner device type and operating system",
                "Content owner viewer demographics",
                "Content owner content sharing by platform",
                "Content owner annotations",
                "Content owner cards",
                "Content owner end screens",
                "Content owner subtitles",
                "Content owner combined (content_owner_combined_a2)",
                "Content owner user activity (content_owner_playlist_basic_a1)",
                "Content owner user activity by province (content_owner_playlist_province_a1)",
                "Content owner playback locations",
                "Content owner traffic sources",
                "Content owner device type and operating system",
                "Content owner combined (content_owner_playlist_combined_a1)",
                "Content owner ad rate reports",
                "Content owner estimated video revenue",
                "Content owner estimated asset revenue",
                "Content owner user activity (content_owner_asset_basic_a2)"
              ]
            }
          }
        }
      }
    }
  }
}


================================================
File: /component_config/configuration_description.md
================================================
**WARNING:** Please note that during the first execution, if there is no job for the specified report type yet,
the job is created, and no data is downloaded. **The first report may take up to 24 hours to be available.**

================================================
File: /component_config/configRowSchema.json
================================================
{}

================================================
File: /component_config/component_long_description.md
================================================
Use this connector to gain insights into the performance of your YouTube
content. Get detailed statistics and reports about various aspects of your YouTube channel, including:

1. **View Counts:** Information about the number of views your videos have received.
2. **Watch Time:** The total amount of time that people have spent watching your videos.
3. **Demographics:** Data on the age, gender, and location of your audience.
4. **Traffic Sources:** Insights into how viewers find your content, whether through search, suggested videos, or external websites.
5. **Revenue and Monetization:** If you're a YouTube partner, you can see data related to ad revenue and other monetization metrics.

**Google Limited Use Policy Disclosure:**

App’s use and transfer to any other app of information received from Google APIs will adhere
to [Google API Services User Data Policy](https://developers.google.com/terms/api-services-user-data-policy#additional_requirements_for_specific_api_scopes)
, including the Limited Use requirements.

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: /component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: /component_config/logger
================================================
gelf

================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /README.md
================================================
# YouTube Analytics Extractor

This data source component uses the YouTube Reporting API to create and run reports that give you insights into the performance of your YouTube
content. Automate data retrieval from
the [YouTube Analytics](https://developers.google.com/youtube/analytics/) reports.

## Prerequisites

1. Get access to your [YouTube Analytics](https://developers.google.com/youtube/analytics/) account.

## Configuration

1. Log in to your account using the Authorize Account button in the Keboola interface.
2. If applicable, you may check the `Use Content Owner ID` checkbox and specify the `Content Owner ID` parameter.
    - This parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on
      behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content
      partners that own and manage multiple YouTube channels. It allows content owners to authenticate once and
      get access to all their video and channel data, without having to provide authentication credentials for each
      individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube
      content owner.
3. Select the desired reports in the configuration. For a full list of supported reports, see
   the [Supported reports](#supported-reports) section.

## Supported reports

The connector allows you to run the following reports. The full list of supported reports is available in
the [YouTube Reporting API documentation](https://developers.google.com/youtube/reporting/v1/reports/).

### Channel reports

- [Video reports](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-reports)
    - [User activity](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-user-activity)
    - [User activity by province](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-province)
    - [Playback locations](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-playback-locations)
    - [Traffic sources](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-traffic-sources)
    - [Device type and operating system](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-device-type-and-operating-system)
    - [Viewer demographics](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-viewer-demographics)
    - [Content sharing by platform](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-content-sharing)
    - [Annotations](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-annotations)
    - [Cards](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-cards)
    - [End screens](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-end-screens)
    - [Subtitles](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-subtitles)
    - [Combined](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-combined)
- [Playlist reports](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-reports)
    - [User activity](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-user-activity)
    - [User activity by province](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-province)
    - [Playback locations](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-playback-locations)
    - [Traffic sources](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-traffic-sources)
    - [Device type and operating system](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-device-type-and-operating-system)
    - [Combined](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-combined)

### Content owner reports

- [Video reports](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-reports)
    - [User activity](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-user-activity)
    - [User activity by province](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-province)
    - [Playback locations](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-playback-locations)
    - [Traffic sources](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-traffic-sources)
    - [Device type and operating system](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-device-type-and-operating-system)
    - [Viewer demographics](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-viewer-demographics)
    - [Content sharing by platform](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-content-sharing)
    - [Annotations](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-annotations)
    - [Cards](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-cards)
    - [End screens](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-end-screens)
    - [Subtitles](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-subtitles)
    - [Combined](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#video-combined)
- [Playlist reports](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-reports)
    - [User activity](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-user-activity)
    - [User activity by province](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-province)
    - [Playback locations](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-playback-locations)
    - [Traffic sources](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-traffic-sources)
    - [Device type and operating system](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-device-type-and-operating-system)
    - [Combined](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#playlist-combined)
- [Ad rate reports](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#ad-rate-reports)
- [Estimated revenue reports](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#estimated-revenue-reports)
    - [Estimated video revenue](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#estimated-revenue-videos)
    - [Estimated asset revenue](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#estimated-revenue-assets)
- [Asset reports](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-reports)
    - [User activity](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-user-activity)
    - [User activity by province](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-province)
    - [Video playback locations](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-playback-locations)
    - [Traffic sources](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-traffic-sources)
    - [Device type and operating system](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-device-type-and-operating-system)
    - [Viewer demographics](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-viewer-demographics)
    - [Content sharing by platform](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-content-sharing)
    - [Annotations](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-annotations)
    - [Cards](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-cards)
    - [End screens](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-end-screens)
    - [Combined](https://developers.google.com/youtube/reporting/v1/reports/channel_reports#asset-combined)

## Functionality Notes

- The component uses the [YouTube Reporting API](https://developers.google.com/youtube/reporting/v1/reports/) to
  create and run reports that measure the results of YouTube advertising campaigns.
- **IMPORTANT:** The reporting service creates standardised reports every 24 hours. There is one job for each report type.
  There may be
  more reports (versions) associated with a job. Each report consists of data for one 24-hour period. The system may
  generate more than one report for each 24-hour period. It makes sense to consider only the latest (report's createTime)
  report associated with specific 24-hour period.
    - During the first execution, if there is no job for the specified report_type yet, the job is created and no data is
      downloaded. **The first report may take up to 24 hours to be available.**


Development
-----------

# Raw JSON Configuration Example

```json
{
  "parameters": {
    "report_types": [
      "channel_cards_a1",
      "channel_annotations_a1",
      "channel_basic_a2"
    ],
    "on_behalf_of_content_owner": true,
    "content_owner_id": "123456789"
  }
}
```

If required, change the local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace, and run the component with the following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone git@bitbucket.org:kds_consulting_team/kds-team.ex-youtube-analytics.git youtube_analytics
cd youtube_analytics
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with Keboola, please refer to the
[deployment section of our developer
documentation](https://developers.keboola.com/extend/component/deployment/).


