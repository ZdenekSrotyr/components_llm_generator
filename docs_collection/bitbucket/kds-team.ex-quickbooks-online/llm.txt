Directory structure:
└── kds_consulting_team-kds-team.ex-quickbooks-online/
    ├── templates/
    │   ├── journal.json
    │   ├── custom_query.json
    │   ├── templates.zip
    │   ├── procurement.json
    │   ├── template.json
    │   └── sales.json
    ├── Dockerfile
    ├── flake8.cfg
    ├── src/
    │   ├── mappings.json
    │   ├── report_mapping.py
    │   ├── client.py
    │   ├── mapping.py
    │   └── component.py
    ├── requirements.txt
    ├── bitbucket-pipelines.yml
    ├── component_config/
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── configRowSchema.json
    │   ├── component_long_description.md
    │   ├── sample-config/
    │   │   ├── in/
    │   │   │   ├── tables/
    │   │   │   │   ├── test.csv
    │   │   │   │   └── test.csv.manifest
    │   │   │   ├── state.json
    │   │   │   └── files/
    │   │   │       └── order1.xml
    │   │   ├── out/
    │   │   │   ├── tables/
    │   │   │   │   └── test.csv
    │   │   │   └── files/
    │   │   │       └── order1.xml
    │   │   └── config.json
    │   ├── loggerConfiguration.json
    │   └── logger
    ├── deploy.sh
    ├── docker-compose.yml
    ├── scripts/
    │   ├── build_n_test.sh
    │   ├── update_dev_portal_properties.sh
    │   ├── build_n_run.ps1
    │   ├── run.bat
    │   └── run_kbc_tests.ps1
    └── README.md

================================================
File: /templates/journal.json
================================================
{
    "name": "Journal",
    "description": "*Journal*\n\t- Journal Entry \n\t- Account",
    "jobs": [
        {
            "endpoint": "query",
            "params": {
                "query": "select * from JournalEntry"
            },
            "dataField": "QueryResponse.JournalEntry",
            "dataType": "JournalEntry"
        },
        {
            "endpoint": "query",
            "params": {
                "query": "select * from Account"
            },
            "dataField": "QueryResponse.Account",
            "dataType": "Account"
        }
    ],
    "mappings":{
        "JournalEntry":{
            "Adjustment":{
                "type":"column",
                "mapping":{"destination":"Adjustment"}
            },
            "Id":{
                "type":"column",
                "mapping":{"destination":"ID"}
            },
            "DocNumber":{
                "type":"column",
                "mapping":{"destination":"DocNumber"}
            },
            "TxnDate":{
                "type":"column",
                "mapping":{"destination":"TxnDate"}
            },
            "CurrencyRef.value":{
                "type":"column",
                "mapping":{"destination":"Currency"}
            },
            "ExchangeRate":{
                "type":"column",
                "mapping":{"destination":"ExchangeRate"}
            },
            "TotalAmt":{
                "type":"column",
                "mapping":{"destination":"TotalAmt"}
            },
            "HomeTotalAmt":{
                "type":"column",
                "mapping":{"destination":"HomeTotalAmt"}
            },
            "Line":{
                "type":"table",
                "destination":"JournalEntry-Line",
                "tableMapping":{
                    "Id":{
                        "type":"column",
                        "mapping":{"destination":"ID"}
                    },
                    "Description":{
                        "type":"column",
                        "mapping":{"destination":"Description"}
                    },
                    "Amount":{
                        "type":"column",
                        "mapping":{"destination":"Amount"}
                    },
                    "DetailType":{
                        "type":"column",
                        "mapping":{"destination":"DetailType"}
                    },
                    "JournalEntryLineDetail":{
                        "type":"table",
                        "destination":"JournalEntry-Line-Detail",
                        "tableMapping":{
                            "PostingType":{
                                "type":"column",
                                "mapping":{"destination":"PostingType"}
                            },
                            "AccountRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Account_ID"}
                            },
                            "AccountRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Account_name"}
                            },
                            "Entity.Type":{
                                "type":"column",
                                "mapping":{"destination":"Entity_type"}
                            },
                            "Entity.EntityRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Entity_ID"}
                            },
                            "Entity.EntityRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Entity_name"}
                            },
                            "ClassRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Class_ID"}
                            },
                            "ClassRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Class_name"}
                            },
                            "DepartmentRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Deparement_ID"}
                            },
                            "DepartmentRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Department_name"}
                            },
                            "TaxCodeRef.value":{
                                "type":"column",
                                "mapping":{"destination":"TaxCode_id"}
                            },
                            "TaxCodeRef.name":{
                                "type":"column",
                                "mapping":{"destination":"TaxCode_name"}
                            },
                            "TaxApplicableOn":{
                                "type":"column",
                                "mapping":{"destination":"TaxApplicableOn"}
                            },
                            "TaxAmount":{
                                "type":"column",
                                "mapping":{"destination":"TaxAmount"}
                            },
                            "BillableStatus":{
                                "type":"column",
                                "mapping":{"destination":"BillableStatus"}
                            }
                        }
                    }
                }
            },
            "TxnTaxDetail":{
                "type":"table",
                "destination":"JournalEntry-TxnTaxDetail",
                "tableMapping":{
                    "TxnTaxCodeRef.value":{
                        "type":"column",
                        "mapping":{"destination":"TaxCode_ID"}
                    },
                    "TxnTaxCodeRef.name":{
                        "type":"column",
                        "mapping":{"destination":"TaxCode_name"}
                    },
                    "TotalTax":{
                        "type":"column",
                        "mapping":{"destination":"TotalTax"}
                    },
                    "TaxLine":{
                        "type":"table",
                        "destination":"JournalEntry-TxnTaxDetai-TaxLine",
                        "tableMapping":{
                            "Amount":{
                                "type":"column",
                                "mapping":{"destination":"Amount"}
                            },
                            "DetailType":{
                                "type":"column",
                                "mapping":{"destination":"DetailType"}
                            },
                            "TaxLineDetail.NetAmountTaxable":{
                                "type":"column",
                                "mapping":{"destination":"NetAmountTaxable"}
                            },
                            "TaxlineDetail.TaxInclusiveAmount":{
                                "type":"column",
                                "mapping":{"destination":"TaxInclusiveAmount"}
                            },
                            "TaxlineDetail.TaxPercent":{
                                "type":"column",
                                "mapping":{"destination":"TaxPercent"}
                            },
                            "TaxLineDetail.TaxRateRef.value":{
                                "type":"column",
                                "mapping":{"destination":"TaxRate_ID"}
                            },
                            "TaxLineDetail.TaxRateRef.name":{
                                "type":"column",
                                "mapping":{"destination":"TaxRate_name"}
                            }
                        }
                    }
                }
            }
        },
        "Account":{
            "Name":{
                "type":"column",
                "mapping":{"destination":"Name"}
            },
            "SubAccount":{
                "type":"column",
                "mapping":{"destination":"SubAccount"}
            },
            "FullyQualifiedName":{
                "type":"column",
                "mapping":{"destination":"FullyQualifiedName"}
            },
            "Active":{
                "type":"column",
                "mapping":{"destination":"Active"}
            },
            "Classification":{
                "type":"column",
                "mapping":{"destination":"Classification"}
            },
            "AccountType":{
                "type":"column",
                "mapping":{"destination":"AccountType"}
            },
            "AccountSubType":{
                "type":"column",
                "mapping":{"destination":"AccountSubType"}
            },
            "CurrentBalance":{
                "type":"column",
                "mapping":{"destination":"CurrentBalance"}
            },
            "CurrentBalanceWithSubAccounts":{
                "type":"column",
                "mapping":{"destination":"CurrentBalanceWithSubAccounts"}
            },
            "CurrencyRef.value":{
                "type":"column",
                "mapping":{"destination":"Currency"}
            },
            "TaxCodeRef.value":{
                "type":"column",
                "mapping":{"destination":"TaxCode"}
            },
            "Id":{
                "type":"column",
                "mapping":{"destination":"ID"}
            }
        }
    }
}

================================================
File: /templates/custom_query.json
================================================
{
    "name": "Custom",
    "description": "*Custom Query Template*\n\t- Query",
    "debug": true,
    "jobs": [
        {
            "endpoint": "query",
            "params": {
                "query": {
                    "attr": "query"
                }
            },
            "dataField": "QueryResponse"
        }
    ]
}

================================================
File: /templates/procurement.json
================================================
{
    "name": "Procurement",
    "description": "*Procurement*\n\t-Purchase Order\n\t- Bill\n\t- Vendor ",
    "jobs": [
        {
            "endpoint": "query",
            "params": {
                "query": "select * from Bill"
            },
            "dataField": "QueryResponse.Bill",
            "dataType": "Bill"
        },
        {
            "endpoint": "query",
            "params": {
                "query": "select * from PurchaseOrder"
            },
            "dataField": "QueryResponse.PurchaseOrder",
            "dataType":"PurchaseOrder"
        },
        {
            "endpoint": "query",
            "params": {
                "query": "select * from Vendor"
            },
            "dataField": "QueryResponse.Vendor",
            "dataType":"Vendor"
        }
    ],
    "mappings":{
        "Bill":{
            "Id":{
                "type":"column",
                "mapping":{"destination":"ID"}
            },            
            "SalesTermRef.value":{
                "type":"column",
                "mapping":{"destination":"SalesTerm"}
            },
            "DueDate":{
                "type":"column",
                "mapping":{"destination":"DueDate"}
            },
            "Balance":{
                "type":"column",
                "mapping":{"destination":"Balance"}
            },
            "HomeBalance":{
                "type":"column",
                "mapping":{"destination":"HomeBalance"}
            },
            "DocNumber":{
                "type":"column",
                "mapping":{"destination":"DocNumber"}
            },
            "TxnDate":{
                "type":"column",
                "mapping":{"destination":"TxnDate"}
            },
            "CurrencyRef.value":{
                "type":"column",
                "mapping":{"destination":"Currency"}
            },
            "ExchangeRate":{
                "type":"column",
                "mapping":{"destination":"ExchangeRate"}
            },
            "LinkedTxn":{
                "type":"table",
                "destination":"Bill-LinkedTxn",
                "tableMapping":{
                    "TxnId":{
                        "type":"column",
                        "mapping":{"destination":"TxnID"}
                    },
                    "TxnType":{
                        "type":"column",
                        "mapping":{"destination":"TxnType"}
                    }
                }
            },
            "VendorRef.value":{
                "type":"column",
                "mapping":{"destination":"Vendor_ID"}
            },
            "VendorRef.name":{
                "type":"column",
                "mapping":{"destination":"Vendor_name"}
            },
            "APAccountRef.value":{
                "type":"column",
                "mapping":{"destination":"APAccount_ID"}
            },
            "APAccountRef.name":{
                "type":"column",
                "mapping":{"destination":"APAccount_name"}
            },
            "TotalAmt":{
                "type":"column",
                "mapping":{"destination":"TotalAmount"}
            },
            "GlobalTaxCalculation":{
                "type":"column",
                "mapping":{"destination":"GlobalTaxCalculation"}
            },
            "TxnTaxDetail":{
                "type":"table",
                "destination":"Bill-TxnTaxDetail",
                "tableMapping":{
                    "TotalTax":{
                          "type":"column",
                          "mapping":{"destination":"TotalTax"}
                    },
                    "TaxLine":{
                        "type":"table",
                        "destination":"Bill-TxnTaxDetail-TaxLine",
                        "tableMapping":{
                            "Amount":{
                                "type":"column",
                                "mapping":{"destination":"Amount"}
                            },
                            "DetailType":{
                                "type":"column",
                                "mapping":{"destination":"DetailType"}
                            },
                            "TaxLineDetail.TaxRateRef.value":{
                                "type":"column",
                                "mapping":{"destination":"TaxRate_ID"}
                            },
                            "TaxLineDetail.TaxPercent":{
                                "type":"column",
                                "mapping":{"destination":"TaxPercent"}
                            },
                            "TaxLineDetail.NetAmountTaxable":{
                                "type":"column",
                                "mapping":{"destination":"NetAmountTaxable"}
                            }

                        }
                    }
                }
            },
            "Line":{
                "type":"table",
                "destination":"Bill-Line",
                "tableMapping":{
                    "Id":{
                        "type":"column",
                        "mapping":{"destination":"ID"}
                    },
                    "Description":{
                        "type":"column",
                        "mapping":{"destination":"Description"}
                    },
                    "Amount":{
                        "type":"column",
                        "mapping":{"destination":"Amount"}
                    },
                    "DetailType":{
                        "type":"column",
                        "mapping":{"destination":"DetailType"}
                    },
                    "AccountBasedExpenseLineDetail":{
                        "type":"table",
                        "destination":"Bill-AccountBasedExpenseLineDetail",
                        "tableMapping":{
                            "AccountRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Account_ID"}
                            },
                            "AccountRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Account_name"}
                            },
                            "CustomerRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Customer_ID"}
                            },
                            "CustomerRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Customer_name"}
                            },
                            "BillableStatus":{
                                "type":"column",
                                "mapping":{"destination":"Billable_Status"}
                            },
                            "TaxAmount":{
                                "type":"column",
                                "mapping":{"destination":"TaxAmount"}
                            },
                            "TaxCodeRef.value":{
                                "type":"column",
                                "mapping":{"destination":"TaxCode_ID"}
                            },
                            "TaxInclusiveAmt":{
                                "type":"column",
                                "mapping":{"destination":"TaxInclusiveAmount"}
                            }
                        }
                    },
                    "ItemBasedExpenseLineDetail":{
                        "type":"table",
                        "destination":"Bill-ItemBasedExpenseLineDetail",
                        "tableMapping":{
                            "ItemRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Item_ID"}
                            },
                            "ItemRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Item_name"}
                            },
                            "UnitPrice":{
                                "type":"column",
                                "mapping":{"destination":"UnitPrice"}
                            },
                            "Qty":{
                                "type":"column",
                                "mapping":{"destination":"Qty"}
                            },
                            "TaxCodeRef.value":{
                                "type":"column",
                                "mapping":{"destination":"TaxCode_ID"}
                            },
                            "CustomerRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Customer_ID"}
                            },
                            "CustomerRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Customer_name"}
                            },
                            "BillableStatus":{
                                "type":"column",
                                "mapping":{"destination":"Billable_Status"}
                            },
                            "TaxInclusiveAmt":{
                                "type":"column",
                                "mapping":{"destination":"TaxInclusiveAmount"}
                            }
                        }
                    }
                }
            }
        },
        "PurchaseOrder":{
            "Id":{
                "type":"column",
                "mapping":{"destination":"ID"}
            },
            "POStatus":{
                "type":"column",
                "mapping":{"destination":"POStatus"}
            },
            "DocNumber":{
                "type":"column",
                "mapping":{"destination":"DocNumber"}
            },
            "TxnDate":{
                "type":"column",
                "mapping":{"destination":"TxnDate"}
            },
            "CurrencyRef.value":{
                "type":"column",
                "mapping":{"destination":"Currency"}
            },
            "VendorRef.value":{
                "type":"column",
                "mapping":{"destination":"Vendor_ID"}
            },
            "VendorRef.name":{
                "type":"column",
                "mapping":{"destination":"Vendor_name"}
            },
            "APAccountRef.value":{
                "type":"column",
                "mapping":{"destination":"APAccount_ID"}
            },
            "APAccountRef.name":{
                "type":"column",
                "mapping":{"destination":"APAccount_name"}
            },
            "TotalAmt":{
                "type":"column",
                "mapping":{"destination":"TotalAmount"}
            },
            "VendorAddr":{
                "type":"table",
                "destination":"PurchaseOrder-VendorAddr",
                "tableMapping":{
                    "Id":{
                        "type":"column",
                        "mapping":{"destination":"ID"}
                    },
                    "Line1":{
                        "type":"column",
                        "mapping":{"destination":"Line1"}
                    },
                    "Line2":{
                        "type":"column",
                        "mapping":{"destination":"Line2"}
                    },
                    "Line3":{
                        "type":"column",
                        "mapping":{"destination":"Line3"}
                    },
                    "Line4":{
                        "type":"column",
                        "mapping":{"destination":"Line4"}
                    }
                }
            },
            "ShipAddr":{
                "type":"table",
                "destination":"PurchaseOrder-ShipAddr",
                "tableMapping":{
                    "Id":{
                        "type":"column",
                        "mapping":{"destination":"ID"}
                    },
                    "Line1":{
                        "type":"column",
                        "mapping":{"destination":"Line1"}
                    },
                    "Line2":{
                        "type":"column",
                        "mapping":{"destination":"Line2"}
                    },
                    "Line3":{
                        "type":"column",
                        "mapping":{"destination":"Line3"}
                    },
                    "Line4":{
                        "type":"column",
                        "mapping":{"destination":"Line4"}
                    }
                }
            },
            "CustomField":{
                "type":"table",
                "destination":"PurchaseOrder-CustomField",
                "tableMapping":{
                    "DefinitionId":{
                        "type":"column",
                        "mapping":{"destination":"Definition_ID"}
                    },
                    "Name":{
                        "type":"column",
                        "mapping":{"destination":"Name"}
                    },
                    "Type":{
                        "type":"column",
                        "mapping":{"destination":"Type"}
                    },
                    "StringValue":{
                        "type":"column",
                        "mapping":{"destination":"StringValue"}
                    }
                }
            },
            "Line":{
                "type":"table",
                "destination":"PurchaseOrder-Line",
                "tableMapping":{
                    "Id":{
                        "type":"column",
                        "mapping":{"destination":"ID"}
                    },
                    "Description":{
                        "type":"column",
                        "mapping":{"destination":"Description"}
                    },
                    "Amount":{
                        "type":"column",
                        "mapping":{"destination":"Amount"}
                    },
                    "DetailType":{
                        "type":"column",
                        "mapping":{"destination":"DetailType"}
                    },
                    "AccountBasedExpenseLineDetail":{
                        "type":"table",
                        "destination":"PurchaseOrder-AccountBasedExpenseLineDetail",
                        "tableMapping":{
                            "AccountRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Account_ID"}
                            },
                            "AccountRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Account_name"}
                            },
                            "CustomerRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Customer_ID"}
                            },
                            "CustomerRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Customer_name"}
                            },
                            "BillableStatus":{
                                "type":"column",
                                "mapping":{"destination":"Billable_Status"}
                            },
                            "TaxAmount":{
                                "type":"column",
                                "mapping":{"destination":"TaxAmount"}
                            },
                            "TaxCodeRef.value":{
                                "type":"column",
                                "mapping":{"destination":"TaxCode_ID"}
                            },
                            "TaxInclusiveAmt":{
                                "type":"column",
                                "mapping":{"destination":"TaxInclusiveAmount"}
                            }
                        }
                    },
                    "ItemBasedExpenseLineDetail":{
                        "type":"table",
                        "destination":"PurchaseOrder-ItemBasedExpenseLineDetail",
                        "tableMapping":{
                            "ItemRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Item_ID"}
                            },
                            "ItemRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Item_name"}
                            },
                            "UnitPrice":{
                                "type":"column",
                                "mapping":{"destination":"UnitPrice"}
                            },
                            "Qty":{
                                "type":"column",
                                "mapping":{"destination":"Qty"}
                            },
                            "TaxCodeRef.value":{
                                "type":"column",
                                "mapping":{"destination":"TaxCode_ID"}
                            },
                            "CustomerRef.value":{
                                "type":"column",
                                "mapping":{"destination":"Customer_ID"}
                            },
                            "CustomerRef.name":{
                                "type":"column",
                                "mapping":{"destination":"Customer_name"}
                            },
                            "BillableStatus":{
                                "type":"column",
                                "mapping":{"destination":"Billable_Status"}
                            },
                            "TaxInclusiveAmt":{
                                "type":"column",
                                "mapping":{"destination":"TaxInclusiveAmount"}
                            }
                        }
                    }
                }
            }
        },
        "Vendor":{
            "Id":{
                "type":"column",
                "mapping":{"destination":"ID"}
            },
            "AcctNum":{
                "type":"column",
                "mapping":{"destination":"AcctNum"}
            },
            "GivenName":{
                "type":"column",
                "mapping":{"destination":"GivenName"}
            },
            "FamilyName":{
                "type":"column",
                "mapping":{"destination":"FamilyName"}
            },
            "CompanyName":{
                "type":"column",
                "mapping":{"destination":"CompanyName"}
            },
            "DisplayName":{
                "type":"column",
                "mapping":{"destination":"DisplayName"}
            },
            "PrintOnCheckName":{
                "type":"column",
                "mapping":{"destination":"PrintOnCheckName"}
            },
            "Active":{
                "type":"column",
                "mapping":{"destination":"Active"}
            },
            "Vendor1099":{
                "type":"column",
                "mapping":{"destination":"Vendor1099"}
            },
            "PrimaryPhone.FreeForNumber":{
                "type":"column",
                "mapping":{"destination":"PrimaryPhone"}
            },
            "AlternatePhone.FreeForNumber":{
                "type":"column",
                "mapping":{"destination":"AlternatePhone"}
            },
            "Mobile.FreeForNumber":{
                "type":"column",
                "mapping":{"destination":"Mobile"}
            },
            "PrimaryEmailAddr.Address":{
                "type":"column",
                "mapping":{"destination":"PrimaryEmailAddress"}
            },
            "WebAddr.URI":{
                "type":"column",
                "mapping":{"destination":"WebAddress"}
            },
            "BillAddr":{
                "type":"table",
                "destination":"Vendor-BillAddr",
                "tableMapping":{
                    "Id":{
                        "type":"column",
                        "mapping":{"destination":"ID"}
                    },
                    "Line1":{
                        "type":"column",
                        "mapping":{"destination":"Line1"}
                    },
                    "City":{
                        "type":"column",
                        "mapping":{"destination":"City"}
                    },
                    "CountrySubDivisionCode":{
                        "type":"column",
                        "mapping":{"destination":"Province"}
                    },
                    "PostalCode":{
                        "type":"column",
                        "mapping":{"destination":"PostalCode"}
                    }
                }
            }
        }
    }
}

================================================
File: /templates/template.json
================================================
{
    "name": "Basic",
    "description": "Basic template",
    "debug": true,
    "outputBucket": "quickbooks",
    "jobs": [
        {
            "endpoint": "query",
            "params": {
                "query": {
                    "attr": "query"
                }
            },
            "dataField": "QueryResponse"
        }
    ]
}

================================================
File: /templates/sales.json
================================================
{
    "name": "Sales",
    "description": "*Sales*\n\t- Customers\n\t- Invoices",
    "jobs": [
        {
            "endpoint": "query",
            "params": {
                "query": "select * from Customer"
            },
            "dataField": "QueryResponse.Customer",
            "dataType": "Customer"
        },
        {
            "endpoint": "query",
            "params": {
                "query": "select * from Invoice"
            },
            "dataField": "QueryResponse.Invoice",
            "dataType":"Invoice"
        }
    ],
    "mappings":{
        "Customer":{
            "Id":{
                "type":"column",
                "mapping":{"destination":"ID"}
            },
            "GivenName":{
                "type":"column",
                "mapping":{"destination":"GivenName"}
            },
            "FamilyName":{
                "type":"column",
                "mapping":{"destination":"FamilyName"}
            },
            "FullQualifiedName":{
                "type":"column",
                "mapping":{"destination":"FullQualifiedName"}
            },
            "CompanyName":{
                "type":"column",
                "mapping":{"destination":"CompanyName"}
            },
            "DisplayName":{
                "type":"column",
                "mapping":{"destination":"DisplayName"}
            },
            "PrintOnCheckName":{
                "type":"column",
                "mapping":{"destination":"PrintOnCheckName"}
            },
            "Active":{
                "type":"column",
                "mapping":{"destination":"Active"}
            },
            "PrimaryPhone.FreeFormNumber":{
                "type":"column",
                "mapping":{"destination":"PrimaryPhone"}
            },
            "PrimaryEmailAddr.Address":{
                "type":"column",
                "mapping":{"destination":"PrimaryEmail"}
            },
            "BillAddr":{
                "type":"table",
                "destination":"Customer-BillAddr",
                "tableMapping":{
                    "Id":{
                        "type":"column",
                        "mapping":{"destination":"BillAddr_ID"}
                    },
                    "Line1":{
                        "type":"column",
                        "mapping":{"destination":"Line_1"}
                    },
                    "City":{
                        "type":"column",
                        "mapping":{"destination":"City"}
                    },
                    "CountrySubDivisionCode":{
                        "type":"column",
                        "mapping":{"destination":"State"}
                    },
                    "Lat":{
                        "type":"column",
                        "mapping":{"destination":"Latitude"}
                    },
                    "Long":{
                        "type":"column",
                        "mapping":{"destination":"Longitude"}
                    }
                }
            },
            "ShipAddr":{
                "type":"table",
                "destination":"Customer-ShipAddr",
                "tableMapping":{
                    "Id":{
                        "type":"column",
                        "mapping":{"destination":"ShipAddr_ID"}
                    },
                    "Line1":{
                        "type":"column",
                        "mapping":{"destination":"Line_1"}
                    },
                    "City":{
                        "type":"column",
                        "mapping":{"destination":"City"}
                    },
                    "CountrySubDivisionCode":{
                        "type":"column",
                        "mapping":{"destination":"State"}
                    },
                    "Lat":{
                        "type":"column",
                        "mapping":{"destination":"Latitude"}
                    },
                    "Long":{
                        "type":"column",
                        "mapping":{"destination":"Longitude"}
                    }
                }
            },
            "Taxable":{
                "type":"column",
                "mapping":{"destination":"Taxable"}
            },
            "Job":{
                "type":"column",
                "mapping":{"destination":"Job"}
            },
            "BillWithParent":{
                "type":"column",
                "mapping":{"destination":"BillWithParent"}
            },
            "Balance":{
                "type":"column",
                "mapping":{"destination":"Balance"}
            },
            "BalanceWithJobs":{
                "type":"column",
                "mapping":{"destination":"BalanceWithJobs"}
            },
            "SalesTermRef.value":{
                "type":"column",
                "mapping":{"destination":"SalesTerm"}
            },
            "CurrencyRef.value":{
                "type":"column",
                "mapping":{"destination":"Currency"}
            },
            "PreferredDeliveryMethod":{
                "type":"column",
                "mapping":{"destination":"PreferredDeliveryMethod"}
            }

        },
        "Invoice":{
            "Id":{
                "type":"column",
                "mapping":{"destination":"ID"}
            },
            "CustomerRef.value":{
                "type":"column",
                "mapping":{"destination":"Customer_ID"}
            },
            "CustomerRef.name":{
                "type":"column",
                "mapping":{"destination":"Customer_name"}
            },
            "DocNumber":{
                "type":"column",
                "mapping":{"destination":"DocNumber"}
            },
            "TxnDate":{
                "type":"column",
                "mapping":{"destination":"TxnDate"}
            },
            "LinkedTxn":{
                "type":"table",
                "destination":"Invoice-LinkedTxn",
                "tableMapping":{
                    "TxnId":{
                        "type":"column",
                        "mapping":{"destination":"TxnID"}
                    },
                    "TxnType":{
                        "type":"column",
                        "mapping":{"destination":"TxnType"}
                    }
                }
            },
            "CurrencyRef.value":{
                "type":"column",
                "mapping":{"destination":"Currency"}
            },
            "ExchangeRate":{
                "type":"column",
                "mapping":{"destination":"ExchangeRate"}
            },
            "SalesTermRef.value":{
                "type":"column",
                "mapping":{"destination":"SalesTerm"}
            },
            "DueDate":{
                "type":"column",
                "mapping":{"destination":"DueDate"}
            },
            "GlobalTaxCalculation":{
                "type":"column",
                "mapping":{"destination":"GlobalTaxCalculation"}
            },
            "TotalAmt":{
                "type":"column",
                "mapping":{"destination":"TotalAmount"}
            },
            "HomeTotalAmt":{
                "type":"column",
                "mapping":{"destination":"HomeTotalAmount"}
            },
            "PrintStatus":{
                "type":"column",
                "mapping":{"destination":"PrintStatus"}
            },
            "EmailStatus":{
                "type":"column",
                "mapping":{"destination":"EmailStatus"}
            },
            "BillEmail.Address":{
                "type":"column",
                "mapping":{"destination":"BillEmail_Address"}
            },
            "Balance":{
                "type":"column",
                "mapping":{"destination":"Balance"}
            },
            "HomeBalance":{
                "type":"column",
                "mapping":{"destination":"HomeBalance"}
            },
            "DeliveryInfo.DeliveryType":{
                "type":"column",
                "mapping":{"destination":"DeliveryType"}
            },
            "DeliveryInfo.DeliveryTime":{
                "type":"column",
                "mapping":{"destination":"DeliveryTime"}
            },
            "BillAddr":{
                "type":"table",
                "destination":"Invoice-BillAddr",
                "tableMapping":{
                    "Id":{
                        "type":"column",
                        "mapping":{"destination":"BillAddr_ID"}
                    },
                    "Line1":{
                        "type":"column",
                        "mapping":{"destination":"Line_1"}
                    },
                    "City":{
                        "type":"column",
                        "mapping":{"destination":"City"}
                    },
                    "CountrySubDivisionCode":{
                        "type":"column",
                        "mapping":{"destination":"State"}
                    }
                }
            },
            "ShipAddr":{
                "type":"table",
                "destination":"Invoice-ShipAddr",
                "tableMapping":{
                    "Id":{
                        "type":"column",
                        "mapping":{"destination":"ShipAddr_ID"}
                    },
                    "Line1":{
                        "type":"column",
                        "mapping":{"destination":"Line_1"}
                    },
                    "City":{
                        "type":"column",
                        "mapping":{"destination":"City"}
                    },
                    "CountrySubDivisionCode":{
                        "type":"column",
                        "mapping":{"destination":"State"}
                    },
                    "Lat":{
                        "type":"column",
                        "mapping":{"destination":"Latitude"}
                    },
                    "Long":{
                        "type":"column",
                        "mapping":{"destination":"Longitude"}
                    }
                }
            },
            "Line":{
                "type":"table",
                "destination":"Invoice-Line",
                "tableMapping":{
                    "Id":{
                        "type":"column",
                        "mapping":{"destination":"ID"}
                    },
                    "LineNum":{
                        "type":"column",
                        "mapping":{"destination":"LineNum"}
                    },
                    "Description":{
                        "type":"column",
                        "mapping":{"destination":"Description"}
                    },
                    "Amount":{
                        "type":"column",
                        "mapping":{"destination":"Amount"}
                    },
                    "DetailType":{
                        "type":"column",
                        "mapping":{"destination":"DetailType"}
                    },
                    "SalesItemLineDetail.ItemRef.value":{
                        "type":"column",
                        "mapping":{"destination":"SalesItem_ID"}
                    },
                    "SalesItemLineDetail.ItemRef.name":{
                        "type":"column",
                        "mapping":{"destination":"SalesItem_name"}
                    },
                    "SalesItemLineDetail.UnitPrice":{
                        "type":"column",
                        "mapping":{"destination":"UnitPrice"}
                    },
                    "SalesItemLineDetail.Qty":{
                        "type":"column",
                        "mapping":{"destination":"Qty"}
                    },
                    "SalesItemLineDetail.TaxCodeRef.value":{
                        "type":"column",
                        "mapping":{"destination":"TaxCode"}
                    }
                }
            },
            "TxnTaxDetail":{
                "type":"table",
                "destination":"Invoice-TxnTaxDetail",
                "tableMapping":{
                    "TotalTax":{
                          "type":"column",
                          "mapping":{"destination":"TotalTax"}
                    },
                    "TaxLine":{
                        "type":"table",
                        "destination":"Invoice-TxnTaxDetail-TaxLine",
                        "tableMapping":{
                            "Amount":{
                                "type":"column",
                                "mapping":{"destination":"Amount"}
                            },
                            "DetailType":{
                                "type":"column",
                                "mapping":{"destination":"DetailType"}
                            },
                            "TaxLineDetail.TaxRateRef.value":{
                                "type":"column",
                                "mapping":{"destination":"TaxRate_ID"}
                            },
                            "TaxLineDetail.TaxPercent":{
                                "type":"column",
                                "mapping":{"destination":"TaxPercent"}
                            },
                            "TaxLineDetail.NetAmountTaxable":{
                                "type":"column",
                                "mapping":{"destination":"NetAmountTaxable"}
                            }

                        }
                    }
                }
            }

        }
    }
}

================================================
File: /Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install --upgrade pip

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /src/mappings.json
================================================
{
    "Account": {
        "Name": {
            "type": "column",
            "mapping": {
                "destination": "Name"
            }
        },
        "SubAccount": {
            "type": "column",
            "mapping": {
                "destination": "SubAccount"
            }
        },
        "FullyQualifiedName": {
            "type": "column",
            "mapping": {
                "destination": "FullyQualifiedName"
            }
        },
        "Active": {
            "type": "column",
            "mapping": {
                "destination": "Active"
            }
        },
        "Classification": {
            "type": "column",
            "mapping": {
                "destination": "Classification"
            }
        },
        "AccountType": {
            "type": "column",
            "mapping": {
                "destination": "AccountType"
            }
        },
        "AccountSubType": {
            "type": "column",
            "mapping": {
                "destination": "AccountSubType"
            }
        },
        "CurrentBalance": {
            "type": "column",
            "mapping": {
                "destination": "CurrentBalance"
            }
        },
        "CurrentBalanceWithSubAccounts": {
            "type": "column",
            "mapping": {
                "destination": "CurrentBalanceWithSubAccounts"
            }
        },
        "CurrencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Currency"
            }
        },
        "TaxCodeRef.value": {
            "type": "column",
            "mapping": {
                "destination": "TaxCode"
            }
        },
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        }
    },
    "Department": {
        "FullyQualifiedName": {
            "type": "column",
            "mapping": {
                "destination": "FullyQualifiedName"
            }
        },
        "domain": {
            "type": "column",
            "mapping": {
                "destination": "domain"
            }
        },
        "Name": {
            "type": "column",
            "mapping": {
                "destination": "Name"
            }
        },
        "SyncToken": {
            "type": "column",
            "mapping": {
                "destination": "SyncToken"
            }
        },
        "SubDepartment": {
            "type": "column",
            "mapping": {
                "destination": "SubDepartment"
            }
        },
        "sparse": {
            "type": "column",
            "mapping": {
                "destination": "sparse"
            }
        },
        "Active": {
            "type": "column",
            "mapping": {
                "destination": "Active"
            }
        },
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "Id"
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        }
    },
    "Bill": {
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "SalesTermRef.value": {
            "type": "column",
            "mapping": {
                "destination": "SalesTerm"
            }
        },
        "DueDate": {
            "type": "column",
            "mapping": {
                "destination": "DueDate"
            }
        },
        "Balance": {
            "type": "column",
            "mapping": {
                "destination": "Balance"
            }
        },
        "HomeBalance": {
            "type": "column",
            "mapping": {
                "destination": "HomeBalance"
            }
        },
        "DocNumber": {
            "type": "column",
            "mapping": {
                "destination": "DocNumber"
            }
        },
        "TxnDate": {
            "type": "column",
            "mapping": {
                "destination": "TxnDate"
            }
        },
        "CurrencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Currency"
            }
        },
        "ExchangeRate": {
            "type": "column",
            "mapping": {
                "destination": "ExchangeRate"
            }
        },
        "LinkedTxn": {
            "type": "table",
            "destination": "Bill-LinkedTxn",
            "tableMapping": {
                "TxnId": {
                    "type": "column",
                    "mapping": {
                        "destination": "TxnID",
                        "primaryKey": true
                    }
                },
                "TxnType": {
                    "type": "column",
                    "mapping": {
                        "destination": "TxnType"
                    }
                }
            }
        },
        "VendorRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Vendor_ID"
            }
        },
        "VendorRef.name": {
            "type": "column",
            "mapping": {
                "destination": "Vendor_name"
            }
        },
        "APAccountRef.value": {
            "type": "column",
            "mapping": {
                "destination": "APAccount_ID"
            }
        },
        "APAccountRef.name": {
            "type": "column",
            "mapping": {
                "destination": "APAccount_name"
            }
        },
        "TotalAmt": {
            "type": "column",
            "mapping": {
                "destination": "TotalAmount"
            }
        },
        "GlobalTaxCalculation": {
            "type": "column",
            "mapping": {
                "destination": "GlobalTaxCalculation"
            }
        },
        "TxnTaxDetail": {
            "type": "table",
            "destination": "Bill-TxnTaxDetail",
            "tableMapping": {
                "TotalTax": {
                    "type": "column",
                    "mapping": {
                        "destination": "TotalTax"
                    }
                },
                "TaxLine": {
                    "type": "table",
                    "destination": "Bill-TxnTaxDetail-TaxLine",
                    "tableMapping": {
                        "Amount": {
                            "type": "column",
                            "mapping": {
                                "destination": "Amount"
                            }
                        },
                        "DetailType": {
                            "type": "column",
                            "mapping": {
                                "destination": "DetailType"
                            }
                        },
                        "TaxLineDetail.TaxRateRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxRate_ID",
                                "primaryKey": true
                            }
                        },
                        "TaxLineDetail.TaxPercent": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxPercent"
                            }
                        },
                        "TaxLineDetail.NetAmountTaxable": {
                            "type": "column",
                            "mapping": {
                                "destination": "NetAmountTaxable"
                            }
                        }
                    }
                }
            }
        },
        "Line": {
            "type": "table",
            "destination": "Bill-Line",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "ID",
                        "primaryKey": true
                    }
                },
                "Description": {
                    "type": "column",
                    "mapping": {
                        "destination": "Description"
                    }
                },
                "Amount": {
                    "type": "column",
                    "mapping": {
                        "destination": "Amount"
                    }
                },
                "DetailType": {
                    "type": "column",
                    "mapping": {
                        "destination": "DetailType"
                    }
                },
                "AccountBasedExpenseLineDetail": {
                    "type": "column",
                    "mapping": {
                        "destination": "AccountBasedExpenseLineDetail"
                    }
                },
                "AccountBasedExpenseLineDetail.AccountRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "AccountBasedExpenseLineDetail_Account_ID"
                    }
                },
                "AccountBasedExpenseLineDetail.AccountRef.name": {
                    "type": "column",
                    "mapping": {
                        "destination": "AccountBasedExpenseLineDetail_Account_name"
                    }
                },
                "AccountBasedExpenseLineDetail.CustomerRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "AccountBasedExpenseLineDetail_Customer_ID"
                    }
                },
                "AccountBasedExpenseLineDetail.CustomerRef.name": {
                    "type": "column",
                    "mapping": {
                        "destination": "AccountBasedExpenseLineDetail_Customer_name"
                    }
                },
                "AccountBasedExpenseLineDetail.BillableStatus": {
                    "type": "column",
                    "mapping": {
                        "destination": "AccountBasedExpenseLineDetail_Billable_Status"
                    }
                },
                "AccountBasedExpenseLineDetail.TaxAmount": {
                    "type": "column",
                    "mapping": {
                        "destination": "AccountBasedExpenseLineDetail_TaxAmount"
                    }
                },
                "AccountBasedExpenseLineDetail.TaxCodeRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "AccountBasedExpenseLineDetail_TaxCode_ID"
                    }
                },
                "AccountBasedExpenseLineDetail.TaxInclusiveAmt": {
                    "type": "column",
                    "mapping": {
                        "destination": "AccountBasedExpenseLineDetail_TaxInclusiveAmount"
                    }
                },
                "ItemBasedExpenseLineDetail": {
                    "type": "column",
                    "mapping": {
                        "destination": "ItemBasedExpenseLineDetail"
                    }
                },
                "ItemBasedExpenseLineDetail.ItemRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "ItemBasedExpenseLineDetail_Item_ID"
                    }
                },
                "ItemBasedExpenseLineDetail.ItemRef.name": {
                    "type": "column",
                    "mapping": {
                        "destination": "ItemBasedExpenseLineDetail_Item_name"
                    }
                },
                "ItemBasedExpenseLineDetail.UnitPrice": {
                    "type": "column",
                    "mapping": {
                        "destination": "ItemBasedExpenseLineDetail_UnitPrice"
                    }
                },
                "ItemBasedExpenseLineDetail.Qty": {
                    "type": "column",
                    "mapping": {
                        "destination": "ItemBasedExpenseLineDetail_Qty"
                    }
                },
                "ItemBasedExpenseLineDetail.TaxCodeRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "ItemBasedExpenseLineDetail_TaxCode_ID"
                    }
                },
                "ItemBasedExpenseLineDetail.CustomerRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "ItemBasedExpenseLineDetail_Customer_ID"
                    }
                },
                "ItemBasedExpenseLineDetail.CustomerRef.name": {
                    "type": "column",
                    "mapping": {
                        "destination": "ItemBasedExpenseLineDetail_Customer_name"
                    }
                },
                "ItemBasedExpenseLineDetail.BillableStatus": {
                    "type": "column",
                    "mapping": {
                        "destination": "ItemBasedExpenseLineDetail_Billable_Status"
                    }
                },
                "ItemBasedExpenseLineDetail.TaxInclusiveAmt": {
                    "type": "column",
                    "mapping": {
                        "destination": "ItemBasedExpenseLineDetail_TaxInclusiveAmount"
                    }
                }
            }
        }
    },
    "BillPayment": {
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "VendorRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Vendor_ID"
            }
        },
        "VendorRef.name": {
            "type": "column",
            "mapping": {
                "destination": "Vendor_name"
            }
        },
        "PayType": {
            "type": "column",
            "mapping": {
                "destination": "PayType"
            }
        },
        "CheckPayment.BankAccountRef.value": {
            "type": "column",
            "mapping": {
                "destination": "CheckPayment_BankAccountID"
            }
        },
        "CheckPayment.BankAccountRef.name": {
            "type": "column",
            "mapping": {
                "destination": "CheckPayment_BankAccountName"
            }
        },
        "CheckPayment.PrintStatus": {
            "type": "column",
            "mapping": {
                "destination": "CheckPayment_PrintStatus"
            }
        },
        "TotalAmt": {
            "type": "column",
            "mapping": {
                "destination": "TotalAmt"
            }
        },
        "domain": {
            "type": "column",
            "mapping": {
                "destination": "domain"
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        },
        "DocNumber": {
            "type": "column",
            "mapping": {
                "destination": "DocNumber"
            }
        },
        "TxnDate": {
            "type": "column",
            "mapping": {
                "destination": "TxnDate"
            }
        },
        "CurrencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Currency"
            }
        },
        "ExchangeRate": {
            "type": "column",
            "mapping": {
                "destination": "ExchangeRate"
            }
        },
        "Line": {
            "type": "table",
            "destination": "BillPayment-Line",
            "tableMapping": {
                "Amount": {
                    "type": "column",
                    "mapping": {
                        "destination": "Amount"
                    }
                },
                "LinkedTxn": {
                    "type": "table",
                    "destination": "BillPayment-Line-LinkedTxn",
                    "tableMapping": {
                        "TxnId": {
                            "type": "column",
                            "mapping": {
                                "destination": "TxnId"
                            }
                        },
                        "TxnType": {
                            "type": "column",
                            "mapping": {
                                "destination": "TxnType"
                            }
                        }
                    }
                }
            }
        }
    },
    "Budget": {
        "StartDate": {
            "type": "column",
            "mapping": {
                "destination": "StartDate"
            }
        },
        "BudgetEntryType": {
            "type": "column",
            "mapping": {
                "destination": "BudgetEntryType"
            }
        },
        "EndDate": {
            "type": "column",
            "mapping": {
                "destination": "EndDate"
            }
        },
        "Name": {
            "type": "column",
            "mapping": {
                "destination": "Name"
            }
        },
        "BudgetType": {
            "type": "column",
            "mapping": {
                "destination": "BudgetType"
            }
        },
        "SyncToken": {
            "type": "column",
            "mapping": {
                "destination": "SyncToken"
            }
        },
        "domain": {
            "type": "column",
            "mapping": {
                "destination": "domain"
            }
        },
        "sparse": {
            "type": "column",
            "mapping": {
                "destination": "sparse"
            }
        },
        "Active": {
            "type": "column",
            "mapping": {
                "destination": "Active"
            }
        },
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        },
        "BudgetDetail": {
            "type": "table",
            "destination": "BudgetDetail",
            "tableMapping": {
                "Amount": {
                    "type": "column",
                    "mapping": {
                        "destination": "Amount"
                    }
                },
                "AccountRef.name": {
                    "type": "column",
                    "mapping": {
                        "destination": "Account_Name"
                    }
                },
                "AccountRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "Account_ID",
                        "primaryKey": true
                    }
                },
                "BudgetDate": {
                    "type": "column",
                    "mapping": {
                        "destination": "BudgetDate"
                    }
                },
                "ClassRef.name": {
                    "type": "column",
                    "mapping": {
                        "destination": "Class_Name"
                    }
                },
                "ClassRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "Class_ID"
                    }
                }
            }
        }
    },
    "Class": {
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "Name": {
            "type": "column",
            "mapping": {
                "destination": "Name"
            }
        },
        "SubClass": {
            "type": "column",
            "mapping": {
                "destination": "SubClass"
            }
        },
        "FullyQualifiedName": {
            "type": "column",
            "mapping": {
                "destination": "FullyQualifiedName"
            }
        },
        "Active": {
            "type": "column",
            "mapping": {
                "destination": "Active"
            }
        },
        "sparse": {
            "type": "column",
            "mapping": {
                "destination": "sparse"
            }
        },
        "SyncToken": {
            "type": "column",
            "mapping": {
                "destination": "SyncToken"
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        }
    },
    "Customer": {
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "GivenName": {
            "type": "column",
            "mapping": {
                "destination": "GivenName"
            }
        },
        "FamilyName": {
            "type": "column",
            "mapping": {
                "destination": "FamilyName"
            }
        },
        "FullQualifiedName": {
            "type": "column",
            "mapping": {
                "destination": "FullQualifiedName"
            }
        },
        "CompanyName": {
            "type": "column",
            "mapping": {
                "destination": "CompanyName"
            }
        },
        "DisplayName": {
            "type": "column",
            "mapping": {
                "destination": "DisplayName"
            }
        },
        "PrintOnCheckName": {
            "type": "column",
            "mapping": {
                "destination": "PrintOnCheckName"
            }
        },
        "Active": {
            "type": "column",
            "mapping": {
                "destination": "Active"
            }
        },
        "Notes": {
            "type": "column",
            "mapping": {
                "destination": "Notes"
            }
        },
        "PrimaryPhone.FreeFormNumber": {
            "type": "column",
            "mapping": {
                "destination": "PrimaryPhone"
            }
        },
        "PrimaryEmailAddr.Address": {
            "type": "column",
            "mapping": {
                "destination": "PrimaryEmail"
            }
        },
        "BillAddr": {
            "type": "table",
            "destination": "Customer-BillAddr",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "BillAddr_ID",
                        "primaryKey": true
                    }
                },
                "Line1": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line_1"
                    }
                },
                "City": {
                    "type": "column",
                    "mapping": {
                        "destination": "City"
                    }
                },
                "CountrySubDivisionCode": {
                    "type": "column",
                    "mapping": {
                        "destination": "State"
                    }
                },
                "Lat": {
                    "type": "column",
                    "mapping": {
                        "destination": "Latitude"
                    }
                },
                "Long": {
                    "type": "column",
                    "mapping": {
                        "destination": "Longitude"
                    }
                }
            }
        },
        "ShipAddr": {
            "type": "table",
            "destination": "Customer-ShipAddr",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "ShipAddr_ID",
                        "primaryKey": true
                    }
                },
                "Line1": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line_1"
                    }
                },
                "City": {
                    "type": "column",
                    "mapping": {
                        "destination": "City"
                    }
                },
                "CountrySubDivisionCode": {
                    "type": "column",
                    "mapping": {
                        "destination": "State"
                    }
                },
                "Lat": {
                    "type": "column",
                    "mapping": {
                        "destination": "Latitude"
                    }
                },
                "Long": {
                    "type": "column",
                    "mapping": {
                        "destination": "Longitude"
                    }
                }
            }
        },
        "Taxable": {
            "type": "column",
            "mapping": {
                "destination": "Taxable"
            }
        },
        "Job": {
            "type": "column",
            "mapping": {
                "destination": "Job"
            }
        },
        "BillWithParent": {
            "type": "column",
            "mapping": {
                "destination": "BillWithParent"
            }
        },
        "Balance": {
            "type": "column",
            "mapping": {
                "destination": "Balance"
            }
        },
        "BalanceWithJobs": {
            "type": "column",
            "mapping": {
                "destination": "BalanceWithJobs"
            }
        },
        "SalesTermRef.value": {
            "type": "column",
            "mapping": {
                "destination": "SalesTerm"
            }
        },
        "CurrencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Currency"
            }
        },
        "PreferredDeliveryMethod": {
            "type": "column",
            "mapping": {
                "destination": "PreferredDeliveryMethod"
            }
        },
        "ParentRef.value": {
            "type": "column",
            "mapping": {
                "destination": "ParentID"
            }
        }
    },
    "Deposit": {
        "DepositToAccountRef.value": {
            "type": "column",
            "mapping": {
                "destination": "DepositToAccount_ID"
            }
        },
        "DepositToAccountRef.name": {
            "type": "column",
            "mapping": {
                "destination": "DepositToAccount_name"
            }
        },
        "GlobalTaxCalculation": {
            "type": "column",
            "mapping": {
                "destination": "GlobalTaxCalculation"
            }
        },
        "TotalAmt": {
            "type": "column",
            "mapping": {
                "destination": "TotalAmt"
            }
        },
        "HomeTotalAmt": {
            "type": "column",
            "mapping": {
                "destination": "HomeTotalAmt"
            }
        },
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        },
        "TxnDate": {
            "type": "column",
            "mapping": {
                "destination": "TxnDate"
            }
        },
        "CurrencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Currency"
            }
        },
        "ExchangeRate": {
            "type": "column",
            "mapping": {
                "destination": "ExchangeRate"
            }
        },
        "PrivateNote": {
            "type": "column",
            "mapping": {
                "destination": "PrivateNote"
            }
        },
        "Line": {
            "type": "table",
            "destination": "Deposit-Line",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "ID",
                        "primaryKey": true
                    }
                },
                "LineNum": {
                    "type": "column",
                    "mapping": {
                        "destination": "LineNum"
                    }
                },
                "Description": {
                    "type": "column",
                    "mapping": {
                        "destination": "Description"
                    }
                },
                "Amount": {
                    "type": "column",
                    "mapping": {
                        "destination": "Amount"
                    }
                },
                "DetailType": {
                    "type": "column",
                    "mapping": {
                        "destination": "DetailType"
                    }
                },
                "DepositLineDetail.AccountRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "DepositLineDetail_Account_ID"
                    }
                },
                "DepositLineDetail.AccountRef.name": {
                    "type": "column",
                    "mapping": {
                        "destination": "DepositLineDetail_Account_Name"
                    }
                },
                "DepositLineDetail.TaxCodeRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "TaxCode"
                    }
                },
                "DepositLineDetail.TaxApplicableOn": {
                    "type": "column",
                    "mapping": {
                        "destination": "TaxApplicableOn"
                    }
                }
            }
        },
        "TxnTaxDetail.TotalTax": {
            "type": "column",
            "mapping": {
                "destination": "TotalTax"
            }
        },
        "TxnTaxDetail.TaxLine": {
            "type": "table",
            "destination": "Deposit-TaxLine",
            "tableMapping": {
                "Amount": {
                    "type": "column",
                    "mapping": {
                        "destination": "Amount"
                    }
                },
                "DetailType": {
                    "type": "column",
                    "mapping": {
                        "destination": "DetailType"
                    }
                },
                "TaxLineDetail.TaxRateRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "TaxRate_ID"
                    }
                },
                "TaxLineDetail.PercentBased": {
                    "type": "column",
                    "mapping": {
                        "destination": "PercentBased"
                    }
                },
                "TaxLineDetail.TaxPercent": {
                    "type": "column",
                    "mapping": {
                        "destination": "TaxPercent"
                    }
                },
                "TaxLineDetail.NetAmountTaxable": {
                    "type": "column",
                    "mapping": {
                        "destination": "NetAmountTaxable"
                    }
                }
            }
        }
    },
    "Invoice": {
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "CustomerRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Customer_ID"
            }
        },
        "CustomerRef.name": {
            "type": "column",
            "mapping": {
                "destination": "Customer_name"
            }
        },
        "DocNumber": {
            "type": "column",
            "mapping": {
                "destination": "DocNumber"
            }
        },
        "TxnDate": {
            "type": "column",
            "mapping": {
                "destination": "TxnDate"
            }
        },
        "LinkedTxn": {
            "type": "table",
            "destination": "Invoice-LinkedTxn",
            "tableMapping": {
                "TxnId": {
                    "type": "column",
                    "mapping": {
                        "destination": "TxnID",
                        "primaryKey": true
                    }
                },
                "TxnType": {
                    "type": "column",
                    "mapping": {
                        "destination": "TxnType"
                    }
                }
            }
        },
        "CurrencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Currency"
            }
        },
        "ExchangeRate": {
            "type": "column",
            "mapping": {
                "destination": "ExchangeRate"
            }
        },
        "SalesTermRef.value": {
            "type": "column",
            "mapping": {
                "destination": "SalesTerm"
            }
        },
        "DueDate": {
            "type": "column",
            "mapping": {
                "destination": "DueDate"
            }
        },
        "GlobalTaxCalculation": {
            "type": "column",
            "mapping": {
                "destination": "GlobalTaxCalculation"
            }
        },
        "TotalAmt": {
            "type": "column",
            "mapping": {
                "destination": "TotalAmount"
            }
        },
        "HomeTotalAmt": {
            "type": "column",
            "mapping": {
                "destination": "HomeTotalAmount"
            }
        },
        "PrintStatus": {
            "type": "column",
            "mapping": {
                "destination": "PrintStatus"
            }
        },
        "EmailStatus": {
            "type": "column",
            "mapping": {
                "destination": "EmailStatus"
            }
        },
        "BillEmail.Address": {
            "type": "column",
            "mapping": {
                "destination": "BillEmail_Address"
            }
        },
        "Balance": {
            "type": "column",
            "mapping": {
                "destination": "Balance"
            }
        },
        "HomeBalance": {
            "type": "column",
            "mapping": {
                "destination": "HomeBalance"
            }
        },
        "DeliveryInfo.DeliveryType": {
            "type": "column",
            "mapping": {
                "destination": "DeliveryType"
            }
        },
        "DeliveryInfo.DeliveryTime": {
            "type": "column",
            "mapping": {
                "destination": "DeliveryTime"
            }
        },
        "BillAddr": {
            "type": "table",
            "destination": "Invoice-BillAddr",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "BillAddr_ID",
                        "primaryKey": true
                    }
                },
                "Line1": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line_1"
                    }
                },
                "City": {
                    "type": "column",
                    "mapping": {
                        "destination": "City"
                    }
                },
                "CountrySubDivisionCode": {
                    "type": "column",
                    "mapping": {
                        "destination": "State"
                    }
                }
            }
        },
        "ShipAddr": {
            "type": "table",
            "destination": "Invoice-ShipAddr",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "ShipAddr_ID",
                        "primaryKey": true
                    }
                },
                "Line1": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line_1"
                    }
                },
                "City": {
                    "type": "column",
                    "mapping": {
                        "destination": "City"
                    }
                },
                "CountrySubDivisionCode": {
                    "type": "column",
                    "mapping": {
                        "destination": "State"
                    }
                },
                "Lat": {
                    "type": "column",
                    "mapping": {
                        "destination": "Latitude"
                    }
                },
                "Long": {
                    "type": "column",
                    "mapping": {
                        "destination": "Longitude"
                    }
                }
            }
        },
        "Line": {
            "type": "table",
            "destination": "Invoice-Line",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "ID",
                        "primaryKey": true
                    }
                },
                "LineNum": {
                    "type": "column",
                    "mapping": {
                        "destination": "LineNum"
                    }
                },
                "Description": {
                    "type": "column",
                    "mapping": {
                        "destination": "Description"
                    }
                },
                "Amount": {
                    "type": "column",
                    "mapping": {
                        "destination": "Amount"
                    }
                },
                "DetailType": {
                    "type": "column",
                    "mapping": {
                        "destination": "DetailType"
                    }
                },
                "SalesItemLineDetail.ServiceDate": {
                    "type": "column",
                    "mapping": {
                        "destination": "ServiceDate"
                    }
                },
                "SalesItemLineDetail.ItemRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "SalesItem_ID"
                    }
                },
                "SalesItemLineDetail.ItemRef.name": {
                    "type": "column",
                    "mapping": {
                        "destination": "SalesItem_name"
                    }
                },
                "SalesItemLineDetail.ClassRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "Class_ID"
                    }
                },
                "SalesItemLineDetail.ClassRef.name": {
                    "type": "column",
                    "mapping": {
                        "destination": "Class_name"
                    }
                },
                "SalesItemLineDetail.UnitPrice": {
                    "type": "column",
                    "mapping": {
                        "destination": "UnitPrice"
                    }
                },
                "SalesItemLineDetail.Qty": {
                    "type": "column",
                    "mapping": {
                        "destination": "Qty"
                    }
                },
                "SalesItemLineDetail.TaxCodeRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "TaxCode"
                    }
                }
            }
        },
        "TxnTaxDetail": {
            "type": "table",
            "destination": "Invoice-TxnTaxDetail",
            "tableMapping": {
                "TotalTax": {
                    "type": "column",
                    "mapping": {
                        "destination": "TotalTax"
                    }
                },
                "TaxLine": {
                    "type": "table",
                    "destination": "Invoice-TxnTaxDetail-TaxLine",
                    "tableMapping": {
                        "Amount": {
                            "type": "column",
                            "mapping": {
                                "destination": "Amount"
                            }
                        },
                        "DetailType": {
                            "type": "column",
                            "mapping": {
                                "destination": "DetailType"
                            }
                        },
                        "TaxLineDetail.TaxRateRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxRate_ID",
                                "primaryKey": true
                            }
                        },
                        "TaxLineDetail.TaxPercent": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxPercent"
                            }
                        },
                        "TaxLineDetail.NetAmountTaxable": {
                            "type": "column",
                            "mapping": {
                                "destination": "NetAmountTaxable"
                            }
                        }
                    }
                }
            }
        }
    },
    "Item": {
        "Name": {
            "type": "column",
            "mapping": {
                "destination": "Name"
            }
        },
        "Active": {
            "type": "column",
            "mapping": {
                "destination": "Active"
            }
        },
        "FullyQualifiedName": {
            "type": "column",
            "mapping": {
                "destination": "FullyQualitiedName"
            }
        },
        "Taxble": {
            "type": "column",
            "mapping": {
                "destination": "Taxable"
            }
        },
        "SalesTaxIncluded": {
            "type": "column",
            "mapping": {
                "destination": "SalestaxIncluded"
            }
        },
        "UnitPrice": {
            "type": "column",
            "mapping": {
                "destination": "UnitPrice"
            }
        },
        "Type": {
            "type": "column",
            "mapping": {
                "destination": "Type"
            }
        },
        "IncomeAccountRef.value": {
            "type": "column",
            "mapping": {
                "destination": "IncomeAccountRef_id"
            }
        },
        "IncomeAccountRef.name": {
            "type": "column",
            "mapping": {
                "destination": "IncomeAccountRef_name"
            }
        },
        "PurchaseTaxIncluded": {
            "type": "column",
            "mapping": {
                "destination": "PurchaseTaxIncluded"
            }
        },
        "PurchaseCost": {
            "type": "column",
            "mapping": {
                "destination": "PurchaseCost"
            }
        },
        "TrackQtyOnHand": {
            "type": "column",
            "mapping": {
                "destination": "TrackQtyOnHand"
            }
        },
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        }
    },
    "JournalEntry": {
        "Adjustment": {
            "type": "column",
            "mapping": {
                "destination": "Adjustment"
            }
        },
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "DocNumber": {
            "type": "column",
            "mapping": {
                "destination": "DocNumber"
            }
        },
        "TxnDate": {
            "type": "column",
            "mapping": {
                "destination": "TxnDate"
            }
        },
        "CurrencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Currency"
            }
        },
        "ExchangeRate": {
            "type": "column",
            "mapping": {
                "destination": "ExchangeRate"
            }
        },
        "TotalAmt": {
            "type": "column",
            "mapping": {
                "destination": "TotalAmt"
            }
        },
        "HomeTotalAmt": {
            "type": "column",
            "mapping": {
                "destination": "HomeTotalAmt"
            }
        },
        "Line": {
            "type": "table",
            "destination": "JournalEntry-Line",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "ID",
                        "primaryKey": true
                    }
                },
                "Description": {
                    "type": "column",
                    "mapping": {
                        "destination": "Description"
                    }
                },
                "Amount": {
                    "type": "column",
                    "mapping": {
                        "destination": "Amount"
                    }
                },
                "DetailType": {
                    "type": "column",
                    "mapping": {
                        "destination": "DetailType"
                    }
                },
                "JournalEntryLineDetail": {
                    "type": "table",
                    "destination": "JournalEntry-Line-Detail",
                    "tableMapping": {
                        "PostingType": {
                            "type": "column",
                            "mapping": {
                                "destination": "PostingType"
                            }
                        },
                        "AccountRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "Account_ID"
                            }
                        },
                        "AccountRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "Account_name"
                            }
                        },
                        "Entity.Type": {
                            "type": "column",
                            "mapping": {
                                "destination": "Entity_type"
                            }
                        },
                        "Entity.EntityRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "Entity_ID",
                                "primaryKey": true
                            }
                        },
                        "Entity.EntityRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "Entity_name"
                            }
                        },
                        "ClassRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "Class_ID",
                                "primaryKey": true
                            }
                        },
                        "ClassRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "Class_name"
                            }
                        },
                        "DepartmentRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "Deparement_ID",
                                "primaryKey": true
                            }
                        },
                        "DepartmentRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "Department_name"
                            }
                        },
                        "TaxCodeRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxCode_id"
                            }
                        },
                        "TaxCodeRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxCode_name"
                            }
                        },
                        "TaxApplicableOn": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxApplicableOn"
                            }
                        },
                        "TaxAmount": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxAmount"
                            }
                        },
                        "BillableStatus": {
                            "type": "column",
                            "mapping": {
                                "destination": "BillableStatus"
                            }
                        }
                    }
                }
            }
        },
        "TxnTaxDetail": {
            "type": "table",
            "destination": "JournalEntry-TxnTaxDetail",
            "tableMapping": {
                "TxnTaxCodeRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "TaxCode_ID",
                        "primaryKey": true
                    }
                },
                "TxnTaxCodeRef.name": {
                    "type": "column",
                    "mapping": {
                        "destination": "TaxCode_name"
                    }
                },
                "TotalTax": {
                    "type": "column",
                    "mapping": {
                        "destination": "TotalTax"
                    }
                },
                "TaxLine": {
                    "type": "table",
                    "destination": "JournalEntry-TxnTaxDetai-TaxLine",
                    "tableMapping": {
                        "Amount": {
                            "type": "column",
                            "mapping": {
                                "destination": "Amount"
                            }
                        },
                        "DetailType": {
                            "type": "column",
                            "mapping": {
                                "destination": "DetailType"
                            }
                        },
                        "TaxLineDetail.NetAmountTaxable": {
                            "type": "column",
                            "mapping": {
                                "destination": "NetAmountTaxable"
                            }
                        },
                        "TaxlineDetail.TaxInclusiveAmount": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxInclusiveAmount"
                            }
                        },
                        "TaxlineDetail.TaxPercent": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxPercent"
                            }
                        },
                        "TaxLineDetail.TaxRateRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxRate_ID",
                                "primaryKey": true
                            }
                        },
                        "TaxLineDetail.TaxRateRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxRate_name"
                            }
                        }
                    }
                }
            }
        }
    },
    "Payment": {
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "CustomerRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Customer_ID"
            }
        },
        "CustomerRef.name": {
            "type": "column",
            "mapping": {
                "destination": "Customer_name"
            }
        },
        "DepositToAccountRef.value": {
            "type": "column",
            "mapping": {
                "destination": "DepositToAccount"
            }
        },
        "TotalAmt": {
            "type": "column",
            "mapping": {
                "destination": "TotalAmt"
            }
        },
        "UnappliedAmt": {
            "type": "column",
            "mapping": {
                "destination": "UnappliedAmt"
            }
        },
        "ProcessPayment": {
            "type": "column",
            "mapping": {
                "destination": "ProcessPayment"
            }
        },
        "domain": {
            "type": "column",
            "mapping": {
                "destination": "domain"
            }
        },
        "sparse": {
            "type": "column",
            "mapping": {
                "destination": "sparse"
            }
        },
        "SyncToken": {
            "type": "column",
            "mapping": {
                "destination": "SyncToken"
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        },
        "TxnDate": {
            "type": "column",
            "mapping": {
                "destination": "TxnDate"
            }
        },
        "CurrencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Currency"
            }
        },
        "Line": {
            "type": "table",
            "destination": "Payment-Line",
            "tableMapping": {
                "Amount": {
                    "type": "column",
                    "mapping": {
                        "destination": "Amount"
                    }
                },
                "LinkedTxn": {
                    "type": "table",
                    "destination": "Payment-Line-LinkedTxn",
                    "tableMapping": {
                        "TxnId": {
                            "type": "column",
                            "mapping": {
                                "destination": "TxnId",
                                "primaryKey": true
                            }
                        },
                        "TxnType": {
                            "type": "column",
                            "mapping": {
                                "destination": "TxnType"
                            }
                        }
                    }
                },
                "LineEx.any": {
                    "type": "table",
                    "destination": "Payment-Line-LineExAny",
                    "tableMapping": {
                        "name": {
                            "type": "column",
                            "mapping": {
                                "destination": "name"
                            }
                        },
                        "declaredType": {
                            "type": "column",
                            "mapping": {
                                "destination": "declaredType"
                            }
                        },
                        "scope": {
                            "type": "column",
                            "mapping": {
                                "destination": "scope"
                            }
                        },
                        "value.Name": {
                            "type": "column",
                            "mapping": {
                                "destination": "value_name"
                            }
                        },
                        "value.Value": {
                            "type": "column",
                            "mapping": {
                                "destination": "value_value"
                            }
                        },
                        "nil": {
                            "type": "column",
                            "mapping": {
                                "destination": "nil"
                            }
                        },
                        "globalScope": {
                            "type": "column",
                            "mapping": {
                                "destination": "globalScope"
                            }
                        },
                        "typeSubstituted": {
                            "type": "column",
                            "mapping": {
                                "destination": "typeSubstituted"
                            }
                        }
                    }
                }
            }
        }
    },
    "Purchase": {
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "AccountRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Account_ID"
            }
        },
        "AccountRef.name": {
            "type": "column",
            "mapping": {
                "destination": "Account_name"
            }
        },
        "PaymentType": {
            "type": "column",
            "mapping": {
                "destination": "PaymentType"
            }
        },
        "Credit": {
            "type": "column",
            "mapping": {
                "destination": "Credit"
            }
        },
        "TotalAmt": {
            "type": "column",
            "mapping": {
                "destination": "TotalAmt"
            }
        },
        "GlobalTaxCalculation": {
            "type": "column",
            "mapping": {
                "destination": "GlobalTaxCalculation"
            }
        },
        "PurchaseEx.any": {
            "type": "table",
            "destination": "Purchase-PurchaseExAny",
            "tableMapping": {
                "name": {
                    "type": "column",
                    "mapping": {
                        "destination": "name"
                    }
                },
                "declaredType": {
                    "type": "column",
                    "mapping": {
                        "destination": "declaredType"
                    }
                },
                "scope": {
                    "type": "column",
                    "mapping": {
                        "destination": "scope"
                    }
                },
                "value.Name": {
                    "type": "column",
                    "mapping": {
                        "destination": "value_name"
                    }
                },
                "value.Value": {
                    "type": "column",
                    "mapping": {
                        "destination": "value_value"
                    }
                },
                "nil": {
                    "type": "column",
                    "mapping": {
                        "destination": "nil"
                    }
                },
                "globalScope": {
                    "type": "column",
                    "mapping": {
                        "destination": "globalScope"
                    }
                },
                "typeSubstituted": {
                    "type": "column",
                    "mapping": {
                        "destination": "typeSubstituted"
                    }
                }
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        },
        "TxnDate": {
            "type": "column",
            "mapping": {
                "destination": "TxnDate"
            }
        },
        "CurrencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Currency"
            }
        },
        "ExchangeRate": {
            "type": "column",
            "mapping": {
                "destination": "ExchangeRate"
            }
        },
        "PrivateNote": {
            "type": "column",
            "mapping": {
                "destination": "PrivateNote"
            }
        },
        "Line": {
            "type": "table",
            "destination": "Purchase-Line",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "ID"
                    }
                },
                "Description": {
                    "type": "column",
                    "mapping": {
                        "destination": "Description"
                    }
                },
                "Amount": {
                    "type": "column",
                    "mapping": {
                        "destination": "Amount"
                    }
                },
                "DetailType": {
                    "type": "column",
                    "mapping": {
                        "destination": "DetailType"
                    }
                },
                "AccountBasedExpenseLineDetail": {
                    "type": "table",
                    "destination": "Purchase-Line-AccountBasedExpenseLineDetail",
                    "tableMapping": {
                        "AccountRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "Account_ID"
                            }
                        },
                        "AccountRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "Account_name"
                            }
                        },
                        "BillableStatus": {
                            "type": "column",
                            "mapping": {
                                "destination": "BillableStatus"
                            }
                        },
                        "TaxCodeRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxCodeRef"
                            }
                        },
                        "TaxInclusiveAmt": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxInclusiveAmt"
                            }
                        }
                    }
                }
            }
        },
        "TxnTaxDetail": {
            "type": "table",
            "destination": "Purchase-TxnTaxDetail",
            "tableMapping": {
                "TotalTax": {
                    "type": "column",
                    "mapping": {
                        "destination": "TotalTax"
                    }
                },
                "TaxLine": {
                    "type": "table",
                    "destination": "Purchase-TxnTaxDetail-TaxLine",
                    "tableMapping": {
                        "Amount": {
                            "type": "column",
                            "mapping": {
                                "destination": "Amount"
                            }
                        },
                        "DetailType": {
                            "type": "column",
                            "mapping": {
                                "destination": "DetailType"
                            }
                        },
                        "TaxLineDetail.TaxRateRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxRateRef"
                            }
                        },
                        "TaxLineDetail.PercentBased": {
                            "type": "column",
                            "mapping": {
                                "destination": "PercentBased"
                            }
                        },
                        "TaxLineDetail.TaxPercent": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxPercent"
                            }
                        },
                        "TaxLineDetail.NetAmountTaxable": {
                            "type": "column",
                            "mapping": {
                                "destination": "NetAmountTaxable"
                            }
                        }
                    }
                }
            }
        }
    },
    "PurchaseOrder": {
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "POStatus": {
            "type": "column",
            "mapping": {
                "destination": "POStatus"
            }
        },
        "DocNumber": {
            "type": "column",
            "mapping": {
                "destination": "DocNumber"
            }
        },
        "TxnDate": {
            "type": "column",
            "mapping": {
                "destination": "TxnDate"
            }
        },
        "CurrencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Currency"
            }
        },
        "VendorRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Vendor_ID"
            }
        },
        "VendorRef.name": {
            "type": "column",
            "mapping": {
                "destination": "Vendor_name"
            }
        },
        "APAccountRef.value": {
            "type": "column",
            "mapping": {
                "destination": "APAccount_ID"
            }
        },
        "APAccountRef.name": {
            "type": "column",
            "mapping": {
                "destination": "APAccount_name"
            }
        },
        "TotalAmt": {
            "type": "column",
            "mapping": {
                "destination": "TotalAmount"
            }
        },
        "VendorAddr": {
            "type": "table",
            "destination": "PurchaseOrder-VendorAddr",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "ID",
                        "primaryKey": true
                    }
                },
                "Line1": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line1"
                    }
                },
                "Line2": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line2"
                    }
                },
                "Line3": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line3"
                    }
                },
                "Line4": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line4"
                    }
                }
            }
        },
        "ShipAddr": {
            "type": "table",
            "destination": "PurchaseOrder-ShipAddr",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "ID",
                        "primaryKey": true
                    }
                },
                "Line1": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line1"
                    }
                },
                "Line2": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line2"
                    }
                },
                "Line3": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line3"
                    }
                },
                "Line4": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line4"
                    }
                }
            }
        },
        "CustomField": {
            "type": "table",
            "destination": "PurchaseOrder-CustomField",
            "tableMapping": {
                "DefinitionId": {
                    "type": "column",
                    "mapping": {
                        "destination": "Definition_ID",
                        "primaryKey": true
                    }
                },
                "Name": {
                    "type": "column",
                    "mapping": {
                        "destination": "Name"
                    }
                },
                "Type": {
                    "type": "column",
                    "mapping": {
                        "destination": "Type"
                    }
                },
                "StringValue": {
                    "type": "column",
                    "mapping": {
                        "destination": "StringValue"
                    }
                }
            }
        },
        "Line": {
            "type": "table",
            "destination": "PurchaseOrder-Line",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "ID",
                        "primaryKey": true
                    }
                },
                "Description": {
                    "type": "column",
                    "mapping": {
                        "destination": "Description"
                    }
                },
                "Amount": {
                    "type": "column",
                    "mapping": {
                        "destination": "Amount"
                    }
                },
                "DetailType": {
                    "type": "column",
                    "mapping": {
                        "destination": "DetailType"
                    }
                },
                "AccountBasedExpenseLineDetail": {
                    "type": "table",
                    "destination": "PurchaseOrder-AccountBasedExpenseLineDetail",
                    "tableMapping": {
                        "AccountRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "Account_ID",
                                "primaryKey": true
                            }
                        },
                        "AccountRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "Account_name"
                            }
                        },
                        "CustomerRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "Customer_ID"
                            }
                        },
                        "CustomerRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "Customer_name"
                            }
                        },
                        "BillableStatus": {
                            "type": "column",
                            "mapping": {
                                "destination": "Billable_Status"
                            }
                        },
                        "TaxAmount": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxAmount"
                            }
                        },
                        "TaxCodeRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxCode_ID"
                            }
                        },
                        "TaxInclusiveAmt": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxInclusiveAmount"
                            }
                        }
                    }
                },
                "ItemBasedExpenseLineDetail": {
                    "type": "table",
                    "destination": "PurchaseOrder-ItemBasedExpenseLineDetail",
                    "tableMapping": {
                        "ItemRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "Item_ID",
                                "primaryKey": true
                            }
                        },
                        "ItemRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "Item_name"
                            }
                        },
                        "ClassRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "ClassRef_ID"
                            }
                        },
                        "ClassRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "ClassRef_name"
                            }
                        },
                        "UnitPrice": {
                            "type": "column",
                            "mapping": {
                                "destination": "UnitPrice"
                            }
                        },
                        "Qty": {
                            "type": "column",
                            "mapping": {
                                "destination": "Qty"
                            }
                        },
                        "TaxCodeRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxCode_ID"
                            }
                        },
                        "CustomerRef.value": {
                            "type": "column",
                            "mapping": {
                                "destination": "Customer_ID"
                            }
                        },
                        "CustomerRef.name": {
                            "type": "column",
                            "mapping": {
                                "destination": "Customer_name"
                            }
                        },
                        "BillableStatus": {
                            "type": "column",
                            "mapping": {
                                "destination": "Billable_Status"
                            }
                        },
                        "TaxInclusiveAmt": {
                            "type": "column",
                            "mapping": {
                                "destination": "TaxInclusiveAmount"
                            }
                        }
                    }
                }
            }
        },
        "LinkedTxn": {
            "type": "table",
            "destination": "PurchaseOrder-LinkedTxn",
            "tableMapping": {
                "TxnId": {
                    "type": "column",
                    "mapping": {
                        "destination": "TxnId"
                    }
                },
                "TxnType": {
                    "type": "column",
                    "mapping": {
                        "destination": "TxnType"
                    }
                },
                "TxnLineId": {
                    "type": "column",
                    "mapping": {
                        "destination": "TxnLineId"
                    },
                    "forceType": true
                }
            }
        },
        "DueDate": {
            "type": "column",
            "mapping": {
                "destination": "DueDate"
            }
        },
        "ClassRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Class_ID"
            }
        },
        "ClassRef.name": {
            "type": "column",
            "mapping": {
                "destination": "Class_name"
            }
        }
    },
    "TaxCode": {
        "Name": {
            "type": "column",
            "mapping": {
                "destination": "Name"
            }
        },
        "Description": {
            "type": "column",
            "mapping": {
                "destination": "Description"
            }
        },
        "Active": {
            "type": "column",
            "mapping": {
                "destination": "Active"
            }
        },
        "Taxable": {
            "type": "column",
            "mapping": {
                "destination": "Taxable"
            }
        },
        "TaxGroup": {
            "type": "column",
            "mapping": {
                "destination": "TaxGroup"
            }
        },
        "sparse": {
            "type": "column",
            "mapping": {
                "destination": "sparse"
            }
        },
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        },
        "PurchaseTaxRateList.TaxRateDetail": {
            "type": "table",
            "destination": "TaxCode-PurchaseTaxRateList",
            "tableMapping": {
                "TaxRateRef.value": {
                    "type": "column",
                    "mapping": {
                        "destination": "TaxRate_ID",
                        "primaryKey": true
                    }
                },
                "TaxRateRef.name": {
                    "type": "column",
                    "mapping": {
                        "destination": "TaxRate_name"
                    }
                },
                "TaxTypeApplicable": {
                    "type": "column",
                    "mapping": {
                        "destination": "TaxTypeApplicable"
                    }
                },
                "TaxOrder": {
                    "type": "column",
                    "mapping": {
                        "destination": "TaxOrder"
                    }
                }
            }
        }
    },
    "TaxRate": {
        "Name": {
            "type": "column",
            "mapping": {
                "destination": "Name"
            }
        },
        "Description": {
            "type": "column",
            "mapping": {
                "destination": "Description"
            }
        },
        "Active": {
            "type": "column",
            "mapping": {
                "destination": "Active"
            }
        },
        "RateValue": {
            "type": "column",
            "mapping": {
                "destination": "RateValue"
            }
        },
        "AgencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "AgencyRef_ID"
            }
        },
        "SpecialTaxType": {
            "type": "column",
            "mapping": {
                "destination": "SpecialTaxType"
            }
        },
        "DisplayType": {
            "type": "column",
            "mapping": {
                "destination": "DisplayType"
            }
        },
        "domain": {
            "type": "column",
            "mapping": {
                "destination": "domain"
            }
        },
        "sparse": {
            "type": "column",
            "mapping": {
                "destination": "sparse"
            }
        },
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "SyncToken": {
            "type": "column",
            "mapping": {
                "destination": "SyncToken"
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        }
    },
    "Term": {
        "Name": {
            "type": "column",
            "mapping": {
                "destination": "Name"
            }
        },
        "Active": {
            "type": "column",
            "mapping": {
                "destination": "Active"
            }
        },
        "Type": {
            "type": "column",
            "mapping": {
                "destination": "Type"
            }
        },
        "DueDays": {
            "type": "column",
            "mapping": {
                "destination": "DueDays"
            }
        },
        "DiscountDays": {
            "type": "column",
            "mapping": {
                "destination": "DiscountDays"
            }
        },
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        }
    },
    "Transfer": {
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "FromAccountRef.value": {
            "type": "column",
            "mapping": {
                "destination": "FromAccount_ID"
            }
        },
        "FromAccountRef.name": {
            "type": "column",
            "mapping": {
                "destination": "FromAccount_name"
            }
        },
        "ToAccountRef.value": {
            "type": "column",
            "mapping": {
                "destination": "ToAccount_ID"
            }
        },
        "ToAccountRef.name": {
            "type": "column",
            "mapping": {
                "destination": "ToAccount_name"
            }
        },
        "Amount": {
            "type": "column",
            "mapping": {
                "destination": "Amount"
            }
        },
        "MetaData.CreateTime": {
            "type": "column",
            "mapping": {
                "destination": "CreateTime"
            }
        },
        "MetaData.LastUpdatedTime": {
            "type": "column",
            "mapping": {
                "destination": "LastUpdatedTime"
            }
        },
        "TxnDate": {
            "type": "column",
            "mapping": {
                "destination": "TxnDate"
            }
        },
        "CurrencyRef.value": {
            "type": "column",
            "mapping": {
                "destination": "Currency"
            }
        },
        "ExchangeRate": {
            "type": "column",
            "mapping": {
                "destination": "ExchangeRate"
            }
        },
        "PrivateNote": {
            "type": "column",
            "mapping": {
                "destination": "PrivateNote"
            }
        }
    },
    "Vendor": {
        "Id": {
            "type": "column",
            "mapping": {
                "destination": "ID",
                "primaryKey": true
            }
        },
        "AcctNum": {
            "type": "column",
            "mapping": {
                "destination": "AcctNum"
            }
        },
        "GivenName": {
            "type": "column",
            "mapping": {
                "destination": "GivenName"
            }
        },
        "FamilyName": {
            "type": "column",
            "mapping": {
                "destination": "FamilyName"
            }
        },
        "CompanyName": {
            "type": "column",
            "mapping": {
                "destination": "CompanyName"
            }
        },
        "DisplayName": {
            "type": "column",
            "mapping": {
                "destination": "DisplayName"
            }
        },
        "PrintOnCheckName": {
            "type": "column",
            "mapping": {
                "destination": "PrintOnCheckName"
            }
        },
        "Active": {
            "type": "column",
            "mapping": {
                "destination": "Active"
            }
        },
        "Vendor1099": {
            "type": "column",
            "mapping": {
                "destination": "Vendor1099"
            }
        },
        "PrimaryPhone.FreeForNumber": {
            "type": "column",
            "mapping": {
                "destination": "PrimaryPhone"
            }
        },
        "AlternatePhone.FreeForNumber": {
            "type": "column",
            "mapping": {
                "destination": "AlternatePhone"
            }
        },
        "Mobile.FreeForNumber": {
            "type": "column",
            "mapping": {
                "destination": "Mobile"
            }
        },
        "PrimaryEmailAddr.Address": {
            "type": "column",
            "mapping": {
                "destination": "PrimaryEmailAddress"
            }
        },
        "WebAddr.URI": {
            "type": "column",
            "mapping": {
                "destination": "WebAddress"
            }
        },
        "BillAddr": {
            "type": "table",
            "destination": "Vendor-BillAddr",
            "tableMapping": {
                "Id": {
                    "type": "column",
                    "mapping": {
                        "destination": "ID",
                        "primaryKey": true
                    }
                },
                "Line1": {
                    "type": "column",
                    "mapping": {
                        "destination": "Line1"
                    }
                },
                "City": {
                    "type": "column",
                    "mapping": {
                        "destination": "City"
                    }
                },
                "CountrySubDivisionCode": {
                    "type": "column",
                    "mapping": {
                        "destination": "Province"
                    }
                },
                "PostalCode": {
                    "type": "column",
                    "mapping": {
                        "destination": "PostalCode"
                    }
                }
            }
        }
    },
    "Preferences": {
        "EmailMessagesPrefs.InvoiceMessage.Message": {
            "type": "column",
            "mapping": {
                "destination": "InvoiceMessage_Message"
                }
            },
            "EmailMessagesPrefs.InvoiceMessage.Subject": {
                "type":"column",
                "mapping": {
                    "destination": "InvoiceMessage_Subject"
                }
            },
            "EmailMessagesPrefs.EstimateMessage.Message": {
                "type": "column",
                "mapping": {
                    "destination": "EstimateMessage_Message"
                    }
            },
            "EmailMessagesPrefs.EstimateMessage.Subject": {
                "type":"column",
                "mapping": {
                    "destination": "EstimateMessage_Subject"
                }
            },
            "EmailMessagesPrefs.SalesReceiptMessage.Message": {
                "type": "column",
                "mapping": {
                    "destination": "SalesReceiptMessage_Message"
                    }
            },
            "EmailMessagesPrefs.SalesReceiptMessage.Subject": {
                "type":"column",
                "mapping": {
                    "destination": "SalesReceiptMessage_Subject"
                }
            },
            "EmailMessagesPrefs.StatementMessage.Message": {
                "type": "column",
                "mapping": {
                    "destination": "StatementMessage_Message"
                    }
            },
            "EmailMessagesPrefs.StatementMessage.Subject": {
                "type":"column",
                "mapping": {
                    "destination": "StatementMessage_Subject"
                }
            },
            "ProductAndServicesPrefs.QuantityWithPriceAndRate": {
                "type":"column",
                "mapping": {
                    "destination": "QuantityWithPriceAndRate"
                }
            },
            "ProductAndServicesPrefs.ForPurchase": {
                "type":"column",
                "mapping": {
                    "destination": "ForPurchase"
                }
            },
            "ProductAndServicesPrefs.QuantityOnHand": {
                "type":"column",
                "mapping": {
                    "destination": "QuantityOnHand"
                }
            },
            "ProductAndServicesPrefs.ForSales": {
                "type":"column",
                "mapping": {
                    "destination": "ForSales"
                }
            },
            "domain": {
                "type":"column",
                "mapping": {
                    "destination": "domain"
                }
            },
                    "SyncToken": {
                "type":"column",
                "mapping": {
                    "destination": "SyncToken"
                }
            },
            "ReportPrefs.ReportBasis": {
                "type":"column",
                "mapping": {
                    "destination": "ReportBasis"
                }
            },
            "ReportPrefs.CalcAgingReportFromTxnDate": {
                "type":"column",
                "mapping": {
                    "destination": "CalcAgingReportFromTxnDate"
                }
            },
            "AccountingInfoPrefs.FirstMonthOfFiscalYear": {
                "type":"column",
                "mapping": {
                    "destination": "FirstMonthOfFiscalYear"
                }
            },
            "AccountingInfoPrefs.UseAccountNumbers": {
                "type":"column",
                "mapping": {
                    "destination": "UseAccountNumbers"
                }
            },
            "AccountingInfoPrefs.TaxYearMonth": {
                "type":"column",
                "mapping": {
                    "destination": "TaxYearMonth"
                }
            },
            "AccountingInfoPrefs.ClassTrackingPerTxn": {
                "type":"column",
                "mapping": {
                    "destination": "ClassTrackingPerTxn"
                }
            },
            "AccountingInfoPrefs.TrackDepartments": {
                "type":"column",
                "mapping": {
                    "destination": "TrackDepartments"
                }
            },
            "AccountingInfoPrefs.TaxForm": {
                "type":"column",
                "mapping": {
                    "destination": "TaxForm"
                }
            },
            "AccountingInfoPrefs.CustomerTerminology": {
                "type":"column",
                "mapping": {
                    "destination": "CustomerTerminology"
                }
            },
            "AccountingInfoPrefs.BookCloseDate": {
                "type":"column",
                "mapping": {
                    "destination": "BookCloseDate"
                }
            },
            "AccountingInfoPrefs.DepartmentTerminology": {
                "type":"column",
                "mapping": {
                    "destination": "DepartmentTerminology"
                }
            },
            "AccountingInfoPrefs.ClassTrackingPerTxnLine": {
                "type":"column",
                "mapping": {
                    "destination": "ClassTrackingPerTxnLine"
                }
            },
            "SalesFormsPrefs.ETransactionPaymentEnabled": {
                "type":"column",
                "mapping": {
                    "destination": "ETransactionPaymentEnabled"
                }
            },
            "SalesFormsPrefs.CustomTxnNumbers": {
                "type":"column",
                "mapping": {
                    "destination": "CustomTxnNumbers"
                }
            },
            "SalesFormsPrefs.AllowShipping": {
                "type":"column",
                "mapping": {
                    "destination": "AllowShipping"
                }
            },
            "SalesFormsPrefs.AllowServiceDate": {
                "type":"column",
                "mapping": {
                    "destination": "AllowServiceDate"
                }
            },
            "SalesFormsPrefs.ETransactionEnabledStatus": {
                "type":"column",
                "mapping": {
                    "destination": "ETransactionEnabledStatus"
                }
            },
            "SalesFormsPrefs.DefaultCustomerMessage": {
                "type":"column",
                "mapping": {
                    "destination": "DefaultCustomerMessage"
                }
            },
            "SalesFormsPrefs.EmailCopyToCompany": {
                "type":"column",
                "mapping": {
                    "destination": "EmailCopyToCompany"
                }
            },
            "SalesFormsPrefs.AllowEstimates": {
                "type":"column",
                "mapping": {
                    "destination": "AllowEstimates"
                }
            },
            "SalesFormsPrefs.DefaultTerms.value": {
                "type":"column",
                "mapping": {
                    "destination": "DefaultTerms"
                }
            },
            "SalesFormsPrefs.AllowDiscount": {
                "type":"column",
                "mapping": {
                    "destination": "AllowDiscount"
                }
            },
            "SalesFormsPrefs.DefaultDiscountAccount": {
                "type":"column",
                "mapping": {
                    "destination": "DefaultDiscountAccount"
                }
            },
            "SalesFormsPrefs.AllowDeposit": {
                "type":"column",
                "mapping": {
                    "destination": "AllowDeposit"
                }
            },
            "SalesFormsPrefs.AutoApplyPayments": {
                "type":"column",
                "mapping": {
                    "destination": "AutoApplyPayments"
                }
            },
            "SalesFormsPrefs.IPNSupportEnabled": {
                "type":"column",
                "mapping": {
                    "destination": "IPNSupportEnabled"
                }
            },
            "SalesFormsPrefs.AutoApplyCredit": {
                "type":"column",
                "mapping": {
                    "destination": "AutoApplyCredit"
                }
            },
            "SalesFormsPrefs.CustomField": {
                "type":"column",
                "mapping": {
                    "destination": "CustomField"
                }
            },
            "SalesFormsPrefs.UsingPriceLevels": {
                "type":"column",
                "mapping": {
                    "destination": "UsingPriceLevels"
                }
            },
            "SalesFormsPrefs.ETransactionAttachPDF": {
                "type":"column",
                "mapping": {
                    "destination": "ETransactionAttachPDF"
                }
            },
            "VendorAndPurchasesPrefs.BillableExpenseTracking": {
                "type":"column",
                "mapping": {
                    "destination": "BillableExpenseTracking"
                }
            },
            "VendorAndPurchasesPrefs.TrackingByCustomer": {
                "type":"column",
                "mapping": {
                    "destination": "TrackingByCustomer"
                }
            },
            "VendorAndPurchasesPrefs.POCustomField": {
                "type":"column",
                "mapping": {
                    "destination": "POCustomField"
                }
            },
            "TaxPrefs.TaxGroupCodeRef.value": {
                "type":"column",
                "mapping": {
                    "destination": "TaxGroupCodeRef"
                }
            },
            "TaxPrefs.UsingSalesTax": {
                "type":"column",
                "mapping": {
                    "destination": "UsingSalesTax"
                }
            },
            "OtherPrefs.NameValue": {
                "type":"column",
                "mapping": {
                    "destination": "OtherPrefs"
                }
            },
            "sparse": {
                "type":"column",
                "mapping": {
                    "destination": "sparse"
                }
            },
            "TimeTrackingPrefs.WorkWeekStartDate": {
                "type":"column",
                "mapping": {
                    "destination": "WorkWeekStartDate"
                }
            },
            "TimeTrackingPrefs.MarkTimeEntriesBillable": {
                "type":"column",
                "mapping": {
                    "destination": "MarkTimeEntriesBillable"
                }
            },
            "TimeTrackingPrefs.ShowBillRateToAll": {
                "type":"column",
                "mapping": {
                    "destination": "ShowBillRateToAll"
                }
            },
            "TimeTrackingPrefs.UseServices": {
                "type":"column",
                "mapping": {
                    "destination": "UseServices"
                }
            },
            "TimeTrackingPrefs.BillCustomers": {
                "type":"column",
                "mapping": {
                    "destination": "BillCustomers"
                }
            },
            "CurrencyPrefs.HomeCurrency.value": {
                "type":"column",
                "mapping": {
                    "destination": "HomeCurrency"
                }
            },
            "CurrencyPrefs.MultiCurrencyEnabled": {
                "type":"column",
                "mapping": {
                    "destination": "MultiCurrencyEnabled"
                }
            },
            "Id": {
                "type":"column",
                "mapping": {
                    "destination": "Id"
                }
            },
            "MetaData.CreateTime": {
                "type":"column",
                "mapping": {
                    "destination": "CreateTime"
                }
            },
            "MetaData.LastUpdatedTime": {
                "type":"column",
                "mapping": {
                    "destination": "LastUpdatedTime"
                }
            },
            "time": {
                "type":"column",
                "mapping": {
                    "destination": "time"
                }
            }
    }
}

================================================
File: /src/report_mapping.py
================================================
import os
import logging
import csv
import json
import pandas as pd
import copy

"__author__ = 'Leo Chan'"
"__credits__ = 'Keboola 2017'"
"__project__ = 'kbc_quickbooks'"

"""
Python 3 environment
"""

# destination to fetch and output files
cwd_parent = os.path.dirname(os.getcwd())
DEFAULT_FILE_INPUT = os.path.join(cwd_parent, "data/in/tables/")
DEFAULT_FILE_DESTINATION = os.path.join(cwd_parent, "data/out/tables/")


class ReportMapping:
    """
    Parser dedicated for Report endpoint
    """

    def __init__(self, endpoint, data, query='', accounting_type=''):
        # Parameters
        self.endpoint = endpoint
        self.data = data
        self.header = self.construct_header(data)
        self.columns = [
            # "Time",
            "ReportName",
            # "DateMacro",
            "StartPeriod",
            "EndPeriod"
        ]
        self.primary_key = ["ReportName", "StartPeriod", "EndPeriod"]
        self.query = query
        self.accounting_type = accounting_type
        # Output
        self.data_out = []

        # Run
        report_cant_parse = [
            "CashFlow",
            "ProfitAndLossDetail",
            "TransactionList",
            "GeneralLedger",
            "TrialBalance"
        ]

        if endpoint not in report_cant_parse:

            self.itr = 1
            self.data_out = self.parse(
                data["Rows"]["Row"], self.header, self.itr)
            self.columns = self.arrange_header(self.columns)
            self.output(self.endpoint, self.data_out, self.primary_key)

        elif endpoint == "CustomQuery":

            self.columns = ["query", "value"]
            self.data_out.append(self.columns)
            self.data_out.append("{0}".format(json.dumps(data)))
            self.pk = []
            self.output_1cell(self.endpoint, self.columns,
                              self.data_out, self.pk)

        else:  # Outputting tables which cannot parse

            for item in self.columns:
                self.data_out.append(self.header[item])

            self.data_out.append("{0}".format(json.dumps(data)))
            self.columns.append("value")
            self.output_1cell(self.endpoint, self.columns,
                              self.data_out, self.primary_key)

    @staticmethod
    def construct_header(data):
        """
        Constructing the base columns(Headers) for output
        *** Endpoint Report specific ***
        """

        if "Header" not in data:

            raise Exception("Header is missing. Unable to parse request.")

        else:

            temp = data["Header"]
            json_out = {
                "Time": temp["Time"],
                "ReportName": temp["ReportName"],
                # "DateMacro": temp["DateMacro"],
                "StartPeriod": temp["StartPeriod"],
                "EndPeriod": temp["EndPeriod"]
            }

        return json_out

    @staticmethod
    def arrange_header(columns):
        """
        Arrange the column headers in order
        """

        if columns.index("value") != (len(columns) - 1):
            # If "value" is not at the end of the row index
            columns.remove('value')

        if 'value' not in columns:
            # append the value back into the column if it does not exist
            columns.append("value")

        return columns

    def parse(self, data_in, row, itr):  # , data_out):
        """
        Main parser for rows
        Params:
        data_in     - input data for parser
        row         - output json formatted row for one sub section within the table
        itr         - record of the number of recursion
        """

        data_out = []
        for i in data_in:
            temp_row = copy.deepcopy(row)
            row_name = "Col_{0}".format(itr)

            if ("type" not in i) and ("group" in i):

                if row_name not in self.columns:
                    self.columns.append(row_name)
                    self.primary_key.append(row_name)

                temp_out = []
                row[row_name] = i["group"]
                row["Col_{0}".format(itr + 1)] = i["ColData"][0]["value"]
                row["value"] = i["ColData"][1]["value"]
                temp_out = [row]
                data_out = data_out + temp_out

            elif i["type"] == "Section":

                if row_name not in self.columns:
                    self.columns.append(row_name)
                    self.primary_key.append(row_name)

                # Use Group if Header is not found as column values
                if "Header" in i:

                    row[row_name] = i["Header"]["ColData"][0]["value"]
                    # Recursion when type data is not found
                    temp_out = self.parse(i["Rows"]["Row"], row, itr + 1)

                elif "group" in i:

                    # Column name
                    row[row_name] = i["group"]

                    # Row value , assuming no more recursion
                    row["Col_{0}".format(
                        itr + 1)] = i["Summary"]["ColData"][0]["value"]
                    row["value"] = i["Summary"]["ColData"][1]["value"]
                    temp_out = [row]

                    if "Col_{0}".format(itr + 1) not in self.columns:
                        self.columns.append("Col_{0}".format(itr + 1))
                        self.primary_key.append("Col_{0}".format(itr + 1))

                data_out = data_out + temp_out  # Append data back to section

            elif (i["type"] == "Data") or ("ColData" in i):

                if row_name not in self.columns:
                    self.columns.append(row_name)
                    self.primary_key.append(row_name)
                temp_row[row_name] = i["ColData"][0]["value"]

                row_value = "value"
                if row_value not in self.columns:
                    self.columns.append(row_value)
                temp_row[row_value] = i["ColData"][1]["value"]

                data_out.append(temp_row)

            else:
                raise Exception(
                    "No type found within the row. Please validate the data.")

        return data_out

    @staticmethod
    def produce_manifest(file_name, primary_key):
        """
        Dummy function to return header per file type.
        """

        file = DEFAULT_FILE_DESTINATION + str(file_name) + ".manifest"
        # destination_part = file_name.split(".csv")[0]

        manifest_template = {
            # "source": "myfile.csv"
            # ,"destination": "in.c-mybucket.table"
            "incremental": bool(True)
            # ,"primary_key": ["VisitID","Value","MenuItem","Section"]
            # ,"columns": [""]
            # ,"delimiter": "|"
            # ,"enclosure": ""
        }

        column_header = []  # noqa

        manifest = manifest_template
        manifest["primary_key"] = primary_key

        try:
            with open(file, 'w') as file_out:
                json.dump(manifest, file_out)
                logging.info(
                    "Output manifest file ({0}) produced.".format(file_name))
        except Exception as e:
            logging.error("Could not produce output file manifest.")
            logging.error(e)

    def output(self, endpoint, data, pk):
        """
        Outputting JSON
        """

        temp_df = pd.DataFrame(data)
        if self.accounting_type == '':
            filename = endpoint + ".csv"
        else:
            filename = "{0}_{1}.csv".format(endpoint, self.accounting_type)

        logging.info("Outputting {0}...".format(filename))
        file_out_path = DEFAULT_FILE_DESTINATION + filename
        print(f"Saving file to: {file_out_path}")
        temp_df.to_csv(file_out_path,
                       index=False, columns=self.columns)
        self.produce_manifest(filename, pk)

    def output_1cell(self, endpoint, columns, data, pk):
        """
        Output everything into one cell
        """

        # Construct output filename
        if self.accounting_type == '':
            filename = endpoint + ".csv"
        else:
            filename = "{0}_{1}.csv".format(endpoint, self.accounting_type)

        # if file exist, not outputing column header
        if os.path.isfile(DEFAULT_FILE_DESTINATION + filename):
            data_out = [data]
        else:
            data_out = [columns, data]

        with open(DEFAULT_FILE_DESTINATION + filename, "a") as f:
            writer = csv.writer(f)
            # writer.writerow(["range", "start_date", "end_date", "content"])
            # writer.writerow([date_concat, start_date, end_date, "{0}".format(self.content)])
            writer.writerows(data_out)
            # f.write(["content"])
            # f.write(["{0}"].format(self.content))
        f.close()
        logging.info("Outputting {0}... ".format(filename))
        # if not os.path.isfile(DEFAULT_FILE_DESTINATION+filename):
        self.produce_manifest(filename, pk)


================================================
File: /src/client.py
================================================
import json
import logging
import requests
import dateparser
import urllib.parse as url_parse
from requests.auth import HTTPBasicAuth
import os

from keboola.component.base import ComponentBase  # noqa


statefile_in_path = os.path.join(os.path.dirname(os.getcwd()), "data/in/state.json")
statefile_out_path = os.path.join(os.path.dirname(os.getcwd()), "data/out/state.json")

requesting = requests.Session()


class QuickBooksClientException(Exception):
    pass


class QuickbooksClient:
    """
    QuickBooks Requests Handler
    """

    def __init__(self, company_id, access_token, refresh_token, oauth, sandbox):
        self.data_2 = None
        self.data = None
        self.app_key = oauth.appKey
        self.app_secret = oauth.appSecret

        if not sandbox:
            self.base_url = "https://quickbooks.api.intuit.com/v3/company"
        else:
            self.base_url = "https://sandbox-quickbooks.api.intuit.com/v3/company"

        # Parameters for request
        self.access_token = access_token
        self.refresh_token = refresh_token
        self.access_token_refreshed = False
        self.new_refresh_token = False
        self.company_id = company_id
        self.reports_required_accounting_type = [
            "ProfitAndLoss",
            "ProfitAndLossDetail",
            "GeneralLedger",
            "BalanceSheet",
            "TrialBalance"
        ]

    def fetch(self, endpoint, report_api_bool, start_date, end_date, query="", params=None):
        """
        Fetching results for the specified endpoint
        """
        # Initializing Parameters
        self.endpoint = endpoint
        self.report_api_bool = report_api_bool

        # Pagination Parameters
        self.startposition = 1
        self.maxresults = 1000
        # Start_date will be used as the custom query input field
        # if custom query is selected
        self.start_date = start_date
        self.end_date = end_date

        # Return
        # if report is returning accounting_type
        # data = Accrual Type
        # data2 = Cash Type
        self.data = []  # stores all the returns from request
        self.data_2 = []

        logging.info("Accessing QuickBooks API...")
        if report_api_bool:
            logging.info("Processing Report: {0}".format(endpoint))
            if self.endpoint == "CustomQuery":
                if query == '':
                    raise QuickBooksClientException("Please enter query for CustomQuery. Exit...")
                logging.info("Input Custom Query: {0}".format(self.start_date))
                self.custom_request(input_query=query)
            else:
                if not (self.start_date and self.end_date):
                    raise QuickBooksClientException(f"Start date and End date are required for {endpoint} reports.")
                self.report_request(endpoint, start_date, end_date, params)
        else:
            self.count = self.get_count()  # total count of records for pagination
            if self.count == 0:
                logging.info(
                    "There are no returns for {0}".format(self.endpoint))
                self.data = []
            else:
                self.data_request()

    def refresh_access_token(self):
        """
        Get a new access token with refresh token
        """

        # Basic authorization header for refresh token
        url = "https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer"

        results = None
        request_success = False
        while not request_success:
            # Request Parameters
            param = {
                "grant_type": "refresh_token",
                "refresh_token": self.refresh_token
            }

            r = requests.post(url, auth=HTTPBasicAuth(
                self.app_key, self.app_secret), data=param)
            results = r.json()

            # If access token was not fetched
            if "error" in results:
                if not self.new_refresh_token:
                    if os.path.isfile(statefile_in_path):
                        with open(statefile_in_path, 'r') as f:
                            statefile = json.load(f)
                        if "refresh_token" in statefile:
                            logging.info("Loading Refresh Token from State file.")
                            self.refresh_token = statefile["refresh_token"]
                            logging.info("State refresh token: {0}XXXX{1}".format(
                                self.refresh_token[0:4], self.refresh_token[-4:]))
                    self.new_refresh_token = True

                else:
                    raise QuickBooksClientException("Failed to refresh access token, please re-authorize credentials.")
            else:
                request_success = True

        self.access_token = results["access_token"]
        self.refresh_token = results["refresh_token"]
        logging.info("Access Token Granted.")
        self.write_tokens_to_manifest()

        # Monitor if app has requested refresh token yet
        self.access_token_refreshed = True

    def get_count(self):
        """
        Fetch the number of records for the specified endpoint
        """

        # Request Parameters
        endpoint = self.endpoint
        url = "select count(*) from {0}".format(endpoint)
        encoded_url = self.url_encode(url)
        count_url = "{0}/{1}/query?query={2}".format(
            self.base_url, self.company_id, encoded_url)

        # Request the number of counts
        data = self._request(count_url)

        total_counts = data["QueryResponse"]["totalCount"]
        logging.info("Total Number of Records for {0}: {1}".format(
            endpoint, total_counts))

        return total_counts

    @staticmethod
    def url_encode(query):
        """
        URL encoded the query parameter
        """
        out = url_parse.quote_plus(query)
        return out

    def _request(self, url, params=None):
        """
        Handles Request
        """
        results = None
        request_success = False
        while not request_success:
            headers = {
                "Authorization": "Bearer " + self.access_token,
                "Accept": "application/json"
            }
            logging.info(f'Requesting: {url} with params: {params}')
            data = requesting.get(url, headers=headers, params=params)

            try:
                results = json.loads(data.text)

            except json.decoder.JSONDecodeError as e:
                raise QuickBooksClientException(f"Cannot decode response: {data.text}") from e

            if "fault" in results or "Fault" in results:
                if not self.access_token_refreshed:
                    logging.info("Refreshing Access Token")
                    self.refresh_access_token()
                else:
                    logging.error('Response Headers: {}'.format(data.headers))
                    raise QuickBooksClientException(data.text)
            else:
                request_success = True

        if not results:
            raise QuickBooksClientException("Unable to fetch results.")
        return results

    def data_request(self):
        """
        Handles Request Parameters and Pagination
        """

        num_of_run = 0

        while self.startposition <= self.count:
            # Query Parameters
            # Custom query for Class endpoint
            if self.endpoint == 'Class':

                query = "SELECT * FROM {0} WHERE Active IN (true, false) STARTPOSITION {1} MAXRESULTS {2}".format(
                    self.endpoint, self.startposition, self.maxresults)

            else:

                query = "SELECT * FROM {0} STARTPOSITION {1} MAXRESULTS {2}".format(
                    self.endpoint, self.startposition, self.maxresults)

            logging.info("Request Query: {0}".format(query))
            encoded_query = self.url_encode(query)
            url = "{0}/{1}/query?query={2}".format(
                self.base_url, self.company_id, encoded_query)

            # Requests and concatenating results into class's data variable
            results = self._request(url)

            # If API returns error, raise exception and terminate application
            if "fault" in results or "Fault" in results:
                raise Exception(results)

            data = results["QueryResponse"][self.endpoint]

            # Concatenate with exist extracted data
            self.data = self.data + data

            # Handling pagination paramters
            self.startposition += self.maxresults
            num_of_run += 1

        logging.info("Number of Requests: {0}".format(num_of_run))

    def custom_request(self, input_query):
        """
        Handles Request Parameters and Pagination
        """

        # Query Parameters
        query = "{0}".format(input_query)

        logging.info("Request Query: {0}".format(query))
        encoded_query = self.url_encode(query)
        url = "{0}/{1}/query?query={2}".format(
            self.base_url, self.company_id, encoded_query)

        # Requests and concatenating results into class's data variable
        results = self._request(url)

        # If API returns error, raise exception and terminate application
        if "fault" in results or "Fault" in results:
            raise Exception(results)

        data = results["QueryResponse"]

        # Concatenate with exist extracted data
        self.data = data

    def report_request(self, endpoint, start_date, end_date, params=None):
        """
        API request for Report Endpoint
        """

        if start_date == "":
            date_param = ""

            # For GeneralLedger ONLY
            if endpoint == "GeneralLedger":
                date_param = "?columns=klass_name,account_name,account_num,chk_print_state,create_by,create_date," \
                             "cust_name,doc_num,emp_name,inv_date,is_adj,is_ap_paid,is_ar_paid,is_cleared,item_name," \
                             "last_mod_by,last_mod_date,memo,name,quantity,rate,split_acc,tx_date,txn_type,vend_name," \
                             "net_amount,tax_amount,tax_code,dept_name,subt_nat_amount,rbal_nat_amount,debt_amt," \
                             "credit_amt "
        else:

            startdate = (dateparser.parse(start_date)).strftime("%Y-%m-%d")
            enddate = (dateparser.parse(end_date)).strftime("%Y-%m-%d")

            if startdate > enddate:
                raise Exception(
                    "Please validate your date parameter for {0}".format(endpoint))

            date_param = "?start_date={0}&end_date={1}".format(
                startdate, enddate)

            # For GeneralLedger ONLY
            if endpoint == "GeneralLedger":
                date_param = date_param + "&columns=dklass_name,account_name,account_num,chk_print_state," \
                                          "create_by,create_date,cust_name,doc_num,emp_name,inv_date,is_adj," \
                                          "is_ap_paid,is_ar_paid," \
                                          "is_cleared,item_name,last_mod_by,last_mod_date,memo,name,quantity,rate," \
                                          "split_acc,tx_date," \
                                          "txn_type,vend_name,net_amount,tax_amount,tax_code,dept_name," \
                                          "subt_nat_amount,rbal_nat_amount,debt_amt,credit_amt"

        url = "{0}/{1}/reports/{2}{3}".format(self.base_url,
                                              self.company_id, endpoint, date_param)
        if endpoint in self.reports_required_accounting_type:

            accrual_url = url + "&accounting_method=Accrual"
            cash_url = url + "&accounting_method=Cash"

            results = self._request(accrual_url, params)
            self.data = results

            results_2 = self._request(cash_url, params)
            self.data_2 = results_2

        else:

            results = self._request(url)
            self.data = results

    def write_tokens_to_manifest(self):
        """
        Saves both refresh_token and access token to statefile.
        Refer to https://developer.intuit.com/app/developer/qbo/docs/develop/authentication-and-authorization/faq
        to find out why.
        """
        temp = {"#refresh_token": self.refresh_token, "#access_token": self.access_token}
        logging.info("Saving tokens to statefile.")
        with open(statefile_out_path, "w") as f:
            json.dump(temp, f)


================================================
File: /src/mapping.py
================================================
import uuid
import pandas as pd
import json
import logging
import sys  # noqa
import os


# destination to fetch and output files
cwd_parent = os.path.dirname(os.getcwd())
DEFAULT_FILE_INPUT = os.path.join(cwd_parent, "data/in/tables/")
DEFAULT_FILE_DESTINATION = os.path.join(cwd_parent, "data/out/tables/")


class Mapping:
    """
    Handling Generic Ex Mapping
    """

    def __init__(self, endpoint, data):

        self.endpoint = endpoint
        self.mapping = self.mapping_check(self.endpoint)
        self.out_file = {self.endpoint: []}
        self.out_file_pk = {self.endpoint: []}  # destination name from mapping
        self.out_file_pk_raw = {}  # raw destination name from API output
        self.get_primary_key(endpoint, self.mapping)

        # Runs
        self.root_parse(data)
        self.output()

    @staticmethod
    def mapping_check(endpoint):
        """
        Selecting the Right Mapping for the specified endpoint
        """
        with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "mappings.json"), 'r') as f:
            out = json.load(f)
        f.close()
        return out[endpoint]

    def root_parse(self, data):
        """
        Parsing the Root property of the return data
        """

        # data = self.data
        mapping = self.mapping

        for row in data:
            # Looping row by row
            self.parsing(self.endpoint, mapping, row)

    def parsing(self, table_name, mapping, data):
        """
        Outputting data results based on configured mapping
        """

        # If new table property is found,
        # create a new array to store values
        if table_name not in self.out_file:
            self.out_file[table_name] = []

        row_out = {}  # Storing row output

        # Looping through the keys of the mapping
        for column in mapping:
            if mapping[column]["type"] == "column":
                # Delimit mapping variables
                if "." in column:
                    temp_value = column.split(".")

                    try:
                        # Looping through the array
                        # value = data[temp_value[0]][temp_value[1]]
                        value = data
                        for word in temp_value:
                            value = value[word]
                    except Exception:
                        value = ""
                else:
                    try:
                        value = data[column]
                    except Exception:
                        value = ""
                header = mapping[column]["mapping"]["destination"]

            elif mapping[column]["type"] == "table":

                # Setting up table parameters,
                # mappings and values for parsing the nested table
                mapping_name = column
                # Mapping for the table
                mapping_in = mapping[column]["tableMapping"]
                # New table output name
                sub_table_name = mapping[column]["destination"]
                sub_table_exist = True  # Determine if the table column exist as a property in source file
                sub_table_row_exist = True  # Determine if there are any rows within the sub table

                # Passing the function if the JSON property is not found
                try:
                    if "." in mapping_name:
                        temp_value = mapping_name.split(".")
                        data_in = data
                        for word in temp_value:
                            data_in = data_in[word]
                    else:
                        data_in = data[mapping_name]

                    if len(data_in) == 0:
                        sub_table_row_exist = False
                except KeyError:
                    sub_table_exist = False

                # Verify if the sub-table exist in the root table
                if sub_table_exist and sub_table_row_exist:

                    # Setting up nested table primary key
                    # Using current table id to create unique pk with md5
                    string_of_pk = ""  # Concat all the PK as a string # noqa
                    # Iterate through all the pk
                    sub_table_pk = mapping[column]["destination"] + \
                        "-"+str(uuid.uuid4().hex)

                    mapping_in["parent_table"] = {
                        "type": "pk",
                        "value": sub_table_pk
                    }

                    # Loop nested table
                    self._parse_table(sub_table_name, mapping_in, data_in)

                    # Returning sub table PK
                    value = sub_table_pk

                else:
                    value = ""

                # Primary key return to the root table
                header = column

            # Sub table's Primary Key
            # Source: injected new property when new table is found in the mapping
            elif mapping[column]["type"] == "pk":

                header = column
                value = mapping[column]["value"]

            # Injecting new table elements for the row
            row_out[header] = value

        # Storing JSON tables
        out_file = self.out_file
        out_file[table_name].append(row_out)
        self.out_file = out_file

    def _parse_table(self, table_name, mapping, data):
        """
        Parsing table data
        Determining the type of the sub-table
        *** Sub-function of parse() ***
        """

        if type(data) == dict:
            self.parsing(table_name, mapping, data)

        elif type(data) == list:
            for row in data:
                self.parsing(table_name, mapping, row)

    def get_primary_key(self, table_name, mapping):
        """
        Filtering out all the primary keys within the mapping table
        """

        # If table_name does not exist in the PK list
        if table_name not in self.out_file_pk_raw:

            self.out_file_pk_raw[table_name] = []
            self.out_file_pk[table_name] = []

        for column in mapping:

            # Column type is "column"
            if mapping[column]["type"] == "column":

                # Search if the primaryKey property is within the mapping configuration
                if "primaryKey" in mapping[column]["mapping"]:

                    # Confirm if the primary key tab is true
                    if mapping[column]["mapping"]["primaryKey"]:

                        self.out_file_pk_raw[table_name].append(column)
                        self.out_file_pk[table_name].append(
                            mapping[column]["mapping"]["destination"])

            # Column type is "table"
            if mapping[column]["type"] == "table":

                # Recursively run the tableMapping
                self.get_primary_key(
                    table_name=mapping[column]["destination"], mapping=mapping[column]["tableMapping"])

    @staticmethod
    def produce_manifest(file_name, primary_key):
        """
        Dummy function to return header per file type.
        """

        file = "/data/out/tables/"+str(file_name)+".manifest"
        logging.info("Manifest output: {0}".format(file))

        manifest_template = {
            # "source": "myfile.csv"
            # ,"destination": "in.c-mybucket.table"
            # "incremental": bool(incremental)
            # ,"primary_key": ["VisitID","Value","MenuItem","Section"]
            # ,"columns": [""]
            # ,"delimiter": "|"
            # ,"enclosure": ""
        }

        column_header = []  # noqa

        manifest = manifest_template
        # manifest["primary_key"] = primary_key

        try:
            with open(file, 'w') as file_out:
                json.dump(manifest, file_out)
                # logging.info("Output manifest file ({0}) produced.".format(file_name))
        except Exception as e:
            logging.error("Could not produce output file manifest.")
            logging.error(e)
            sys.exit(1)

        return

    def output(self):
        """
        Output Data with its desired file name
        """

        # Outputting files
        out_file = self.out_file

        for file in out_file:

            out_df = pd.DataFrame(out_file[file])
            file_dest = DEFAULT_FILE_DESTINATION+file+".csv"
            out_df.to_csv(file_dest, index=False)
            logging.info("Table output: {0}...".format(file_dest))

        # Outputting manifest file if incremental
        out_file_pk = self.out_file_pk  # noqa


================================================
File: /src/component.py
================================================
import logging

from mapping import Mapping
from client import QuickbooksClient, QuickBooksClientException
from report_mapping import ReportMapping
from datetime import date
from dateutil.relativedelta import relativedelta

from keboola.component.base import ComponentBase
from keboola.component.exceptions import UserException  # noqa
from keboola.csvwriter import ElasticDictWriter

# configuration variables
KEY_COMPANY_ID = 'companyid'
KEY_ENDPOINTS = 'endpoints'
KEY_REPORTS = 'reports'
GROUP_DATE_SETTINGS = 'date_settings'
KEY_START_DATE = 'start_date'
KEY_END_DATE = 'end_date'
KEY_GROUP_DESTINATION = 'destination'
KEY_LOAD_TYPE = 'load_type'
KEY_SUMMARIZE_COLUMN_BY = 'summarize_column_by'

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [KEY_COMPANY_ID, KEY_ENDPOINTS, KEY_REPORTS, KEY_GROUP_DESTINATION]

# QuickBooks Parameters
BASE_URL = "https://quickbooks.api.intuit.com"


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()
        self.summarize_column_by = None
        self.incremental = None
        self.end_date = None
        self.start_date = None

    def run(self):
        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        params = self.configuration.parameters

        # Input parameters
        endpoints = params.get(KEY_ENDPOINTS)
        reports = params.get(KEY_REPORTS)
        company_id = params.get(KEY_COMPANY_ID, [])
        endpoints.extend(reports)

        if params.get(GROUP_DATE_SETTINGS):
            date_settings = params.get(GROUP_DATE_SETTINGS)
            start_date = date_settings.get(KEY_START_DATE)
            end_date = date_settings.get(KEY_END_DATE)
        else:
            start_date = self.start_date
            end_date = self.end_date

        self.start_date = self.process_date(start_date)
        self.end_date = self.process_date(end_date)

        logging.info(f'Company ID: {company_id}')

        oauth = self.configuration.oauth_credentials
        statefile = self.get_state_file()
        if statefile.get("#refresh_token", {}):
            refresh_token = statefile.get("#refresh_token")
            access_token = statefile.get("#access_token")
            logging.info("Loaded tokens from statefile.")
        else:
            refresh_token = oauth["data"]["refresh_token"]
            access_token = oauth["data"]["access_token"]
            logging.info("No oauth data found in statefile. Using data from Authorization.")
        if params.get("sandbox"):
            sandbox = True
            logging.info("Sandbox environment enabled.")
        else:
            sandbox = False

        destination_params = params.get(KEY_GROUP_DESTINATION)
        if destination_params.get(KEY_LOAD_TYPE, False) == "incremental_load":
            self.incremental = True
        else:
            self.incremental = False
        logging.info(f"Load type incremental set to: {self.incremental}")

        self.summarize_column_by = params.get(KEY_SUMMARIZE_COLUMN_BY) if params.get(
            KEY_SUMMARIZE_COLUMN_BY) else self.summarize_column_by

        self.write_state_file({
            "#refresh_token": refresh_token,
            "#access_token": access_token
        })

        quickbooks_param = QuickbooksClient(company_id=company_id, refresh_token=refresh_token,
                                            access_token=access_token, oauth=oauth, sandbox=sandbox)

        # Fetching reports for each configured endpoint
        for endpoint in endpoints:

            if endpoint == "ProfitAndLossQuery**":
                self.process_pnl_report(quickbooks_param=quickbooks_param)
                continue

            if "**" in endpoint:
                endpoint = endpoint.split("**")[0]
                report_api_bool = True
            else:
                endpoint = endpoint
                report_api_bool = False

            # Phase 1: Request
            # Handling Quickbooks Requests
            self.fetch(quickbooks_param=quickbooks_param, endpoint=endpoint, report_api_bool=report_api_bool)

            # Phase 2: Mapping
            # Translate Input JSON file into CSV with configured mapping
            # For different accounting_type,
            # input_data will be outputting Accrual Type
            # input_data_2 will be outputting Cash Type
            logging.info("Parsing API results...")
            input_data = quickbooks_param.data

            # if there are no data
            # output blank
            if len(input_data) == 0:
                pass
            else:
                logging.info(
                    "Report API Template Enable: {0}".format(report_api_bool))
                if report_api_bool:
                    if endpoint == "CustomQuery":
                        # Not implemented
                        ReportMapping(endpoint=endpoint, data=input_data,
                                      query=self.start_date)
                    else:
                        if endpoint in quickbooks_param.reports_required_accounting_type:
                            input_data_2 = quickbooks_param.data_2
                            ReportMapping(endpoint=endpoint, data=input_data, accounting_type="accrual")
                            ReportMapping(endpoint=endpoint, data=input_data_2, accounting_type="cash")
                        else:
                            ReportMapping(endpoint=endpoint, data=input_data)
                else:
                    Mapping(endpoint=endpoint, data=input_data)

    def process_pnl_report(self, quickbooks_param):
        results_cash = []
        results_accrual = []

        def save_result(class_name, name, value, obj_type, obj_group, method):
            res_dict = {
                "class": class_name,
                "name": name,
                "value": value,
                "obj_type": obj_type,
                "obj_group": obj_group,
                "start_date": self.start_date,
                "end_date": self.end_date
            }
            if method == "cash":
                results_cash.append(res_dict)
            elif method == "accrual":
                results_accrual.append(res_dict)
            else:
                raise UserException(f"Unknown accounting method: {method}")

        def process_coldata(obj, obj_type, obj_group, method):
            col_data = obj["ColData"]
            name = col_data[0]["value"]
            value = col_data[1]["value"]
            save_result(class_name, name, value, obj_type, obj_group, method)

        def process_object(obj, class_name, method):
            obj_type = obj.get("type", "")
            obj_group = obj.get("group", "")

            if "ColData" in obj:
                process_coldata(obj, obj_type, obj_group, method)

            if "Header" in obj:
                header_name = obj["Header"]["ColData"][0]["value"]
                header_value = obj["Header"]["ColData"][1]["value"]
                save_result(class_name, header_name, header_value, obj_type, obj_group, method)

            if "Summary" in obj:
                summary_name = obj["Summary"]["ColData"][0]["value"]
                summary_value = obj["Summary"]["ColData"][1]["value"]
                save_result(class_name, summary_name, summary_value, obj_type, obj_group, method)

            if "Rows" in obj:
                inner_objects = obj["Rows"]["Row"]
                for inner_object in inner_objects:
                    process_object(inner_object, class_name, method)

        self.fetch(quickbooks_param=quickbooks_param, endpoint="CustomQuery", report_api_bool=True,
                   query="select * from Class")

        query_result = quickbooks_param.data
        classes = [item["Name"] for item in query_result.get("Class", []) if item.get("Name")]
        logging.info(f"Found Classes: {classes}")

        if not len(classes) == query_result['totalCount']:
            raise NotImplementedError("Classes paging is not implemented.")

        params = {}
        summarize = False
        if self.summarize_column_by:
            summarize = True
            params["summarize_column_by"] = self.summarize_column_by

        for class_name in classes:
            logging.info(f"Processing class: {class_name}")

            self.fetch(quickbooks_param=quickbooks_param, endpoint="ProfitAndLoss", report_api_bool=True, query="",
                       params=params)

            summarize_by = quickbooks_param.data['Header'].get("SummarizeColumnsBy", False)

            if not summarize_by:

                report_accrual = quickbooks_param.data['Rows']['Row']
                report_cash = quickbooks_param.data_2['Rows']['Row']

                for obj in report_cash:
                    process_object(obj, class_name, method="cash")
                for obj in report_accrual:
                    process_object(obj, class_name, method="accrual")

            else:

                report_cash_data = quickbooks_param.data_2
                report_accrual_data = quickbooks_param.data

                header = quickbooks_param.data['Header']
                summarize_by = header['SummarizeColumnsBy']
                currency = header['Currency']

                results_cash = self.preprocess_dict(report_cash_data,
                                                    class_name,
                                                    summarize_by=summarize_by,
                                                    currency=currency)

                results_accrual = self.preprocess_dict(report_accrual_data,
                                                       class_name,
                                                       summarize_by=summarize_by,
                                                       currency=currency)

        if summarize:
            suffix = "_"+str(summarize_by)
        else:
            suffix = ""

        self.save_pnl_report_to_csv(table_name=f"ProfitAndLossQuery_cash{suffix}.csv", results=results_cash,
                                    summarize=summarize)
        self.save_pnl_report_to_csv(table_name=f"ProfitAndLossQuery_accrual{suffix}.csv", results=results_accrual,
                                    summarize=summarize)

    def preprocess_dict(self, obj, class_name, summarize_by, currency):
        results = []

        rows = obj['Rows']['Row']
        cols = obj['Columns']['Column']
        group_by = []
        for col in cols:
            group_by.append(col['ColTitle'])

        def save_result(_class_name, name, value, obj_type, obj_group, category_name="", category_id=""):
            res_dict = {
                "class": _class_name,
                "name": name,
                "value": value,
                "obj_type": obj_type,
                "obj_group": obj_group,
                "category_name": category_name,
                "category_id": category_id,
                "start_date": self.start_date,
                "end_date": self.end_date,
                "summarize_by": summarize_by,
                "currency": currency
            }
            results.append(res_dict)

        def process_coldata(obj, obj_type, obj_group):
            col_data = obj["ColData"]
            category_name = col_data[0]["value"]
            category_id = col_data[0]["id"]
            for name, val in zip(group_by, col_data):
                if name:
                    save_result(class_name, name, val['value'], obj_type, obj_group, category_name, category_id)

        def process_object(obj, class_name):
            obj_type = obj.get("type", "")
            obj_group = obj.get("group", "")

            if "ColData" in obj:
                process_coldata(obj, obj_type, obj_group)

            if "Header" in obj:
                header_name = obj["Header"]["ColData"][0]["value"]
                header_value = obj["Header"]["ColData"][1]["value"]
                save_result(class_name, header_name, header_value, obj_type, obj_group)

            if "Summary" in obj:
                summary_name = obj["Summary"]["ColData"][0]["value"]
                summary_value = obj["Summary"]["ColData"][1]["value"]
                save_result(class_name, summary_name, summary_value, obj_type, obj_group)

            if "Rows" in obj:
                inner_objects = obj["Rows"]["Row"]
                for inner_object in inner_objects:
                    process_object(inner_object, class_name)

        for row in rows:
            process_object(row, class_name)

        return results

    def save_pnl_report_to_csv(self, table_name: str, results: list, summarize: bool):

        if not summarize:
            pk = ["class", "name", "obj_type", "start_date", "end_date"]
            columns = ["class", "name", "value", "obj_type", "obj_group", "start_date", "end_date"]
        else:
            pk = ["class", "name", "obj_type", "category_id", "start_date", "end_date"]
            columns = ["class", "name", "value", "obj_type", "obj_group", "category_name", "category_id",
                       "start_date", "end_date", "summarize_by", "currency"]

        table_def = self.create_out_table_definition(table_name, primary_key=pk, incremental=self.incremental)

        with ElasticDictWriter(table_def.full_path, columns) as wr:
            wr.writeheader()
            wr.writerows(results)

        self.write_manifest(table_def)

    def fetch(self, quickbooks_param, endpoint, report_api_bool, query="", params=None):
        logging.info(f"Fetching endpoint {endpoint} with date rage: {self.start_date} - {self.end_date}")
        try:
            quickbooks_param.fetch(
                endpoint=endpoint,
                report_api_bool=report_api_bool,
                start_date=self.start_date,
                end_date=self.end_date,
                query=query if query else "",
                params=params
            )
        except QuickBooksClientException as e:
            raise UserException(e) from e

    @staticmethod
    def process_date(dt):
        """Checks if date is in valid format. If not, raises UserException. If None, returns None"""
        if not dt:
            return None

        dt_format = '%Y-%m-%d'
        today = date.today()
        if dt == "PrevMonthStart":
            result = today.replace(day=1) - relativedelta(months=1)
        elif dt == "PrevMonthEnd":
            result = today.replace(day=1) - relativedelta(days=1)
        else:
            try:
                date.fromisoformat(dt)
            except ValueError:
                raise UserException(f"Date {dt} is invalid. Valid types are: "
                                    f"PrevMonthStart, PrevMonthEnd or YYYY-MM-DD")
            return dt
        return result.strftime(dt_format)


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.run()
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: /requirements.txt
================================================
mock
freezegun
keboola.component==1.4.0
keboola.http-client
dateparser
regex
keboola.csvwriter
keboola.utils ==1.1.0
pandas

================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        caches:
          - docker
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
          - echo 'Pushing test image to repo. [tag=test]'
          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
          - docker tag $APP_IMAGE:latest $REPOSITORY:test
          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          caches:
            - docker
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
            - echo 'Pushing test image to repo. [tag=test]'
            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            - docker tag $APP_IMAGE:latest $REPOSITORY:test
            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            - docker push $REPOSITORY:test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=keboola-component
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - chmod +x ./scripts/update_dev_portal_properties.sh
            - chmod +x ./deploy.sh
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /component_config/component_short_description.md
================================================
Testing functional sample extractor for purposes of the python component template. 

================================================
File: /component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "QuickBooks",
  "required": [
    "companyid",
    "endpoints"
  ],
  "properties": {
    "companyid": {
      "type": "string",
      "title": "Company ID",
      "default": "",
      "minLength": 1,
      "description": "Can be found under QuickBooks account's \"Account and Setting\".",
      "propertyOrder": 1
    },
    "endpoints": {
      "type": "array",
      "title": "Endpoints",
      "format": "select",
      "items": {
        "type": "string",
        "enum": [
          "Account",
          "Bill",
          "BillPayment",
          "Budget",
          "Class",
          "Customer",
          "Department",
          "Deposit",
          "Invoice",
          "Item",
          "JournalEntry",
          "Payment",
          "Preferences",
          "Purchase",
          "PurchaseOrder",
          "TaxCode",
          "TaxRate",
          "Term",
          "Transfer",
          "Vendor"
        ]
      },
      "uniqueItems": true,
      "options": {
        "tags": true
      },
      "description": "Select which endpoints you want to process.",
      "propertyOrder": 2
    },
    "reports": {
      "type": "array",
      "title": "Reports",
      "format": "select",
      "items": {
        "type": "string",
        "enum": [
          "BalanceSheet**",
          "CashFlow**",
          "GeneralLedger**",
          "ProfitAndLossDetail**",
          "ProfitAndLossQuery**",
          "TransactionList**",
          "TrialBalance**"
        ]
      },
      "uniqueItems": true,
      "options": {
        "tags": true
      },
      "description": "Select which reports you want to process.",
      "propertyOrder": 3
    },
    "summarize_column_by": {
      "title": "Summarize Column By (optional)",
      "description": "Enables Grouping for ProfitAndLossQuery** endpoint. Does not affect other reports.",
      "type": "string",
      "propertyOrder": 4
    },
    "date_settings": {
      "type": "object",
      "title": "Date Settings",
      "propertyOrder": 5,
      "properties": {
        "start_date": {
          "title": "Start Date",
          "type": "string",
          "default": "",
          "description": "Valid types are: PrevMonthStart, PrevMonthEnd or a date in YYYY-MM-DD format. Only affects reports.",
          "propertyOrder": 1
        },
        "end_date": {
          "title": "End date",
          "type": "string",
          "default": "",
          "description": "Valid types are: PrevMonthStart, PrevMonthEnd or a date in YYYY-MM-DD format. Only affects reports.",
          "propertyOrder": 3
        }
      }
    },
    "destination": {
      "title": "Destination",
      "type": "object",
      "propertyOrder": 6,
      "required": [
        "load_type"
      ],
      "properties": {
        "load_type": {
          "type": "string",
          "enum": [
            "full_load",
            "incremental_load"
          ],
          "options": {
            "enum_titles": [
              "Full Load",
              "Incremental Load"
            ]
          },
          "default": "full_load",
          "format": "checkbox",
          "title": "Load Type",
          "description": "If Full load is used, the destination table will be overwritten every run. If incremental load is used, data will be upserted into the destination table. Tables with a primary key will have rows updated, tables without a primary key will have rows appended.",
          "propertyOrder": 4
        }
      }
    }
  }
}

================================================
File: /component_config/configuration_description.md
================================================
1. Application Authorization   
        - By authorizing the application, KBC will safely communicate with QuickBooks API to handle the final authorization for API requests.  
           
2. Company ID   
        - To obtain Company ID:  
            QuickBooks Login -> Settings(Top right corner) -> "Account and Setting" -> "Billing & Subscription"  
    **Note: Please do not input and skip the spaces in between the Company ID**   

3. Data Request   
    - User has to specify the application's endpoint
    - **Note: Please ensure signed-in user has the required privileges to access the endpoints**

    #### Constraints
    - Quickbooks Extractor is unable to parse the listed reports below generically. The JSON returns of the requested reports will be output as *ONE* cell. The priamry key for these tables are start_date and end_date which enable users to run the component incrementally.
    - Records cannot parse
        1. CashFlow
        2. GeneralLedger
        3. ProfitAndLossDetail
        4. TransactionList
        5. TrialBalance
    
4. Date Parameters
    - If start_date and end_date are not specified, component will request the API with the endpoint's default parameter, Fiscal Year to Date
    - Required format: YYYY-MM-DD

### Docker Version: 0.2.0 ###


================================================
File: /component_config/configRowSchema.json
================================================
{}

================================================
File: /component_config/component_long_description.md
================================================
Testing functional sample extractor for purposes of the python component template. 
Implements partial Hubspot extractor using the public sandbox token.

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: /component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: /component_config/logger
================================================
gelf

================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi

================================================
File: /docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /README.md
================================================
# WARNING #

**This component is deprecated a new one is https://github.com/keboola/component-quickbooks-online**


# README #

This repository is a collection of configurations needed to register Keboola Generic Extractor as a branded QuickBooks KBC Extractor.
Extractor's task is to help user to extract the data from QuickBooks online to Keboola Connection Platform (KBC). 

## API documentation ##
[QuickBooks API documentation](https://developer.intuit.com/docs/0100_quickbooks_online/0300_references/0000_programming_guide/0000_rest_api_quick_reference)  

## Configuration ##
  
  1. Application Authorization   
        - By authorizing the application, KBC will safely communicate with QuickBooks API to handle the final authorization for API requests.  
           
  2. Company ID   
        - To obtain Company ID:  
            QuickBooks Login -> Settings(Top right corner) -> "Account and Setting" -> "Billing & Subscription"  
    **Note: Please ignore the spaces in between the Company ID**   

  3. Data Request   
        - User has to specify the application's endpoint
    **Note: Please ensure signed-in user has the required privileges to access the endpoints**

  4. Date Parameters
        - If start_date and end_date are not specified, component will request the API with the endpoint's default parameter, Fiscal Year to Date
        - Required format: YYYY-MM-DD

## Available Endpoints: ##
        
### Accounting Endpoints ###
        1. Account
        2. Bill
        3. BillPayment
        4. Budget
        5. Class
        6. Customer
        7. Deposit
        8. Invoice
        9. Item
        10. JournalEntry
        11. Payment
        12. Purchase
        13. PurchaseOrder
        14. TaxCode
        15. TaxRate
        16. Transfer
        17. Vendor
### Report Endpoints ###
        1. BalanceSheet
        2. CashFlow
        3. GeneralLedger
        4. ProfitAndLoss
        5. ProfitAndLossDetail
        6. TransactionList
        7. TrialBalance

### Constraints ##
        - Quickbooks Extractor is unable to parse the listed reports below generically. The JSON returns of the requested reports will be output as *ONE* cell. The priamry key for these tables are start_date and end_date which enable users to run the component incrementally.
        - Records cannot parse:
            1. CashFlow
            2. GeneralLedger
            3. ProfitAndLossDetail
            4. TransactionList
            5. TrialBalance

### Accounting Types ##
        - Based on different business models, some clients are required to report on differnet accounting types: Cash or Accrual.
        - For reports below, component will perform 2 requests with 1 request against cash accounting type while the other against accrual accounting type
            1. BalanceSheet
            2. GeneralLedger
            3. ProfitAndLoss
            4. ProfitAndLossDetail
    

## Support ##
If the component is missing the endpoints or reports you are looking for, please submit a support ticket or feel free to contact me directly. 
         

## Contact Info ##
Leo Chan  
Vancouver, Canada (PST time)   
Email: leo@keboola.com  
Private: cleojanten@hotmail.com   

