Directory structure:
└── keboola-wr-azure-event-hub/
    ├── docker/
    │   ├── php-prod.ini
    │   └── composer-install.sh
    ├── .travis.yml
    ├── deploy.sh
    ├── phpcs.xml
    ├── docker-compose.yml
    ├── src/
    │   ├── MessageMapper/
    │   │   ├── RowAsJsonMapper.php
    │   │   ├── MessageMapper.php
    │   │   ├── ColumnValueMapper.php
    │   │   └── MessageMapperFactory.php
    │   ├── ProcessFactory.php
    │   ├── MessageWriter.php
    │   ├── Writer.php
    │   ├── Component.php
    │   ├── Exception/
    │   │   ├── ProcessException.php
    │   │   ├── UserException.php
    │   │   ├── ApplicationException.php
    │   │   ├── UnexpectedValueException.php
    │   │   └── InvalidStateException.php
    │   ├── Configuration/
    │   │   ├── Config.php
    │   │   ├── Node/
    │   │   │   └── HubNode.php
    │   │   ├── ActionConfigDefinition.php
    │   │   └── ConfigDefinition.php
    │   ├── NodeJs/
    │   │   ├── write.js
    │   │   ├── testConnection.js
    │   │   └── lib/
    │   │       ├── Writer.js
    │   │       ├── ApplicationError.js
    │   │       ├── messageStream.js
    │   │       └── UserError.js
    │   ├── run.php
    │   └── ProcessWrapper.php
    ├── .env.dist
    ├── composer.lock
    ├── phpstan.neon
    ├── tests/
    │   ├── phpunit/
    │   │   ├── ConfigTest.php
    │   │   ├── fixtures/
    │   │   │   └── process-factory/
    │   │   │       ├── stdoutAndStderr.js
    │   │   │       └── exitCode.js
    │   │   ├── AbstractTestCase.php
    │   │   ├── MessageWriterTest.php
    │   │   ├── ProcessFactoryTest.php
    │   │   └── bootstrap.php
    │   └── functional/
    │       ├── test-connection-connection-string-img-parameters/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── test-connection-ok/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── error-hub-name-not-match/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       ├── config.json
    │       │   │       └── in/
    │       │   │           └── tables/
    │       │   │               └── .gitkeep
    │       │   └── expected-code
    │       ├── write-find-input-table/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           ├── files/
    │       │   │           │   └── .gitkeep
    │       │   │           └── hub_messages_dump.txt
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── tables/
    │       │                   ├── data.csv
    │       │                   └── data.csv.manifest
    │       ├── write-column-value-mode-no-rows/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── tables/
    │       │                   ├── data.csv
    │       │                   └── data.csv.manifest
    │       ├── batch-size-10/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           ├── files/
    │       │   │           │   └── .gitkeep
    │       │   │           └── hub_messages_dump.txt
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── tables/
    │       │                   ├── data.csv
    │       │                   └── data.csv.manifest
    │       ├── error-bad-connection-string-2/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       ├── config.json
    │       │   │       └── in/
    │       │   │           └── tables/
    │       │   │               └── .gitkeep
    │       │   └── expected-code
    │       ├── write-column-value-mode-json-properties/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           ├── files/
    │       │   │           │   └── .gitkeep
    │       │   │           └── hub_messages_dump.txt
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── tables/
    │       │                   ├── data.csv
    │       │                   └── data.csv.manifest
    │       ├── write-row-as-json-mode-no-rows/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── tables/
    │       │                   ├── data.csv
    │       │                   └── data.csv.manifest
    │       ├── write-column-value-mode-json/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           ├── files/
    │       │   │           │   └── .gitkeep
    │       │   │           └── hub_messages_dump.txt
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── tables/
    │       │                   ├── data.csv
    │       │                   └── data.csv.manifest
    │       ├── hubConsumer.js
    │       ├── write-column-value-mode-properties-error/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       ├── config.json
    │       │   │       └── in/
    │       │   │           └── tables/
    │       │   │               ├── data.csv
    │       │   │               └── data.csv.manifest
    │       │   └── expected-code
    │       ├── write-column-value-mode/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           ├── files/
    │       │   │           │   └── .gitkeep
    │       │   │           └── hub_messages_dump.txt
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── tables/
    │       │                   ├── data.csv
    │       │                   └── data.csv.manifest
    │       ├── DatadirTest.php
    │       ├── error-bad-connection-string/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       ├── config.json
    │       │   │       └── in/
    │       │   │           └── tables/
    │       │   │               └── .gitkeep
    │       │   └── expected-code
    │       ├── empty-config/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── error-bad-event-hub-name/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       ├── config.json
    │       │   │       └── in/
    │       │   │           └── tables/
    │       │   │               └── .gitkeep
    │       │   └── expected-code
    │       ├── write-row-as-json-mode/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           ├── files/
    │       │   │           │   └── .gitkeep
    │       │   │           └── hub_messages_dump.txt
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── tables/
    │       │                   ├── data.csv
    │       │                   └── data.csv.manifest
    │       ├── write-column-value-mode-properties/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           ├── files/
    │       │   │           │   └── .gitkeep
    │       │   │           └── hub_messages_dump.txt
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── tables/
    │       │                   ├── data.csv
    │       │                   └── data.csv.manifest
    │       └── batch-size-1/
    │           ├── expected-stdout
    │           ├── expected/
    │           │   └── data/
    │           │       └── out/
    │           │           ├── tables/
    │           │           │   └── .gitkeep
    │           │           └── files/
    │           │               └── .gitkeep
    │           └── source/
    │               └── data/
    │                   ├── config.json
    │                   └── in/
    │                       └── tables/
    │                           ├── data.csv
    │                           └── data.csv.manifest
    ├── phpunit.xml.dist
    ├── eslint.config.mjs
    ├── .github/
    │   └── workflows/
    │       └── push.yml
    ├── composer.json
    ├── package.json
    ├── .dockerignore
    ├── Dockerfile
    └── README.md

================================================
File: /docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1


================================================
File: /docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT


================================================
File: /.travis.yml
================================================
sudo: required

language: bash

services:
  - docker

before_script:
  - export APP_IMAGE=keboola-component
  - docker -v
  - docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"
  - docker build -t $APP_IMAGE .
  - docker run -e CONNECTION_STRING -e EVENT_HUB_NAME -e CONSUMER_GROUP_NAME $APP_IMAGE composer ci

  # push test image to ECR
  - docker pull quay.io/keboola/developer-portal-cli-v2:latest
  - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
  - docker tag $APP_IMAGE:latest $REPOSITORY:test
  - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
  - docker push $REPOSITORY:test
  - docker pull quay.io/keboola/syrup-cli:latest


script:
  - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_APP_TEST_CONFIG_ID test

deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh
  on:
    tags: true


================================================
File: /deploy.sh
================================================
#!/bin/bash
set -e

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TRAVIS_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TRAVIS_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TRAVIS_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TRAVIS_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TRAVIS_TAG} is not allowed."
fi


================================================
File: /phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml">
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint"/>
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint"/>
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint"/>
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.EmptyLine"/>
    </rule>
</ruleset>


================================================
File: /docker-compose.yml
================================================
services:
  app: &base
    build:
      context: .
    image: keboola/wr-azure-event-hub
    environment:
      - CONNECTION_STRING
      - EVENT_HUB_NAME
      - CONSUMER_GROUP_NAME

  dev:
    <<: *base
    volumes:
      - .:/code
      - ./data:/data


================================================
File: /src/MessageMapper/RowAsJsonMapper.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\MessageMapper;

use Iterator;
use Keboola\AzureEventHubWriter\Exception\ApplicationException;
use Keboola\Csv\CsvReader;

class RowAsJsonMapper implements MessageMapper
{
    private CsvReader $csvReader;

    private array $header;

    public function __construct(CsvReader $csvReader)
    {
        $this->csvReader = $csvReader;

        // Get header
        $header = $this->csvReader->current();
        if (!$header) {
            throw new ApplicationException(sprintf('Missing CSV header.'));
        }
        $this->header = (array) $header;

        // Skip header
        $this->csvReader->next();
    }

    public function getMessages(): Iterator
    {
        while ($this->csvReader->valid()) {
            yield  ['message' => array_combine($this->header, (array) $this->csvReader->current())];
            $this->csvReader->next();
        }
    }
}


================================================
File: /src/MessageMapper/MessageMapper.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\MessageMapper;

use Iterator;

interface MessageMapper
{
    public function getMessages(): Iterator;
}


================================================
File: /src/MessageMapper/ColumnValueMapper.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\MessageMapper;

use Iterator;
use JsonException;
use Keboola\AzureEventHubWriter\Configuration\Config;
use Keboola\AzureEventHubWriter\Exception\UserException;
use Keboola\Csv\CsvReader;

class ColumnValueMapper implements MessageMapper
{
    private CsvReader $csvReader;

    private string $column;
    private int $columnIndex;

    private ?string $propertiesColumn;
    private ?int $propertiesColumnIndex = null;

    private array $header;

    public function __construct(Config $config, CsvReader $csvReader)
    {
        $this->csvReader = $csvReader;
        $this->column = $config->getColumn();
        $this->propertiesColumn = $config->getPropertiesColumn();
        $this->header = (array) $csvReader->getHeader();

        // Get column index
        $this->columnIndex = $this->getColumnIndex($this->column, $config);

        if ($this->propertiesColumn) {
            $this->propertiesColumnIndex = $this->getColumnIndex($this->propertiesColumn, $config);
        }

        // Skip header
        $this->csvReader->next();
    }

    public function getMessages(): Iterator
    {
        while ($this->csvReader->valid()) {
            $row = (array) $this->csvReader->current();
            $rawMessage = $row[$this->columnIndex];

            // Try convert to JSON object
            try {
                $message['message'] = json_decode($rawMessage, false, 512, JSON_THROW_ON_ERROR);
            } catch (JsonException) {
                $message['message'] = ['data' => $rawMessage];
            }

            if ($this->propertiesColumnIndex !== null) {
                $properties = $row[$this->propertiesColumnIndex] ?? null;
                try {
                    $message['properties'] = json_decode($properties, false, 512, JSON_THROW_ON_ERROR);
                } catch (JsonException) {
                    // properties must be json
                    throw new UserException(sprintf(
                        'Error decoding JSON in properties column "%s".',
                        $this->propertiesColumn,
                    ));
                }
            }

            yield $message;

            $this->csvReader->next();
        }
    }

    private function getColumnIndex(string $columnName, Config $config): int
    {
        // Validate: defined column must be present in the input table
        $columnIndex = array_search($columnName, $this->header);

        if (!is_int($columnIndex)) {
            throw new UserException(sprintf(
                'Column "%s" not found in table "%s".',
                $columnName,
                $config->getTableId(),
            ));
        }

        return $columnIndex;
    }
}


================================================
File: /src/MessageMapper/MessageMapperFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\MessageMapper;

use Keboola\AzureEventHubWriter\Configuration\Config;
use Keboola\AzureEventHubWriter\Configuration\ConfigDefinition;
use Keboola\AzureEventHubWriter\Exception\ApplicationException;
use Keboola\AzureEventHubWriter\Exception\UnexpectedValueException;
use Keboola\Csv\CsvReader;

class MessageMapperFactory
{
    private Config $config;

    private string $dataDir;

    public function __construct(Config $config, string $dataDir)
    {
        $this->config = $config;
        $this->dataDir = $dataDir;
    }

    public function create(): MessageMapper
    {
        $csvReader = $this->createCsvReader();

        switch ($this->config->getMode()) {
            case ConfigDefinition::MODE_MESSAGE_ROW_AS_JSON:
                return new RowAsJsonMapper($csvReader);
            case ConfigDefinition::MODE_MESSAGE_COLUMN_VALUE:
                return new ColumnValueMapper($this->config, $csvReader);
            default:
                throw new UnexpectedValueException(sprintf('Unexpected mode "%s".', $this->config->getMode()));
        }
    }

    private function createCsvReader(): CsvReader
    {
        return new CsvReader($this->getCsvPath());
    }

    private function getCsvPath(): string
    {
        $csvPath = rtrim($this->dataDir, '/') . '/in/tables/' . $this->config->getTableCsvFile();
        if (!file_exists($csvPath)) {
            throw new ApplicationException(sprintf('CSV file "%s" not found.', $csvPath));
        }

        return $csvPath;
    }
}


================================================
File: /src/ProcessFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter;

use Generator;
use Keboola\AzureEventHubWriter\Exception\ProcessException;
use Psr\Log\LoggerInterface;
use React\ChildProcess\Process;
use React\EventLoop\LoopInterface;
use React\Promise\Deferred;

class ProcessFactory
{
    public const MESSAGE_STREAM_FD = 3;

    private LoggerInterface $logger;

    private LoopInterface $loop;

    public function __construct(LoggerInterface $logger, LoopInterface $loop)
    {
        $this->logger = $logger;
        $this->loop = $loop;
    }

    public function create(string $cmd, array $env = []): ProcessWrapper
    {
        $fileDescriptors = [
            // STDIN
            0 => ['pipe', 'r'],
            // STDOUT
            1 => ['pipe', 'w'],
            // STDERR
            2 => ['pipe', 'w'],
            // MESSAGE STREAM (custom)
            self::MESSAGE_STREAM_FD => ['pipe', 'r'],
        ];

        // Let NodeJs script know which file descriptor should be used to write JSON documents to
        $env['MESSAGE_STREAM_FD'] = self::MESSAGE_STREAM_FD;

        // Create process and attach it to the event loop
        $process = new Process($cmd, null, $env, $fileDescriptors);
        $process->start($this->loop);

        // Log process stdout output as info
        $process->stdout->on('data', function (string $chunk): void {
            foreach ($this->explodeLines($chunk) as $line) {
                $this->logger->info($line);
            }
        });

        // Log process stderr output as warning
        $process->stderr->on('data', function (string $chunk): void {
            foreach ($this->explodeLines($chunk) as $line) {
                $this->logger->warning((string) $line);
            }
        });

        // Handle process exit
        $deferred = new Deferred();
        $process->on('exit', function (int $exitCode) use ($cmd, $deferred): void {
            if ($exitCode === 0) {
                $this->logger->debug(sprintf('Process "%s" completed successfully.', $cmd));
                $deferred->resolve();
            } else {
                $deferred->reject(
                    new ProcessException(sprintf('Process "%s" exited with code "%d".', $cmd, $exitCode), $exitCode),
                );
            }

            // Make sure the event loop ends
            $this->loop->stop();
        });

        return new ProcessWrapper($process, $deferred->promise());
    }

    /**
     * @return Generator<string>
     */
    private function explodeLines(string $str): Generator
    {
        foreach (explode("\n", $str) as $line) {
            $line = trim($line);
            if ($line) {
                yield $line;
            }
        }
    }
}


================================================
File: /src/MessageWriter.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter;

use Keboola\AzureEventHubWriter\Exception\ApplicationException;
use React\Stream\WritableStreamInterface;
use Throwable;

class MessageWriter
{
    public const DELIMITER = "\n---\n";

    private WritableStreamInterface $messageStream;

    private bool $bufferFull = false;

    private bool $finished = false;

    private int $processed = 0;

    public function __construct(WritableStreamInterface $messageStream)
    {
        $this->messageStream = $messageStream;
        $this->messageStream->on('error', function (Throwable $e): void {
            throw new ApplicationException($e->getMessage(), $e->getCode(), $e);
        });
        $this->messageStream->on('drain', function (): void {
            $this->bufferFull = false;
        });
    }

    public function isBufferFull(): bool
    {
        return $this->bufferFull;
    }

    public function isFinished(): bool
    {
        return $this->finished;
    }

    public function getCount(): int
    {
        return $this->processed;
    }

    public function writeMessage(mixed $message): void
    {
        $this->write((string) json_encode($message, JSON_THROW_ON_ERROR));
        $this->write(self::DELIMITER);
        $this->processed++;
    }

    public function finish(): void
    {
        $this->finished = true;
        $this->messageStream->end();
    }

    private function write(string $data): void
    {
        $this->bufferFull = !$this->messageStream->write($data);
    }
}


================================================
File: /src/Writer.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter;

use Iterator;
use Keboola\AzureEventHubWriter\Configuration\Config;
use Keboola\AzureEventHubWriter\Exception\ApplicationException;
use Keboola\AzureEventHubWriter\Exception\ProcessException;
use Keboola\AzureEventHubWriter\Exception\UserException;
use Keboola\AzureEventHubWriter\MessageMapper\MessageMapperFactory;
use Psr\Log\LoggerInterface;
use React\EventLoop\Loop;
use React\EventLoop\LoopInterface;
use Throwable;

class Writer
{
    public const CSV_ROWS_BATCH_SIZE = 10;

    private LoggerInterface $logger;

    private Config $config;

    private MessageMapperFactory $messageMapperFactory;

    private LoopInterface  $loop;

    private ProcessFactory $processFactory;

    public function __construct(
        LoggerInterface $logger,
        Config $config,
        MessageMapperFactory $messageMapperFactory,
    ) {
        $this->logger = $logger;
        $this->config = $config;
        $this->messageMapperFactory = $messageMapperFactory;
        $this->loop = Loop::get();
        $this->processFactory = new ProcessFactory($this->logger, $this->loop);
    }

    public function testConnection(): void
    {
        // Register a new NodeJs process to event loop.
        $process = $this->createNodeJsProcess('testConnection.js');

        // On sync actions are logged only errors (no info/warning messages)
        // ... because on sync action success -> JSON output is expected.
        // So we need to capture STDERR and wrap it in an exception on process failure.
        $stderr = '';
        $process->getStderr()->on('data', function (string $chunk) use (&$stderr): void {
            $stderr .= $chunk;
        });

        // Convert process failure to User/Application exception
        $process
            ->getPromise()
            ->done(null, function (Throwable $e) use (&$stderr): void {
                $msg = trim($stderr ?: $e->getMessage());
                if ($e instanceof ProcessException && $e->getExitCode() === 1) {
                    throw new UserException($msg, $e->getCode(), $e);
                } else {
                    throw new ApplicationException($msg, $e->getCode(), $e);
                }
            });

        // Start event loop
        $this->loop->run();
    }

    public function write(): void
    {
        // Create CSV reader
        $this->logger->info(sprintf(
            'Exporting table "%s" in "%s" mode ...',
            $this->config->getTableId(),
            $this->config->getMode(),
        ));

        // Create mapper
        $mapper = $this->messageMapperFactory->create();

        // Register a new NodeJs process to event loop.
        $process = $this->createNodeJsProcess('write.js');
        $messageStream = $process->getMessageStream();
        $messageWriter = new MessageWriter($messageStream);

        // Throw an exception on process failure
        $process
            ->getPromise()
            ->done(null, function (Throwable $e): void {
                if ($e instanceof ProcessException && $e->getExitCode() === 1) {
                    throw new UserException('Export failed.', $e->getCode(), $e);
                } else {
                    throw new ApplicationException($e->getMessage(), $e->getCode(), $e);
                }
            });

        // Schedule the first batch
        $this->futureWriteCsvRows($mapper->getMessages(), $messageWriter);

        // Start event loop
        $this->loop->run();

        // Done
        $this->logger->info(sprintf(
            'Exported all %d rows from the table "%s".',
            $messageWriter->getCount(),
            $this->config->getTableId(),
        ));
    }

    protected function writeCsvRows(Iterator $messages, MessageWriter $messageWriter): void
    {
        if ($messageWriter->isBufferFull()) {
            usleep(5000); // wait 5ms and check again
            return;
        }

        for ($i = 0; $i < self::CSV_ROWS_BATCH_SIZE && !$messageWriter->isBufferFull(); $i++) {
            if (!$messages->valid()) {
                // No more rows
                $messageWriter->finish();
                return;
            }

            $messageWriter->writeMessage($messages->current());
            $messages->next();
        }
    }

    protected function futureWriteCsvRows(Iterator $messages, MessageWriter $messageWriter): void
    {
        // We write CSV lines in batches to the NodeJs file descriptor.
        // After each batch, execution returns to the loop, so that it can process other events.
        // Event loop then call "futureTick" callback.
        $this->loop->futureTick(function () use ($messages, $messageWriter): void {
            $this->writeCsvRows($messages, $messageWriter);
            if (!$messageWriter->isFinished()) {
                $this->futureWriteCsvRows($messages, $messageWriter);
            }
        });
    }

    protected function createNodeJsProcess(string $script): ProcessWrapper
    {
        return $this->processFactory->create(sprintf('node %s/NodeJs/%s', __DIR__, $script), $this->getProcessEnv());
    }

    protected function getProcessEnv(): array
    {
        return [
            'MESSAGE_DELIMITER' => json_encode(MessageWriter::DELIMITER),
            'CONNECTION_STRING' => $this->config->getConnectionString(),
            'EVENT_HUB_NAME' => $this->config->getEventHubName(),
            'BATCH_SIZE' => $this->config->getAction() === 'run' ? $this->config->getBatchSize() : null,
        ];
    }
}


================================================
File: /src/Component.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter;

use Keboola\AzureEventHubWriter\Configuration\ActionConfigDefinition;
use Keboola\AzureEventHubWriter\Configuration\Config;
use Keboola\AzureEventHubWriter\Configuration\ConfigDefinition;
use Keboola\AzureEventHubWriter\MessageMapper\MessageMapperFactory;
use Keboola\Component\BaseComponent;
use Psr\Log\LoggerInterface;

class Component extends BaseComponent
{
    public const ACTION_RUN = 'run';
    public const ACTION_TEST_CONNECTION = 'testConnection';

    private Writer $writer;

    public function __construct(LoggerInterface $logger)
    {
        parent::__construct($logger);
        $config = $this->getConfig();
        $dataDir = $this->getDataDir();
        $messageMapperFactory = new MessageMapperFactory($config, $dataDir);
        $this->writer = new Writer($this->getLogger(), $config, $messageMapperFactory);
    }

    protected function run(): void
    {
        $this->writer->write();
    }

    protected function handleTestConnection(): array
    {
        $this->writer->testConnection();
        return ['success' => true];
    }

    protected function getSyncActions(): array
    {
        return [
            self::ACTION_TEST_CONNECTION => 'handleTestConnection',
        ];
    }

    public function getConfig(): Config
    {
        /** @var Config $config */
        $config = parent::getConfig();
        return $config;
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        $action = $this->getRawConfig()['action'] ?? 'run';
        return $action === 'run' ? ConfigDefinition::class : ActionConfigDefinition::class;
    }
}


================================================
File: /src/Exception/ProcessException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Exception;

use Throwable;

class ProcessException extends ApplicationException
{
    public function __construct(string $message, int $exitCode, ?Throwable $previous = null)
    {
        parent::__construct($message, $exitCode, $previous);
    }

    public function getExitCode(): int
    {
        return $this->code;
    }
}


================================================
File: /src/Exception/UserException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Exception;

use Exception;
use Keboola\CommonExceptions\UserExceptionInterface;

class UserException extends Exception implements UserExceptionInterface
{

}


================================================
File: /src/Exception/ApplicationException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Exception;

use Keboola\CommonExceptions\ApplicationExceptionInterface;
use RuntimeException;

class ApplicationException extends RuntimeException implements ApplicationExceptionInterface
{

}


================================================
File: /src/Exception/UnexpectedValueException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Exception;

class UnexpectedValueException extends ApplicationException
{

}


================================================
File: /src/Exception/InvalidStateException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Exception;

class InvalidStateException extends ApplicationException
{

}


================================================
File: /src/Configuration/Config.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Configuration;

use Keboola\AzureEventHubWriter\Exception\InvalidStateException;
use Keboola\AzureEventHubWriter\Exception\UserException;
use Keboola\Component\Config\BaseConfig;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class Config extends BaseConfig
{
    public function getConnectionString(): string
    {
        $connectionString = $this->getValue(['parameters', 'hub', '#connectionString'], false);
        $imageParams = $this->getImageParameters();
        if (isset($imageParams['global_config']['hub']['#connectionString'])) {
            $connectionString = $imageParams['global_config']['hub']['#connectionString'];
        }
        if (!$connectionString) {
            throw new InvalidConfigurationException(
                'The child node "#connectionString" at path "root.parameters.hub" must be configured.',
            );
        }
        return $connectionString;
    }

    public function getEventHubName(): string
    {
        return $this->getStringValue(['parameters', 'hub', 'eventHubName']);
    }

    public function getTableId(): string
    {
        return $this->getStringValue(['parameters', 'tableId']);
    }

    public function getTable(): array
    {
        $tableId = $this->getTableId();
        foreach ($this->getInputTables() as $table) {
            if ($table['source'] === $tableId) {
                return $table;
            }
        }

        throw new UserException(sprintf('Table source = "%s" not found in the input mapping.', $tableId));
    }

    public function getTableCsvFile(): string
    {
        return $this->getTable()['destination'];
    }

    public function getMode(): string
    {
        return $this->getStringValue(['parameters', 'mode']);
    }

    public function hasColumn(): bool
    {
        return $this->getMode() === ConfigDefinition::MODE_MESSAGE_COLUMN_VALUE;
    }

    public function getColumn(): string
    {
        if (!$this->hasColumn()) {
            throw new InvalidStateException('The "column" item is not set.');
        }

        return $this->getStringValue(['parameters', 'column']);
    }

    public function getBatchSize(): int
    {
        return $this->getIntValue(['parameters', 'batchSize']);
    }

    public function getPropertiesColumn(): ?string
    {
        /** @var array $configData */
        $configData = $this->getData();
        if (!isset($configData['parameters']['propertiesColumn'])) {
            return null;
        }

        return $this->getStringValue(['parameters', 'propertiesColumn']);
    }
}


================================================
File: /src/Configuration/Node/HubNode.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Configuration\Node;

use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\NodeBuilder;

class HubNode extends ArrayNodeDefinition
{
    public const NODE_NAME = 'hub';

    public function __construct()
    {
        parent::__construct(self::NODE_NAME);
        $this->isRequired();
        $this->init($this->children());
    }

    protected function init(NodeBuilder $builder): void
    {
        $builder
            ->scalarNode('#connectionString')->end()
            ->scalarNode('eventHubName')->isRequired()->cannotBeEmpty()->end();
    }
}


================================================
File: /src/Configuration/ActionConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Configuration;

use Keboola\AzureEventHubWriter\Configuration\Node\HubNode;
use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class ActionConfigDefinition extends BaseConfigDefinition
{
    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        $parametersNode->isRequired();

        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->ignoreExtraKeys(true)
            ->children()
                ->append(new HubNode())
            ->end()
        ;
        // @formatter:on
        return $parametersNode;
    }
}


================================================
File: /src/Configuration/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Configuration;

use Keboola\AzureEventHubWriter\Configuration\Node\HubNode;
use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigDefinition extends BaseConfigDefinition
{
    public const DEFAULT_BATCH_SITE = 1000;

    // Message's body is value of the configured column
    public const MODE_MESSAGE_COLUMN_VALUE = 'column_value';
    // Message's body is CSV row encoded to JSON
    public const MODE_MESSAGE_ROW_AS_JSON = 'row_as_json';

    protected function getRootDefinition(TreeBuilder $treeBuilder): ArrayNodeDefinition
    {
        $rootNode = parent::getRootDefinition($treeBuilder);

        // Check/determine tableId
        $rootNode->validate()->always(function ($v) {
            $tableId = $v['parameters']['tableId'] ?? null;
            $inputTables = array_values($v['storage']['input']['tables'] ?? []);
            if (!$tableId && count($inputTables) === 1) {
                // Get table (only one present) from the input mapping
                $v['parameters']['tableId'] = $inputTables[0]['source'];
            } elseif (!$tableId) {
                // No table found
                throw new InvalidConfigurationException(sprintf(
                    'Please define one table in the input mapping, found %d tables.',
                    count($inputTables),
                ));
            }

            return $v;
        });

        return $rootNode;
    }

    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        $parametersNode->isRequired();

        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->ignoreExtraKeys(true)
            ->children()
                ->append(new HubNode())
                ->scalarNode('tableId')->cannotBeEmpty()->defaultValue(null)->end()
                ->integerNode('batchSize')->min(1)->defaultValue(self::DEFAULT_BATCH_SITE)->end()
                ->enumNode('mode')
                    ->values([self::MODE_MESSAGE_COLUMN_VALUE, self::MODE_MESSAGE_ROW_AS_JSON])
                    ->defaultValue(self::MODE_MESSAGE_ROW_AS_JSON)
                ->end()
                ->scalarNode('column')->end()
                ->scalarNode('propertiesColumn')->end()
            ->end()
        ;

        // Validation mode
        $parametersNode->validate()->always(function ($v) {
            switch ($v['mode']) {
                case self::MODE_MESSAGE_ROW_AS_JSON:
                    if (!empty($v['column'])) {
                        throw new InvalidConfigurationException(sprintf(
                            'Invalid configuration, "column" is configured, but "mode" is set to "%s".',
                            self::MODE_MESSAGE_ROW_AS_JSON,
                        ));
                    }
                    if (!empty($v['propertiesColumn'])) {
                        throw new InvalidConfigurationException(sprintf(
                            'Invalid configuration, "propertiesColumn" is configured, but "mode" is set to "%s".',
                            self::MODE_MESSAGE_ROW_AS_JSON,
                        ));
                    }
                    break;
                case self::MODE_MESSAGE_COLUMN_VALUE:
                    if (empty($v['column'])) {
                        throw new InvalidConfigurationException(sprintf(
                            'Invalid configuration, missing "column" key, "mode" is set to "%s".',
                            self::MODE_MESSAGE_COLUMN_VALUE,
                        ));
                    }
                    break;
            }

            return $v;
        });

        // @formatter:on
        return $parametersNode;
    }
}


================================================
File: /src/NodeJs/write.js
================================================
'use strict';

const Writer = require('./lib/Writer.js');
const UserError = require('./lib/UserError.js');
const ApplicationError = require('./lib/ApplicationError.js');

async function main() {
  const writer = new Writer();
  await writer.write();
}

main().catch((error) => {
  // User error
  if (error instanceof UserError) {
    console.error(error.message);
    process.exit(1);
  }

  // Application error
  console.error(error instanceof ApplicationError ? error.message : error);
  process.exit(2);
});


================================================
File: /src/NodeJs/testConnection.js
================================================
'use strict';

const Writer = require('./lib/Writer.js');
const UserError = require('./lib/UserError.js');
const ApplicationError = require('./lib/ApplicationError.js');

async function main() {
  const writer = new Writer();
  await writer.testConnection();
}

main().catch((error) => {
  // User error
  if (error instanceof UserError) {
    console.error(error.message);
    process.exit(1);
  }

  // Application error
  console.error(error instanceof ApplicationError ? error.message : error);
  process.exit(2);
});


================================================
File: /src/NodeJs/lib/Writer.js
================================================
'use strict';

const {EventHubProducerClient} = require('@azure/event-hubs');
const {MessagingError} = require('@azure/core-amqp');
const {Transform} = require('stream');
const binarySplit = require('binary-split');
const UserError = require('./UserError.js');
const ApplicationError = require('./ApplicationError.js');
const messageStream = require('./messageStream');

const PROGRESS_OUTPUT_INTERVAL_MS = 30 * 1000; // log progress each 30 seconds

class Writer {
  constructor() {
    // Check environment variables
    ['MESSAGE_DELIMITER', 'CONNECTION_STRING', 'EVENT_HUB_NAME'].forEach((key) => {
      if (!process.env[key]) {
        throw new ApplicationError(`Missing "${key}" environment variable.`);
      }
    });

    this.delimiter = JSON.parse(process.env.MESSAGE_DELIMITER);
    this.connectionString = process.env.CONNECTION_STRING;
    this.eventHubName = process.env.EVENT_HUB_NAME;
    this.progressTimer = null;
    this.producer = null;
    this.batch = null;
    this.batchSendPromise = null;
    this.batchSize = parseInt(process.env.BATCH_SIZE, 10);

    // Stats
    this.messagesQueuedCount = 0;
    this.messagesSendingCount = 0;
    this.messagesSentCount = 0;
    this.batchesSentCount = 0;
  }

  async testConnection() {
    this.producer = await this.createProducerClient();
    await this.producer.close();
  }

  async write() {
    this.startProgressTimer();
    this.producer = await this.createProducerClient();
    await this.writeMessages();
    await this.producer.close();
    this.stopProgressTimer();
    this.logFinalState();
  }

  async writeMessages() {
    const messages = this.getMessages();
    await this.sendBatchAndCreateNew();

    let loadNext = true;
    let message = null;
    while (true) {
      // If the message was not added in the previous step (loadNext = false) => try again.
      message = loadNext ? (await messages.next()).value : message;
      if (!message) {
        // No message left => all done => send batch and wait for it
        await this.sendBatch(true);
        break;
      }

      // Try to add
      const eventData = this.messageToEventData(message);

      const isAdded = this.batch.tryAdd(eventData);

      // Message was not added + batch is empty => message is too large
      if (!isAdded && this.batch.count === 0) {
        throw new UserError(`Message number="${this.messagesQueuedCount + 1}" is too large.`);
      }

      if (isAdded) {
        // Message was added to the batch => continue => load next
        this.messagesQueuedCount += 1;
        loadNext = true;
      } else {
        // Message was not added => batch was full => try again with the new batch
        loadNext = false;
      }

      // Crate the new batch, if:
      // 1. Batch is full (in terms of items count) OR
      // 2. Message was not added + batch is not empty => batch is full (in terms of size)
      if (
        (isAdded && this.batch.count === this.batchSize)
        || (!isAdded && this.batch.count > 0)
      ) {
        await this.sendBatchAndCreateNew();
      }
    }
  }

  messageToEventData(message) {
    let eventData = {
      body: message.message,
    }
    if (message.properties) {
      if (message.properties.correlationId) {
        eventData.correlationId = message.properties.correlationId;
        delete message.properties.correlationId;
      }
      if (message.properties.messageId) {
        eventData.messageId = message.properties.messageId;
        delete message.properties.messageId;
      }
      if (message.properties) {
        eventData.properties = message.properties;
      }
    }
    eventData.contentType = 'application/json'

    return eventData;
  }

  async sendBatchAndCreateNew() {
    // wait = false => non-blocking
    // - Only one batch is sent at a time => We are waiting only for the previous batch.
    // - But we are not waiting for current batch, we are already preparing another one during sending.
    await this.sendBatch(false);
    this.batch = await this.producer.createBatch();
  }

  async sendBatch(wait = false) {
    await this.batchSendPromise; // Wait for the previous batch to be sent
    this.batchSendPromise = this.doSendBatch(); // Send current batch
    if (wait) {
      await this.batchSendPromise;
    }
  }

  async doSendBatch() {
    this.messagesSendingCount = this.messagesQueuedCount;
    this.messagesQueuedCount = 0;

    if (this.batch === null || this.batch.count === 0) {
      // Empty batch => ignore
      return;
    }

    await this.producer.sendBatch(this.batch);
    this.batchesSentCount += 1;
    this.messagesSentCount += this.messagesSendingCount;
    this.messagesSendingCount = 0;
  }

  async* getMessages() {
    const messages = messageStream
      .pipe(binarySplit(this.delimiter))
      .pipe(new Transform({
        objectMode: true,
        transform(json, encoding, callback) {
          callback(null, JSON.parse(json));
        },
      }));

    /* eslint no-restricted-syntax: "off" */
    for await (const message of messages) {
      yield message;
    }
  }

  async createProducerClient() {
    try {
      console.log(`Connecting to the event hub "${this.eventHubName}" ...`);
      const producer = new EventHubProducerClient(this.connectionString, this.eventHubName);
      const properties = await producer.getEventHubProperties();
      console.log(`Connected to the event hub "${properties.name}".`);
      return producer;
    } catch (e) {
      switch (true) {
        case e instanceof TypeError && e.message.includes('doesn\'t match with eventHubName:'):
          throw new UserError(
            'Connection error: The entity path in connection string doesn\'t match with the configured event hub name.'
          );

        case e instanceof TypeError && e.message.includes('AccessKey='):
          // Hide access key from the output
          throw new UserError('Connection error. Please, check connection string.');

        case e instanceof TypeError:
          throw new UserError(
            `Connection error: ${e.message.replace(/\\.\\s*$/, '')}. Please, check connection string.`
          );

        case e instanceof MessagingError:
          throw new UserError(e.message);

        default:
          throw e;
      }
    }
  }

  logFinalState() {
    if (this.messagesSentCount) {
      console.log(
        `Done: Sent "${this.messagesSentCount}" messages / "${this.batchesSentCount}" batches `
        + `to the event hub "${this.eventHubName}".`
      );
    } else {
      console.log('Done: No message was sent.');
    }
  }

  logProgress() {
    console.log(`Progress: Sent "${this.messagesSentCount}" messages / "${this.batchesSentCount}" batches ...`);
  }

  startProgressTimer() {
    this.progressTimer = setInterval(() => this.logProgress(), PROGRESS_OUTPUT_INTERVAL_MS);
  }

  stopProgressTimer() {
    clearInterval(this.progressTimer);
  }
}

module.exports = Writer;


================================================
File: /src/NodeJs/lib/ApplicationError.js
================================================
'use strict';

class ApplicationError extends Error {}
module.exports = ApplicationError;


================================================
File: /src/NodeJs/lib/messageStream.js
================================================
'use strict';

const fs = require('fs');

// We are using separated file descriptor to read JSON documents.
// Number of the custom file descriptor is loaded from ENV (set by PHP), ... fallback is STDIN.
let messageStreamFd;
if (process.env.MESSAGE_STREAM_FD !== undefined) {
  messageStreamFd = parseInt(process.env.MESSAGE_STREAM_FD, 10);
} else {
  console.error('Please, set env variable "MESSAGE_STREAM_FD". Using STDIN as fallback.');
  messageStreamFd = process.stdin.fd;
}
module.exports = fs.createReadStream(null, { fd: messageStreamFd });


================================================
File: /src/NodeJs/lib/UserError.js
================================================
'use strict';

class UserError extends Error {}
module.exports = UserError;


================================================
File: /src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\AzureEventHubWriter\Component;
use Keboola\CommonExceptions\UserExceptionInterface;
use Keboola\Component\Logger;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
try {
    $app = new Component($logger);
    $app->execute();
    exit(0);
} catch (UserExceptionInterface $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (Throwable $e) {
    $logger->critical(
        get_class($e) . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => is_object($e->getPrevious()) ? get_class($e->getPrevious()) : '',
        ],
    );
    exit(2);
}


================================================
File: /src/ProcessWrapper.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter;

use React\ChildProcess\Process;
use React\Promise\ExtendedPromiseInterface;
use React\Promise\PromiseInterface;
use React\Stream\ReadableResourceStream;
use React\Stream\WritableResourceStream;
use UnexpectedValueException;

/**
 * Helper class,
 * wraps Process and process Promise together and adds some shortcut methods.
 */
class ProcessWrapper
{
    private Process $process;

    private ExtendedPromiseInterface $promise;

    public function __construct(Process $process, PromiseInterface $promise)
    {
        if (!$promise instanceof ExtendedPromiseInterface) {
            throw new UnexpectedValueException('Expected ExtendedPromiseInterface.');
        }

        $this->process = $process;
        $this->promise = $promise;
    }

    public function getProcess(): Process
    {
        return $this->process;
    }

    public function getPromise(): ExtendedPromiseInterface
    {
        return $this->promise;
    }

    public function getStdout(): ReadableResourceStream
    {
        /** @var ReadableResourceStream $stdout */
        $stdout = $this->process->stdout;
        return $stdout;
    }

    public function getStderr(): ReadableResourceStream
    {
        /** @var ReadableResourceStream $stderr */
        $stderr = $this->process->stderr;
        return $stderr;
    }

    public function getMessageStream(): WritableResourceStream
    {
        // We use separated file descriptor for JSON documents stream, see ProcessFactory
        /** @var WritableResourceStream $jsonStream */
        $jsonStream = $this->process->pipes[ProcessFactory::MESSAGE_STREAM_FD];
        return $jsonStream;
    }
}


================================================
File: /.env.dist
================================================
CONNECTION_STRING=
EVENT_HUB_NAME=
CONSUMER_GROUP_NAME="$Default"


================================================
File: /composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "e5934d18f9e95f36c3704be40dd16f6f",
    "packages": [
        {
            "name": "evenement/evenement",
            "version": "v3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/igorw/evenement.git",
                "reference": "0a16b0d71ab13284339abb99d9d2bd813640efbc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/igorw/evenement/zipball/0a16b0d71ab13284339abb99d9d2bd813640efbc",
                "reference": "0a16b0d71ab13284339abb99d9d2bd813640efbc",
                "shasum": ""
            },
            "require": {
                "php": ">=7.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9 || ^6"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Evenement\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Igor Wiedler",
                    "email": "igor@wiedler.ch"
                }
            ],
            "description": "Événement is a very simple event dispatching library for PHP",
            "keywords": [
                "event-dispatcher",
                "event-emitter"
            ],
            "support": {
                "issues": "https://github.com/igorw/evenement/issues",
                "source": "https://github.com/igorw/evenement/tree/v3.0.2"
            },
            "time": "2023-08-08T05:53:35+00:00"
        },
        {
            "name": "keboola/common-exceptions",
            "version": "1.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/common-exceptions.git",
                "reference": "35ac327808f0e4157c9de6cbe0bf8536145cb5ac"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/common-exceptions/zipball/35ac327808f0e4157c9de6cbe0bf8536145cb5ac",
                "reference": "35ac327808f0e4157c9de6cbe0bf8536145cb5ac",
                "shasum": ""
            },
            "require": {
                "php": "^7.1|^8.0"
            },
            "require-dev": {
                "keboola/coding-standard": "^13.0",
                "keboola/php-temp": "^1.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpstan": "^0.12.93",
                "phpunit/phpunit": "^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\CommonExceptions\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Common exceptions shared between different applications",
            "support": {
                "source": "https://github.com/keboola/common-exceptions/tree/1.2.1"
            },
            "time": "2022-10-02T21:12:00+00:00"
        },
        {
            "name": "keboola/csv",
            "version": "4.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csv.git",
                "reference": "a7e5828ceea0e2d8561bb07619c73091e6155c36"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csv/zipball/a7e5828ceea0e2d8561bb07619c73091e6155c36",
                "reference": "a7e5828ceea0e2d8561bb07619c73091e6155c36",
                "shasum": ""
            },
            "require": {
                "php": ">=7.4"
            },
            "require-dev": {
                "ext-json": "*",
                "keboola/coding-standard": "^15.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpdoc-parser": "^1.25",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": ">=7.5 <=9.6"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Csv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola CSV reader and writer",
            "homepage": "http://keboola.com",
            "keywords": [
                "csv",
                "rfc4180"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csv/issues",
                "source": "https://github.com/keboola/php-csv/tree/4.1.0"
            },
            "time": "2024-01-11T09:30:47+00:00"
        },
        {
            "name": "keboola/php-component",
            "version": "10.1.6",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-component.git",
                "reference": "3a44d9f852ac098c59f13435167eb4ad17fbbef6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-component/zipball/3a44d9f852ac098c59f13435167eb4ad17fbbef6",
                "reference": "3a44d9f852ac098c59f13435167eb4ad17fbbef6",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/common-exceptions": "^1.2",
                "monolog/monolog": "^2.3",
                "php": ">=8.1",
                "symfony/config": "^5.4|^6.0",
                "symfony/filesystem": "^5.4|^6.0",
                "symfony/finder": "^5.4|^6.0",
                "symfony/property-access": "^5.4|^6.0",
                "symfony/serializer": "^5.4|^6.0"
            },
            "require-dev": {
                "devedge/sami-github": "^1.0",
                "keboola/coding-standard": "^15.0",
                "keboola/php-temp": "^2.0",
                "phpstan/phpstan": "^1.4",
                "phpunit/phpunit": "^9.5"
            },
            "type": "project",
            "autoload": {
                "psr-4": {
                    "Keboola\\Component\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Helper classes for developing Keboola PHP components",
            "keywords": [
                "component",
                "docker",
                "keboola"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-component/issues",
                "source": "https://github.com/keboola/php-component/tree/10.1.6"
            },
            "time": "2024-09-30T08:44:08+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "2.9.3",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "a30bfe2e142720dfa990d0a7e573997f5d884215"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/a30bfe2e142720dfa990d0a7e573997f5d884215",
                "reference": "a30bfe2e142720dfa990d0a7e573997f5d884215",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2",
                "psr/log": "^1.0.1 || ^2.0 || ^3.0"
            },
            "provide": {
                "psr/log-implementation": "1.0.0 || 2.0.0 || 3.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "elasticsearch/elasticsearch": "^7 || ^8",
                "ext-json": "*",
                "graylog2/gelf-php": "^1.4.2 || ^2@dev",
                "guzzlehttp/guzzle": "^7.4",
                "guzzlehttp/psr7": "^2.2",
                "mongodb/mongodb": "^1.8",
                "php-amqplib/php-amqplib": "~2.4 || ^3",
                "phpspec/prophecy": "^1.15",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": "^8.5.38 || ^9.6.19",
                "predis/predis": "^1.1 || ^2.0",
                "rollbar/rollbar": "^1.3 || ^2 || ^3",
                "ruflin/elastica": "^7",
                "swiftmailer/swiftmailer": "^5.3|^6.0",
                "symfony/mailer": "^5.4 || ^6",
                "symfony/mime": "^5.4 || ^6"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-curl": "Required to send log messages using the IFTTTHandler, the LogglyHandler, the SendGridHandler, the SlackWebhookHandler or the TelegramBotHandler",
                "ext-mbstring": "Allow to work properly with unicode symbols",
                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
                "ext-openssl": "Required to send log messages using SSL",
                "ext-sockets": "Allow sending log messages to a Syslog server (via UDP driver)",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "https://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "https://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/monolog/issues",
                "source": "https://github.com/Seldaek/monolog/tree/2.9.3"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/monolog/monolog",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-12T20:52:51+00:00"
        },
        {
            "name": "psr/container",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/container.git",
                "reference": "c71ecc56dfe541dbd90c5360474fbc405f8d5963"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/container/zipball/c71ecc56dfe541dbd90c5360474fbc405f8d5963",
                "reference": "c71ecc56dfe541dbd90c5360474fbc405f8d5963",
                "shasum": ""
            },
            "require": {
                "php": ">=7.4.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Container\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common Container Interface (PHP FIG PSR-11)",
            "homepage": "https://github.com/php-fig/container",
            "keywords": [
                "PSR-11",
                "container",
                "container-interface",
                "container-interop",
                "psr"
            ],
            "support": {
                "issues": "https://github.com/php-fig/container/issues",
                "source": "https://github.com/php-fig/container/tree/2.0.2"
            },
            "time": "2021-11-05T16:47:00+00:00"
        },
        {
            "name": "psr/log",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "f16e1d5863e37f8d8c2a01719f5b34baa2b714d3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/f16e1d5863e37f8d8c2a01719f5b34baa2b714d3",
                "reference": "f16e1d5863e37f8d8c2a01719f5b34baa2b714d3",
                "shasum": ""
            },
            "require": {
                "php": ">=8.0.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "support": {
                "source": "https://github.com/php-fig/log/tree/3.0.2"
            },
            "time": "2024-09-11T13:17:53+00:00"
        },
        {
            "name": "react/child-process",
            "version": "v0.6.5",
            "source": {
                "type": "git",
                "url": "https://github.com/reactphp/child-process.git",
                "reference": "e71eb1aa55f057c7a4a0d08d06b0b0a484bead43"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/reactphp/child-process/zipball/e71eb1aa55f057c7a4a0d08d06b0b0a484bead43",
                "reference": "e71eb1aa55f057c7a4a0d08d06b0b0a484bead43",
                "shasum": ""
            },
            "require": {
                "evenement/evenement": "^3.0 || ^2.0 || ^1.0",
                "php": ">=5.3.0",
                "react/event-loop": "^1.2",
                "react/stream": "^1.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.35",
                "react/socket": "^1.8",
                "sebastian/environment": "^5.0 || ^3.0 || ^2.0 || ^1.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "React\\ChildProcess\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Christian Lück",
                    "email": "christian@clue.engineering",
                    "homepage": "https://clue.engineering/"
                },
                {
                    "name": "Cees-Jan Kiewiet",
                    "email": "reactphp@ceesjankiewiet.nl",
                    "homepage": "https://wyrihaximus.net/"
                },
                {
                    "name": "Jan Sorgalla",
                    "email": "jsorgalla@gmail.com",
                    "homepage": "https://sorgalla.com/"
                },
                {
                    "name": "Chris Boden",
                    "email": "cboden@gmail.com",
                    "homepage": "https://cboden.dev/"
                }
            ],
            "description": "Event-driven library for executing child processes with ReactPHP.",
            "keywords": [
                "event-driven",
                "process",
                "reactphp"
            ],
            "support": {
                "issues": "https://github.com/reactphp/child-process/issues",
                "source": "https://github.com/reactphp/child-process/tree/v0.6.5"
            },
            "funding": [
                {
                    "url": "https://github.com/WyriHaximus",
                    "type": "github"
                },
                {
                    "url": "https://github.com/clue",
                    "type": "github"
                }
            ],
            "time": "2022-09-16T13:41:56+00:00"
        },
        {
            "name": "react/event-loop",
            "version": "v1.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/reactphp/event-loop.git",
                "reference": "bbe0bd8c51ffc05ee43f1729087ed3bdf7d53354"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/reactphp/event-loop/zipball/bbe0bd8c51ffc05ee43f1729087ed3bdf7d53354",
                "reference": "bbe0bd8c51ffc05ee43f1729087ed3bdf7d53354",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.6 || ^5.7 || ^4.8.36"
            },
            "suggest": {
                "ext-pcntl": "For signal handling support when using the StreamSelectLoop"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "React\\EventLoop\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Christian Lück",
                    "email": "christian@clue.engineering",
                    "homepage": "https://clue.engineering/"
                },
                {
                    "name": "Cees-Jan Kiewiet",
                    "email": "reactphp@ceesjankiewiet.nl",
                    "homepage": "https://wyrihaximus.net/"
                },
                {
                    "name": "Jan Sorgalla",
                    "email": "jsorgalla@gmail.com",
                    "homepage": "https://sorgalla.com/"
                },
                {
                    "name": "Chris Boden",
                    "email": "cboden@gmail.com",
                    "homepage": "https://cboden.dev/"
                }
            ],
            "description": "ReactPHP's core reactor event loop that libraries can use for evented I/O.",
            "keywords": [
                "asynchronous",
                "event-loop"
            ],
            "support": {
                "issues": "https://github.com/reactphp/event-loop/issues",
                "source": "https://github.com/reactphp/event-loop/tree/v1.5.0"
            },
            "funding": [
                {
                    "url": "https://opencollective.com/reactphp",
                    "type": "open_collective"
                }
            ],
            "time": "2023-11-13T13:48:05+00:00"
        },
        {
            "name": "react/promise",
            "version": "v2.11.0",
            "source": {
                "type": "git",
                "url": "https://github.com/reactphp/promise.git",
                "reference": "1a8460931ea36dc5c76838fec5734d55c88c6831"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/reactphp/promise/zipball/1a8460931ea36dc5c76838fec5734d55c88c6831",
                "reference": "1a8460931ea36dc5c76838fec5734d55c88c6831",
                "shasum": ""
            },
            "require": {
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.6 || ^5.7 || ^4.8.36"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/functions_include.php"
                ],
                "psr-4": {
                    "React\\Promise\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jan Sorgalla",
                    "email": "jsorgalla@gmail.com",
                    "homepage": "https://sorgalla.com/"
                },
                {
                    "name": "Christian Lück",
                    "email": "christian@clue.engineering",
                    "homepage": "https://clue.engineering/"
                },
                {
                    "name": "Cees-Jan Kiewiet",
                    "email": "reactphp@ceesjankiewiet.nl",
                    "homepage": "https://wyrihaximus.net/"
                },
                {
                    "name": "Chris Boden",
                    "email": "cboden@gmail.com",
                    "homepage": "https://cboden.dev/"
                }
            ],
            "description": "A lightweight implementation of CommonJS Promises/A for PHP",
            "keywords": [
                "promise",
                "promises"
            ],
            "support": {
                "issues": "https://github.com/reactphp/promise/issues",
                "source": "https://github.com/reactphp/promise/tree/v2.11.0"
            },
            "funding": [
                {
                    "url": "https://opencollective.com/reactphp",
                    "type": "open_collective"
                }
            ],
            "time": "2023-11-16T16:16:50+00:00"
        },
        {
            "name": "react/stream",
            "version": "v1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/reactphp/stream.git",
                "reference": "1e5b0acb8fe55143b5b426817155190eb6f5b18d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/reactphp/stream/zipball/1e5b0acb8fe55143b5b426817155190eb6f5b18d",
                "reference": "1e5b0acb8fe55143b5b426817155190eb6f5b18d",
                "shasum": ""
            },
            "require": {
                "evenement/evenement": "^3.0 || ^2.0 || ^1.0",
                "php": ">=5.3.8",
                "react/event-loop": "^1.2"
            },
            "require-dev": {
                "clue/stream-filter": "~1.2",
                "phpunit/phpunit": "^9.6 || ^5.7 || ^4.8.36"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "React\\Stream\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Christian Lück",
                    "email": "christian@clue.engineering",
                    "homepage": "https://clue.engineering/"
                },
                {
                    "name": "Cees-Jan Kiewiet",
                    "email": "reactphp@ceesjankiewiet.nl",
                    "homepage": "https://wyrihaximus.net/"
                },
                {
                    "name": "Jan Sorgalla",
                    "email": "jsorgalla@gmail.com",
                    "homepage": "https://sorgalla.com/"
                },
                {
                    "name": "Chris Boden",
                    "email": "cboden@gmail.com",
                    "homepage": "https://cboden.dev/"
                }
            ],
            "description": "Event-driven readable and writable streams for non-blocking I/O in ReactPHP",
            "keywords": [
                "event-driven",
                "io",
                "non-blocking",
                "pipe",
                "reactphp",
                "readable",
                "stream",
                "writable"
            ],
            "support": {
                "issues": "https://github.com/reactphp/stream/issues",
                "source": "https://github.com/reactphp/stream/tree/v1.4.0"
            },
            "funding": [
                {
                    "url": "https://opencollective.com/reactphp",
                    "type": "open_collective"
                }
            ],
            "time": "2024-06-11T12:45:25+00:00"
        },
        {
            "name": "symfony/config",
            "version": "v6.4.13",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/config.git",
                "reference": "5ed4195a81d2352e0e4ce24e5f7e26fc794e7597"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/config/zipball/5ed4195a81d2352e0e4ce24e5f7e26fc794e7597",
                "reference": "5ed4195a81d2352e0e4ce24e5f7e26fc794e7597",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/deprecation-contracts": "^2.5|^3",
                "symfony/filesystem": "^5.4|^6.0|^7.0",
                "symfony/polyfill-ctype": "~1.8"
            },
            "conflict": {
                "symfony/finder": "<5.4",
                "symfony/service-contracts": "<2.5"
            },
            "require-dev": {
                "symfony/event-dispatcher": "^5.4|^6.0|^7.0",
                "symfony/finder": "^5.4|^6.0|^7.0",
                "symfony/messenger": "^5.4|^6.0|^7.0",
                "symfony/service-contracts": "^2.5|^3",
                "symfony/yaml": "^5.4|^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Config\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Helps you find, load, combine, autofill and validate configuration values of any kind",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/config/tree/v6.4.13"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-10-25T15:07:50+00:00"
        },
        {
            "name": "symfony/deprecation-contracts",
            "version": "v3.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/deprecation-contracts.git",
                "reference": "0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1",
                "reference": "0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.5-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "files": [
                    "function.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "A generic function and convention to trigger deprecation notices",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/deprecation-contracts/tree/v3.5.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-18T09:32:20+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v6.4.13",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "4856c9cf585d5a0313d8d35afd681a526f038dd3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/4856c9cf585d5a0313d8d35afd681a526f038dd3",
                "reference": "4856c9cf585d5a0313d8d35afd681a526f038dd3",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-mbstring": "~1.8"
            },
            "require-dev": {
                "symfony/process": "^5.4|^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides basic utilities for the filesystem",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/filesystem/tree/v6.4.13"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-10-25T15:07:50+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v6.4.13",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "daea9eca0b08d0ed1dc9ab702a46128fd1be4958"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/daea9eca0b08d0ed1dc9ab702a46128fd1be4958",
                "reference": "daea9eca0b08d0ed1dc9ab702a46128fd1be4958",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1"
            },
            "require-dev": {
                "symfony/filesystem": "^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Finds files and directories via an intuitive fluent interface",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/finder/tree/v6.4.13"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-10-01T08:30:56+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "a3cc8b044a6ea513310cbd48ef7333b384945638"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/a3cc8b044a6ea513310cbd48ef7333b384945638",
                "reference": "a3cc8b044a6ea513310cbd48ef7333b384945638",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "provide": {
                "ext-ctype": "*"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/polyfill-intl-grapheme",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-grapheme.git",
                "reference": "b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-grapheme/zipball/b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe",
                "reference": "b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Grapheme\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's grapheme_* functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "grapheme",
                "intl",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-grapheme/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/polyfill-intl-normalizer",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-normalizer.git",
                "reference": "3833d7255cc303546435cb650316bff708a1c75c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/3833d7255cc303546435cb650316bff708a1c75c",
                "reference": "3833d7255cc303546435cb650316bff708a1c75c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Normalizer\\": ""
                },
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's Normalizer class and related functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "intl",
                "normalizer",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-normalizer/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/polyfill-mbstring",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-mbstring.git",
                "reference": "85181ba99b2345b0ef10ce42ecac37612d9fd341"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/85181ba99b2345b0ef10ce42ecac37612d9fd341",
                "reference": "85181ba99b2345b0ef10ce42ecac37612d9fd341",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "provide": {
                "ext-mbstring": "*"
            },
            "suggest": {
                "ext-mbstring": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Mbstring\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for the Mbstring extension",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "mbstring",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/property-access",
            "version": "v6.4.13",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/property-access.git",
                "reference": "8cc779d88d12e440adaa26387bcfc25744064afe"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/property-access/zipball/8cc779d88d12e440adaa26387bcfc25744064afe",
                "reference": "8cc779d88d12e440adaa26387bcfc25744064afe",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/deprecation-contracts": "^2.5|^3",
                "symfony/property-info": "^5.4|^6.0|^7.0"
            },
            "require-dev": {
                "symfony/cache": "^5.4|^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\PropertyAccess\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides functions to read and write from/to an object or array using a simple string notation",
            "homepage": "https://symfony.com",
            "keywords": [
                "access",
                "array",
                "extraction",
                "index",
                "injection",
                "object",
                "property",
                "property-path",
                "reflection"
            ],
            "support": {
                "source": "https://github.com/symfony/property-access/tree/v6.4.13"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-25T14:18:03+00:00"
        },
        {
            "name": "symfony/property-info",
            "version": "v7.1.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/property-info.git",
                "reference": "6b630ff585d9fdc72f50369885ad4364a849cf02"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/property-info/zipball/6b630ff585d9fdc72f50369885ad4364a849cf02",
                "reference": "6b630ff585d9fdc72f50369885ad4364a849cf02",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/string": "^6.4|^7.0",
                "symfony/type-info": "^7.1"
            },
            "conflict": {
                "phpdocumentor/reflection-docblock": "<5.2",
                "phpdocumentor/type-resolver": "<1.5.1",
                "symfony/dependency-injection": "<6.4",
                "symfony/serializer": "<6.4"
            },
            "require-dev": {
                "phpdocumentor/reflection-docblock": "^5.2",
                "phpstan/phpdoc-parser": "^1.0",
                "symfony/cache": "^6.4|^7.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/serializer": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\PropertyInfo\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Kévin Dunglas",
                    "email": "dunglas@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Extracts information about PHP class' properties using metadata of popular sources",
            "homepage": "https://symfony.com",
            "keywords": [
                "doctrine",
                "phpdoc",
                "property",
                "symfony",
                "type",
                "validator"
            ],
            "support": {
                "source": "https://github.com/symfony/property-info/tree/v7.1.6"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-25T14:20:29+00:00"
        },
        {
            "name": "symfony/serializer",
            "version": "v6.4.13",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/serializer.git",
                "reference": "8be421505938b11a0ca4f656e4322232236386f0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/serializer/zipball/8be421505938b11a0ca4f656e4322232236386f0",
                "reference": "8be421505938b11a0ca4f656e4322232236386f0",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/deprecation-contracts": "^2.5|^3",
                "symfony/polyfill-ctype": "~1.8"
            },
            "conflict": {
                "doctrine/annotations": "<1.12",
                "phpdocumentor/reflection-docblock": "<3.2.2",
                "phpdocumentor/type-resolver": "<1.4.0",
                "symfony/dependency-injection": "<5.4",
                "symfony/property-access": "<5.4",
                "symfony/property-info": "<5.4.24|>=6,<6.2.11",
                "symfony/uid": "<5.4",
                "symfony/validator": "<6.4",
                "symfony/yaml": "<5.4"
            },
            "require-dev": {
                "doctrine/annotations": "^1.12|^2",
                "phpdocumentor/reflection-docblock": "^3.2|^4.0|^5.0",
                "seld/jsonlint": "^1.10",
                "symfony/cache": "^5.4|^6.0|^7.0",
                "symfony/config": "^5.4|^6.0|^7.0",
                "symfony/console": "^5.4|^6.0|^7.0",
                "symfony/dependency-injection": "^5.4|^6.0|^7.0",
                "symfony/error-handler": "^5.4|^6.0|^7.0",
                "symfony/filesystem": "^5.4|^6.0|^7.0",
                "symfony/form": "^5.4|^6.0|^7.0",
                "symfony/http-foundation": "^5.4|^6.0|^7.0",
                "symfony/http-kernel": "^5.4|^6.0|^7.0",
                "symfony/messenger": "^5.4|^6.0|^7.0",
                "symfony/mime": "^5.4|^6.0|^7.0",
                "symfony/property-access": "^5.4.26|^6.3|^7.0",
                "symfony/property-info": "^5.4.24|^6.2.11|^7.0",
                "symfony/translation-contracts": "^2.5|^3",
                "symfony/uid": "^5.4|^6.0|^7.0",
                "symfony/validator": "^6.4|^7.0",
                "symfony/var-dumper": "^5.4|^6.0|^7.0",
                "symfony/var-exporter": "^5.4|^6.0|^7.0",
                "symfony/yaml": "^5.4|^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Serializer\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Handles serializing and deserializing data structures, including object graphs, into array structures or other formats like XML and JSON.",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/serializer/tree/v6.4.13"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-10-03T09:58:04+00:00"
        },
        {
            "name": "symfony/string",
            "version": "v7.1.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/string.git",
                "reference": "61b72d66bf96c360a727ae6232df5ac83c71f626"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/string/zipball/61b72d66bf96c360a727ae6232df5ac83c71f626",
                "reference": "61b72d66bf96c360a727ae6232df5ac83c71f626",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-intl-grapheme": "~1.0",
                "symfony/polyfill-intl-normalizer": "~1.0",
                "symfony/polyfill-mbstring": "~1.0"
            },
            "conflict": {
                "symfony/translation-contracts": "<2.5"
            },
            "require-dev": {
                "symfony/emoji": "^7.1",
                "symfony/error-handler": "^6.4|^7.0",
                "symfony/http-client": "^6.4|^7.0",
                "symfony/intl": "^6.4|^7.0",
                "symfony/translation-contracts": "^2.5|^3.0",
                "symfony/var-exporter": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "Resources/functions.php"
                ],
                "psr-4": {
                    "Symfony\\Component\\String\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides an object-oriented API to strings and deals with bytes, UTF-8 code points and grapheme clusters in a unified way",
            "homepage": "https://symfony.com",
            "keywords": [
                "grapheme",
                "i18n",
                "string",
                "unicode",
                "utf-8",
                "utf8"
            ],
            "support": {
                "source": "https://github.com/symfony/string/tree/v7.1.6"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-25T14:20:29+00:00"
        },
        {
            "name": "symfony/type-info",
            "version": "v7.1.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/type-info.git",
                "reference": "a13032128c307470955c45c99201349b15cd7f4a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/type-info/zipball/a13032128c307470955c45c99201349b15cd7f4a",
                "reference": "a13032128c307470955c45c99201349b15cd7f4a",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "psr/container": "^1.1|^2.0"
            },
            "conflict": {
                "phpstan/phpdoc-parser": "<1.0",
                "symfony/dependency-injection": "<6.4",
                "symfony/property-info": "<6.4"
            },
            "require-dev": {
                "phpstan/phpdoc-parser": "^1.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/property-info": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\TypeInfo\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mathias Arlaud",
                    "email": "mathias.arlaud@gmail.com"
                },
                {
                    "name": "Baptiste LEDUC",
                    "email": "baptiste.leduc@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Extracts PHP types information.",
            "homepage": "https://symfony.com",
            "keywords": [
                "PHPStan",
                "phpdoc",
                "symfony",
                "type"
            ],
            "support": {
                "source": "https://github.com/symfony/type-info/tree/v7.1.6"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-25T14:20:29+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "dealerdirect/phpcodesniffer-composer-installer",
            "version": "v1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/PHPCSStandards/composer-installer.git",
                "reference": "4be43904336affa5c2f70744a348312336afd0da"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/PHPCSStandards/composer-installer/zipball/4be43904336affa5c2f70744a348312336afd0da",
                "reference": "4be43904336affa5c2f70744a348312336afd0da",
                "shasum": ""
            },
            "require": {
                "composer-plugin-api": "^1.0 || ^2.0",
                "php": ">=5.4",
                "squizlabs/php_codesniffer": "^2.0 || ^3.1.0 || ^4.0"
            },
            "require-dev": {
                "composer/composer": "*",
                "ext-json": "*",
                "ext-zip": "*",
                "php-parallel-lint/php-parallel-lint": "^1.3.1",
                "phpcompatibility/php-compatibility": "^9.0",
                "yoast/phpunit-polyfills": "^1.0"
            },
            "type": "composer-plugin",
            "extra": {
                "class": "PHPCSStandards\\Composer\\Plugin\\Installers\\PHPCodeSniffer\\Plugin"
            },
            "autoload": {
                "psr-4": {
                    "PHPCSStandards\\Composer\\Plugin\\Installers\\PHPCodeSniffer\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Franck Nijhof",
                    "email": "franck.nijhof@dealerdirect.com",
                    "homepage": "http://www.frenck.nl",
                    "role": "Developer / IT Manager"
                },
                {
                    "name": "Contributors",
                    "homepage": "https://github.com/PHPCSStandards/composer-installer/graphs/contributors"
                }
            ],
            "description": "PHP_CodeSniffer Standards Composer Installer Plugin",
            "homepage": "http://www.dealerdirect.com",
            "keywords": [
                "PHPCodeSniffer",
                "PHP_CodeSniffer",
                "code quality",
                "codesniffer",
                "composer",
                "installer",
                "phpcbf",
                "phpcs",
                "plugin",
                "qa",
                "quality",
                "standard",
                "standards",
                "style guide",
                "stylecheck",
                "tests"
            ],
            "support": {
                "issues": "https://github.com/PHPCSStandards/composer-installer/issues",
                "source": "https://github.com/PHPCSStandards/composer-installer"
            },
            "time": "2023-01-05T11:28:13+00:00"
        },
        {
            "name": "doctrine/instantiator",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/instantiator.git",
                "reference": "c6222283fa3f4ac679f8b9ced9a4e23f163e80d0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/c6222283fa3f4ac679f8b9ced9a4e23f163e80d0",
                "reference": "c6222283fa3f4ac679f8b9ced9a4e23f163e80d0",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "require-dev": {
                "doctrine/coding-standard": "^11",
                "ext-pdo": "*",
                "ext-phar": "*",
                "phpbench/phpbench": "^1.2",
                "phpstan/phpstan": "^1.9.4",
                "phpstan/phpstan-phpunit": "^1.3",
                "phpunit/phpunit": "^9.5.27",
                "vimeo/psalm": "^5.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com",
                    "homepage": "https://ocramius.github.io/"
                }
            ],
            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
            "keywords": [
                "constructor",
                "instantiate"
            ],
            "support": {
                "issues": "https://github.com/doctrine/instantiator/issues",
                "source": "https://github.com/doctrine/instantiator/tree/2.0.0"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator",
                    "type": "tidelift"
                }
            ],
            "time": "2022-12-30T00:23:10+00:00"
        },
        {
            "name": "keboola/coding-standard",
            "version": "15.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "39ae7c3d14776105d574c7c3636e76b72482916a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/39ae7c3d14776105d574c7c3636e76b72482916a",
                "reference": "39ae7c3d14776105d574c7c3636e76b72482916a",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "^8",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "support": {
                "issues": "https://github.com/keboola/phpcs-standard/issues",
                "source": "https://github.com/keboola/phpcs-standard/tree/15.0.1"
            },
            "time": "2023-12-11T08:31:50+00:00"
        },
        {
            "name": "keboola/datadir-tests",
            "version": "5.6.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/datadir-tests.git",
                "reference": "d43f7657806d660f2326d8c438dd800d7ccc1e3d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/datadir-tests/zipball/d43f7657806d660f2326d8c438dd800d7ccc1e3d",
                "reference": "d43f7657806d660f2326d8c438dd800d7ccc1e3d",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/php-temp": "^2.0",
                "php": "^7.4|^8.0",
                "phpunit/phpunit": "^9.5",
                "symfony/filesystem": "^5.0|^6.0",
                "symfony/finder": "^5.0|^6.0",
                "symfony/process": "^5.0|^6.0"
            },
            "require-dev": {
                "keboola/coding-standard": "^13.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpstan": "^1.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DatadirTests\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Tool for functional testing of Keboola Connection components",
            "support": {
                "issues": "https://github.com/keboola/datadir-tests/issues",
                "source": "https://github.com/keboola/datadir-tests/tree/5.6.0"
            },
            "time": "2023-10-20T08:02:53+00:00"
        },
        {
            "name": "keboola/php-temp",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/filesystem": ">2.8"
            },
            "require-dev": {
                "infection/infection": "^0.12",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^8.0",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0|^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Temp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Temp library handles application temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-temp/issues",
                "source": "https://github.com/keboola/php-temp/tree/2.0.1"
            },
            "time": "2019-04-26T07:18:24+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.12.0",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c",
                "reference": "3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "conflict": {
                "doctrine/collections": "<1.6.8",
                "doctrine/common": "<2.13.3 || >=3 <3.2.2"
            },
            "require-dev": {
                "doctrine/collections": "^1.6.8",
                "doctrine/common": "^2.13.3 || ^3.2.2",
                "phpspec/prophecy": "^1.10",
                "phpunit/phpunit": "^7.5.20 || ^8.5.23 || ^9.5.13"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ],
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "support": {
                "issues": "https://github.com/myclabs/DeepCopy/issues",
                "source": "https://github.com/myclabs/DeepCopy/tree/1.12.0"
            },
            "funding": [
                {
                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-12T14:39:25+00:00"
        },
        {
            "name": "nikic/php-parser",
            "version": "v5.3.1",
            "source": {
                "type": "git",
                "url": "https://github.com/nikic/PHP-Parser.git",
                "reference": "8eea230464783aa9671db8eea6f8c6ac5285794b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/8eea230464783aa9671db8eea6f8c6ac5285794b",
                "reference": "8eea230464783aa9671db8eea6f8c6ac5285794b",
                "shasum": ""
            },
            "require": {
                "ext-ctype": "*",
                "ext-json": "*",
                "ext-tokenizer": "*",
                "php": ">=7.4"
            },
            "require-dev": {
                "ircmaxell/php-yacc": "^0.0.7",
                "phpunit/phpunit": "^9.0"
            },
            "bin": [
                "bin/php-parse"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpParser\\": "lib/PhpParser"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Nikita Popov"
                }
            ],
            "description": "A PHP parser written in PHP",
            "keywords": [
                "parser",
                "php"
            ],
            "support": {
                "issues": "https://github.com/nikic/PHP-Parser/issues",
                "source": "https://github.com/nikic/PHP-Parser/tree/v5.3.1"
            },
            "time": "2024-10-08T18:51:32+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "54750ef60c58e43759730615a392c31c80e23176"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/54750ef60c58e43759730615a392c31c80e23176",
                "reference": "54750ef60c58e43759730615a392c31c80e23176",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-phar": "*",
                "ext-xmlwriter": "*",
                "phar-io/version": "^3.0.1",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "support": {
                "issues": "https://github.com/phar-io/manifest/issues",
                "source": "https://github.com/phar-io/manifest/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2024-03-03T12:33:53+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "3.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "4f7fd7836c6f332bb2933569e566a0d6c4cbed74"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/4f7fd7836c6f332bb2933569e566a0d6c4cbed74",
                "reference": "4f7fd7836c6f332bb2933569e566a0d6c4cbed74",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "support": {
                "issues": "https://github.com/phar-io/version/issues",
                "source": "https://github.com/phar-io/version/tree/3.2.1"
            },
            "time": "2022-02-21T01:04:05+00:00"
        },
        {
            "name": "php-parallel-lint/php-parallel-lint",
            "version": "v1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-parallel-lint/PHP-Parallel-Lint.git",
                "reference": "6db563514f27e19595a19f45a4bf757b6401194e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-parallel-lint/PHP-Parallel-Lint/zipball/6db563514f27e19595a19f45a4bf757b6401194e",
                "reference": "6db563514f27e19595a19f45a4bf757b6401194e",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "php": ">=5.3.0"
            },
            "replace": {
                "grogy/php-parallel-lint": "*",
                "jakub-onderka/php-parallel-lint": "*"
            },
            "require-dev": {
                "nette/tester": "^1.3 || ^2.0",
                "php-parallel-lint/php-console-highlighter": "0.* || ^1.0",
                "squizlabs/php_codesniffer": "^3.6"
            },
            "suggest": {
                "php-parallel-lint/php-console-highlighter": "Highlight syntax in code snippet"
            },
            "bin": [
                "parallel-lint"
            ],
            "type": "library",
            "autoload": {
                "classmap": [
                    "./src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Jakub Onderka",
                    "email": "ahoj@jakubonderka.cz"
                }
            ],
            "description": "This tool checks the syntax of PHP files about 20x faster than serial check.",
            "homepage": "https://github.com/php-parallel-lint/PHP-Parallel-Lint",
            "keywords": [
                "lint",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/issues",
                "source": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/tree/v1.4.0"
            },
            "time": "2024-03-27T12:14:49+00:00"
        },
        {
            "name": "phpstan/phpdoc-parser",
            "version": "1.33.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpdoc-parser.git",
                "reference": "82a311fd3690fb2bf7b64d5c98f912b3dd746140"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpdoc-parser/zipball/82a311fd3690fb2bf7b64d5c98f912b3dd746140",
                "reference": "82a311fd3690fb2bf7b64d5c98f912b3dd746140",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "require-dev": {
                "doctrine/annotations": "^2.0",
                "nikic/php-parser": "^4.15",
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpstan/extension-installer": "^1.0",
                "phpstan/phpstan": "^1.5",
                "phpstan/phpstan-phpunit": "^1.1",
                "phpstan/phpstan-strict-rules": "^1.0",
                "phpunit/phpunit": "^9.5",
                "symfony/process": "^5.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "PHPStan\\PhpDocParser\\": [
                        "src/"
                    ]
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPDoc parser with support for nullable, intersection and generic types",
            "support": {
                "issues": "https://github.com/phpstan/phpdoc-parser/issues",
                "source": "https://github.com/phpstan/phpdoc-parser/tree/1.33.0"
            },
            "time": "2024-10-13T11:25:22+00:00"
        },
        {
            "name": "phpstan/phpstan",
            "version": "1.12.7",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan.git",
                "reference": "dc2b9976bd8b0f84ec9b0e50cc35378551de7af0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan/zipball/dc2b9976bd8b0f84ec9b0e50cc35378551de7af0",
                "reference": "dc2b9976bd8b0f84ec9b0e50cc35378551de7af0",
                "shasum": ""
            },
            "require": {
                "php": "^7.2|^8.0"
            },
            "conflict": {
                "phpstan/phpstan-shim": "*"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan - PHP Static Analysis Tool",
            "keywords": [
                "dev",
                "static analysis"
            ],
            "support": {
                "docs": "https://phpstan.org/user-guide/getting-started",
                "forum": "https://github.com/phpstan/phpstan/discussions",
                "issues": "https://github.com/phpstan/phpstan/issues",
                "security": "https://github.com/phpstan/phpstan/security/policy",
                "source": "https://github.com/phpstan/phpstan-src"
            },
            "funding": [
                {
                    "url": "https://github.com/ondrejmirtes",
                    "type": "github"
                },
                {
                    "url": "https://github.com/phpstan",
                    "type": "github"
                }
            ],
            "time": "2024-10-18T11:12:07+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "9.2.32",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "85402a822d1ecf1db1096959413d35e1c37cf1a5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/85402a822d1ecf1db1096959413d35e1c37cf1a5",
                "reference": "85402a822d1ecf1db1096959413d35e1c37cf1a5",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-xmlwriter": "*",
                "nikic/php-parser": "^4.19.1 || ^5.1.0",
                "php": ">=7.3",
                "phpunit/php-file-iterator": "^3.0.6",
                "phpunit/php-text-template": "^2.0.4",
                "sebastian/code-unit-reverse-lookup": "^2.0.3",
                "sebastian/complexity": "^2.0.3",
                "sebastian/environment": "^5.1.5",
                "sebastian/lines-of-code": "^1.0.4",
                "sebastian/version": "^3.0.2",
                "theseer/tokenizer": "^1.2.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.6"
            },
            "suggest": {
                "ext-pcov": "PHP extension that provides line coverage",
                "ext-xdebug": "PHP extension that provides line coverage as well as branch and path coverage"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "9.2.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                "security": "https://github.com/sebastianbergmann/php-code-coverage/security/policy",
                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.32"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-08-22T04:23:01+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "3.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf",
                "reference": "cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2021-12-02T12:48:52+00:00"
        },
        {
            "name": "phpunit/php-invoker",
            "version": "3.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-invoker.git",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "ext-pcntl": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcntl": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Invoke callables with a timeout",
            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
            "keywords": [
                "process"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
                "source": "https://github.com/sebastianbergmann/php-invoker/tree/3.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:58:55+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
                "source": "https://github.com/sebastianbergmann/php-text-template/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T05:33:50+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "5.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-timer/issues",
                "source": "https://github.com/sebastianbergmann/php-timer/tree/5.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:16:10+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "9.6.21",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "de6abf3b6f8dd955fac3caad3af7a9504e8c2ffa"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/de6abf3b6f8dd955fac3caad3af7a9504e8c2ffa",
                "reference": "de6abf3b6f8dd955fac3caad3af7a9504e8c2ffa",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.5.0 || ^2",
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "ext-xmlwriter": "*",
                "myclabs/deep-copy": "^1.12.0",
                "phar-io/manifest": "^2.0.4",
                "phar-io/version": "^3.2.1",
                "php": ">=7.3",
                "phpunit/php-code-coverage": "^9.2.32",
                "phpunit/php-file-iterator": "^3.0.6",
                "phpunit/php-invoker": "^3.1.1",
                "phpunit/php-text-template": "^2.0.4",
                "phpunit/php-timer": "^5.0.3",
                "sebastian/cli-parser": "^1.0.2",
                "sebastian/code-unit": "^1.0.8",
                "sebastian/comparator": "^4.0.8",
                "sebastian/diff": "^4.0.6",
                "sebastian/environment": "^5.1.5",
                "sebastian/exporter": "^4.0.6",
                "sebastian/global-state": "^5.0.7",
                "sebastian/object-enumerator": "^4.0.4",
                "sebastian/resource-operations": "^3.0.4",
                "sebastian/type": "^3.2.1",
                "sebastian/version": "^3.0.2"
            },
            "suggest": {
                "ext-soap": "To be able to generate mocks based on WSDL files",
                "ext-xdebug": "PHP extension that provides line coverage as well as branch and path coverage"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.6-dev"
                }
            },
            "autoload": {
                "files": [
                    "src/Framework/Assert/Functions.php"
                ],
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                "security": "https://github.com/sebastianbergmann/phpunit/security/policy",
                "source": "https://github.com/sebastianbergmann/phpunit/tree/9.6.21"
            },
            "funding": [
                {
                    "url": "https://phpunit.de/sponsors.html",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpunit/phpunit",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-19T10:50:18+00:00"
        },
        {
            "name": "sebastian/cli-parser",
            "version": "1.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/cli-parser.git",
                "reference": "2b56bea83a09de3ac06bb18b92f068e60cc6f50b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/2b56bea83a09de3ac06bb18b92f068e60cc6f50b",
                "reference": "2b56bea83a09de3ac06bb18b92f068e60cc6f50b",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for parsing CLI options",
            "homepage": "https://github.com/sebastianbergmann/cli-parser",
            "support": {
                "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
                "source": "https://github.com/sebastianbergmann/cli-parser/tree/1.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:27:43+00:00"
        },
        {
            "name": "sebastian/code-unit",
            "version": "1.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit.git",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the PHP code units",
            "homepage": "https://github.com/sebastianbergmann/code-unit",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit/issues",
                "source": "https://github.com/sebastianbergmann/code-unit/tree/1.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:08:54+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:30:19+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "4.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "fa0f136dd2334583309d32b62544682ee972b51a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/fa0f136dd2334583309d32b62544682ee972b51a",
                "reference": "fa0f136dd2334583309d32b62544682ee972b51a",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/diff": "^4.0",
                "sebastian/exporter": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/comparator/issues",
                "source": "https://github.com/sebastianbergmann/comparator/tree/4.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2022-09-14T12:41:17+00:00"
        },
        {
            "name": "sebastian/complexity",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/complexity.git",
                "reference": "25f207c40d62b8b7aa32f5ab026c53561964053a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/25f207c40d62b8b7aa32f5ab026c53561964053a",
                "reference": "25f207c40d62b8b7aa32f5ab026c53561964053a",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.18 || ^5.0",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for calculating the complexity of PHP code units",
            "homepage": "https://github.com/sebastianbergmann/complexity",
            "support": {
                "issues": "https://github.com/sebastianbergmann/complexity/issues",
                "source": "https://github.com/sebastianbergmann/complexity/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-12-22T06:19:30+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "ba01945089c3a293b01ba9badc29ad55b106b0bc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/ba01945089c3a293b01ba9badc29ad55b106b0bc",
                "reference": "ba01945089c3a293b01ba9badc29ad55b106b0bc",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3",
                "symfony/process": "^4.2 || ^5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/diff/issues",
                "source": "https://github.com/sebastianbergmann/diff/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:30:58+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "5.1.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "830c43a844f1f8d5b7a1f6d6076b784454d8b7ed"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/830c43a844f1f8d5b7a1f6d6076b784454d8b7ed",
                "reference": "830c43a844f1f8d5b7a1f6d6076b784454d8b7ed",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-posix": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "http://www.github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/environment/issues",
                "source": "https://github.com/sebastianbergmann/environment/tree/5.1.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-02-03T06:03:51+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "78c00df8f170e02473b682df15bfcdacc3d32d72"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/78c00df8f170e02473b682df15bfcdacc3d32d72",
                "reference": "78c00df8f170e02473b682df15bfcdacc3d32d72",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-mbstring": "*",
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "https://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/exporter/issues",
                "source": "https://github.com/sebastianbergmann/exporter/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:33:00+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "5.0.7",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9",
                "reference": "bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-dom": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-uopz": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "http://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/global-state/issues",
                "source": "https://github.com/sebastianbergmann/global-state/tree/5.0.7"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:35:11+00:00"
        },
        {
            "name": "sebastian/lines-of-code",
            "version": "1.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/lines-of-code.git",
                "reference": "e1e4a170560925c26d424b6a03aed157e7dcc5c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/e1e4a170560925c26d424b6a03aed157e7dcc5c5",
                "reference": "e1e4a170560925c26d424b6a03aed157e7dcc5c5",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.18 || ^5.0",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for counting the lines of code in PHP source code",
            "homepage": "https://github.com/sebastianbergmann/lines-of-code",
            "support": {
                "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/1.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-12-22T06:20:34+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:12:34+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
                "source": "https://github.com/sebastianbergmann/object-reflector/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:14:26+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "4.0.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1",
                "reference": "e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "https://github.com/sebastianbergmann/recursion-context",
            "support": {
                "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
                "source": "https://github.com/sebastianbergmann/recursion-context/tree/4.0.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-02-03T06:07:39+00:00"
        },
        {
            "name": "sebastian/resource-operations",
            "version": "3.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/resource-operations.git",
                "reference": "05d5692a7993ecccd56a03e40cd7e5b09b1d404e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/05d5692a7993ecccd56a03e40cd7e5b09b1d404e",
                "reference": "05d5692a7993ecccd56a03e40cd7e5b09b1d404e",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides a list of PHP built-in functions that operate on resources",
            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
            "support": {
                "source": "https://github.com/sebastianbergmann/resource-operations/tree/3.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-14T16:00:52+00:00"
        },
        {
            "name": "sebastian/type",
            "version": "3.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/type.git",
                "reference": "75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7",
                "reference": "75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the types of the PHP type system",
            "homepage": "https://github.com/sebastianbergmann/type",
            "support": {
                "issues": "https://github.com/sebastianbergmann/type/issues",
                "source": "https://github.com/sebastianbergmann/type/tree/3.2.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-02-03T06:13:03+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "c6c1022351a901512170118436c764e473f6de8c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c",
                "reference": "c6c1022351a901512170118436c764e473f6de8c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "support": {
                "issues": "https://github.com/sebastianbergmann/version/issues",
                "source": "https://github.com/sebastianbergmann/version/tree/3.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:39:44+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "8.15.0",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "7d1d957421618a3803b593ec31ace470177d7817"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/7d1d957421618a3803b593ec31ace470177d7817",
                "reference": "7d1d957421618a3803b593ec31ace470177d7817",
                "shasum": ""
            },
            "require": {
                "dealerdirect/phpcodesniffer-composer-installer": "^0.6.2 || ^0.7 || ^1.0",
                "php": "^7.2 || ^8.0",
                "phpstan/phpdoc-parser": "^1.23.1",
                "squizlabs/php_codesniffer": "^3.9.0"
            },
            "require-dev": {
                "phing/phing": "2.17.4",
                "php-parallel-lint/php-parallel-lint": "1.3.2",
                "phpstan/phpstan": "1.10.60",
                "phpstan/phpstan-deprecation-rules": "1.1.4",
                "phpstan/phpstan-phpunit": "1.3.16",
                "phpstan/phpstan-strict-rules": "1.5.2",
                "phpunit/phpunit": "8.5.21|9.6.8|10.5.11"
            },
            "type": "phpcodesniffer-standard",
            "extra": {
                "branch-alias": {
                    "dev-master": "8.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "keywords": [
                "dev",
                "phpcs"
            ],
            "support": {
                "issues": "https://github.com/slevomat/coding-standard/issues",
                "source": "https://github.com/slevomat/coding-standard/tree/8.15.0"
            },
            "funding": [
                {
                    "url": "https://github.com/kukulich",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/slevomat/coding-standard",
                    "type": "tidelift"
                }
            ],
            "time": "2024-03-09T15:20:58+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.10.3",
            "source": {
                "type": "git",
                "url": "https://github.com/PHPCSStandards/PHP_CodeSniffer.git",
                "reference": "62d32998e820bddc40f99f8251958aed187a5c9c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/PHPCSStandards/PHP_CodeSniffer/zipball/62d32998e820bddc40f99f8251958aed187a5c9c",
                "reference": "62d32998e820bddc40f99f8251958aed187a5c9c",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0 || ^8.0 || ^9.3.4"
            },
            "bin": [
                "bin/phpcbf",
                "bin/phpcs"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "Former lead"
                },
                {
                    "name": "Juliette Reinders Folmer",
                    "role": "Current lead"
                },
                {
                    "name": "Contributors",
                    "homepage": "https://github.com/PHPCSStandards/PHP_CodeSniffer/graphs/contributors"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "https://github.com/PHPCSStandards/PHP_CodeSniffer",
            "keywords": [
                "phpcs",
                "standards",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/PHPCSStandards/PHP_CodeSniffer/issues",
                "security": "https://github.com/PHPCSStandards/PHP_CodeSniffer/security/policy",
                "source": "https://github.com/PHPCSStandards/PHP_CodeSniffer",
                "wiki": "https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki"
            },
            "funding": [
                {
                    "url": "https://github.com/PHPCSStandards",
                    "type": "github"
                },
                {
                    "url": "https://github.com/jrfnl",
                    "type": "github"
                },
                {
                    "url": "https://opencollective.com/php_codesniffer",
                    "type": "open_collective"
                }
            ],
            "time": "2024-09-18T10:38:58+00:00"
        },
        {
            "name": "symfony/polyfill-php80",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php80.git",
                "reference": "60328e362d4c2c802a54fcbf04f9d3fb892b4cf8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/60328e362d4c2c802a54fcbf04f9d3fb892b4cf8",
                "reference": "60328e362d4c2c802a54fcbf04f9d3fb892b4cf8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Php80\\": ""
                },
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ion Bazan",
                    "email": "ion.bazan@gmail.com"
                },
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php80/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v5.4.45",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "95f3f19d0f8f06e4253c66a0828ddb69f8b8ede4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/95f3f19d0f8f06e4253c66a0828ddb69f8b8ede4",
                "reference": "95f3f19d0f8f06e4253c66a0828ddb69f8b8ede4",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-php80": "^1.16"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Executes commands in sub-processes",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/process/tree/v5.4.45"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-25T14:11:13+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.2.3",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2",
                "reference": "737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "support": {
                "issues": "https://github.com/theseer/tokenizer/issues",
                "source": "https://github.com/theseer/tokenizer/tree/1.2.3"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2024-03-03T12:36:25+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": {},
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": "^8.2",
        "ext-json": "*"
    },
    "platform-dev": {},
    "plugin-api-version": "2.6.0"
}


================================================
File: /phpstan.neon
================================================
parameters:
    ignoreErrors:
        - identifier: missingType.iterableValue
        - '#Cannot call method .* React\\Stream\\ReadableStreamInterface\|.*#'
        - '#Cannot call method .* on Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface\|null.#'
        - '#Parameter \#1 \$json of function json_decode expects string, mixed given.#'


================================================
File: /tests/phpunit/ConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Tests;

use Keboola\AzureEventHubWriter\Configuration\Config;
use Keboola\AzureEventHubWriter\Configuration\ConfigDefinition;
use PHPUnit\Framework\Assert;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigTest extends AbstractTestCase
{
    /**
     * @dataProvider getValidConfigs
     */
    public function testValidConfig(array $configArray, array $expected): void
    {
        $config = new Config($configArray, new ConfigDefinition());
        Assert::assertSame($expected, $this->configToArray($config));
    }

    /**
     * @dataProvider getInvalidConfigs
     */
    public function testInvalidConfig(string $expectedMsg, array $configArray): void
    {
        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage($expectedMsg);
        new Config($configArray, new ConfigDefinition());
    }

    public function testMissingConnectionString(): void
    {
        $configArray = [
            'parameters' => [
                'hub' => [
                    'eventHubName' => $this->getHubNode()['eventHubName'],
                ],
                'tableId' => 'in.c-ex-generic-test.data',
            ],
        ];
        $config = new Config($configArray, new ConfigDefinition());

        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage(
            'The child node "#connectionString" at path "root.parameters.hub" must be configured.',
        );
        $config->getConnectionString();
    }

    public function getValidConfigs(): iterable
    {
        yield 'minimal' => [
            [
                'parameters' => [
                    'hub' => $this->getHubNode(),
                    'tableId' => 'in.c-ex-generic-test.data',
                ],
            ],
            [
                'connectionString' => 'Endpoint=sb://abc.servicebus.windows.net;SharedAccessKeyName=def',
                'eventHubName' => 'my-event-hub',
                'tableId' => 'in.c-ex-generic-test.data',
                'batchSize' => ConfigDefinition::DEFAULT_BATCH_SITE,
                'mode' => ConfigDefinition::MODE_MESSAGE_ROW_AS_JSON,
                'column' => null,
            ],
        ];

        yield 'batch-size' => [
            [
                'parameters' => [
                    'hub' => $this->getHubNode(),
                    'tableId' => 'in.c-ex-generic-test.data',
                    'batchSize' => 123,
                ],
            ],
            [
                'connectionString' => 'Endpoint=sb://abc.servicebus.windows.net;SharedAccessKeyName=def',
                'eventHubName' => 'my-event-hub',
                'tableId' => 'in.c-ex-generic-test.data',
                'batchSize' => 123,
                'mode' => ConfigDefinition::MODE_MESSAGE_ROW_AS_JSON,
                'column' => null,
            ],
        ];

        yield 'table-id-from-input-mapping' => [
            [
                'storage' => [
                    'input' => [
                        'tables' => [
                            [
                                'source' => 'in.c-ex-generic-test.data',
                                'destination' => 'data.csv',
                            ],
                        ],
                    ],
                ],
                'parameters' => [
                    'hub' => $this->getHubNode(),
                ],
            ],
            [
                'connectionString' => 'Endpoint=sb://abc.servicebus.windows.net;SharedAccessKeyName=def',
                'eventHubName' => 'my-event-hub',
                'tableId' => 'in.c-ex-generic-test.data',
                'batchSize' => ConfigDefinition::DEFAULT_BATCH_SITE,
                'mode' => ConfigDefinition::MODE_MESSAGE_ROW_AS_JSON,
                'column' => null,
            ],
        ];

        yield 'full' => [
            [
                'parameters' => [
                    'hub' => $this->getHubNode(),
                    'tableId' => 'in.c-ex-generic-test.data',
                    'mode' => ConfigDefinition::MODE_MESSAGE_COLUMN_VALUE,
                    'column' => 'foo',
                ],
            ],
            [
                'connectionString' => 'Endpoint=sb://abc.servicebus.windows.net;SharedAccessKeyName=def',
                'eventHubName' => 'my-event-hub',
                'tableId' => 'in.c-ex-generic-test.data',
                'batchSize' => ConfigDefinition::DEFAULT_BATCH_SITE,
                'mode' => ConfigDefinition::MODE_MESSAGE_COLUMN_VALUE,
                'column' => 'foo',
            ],
        ];

        yield 'connection-string-in-parameters' => [
            [
                'parameters' => [
                    'hub' => $this->getHubNode(),
                    'tableId' => 'in.c-ex-generic-test.data',
                ],
            ],
            [
                'connectionString' => 'Endpoint=sb://abc.servicebus.windows.net;SharedAccessKeyName=def',
                'eventHubName' => 'my-event-hub',
                'tableId' => 'in.c-ex-generic-test.data',
                'batchSize' => ConfigDefinition::DEFAULT_BATCH_SITE,
                'mode' => ConfigDefinition::MODE_MESSAGE_ROW_AS_JSON,
                'column' => null,
            ],
        ];

        yield 'connection-string-in-image-parameters' => [
            [
                'parameters' => [
                    'hub' => [
                        'eventHubName' => $this->getHubNode()['eventHubName'],
                    ],
                    'tableId' => 'in.c-ex-generic-test.data',
                ],
                'image_parameters' => [
                    'global_config' => [
                        'hub' => [
                            '#connectionString' => $this->getHubNode()['#connectionString'],
                        ],
                    ],
                ],
            ],
            [
                'connectionString' => 'Endpoint=sb://abc.servicebus.windows.net;SharedAccessKeyName=def',
                'eventHubName' => 'my-event-hub',
                'tableId' => 'in.c-ex-generic-test.data',
                'batchSize' => ConfigDefinition::DEFAULT_BATCH_SITE,
                'mode' => ConfigDefinition::MODE_MESSAGE_ROW_AS_JSON,
                'column' => null,
            ],
        ];

        yield 'connection-string-in-both' => [
            [
                'parameters' => [
                    'hub' => $this->getHubNode(),
                    'tableId' => 'in.c-ex-generic-test.data',
                ],
                'image_parameters' => [
                    'global_config' => [
                        'hub' => [
                            '#connectionString' =>
                                'Endpoint=sb://abc.servicebus.windows.net;SharedAccessKeyName=fromImg',
                        ],
                    ],
                ],
            ],
            [
                'connectionString' => 'Endpoint=sb://abc.servicebus.windows.net;SharedAccessKeyName=fromImg',
                'eventHubName' => 'my-event-hub',
                'tableId' => 'in.c-ex-generic-test.data',
                'batchSize' => ConfigDefinition::DEFAULT_BATCH_SITE,
                'mode' => ConfigDefinition::MODE_MESSAGE_ROW_AS_JSON,
                'column' => null,
            ],
        ];
    }

    public function getInvalidConfigs(): iterable
    {
        yield 'empty' => [
            'The child config "hub" under "root.parameters" must be configured.',
            [
                'parameters' => [],
            ],
        ];

        yield 'empty-hub' => [
            'The child config "eventHubName" under "root.parameters.hub" must be configured.',
            [
                'parameters' => [
                    'hub' => [],
                ],
            ],
        ];

        yield 'table-id-missing' => [
            'Please define one table in the input mapping, found 0 tables.',
            [
                'parameters' => [
                    'hub' => $this->getHubNode(),
                ],
            ],
        ];

        yield 'multiple-input-tables' => [
            'Please define one table in the input mapping, found 2 tables.',
            [
                'storage' => [
                    'input' => [
                        'tables' => [
                            [
                                'source' => 'a',
                                'destination' => 'a.csv',
                            ],
                            [
                                'source' => 'b',
                                'destination' => 'b.csv',
                            ],
                        ],
                    ],
                ],
                'parameters' => [
                    'hub' => $this->getHubNode(),
                ],
            ],
        ];

        yield 'column-missing' => [
            'Invalid configuration, missing "column" key, "mode" is set to "column_value".',
            [
                'parameters' => [
                    'hub' => $this->getHubNode(),
                    'tableId' => 'in.c-ex-generic-test.data',
                    'mode' => ConfigDefinition::MODE_MESSAGE_COLUMN_VALUE,
                ],
            ],
        ];

        yield 'column-unexpected' => [
            'Invalid configuration, "column" is configured, but "mode" is set to "row_as_json".',
            [
                'parameters' => [
                    'hub' => $this->getHubNode(),
                    'tableId' => 'in.c-ex-generic-test.data',
                    'mode' => ConfigDefinition::MODE_MESSAGE_ROW_AS_JSON,
                    'column' => 'foo',
                ],
            ],
        ];
    }


    private function configToArray(Config $config): array
    {
        return [
            'connectionString' => $config->getConnectionString(),
            'eventHubName' => $config->getEventHubName(),
            'tableId' => $config->getTableId(),
            'batchSize' => $config->getBatchSize(),
            'mode' => $config->getMode(),
            'column' => $config->hasColumn() ? $config->getColumn() : null,
        ];
    }

    private function getHubNode(): array
    {
        return [
            '#connectionString' => 'Endpoint=sb://abc.servicebus.windows.net;SharedAccessKeyName=def',
            'eventHubName' => 'my-event-hub',
        ];
    }
}


================================================
File: /tests/phpunit/fixtures/process-factory/stdoutAndStderr.js
================================================
console.log('stdout1');
console.log('stdout2');
console.error("stderr1");
console.log('stdout3');
console.log('stdout4');
console.error("stderr2");

================================================
File: /tests/phpunit/fixtures/process-factory/exitCode.js
================================================
console.log('stdout1');
console.log('stdout2');
console.error("stderr1");
console.log('stdout3');
console.log('stdout4');
console.error("stderr2");

process.exit(123);


================================================
File: /tests/phpunit/AbstractTestCase.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Tests;

use Keboola\AzureEventHubWriter\ProcessFactory;
use Keboola\AzureEventHubWriter\ProcessWrapper;
use Monolog\Handler\TestHandler;
use Monolog\Logger;
use PHPUnit\Framework\TestCase;
use React\EventLoop\Loop;
use React\EventLoop\LoopInterface;

abstract class AbstractTestCase extends TestCase
{
    protected Logger $logger;
    protected TestHandler $loggerTestHandler;
    protected LoopInterface $loop;
    protected ProcessFactory $processFactory;

    protected function setUp(): void
    {
        parent::setUp();
        $this->loggerTestHandler = new TestHandler();
        $this->logger = new Logger('test', [$this->loggerTestHandler]);
        $this->loop = Loop::get();
        $this->processFactory = new ProcessFactory($this->logger, $this->loop);
    }

    protected function createScriptProcess(string $script): ProcessWrapper
    {
        return $this->processFactory->create(sprintf('node %s/fixtures/%s', __DIR__, $script));
    }
}


================================================
File: /tests/phpunit/MessageWriterTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Tests;

use Keboola\AzureEventHubWriter\MessageWriter;
use PHPUnit\Framework\Assert;
use React\Stream\ThroughStream;

class MessageWriterTest extends AbstractTestCase
{
    /**
     * @dataProvider getData
     */
    public function testMessageWriter(mixed $input, string $expectedOutput): void
    {
        $output = '';
        $stream = new ThroughStream();
        $stream->on('data', function (string $data) use (&$output): void {
            $output .= $data;
        });
        $messageWriter = new MessageWriter($stream);
        $messageWriter->writeMessage($input);
        Assert::assertSame($expectedOutput, $output);
    }

    public function getData(): iterable
    {
        yield 'string' => [
            'test " string',
            '"test \" string"' . MessageWriter::DELIMITER,
        ];

        yield 'array' => [
            ['a', 'b', 'c'],
            '["a","b","c"]' . MessageWriter::DELIMITER,
        ];

        yield 'object' => [
            ['a' => 'a1', 'b' => 'b1', 'c' => 'c1'],
            '{"a":"a1","b":"b1","c":"c1"}' . MessageWriter::DELIMITER,
        ];
    }
}


================================================
File: /tests/phpunit/ProcessFactoryTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\Tests;

use Keboola\AzureEventHubWriter\Exception\ProcessException;
use PHPUnit\Framework\Assert;

class ProcessFactoryTest extends AbstractTestCase
{
    public function testSuccessfulProcess(): void
    {
        $process = $this->createScriptProcess('process-factory/stdoutAndStderr.js');
        $process->getPromise()->done(); // ensures exception if the process fails
        $this->loop->run();

        Assert::assertTrue($this->loggerTestHandler->hasInfoThatContains('stdout1'));
        Assert::assertTrue($this->loggerTestHandler->hasInfoThatContains('stdout2'));
        Assert::assertTrue($this->loggerTestHandler->hasInfoThatContains('stdout3'));
        Assert::assertTrue($this->loggerTestHandler->hasInfoThatContains('stdout4'));
        Assert::assertTrue($this->loggerTestHandler->hasWarningThatContains('stderr1'));
        Assert::assertTrue($this->loggerTestHandler->hasWarningThatContains('stderr2'));
        Assert::assertTrue($this->loggerTestHandler->hasDebugThatMatches('~Process ".*" completed successfully.~'));
    }

    public function testFailedProcess(): void
    {
        $process = $this->createScriptProcess('process-factory/exitCode.js');
        $process->getPromise()->done(); // ensures exception if the process fails

        try {
            $this->loop->run();
            Assert::fail('Exception expected.');
        } catch (ProcessException $e) {
            Assert::assertSame(ProcessException::class, get_class($e));
            Assert::assertStringMatchesFormat('Process "%a/exitCode.js" exited with code "123".', $e->getMessage());
        }

        Assert::assertTrue($this->loggerTestHandler->hasWarningThatContains('stderr1'));
        Assert::assertTrue($this->loggerTestHandler->hasWarningThatContains('stderr2'));
        Assert::assertFalse($this->loggerTestHandler->hasDebugThatMatches('~Process ".*" completed successfully.~'));
    }
}


================================================
File: /tests/phpunit/bootstrap.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/../../vendor/autoload.php';


================================================
File: /tests/functional/test-connection-connection-string-img-parameters/expected-stdout
================================================
{"success":true}


================================================
File: /tests/functional/test-connection-connection-string-img-parameters/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "hub": {
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    }
  },
  "image_parameters": {
    "global_config": {
      "hub": {
        "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%"
      }
    }
  }
}


================================================
File: /tests/functional/test-connection-ok/expected-stdout
================================================
{"success":true}


================================================
File: /tests/functional/test-connection-ok/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    }
  }
}


================================================
File: /tests/functional/error-hub-name-not-match/expected-stderr
================================================
Connection error: The entity path in connection string doesn't match with the configured event hub name.


================================================
File: /tests/functional/error-hub-name-not-match/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_BAD_ENTITY_PATH)%",
      "eventHubName": "bad-hub-name"
    }
  }
}


================================================
File: /tests/functional/error-hub-name-not-match/expected-code
================================================
1


================================================
File: /tests/functional/write-find-input-table/expected-stdout
================================================
Exporting table "in.c-test.data" in "column_value" mode ...
Connecting to the event hub "test" ...
Connected to the event hub "test".
Done: Sent "5" messages / "1" batches to the event hub "test".
Exported all 5 rows from the table "in.c-test.data".


================================================
File: /tests/functional/write-find-input-table/expected/data/out/hub_messages_dump.txt
================================================
Message 001, content: {"data":"Erika Harrell"}
Message 002, content: {"data":"Nahla Nunez"}
Message 003, content: {"data":"Jaeden Escobar"}
Message 004, content: {"data":"Zane Craft"}
Message 005, content: {"data":"Sebastien Mora"}


================================================
File: /tests/functional/write-find-input-table/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "in.c-test.data",
          "destination": "data.csv"
        }
      ]
    }
  },
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    },
    "mode": "column_value",
    "column": "name"
  }
}


================================================
File: /tests/functional/write-find-input-table/source/data/in/tables/data.csv
================================================
"id","name","age"
"1","Erika Harrell","18"
"2","Nahla Nunez","20"
"3","Jaeden Escobar","14"
"4","Zane Craft","13"
"5","Sebastien Mora","32"


================================================
File: /tests/functional/write-find-input-table/source/data/in/tables/data.csv.manifest
================================================
{
    "id": "in.c-test.data",
    "columns": [
        "id",
        "name",
        "age"
    ]
}


================================================
File: /tests/functional/write-column-value-mode-no-rows/expected-stdout
================================================
Exporting table "in.c-test.data" in "column_value" mode ...
Connecting to the event hub "test" ...
Connected to the event hub "test".
Done: No message was sent.
Exported all 0 rows from the table "in.c-test.data".


================================================
File: /tests/functional/write-column-value-mode-no-rows/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "in.c-test.data",
          "destination": "data.csv"
        }
      ]
    }
  },
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    },
    "tableId": "in.c-test.data",
    "mode": "column_value",
    "column": "name"
  }
}


================================================
File: /tests/functional/write-column-value-mode-no-rows/source/data/in/tables/data.csv
================================================
"id","name","age"


================================================
File: /tests/functional/write-column-value-mode-no-rows/source/data/in/tables/data.csv.manifest
================================================
{
    "id": "in.c-test.data",
    "columns": [
        "id",
        "name",
        "age"
    ]
}


================================================
File: /tests/functional/batch-size-10/expected-stdout
================================================
Exporting table "in.c-test.data" in "row_as_json" mode ...
Connecting to the event hub "test" ...
Connected to the event hub "test".
Done: Sent "5" messages / "1" batches to the event hub "test".
Exported all 5 rows from the table "in.c-test.data".


================================================
File: /tests/functional/batch-size-10/expected/data/out/hub_messages_dump.txt
================================================
Message 001, content: {"id":"1","name":"Erika Harrell","age":"18"}
Message 002, content: {"id":"2","name":"Nahla Nunez","age":"20"}
Message 003, content: {"id":"3","name":"Jaeden Escobar","age":"14"}
Message 004, content: {"id":"4","name":"Zane Craft","age":"13"}
Message 005, content: {"id":"5","name":"Sebastien Mora","age":"32"}


================================================
File: /tests/functional/batch-size-10/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "in.c-test.data",
          "destination": "data.csv"
        }
      ]
    }
  },
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    },
    "tableId": "in.c-test.data",
    "batchSize": 10
  }
}


================================================
File: /tests/functional/batch-size-10/source/data/in/tables/data.csv
================================================
"id","name","age"
"1","Erika Harrell","18"
"2","Nahla Nunez","20"
"3","Jaeden Escobar","14"
"4","Zane Craft","13"
"5","Sebastien Mora","32"


================================================
File: /tests/functional/batch-size-10/source/data/in/tables/data.csv.manifest
================================================
{
    "id": "in.c-test.data",
    "columns": [
        "id",
        "name",
        "age"
    ]
}


================================================
File: /tests/functional/error-bad-connection-string-2/expected-stderr
================================================
%Agetaddrinfo ENOTFOUND abc-invalid.servicebus.windows.net%A


================================================
File: /tests/functional/error-bad-connection-string-2/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "hub": {
      "#connectionString": "Endpoint=sb://abc-invalid.servicebus.windows.net/;SharedAccessKeyName=abc;SharedAccessKey=def;",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    }
  }
}


================================================
File: /tests/functional/error-bad-connection-string-2/expected-code
================================================
1


================================================
File: /tests/functional/write-column-value-mode-json-properties/expected-stdout
================================================
Exporting table "in.c-test.data" in "column_value" mode ...
Connecting to the event hub "test" ...
Connected to the event hub "test".
Done: Sent "5" messages / "1" batches to the event hub "test".
Exported all 5 rows from the table "in.c-test.data".


================================================
File: /tests/functional/write-column-value-mode-json-properties/expected/data/out/hub_messages_dump.txt
================================================
Message 001, content: {"foo1":"bar1"}, correlationId: 1, messageId: 1, properties: {"otherProperty":"something"}
Message 002, content: {"foo2":"bar2"}, correlationId: 2, messageId: 2, properties: {"otherProperty":"something2"}
Message 003, content: {"foo3":"bar3"}, correlationId: 3, messageId: 3, properties: {"otherProperty":"something3"}
Message 004, content: {"foo4":"bar4"}, correlationId: text, properties: {"otherProperty":"something2"}
Message 005, content: {"foo5":"bar5"}, properties: {"otherProperty":"something5"}


================================================
File: /tests/functional/write-column-value-mode-json-properties/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "in.c-test.data",
          "destination": "data.csv"
        }
      ]
    }
  },
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    },
    "tableId": "in.c-test.data",
    "mode": "column_value",
    "column": "json",
    "propertiesColumn": "properties"
  }
}


================================================
File: /tests/functional/write-column-value-mode-json-properties/source/data/in/tables/data.csv
================================================
"properties","json"
"{""correlationId"":""1"", ""messageId"":""1"", ""otherProperty"":""something""}","{""foo1"": ""bar1""}"
"{""correlationId"":""2"",  ""messageId"":""2"", ""otherProperty"":""something2""}","{""foo2"": ""bar2""}"
"{""correlationId"":""3"",  ""messageId"":""3"", ""otherProperty"":""something3""}","{""foo3"": ""bar3""}"
"{""correlationId"":""text"", ""otherProperty"":""something2""}","{""foo4"": ""bar4""}"
"{""otherProperty"":""something5""}","{""foo5"": ""bar5""}"


================================================
File: /tests/functional/write-column-value-mode-json-properties/source/data/in/tables/data.csv.manifest
================================================
{
    "id": "in.c-test.data",
    "columns": [
        "properties",
        "json"
    ]
}


================================================
File: /tests/functional/write-row-as-json-mode-no-rows/expected-stdout
================================================
Exporting table "in.c-test.data" in "row_as_json" mode ...
Connecting to the event hub "test" ...
Connected to the event hub "test".
Done: No message was sent.
Exported all 0 rows from the table "in.c-test.data".


================================================
File: /tests/functional/write-row-as-json-mode-no-rows/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "in.c-test.data",
          "destination": "data.csv"
        }
      ]
    }
  },
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    },
    "tableId": "in.c-test.data"
  }
}


================================================
File: /tests/functional/write-row-as-json-mode-no-rows/source/data/in/tables/data.csv
================================================
"id","name","age"


================================================
File: /tests/functional/write-row-as-json-mode-no-rows/source/data/in/tables/data.csv.manifest
================================================
{
    "id": "in.c-test.data",
    "columns": [
        "id",
        "name",
        "age"
    ]
}


================================================
File: /tests/functional/write-column-value-mode-json/expected-stdout
================================================
Exporting table "in.c-test.data" in "column_value" mode ...
Connecting to the event hub "test" ...
Connected to the event hub "test".
Done: Sent "3" messages / "1" batches to the event hub "test".
Exported all 3 rows from the table "in.c-test.data".


================================================
File: /tests/functional/write-column-value-mode-json/expected/data/out/hub_messages_dump.txt
================================================
Message 001, content: {"foo1":"bar1"}
Message 002, content: {"foo2":"bar2"}
Message 003, content: {"data":"scalar"}


================================================
File: /tests/functional/write-column-value-mode-json/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "in.c-test.data",
          "destination": "data.csv"
        }
      ]
    }
  },
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    },
    "tableId": "in.c-test.data",
    "mode": "column_value",
    "column": "json"
  }
}


================================================
File: /tests/functional/write-column-value-mode-json/source/data/in/tables/data.csv
================================================
"id","json"
"1","{""foo1"": ""bar1""}"
"1","{""foo2"": ""bar2""}"
"3","scalar"


================================================
File: /tests/functional/write-column-value-mode-json/source/data/in/tables/data.csv.manifest
================================================
{
    "id": "in.c-test.data",
    "columns": [
        "id",
        "name",
        "age"
    ]
}


================================================
File: /tests/functional/hubConsumer.js
================================================
const {EventHubConsumerClient, latestEventPosition} = require("@azure/event-hubs");

const connectionString = process.env["CONNECTION_STRING"];
const eventHubName = process.env["EVENT_HUB_NAME"];
const consumerGroup = process.env["CONSUMER_GROUP_NAME"];

let consumerClient;
let subscription;

async function main() {
  let messageCount = 0;
  consumerClient = new EventHubConsumerClient(consumerGroup, connectionString, eventHubName);
  subscription = consumerClient.subscribe(
    {
      processInitialize: async (context) => {
        console.error(`Subscribed partition=${context.partitionId}.`)
      },
      processEvents: async (events, context) => {
        for (const event of events) {
          const number = (messageCount + 1).toString().padStart(3, '0');
          let message = `Message ${number}, content: ${JSON.stringify(event.body)}`;
          if (event.correlationId) {
            message += `, correlationId: ${event.correlationId}`;
          }
          if (event.messageId) {
            message += `, messageId: ${event.messageId}`;
          }
          if (event.properties) {
            message += `, properties: ${JSON.stringify(event.properties)}`;
          }
          console.log(message);
          messageCount++;
        }
      },
      processError: async (err, context) => {
        console.error(`Error on partition "${context.partitionId}": ${err}`);
        process.exit(1);
      }
    },
    {startPosition: latestEventPosition}
  );

  // Log to STDERR, so STDOUT contains only messages.
  console.error(`Listening for the messages from the event hub "${eventHubName}"/"${consumerGroup}".`);

  // Graceful exit
  process.on('SIGINT', () => onExit());
  process.on('SIGTERM', () => onExit());
}

async function onExit() {
  await subscription.close();
  await consumerClient.close();
  console.error(`Disconnected.`);
  process.exit(0);
}

main().catch((error) => {
  console.error("Error:", error);
});


================================================
File: /tests/functional/write-column-value-mode-properties-error/expected-stdout
================================================
Exporting table "in.c-test.data" in "column_value" mode ...


================================================
File: /tests/functional/write-column-value-mode-properties-error/expected-stderr
================================================
Error decoding JSON in properties column "properties".


================================================
File: /tests/functional/write-column-value-mode-properties-error/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "in.c-test.data",
          "destination": "data.csv"
        }
      ]
    }
  },
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    },
    "tableId": "in.c-test.data",
    "mode": "column_value",
    "column": "json",
    "propertiesColumn": "properties"
  }
}


================================================
File: /tests/functional/write-column-value-mode-properties-error/source/data/in/tables/data.csv
================================================
"id","json","properties"
"1","{""foo1"": ""bar1""}","not a json"
"2","{""foo2"": ""bar2""}","{""bad"":""json"" ""syntax"" = ""2"",""otherProperty"":""something2""}"


================================================
File: /tests/functional/write-column-value-mode-properties-error/source/data/in/tables/data.csv.manifest
================================================
{
    "id": "in.c-test.data",
    "columns": [
        "id",
        "name",
        "age"
    ]
}


================================================
File: /tests/functional/write-column-value-mode-properties-error/expected-code
================================================
1


================================================
File: /tests/functional/write-column-value-mode/expected-stdout
================================================
Exporting table "in.c-test.data" in "column_value" mode ...
Connecting to the event hub "test" ...
Connected to the event hub "test".
Done: Sent "5" messages / "1" batches to the event hub "test".
Exported all 5 rows from the table "in.c-test.data".


================================================
File: /tests/functional/write-column-value-mode/expected/data/out/hub_messages_dump.txt
================================================
Message 001, content: {"data":"Erika Harrell"}
Message 002, content: {"data":"Nahla Nunez"}
Message 003, content: {"data":"Jaeden Escobar"}
Message 004, content: {"data":"Zane Craft"}
Message 005, content: {"data":"Sebastien Mora"}


================================================
File: /tests/functional/write-column-value-mode/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "in.c-test.data",
          "destination": "data.csv"
        }
      ]
    }
  },
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    },
    "tableId": "in.c-test.data",
    "mode": "column_value",
    "column": "name"
  }
}


================================================
File: /tests/functional/write-column-value-mode/source/data/in/tables/data.csv
================================================
"id","name","age"
"1","Erika Harrell","18"
"2","Nahla Nunez","20"
"3","Jaeden Escobar","14"
"4","Zane Craft","13"
"5","Sebastien Mora","32"


================================================
File: /tests/functional/write-column-value-mode/source/data/in/tables/data.csv.manifest
================================================
{
    "id": "in.c-test.data",
    "columns": [
        "id",
        "name",
        "age"
    ]
}


================================================
File: /tests/functional/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureEventHubWriter\FunctionalTests;

use Keboola\DatadirTests\DatadirTestCase;
use Keboola\DatadirTests\DatadirTestSpecificationInterface;
use RuntimeException;
use Symfony\Component\Process\Process;

class DatadirTest extends DatadirTestCase
{
    private Process $consumerProcess;

    protected function setUp(): void
    {
        parent::setUp();

        // Remove EntityPath (alias "event hub name") from connection string if preset.
        // It is optional, and we want to test if is bad EntityPath specified.
        $connectionString = (string) getenv('CONNECTION_STRING');
        $connectionString = (string) preg_replace('~EntityPath=[^=;]+~', '', $connectionString);
        putenv("CONNECTION_STRING_NORMALIZED={$connectionString}");
        putenv("CONNECTION_STRING_BAD_ENTITY_PATH={$connectionString};EntityPath=test");
    }

    /**
     * @dataProvider provideDatadirSpecifications
     */
    public function testDatadir(DatadirTestSpecificationInterface $specification): void
    {
        $tempDir = $this->getTempDatadir($specification)->getTmpFolder();

        if ($specification->getExpectedReturnCode() === 0) {
            // Consume new event hub messages and dump them to file.
            $this->startCollectingEventHubMessages();
            $testProcess = $this->runScript($tempDir);
            $this->stopCollectionEventHubMessages($tempDir, $specification);
        } else {
            $testProcess = $this->runScript($tempDir);
        }

        $this->assertMatchesSpecification($specification, $testProcess, $tempDir);
    }

    protected function startCollectingEventHubMessages(): void
    {
        $scriptPath = __DIR__ . '/hubConsumer.js';
        $this->consumerProcess = new Process(['node', $scriptPath]);
        $this->consumerProcess->setTimeout(100.0);
        $this->consumerProcess->start();
        sleep(5);
    }

    protected function stopCollectionEventHubMessages(
        string $tempDir,
        DatadirTestSpecificationInterface $specification,
    ): void {
        // Let's wait for the messages to be delivered.
        sleep(5);

        // Check if consumer process is running
        if (!$this->consumerProcess->isRunning()) {
            throw new RuntimeException(sprintf(
                'Consumer helper process failed, STDERR=%s, STDOUT=%s',
                $this->consumerProcess->getErrorOutput(),
                $this->consumerProcess->getOutput(),
            ));
        }

        // Stop process
        $this->consumerProcess->signal(15); // TERM signal
        $this->consumerProcess->wait();
        sleep(2);

        // Dump messages if file exists in expected out
        $messages = trim($this->consumerProcess->getOutput());
        if ($messages && file_exists($specification->getExpectedOutDirectory() . '/hub_messages_dump.txt')) {
            $path = $tempDir . '/out/hub_messages_dump.txt';
            file_put_contents($path, $messages . "\n");
        }
    }
}


================================================
File: /tests/functional/error-bad-connection-string/expected-stderr
================================================
Connection error: Missing 'sharedAccessKeyName' in configuration. Please, check connection string.


================================================
File: /tests/functional/error-bad-connection-string/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "hub": {
      "#connectionString": "Endpoint=google.com;",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    }
  }
}


================================================
File: /tests/functional/error-bad-connection-string/expected-code
================================================
1


================================================
File: /tests/functional/empty-config/expected-stderr
================================================
%AThe child config "parameters" under "root" must be configured.%A


================================================
File: /tests/functional/empty-config/source/data/config.json
================================================
{
}


================================================
File: /tests/functional/empty-config/expected-code
================================================
1


================================================
File: /tests/functional/error-bad-event-hub-name/expected-stderr
================================================
%AThe messaging entity 'sb://%A/bad-hub-name/%A' could not be found.%A


================================================
File: /tests/functional/error-bad-event-hub-name/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "bad-hub-name"
    }
  }
}


================================================
File: /tests/functional/error-bad-event-hub-name/expected-code
================================================
1


================================================
File: /tests/functional/write-row-as-json-mode/expected-stdout
================================================
Exporting table "in.c-test.data" in "row_as_json" mode ...
Connecting to the event hub "test" ...
Connected to the event hub "test".
Done: Sent "5" messages / "1" batches to the event hub "test".
Exported all 5 rows from the table "in.c-test.data".


================================================
File: /tests/functional/write-row-as-json-mode/expected/data/out/hub_messages_dump.txt
================================================
Message 001, content: {"id":"1","name":"Erika Harrell","age":"18"}
Message 002, content: {"id":"2","name":"Nahla Nunez","age":"20"}
Message 003, content: {"id":"3","name":"Jaeden Escobar","age":"14"}
Message 004, content: {"id":"4","name":"Zane Craft","age":"13"}
Message 005, content: {"id":"5","name":"Sebastien Mora","age":"32"}


================================================
File: /tests/functional/write-row-as-json-mode/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "in.c-test.data",
          "destination": "data.csv"
        }
      ]
    }
  },
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    },
    "tableId": "in.c-test.data"
  }
}


================================================
File: /tests/functional/write-row-as-json-mode/source/data/in/tables/data.csv
================================================
"id","name","age"
"1","Erika Harrell","18"
"2","Nahla Nunez","20"
"3","Jaeden Escobar","14"
"4","Zane Craft","13"
"5","Sebastien Mora","32"


================================================
File: /tests/functional/write-row-as-json-mode/source/data/in/tables/data.csv.manifest
================================================
{
    "id": "in.c-test.data",
    "columns": [
        "id",
        "name",
        "age"
    ]
}


================================================
File: /tests/functional/write-column-value-mode-properties/expected-stdout
================================================
Exporting table "in.c-test.data" in "column_value" mode ...
Connecting to the event hub "test" ...
Connected to the event hub "test".
Done: Sent "4" messages / "1" batches to the event hub "test".
Exported all 4 rows from the table "in.c-test.data".


================================================
File: /tests/functional/write-column-value-mode-properties/expected/data/out/hub_messages_dump.txt
================================================
Message 001, content: {"data":"Just a text"}, correlationId: 1, messageId: 1, properties: {"otherProperty":"something"}
Message 002, content: {"data":"Not in a JSON format"}, correlationId: 2, messageId: 2, properties: {"otherProperty":"something2"}
Message 003, content: {"data":"Plain vanilla text"}, correlationId: 3, messageId: 2, properties: {"otherProperty":"something2"}
Message 004, content: {"data":"Will be prefixed with data"}, properties: {"otherProperty":"something2"}


================================================
File: /tests/functional/write-column-value-mode-properties/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "in.c-test.data",
          "destination": "data.csv"
        }
      ]
    }
  },
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    },
    "tableId": "in.c-test.data",
    "mode": "column_value",
    "column": "text",
    "propertiesColumn": "properties"
  }
}


================================================
File: /tests/functional/write-column-value-mode-properties/source/data/in/tables/data.csv
================================================
"id","text","properties"
"1","Just a text","{""correlationId"":""1"", ""messageId"":""1"",""otherProperty"":""something""}"
"2","Not in a JSON format","{""correlationId"":""2"", ""messageId"":""2"",""otherProperty"":""something2""}"
"3","Plain vanilla text","{""correlationId"":""3"", ""messageId"":""2"",""otherProperty"":""something2""}"
"4","Will be prefixed with data","{""otherProperty"":""something2""}"


================================================
File: /tests/functional/write-column-value-mode-properties/source/data/in/tables/data.csv.manifest
================================================
{
    "id": "in.c-test.data",
    "columns": [
        "id",
        "name",
        "age"
    ]
}


================================================
File: /tests/functional/batch-size-1/expected-stdout
================================================
Exporting table "in.c-test.data" in "row_as_json" mode ...
Connecting to the event hub "test" ...
Connected to the event hub "test".
Done: Sent "5" messages / "5" batches to the event hub "test".
Exported all 5 rows from the table "in.c-test.data".


================================================
File: /tests/functional/batch-size-1/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "in.c-test.data",
          "destination": "data.csv"
        }
      ]
    }
  },
  "parameters": {
    "hub": {
      "#connectionString": "%env(string:CONNECTION_STRING_NORMALIZED)%",
      "eventHubName": "%env(string:EVENT_HUB_NAME)%"
    },
    "tableId": "in.c-test.data",
    "batchSize": 1
  }
}


================================================
File: /tests/functional/batch-size-1/source/data/in/tables/data.csv
================================================
"id","name","age"
"1","Erika Harrell","18"
"2","Nahla Nunez","20"
"3","Jaeden Escobar","14"
"4","Zane Craft","13"
"5","Sebastien Mora","32"


================================================
File: /tests/functional/batch-size-1/source/data/in/tables/data.csv.manifest
================================================
{
    "id": "in.c-test.data",
    "columns": [
        "id",
        "name",
        "age"
    ]
}


================================================
File: /phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         bootstrap="tests/phpunit/bootstrap.php">
    <testsuite name="Main Test Suite">
        <directory>tests/phpunit</directory>
    </testsuite>
</phpunit>


================================================
File: /eslint.config.mjs
================================================
import _import from "eslint-plugin-import";
import { fixupPluginRules } from "@eslint/compat";
import globals from "globals";
import path from "node:path";
import { fileURLToPath } from "node:url";
import js from "@eslint/js";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
    baseDirectory: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all
});

export default {
    plugins: {
        import: fixupPluginRules(_import),
    },

    languageOptions: {
        globals: {
            ...globals.node,
        },
    },

    rules: {
        "no-console": "off",
        "no-constant-condition": "off",
        "no-await-in-loop": "off",
    },
    ignores: ["node_modules"],
};


================================================
File: /.github/workflows/push.yml
================================================
name: GitHub Actions
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # Test image, must be same in the docker-compose.yml if used
  APP_IMAGE: keboola/wr-azure-event-hub
  # Developer portal login
  KBC_DEVELOPERPORTAL_VENDOR: "keboola"
  KBC_DEVELOPERPORTAL_APP: "keboola.wr-azure-event-hub"
  KBC_DEVELOPERPORTAL_USERNAME: "keboola+github_actions_wr_azure_event_hub"
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
  # DockerHub login
  DOCKERHUB_USER: "keboolabot"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  # Test KBC project
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }}
  KBC_TEST_PROJECT_URL: "https://connection.keboola.com/admin/projects/2703/dashboard"
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list
  # Secrets
  CONNECTION_STRING: ${{ secrets.CONNECTION_STRING }}
  EVENT_HUB_NAME: ${{ secrets.EVENT_HUB_NAME }}
  CONSUMER_GROUP_NAME: ${{ secrets.CONSUMER_GROUP_NAME }}
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Print Docker version
        run: |
          docker -v
      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"
      - name: Build image
        run: docker build -t $APP_IMAGE .
      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ steps.tag.outputs.app_image_tag }}
          push_latest: ${{ steps.tag.outputs.is_semantic_tag }}
          source_image: ${{ env.APP_IMAGE}}

  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.APP_IMAGE}}
          tag_as_latest: true
      - name: Run tests
        run: |
          docker compose run --rm app composer ci

  tests-in-kbc:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Run KBC test jobs
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ env.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    needs:
      - build
      - tests
      - tests-in-kbc
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.build.outputs.is_semantic_tag == 'true'
    steps:
      - name: Set tag in the Deloper Portal
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}


================================================
File: /composer.json
================================================
{
    "name": "keboola/wr-azure-event-hub",
    "description": "Azure Event Hub Writer",
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "ext-json": "*",
        "keboola/csv": "^4.1",
        "keboola/php-component": "^10.1.6",
        "react/child-process": "^0.6.1",
        "react/event-loop": "^1.1",
        "react/promise": "^2.8"
    },
    "require-dev": {
        "php-parallel-lint/php-parallel-lint": "^1.2",
        "keboola/coding-standard": ">=7.0.2",
        "keboola/datadir-tests": "^5.6",
        "keboola/php-temp": "^2.0",
        "phpstan/phpstan": "^1.12",
        "phpunit/phpunit": "^9.0",
        "symfony/process": "^5.0"
    },
    "autoload": {
        "psr-4": {
            "Keboola\\AzureEventHubWriter\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Keboola\\AzureEventHubWriter\\Tests\\": "tests/phpunit/",
            "Keboola\\AzureEventHubWriter\\FunctionalTests\\": "tests/functional/"
        }
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests-datadir": "phpunit tests/functional",
        "tests": [
            "@tests-phpunit",
            "@tests-datadir"
        ],

        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor,node_modules --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "eslint": "./node_modules/.bin/eslint --color src",
        "eslint-fix": "./node_modules/.bin/eslint --fix --color src",
        "build": [
            "@phplint",
            "@phpcs",
            "@phpstan",
            "@eslint",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true,
        "allow-plugins": {
            "dealerdirect/phpcodesniffer-composer-installer": true
        }
    }
}


================================================
File: /package.json
================================================
{
  "name": "keboola-wr-azure-event-hub",
  "version": "1.0.0",
  "dependencies": {
    "@azure/event-hubs": "^5.3.1",
    "@eslint/compat": "^1.2.2",
    "@eslint/eslintrc": "^3.1.0",
    "@eslint/js": "^9.13.0",
    "binary-split": "^1.0.5",
    "eslint": "^9.13",
    "eslint-plugin-import": "^2.22.1",
    "globals": "^15.11.0",
    "p-retry": "^4.2.0"
  },
  "devDependencies": {}
}


================================================
File: /.dockerignore
================================================
vendor/
node_modules/


================================================
File: /Dockerfile
================================================
FROM php:8.2-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600
ENV NVM_DIR="$HOME/.nvm"
ENV NODE_VERSION=18.20.4

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update && apt-get install -y --no-install-recommends \
        git \
        locales \
        unzip \
        gnupg \
        libssl-dev \
        libevent-dev \
	&& rm -r /var/lib/apt/lists/* \
	&& sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
	&& locale-gen \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

# Install nvm and Node
RUN mkdir -p $NVM_DIR

RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash \
    && . "$NVM_DIR/nvm.sh" \
    && nvm install $NODE_VERSION \
    && nvm alias default $NODE_VERSION \
    && nvm use default

ENV NODE_PATH $NVM_DIR/versions/node/v$NODE_VERSION/lib/node_modules
ENV PATH      $NVM_DIR/versions/node/v$NODE_VERSION/bin/:$PATH
RUN ln -s $NVM_DIR/versions/node/v$NODE_VERSION/bin/node /usr/local/bin/node

# Install yarn
RUN npm install -g yarn

# Install ext-event dependencies
RUN docker-php-ext-install sockets \
    && docker-php-ext-install pcntl

# Install ext-event for react-php
RUN pecl install event \
    && docker-php-ext-enable event --ini-name zz-event.ini event

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/

# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# First copy only packages files
COPY package* /code/
RUN yarn install

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

# Run normal yarn install - all deps are cached already
RUN yarn install

CMD ["php", "/code/src/run.php"]


================================================
File: /README.md
================================================
# Azure Event Hub Writer

[![Build Status](https://travis-ci.com/keboola/wr-azure-event-hub.svg?branch=master)](https://travis-ci.com/keboola/wr-azure-event-hub)

[Azure Event Hub](https://azure.microsoft.com/en-us/services/event-hubs/) writer for the [Keboola Connection](https://www.keboola.com).

## Configuration

The configuration `config.json` contains following properties in `parameters` key: 
- `hub` - object (required): Configuration of the connection.
    - `#connectionString` - string (required): [Event Hubs connection string](https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string) eg. `Endpoint=sb://....`.
    - `eventHubName` - string (required): [Event Hubs name](https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-create#create-an-event-hub).
- `tableId` - string (optional):
  - Name of the table from the input mapping (source).
  - If the input mapping contains only one table, it is used by default.
- `batchSize` int (optional):
  - Default `1000`.
  - Number of messages to be sent at once.
  - If the messages exceed the maximum batch size, a smaller number can be sent.
- `mode` - enum (optional): Specifies how the CSV row is mapped to the message.
    - `row_as_json` (default) - Message is row in the JSON format, eg. `{"id": 1, "name": "John"}`.
    - `column_value` - Message is value of the defined `column`, eg. `John`.
- `column` - string (optional): Name of the column for `mode` = `column_value`.
- `propertiesColumns` - string (optional): Name of the column with properties (correlationId, messageId, ...) in JSON format for `mode` = `column_value`.


## Development
 
Clone this repository and init the workspace with following command:

```
git clone https://github.com/keboola/wr-azure-event-hub
cd wr-azure-event-hub
docker-compose build
docker-compose run --rm dev composer install --no-scripts
docker-compose run --rm dev yarn install
```

Create `.env` file with following variables:
```env
CONNECTION_STRING=
EVENT_HUB_NAME=
CONSUMER_GROUP_NAME="$Default"
```


Run the test suite using this command:

```
docker-compose run --rm dev composer tests
```
 
### Event Hub Consumer

To read back messages sent to the Event Hub, run:
```
nodejs ./tests/functional/hubConsumer.js 
```

This script prints to STDOUT all new messages from the launch time. 

It is useful for development and debugging.
 
# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


