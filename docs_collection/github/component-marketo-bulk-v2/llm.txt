Directory structure:
└── keboola-component-marketo-bulk-v2/
    ├── README.md
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── .travis.yml
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── example/
    │   ├── component.py
    │   ├── component_config/
    │   │   ├── component_long_description.md
    │   │   ├── component_short_description.md
    │   │   ├── configSchema.json
    │   │   ├── configuration_description.md
    │   │   ├── stack_parameters.json
    │   │   └── sample-config/
    │   │       ├── config.json
    │   │       └── in/
    │   │           ├── state.json
    │   │           ├── files/
    │   │           │   └── order1.xml
    │   │           └── tables/
    │   │               ├── test.csv
    │   │               └── test.csv.manifest
    │   ├── data/
    │   │   ├── adasd.js
    │   │   ├── config.json
    │   │   └── in/
    │   │       ├── state.json
    │   │       ├── files/
    │   │       │   └── order1.xml
    │   │       └── tables/
    │   │           ├── test.csv
    │   │           └── test.csv.manifest
    │   └── hs/
    │       ├── __init__.py
    │       ├── hs_client.py
    │       └── hs_result.py
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   └── marketo.py
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
FILE: README.md
================================================
# Keboola Marketo Bulk Extractor V2

Marketo is a platform where users can develops and sells marketing automation software for account-based marketing and other marketing services and products including SEO and content creation.

This component will allow users to extract their leads and lead activities into Keboola to conduct further analysis.

## Marketo REST API
[API documentation](http://developers.marketo.com/rest-api/bulk-extract/)

## Configuration Parameters
1. Munchkin ID
    - Available in `Admin` > `Web Services` menu in the REST API section
2. Client ID
3. Client Secret

## Endpoint Parameters
1. Leads
    - Created At - `Required`
        - `Leads` endpoint is required to have either `Created At` or `Updated At` parameters configured. The componet will fail if none of them is configured
        - `month/year`
            - Mainly use for backfill
            - Required format - MMM YYYY (e.g. Jan 2019)
        - `timespan`
            - Specifying the amount days back you want to extract
    - Updated At - `Optional`
        - `Leads` endpoint is required to have either `Created At` or `Updated At` parameters configured. The componet will fail if none of them is configured
        - `month/year`
            - Mainly use for backfill
            - Required format - MMM YYYY (e.g. Jan 2019)
        - `timespan`
            - Specifying the amount days back you want to extract
    - Desired Fields - `Required`
2. Activities
    - Created At - `Required`
        - `month/year`
            - Mainly use for backfill
            - Required format - MMM YYYY (e.g. Jan 2019)
        - `timespan`
            - Specifying the amount days back you want to extract
    - Desired Activities - `Optional`
        - IDs of activities you want to extract and separate them by comma. Note: The “Delete Lead” activity is not supported.

## Output Tables
For `Leads` endpoint the resulting table contains all possible columns. This is hardcoded and cannot be changed. The PK is `id`, loads are incremental.

For `Activities` endpoint the PK is `MarketoGUID`, the loads are incremental as well.

## Development

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in the docker-compose file:

```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
FILE: change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog



================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "asigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "asigning travis tag"
	export TAG="$TRAVIS_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.7.2-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
mock
freezegun
keboola.component
keboola.http-client


================================================
FILE: .travis.yml
================================================
sudo: false

services:
  - docker

jobs:
  include:
    - stage: tests
      script:
        - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
        - docker run $APP_IMAGE python -m unittest discover
      # push test image to ECR - uncomment for testing before deployment
      #  - docker pull quay.io/keboola/developer-portal-cli-v2:latest
      #  - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
      #  - docker tag $APP_IMAGE:latest $REPOSITORY:test
      #  - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
      #  - docker push $REPOSITORY:test
      #  - docker pull quay.io/keboola/syrup-cli:latest
    - stage: deploy_dev_portal
      if: branch = master
      script: "./scripts/update_dev_portal_properties.sh"

before_script:
  - export APP_IMAGE=keboola-component
  - docker -v
  - docker build -t $APP_IMAGE .
  - chmod +x ./scripts/update_dev_portal_properties.sh
  - chmod +x ./deploy.sh

after_success:
  - docker images

deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh
  on:
    tags: true
    branch: master



================================================
FILE: component_config/component_long_description.md
================================================
Marketo is a platform where users can develops and sells marketing automation software for account-based marketing and other marketing services and products including SEO and content creation.

This component will allow users to extract their leads and lead activities into Keboola to conduct further analysis.


## Configuration Parameters
1. Munchkin ID
    - Available in `Admin` > `Web Services` menu in the REST API section
2. Client ID
3. Client Secret

## Endpoint Parameters
1. Leads
    - Created At - `Required`
        - `Leads` endpoint is required to have either `Created At` or `Updated At` parameters configured. The componet will fail if none of them is configured
        - `month/year`
            - Mainly use for backfill
            - Required format - MMM YYYY (e.g. Jan 2019)
        - `timespan`
            - Specifying the amount days back you want to extract
    - Updated At - `Optional`
        - `Leads` endpoint is required to have either `Created At` or `Updated At` parameters configured. The componet will fail if none of them is configured
        - `month/year`
            - Mainly use for backfill
            - Required format - MMM YYYY (e.g. Jan 2019)
        - `timespan`
            - Specifying the amount days back you want to extract
    - Desired Fields - `Required`
2. Activities
    - Created At - `Required`
        - `month/year`
            - Mainly use for backfill
            - Required format - MMM YYYY (e.g. Jan 2019)
        - `timespan`
            - Specifying the amount days back you want to extract
    - Desired Activities - `Optional`
        - IDs of activities you want to extract and separate them by comma. Note: The “Delete Lead” activity is not supported.

## Output Tables
For `Leads` endpoint the resulting table contains all possible columns. This is hardcoded and cannot be changed. The PK is `id`, loads are incremental.

For `Activities` endpoint the PK is `MarketoGUID`, the loads are incremental as well.



================================================
FILE: component_config/component_short_description.md
================================================
Marketo is a powerful marketing automation software.


================================================
FILE: component_config/configRowSchema.json
================================================
{
    "type": "object",
    "title": "Marketo Database",
    "required": [
        "query",
        "debug"
    ],
    "properties": {
        "query": {
            "title": "Endpoint",
            "type": "object",
            "options": {
                "keep_oneof_values": false
            },
            "anyOf": [
                {
                    "title": "Leads",
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                        "endpoint",
                        "desired_fields"
                    ],
                    "options": {
                        "keep_oneof_values": false
                    },
                    "description": "Leads endpoint is required to have either [Created At] or [Updated At] parameters configured. The componet will fail if none of them is configured",
                    "properties": {
                        "endpoint": {
                            "type": "string",
                            "enum": [
                                "Leads"
                            ],
                            "options": {
                                "hidden": true
                            }
                        },
                        "created_at": {
                            "type": "object",
                            "title": "Created At - [Required]",
                            "properties": {
                                "type": {
                                    "title": "Type",
                                    "type": "string",
                                    "enum": [
                                        "month/year",
                                        "dayspan"
                                    ],
                                    "default": "month/year"
                                },
                                "value": {
                                    "title": "Value",
                                    "type": "string",
                                    "description": "[month/year] required format: MM YYYY, eg: Oct 2018; [dayspan] - number of days back to fetch 'Created At'."
                                }
                            },
                            "propertyOrder": 100
                        },
                        "updated_at": {
                            "type": "object",
                            "title": "Updated At - [Optional]",
                            "properties": {
                                "type": {
                                    "title": "Type",
                                    "type": "string",
                                    "enum": [
                                        "month/year",
                                        "dayspan"
                                    ],
                                    "default": "month/year"
                                },
                                "value": {
                                    "title": "Value",
                                    "type": "string",
                                    "description": "[month/year] required format: MM YYYY, eg: Oct 2018; [dayspan] - number of days back to fetch 'Updated At'."
                                }
                            },
                            "propertyOrder": 200
                        },
                        "desired_fields": {
                            "type": "string",
                            "title": "Desired Fields - [Required]",
                            "description": "Values must be comma separated. Specifying the columns you want to extractor and [id] column needs to be include as it is the primary key. ",
                            "propertyOrder": 300
                        }
                    }
                },
                {
                    "title": "Activities",
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                        "endpoint",
                        "created_at"
                    ],
                    "options": {
                        "keep_oneof_values": false
                    },
                    "properties": {
                        "endpoint": {
                            "type": "string",
                            "enum": [
                                "Activities"
                            ],
                            "options": {
                                "hidden": true
                            }
                        },
                        "created_at": {
                            "type": "object",
                            "title": "Created At - [Required]",
                            "properties": {
                                "type": {
                                    "title": "Type",
                                    "type": "string",
                                    "enum": [
                                        "month/year",
                                        "dayspan"
                                    ],
                                    "default": "month/year"
                                },
                                "value": {
                                    "title": "Value",
                                    "type": "string",
                                    "description": "[month/year] required format: MM YYYY, eg: Oct 2018; [dayspan] - number of days back to fetch 'Created At'."
                                }
                            },
                            "propertyOrder": 200
                        },
                        "desired_activities": {
                            "type": "string",
                            "title": "Desired Activities - [Optional]",
                            "description": "IDs of activities you want to extract and separate them by comma. Note: The “Delete Lead” activity is not supported.",
                            "propertyOrder": 300
                        }
                    }
                }
            ],
            "propertyOrder": 100
        },
        "debug": {
            "type": "boolean",
            "title": "Debug",
            "default": false,
            "propertyOrder": 200
        }
    }
}


================================================
FILE: component_config/configSchema.json
================================================
{
    "type": "object",
    "title": "Marketo Database",
    "required": [
        "munchkinid",
        "client_id",
        "#client_secret"
    ],
    "properties": {
        "munchkinid": {
            "type": "string",
            "title": "Munchkin ID",
            "description": "Can be found in [Admin] > [Web Services] menu in the REST API section",
            "propertyOrder": 1
        },
        "client_id": {
            "type": "string",
            "title": "Client ID",
            "propertyOrder": 2
        },
        "#client_secret": {
            "type": "string",
            "title": "Client Secret",
            "format": "password",
            "propertyOrder": 3
        }
    }
}


================================================
FILE: component_config/configuration_description.md
================================================
## Output Tables
For `Leads` endpoint the resulting table contains all possible columns. This is hardcoded and cannot be changed. The PK is `id`, loads are incremental.

For `Activities` endpoint the PK is `MarketoGUID`, the loads are incremental as well.



================================================
FILE: component_config/documentationUrl.md
================================================



================================================
FILE: component_config/licenseUrl.md
================================================



================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sourceCodeUrl.md
================================================



================================================
FILE: component_config/stack_parameters.json
================================================
{}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: example/component.py
================================================
'''
Template Component main class.

'''

import logging
import os
import sys
from datetime import datetime
from pathlib import Path

from kbc.env_handler import KBCEnvHandler
from kbc.result import KBCTableDef
from kbc.result import ResultWriter

# global constants'
SUPPORTED_ENDPOINTS = ['companies', 'deals']

# configuration variables
KEY_API_TOKEN = '#api_token'
KEY_PERIOD_FROM = 'period_from'
KEY_ENDPOINTS = 'endpoints'

KEY_COMPANY_PROPERTIES = 'company_properties'
KEY_DEAL_PROPERTIES = 'deal_properties'

# #### Keep for debug
KEY_STDLOG = 'stdlogging'
KEY_DEBUG = 'debug'
MANDATORY_PARS = [KEY_ENDPOINTS, KEY_API_TOKEN]
MANDATORY_IMAGE_PARS = []

# for easier local project setup
DEFAULT_DATA_DIR = Path(__file__).resolve().parent.parent.joinpath('data').as_posix() \
    if not os.environ.get('KBC_DATADIR') else None

APP_VERSION = '0.0.1'


class Component(KBCEnvHandler):

    def __init__(self, debug=False):
        KBCEnvHandler.__init__(self, MANDATORY_PARS, log_level=logging.DEBUG if debug else logging.INFO,
                               data_path=DEFAULT_DATA_DIR)
        # override debug from config
        if self.cfg_params.get(KEY_DEBUG):
            debug = True
        if debug:
            logging.getLogger().setLevel(logging.DEBUG)
        logging.info('Running version %s', APP_VERSION)
        logging.info('Loading configuration...')

        try:
            self.validate_config()
            self.validate_image_parameters(MANDATORY_IMAGE_PARS)
        except ValueError as e:
            logging.exception(e)
            exit(1)
        # ####### EXAMPLE TO REMOVE
        # intialize instance parameteres
        token = self.cfg_params[KEY_API_TOKEN]
        self.hs_client = HubspotClient(token)
        # ####### EXAMPLE TO REMOVE END

    def run(self):
        '''
        Main execution code
        '''
        params = self.cfg_params  # noqa

        # ####### EXAMPLE TO REMOVE
        if params.get(KEY_PERIOD_FROM):
            start_date, end_date = self.get_date_period_converted(params.get(KEY_PERIOD_FROM),
                                                                  datetime.utcnow().strftime('%Y-%m-%d'))
            recent = True
        else:
            start_date = None
            recent = False

        endpoints = params.get(KEY_ENDPOINTS, SUPPORTED_ENDPOINTS)

        if 'companies' in endpoints:
            logging.info('Extracting Companies')
            self.extract_companies(recent)

        if 'deals' in endpoints:
            logging.info("Extracting deals")
            self.extract_deals(start_date)

        logging.info("Extraction finished")
        # ####### EXAMPLE TO REMOVE END

    # ####### EXAMPLE TO REMOVE (ALL BELOW UNTIL END MARKER)
    def extract_deals(self, start_time):
        logging.info('Extracting Companies from HubSpot CRM')
        fields = self._parse_props(self.cfg_params.get(KEY_DEAL_PROPERTIES))

        if not fields:
            expected_deal_cols = hs_client.DEAL_DEFAULT_COLS + self._build_property_cols(
                hs_client.DEAL_DEFAULT_PROPERTIES)
        else:
            expected_deal_cols = hs_client.DEAL_DEFAULT_COLS + self._build_property_cols(fields)

        deal_writer = DealsWriter(self.tables_out_path, expected_deal_cols)

        self._get_n_process_results(self.hs_client.get_deals, deal_writer, start_time, fields)

    def extract_companies(self, recent):
        fields = self._parse_props(self.cfg_params.get(KEY_COMPANY_PROPERTIES))
        if not fields:
            expected_company_cols = hs_client.COMPANIES_DEFAULT_COLS + self._build_property_cols(
                hs_client.COMPANY_DEFAULT_PROPERTIES)
        else:
            expected_company_cols = hs_client.COMPANIES_DEFAULT_COLS + self._build_property_cols(fields)
        # table def
        companies_table = KBCTableDef(name='companies', columns=expected_company_cols, pk=hs_result.COMPANY_PK)
        # writer setup
        comp_writer = ResultWriter(result_dir_path=self.tables_out_path, table_def=companies_table, fix_headers=True)
        self._get_n_process_results(self.hs_client.get_companies, comp_writer, recent, fields)

    def _parse_props(self, param):
        """
        Helper method to prepare dataset parameters query.

        :param param:
        :return:
        """
        cols = []
        if param:
            cols = [p.strip() for p in param.split(",")]
        return cols

    def _get_n_process_results(self, ds_getter, writer, *fpars):
        """
               Generic method to get simple objects
               :param ds_getter: dataset method to call
               :param writer: result writer instance
               :param *fpars: positional arguments for the ds_getter function.
               :return:
               """
        with writer:
            for res in ds_getter(*fpars):
                if isinstance(res, list):
                    writer.write_all(res)
                else:
                    writer.write(res)

        # store manifest
        logging.info("Storing manifest files.")
        self.create_manifests(writer.collect_results())

    def _build_property_cols(self, properties):
        # get flattened property cols
        prop_cols = []
        for p in properties:
            prop_cols.append('properties.' + p + '.source')
            prop_cols.append('properties.' + p + '.sourceId')
            prop_cols.append('properties.' + p + '.timestamp')
            prop_cols.append('properties.' + p + '.value')
            prop_cols.append('properties.' + p + '.versions')
        return prop_cols


# ####### EXAMPLE TO REMOVE END

"""
        Main entrypoint
"""
if __name__ == "__main__":
    if len(sys.argv) > 1:
        debug_arg = sys.argv[1]
    else:
        debug_arg = False
    try:
        comp = Component(debug_arg)
        comp.run()
    except Exception as e:
        logging.exception(e)
        exit(1)



================================================
FILE: example/component_config/component_long_description.md
================================================
Testing functional sample extractor for purposes of the python component template. 
Implements partial Hubspot extractor using the public sandbox token.


================================================
FILE: example/component_config/component_short_description.md
================================================
Testing functional sample extractor for purposes of the python component template. 


================================================
FILE: example/component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "extractor configuration",
  "required": [
    "project_id",
    "#api_token",
    "period_from",
    "period_to",
    "relative_period",
    "metrics",
    "backfill_mode"
  ],
  "properties": {
    "project_id": {
      "type": "string",
      "title": "Project ID",
      "propertyOrder": 100
    },
    "#api_token": {
      "type": "string",
      "title": "API token",
      "format": "password",
      "propertyOrder": 200
    },
    "period_from": {
      "type": "string",
      "format": "date",
      "title": "Period from date [including]",
      "propertyOrder": 300
    },
    "period_to": {
      "type": "string",
      "format": "date",
      "title": "Period to date [excluding]",
      "propertyOrder": 400
    },
    "relative_period": {
      "type": "string",
      "title": "Relative period from now (utc)",
      "description": "Relative period in format: '5 hours ago', 'yesterday','3 days ago', '4 months ago', '2 years ago', 'today'. Overrides `from` and `to` parameters.",
      "propertyOrder": 450
    },
    "backfill_mode": {
      "type": "number",
      "title": "Backfill mode",
      "description": "If backfill mode is enabled, each consecutive run of the component will continue from the end of the last run period, until current date is reached. The From and To date parameters are used to define Start date of the back-fill and also relative window of each run.",
      "propertyOrder": 455,
      "enum": [
        0,
        1
      ],
      "default": 0,
      "options": {
        "enum_titles": [
          "No",
          "Yes"
        ]
      }
    },
    "metrics": {
      "type": "array",
      "title": "Example array of group of string objects",
      "description": "Group of string objects alligned in grid",
      "items": {
        "format": "grid",
        "type": "object",
        "title": "Items of array, multiple objects",
        "required": [
          "metric",
          "modificator"
        ],
        "properties": {
          "metric": {
            "enum": [
              "NoVt",
              "TotTm",
              "NoPV"
            ],
            "type": "string",
            "default": "NoPV",
            "title": "Metric",
            "description": "First object, enum of strings",
            "propertyOrder": 1000
          },
          "modificator": {
            "enum": [
              "none",
              "change",
              "share",
              "share_in_total",
              "change_in_percentage"
            ],
            "type": "string",
            "title": "Mdificator",
            "description": "Second object",
            "default": "daily",
            "propertyOrder": 2000
          }
        }
      }
    }
  }
}



================================================
FILE: example/component_config/configuration_description.md
================================================
Testing configuration description.


================================================
FILE: example/component_config/stack_parameters.json
================================================
{}


================================================
FILE: example/component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: example/component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: example/component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: example/component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: example/component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: example/data/adasd.js
================================================
{
	"storage": {
		"input": {
			"files": [],
			"tables": [{
					"source": "in.c-test.test",
					"destination": "test.csv",
					"limit": 50,
					"columns": [],
					"where_values": [],
					"where_operator": "eq"
				}
			]
		},
		"output": {
			"files": [],
			"tables": []
		}
	},
	"parameters": {
		"#api_token": "demo",
		"period_from": "yesterday",
		"endpoints": [
			"deals",
			"companies"
		],
		"company_properties": "",
		"deal_properties": "",
		"debug": true
	},
	"image_parameters": {
		"syrup_url": "https://syrup.keboola.com/"
	},
	"authorization": {
		"oauth_api": {
			"id": "OAUTH_API_ID",
			"credentials": {
				"id": "main",
				"authorizedFor": "Myself",
				"creator": {
					"id": "1234",
					"description": "me@keboola.com"
				},
				"created": "2016-01-31 00:13:30",
				"#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
				"oauthVersion": "2.0",
				"appKey": "000000004C184A49",
				"#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
			}
		}
	}
}



================================================
FILE: example/data/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"XXXX_REFRESH_TOKEN\"}",
        "oauthVersion": "2.0",
        "appKey": "1234567890",
        "#appSecret": "APP-SECRET"
      }
    }
  }
}



================================================
FILE: example/data/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: example/data/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: example/data/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: example/data/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: example/hs/__init__.py
================================================



================================================
FILE: example/hs/hs_client.py
================================================
import json
from collections.abc import Iterable

from kbc.client_base import HttpClientBase

COMPANIES_DEFAULT_COLS = ["additionalDomains", "companyId", "isDeleted", "mergeAudits", "portalId", "stateChanges"]
COMPANY_DEFAULT_PROPERTIES = ['about_us', 'name', 'phone', 'facebook_company_page', 'city', 'country', 'website',
                              'industry', 'annualrevenue', 'linkedin_company_page',
                              'hs_lastmodifieddate', 'hubspot_owner_id', 'notes_last_updated', 'description',
                              'createdate', 'numberofemployees', 'hs_lead_status', 'founded_year',
                              'twitterhandle',
                              'linkedinbio']

DEAL_DEFAULT_COLS = ["associations.associatedCompanyIds",
                     "associations.associatedDealIds",
                     "associations.associatedVids",
                     "dealId",
                     "imports",
                     "isDeleted",
                     "portalId",
                     "properties.dealstage.source",
                     "properties.dealstage.sourceId",
                     "properties.dealstage.timestamp",
                     "properties.dealstage.value",
                     "properties.dealstage.versions",
                     "properties.hs_object_id.source",
                     "properties.hs_object_id.sourceId",
                     "properties.hs_object_id.timestamp",
                     "properties.hs_object_id.value",
                     "properties.hs_object_id.versions",
                     "stateChanges"]
DEAL_DEFAULT_PROPERTIES = ['authority', 'budget', 'campaign_source', 'hs_analytics_source', 'hs_campaign',
                           'hs_lastmodifieddate', 'need', 'timeframe', 'dealname', 'amount', 'closedate', 'pipeline',
                           'createdate', 'engagements_last_meeting_booked', 'dealtype', 'hs_createdate', 'description',
                           'start_date', 'closed_lost_reason', 'closed_won_reason', 'end_date', 'lead_owner',
                           'tech_owner', 'service_amount', 'contract_type',
                           'hubspot_owner_id',
                           'partner_name', 'notes_last_updated']

# endpoints

DEALS_ALL = 'deals/v1/deal/paged'
DEALS_RECENT = 'deals/v1/deal/recent/modified'

COMPANIES_ALL = 'companies/v2/companies/paged'
COMPANIES_RECENT = 'companies/v2/companies/recent/modified'

MAX_RETRIES = 10
BASE_URL = 'https://api.hubapi.com/'

COMPANY_PROPERTIES = 'properties/v1/companies/properties/'


class HubspotClient(HttpClientBase):
    """
    Basic HTTP client taking care of core HTTP communication with the API service.

    It exttends the kbc.client_base.HttpClientBase class, setting up the specifics for Hubspot service and adding
    methods for handling pagination.

    """

    def __init__(self, token):
        HttpClientBase.__init__(self, base_url=BASE_URL, max_retries=MAX_RETRIES, backoff_factor=0.3,
                                status_forcelist=(429, 500, 502, 504), default_params={"hapikey": token})

    def _get_paged_result_pages(self, endpoint, parameters, res_obj_name, limit_attr, offset_req_attr, offset_resp_attr,
                                has_more_attr, offset, limit):
        """
        Generic pagination getter method returning Iterable instance that can be used in for loops.

        :param endpoint:
        :param parameters:
        :param res_obj_name:
        :param limit_attr:
        :param offset_req_attr:
        :param offset_resp_attr:
        :param has_more_attr:
        :param offset:
        :param limit:
        :return:
        """
        has_more = True
        while has_more:

            parameters[offset_req_attr] = offset
            parameters[limit_attr] = limit

            req = self.get_raw(self.base_url + endpoint, params=parameters)
            resp_text = str.encode(req.text, 'utf-8')
            req_response = json.loads(resp_text)

            if req_response[has_more_attr]:
                has_more = True
            else:
                has_more = False
            offset = req_response[offset_resp_attr]

            yield req_response[res_obj_name]

    def get_companies(self, recent=False, fields=None):

        offset = 0
        if not fields:
            company_properties = COMPANY_DEFAULT_PROPERTIES
        else:
            company_properties = fields

        parameters = {'properties': company_properties}

        if recent:
            return self._get_paged_result_pages(COMPANIES_RECENT, parameters, 'results', 'count', 'offset', 'offset',
                                                'hasMore', offset, 200)
        else:
            return self._get_paged_result_pages(COMPANIES_ALL, parameters, 'companies', 'limit', 'offset', 'offset',
                                                'has-more', offset, 250)

    def get_company_properties(self):
        req = self.get_raw(self.base_url + COMPANY_PROPERTIES)
        req_response = req.json()
        return req_response

    def get_deals(self, start_time=None, fields=None) -> Iterable:
        """
        Get either all available deals or recent ones specified by start_time.

        API supports more options, possible to extend in the future
        :type fields: list list of deal properties to get
        :param start_time: datetime
        :return: generator object with all available pages
        """
        offset = 0
        if not fields:
            deal_properties = DEAL_DEFAULT_PROPERTIES
        else:
            deal_properties = fields

        parameters = {'properties': deal_properties, 'propertiesWithHistory': 'dealstage',
                      'includeAssociations': 'true'}
        if start_time:
            parameters['since'] = int(start_time.timestamp() * 1000)
            return self._get_paged_result_pages(DEALS_RECENT, parameters, 'results', 'count', 'offset', 'offset',
                                                'hasMore',
                                                offset, 100)
        else:
            return self._get_paged_result_pages(DEALS_ALL, parameters, 'deals', 'limit', 'offset', 'offset', 'hasMore',
                                                offset, 250)



================================================
FILE: example/hs/hs_result.py
================================================
from kbc.result import KBCTableDef
from kbc.result import ResultWriter

# Pkeys
COMPANY_PK = ['companyId']
DEAL_PK = ['dealId']
DEAL_STAGE_HIST_PK = ['Deal_ID', 'sourceVid', 'sourceId', 'timestamp']

"""
Class extending the kbc.result.ResultWriter class to add some additional functionality.

In particular it is used to process more complex nested objects while using
the functionality the base ResultWriter provides. The class overrides constructor and core write methods.



"""


class DealsWriter(ResultWriter):
    """
    Overridden constructor method of ResultWriter. It creates extra ResultWriter instance that handles processing of
    the nested object 'deals_stage_history'. That writer is then called from within the write method.
    """

    def __init__(self, out_path, columns, buffer=8192):
        # specify result table
        deal_res_table = KBCTableDef('deals', columns, DEAL_PK)
        ResultWriter.__init__(self, out_path, deal_res_table, fix_headers=True, buffer_size=buffer)

        ext_user_table = KBCTableDef('deals_stage_history', [], DEAL_STAGE_HIST_PK)
        self.deals_stage_history_wr = ResultWriter(out_path, ext_user_table,
                                                   exclude_fields=['properties.dealstage.versions'],
                                                   flatten_objects=False,
                                                   user_value_cols={'Deal_ID'}, buffer_size=buffer)

    """
    Overridden write method that is modified to process the nested object separately using newly created nested writer.
    """

    def write(self, data, file_name=None, user_values=None, object_from_arrays=False, write_header=True):
        # write ext users
        d_stage_history = data.get('properties').get('dealstage').get('versions')
        if d_stage_history and str(
                d_stage_history) != 'nan' and len(d_stage_history) > 0:
            self.deals_stage_history_wr.write_all(d_stage_history,
                                                  user_values={'Deal_ID': self._get_pkey_values(data, {})})
            self.results = {**self.results, **self.deals_stage_history_wr.results}

        super().write(data)



================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi


================================================
FILE: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi


================================================
FILE: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"


================================================
FILE: src/component.py
================================================
'''
Keboola Marketo Bulk Extractor

'''
import sys
import logging
import os
import json
import csv
from datetime import datetime, timedelta
from pathlib import Path

from keboola.component import CommonInterface
from marketo import Marketo


sys.tracebacklimit = 0

# Disabling list of libraries you want to output in the logger
disable_libraries = [
    'urllib3',
    'requests'
]
for library in disable_libraries:
    logging.getLogger(library).disabled = True


# configuration variables
KEY_MUNCHKINID = 'munchkinid'
KEY_CLIENT_ID = 'client_id'
KEY_CLIENT_SECRET = '#client_secret'
KEY_QUERY = 'query'


# #### Keep for debug
KEY_DEBUG = 'debug'

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [
    KEY_MUNCHKINID,
    KEY_CLIENT_ID,
    KEY_CLIENT_SECRET,
    KEY_QUERY
]
REQUIRED_IMAGE_PARS = []

APP_VERSION = '0.0.2'


def get_local_data_path():
    return Path(__file__).resolve().parent.parent.joinpath('data').as_posix()


def get_data_folder_path():
    data_folder_path = None
    if not os.environ.get('KBC_DATADIR'):
        data_folder_path = get_local_data_path()
    return data_folder_path


class Component(CommonInterface):
    def __init__(self, debug=False):
        # for easier local project setup
        data_folder_path = get_data_folder_path()
        super().__init__(data_folder_path=data_folder_path)

        # override debug from config
        if self.configuration.parameters[KEY_DEBUG]:
            debug = True
        if debug:
            logging.getLogger().setLevel(logging.DEBUG)
            logging.info('Running version %s', APP_VERSION)
            logging.info('Loading configuration...')

        try:
            # validation of required parameters. Produces ValueError
            self.validate_configuration(REQUIRED_PARAMETERS)
            self.validate_image_parameters(REQUIRED_IMAGE_PARS)
        except ValueError as e:
            logging.exception(e)
            exit(1)

    def run(self):
        '''
        Main execution code
        '''
        params = self.configuration.parameters

        # Validating User input configurations
        self.validate_user_parameters(params)

        # Read the parameters
        # Credentials parameters
        munchkin_id = params.get(KEY_MUNCHKINID)
        client_id = params.get(KEY_CLIENT_ID)
        client_secret = params.get(KEY_CLIENT_SECRET)

        # Endpoint parameters
        query = params.get(KEY_QUERY)
        endpoint = query.get('endpoint')
        created_param = query.get('created_at')
        month_year_created = created_param['value'] if created_param['type'] == 'month/year' else ''
        dayspan_created = created_param['value'] if created_param['type'] == 'dayspan' else ''

        # Leads Endpoint optional parmaeters
        updated_param = query.get('updated_at')
        if updated_param:
            month_year_updated = updated_param['value'] if updated_param['type'] == 'month/year' else ''
            dayspan_updated = updated_param['value'] if updated_param['type'] == 'dayspan' else ''
        else:
            month_year_updated = ''
            dayspan_updated = ''
        fields_str_tmp = query.get('desired_fields')
        fields_str = [i.strip() for i in fields_str_tmp.split(',')
                      ] if fields_str_tmp else []

        # Activities Endpoint optinal parameters
        desired_activities_tmp = query.get('desired_activities')
        desired_activities = [i.strip()
                              for i in desired_activities_tmp.split(",")] if desired_activities_tmp else []

        # Outputing log if parameters are configured
        logging.info("Endpoint: %s" % endpoint)
        logging.info("Dayspan updated: %s" %
                     dayspan_updated) if dayspan_updated else ''
        logging.info("Dayspan created: %s" %
                     dayspan_created) if dayspan_created else ''
        logging.info("Desired activities: %s" %
                     str(desired_activities)) if desired_activities_tmp else ''
        logging.info("Month/Year updated: %s" %
                     month_year_updated) if month_year_updated else ''
        logging.info("Month/Year created: %s" %
                     month_year_created) if month_year_created else ''
        logging.info("Desired fields: %s" %
                     str(fields_str)) if fields_str_tmp else ''

        # Request parameters based on user inputs
        CREATED_DATE, start_created, end_created = self.create_date_ranges(
            dayspan_created, month_year_created, 'Created')
        UPDATED_DATE, start_updated, end_updated = self.create_date_ranges(
            dayspan_updated, month_year_updated, 'Updated')

        date_obj = {
            'created_date_bool': CREATED_DATE,
            'start_created_date': start_created,
            'end_created_date': end_created,
            'updated_date_bool': UPDATED_DATE,
            'start_updated_date': start_updated,
            'end_updated_date': end_updated
        }

        # Marketo class
        marketo = Marketo(munchkin_id=munchkin_id,
                          client_id=client_id, client_secret=client_secret, tables_out_path=self.tables_out_path)

        # Endpoint Request - stream request obj
        marketo.fetch_endpoint(endpoint=endpoint.lower(
        ), date_obj=date_obj, desired_activities=desired_activities, fields_str=fields_str)

        # Output manifest data
        self.check_output(endpoint=endpoint)

    def validate_user_parameters(self, params):
        # 1 - check if the configuration is empty
        if not params or params == {}:
            logging.error('Please configure your component.')
            sys.exit(1)

        # 2 - Check if all the credentials are entered
        if not params.get(KEY_CLIENT_ID) or not params.get(KEY_MUNCHKINID) or not params.get(KEY_CLIENT_SECRET):
            logging.error(
                "Credentials are missing: [Client ID], [Munchkin ID], [Client Secret]")
            sys.exit(1)

        # 3 - ensure row base configuration is configured
        if not params.get(KEY_QUERY):
            logging.error(
                'Configuration row is missing. Please configure your configuration row.')
            sys.exit(1)

        query = params.get(KEY_QUERY)
        # 4 - ensure the endpoints are supported
        endpoint = query.get('endpoint')
        if endpoint not in ('Activities', 'Leads'):
            logging.error('Specified endpoint is not supported.')
            sys.exit(1)

        # 5 - when endpoint leads is selected, desired fields cannot be empty
        fields_str_tmp = query.get('desired_fields')
        fields_str = [i.strip() for i in fields_str_tmp.split(",")
                      ] if fields_str_tmp else ''
        if endpoint == 'Leads' and len(fields_str) == 0:
            logging.error(
                "Please specify [Desired Fields] when endpoint [Leads] is selected.")
            sys.exit(1)

    def create_date_ranges(self, dayspan, month_year, date_type):
        '''
        Created Filter
        Determine whether we want to get data from apst X days or from a specific month/year
        '''
        # Return parameters
        CREATED_DATE = False
        start_date = ''
        end_date = ''

        if dayspan != '':
            # Using the dayspan value regardless if the created value is empty or not
            CREATED_DATE = True
            start_date = str(
                (datetime.utcnow() - timedelta(days=int(dayspan))).date())
            end_date = str(datetime.utcnow().date())

            # Disregarding Created value is not empty
            if month_year != '':
                logging.info(f'Disregarding the <Month/Year for      \'{date_type}\'> parameter, taking into consideration only \
                     the <How many days back you want to go with \'{date_type}\'?> parameter''Disregrading the <Month/\
                    Year ')

        # when dayspan variable is not specified
        else:
            if month_year != '':
                CREATED_DATE = True
                month = month_year[:3].lower()
                year = int(month_year[4:])
                if year % 4 == 0 and year % 400 != 0:
                    feb_length = '29'
                else:
                    feb_length = '28'
                year = str(year)
                months = {
                    'jan': [year + "-01-01T00:00:00Z", year + "-01-31T23:59:59Z"],
                    'feb': [year + "-02-01T00:00:00Z", year + "-02-" + feb_length + "T23:59:59Z"],
                    'mar': [year + "-03-01T00:00:00Z", year + "-03-31T23:59:59Z"],
                    'apr': [year + "-04-01T00:00:00Z", year + "-04-30T23:59:59Z"],
                    'may': [year + "-05-01T00:00:00Z", year + "-05-31T23:59:59Z"],
                    'jun': [year + "-06-01T00:00:00Z", year + "-06-30T23:59:59Z"],
                    'jul': [year + "-07-01T00:00:00Z", year + "-07-31T23:59:59Z"],
                    'aug': [year + "-08-01T00:00:00Z", year + "-08-31T23:59:59Z"],
                    'sep': [year + "-09-01T00:00:00Z", year + "-09-30T23:59:59Z"],
                    'oct': [year + "-10-01T00:00:00Z", year + "-10-31T23:59:59Z"],
                    'nov': [year + "-11-01T00:00:00Z", year + "-11-30T23:59:59Z"],
                    'dec': [year + "-12-01T00:00:00Z", year + "-12-31T23:59:59Z"]
                }
                start_date = months[month][0][:10]
                end_date = months[month][1][:10]

            else:
                CREATED_DATE = False
                logging.info(f'{date_type} date is not provided.')

        return CREATED_DATE, start_date, end_date

    def check_output(self, endpoint):
        '''
        Checking if output file contains data, then output manifest
        If not, remove output file and do not output manifest
        '''

        # Output file destination
        output_file_name = endpoint + '_bulk.csv'
        output_file_destination = os.path.join(
            self.tables_out_path, output_file_name)

        # Outputting sequence
        # Check if output file has data
        rows = list(csv.reader(open(output_file_destination)))
        row_count = len(rows)

        # remove output file if zero rows
        if row_count == 0:
            logging.info(
                'The export from the API reached state Completed, but no data were transferred from the API.')
            os.remove(output_file_destination)
        # output manifest if rows found
        else:
            # Output Manifest
            pk = ['marketoGUID'] if endpoint.lower() == 'activities' else [
                'id']
            self.save_manifest(
                file_name=output_file_name, primary_keys=pk)

            logging.info(f'{endpoint} exported.')

    def save_manifest(self, file_name, primary_keys):
        """
        Dummy function for returning manifest
        """

        file = '/data/out/tables/' + file_name + ".manifest"

        logging.info("Manifest output: {0}".format(file))

        manifest = {
            'destination': '',
            'incremental': True,
            'primary_key': primary_keys
        }

        try:
            with open(file, 'w') as file_out:
                json.dump(manifest, file_out)
                logging.info(
                    "Output manifest file ({0}) produced.".format(file))
        except Exception as e:
            logging.error("Could not produce output file manifest.")
            logging.error(e)


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        comp.run()
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
FILE: src/marketo.py
================================================

import os
import sys
import logging
import requests
import time


# Disabling list of libraries you want to output in the logger
disable_libraries = [
    'urllib3',
    'requests'
]
for library in disable_libraries:
    logging.getLogger(library).disabled = True


class Marketo():

    def __init__(self, munchkin_id, client_id, client_secret, tables_out_path):

        self.BASE_URL = f'https://{munchkin_id}.mktorest.com'
        self.access_token = self.authenticate(client_id, client_secret)
        self.tables_out_path = tables_out_path

    def get_request(self, url, params=None):

        try:
            response = requests.get(url, params=params)
        except Exception as err:
            logging.error(f'Error occured: {err}')
            sys.exit(1)

        return response

    def get_stream_request(self, filename, url, params=None):

        # response = requests.get(url, params=params, stream=True)
        with requests.get(url, params=params, stream=True) as r:
            r.raise_for_status()

            with open(filename, 'wb') as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)

    def post_request(self, url, params=None, body=None):

        try:
            response = requests.post(url, params=params, json=body)
        except Exception as err:
            logging.error(f'Error occured: {err}')
            sys.exit(1)

        return response

    def authenticate(self, client_id, client_secret):

        auth_url = f'{self.BASE_URL}/identity/oauth/token'
        params = {
            'client_id': client_id,
            'client_secret': client_secret,
            'grant_type': 'client_credentials'
        }

        response = requests.get(url=auth_url, params=params)
        self.check_response(response, 'Fetching access token')

        return response.json()['access_token']

    def check_response(self, response, stage):
        if response.status_code != 200:
            logging.error(f'[{response.status_code}] - {stage} failed.')
            if stage == 'Fetching access token':
                logging.error('Please check your credentials.')
            sys.exit(1)
        else:
            logging.info(stage)

    def fetch_endpoint(self, endpoint, date_obj, desired_activities, fields_str):
        '''
        Endpoint: Activities
        '''

        # Request parameters
        request_url = f'{self.BASE_URL}/bulk/v1/{endpoint}/export'
        request_param = {
            'access_token': self.access_token
        }
        request_body = {
            'format': 'CSV'
        }

        # setting up request parameters depending on endpoint
        if endpoint == 'activities':
            # Create date parameters
            if not date_obj['created_date_bool']:
                logging.error(
                    'The Activities endpoint requires Created Date interval.')
                sys.exit(1)
            else:
                request_body['filter'] = {}
                created_at = {
                    'startAt': date_obj['start_created_date'],
                    'endAt': date_obj['end_created_date']
                }
                request_body['filter']['createdAt'] = created_at

            # Update date parameters
            if date_obj['updated_date_bool']:
                updated_at = {
                    'startAt': date_obj['start_updated_date'],
                    'endAt': date_obj['end_updated_date']
                }
                request_body['filter']['updatedAt'] = updated_at

            # activities specificiations
            if len(desired_activities) > 0:
                request_body['filter']['activityTypeIds'] = desired_activities

        elif endpoint == 'leads':
            request_body['fields'] = fields_str

            # Filter parameters
            if not date_obj['updated_date_bool'] and not date_obj['created_date_bool']:
                logging.error(
                    'The Leads endpoint requries either Created or Updated parameter.')
                sys.exit(1)

            else:
                request_body['filter'] = {}

            # Update paramaters
            if date_obj['updated_date_bool']:
                updated_at = {
                    'startAt': date_obj['start_updated_date'],
                    'endAt': date_obj['end_updated_date']
                }
                request_body['filter']['updatedAt'] = updated_at

            # Create parameters
            if date_obj['created_date_bool']:
                created_at = {
                    'startAt': date_obj['start_created_date'],
                    'endAt': date_obj['end_created_date']
                }
                request_body['filter']['createdAt'] = created_at

        # 1 - Create exports

        export_id = self.create_export(
            request_url, request_param, request_body)

        # 2 - Enqueue export
        self.enqueue_export(request_url, request_param, export_id)

        # 3 - loop while waiting for the report to be ready
        ready_bool = False
        while not ready_bool:
            ready_bool = self.check_export_status(
                request_url, request_param, export_id)

        # 4 - Outputing the file
        data_out = self.output_export(
            request_url, request_param, export_id, endpoint)

        return data_out

    def create_export(self, request_url, request_param, request_body):

        export_url = f'{request_url}/create.json'
        create_export = self.post_request(
            export_url, request_param, request_body)
        self.check_response(create_export, 'Creating export')

        if not create_export.json()['success']:
            logging.error(
                f'Creating export was not successful; Errors: {create_export.json()["errors"]}')
            sys.exit(1)

        export_id = create_export.json()['result'][0]['exportId']
        logging.info(f'Export ID: [{export_id}]')

        return export_id

    def enqueue_export(self, request_url, request_param, export_id):

        enqueue_url = f'{request_url}/{export_id}/enqueue.json'
        enqueue_export = self.post_request(
            enqueue_url, request_param, body=None)
        self.check_response(enqueue_export, 'Enqueuing export')

    def check_export_status(self, request_url, request_param, export_id):

        time.sleep(60)

        ready_bool = False
        status_url = f'{request_url}/{export_id}/status.json'
        status_export = self.get_request(status_url, params=request_param)
        self.check_response(status_export, 'Standing by for export status')

        try:
            if status_export.json()['result'][0]['status'] == 'Completed':
                ready_bool = True
        except KeyError:
            logging.error("There was a problem when obtaining the status of the export.\
            Please try rerunning the configuration as the API sometimes behaves unpredictably.")
            logging.error(f'Response: {status_export.json()}')
            sys.exit(1)
        except Exception as e:
            logging.error(e)
            sys.exit(1)

        return ready_bool

    def output_export(self, request_url, request_param, export_id, endpoint):
        '''
        # Output file destination
        output_file_name = endpoint.capitalize() + '_bulk.csv'
        output_file_destination = self.tables_out_path + output_file_name
        '''

        # Output file request parameter
        output_url = f'{request_url}/{export_id}/file.json'
        output_filename = endpoint.capitalize() + '_bulk.csv'
        output_file_destination = os.path.join(
            self.tables_out_path, output_filename)

        # Streaming results while outputing
        self.get_stream_request(
            filename=output_file_destination, url=output_url, params=request_param)



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-marketo-bulk-v2" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

