Directory structure:
└── keboola-component-web-content-crawler/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── build_n_test.sh
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   └── webcrawler/
    │       ├── __init__.py
    │       └── selenium_crawler.py
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
# KBC Selenium Web Robot

A Keboola Connection component allowing to perform variety of web browser operations on any web-site and download web
content into the Storage. It is useful for instance for navigating through a legacy system web interface and downloading
a generated report that would be impossible to export in an automated manner otherwise.

The robot emulates in docker mode emulates display with resolution set by default to `1920X1080`, this can be overriden
by configuration parameter. It runs `Chrome` browser version `73.0.3683.20` operating with window size of `1024x980`, it
is possible to maximize the window on the startup to match the screen. The browser is run with configuration
parameter `--no-sandbox` and driver option `"safebrowsing.enabled": False`.

**Table of contents:**

[TOC]

# Configuration

The robot is configurable via JSON, where you define each `Action` as an object. These `Action` objects define a real
web browser action a user would make, e.g. click an object, fill in a form, etc.

## Configuration Structure

```json
{
  "start_url": "https://www.example.com/",
  "random_wait_range": [
    1,
    5
  ],
  "user_parameters": {
    "username": "user@gmail.com",
    "#password": "XXX"
  },
  "store_cookies": false,
  "docker_mode": false,
  "steps": [
    {
      "description": "Step description, useful for debugging.",
      "actions": [
        {
          "description": "Action description, useful for debugging",
          "action_name": "ACTION_NAME",
          "action_parameters": {
          }
        }
      ]
    }
  ]
}
```

**Parameters**

- **start_url** – An URL of the page where the crawler starts off.
- **random_wait_range** - A time range in seconds defining how long should the crawler wait between each action. The
  interval is defined by boundaries in seconds, e.g. [1, 5] means that the crawler will wait between each action
  anywhere between 1s and 5s, the actual wait time is chosen randomly within these boundaries.
- **resolution** - (OPT) resolution of the screen as a string, e.g. `1024x980`. The default value is `1920x1080`.
- **maximize_window** - (OPT) Boolean value flagging whether to maximize the window to match the max resolution. Default
  is `false`.
- **page_load_timeout** - (OPT) Numeric value (seconds) of how long the renderer should wait before timing out for page
  load or script execution (e.g. clicking a button "generate report"). Default value is 1000s
- **user_parameters** – A list of user parameters that is are accessible from within actions. This is useful for storing
  for example user credentials that are to be filled in a login form. Appending `#` sign before the attribute name will
  hash the value and store it securely within the configuration (recommended for passwords). The value may be scalar or
  a supported function.
- **store_cookies** – If set to true the crawler will store cookies from the last time and use it every consecutive run.
  This is useful for storing credentials and also making the browser legit for the target system, e.g. logging in with
  Google.
- **docker_mode** - Set to `true` for run in KBC. This option enables display emulation so it can be run in Docker
  container without a `headless` mode. Set to `false` for local development, so you can see the actual browser on your
  local machine.
- **Steps** – An array of `Step` objects that are grouping a set of `Actions`. More information in sections below.

## "Step" objects

Steps are groups of actions. It is used to logically structure steps taken on the web site and also to divide different
branches of execution. For instance: Logging, Navigating, Download file.

Future version will support iterations on a particular step.

```json
{
  "description": "Step description, useful for debugging.",
  "Actions": [
    {
      "description": "Action description, useful for debugging",
      "action_name": "ACTION_NAME",
      "action_parameters": {
      }
    }
  ]
}
```

## Actions

Action define a user action in the browser, e.g. click, fill in a form, wait, navigate to pop-up window, etc.

**Action object structure**

```json
{
  "description": "Action description, useful for debugging",
  "action_name": "ACTION_NAME",
  "action_parameters": {
  }
}
```

**Parameters**

- **description** - An Action description, useful for debugging. This description is also populated in the Job log
  during execution.
- **action_name** - Name of the particular supported action
- **action_parameters** - List of action parameters that are applicable for that particular action.

## **Actions on element**

- The element is defined by an [XPATH](https://www.w3schools.com/xml/xpath_intro.asp) expression.
- Either special actions or generic (
  any [action on WebElement](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html)
  supported by Selenium library)

### **ClickElementToDownload**w

This action clicks an element that leads to a file that should be stored in the Storage. It performs the click and waits
until the file is downloaded.

**Parameters**

- **xpath** - [REQ] XPATH defining the target element
- **delay** - [OPT] Wait time in seconds before the action is executed. Default value is `30`s.
- **timeout** - [OPT] Time in seconds that define the maximum time the action waits for the download. Default value
  is `60`s

```json
{
  "description": "Click Download",
  "action_name": "ClickElementToDownload",
  "action_parameters": {
    "xpath": "//a//span[contains(text(),'Download')]",
    "delay": 10,
    "timeout": 120
  }
}
```

### **WaitForElement**

This action waits for an element before it becomes available in the DOM. Useful to make sure the page is fully loaded -
e.g. all JS code is executed.

**Parameters**

- **xpath** - [REQ] XPATH defining the target element
- **delay** - [OPT] Timeout of the action in case the element is never available. Default value is `10`s.

```json
{
  "description": "Waiting until doc is loaded.",
  "action_name": "WaitForElement",
  "action_parameters": {
    "xpath": "//a[@href='/login']",
    "delay": 10
  }
}
```

### **MoveToElement**

This action waits moves mouse to the specified element.

Executes the ActionChain
method [move_to_element](https://selenium-python.readthedocs.io/api.html?highlight=mouse#selenium.webdriver.common.action_chains.ActionChains.move_to_element)

**Parameters**

- **xpath** - [REQ] XPATH defining the target element

```json
{
  "description": "Waiting until doc is loaded.",
  "action_name": "MoveToElement",
  "action_parameters": {
    "xpath": "//a[@href='/login']"
  }
}
```

### **GenericElementAction**

A generic action performed on the specified element. This action is a wrapper allowing execution of any method defined
for [`selenium.webdriver.remote.webelement`](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html)
. To see the list of all supported actions and its parameters see
the [selenium documentation](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html)

**Parameters**

- **xpath** - [REQ] XPATH defining the target element.
- **action_name** - [REQ] Any method name available in the `selenium.webdriver.remote.webelement` interface.
  e.g. `click`.
- **positional_arguments** - List of values as defined by the `webelement` method. e.g. ['My text']
  for `send_keys(value)` method
- **[other_parameters]** - any other parameters supported by the `selenium.webdriver.remote.webelement` interface. Note
  that the parameters must be specified exactly as they are defined on the method and all required parameters are
  needed.
- **description** - description of the action. Useful for debugging, the message is included in the job log on
  execution. Example below triggers
  the [send_keys](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html#selenium.webdriver.remote.webelement.WebElement.send_keys)
  method.

```json
{
  "description": "Fill in username",
  "action_name": "GenericElementAction",
  "action_parameters": {
    "xpath": "//input[@type='email']",
    "positional_arguments": {
      "attr": "username"
    },
    "method_name": "send_keys"
  }
}
```

## **System actions**

These actions are not related to web elements. They usually define actions on the Selenium driver itself. These include
for instance navigation between pop-up windows, explicit waiting, etc.

### **GenericDriverAction**

This action is a wrapper allowing execution of any method defined
for [`selenium.webdriver.remote.webdriver`](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#module-selenium.webdriver.remote.webdriver)
. To see the list of all supported actions and its parameters see
the [selenium documentation](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#module-selenium.webdriver.remote.webdriver)

**Parameters**

- **action_parameters** - any other parameters supported by
  the [webdriver](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#module-selenium.webdriver.remote.webdriver)
  interface. Note that the parameters must be specified exactly as they are defined on the method and all required
  parameters are needed.
- **action_name** - [REQ] Any method name available in the `selenium.webdriver` interface. e.g. `implicitly_wait`.
- **positional_arguments** - List of positional arguments as defined by the `webdriver` method.
- **description** - description of the action. Useful for debugging, the message is included in the job log on
  execution.

Example below triggers
the [implicitly_wait](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.implicitly_wait)
method.

```json
{
  "description": "Wait",
  "action_name": "GenericDriverAction",
  "action_parameters": {
    "positional_arguments": [
      60
    ],
    "method_name": "implicitly_wait"
  }
}
```

### **DriverSwitchToAction**

This action is a wrapper allowing execution of any method defined
for [`selenium.webdriver.remote.webdriver`](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#module-selenium.webdriver.remote.webdriver)
. To see the list of all supported actions and its parameters see
the [selenium documentation](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#module-selenium.webdriver.remote.webdriver)

**Parameters**

- **action_parameters** - any other parameters supported by
  the [webdriver.switch_to](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html?highlight=switch_to#selenium.webdriver.remote.webdriver.WebDriver.switch_to)
  interface. Note that the parameters must be specified exactly as they are defined on the method and all required
  parameters are needed.
- **action_name** - [REQ] Any method name available in the `selenium.webdriver.switch_to` interface. e.g. `frame`.
- **positional_arguments** - List of positional arguments as defined by the `webdriver.switch_to` method.
- **description** - description of the action. Useful for debugging, the message is included in the job log on
  execution.

**Supported methods examples**

- `default_content()`
- `frame(‘frame_name’)`
- `frame(1)`
- `parent_frame()`
- `window(‘main’)`

Example below triggers
the [frame](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html?highlight=switch_to#selenium.webdriver.remote.webdriver.WebDriver.switch_to_frame)
method. Switching to iframe with index 1.

```json
{
  "description": "Switch to frame",
  "action_name": "DriverSwitchToAction",
  "action_parameters": {
    "positional_arguments": [
      1
    ],
    "method_name": "frame"
  }
}
```

### **PrintHtmlPage**

This action is useful for debugging purposes, it allows to print out the full HTML code of a current page into the out
stream on a defined level.

Supported levels are:
CRITICAL = 50 ERROR = 40 WARNING = 30 INFO = 20 DEBUG = 10 NOTSET = 0

**Parameters**

- **log_level** - [OPT] Int number specifying the output log level.

```json
{
  "description": "Print whole page",
  "action_name": "PrintHtmlPage",
  "action_parameters": {
    "log_level": 10
  }
}
```

### **DownloadPageContent**

This action allows you to download whatever content is on the current or specified URL. The usecase may be downloading a
JSON, CSV or any arbitrary file that is on specified URL. When `use_stream_get` is set to `true`, the response is
streamed, so it supports large files.

All context of the browser such as cookies is maintained.

Typical usecase would be to login in previous steps and then call this method to download.

**Parameters**

- **result_file_name** - [REQUIRED] Result file name, e.g. 'report.json' it will be stored in 'out/tables/report.json'
  location
- **url** - [OPT] Optional URL of the resource. If left empty the current url of the browser is downloaded.
- **use_stream_get** - [OPT] Optional flag to control if the content is downloaded via simple GET request (does not
  execute JavaScript) or via Browser
    - Keep `true` when you need to download large binary file (e.g. CSV, JSON, etc.). It will download the content
      efficiently via streaming request
    - Use `false` when you need to download the HTML or page content and execute all JavaScript. This is equivalent of
      clicking download source in a browser.

```json
{
  "action_name": "DownloadPageContent",
  "description": "Download report JSON",
  "action_parameters": {
    "url": "https://example.com/finance/report",
    "result_file_name": "report.json",
    "use_stream_get": true
  }
}
```

### **SaveCookieFile**

This action allows you to store current cookies in a file storage.

The cookies file will be stored in json format `out/files/cookies.json`. With the following structure:

```json
{
  "cookies": [
    {
      "domain": "xxx"
    }
  ]
}
```

**Parameters**

- **tags** - [REQUIRED] List of tags the file will be stored with
- **is_permanent** - [OPT] Optional flag If true the cookies.json file will be stored permanently. DEFAULT: False

```json
{
  "description": "Save Cookie",
  "action_name": "SaveCookieFile",
  "action_parameters": {
    "tags": [
      "test_tag"
    ],
    "is_permanent": true
  }
}
```

### **SwitchToPopup**

This action navigates to a newly opened pop-up window. This is useful for instance for navigating into a new window
populated on login button. After the work is done action `SwitchToMainWindow` should be used to navigate back to the
main window.

```json
{
  "description": "Navigating to login popup window",
  "action_name": "SwitchToPopup",
  "action_parameters": {}
}
```

### **SwitchToMainWindow**

This action navigates back to the main window.

```json
{
  "description": "Switch focus back to main window",
  "action_name": "SwitchToMainWindow",
  "action_parameters": {}
}
```

### **SwitchToWindow**

This action navigates back to the window or tab at given index. The indexes are 0 based and incremental as the tabs or
windows are created. e.g. if your action leads to a new tab the tab index will be `1`, the main window will be on `0`.

```json
{
  "description": "Switch focus back to main window",
  "action_name": "SwitchToWindow",
  "action_parameters": {
    "index": 0
  }
}
```

### **TakeScreenshot**

This action takes a screenshot of current state and stores it in specified location and optionally
in [ImgBB](https://imgbb.com/) repository.

**Parameters**

- **name** - [REQ] The name parameter must be specified and defines the name of the resulting png file.
  E.g. `"name": "main_page"` results in
  `data/screens/main_page.png` file.
- **folder** - [OPT] Specifies the screenshot folder name in the `/data` folder. By default set to `screens`
- **imgbb_token** - [OPT] Your personal [imgbb token](https://api.imgbb.com/). The resulting files are stored in
  form `[KBC_RUNID]_[name].png`

```json
{
  "description": "Take screenshot of a main page",
  "action_name": "TakeScreenshot",
  "action_parameters": {
    "name": "main_page",
    "folder": "out/files",
    "#imgbb_token": "sasdasdasd"
  }
}
```

### **Wait**

This action pauses execution for specified amount of time (in seconds).

```json
{
  "description": "Pause execution for 10s",
  "action_name": "Wait",
  "action_parameters": {
    "seconds": 10
  }
}
```

### **ConditionalAction**

Allows to define an action that is executed based on result of some other action. This is useful for navigation between
different execution branches, for instance when using the stored cookies first run might require login credentials and
the other may not because the token is already saved in the cookie file. This action allows skipping the whole `login`
execution step, when some defined condition fails.

**Parameters**

- **test_action** - Testing action object, if the action passes the result_action will be executed.
- **result_action** - The action executed if the entry action passes.
- **fail_action** - [OPT] The action executed if the entry action fails. If not specified, excution continues on
  failure.

```json
{
  "description": "Look for modal form in case of second login and try to close it and refresh.",
  "action_name": "ConditionalAction",
  "action_parameters": {
    "test_action": {
      "action_name": "GenericElementAction",
      "action_parameters": {
        "xpath": "//div[@role='dialog' and @aria-labelledby='dls-modal__Login']//button[@type='button']",
        "method_name": "click"
      }
    },
    "result_action": {
      "action_name": "GenericDriverAction",
      "action_parameters": {
        "method_name": "refresh"
      }
    }
  }
}
```

### **BreakBlockExecution**

This action allows breaking the current `Step` execution and skipping to the next step.

```json
{
  "description": "Already logged in, skipping the login branch.",
  "action_name": "BreakBlockExecution"
}
```

### **ExitAction**

This action allows you to stop the execution any time with specified status and message

Supported levels are:
CRITICAL = 50 ERROR = 40 WARNING = 30 INFO = 20 DEBUG = 10 NOTSET = 0

**Parameters**

- **status** - Int number specifying the exit status. Anything `>=1` will result in error. `0` is success.
- **message** - Message that will be printed in the log.

```json
{
  "description": "Stop execution",
  "action_name": "ExitAction",
  "action_parameters": {
    "status": 1,
    "message": "Failed execution because user wanted to!"
  }
}
```

## User parameters

The component support specifying user parameters. These are values that can be accesses from each
`Action` instead of hardcoded parameters. This is very useful when need of hashed values (keys prefixed with `#` get
encrypted automatically in Keboola Connection.

These parameters also support use of dynamic functions.

In configuration the user parameters are defined in `user_parameters` object. For example:

```json
"user_parameters": {
"username": "myUser",
"#password": "xxx",
"report_format": "CSV",
"url": {
"function": "concat",
"args":[
"http://example.com",
"/test?date=",
{"function": "string_to_date",
"args": [
"yesterday",
"%Y-%m-%d"
]
}
]
}
}
```

The above parameters may be accessed from within `Actions` like that:

**Get URL with dynamic date**

```json
{
  "description": "Get file from url",
  "action_name": "GenericDriverAction",
  "action_parameters": {
    "positional_arguments": [
      {
        "attr": "url"
      }
    ],
    "method_name": "get"
  }
}
```

**Fill in password from hashed user value**

```json
{
  "description": "Input password.",
  "action_name": "GenericElementAction",
  "action_parameters": {
    "xpath": "//*[@id=\"password\"]",
    "positional_arguments": [
      {
        "attr": "#password"
      }
    ],
    "method_name": "send_keys"
  }
}
```

## Dynamic Functions

The application support functions that may be applied on parameters in the configuration to get dynamic values.

Currently these functions work only in the `user_parameters` scope. Place the required function object instead of the
user parameter value.

**Function object**

```json
{
  "function": "string_to_date",
  "args": [
    "yesterday",
    "%Y-%m-%d"
  ]
}
```

**Function Nesting**

Nesting of functions is supported:

```json
{
  "user_parameters": {
    "url": {
      "function": "concat",
      "args": [
        "http://example.com",
        "/test?date=",
        {
          "function": "string_to_date",
          "args": [
            "yesterday",
            "%Y-%m-%d"
          ]
        }
      ]
    }
  }
}

```

### string_to_date

Function converting string value into a datestring in specified format. The value may be either date in `YYYY-MM-DD`
format, or a relative period e.g. `5 hours ago`, `yesterday`,`3 days ago`, `4 months ago`, `2 years ago`, `today`.

The result is returned as a date string in the specified format, by default `%Y-%m-%d`

The function takes two arguments:

1. [REQ] Date string
2. [OPT] result date format. The format should be defined as in http://strftime.org/

**Example**

```json
{
  "user_parameters": {
    "yesterday_date": {
      "function": "string_to_date",
      "args": [
        "yesterday",
        "%Y-%m-%d"
      ]
    }
  }
}
```

The above value is then available in step contexts as:

```json
"to_date": {"attr": "yesterday_date"}
```

### concat

Concat an array of strings.

The function takes an array of strings to concat as an argument

**Example**

```json
{
  "user_parameters": {
    "url": {
      "function": "concat",
      "args": [
        "http://example.com",
        "/test"
      ]
    }
  }
}
```

The above value is then available in step contexts as:

```json
"url": {"attr": "url"}
```

## Sample configuration

```json
{
  "user_parameters": {},
  "driver": "Chrome",
  "start_url": "https://support.spatialkey.com/spatialkey-sample-csv-data",
  "random_wait_range": [
    1,
    10
  ],
  "store_cookies": false,
  "docker_mode": true,
  "steps": [
    {
      "description": "Test if should continue",
      "actions": [
        {
          "description": "Continue if search field exists.",
          "action_name": "ConditionalAction",
          "action_parameters": {
            "test_action": {
              "action_name": "GenericElementAction",
              "action_parameters": {
                "xpath": "//div[@id='livesearch']",
                "method_name": "click"
              }
            },
            "fail_action": {
              "action_name": "BreakBlockExecution"
            }
          }
        },
        {
          "description": "live-search found, continue in block",
          "action_name": "GenericBrowserAction",
          "action_parameters": {
            "positional_arguments": [
              2
            ],
            "method_name": "implicitly_wait"
          }
        }
      ]
    },
    {
      "description": "Choose and download report.",
      "actions": [
        {
          "description": "Click Download",
          "action_name": "GenericElementAction",
          "action_parameters": {
            "xpath": "//a[@href='http://spatialkeydocs.s3.amazonaws.com/FL_insurance_sample.csv.zip']",
            "method_name": "click"
          }
        },
        {
          "description": "Wait",
          "action_name": "GenericBrowserAction",
          "action_parameters": {
            "positional_arguments": [
              30
            ],
            "method_name": "implicitly_wait"
          }
        }
      ]
    }
  ],
  "debug": false
}
```

# Configuration creation

To configure the web crawler it is needed to know the expected DOM structure of the website crawled. For that it is
recommended to run the component locally, executing the `component.py` `run` method. This can be done either using your
favourite IDE such as PyCharm or manually from the command line by running:

```
python -u /code/src/component.py
```

from the root folder.

Please note that you should set up the `KBC_DATADIR` environment variable pointing to your configuration folder in case
you do not have the `data` folder present in the root.

For the local development it is also necessary to have Chrome browser and the
corresponding [Chrome Driver](https://chromedriver.chromium.org/downloads)  installed and set the `dokcer_mode`
configuration parameter to `false`. This way it is possible to see the actual effects of each steps defined directly in
the browser and develop the configuration step-by-step. For inspecting the DOM structure it is recommended to use some
Chrome extension that allows you to retrieve xPath of selected elements for
instance  [`xpath-finder`](https://github.com/trembacz/xpath-finder)
or using the [Chrome Dev Console](https://developers.google.com/web/tools/chrome-devtools/console/) available by
pressing `F12` or right click -> explore element.

## Development

For local testing it is useful to include `data` folder in the root and use docker-compose commands to run the container
or execute tests.

If required, change the local data folder path in the `docker-composer` file to your custom one:

```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository and init the workspace with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

# Integration

For information about deployment and integration with KBC, please refer to
the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)

================================================
File: Dockerfile
================================================
FROM python:3.10
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install google chrome
#RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
#RUN sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'

RUN apt -y update
RUN apt install -y chromium chromium-driver

## install chrome webdriver
#RUN wget https://chromedriver.storage.googleapis.com/73.0.3683.20/chromedriver_linux64.zip
#RUN apt-get install unzip
#RUN unzip chromedriver_linux64.zip
#RUN mv chromedriver /usr/local/bin/
#RUN chown root:root /usr/local/bin/
#RUN chmod 755 /usr/local/bin/chromedriver

RUN apt-get install -y xvfb
# set display port to avoid crash
ENV DISPLAY=:99

RUN pip3 install pyvirtualdisplay

# COPY to code
COPY . /code/

# set display port to avoid crash
ENV DISPLAY=:99

RUN pip3 install flake8
# process dependency links to install kds-team.keboola-util library
#RUN apt-get install python-pil
RUN pip3 install -r /code/requirements.txt


WORKDIR /code/


CMD ["python3", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
Copyright (c) 2018 Keboola DS

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog


================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data

    mem_limit: 256m
  test:
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - build_n_test.sh
  bash:
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data

    command:
      - /bin/sh
      - build_n_test.sh

================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
keboola.component==1.3.7
keboola.utils==1.1.0
mock==4.0.3
freezegun==1.2.1
requests==2.28.0
selenium==3.141.0
nested-lookup==0.2.23
Pillow==9.1.1


================================================
File: component_config/component_long_description.md
================================================
Application allowing to browse website, fill login forms, click elements, 
download content available. It uses Selenium web driver and Chrome browser to perform the defined steps.

================================================
File: component_config/component_short_description.md
================================================
Browse website, click elements, download content as a normal user would do.

================================================
File: component_config/configRowSchema.json
================================================
{}

================================================
File: component_config/configSchema.json
================================================
{}

================================================
File: component_config/configuration_description.md
================================================
Full documentation is available [here](https://bitbucket.org/kds_consulting_team/kds-team.ex-web-content-crawler/src/master/README.md)

================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/stack_parameters.json
================================================
{}

================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi

================================================
File: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"

================================================
File: src/component.py
================================================
'''
Template Component main class.

'''

import argparse
import json
import logging
import os

import keboola.utils as kutils
from keboola.component import ComponentBase, UserException
from nested_lookup import nested_lookup
from selenium.common.exceptions import WebDriverException

from webcrawler.selenium_crawler import BreakBlockExecution, ExitAction
from webcrawler.selenium_crawler import CrawlerActionBuilder
from webcrawler.selenium_crawler import GenericCrawler

# configuration variables
KEY_RESOLUTION = 'resolution'
KEY_MAX_WINDOW = 'maximize_window'
KEY_RANDOM_WAIT = 'random_wait_range'
KEY_USER_PARS = 'user_parameters'
KEY_DRIVER_OPTIONS = 'driver_options'
KEY_PAGELOAD_TIMEOUT = 'page_load_timeout'
KEY_START_URL = 'start_url'
KEY_STORE_COOKIES = 'store_cookies'
KEY_DOCKER_MODE = 'docker_mode'

KEY_STEPS = 'steps'
KEY_DESCRIPTION = 'description'
KEY_ACTIONS = 'actions'
KEY_ACTION_PARAMETERS = 'action_parameters'
KEY_ACTION_NAME = 'action_name'

MANDATORY_PARS = [KEY_STEPS, KEY_START_URL]


class Component(ComponentBase):

    def __init__(self, data_path=None):
        ComponentBase.__init__(self, data_path_override=data_path)

        try:
            self.validate_configuration_parameters(MANDATORY_PARS)
        except ValueError as e:
            logging.error(e)
            exit(1)

        logging.info("Setting up crawler..")
        # intialize instance parameters
        random_wait = self.configuration.parameters.get(KEY_RANDOM_WAIT, None)
        options = self.configuration.parameters.get(KEY_DRIVER_OPTIONS)
        kbc_runid = os.environ.get('KBC_RUNID')
        self.web_crawler = GenericCrawler(self.configuration.parameters[KEY_START_URL], self.tables_out_path,
                                          component_interface=self,
                                          runid=kbc_runid,
                                          random_wait_range=random_wait, options=options,
                                          docker_mode=self.configuration.parameters.get(KEY_DOCKER_MODE, True),
                                          resolution=self.configuration.parameters.get(KEY_RESOLUTION),
                                          page_load_timeout=self.configuration.parameters.get(KEY_PAGELOAD_TIMEOUT,
                                                                                              1000))

        self.user_functions = Component.UserFunctions(self)

    def run(self, debug=False):
        """
        Main execution code
        """
        crawler_steps = self.configuration.parameters[KEY_STEPS]

        crawler_steps = self._fill_in_user_parameters(crawler_steps, self.configuration.parameters.get(KEY_USER_PARS))

        logging.info("Entering first step URL %s", self.web_crawler.start_url)
        self.web_crawler.start()
        try:
            if self.configuration.parameters.get(KEY_MAX_WINDOW):
                self.web_crawler.maximize_window()

            # set cookies, needs to be done after the domain load
            if self.configuration.parameters.get(KEY_STORE_COOKIES):
                logging.info('Loading cookies from last run.')
                last_state = self.get_state_file()
                self.web_crawler.load_cookies(last_state.get('cookies'))

            for st in crawler_steps:
                logging.info(st.get(KEY_DESCRIPTION, ''))
                break_call = self._perform_crawler_actions(st.get(KEY_ACTIONS))
                if break_call:
                    break

            if self.configuration.parameters.get(KEY_STORE_COOKIES):
                logging.info('Storing cookies for next run.')
                cookies = self.web_crawler.get_cookies()
                state = {'cookies': cookies}
                self.write_state_file(state)
        except Exception:
            raise
        finally:
            self.web_crawler.stop()

        logging.info("Extraction finished")

    def _perform_crawler_actions(self, actions):
        break_call = False
        for a in actions:
            # KBC bug, empty object as array
            action_params = a.get(KEY_ACTION_PARAMETERS, {})
            if isinstance(action_params, list) and len(action_params) == 0:
                action_params = {}

            logging.info(a.get(KEY_DESCRIPTION, ''))
            action = CrawlerActionBuilder.build(a[KEY_ACTION_NAME], **action_params)
            try:
                res = self.web_crawler.perform_action(action)

                # check if is break action
                if isinstance(res, BreakBlockExecution):
                    break
                # check if is exit action
                if isinstance(action, ExitAction):
                    break_call = True
                    break
            except WebDriverException as e:
                raise UserException(f"Action '{a[KEY_ACTION_NAME]}' failed with error: {e.msg}") from e
        return break_call

    def _fill_in_user_parameters(self, crawler_steps, user_param):
        # convert to string minified
        steps_string = json.dumps(crawler_steps, separators=(',', ':'))
        # dirty and ugly replace
        for key in user_param:
            if isinstance(user_param[key], dict):
                # in case the parameter is function, validate, execute and replace value with result
                user_param[key] = self._perform_custom_function(key, user_param[key])

            lookup_str = '{"attr":"' + key + '"}'
            steps_string = steps_string.replace(lookup_str, '"' + str(user_param[key]) + '"')
        new_steps = json.loads(steps_string)
        non_matched = nested_lookup('attr', new_steps)

        if non_matched:
            raise ValueError(
                'Some user attributes [{}] specified in configuration '
                'are not present in "user_parameters" field.'.format(non_matched))
        return new_steps

    def _perform_custom_function(self, key, function_cfg):
        if not function_cfg.get('function'):
            raise ValueError(
                F'The user parameter {key} value is object and is not a valid function object: {function_cfg}')
        new_args = []
        for arg in function_cfg.get('args'):
            if isinstance(arg, dict):
                arg = self._perform_custom_function(key, arg)
            new_args.append(arg)
        function_cfg['args'] = new_args

        return self.user_functions.execute_function(function_cfg['function'], *function_cfg.get('args'))

    class UserFunctions:
        """
        Custom function to be used in configruation
        """

        def __init__(self, component: ComponentBase):
            # get access to the environment
            self.kbc_env = component

        def validate_function_name(self, function_name):
            supp_functions = self.get_supported_functions()
            if function_name not in self.get_supported_functions():
                raise ValueError(
                    F"Specified user function [{function_name}] is not supported! "
                    F"Supported functions are {supp_functions}")

        @staticmethod
        def get_supported_functions():
            return [method_name for method_name in dir(Component.UserFunctions)
                    if callable(getattr(Component.UserFunctions, method_name)) and not method_name.startswith('__')]

        def execute_function(self, function_name, *pars):
            self.validate_function_name(function_name)
            return getattr(Component.UserFunctions, function_name)(self, *pars)

        def string_to_date(self, date_string, date_format='%Y-%m-%d'):
            start_date, end_date = kutils.parse_datetime_interval(date_string, date_string, strformat=date_format)
            return start_date

        def concat(self, *args):
            return ''.join(args)


"""
    Main entrypoint
"""

if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument('--data', help='Data folder path')

    args = parser.parse_args()
    try:
        comp = Component(data_path=args.data)
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        detail = ''
        if len(exc.args) > 1:
            detail = exc.args[1]
        logging.exception(exc, extra={"full_message": detail})
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: src/webcrawler/selenium_crawler.py
================================================
import abc
import base64
import json
import logging
import os
import random
import time
from typing import List

import requests
from keboola.component import ComponentBase, UserException
from selenium import webdriver
from selenium.common.exceptions import WebDriverException
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver.support.ui import WebDriverWait


class CrawlerAction:
    KEY_ACTION_PARAMETERS = 'action_parameters'
    KEY_ACTION_NAME = 'action_name'

    @abc.abstractmethod
    def execute(self, driver: webdriver, **extra_args):
        pass

    # element actions


class ClickElementToDownload(CrawlerAction):
    def __init__(self, xpath: str, delay=30, timeout=60, result_file_name=None):
        """

        :param xpath: XPATH defining the target element
        :param delay: Wait time in seconds before the action is executed.
        :param timeout: Time in seconds that define the maximum time the action waits for the download.
        :param result_file_name:
        """
        self.xpath = xpath
        self.delay = delay
        self.timeout = timeout
        self.result_file_name = result_file_name

    def execute(self, driver: webdriver, **extra_args):
        download_folder = extra_args.pop('download_folder')
        exisitng_files = [f for f in os.listdir(download_folder) if os.path.isfile(os.path.join(download_folder, f))]
        driver.find_element(By.XPATH, self.xpath).click()
        time.sleep(self.delay)
        self._wait_until_new_file(exisitng_files, self.timeout, download_folder)

    def _wait_until_new_file(self, original_files, timeout, download_folder):
        # wait until new file is present
        new_files = None
        start_time = time.time()
        is_timedout = False
        while not new_files and not is_timedout:
            existng_files = [f for f in os.listdir(download_folder)
                             if os.path.isfile(os.path.join(download_folder, f))]
            new_files = [f for f in existng_files if f not in original_files]
            elapsed_time = time.time() - start_time
            if elapsed_time > timeout:
                is_timedout = True

        if is_timedout:
            raise TimeoutError('File download timed out! Try to raise the timeout interval.')
        return new_files


class GenericShadowDomElementAction(CrawlerAction):
    CSS_SHADOW_HOST = '#shadow-root'

    def __init__(self, method_name, xpath: str, shadow_parent_element, **kwargs):
        self.xpath = xpath
        self.method_name = method_name
        self.method_args = kwargs
        self.shadow_parent_element = shadow_parent_element

    def execute(self, driver: webdriver, **extra_args):
        positional_args = self.method_args.pop('positional_arguments', [])
        element = self.find_shadow_dom_element(self.xpath, driver, self.shadow_parent_element)
        method = getattr(element, self.method_name)
        return method(*positional_args, **self.method_args)

    def find_shadow_dom_element(self, xpath, driver, root_element_tag):
        shadow_root = self.get_ext_shadow_root(driver, driver.find_element_by_tag_name(root_element_tag))
        element = shadow_root.find_element(By.XPATH, xpath)
        return element

    def get_ext_shadow_root(self, driver, element):
        shadow_root = driver.execute_script('return arguments[0].shadowRoot', element)
        return shadow_root


class GenericElementAction(CrawlerAction):
    def __init__(self, method_name, xpath: str, **kwargs):
        self.xpath = xpath
        self.method_name = method_name
        self.method_args = kwargs

    def execute(self, driver: webdriver, **extra_args):
        positional_args = self.method_args.pop('positional_arguments', [])
        element = driver.find_element(By.XPATH, self.xpath)
        method = getattr(element, self.method_name)
        return method(*positional_args, **self.method_args)


class MoveToElement(CrawlerAction):
    def __init__(self, xpath: str):
        self.xpath = xpath

    def execute(self, driver: webdriver, **extra_args):
        element = driver.find_element(By.XPATH, self.xpath)
        ActionChains(driver).move_to_element(element).perform()
        return element


class ExitAction(CrawlerAction):
    def __init__(self, status: int, message: str):
        self.status = status
        self.message = message

    def execute(self, driver: webdriver, **extra_args):
        if self.status >= 1:
            raise UserException(f"Execution stopped with message: {self.message}")
        else:
            logging.info(f"Execution stopped with message: {self.message}")


class TypeText(CrawlerAction):
    def __init__(self, **kwargs):
        self.method_args = kwargs

    def execute(self, driver: webdriver, **extra_args):
        positional_args = self.method_args.pop('positional_arguments', [])
        ActionChains(driver).send_keys(*positional_args)


class WaitForElement(CrawlerAction):
    def __init__(self, xpath: str, delay=10):
        """

        :param xpath:
        :param delay: Timeout of the action in case the element is never available
        """
        self.xpath = xpath
        self.delay = delay

    def execute(self, driver: webdriver, **extra_args):
        wait = WebDriverWait(driver, self.delay)
        el = wait.until(ec.visibility_of_element_located((By.XPATH, self.xpath)))
        return el


class BreakBlockExecution(CrawlerAction):
    """
    Returns self to notify executor that it should break the current branch and switch to another.
    """

    def execute(self, driver: webdriver, **extra_args):
        return self


class PrintHtmlPage(CrawlerAction):
    def __init__(self, log_level=None):
        """

        :type log_level: int
        """
        self.log_level = log_level

    def execute(self, driver: webdriver, **extra_args):
        html = driver.page_source
        if self.log_level:
            logging.log(self.log_level, html)


class DownloadPageContent(CrawlerAction):
    def __init__(self, result_file_name, url=None, use_stream_get=True):
        self.result_file_name = result_file_name
        self.url = url
        self.use_stream_get = use_stream_get

    def execute(self, driver: webdriver, **extra_args):
        download_folder = extra_args.pop('download_folder')
        res_file_path = os.path.join(download_folder, self.result_file_name)

        url = self.url or driver.current_url
        if self.use_stream_get:
            self._get_content_via_get(driver, url, res_file_path)
        else:
            self._get_content_via_browser(driver, url, res_file_path)

    def _get_content_via_browser(self, driver: webdriver, url: str, res_file_path: str):
        driver.get(url)
        with open(res_file_path, 'w+') as out:
            out.write(driver.page_source)

    def _get_content_via_get(self, driver: webdriver, url: str, res_file_path: str):
        # get cookies
        cookies = driver.get_cookies()
        s = requests.Session()
        for cookie in cookies:
            s.cookies.set(cookie['name'], cookie['value'])

        res = s.get(url, stream=True)
        with open(res_file_path, 'wb+') as out:
            for chunk in res.iter_content(chunk_size=8192):
                out.write(chunk)


class SaveCookieFile(CrawlerAction):
    """
    Stores cookies.json in out/files folder for later reference.
    """

    def __init__(self, tags: List[str], is_permanent: bool = False):
        """

        Args:
            tags: list of tags to add to the file
            is_permanent (bool): If true the cookies.json file will be stored permanently
        """
        self.tags = tags
        self.is_permanent = is_permanent

    def execute(self, driver: webdriver, **extra_args):
        component: ComponentBase = extra_args.pop('component_interface')
        out_file = component.create_out_file_definition('cookies.json', tags=self.tags, is_permanent=self.is_permanent)
        res_file_path = out_file.full_path

        # get cookies
        cookies = driver.get_cookies()

        with open(res_file_path, 'w+') as out:
            json.dump({"cookies": cookies}, out)
        component.write_manifest(out_file)


class ConditionalAction(CrawlerAction):
    def __init__(self, test_action, result_action=None, fail_action=None):
        """


        :param test_action: Testing action, if the action passes the result_action will be executed.
        :type test_action: CrawlerAction
        :param result_action: The action executed if the entry action passes
        :type result_action: CrawlerAction
        :param fail_action: The action executed if the entry action fails.
        If not specified, excution continues on failure.
        :type result_action: CrawlerAction
        """
        self.test_action = test_action
        self.result_action = result_action
        self.fail_action = fail_action

    def execute(self, driver: webdriver, **extra_args):
        logging.info('Executing test action %s', type(self.test_action).__name__)
        try:
            self.test_action.execute(driver, **extra_args)
        except WebDriverException as e:
            logging.debug('The testing action %s with params [%s]  failed with error: %s',
                          type(self.test_action).__name__,
                          self.test_action.__dict__, str(e))

            logging.info('The testing action %s failed with error: %s',
                         type(self.test_action).__name__, str(e))
            if self.fail_action:
                logging.info('Executing action (%s) defined on failure.', type(self.fail_action).__name__)
                return self.fail_action.execute(driver, **extra_args)
            else:
                logging.info('Continue execution..')
                return

        # test passed
        if self.result_action:
            logging.info('Test action passed, executing result_action %s', type(self.result_action).__name__)
            return self.result_action.execute(driver, **extra_args)
        else:
            logging.info('No result action specified, continuing..')


# System actions

class GenericDriverAction(CrawlerAction):
    def __init__(self, method_name, **kwargs):
        self.method_name = method_name
        self.method_args = kwargs

    def execute(self, driver: webdriver, **extra_args):
        positional_args = self.method_args.pop('positional_arguments', [])
        method = getattr(driver, self.method_name)
        from selenium.common.exceptions import TimeoutException
        res = None
        try:

            res = method(*positional_args, **self.method_args)
        except TimeoutException:
            pass
        return res


class DriverSwitchToAction(CrawlerAction):
    def __init__(self, method_name, **kwargs):
        self.method_name = method_name
        self.method_args = kwargs

    def execute(self, driver: webdriver, **extra_args):
        positional_args = self.method_args.pop('positional_arguments', [])
        method = getattr(driver.switch_to, self.method_name)
        from selenium.common.exceptions import TimeoutException
        res = None
        try:

            res = method(*positional_args, **self.method_args)
        except TimeoutException:
            pass
        return res


class SwitchToWindow(CrawlerAction):
    def __init__(self, index: int):
        self.window_index = index

    def execute(self, driver: webdriver, **extra_args):
        from selenium.common.exceptions import TimeoutException
        res = None
        try:
            window_handle = driver.window_handles[self.window_index]
            res = driver.switch_to.window(window_handle)
        except TimeoutException:
            pass
        except KeyError:
            raise ValueError(f"Window or Tab index {self.window_index} not found!")
        return res


class SwitchToPopup(CrawlerAction):
    def execute(self, driver: webdriver, **extra_args):
        main_handle = extra_args.pop('main_handle')
        new_window_handle = None
        while not new_window_handle:
            for handle in driver.window_handles:
                if handle != main_handle:
                    new_window_handle = handle
                    break
        driver.switch_to.window(new_window_handle)


class SwitchToMainWindow(CrawlerAction):
    def execute(self, driver: webdriver, **extra_args):
        main_handle = extra_args.pop('main_handle')
        driver.switch_to.window(main_handle)


class Wait(CrawlerAction):
    """
    Pauses execution for specified amount of time (s).
    """

    def __init__(self, seconds):
        """

        :param seconds: Seconds to wait
        """
        self.seconds = seconds

    def execute(self, driver: webdriver, **extra_args):
        time.sleep(self.seconds)


class BasicLogin(CrawlerAction):
    """
    Loign using the auth popup
    """

    def __init__(self, user, password):
        """


        """
        self.user = user
        self.password = password

    def execute(self, driver: webdriver, **extra_args):
        alert = driver.switch_to_alert()
        alert.authenticate(self.user, self.password)


class TakeScreenshot(CrawlerAction):
    """
    Pauses execution for specified amount of time (s).
    """

    def __init__(self, name, folder='screens', imgbb_token=None):
        """

        :param seconds: Seconds to wait
        """
        self.folder = folder
        self.name = name
        self.imgbb_token = imgbb_token

    def execute(self, driver: webdriver, **extra_args):
        folder_path = os.path.join(extra_args.pop('data_folder'), self.folder)
        runid_prefix = extra_args.get('runid', '')
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)

        # save image file
        img_path = os.path.join(folder_path, self.name + '.png')
        driver.save_screenshot(img_path)
        if self.imgbb_token:
            self._store_in_imgbb(img_path, self.imgbb_token, str(runid_prefix) + '_' + self.name)

    def _store_in_imgbb(self, img_path, token, name):
        with open(img_path, "rb") as image_file:
            encoded_string = base64.b64encode(image_file.read())
        values = {
            "image": encoded_string
        }

        params = {
            'key': token,
            "name": name
        }
        response = requests.post('https://api.imgbb.com/1/upload', data=values,
                                 params=params)

        if response.status_code > 299:
            raise RuntimeError(F'Failed to store image {name} in the ImgBB repository')


class CrawlerActionBuilder:

    @staticmethod
    def build(action_name, **parameters):
        # TODO: validate parameters based on type
        supported_actions = CrawlerActionBuilder.get_supported_actions()
        if action_name not in list(supported_actions.keys()):
            raise ValueError('{} is not supported action, '
                             'suported values are: [{}]'.format(action_name,
                                                                CrawlerAction.__subclasses__()))

        # special case of conditional action
        if action_name == 'ConditionalAction':
            cond_action = supported_actions[action_name](**parameters)
            return CrawlerActionBuilder._build_conditional_action(cond_action)
        elif action_name == 'TakeScreenshot':
            parameters['imgbb_token'] = parameters.pop('#imgbb_token', None)
            return supported_actions[action_name](**parameters)
        else:
            return supported_actions[action_name](**parameters)

    @staticmethod
    def get_supported_actions():
        supported_actions = {}
        for c in CrawlerAction.__subclasses__():
            supported_actions[c.__name__] = c
        return supported_actions

    @staticmethod
    def _build_conditional_action(cond_action: ConditionalAction):
        test_action_def = cond_action.test_action
        action_pars = test_action_def.get(CrawlerAction.KEY_ACTION_PARAMETERS, {})
        cond_action.test_action = CrawlerActionBuilder.build(test_action_def[CrawlerAction.KEY_ACTION_NAME],
                                                             **action_pars)

        if cond_action.result_action:
            action_def = cond_action.result_action
            action_pars = action_def.get(CrawlerAction.KEY_ACTION_PARAMETERS, {})
            cond_action.result_action = CrawlerActionBuilder.build(action_def[CrawlerAction.KEY_ACTION_NAME],
                                                                   **action_pars)

        if cond_action.fail_action:
            action_def = cond_action.fail_action
            action_pars = action_def.get(CrawlerAction.KEY_ACTION_PARAMETERS, {})
            cond_action.fail_action = CrawlerActionBuilder.build(action_def[CrawlerAction.KEY_ACTION_NAME],
                                                                 **action_pars)
        return cond_action


class GenericCrawler:

    def __init__(self, start_url, download_folder, component_interface: ComponentBase, runid='', docker_mode=True,
                 random_wait_range=None,
                 resolution='1920x1080',
                 proxy=None,
                 driver_type='Chrome',
                 page_load_timeout=300,
                 options=None):

        if resolution is None:
            resolution = '1920x1080'

        res_sizes = resolution.split('x')
        if len(res_sizes) != 2:
            raise ValueError("Resolution is in invalid format, you must provide it as WIDTHxEIGHT. e.g. 1024x980")
        self.start_url = start_url
        self.random_wait_range = random_wait_range
        self.download_folder = download_folder
        self.component_interface = component_interface
        self.runid = runid
        self._docker_mode = docker_mode

        self._driver = self._get_driver(driver_type, download_folder, options, docker_mode)
        self._driver.set_page_load_timeout(page_load_timeout)
        self._driver.set_script_timeout(page_load_timeout)
        self._main_window_handle = None
        while not self._main_window_handle:
            self._main_window_handle = self._driver.current_window_handle

    def start(self):
        # TODO: validate URL
        self._driver.get(self.start_url)

    def get_cookies(self):
        return self._driver.get_cookies()

    def load_cookies(self, cookies):
        if not cookies:
            return
        for cookie in cookies:
            self._driver.add_cookie(cookie)

    def stop(self):
        self._driver.quit()

    def maximize_window(self):
        self._driver.maximize_window()

    def perform_action(self, action: CrawlerAction):
        data_folder = self.component_interface.data_folder_path
        res = action.execute(self._driver, download_folder=self.download_folder,
                             data_folder=data_folder,
                             component_interface=self.component_interface,
                             runid=self.runid, main_handle=self._main_window_handle)

        self._wait_random(self.random_wait_range)
        return res

    def _get_driver(self, driver_type, download_folder, options, docker_mode):
        if driver_type == 'Chrome':
            options = webdriver.ChromeOptions()
            prefs = {'download.default_directory': download_folder,
                     "download.prompt_for_download": False,
                     "safebrowsing.enabled": False
                     }
            options.add_experimental_option('prefs', prefs)
            # setting for running in docker
            # TODO: remove hardcoding
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-features=VizDisplayCompositor')
            if docker_mode:
                options.add_argument('--headless')
                options.add_argument("--disable-dev-shm-usage")  # overcome limited resource problems
                options.add_argument("--window-size=1920,1080")

            # options.add_argument("disable-infobars")
            # options.add_argument("--disable-extensions")
            # options.add_argument("--disable-gpu")  # applicable to windows os only
            # options.add_argument("--disable-dev-shm-usage")  # overcome limited resource problems
            # start maximized does not work when in docker mode
            driver = webdriver.Chrome(options=options)
            # self.enable_download_in_headless_chrome()
        else:
            raise ValueError('{} web driver is not supported!'.format(driver_type))
        return driver

    def _wait_random(self, _range):
        if _range:
            wait_int = random.randint(_range[0], _range[1])
            time.sleep(wait_int)
        else:
            return


================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-web-content-crawler" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: ${{ vars.KBC_DEVELOPERPORTAL_USERNAME }}

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

