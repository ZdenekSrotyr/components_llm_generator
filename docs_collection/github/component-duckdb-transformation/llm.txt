Directory structure:
└── keboola-component-duckdb-transformation/
    ├── README.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── pyproject.toml
    ├── uv.lock
    ├── .python-version
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           └── tables/
    │               ├── days.csv
    │               ├── days.csv.manifest
    │               └── sliced/
    │                   ├── a.csv
    │                   └── b.csv
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   ├── duckdb_client.py
    │   ├── in_tables_creator.py
    │   ├── query_orchestrator.py
    │   ├── sql_parser.py
    │   ├── system_resources.py
    │   ├── actions/
    │   │   ├── __init__.py
    │   │   ├── execution_plan_visualization.py
    │   │   ├── expected_input_tables.py
    │   │   └── lineage_visualization.py
    │   └── validators/
    │       ├── __init__.py
    │       └── sql_validator.py
    ├── tests/
    │   ├── __init__.py
    │   ├── test_component.py
    │   ├── test_functional.py
    │   └── unit/
    │       ├── __init__.py
    │       ├── test_execution_plan_visualization_action.py
    │       ├── test_expected_input_tables_action.py
    │       └── test_lineage_visualization_action.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
FILE: README.md
================================================
keboola.duckdb-transformation
=============

DuckDB SQL transformation component for Keboola platform with block-based orchestration.

**Features:**
- **Consecutive Blocks**: Blocks execute in order, ensuring logical separation of processing phases
- **Parallel Scripts**: Scripts within each block run in parallel when dependencies allow
- **Automatic DAG**: Component creates its own dependency graph based on SQL analysis
- **SQLGlot Integration**: Advanced SQL parsing and dependency detection
- **Performance Optimization**: Parallel execution with configurable thread limits
- **System Resource Detection**: Automatic detection of CPU and memory limits for optimal DuckDB settings
- **Local File Support**: Support for CSV and Parquet files from local storage
- **Data Type Inference**: Optional automatic data type detection for CSV files
- **SQL Validation**: Startup and on-demand SQL syntax validation
- **Visualization Actions**: Execution plan and data lineage visualization

**Table of Contents:**


Functionality Notes
===================

Prerequisites
=============

Ensure you have the necessary API token, register the application, etc.

Features
========

| **Feature**             | **Description**                               |
|-------------------------|-----------------------------------------------|
| Block-Based Orchestration | Consecutive blocks with parallel scripts execution |
| Automatic DAG Creation | SQL dependency analysis and execution planning |
| SQLGlot Integration    | Advanced SQL parsing and syntax validation    |
| Parallel Processing     | Configurable thread limits for performance    |
| Memory Management       | Configurable memory limits for DuckDB         |
| Syntax Checking         | Startup and on-demand SQL validation          |
| System Resource Detection | Automatic CPU and memory detection for optimal settings |
| Local File Support      | Support for CSV and Parquet files from local storage |
| Data Type Inference     | Optional automatic data type detection for CSV files |
| Execution Visualization | Visualize execution plan and data lineage |

Supported Endpoints
===================

If you need additional endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/).

Configuration
=============

The component uses a block-based configuration structure:

```json
{
  "parameters": {
    "blocks": [
      {
        "name": "Data Preparation",
        "codes": [
          {
            "name": "Clean Data",
            "script": [
              "CREATE VIEW 'clean_table' AS SELECT * FROM input_table WHERE valid = true;"
            ]
          }
        ]
      }
    ],
    "threads": 4,
    "max_memory_mb": 2048,
    "dtypes_infer": false,
    "debug": false,
    "syntax_check_on_startup": false
  }
}
```

**Parameters:**
- `blocks`: Array of processing blocks (executed consecutively)
- `threads`: Number of parallel threads for query execution (None for auto-detection)
- `max_memory_mb`: Memory limit for DuckDB in MB (None for auto-detection)
- `dtypes_infer`: Enable automatic data type inference for CSV files (default: false)
- `debug`: Enable debug logging (default: false)
- `syntax_check_on_startup`: Validate SQL syntax before execution (default: false)

**Input Sources:**
- **Local Files**: CSV and Parquet files from local storage

**Sync Actions:**
- `syntax_check`: Validate SQL syntax without execution
- `lineage_visualization`: Generate data lineage visualization
- `execution_plan_visualization`: Visualize execution plan
- `expected_input_tables`: Show expected input tables

Output
======

Exports tables to CSV files with manifests into `out/tables` and file manifests into `out/files`.

Development
-----------

To customize the local data folder path, replace the `CUSTOM_FOLDER` placeholder with your desired path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, initialize the workspace, and run the component using the following
commands:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone git@github.com:keboola/component-duckdb-transformation.git keboola.duckdb_transformation
cd keboola.duckdb_transformation
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and perform lint checks using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For details about deployment and integration with Keboola, refer to the
[deployment section of the developer
documentation](https://developers.keboola.com/extend/component/deployment/).



================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.13-slim
RUN apt-get update && apt-get install -y git
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/
WORKDIR /code/
COPY pyproject.toml .
COPY uv.lock .
ENV UV_PROJECT_ENVIRONMENT="/usr/local/"
RUN uv sync --all-groups --frozen
COPY src/ src
COPY tests/ tests
COPY flake8.cfg .
CMD ["python", "-u", "/code/src/component.py"]


================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: pyproject.toml
================================================
[project]
name = "component-duckdb-transformation"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "black>=25.1.0",
    "datadirtest",
    "duckdb>=1.3.1",
    "flake8>=7.3.0",
    "freezegun>=1.5.2",
    "keboola-component>=1.6.10",
    "keboola-http-client>=1.0.1",
    "keboola-utils>=1.1.0",
    "mock>=5.2.0",
    "pydantic>=2.11.7",
    "ruff>=0.12.7",
    "sqlglot>=25.0.0",
]

[tool.uv.sources]
datadirtest = { git = "https://github.com/keboola/datadirtest" }

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    "tests",
    "example",
    "venv",
]
ignore = []
line-length = 120
select = [
    "E",
    "F",
    "W",
]



================================================
FILE: uv.lock
================================================
version = 1
requires-python = ">=3.13"

[[package]]
name = "annotated-types"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ee/67/531ea369ba64dcff5ec9c3402f9f51bf748cec26dde048a2f973a4eea7f5/annotated_types-0.7.0.tar.gz", hash = "sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89", size = 16081 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/b6/6307fbef88d9b5ee7421e68d78a9f162e0da4900bc5f5793f6d3d0e34fb8/annotated_types-0.7.0-py3-none-any.whl", hash = "sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53", size = 13643 },
]

[[package]]
name = "black"
version = "25.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "click" },
    { name = "mypy-extensions" },
    { name = "packaging" },
    { name = "pathspec" },
    { name = "platformdirs" },
]
sdist = { url = "https://files.pythonhosted.org/packages/94/49/26a7b0f3f35da4b5a65f081943b7bcd22d7002f5f0fb8098ec1ff21cb6ef/black-25.1.0.tar.gz", hash = "sha256:33496d5cd1222ad73391352b4ae8da15253c5de89b93a80b3e2c8d9a19ec2666", size = 649449 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/98/87/0edf98916640efa5d0696e1abb0a8357b52e69e82322628f25bf14d263d1/black-25.1.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:8f0b18a02996a836cc9c9c78e5babec10930862827b1b724ddfe98ccf2f2fe4f", size = 1650673 },
    { url = "https://files.pythonhosted.org/packages/52/e5/f7bf17207cf87fa6e9b676576749c6b6ed0d70f179a3d812c997870291c3/black-25.1.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:afebb7098bfbc70037a053b91ae8437c3857482d3a690fefc03e9ff7aa9a5fd3", size = 1453190 },
    { url = "https://files.pythonhosted.org/packages/e3/ee/adda3d46d4a9120772fae6de454c8495603c37c4c3b9c60f25b1ab6401fe/black-25.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:030b9759066a4ee5e5aca28c3c77f9c64789cdd4de8ac1df642c40b708be6171", size = 1782926 },
    { url = "https://files.pythonhosted.org/packages/cc/64/94eb5f45dcb997d2082f097a3944cfc7fe87e071907f677e80788a2d7b7a/black-25.1.0-cp313-cp313-win_amd64.whl", hash = "sha256:a22f402b410566e2d1c950708c77ebf5ebd5d0d88a6a2e87c86d9fb48afa0d18", size = 1442613 },
    { url = "https://files.pythonhosted.org/packages/09/71/54e999902aed72baf26bca0d50781b01838251a462612966e9fc4891eadd/black-25.1.0-py3-none-any.whl", hash = "sha256:95e8176dae143ba9097f351d174fdaf0ccd29efb414b362ae3fd72bf0f710717", size = 207646 },
]

[[package]]
name = "certifi"
version = "2025.6.15"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/73/f7/f14b46d4bcd21092d7d3ccef689615220d8a08fb25e564b65d20738e672e/certifi-2025.6.15.tar.gz", hash = "sha256:d747aa5a8b9bbbb1bb8c22bb13e22bd1f18e9796defa16bab421f7f7a317323b", size = 158753 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/84/ae/320161bd181fc06471eed047ecce67b693fd7515b16d495d8932db763426/certifi-2025.6.15-py3-none-any.whl", hash = "sha256:2e0c7ce7cb5d8f8634ca55d2ba7e6ec2689a2fd6537d8dec1296a477a4910057", size = 157650 },
]

[[package]]
name = "charset-normalizer"
version = "3.4.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e4/33/89c2ced2b67d1c2a61c19c6751aa8902d46ce3dacb23600a283619f5a12d/charset_normalizer-3.4.2.tar.gz", hash = "sha256:5baececa9ecba31eff645232d59845c07aa030f0c81ee70184a90d35099a0e63", size = 126367 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ea/12/a93df3366ed32db1d907d7593a94f1fe6293903e3e92967bebd6950ed12c/charset_normalizer-3.4.2-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:926ca93accd5d36ccdabd803392ddc3e03e6d4cd1cf17deff3b989ab8e9dbcf0", size = 199622 },
    { url = "https://files.pythonhosted.org/packages/04/93/bf204e6f344c39d9937d3c13c8cd5bbfc266472e51fc8c07cb7f64fcd2de/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:eba9904b0f38a143592d9fc0e19e2df0fa2e41c3c3745554761c5f6447eedabf", size = 143435 },
    { url = "https://files.pythonhosted.org/packages/22/2a/ea8a2095b0bafa6c5b5a55ffdc2f924455233ee7b91c69b7edfcc9e02284/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3fddb7e2c84ac87ac3a947cb4e66d143ca5863ef48e4a5ecb83bd48619e4634e", size = 153653 },
    { url = "https://files.pythonhosted.org/packages/b6/57/1b090ff183d13cef485dfbe272e2fe57622a76694061353c59da52c9a659/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:98f862da73774290f251b9df8d11161b6cf25b599a66baf087c1ffe340e9bfd1", size = 146231 },
    { url = "https://files.pythonhosted.org/packages/e2/28/ffc026b26f441fc67bd21ab7f03b313ab3fe46714a14b516f931abe1a2d8/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6c9379d65defcab82d07b2a9dfbfc2e95bc8fe0ebb1b176a3190230a3ef0e07c", size = 148243 },
    { url = "https://files.pythonhosted.org/packages/c0/0f/9abe9bd191629c33e69e47c6ef45ef99773320e9ad8e9cb08b8ab4a8d4cb/charset_normalizer-3.4.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:e635b87f01ebc977342e2697d05b56632f5f879a4f15955dfe8cef2448b51691", size = 150442 },
    { url = "https://files.pythonhosted.org/packages/67/7c/a123bbcedca91d5916c056407f89a7f5e8fdfce12ba825d7d6b9954a1a3c/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:1c95a1e2902a8b722868587c0e1184ad5c55631de5afc0eb96bc4b0d738092c0", size = 145147 },
    { url = "https://files.pythonhosted.org/packages/ec/fe/1ac556fa4899d967b83e9893788e86b6af4d83e4726511eaaad035e36595/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:ef8de666d6179b009dce7bcb2ad4c4a779f113f12caf8dc77f0162c29d20490b", size = 153057 },
    { url = "https://files.pythonhosted.org/packages/2b/ff/acfc0b0a70b19e3e54febdd5301a98b72fa07635e56f24f60502e954c461/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:32fc0341d72e0f73f80acb0a2c94216bd704f4f0bce10aedea38f30502b271ff", size = 156454 },
    { url = "https://files.pythonhosted.org/packages/92/08/95b458ce9c740d0645feb0e96cea1f5ec946ea9c580a94adfe0b617f3573/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:289200a18fa698949d2b39c671c2cc7a24d44096784e76614899a7ccf2574b7b", size = 154174 },
    { url = "https://files.pythonhosted.org/packages/78/be/8392efc43487ac051eee6c36d5fbd63032d78f7728cb37aebcc98191f1ff/charset_normalizer-3.4.2-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4a476b06fbcf359ad25d34a057b7219281286ae2477cc5ff5e3f70a246971148", size = 149166 },
    { url = "https://files.pythonhosted.org/packages/44/96/392abd49b094d30b91d9fbda6a69519e95802250b777841cf3bda8fe136c/charset_normalizer-3.4.2-cp313-cp313-win32.whl", hash = "sha256:aaeeb6a479c7667fbe1099af9617c83aaca22182d6cf8c53966491a0f1b7ffb7", size = 98064 },
    { url = "https://files.pythonhosted.org/packages/e9/b0/0200da600134e001d91851ddc797809e2fe0ea72de90e09bec5a2fbdaccb/charset_normalizer-3.4.2-cp313-cp313-win_amd64.whl", hash = "sha256:aa6af9e7d59f9c12b33ae4e9450619cf2488e2bbe9b44030905877f0b2324980", size = 105641 },
    { url = "https://files.pythonhosted.org/packages/20/94/c5790835a017658cbfabd07f3bfb549140c3ac458cfc196323996b10095a/charset_normalizer-3.4.2-py3-none-any.whl", hash = "sha256:7f56930ab0abd1c45cd15be65cc741c28b1c9a34876ce8c17a2fa107810c0af0", size = 52626 },
]

[[package]]
name = "click"
version = "8.2.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/60/6c/8ca2efa64cf75a977a0d7fac081354553ebe483345c734fb6b6515d96bbc/click-8.2.1.tar.gz", hash = "sha256:27c491cc05d968d271d5a1db13e3b5a184636d9d930f148c50b038f0d0646202", size = 286342 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/85/32/10bb5764d90a8eee674e9dc6f4db6a0ab47c8c4d0d83c27f7c39ac415a4d/click-8.2.1-py3-none-any.whl", hash = "sha256:61a3265b914e850b85317d0b3109c7f8cd35a670f963866005d6ef1d5175a12b", size = 102215 },
]

[[package]]
name = "colorama"
version = "0.4.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d8/53/6f443c9a4a8358a93a6792e2acffb9d9d5cb0a5cfd8802644b7b1c9a02e4/colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44", size = 27697 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6", size = 25335 },
]

[[package]]
name = "component-duckdb-transformation"
version = "0.1.0"
source = { virtual = "." }
dependencies = [
    { name = "black" },
    { name = "datadirtest" },
    { name = "duckdb" },
    { name = "flake8" },
    { name = "freezegun" },
    { name = "keboola-component" },
    { name = "keboola-http-client" },
    { name = "keboola-utils" },
    { name = "mock" },
    { name = "pydantic" },
    { name = "ruff" },
    { name = "sqlglot" },
]

[package.metadata]
requires-dist = [
    { name = "black", specifier = ">=25.1.0" },
    { name = "datadirtest", git = "https://github.com/keboola/datadirtest" },
    { name = "duckdb", specifier = ">=1.3.1" },
    { name = "flake8", specifier = ">=7.3.0" },
    { name = "freezegun", specifier = ">=1.5.2" },
    { name = "keboola-component", specifier = ">=1.6.10" },
    { name = "keboola-http-client", specifier = ">=1.0.1" },
    { name = "keboola-utils", specifier = ">=1.1.0" },
    { name = "mock", specifier = ">=5.2.0" },
    { name = "pydantic", specifier = ">=2.11.7" },
    { name = "ruff", specifier = ">=0.12.7" },
    { name = "sqlglot", specifier = ">=25.0.0" },
]

[[package]]
name = "datadirtest"
version = "1.8.7"
source = { git = "https://github.com/keboola/datadirtest#a1f98b41eb13ef33e5f62d9fd1476a09cebed6f3" }
dependencies = [
    { name = "pathlib" },
]

[[package]]
name = "dateparser"
version = "1.2.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "python-dateutil" },
    { name = "pytz" },
    { name = "regex" },
    { name = "tzlocal" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a9/30/064144f0df1749e7bb5faaa7f52b007d7c2d08ec08fed8411aba87207f68/dateparser-1.2.2.tar.gz", hash = "sha256:986316f17cb8cdc23ea8ce563027c5ef12fc725b6fb1d137c14ca08777c5ecf7", size = 329840 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/87/22/f020c047ae1346613db9322638186468238bcfa8849b4668a22b97faad65/dateparser-1.2.2-py3-none-any.whl", hash = "sha256:5a5d7211a09013499867547023a2a0c91d5a27d15dd4dbcea676ea9fe66f2482", size = 315453 },
]

[[package]]
name = "deprecated"
version = "1.2.18"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "wrapt" },
]
sdist = { url = "https://files.pythonhosted.org/packages/98/97/06afe62762c9a8a86af0cfb7bfdab22a43ad17138b07af5b1a58442690a2/deprecated-1.2.18.tar.gz", hash = "sha256:422b6f6d859da6f2ef57857761bfb392480502a64c3028ca9bbe86085d72115d", size = 2928744 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6e/c6/ac0b6c1e2d138f1002bcf799d330bd6d85084fece321e662a14223794041/Deprecated-1.2.18-py2.py3-none-any.whl", hash = "sha256:bd5011788200372a32418f888e326a09ff80d0214bd961147cfed01b5c018eec", size = 9998 },
]

[[package]]
name = "duckdb"
version = "1.3.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/35/ab/d89a4dd14311d5a0081711bc66db3fad73f7645fa7eb3844c423d2fa0a17/duckdb-1.3.1.tar.gz", hash = "sha256:8e101990a879533b1d33f003df2eb2a3c4bc7bdf976bd7ef7c32342047935327", size = 11628075 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d0/2e/5e1bf9f0b43bcb37dbe729d3a2c55da8b232137c15b0b63d2d51f96793b6/duckdb-1.3.1-cp313-cp313-macosx_12_0_arm64.whl", hash = "sha256:72bbc8479c5d88e839a92c458c94c622f917ff0122853323728d6e25b0c3d4e1", size = 15529541 },
    { url = "https://files.pythonhosted.org/packages/bc/ab/6b2e1efb133b2f4990710bd9a54e734a12a147eaead1102e36dd8d126494/duckdb-1.3.1-cp313-cp313-macosx_12_0_universal2.whl", hash = "sha256:937de83df6bbe4bee5830ce80f568d4c0ebf3ef5eb809db3343d2161e4f6e42b", size = 32525596 },
    { url = "https://files.pythonhosted.org/packages/68/9f/879f6f33a1d5b4afee9dd4082e97d9b43c21cf734c90164d10fd7303edb5/duckdb-1.3.1-cp313-cp313-macosx_12_0_x86_64.whl", hash = "sha256:21440dd37f073944badd495c299c6d085cd133633450467ec420c71897ac1d5b", size = 17106339 },
    { url = "https://files.pythonhosted.org/packages/9a/06/5755f93be743ec27986f275847a85d44bb1bd6d8631492d337729fbe9145/duckdb-1.3.1-cp313-cp313-manylinux_2_27_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:663610b591ea6964f140441c81b718e745704cf098c540e905b200b9079e2a5c", size = 19173540 },
    { url = "https://files.pythonhosted.org/packages/90/a6/c8577b741974f106e24f8eb3efedc399be1a23cbbdcf49dd4bea5bb8aa4e/duckdb-1.3.1-cp313-cp313-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:8793b5abb365bbbf64ba3065f3a37951fe04f2d4506b0e24f3f8ecd08b3af4ba", size = 21122193 },
    { url = "https://files.pythonhosted.org/packages/43/10/b4576bbfa895a0ab125697fd58c0fbe54338672a9df25e7311bdf21f9e04/duckdb-1.3.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:27d775a5af405d1c228561830c8ccbe4e2832dafb4012f16c05fde1cde206dee", size = 22773434 },
    { url = "https://files.pythonhosted.org/packages/94/b9/f5ae51f7331f79c184fd96456c0896de875149fdeb092084fd20433ec97c/duckdb-1.3.1-cp313-cp313-win_amd64.whl", hash = "sha256:3eb045a9bf92da890d890cde2f676b3bda61b9de3b7dc46cbaaf75875b41e4b0", size = 11302770 },
]

[[package]]
name = "flake8"
version = "7.3.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "mccabe" },
    { name = "pycodestyle" },
    { name = "pyflakes" },
]
sdist = { url = "https://files.pythonhosted.org/packages/9b/af/fbfe3c4b5a657d79e5c47a2827a362f9e1b763336a52f926126aa6dc7123/flake8-7.3.0.tar.gz", hash = "sha256:fe044858146b9fc69b551a4b490d69cf960fcb78ad1edcb84e7fbb1b4a8e3872", size = 48326 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9f/56/13ab06b4f93ca7cac71078fbe37fcea175d3216f31f85c3168a6bbd0bb9a/flake8-7.3.0-py2.py3-none-any.whl", hash = "sha256:b9696257b9ce8beb888cdbe31cf885c90d31928fe202be0889a7cdafad32f01e", size = 57922 },
]

[[package]]
name = "freezegun"
version = "1.5.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "python-dateutil" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c7/75/0455fa5029507a2150da59db4f165fbc458ff8bb1c4f4d7e8037a14ad421/freezegun-1.5.2.tar.gz", hash = "sha256:a54ae1d2f9c02dbf42e02c18a3ab95ab4295818b549a34dac55592d72a905181", size = 34855 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b5/b2/68d4c9b6431121b6b6aa5e04a153cac41dcacc79600ed6e2e7c3382156f5/freezegun-1.5.2-py3-none-any.whl", hash = "sha256:5aaf3ba229cda57afab5bd311f0108d86b6fb119ae89d2cd9c43ec8c1733c85b", size = 18715 },
]

[[package]]
name = "idna"
version = "3.10"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f1/70/7703c29685631f5a7590aa73f1f1d3fa9a380e654b86af429e0934a32f7d/idna-3.10.tar.gz", hash = "sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9", size = 190490 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/c6/c88e154df9c4e1a2a66ccf0005a88dfb2650c1dffb6f5ce603dfbd452ce3/idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3", size = 70442 },
]

[[package]]
name = "keboola-component"
version = "1.6.10"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "deprecated" },
    { name = "pygelf" },
    { name = "pytz" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ef/dd/391f1e6eaae5e925f56f30788c40e38c8bce3a80ee898512e79ced2eabab/keboola.component-1.6.10.tar.gz", hash = "sha256:5f4c347e8e96bb4dff1fe1254217e88754a4edea8a1b147815552335dcfba941", size = 47336 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4c/34/301082c106bff256e2871a5c5db54d691fdad77a9d8a89a52eef30cd18ed/keboola.component-1.6.10-py3-none-any.whl", hash = "sha256:9a13b73beb71373d9a2b456eb44f902cfcfc07747c084bfbfad761b5eaaa4d93", size = 42243 },
]

[[package]]
name = "keboola-http-client"
version = "1.0.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/bd/46/81805cea9f7eff8af310a43e39b312794c9143b89fdcfdc5f502ed1818c6/keboola.http_client-1.0.1.tar.gz", hash = "sha256:58f828c61a709ac484e85e2acb5e78eae2db402e7846769b739a6c336384fa81", size = 10513 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/27/18/293557d9245a1ec0e0826202ca341bb769033121d1bd1991226db908a5df/keboola.http_client-1.0.1-py3-none-any.whl", hash = "sha256:5d570789433c65325937f6d466cc6b8edc0558f984f03846f0200ae5c5b4b140", size = 8958 },
]

[[package]]
name = "keboola-utils"
version = "1.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "dateparser" },
    { name = "pytz" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a7/b8/ccfddc2eb510f7a6ab878ab8a6249a23494194780a436676da6c2f5d23c7/keboola.utils-1.1.0.tar.gz", hash = "sha256:e943dbda932d945bcd5edd51283eea8f7035249c9dac769d3e96d2f507b52f60", size = 9830 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f9/f4/6697a0c2ff512baa7b84413972e51d5449a0a145f68dc750f05a8b1da39d/keboola.utils-1.1.0-py3-none-any.whl", hash = "sha256:8c73faa4a81f371a2eecd8465b08a51b3f7608969dd91d38d5b3bcfad7ef0da5", size = 10131 },
]

[[package]]
name = "mccabe"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e7/ff/0ffefdcac38932a54d2b5eed4e0ba8a408f215002cd178ad1df0f2806ff8/mccabe-0.7.0.tar.gz", hash = "sha256:348e0240c33b60bbdf4e523192ef919f28cb2c3d7d5c7794f74009290f236325", size = 9658 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/27/1a/1f68f9ba0c207934b35b86a8ca3aad8395a3d6dd7921c0686e23853ff5a9/mccabe-0.7.0-py2.py3-none-any.whl", hash = "sha256:6c2d30ab6be0e4a46919781807b4f0d834ebdd6c6e3dca0bda5a15f863427b6e", size = 7350 },
]

[[package]]
name = "mock"
version = "5.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/07/8c/14c2ae915e5f9dca5a22edd68b35be94400719ccfa068a03e0fb63d0f6f6/mock-5.2.0.tar.gz", hash = "sha256:4e460e818629b4b173f32d08bf30d3af8123afbb8e04bb5707a1fd4799e503f0", size = 92796 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/bd/d9/617e6af809bf3a1d468e0d58c3997b1dc219a9a9202e650d30c2fc85d481/mock-5.2.0-py3-none-any.whl", hash = "sha256:7ba87f72ca0e915175596069dbbcc7c75af7b5e9b9bc107ad6349ede0819982f", size = 31617 },
]

[[package]]
name = "mypy-extensions"
version = "1.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a2/6e/371856a3fb9d31ca8dac321cda606860fa4548858c0cc45d9d1d4ca2628b/mypy_extensions-1.1.0.tar.gz", hash = "sha256:52e68efc3284861e772bbcd66823fde5ae21fd2fdb51c62a211403730b916558", size = 6343 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/79/7b/2c79738432f5c924bef5071f933bcc9efd0473bac3b4aa584a6f7c1c8df8/mypy_extensions-1.1.0-py3-none-any.whl", hash = "sha256:1be4cccdb0f2482337c4743e60421de3a356cd97508abadd57d47403e94f5505", size = 4963 },
]

[[package]]
name = "packaging"
version = "25.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a1/d4/1fc4078c65507b51b96ca8f8c3ba19e6a61c8253c72794544580a7b6c24d/packaging-25.0.tar.gz", hash = "sha256:d443872c98d677bf60f6a1f2f8c1cb748e8fe762d2bf9d3148b5599295b0fc4f", size = 165727 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/20/12/38679034af332785aac8774540895e234f4d07f7545804097de4b666afd8/packaging-25.0-py3-none-any.whl", hash = "sha256:29572ef2b1f17581046b3a2227d5c611fb25ec70ca1ba8554b24b0e69331a484", size = 66469 },
]

[[package]]
name = "pathlib"
version = "1.0.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ac/aa/9b065a76b9af472437a0059f77e8f962fe350438b927cb80184c32f075eb/pathlib-1.0.1.tar.gz", hash = "sha256:6940718dfc3eff4258203ad5021090933e5c04707d5ca8cc9e73c94a7894ea9f", size = 49298 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/f9/690a8600b93c332de3ab4a344a4ac34f00c8f104917061f779db6a918ed6/pathlib-1.0.1-py3-none-any.whl", hash = "sha256:f35f95ab8b0f59e6d354090350b44a80a80635d22efdedfa84c7ad1cf0a74147", size = 14363 },
]

[[package]]
name = "pathspec"
version = "0.12.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ca/bc/f35b8446f4531a7cb215605d100cd88b7ac6f44ab3fc94870c120ab3adbf/pathspec-0.12.1.tar.gz", hash = "sha256:a482d51503a1ab33b1c67a6c3813a26953dbdc71c31dacaef9a838c4e29f5712", size = 51043 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/cc/20/ff623b09d963f88bfde16306a54e12ee5ea43e9b597108672ff3a408aad6/pathspec-0.12.1-py3-none-any.whl", hash = "sha256:a0d503e138a4c123b27490a4f7beda6a01c6f288df0e4a8b79c7eb0dc7b4cc08", size = 31191 },
]

[[package]]
name = "platformdirs"
version = "4.3.8"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/fe/8b/3c73abc9c759ecd3f1f7ceff6685840859e8070c4d947c93fae71f6a0bf2/platformdirs-4.3.8.tar.gz", hash = "sha256:3d512d96e16bcb959a814c9f348431070822a6496326a4be0911c40b5a74c2bc", size = 21362 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fe/39/979e8e21520d4e47a0bbe349e2713c0aac6f3d853d0e5b34d76206c439aa/platformdirs-4.3.8-py3-none-any.whl", hash = "sha256:ff7059bb7eb1179e2685604f4aaf157cfd9535242bd23742eadc3c13542139b4", size = 18567 },
]

[[package]]
name = "pycodestyle"
version = "2.14.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/11/e0/abfd2a0d2efe47670df87f3e3a0e2edda42f055053c85361f19c0e2c1ca8/pycodestyle-2.14.0.tar.gz", hash = "sha256:c4b5b517d278089ff9d0abdec919cd97262a3367449ea1c8b49b91529167b783", size = 39472 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d7/27/a58ddaf8c588a3ef080db9d0b7e0b97215cee3a45df74f3a94dbbf5c893a/pycodestyle-2.14.0-py2.py3-none-any.whl", hash = "sha256:dd6bf7cb4ee77f8e016f9c8e74a35ddd9f67e1d5fd4184d86c3b98e07099f42d", size = 31594 },
]

[[package]]
name = "pydantic"
version = "2.11.7"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "annotated-types" },
    { name = "pydantic-core" },
    { name = "typing-extensions" },
    { name = "typing-inspection" },
]
sdist = { url = "https://files.pythonhosted.org/packages/00/dd/4325abf92c39ba8623b5af936ddb36ffcfe0beae70405d456ab1fb2f5b8c/pydantic-2.11.7.tar.gz", hash = "sha256:d989c3c6cb79469287b1569f7447a17848c998458d49ebe294e975b9baf0f0db", size = 788350 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6a/c0/ec2b1c8712ca690e5d61979dee872603e92b8a32f94cc1b72d53beab008a/pydantic-2.11.7-py3-none-any.whl", hash = "sha256:dde5df002701f6de26248661f6835bbe296a47bf73990135c7d07ce741b9623b", size = 444782 },
]

[[package]]
name = "pydantic-core"
version = "2.33.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ad/88/5f2260bdfae97aabf98f1778d43f69574390ad787afb646292a638c923d4/pydantic_core-2.33.2.tar.gz", hash = "sha256:7cb8bc3605c29176e1b105350d2e6474142d7c1bd1d9327c4a9bdb46bf827acc", size = 435195 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/46/8c/99040727b41f56616573a28771b1bfa08a3d3fe74d3d513f01251f79f172/pydantic_core-2.33.2-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:1082dd3e2d7109ad8b7da48e1d4710c8d06c253cbc4a27c1cff4fbcaa97a9e3f", size = 2015688 },
    { url = "https://files.pythonhosted.org/packages/3a/cc/5999d1eb705a6cefc31f0b4a90e9f7fc400539b1a1030529700cc1b51838/pydantic_core-2.33.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:f517ca031dfc037a9c07e748cefd8d96235088b83b4f4ba8939105d20fa1dcd6", size = 1844808 },
    { url = "https://files.pythonhosted.org/packages/6f/5e/a0a7b8885c98889a18b6e376f344da1ef323d270b44edf8174d6bce4d622/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0a9f2c9dd19656823cb8250b0724ee9c60a82f3cdf68a080979d13092a3b0fef", size = 1885580 },
    { url = "https://files.pythonhosted.org/packages/3b/2a/953581f343c7d11a304581156618c3f592435523dd9d79865903272c256a/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:2b0a451c263b01acebe51895bfb0e1cc842a5c666efe06cdf13846c7418caa9a", size = 1973859 },
    { url = "https://files.pythonhosted.org/packages/e6/55/f1a813904771c03a3f97f676c62cca0c0a4138654107c1b61f19c644868b/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:1ea40a64d23faa25e62a70ad163571c0b342b8bf66d5fa612ac0dec4f069d916", size = 2120810 },
    { url = "https://files.pythonhosted.org/packages/aa/c3/053389835a996e18853ba107a63caae0b9deb4a276c6b472931ea9ae6e48/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:0fb2d542b4d66f9470e8065c5469ec676978d625a8b7a363f07d9a501a9cb36a", size = 2676498 },
    { url = "https://files.pythonhosted.org/packages/eb/3c/f4abd740877a35abade05e437245b192f9d0ffb48bbbbd708df33d3cda37/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9fdac5d6ffa1b5a83bca06ffe7583f5576555e6c8b3a91fbd25ea7780f825f7d", size = 2000611 },
    { url = "https://files.pythonhosted.org/packages/59/a7/63ef2fed1837d1121a894d0ce88439fe3e3b3e48c7543b2a4479eb99c2bd/pydantic_core-2.33.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:04a1a413977ab517154eebb2d326da71638271477d6ad87a769102f7c2488c56", size = 2107924 },
    { url = "https://files.pythonhosted.org/packages/04/8f/2551964ef045669801675f1cfc3b0d74147f4901c3ffa42be2ddb1f0efc4/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:c8e7af2f4e0194c22b5b37205bfb293d166a7344a5b0d0eaccebc376546d77d5", size = 2063196 },
    { url = "https://files.pythonhosted.org/packages/26/bd/d9602777e77fc6dbb0c7db9ad356e9a985825547dce5ad1d30ee04903918/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_armv7l.whl", hash = "sha256:5c92edd15cd58b3c2d34873597a1e20f13094f59cf88068adb18947df5455b4e", size = 2236389 },
    { url = "https://files.pythonhosted.org/packages/42/db/0e950daa7e2230423ab342ae918a794964b053bec24ba8af013fc7c94846/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:65132b7b4a1c0beded5e057324b7e16e10910c106d43675d9bd87d4f38dde162", size = 2239223 },
    { url = "https://files.pythonhosted.org/packages/58/4d/4f937099c545a8a17eb52cb67fe0447fd9a373b348ccfa9a87f141eeb00f/pydantic_core-2.33.2-cp313-cp313-win32.whl", hash = "sha256:52fb90784e0a242bb96ec53f42196a17278855b0f31ac7c3cc6f5c1ec4811849", size = 1900473 },
    { url = "https://files.pythonhosted.org/packages/a0/75/4a0a9bac998d78d889def5e4ef2b065acba8cae8c93696906c3a91f310ca/pydantic_core-2.33.2-cp313-cp313-win_amd64.whl", hash = "sha256:c083a3bdd5a93dfe480f1125926afcdbf2917ae714bdb80b36d34318b2bec5d9", size = 1955269 },
    { url = "https://files.pythonhosted.org/packages/f9/86/1beda0576969592f1497b4ce8e7bc8cbdf614c352426271b1b10d5f0aa64/pydantic_core-2.33.2-cp313-cp313-win_arm64.whl", hash = "sha256:e80b087132752f6b3d714f041ccf74403799d3b23a72722ea2e6ba2e892555b9", size = 1893921 },
    { url = "https://files.pythonhosted.org/packages/a4/7d/e09391c2eebeab681df2b74bfe6c43422fffede8dc74187b2b0bf6fd7571/pydantic_core-2.33.2-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:61c18fba8e5e9db3ab908620af374db0ac1baa69f0f32df4f61ae23f15e586ac", size = 1806162 },
    { url = "https://files.pythonhosted.org/packages/f1/3d/847b6b1fed9f8ed3bb95a9ad04fbd0b212e832d4f0f50ff4d9ee5a9f15cf/pydantic_core-2.33.2-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:95237e53bb015f67b63c91af7518a62a8660376a6a0db19b89acc77a4d6199f5", size = 1981560 },
    { url = "https://files.pythonhosted.org/packages/6f/9a/e73262f6c6656262b5fdd723ad90f518f579b7bc8622e43a942eec53c938/pydantic_core-2.33.2-cp313-cp313t-win_amd64.whl", hash = "sha256:c2fc0a768ef76c15ab9238afa6da7f69895bb5d1ee83aeea2e3509af4472d0b9", size = 1935777 },
]

[[package]]
name = "pyflakes"
version = "3.4.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/45/dc/fd034dc20b4b264b3d015808458391acbf9df40b1e54750ef175d39180b1/pyflakes-3.4.0.tar.gz", hash = "sha256:b24f96fafb7d2ab0ec5075b7350b3d2d2218eab42003821c06344973d3ea2f58", size = 64669 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c2/2f/81d580a0fb83baeb066698975cb14a618bdbed7720678566f1b046a95fe8/pyflakes-3.4.0-py2.py3-none-any.whl", hash = "sha256:f742a7dbd0d9cb9ea41e9a24a918996e8170c799fa528688d40dd582c8265f4f", size = 63551 },
]

[[package]]
name = "pygelf"
version = "0.4.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/49/91/ac1605bb40092ae41fbb833ee55447f72e19ce5459efa6bd3beecc67e971/pygelf-0.4.3.tar.gz", hash = "sha256:8ed972563be3c8f168483f01dbf522b6bc697959c97a3f4881324b3f79638911", size = 11017 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d4/ee/ebac3de919431912e0be380fafd01059a091a489f6b5d7896c2a04548895/pygelf-0.4.3-py3-none-any.whl", hash = "sha256:0876c99a77f9f021834982c9808205b3239fabf5886788d701f31b495b65c8ae", size = 8750 },
]

[[package]]
name = "python-dateutil"
version = "2.9.0.post0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "six" },
]
sdist = { url = "https://files.pythonhosted.org/packages/66/c0/0c8b6ad9f17a802ee498c46e004a0eb49bc148f2fd230864601a86dcf6db/python-dateutil-2.9.0.post0.tar.gz", hash = "sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3", size = 342432 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/57/56b9bcc3c9c6a792fcbaf139543cee77261f3651ca9da0c93f5c1221264b/python_dateutil-2.9.0.post0-py2.py3-none-any.whl", hash = "sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427", size = 229892 },
]

[[package]]
name = "pytz"
version = "2025.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f8/bf/abbd3cdfb8fbc7fb3d4d38d320f2441b1e7cbe29be4f23797b4a2b5d8aac/pytz-2025.2.tar.gz", hash = "sha256:360b9e3dbb49a209c21ad61809c7fb453643e048b38924c765813546746e81c3", size = 320884 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/81/c4/34e93fe5f5429d7570ec1fa436f1986fb1f00c3e0f43a589fe2bbcd22c3f/pytz-2025.2-py2.py3-none-any.whl", hash = "sha256:5ddf76296dd8c44c26eb8f4b6f35488f3ccbf6fbbd7adee0b7262d43f0ec2f00", size = 509225 },
]

[[package]]
name = "regex"
version = "2024.11.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/8e/5f/bd69653fbfb76cf8604468d3b4ec4c403197144c7bfe0e6a5fc9e02a07cb/regex-2024.11.6.tar.gz", hash = "sha256:7ab159b063c52a0333c884e4679f8d7a85112ee3078fe3d9004b2dd875585519", size = 399494 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/90/73/bcb0e36614601016552fa9344544a3a2ae1809dc1401b100eab02e772e1f/regex-2024.11.6-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:a6ba92c0bcdf96cbf43a12c717eae4bc98325ca3730f6b130ffa2e3c3c723d84", size = 483525 },
    { url = "https://files.pythonhosted.org/packages/0f/3f/f1a082a46b31e25291d830b369b6b0c5576a6f7fb89d3053a354c24b8a83/regex-2024.11.6-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:525eab0b789891ac3be914d36893bdf972d483fe66551f79d3e27146191a37d4", size = 288324 },
    { url = "https://files.pythonhosted.org/packages/09/c9/4e68181a4a652fb3ef5099e077faf4fd2a694ea6e0f806a7737aff9e758a/regex-2024.11.6-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:086a27a0b4ca227941700e0b31425e7a28ef1ae8e5e05a33826e17e47fbfdba0", size = 284617 },
    { url = "https://files.pythonhosted.org/packages/fc/fd/37868b75eaf63843165f1d2122ca6cb94bfc0271e4428cf58c0616786dce/regex-2024.11.6-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:bde01f35767c4a7899b7eb6e823b125a64de314a8ee9791367c9a34d56af18d0", size = 795023 },
    { url = "https://files.pythonhosted.org/packages/c4/7c/d4cd9c528502a3dedb5c13c146e7a7a539a3853dc20209c8e75d9ba9d1b2/regex-2024.11.6-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:b583904576650166b3d920d2bcce13971f6f9e9a396c673187f49811b2769dc7", size = 833072 },
    { url = "https://files.pythonhosted.org/packages/4f/db/46f563a08f969159c5a0f0e722260568425363bea43bb7ae370becb66a67/regex-2024.11.6-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:1c4de13f06a0d54fa0d5ab1b7138bfa0d883220965a29616e3ea61b35d5f5fc7", size = 823130 },
    { url = "https://files.pythonhosted.org/packages/db/60/1eeca2074f5b87df394fccaa432ae3fc06c9c9bfa97c5051aed70e6e00c2/regex-2024.11.6-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3cde6e9f2580eb1665965ce9bf17ff4952f34f5b126beb509fee8f4e994f143c", size = 796857 },
    { url = "https://files.pythonhosted.org/packages/10/db/ac718a08fcee981554d2f7bb8402f1faa7e868c1345c16ab1ebec54b0d7b/regex-2024.11.6-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0d7f453dca13f40a02b79636a339c5b62b670141e63efd511d3f8f73fba162b3", size = 784006 },
    { url = "https://files.pythonhosted.org/packages/c2/41/7da3fe70216cea93144bf12da2b87367590bcf07db97604edeea55dac9ad/regex-2024.11.6-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:59dfe1ed21aea057a65c6b586afd2a945de04fc7db3de0a6e3ed5397ad491b07", size = 781650 },
    { url = "https://files.pythonhosted.org/packages/a7/d5/880921ee4eec393a4752e6ab9f0fe28009435417c3102fc413f3fe81c4e5/regex-2024.11.6-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:b97c1e0bd37c5cd7902e65f410779d39eeda155800b65fc4d04cc432efa9bc6e", size = 789545 },
    { url = "https://files.pythonhosted.org/packages/dc/96/53770115e507081122beca8899ab7f5ae28ae790bfcc82b5e38976df6a77/regex-2024.11.6-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:f9d1e379028e0fc2ae3654bac3cbbef81bf3fd571272a42d56c24007979bafb6", size = 853045 },
    { url = "https://files.pythonhosted.org/packages/31/d3/1372add5251cc2d44b451bd94f43b2ec78e15a6e82bff6a290ef9fd8f00a/regex-2024.11.6-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:13291b39131e2d002a7940fb176e120bec5145f3aeb7621be6534e46251912c4", size = 860182 },
    { url = "https://files.pythonhosted.org/packages/ed/e3/c446a64984ea9f69982ba1a69d4658d5014bc7a0ea468a07e1a1265db6e2/regex-2024.11.6-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4f51f88c126370dcec4908576c5a627220da6c09d0bff31cfa89f2523843316d", size = 787733 },
    { url = "https://files.pythonhosted.org/packages/2b/f1/e40c8373e3480e4f29f2692bd21b3e05f296d3afebc7e5dcf21b9756ca1c/regex-2024.11.6-cp313-cp313-win32.whl", hash = "sha256:63b13cfd72e9601125027202cad74995ab26921d8cd935c25f09c630436348ff", size = 262122 },
    { url = "https://files.pythonhosted.org/packages/45/94/bc295babb3062a731f52621cdc992d123111282e291abaf23faa413443ea/regex-2024.11.6-cp313-cp313-win_amd64.whl", hash = "sha256:2b3361af3198667e99927da8b84c1b010752fa4b1115ee30beaa332cabc3ef1a", size = 273545 },
]

[[package]]
name = "requests"
version = "2.32.4"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "certifi" },
    { name = "charset-normalizer" },
    { name = "idna" },
    { name = "urllib3" },
]
sdist = { url = "https://files.pythonhosted.org/packages/e1/0a/929373653770d8a0d7ea76c37de6e41f11eb07559b103b1c02cafb3f7cf8/requests-2.32.4.tar.gz", hash = "sha256:27d0316682c8a29834d3264820024b62a36942083d52caf2f14c0591336d3422", size = 135258 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7c/e4/56027c4a6b4ae70ca9de302488c5ca95ad4a39e190093d6c1a8ace08341b/requests-2.32.4-py3-none-any.whl", hash = "sha256:27babd3cda2a6d50b30443204ee89830707d396671944c998b5975b031ac2b2c", size = 64847 },
]

[[package]]
name = "ruff"
version = "0.12.7"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a1/81/0bd3594fa0f690466e41bd033bdcdf86cba8288345ac77ad4afbe5ec743a/ruff-0.12.7.tar.gz", hash = "sha256:1fc3193f238bc2d7968772c82831a4ff69252f673be371fb49663f0068b7ec71", size = 5197814 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e1/d2/6cb35e9c85e7a91e8d22ab32ae07ac39cc34a71f1009a6f9e4a2a019e602/ruff-0.12.7-py3-none-linux_armv6l.whl", hash = "sha256:76e4f31529899b8c434c3c1dede98c4483b89590e15fb49f2d46183801565303", size = 11852189 },
    { url = "https://files.pythonhosted.org/packages/63/5b/a4136b9921aa84638f1a6be7fb086f8cad0fde538ba76bda3682f2599a2f/ruff-0.12.7-py3-none-macosx_10_12_x86_64.whl", hash = "sha256:789b7a03e72507c54fb3ba6209e4bb36517b90f1a3569ea17084e3fd295500fb", size = 12519389 },
    { url = "https://files.pythonhosted.org/packages/a8/c9/3e24a8472484269b6b1821794141f879c54645a111ded4b6f58f9ab0705f/ruff-0.12.7-py3-none-macosx_11_0_arm64.whl", hash = "sha256:2e1c2a3b8626339bb6369116e7030a4cf194ea48f49b64bb505732a7fce4f4e3", size = 11743384 },
    { url = "https://files.pythonhosted.org/packages/26/7c/458dd25deeb3452c43eaee853c0b17a1e84169f8021a26d500ead77964fd/ruff-0.12.7-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:32dec41817623d388e645612ec70d5757a6d9c035f3744a52c7b195a57e03860", size = 11943759 },
    { url = "https://files.pythonhosted.org/packages/7f/8b/658798472ef260ca050e400ab96ef7e85c366c39cf3dfbef4d0a46a528b6/ruff-0.12.7-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:47ef751f722053a5df5fa48d412dbb54d41ab9b17875c6840a58ec63ff0c247c", size = 11654028 },
    { url = "https://files.pythonhosted.org/packages/a8/86/9c2336f13b2a3326d06d39178fd3448dcc7025f82514d1b15816fe42bfe8/ruff-0.12.7-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a828a5fc25a3efd3e1ff7b241fd392686c9386f20e5ac90aa9234a5faa12c423", size = 13225209 },
    { url = "https://files.pythonhosted.org/packages/76/69/df73f65f53d6c463b19b6b312fd2391dc36425d926ec237a7ed028a90fc1/ruff-0.12.7-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl", hash = "sha256:5726f59b171111fa6a69d82aef48f00b56598b03a22f0f4170664ff4d8298efb", size = 14182353 },
    { url = "https://files.pythonhosted.org/packages/58/1e/de6cda406d99fea84b66811c189b5ea139814b98125b052424b55d28a41c/ruff-0.12.7-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:74e6f5c04c4dd4aba223f4fe6e7104f79e0eebf7d307e4f9b18c18362124bccd", size = 13631555 },
    { url = "https://files.pythonhosted.org/packages/6f/ae/625d46d5164a6cc9261945a5e89df24457dc8262539ace3ac36c40f0b51e/ruff-0.12.7-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:5d0bfe4e77fba61bf2ccadf8cf005d6133e3ce08793bbe870dd1c734f2699a3e", size = 12667556 },
    { url = "https://files.pythonhosted.org/packages/55/bf/9cb1ea5e3066779e42ade8d0cd3d3b0582a5720a814ae1586f85014656b6/ruff-0.12.7-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:06bfb01e1623bf7f59ea749a841da56f8f653d641bfd046edee32ede7ff6c606", size = 12939784 },
    { url = "https://files.pythonhosted.org/packages/55/7f/7ead2663be5627c04be83754c4f3096603bf5e99ed856c7cd29618c691bd/ruff-0.12.7-py3-none-musllinux_1_2_aarch64.whl", hash = "sha256:e41df94a957d50083fd09b916d6e89e497246698c3f3d5c681c8b3e7b9bb4ac8", size = 11771356 },
    { url = "https://files.pythonhosted.org/packages/17/40/a95352ea16edf78cd3a938085dccc55df692a4d8ba1b3af7accbe2c806b0/ruff-0.12.7-py3-none-musllinux_1_2_armv7l.whl", hash = "sha256:4000623300563c709458d0ce170c3d0d788c23a058912f28bbadc6f905d67afa", size = 11612124 },
    { url = "https://files.pythonhosted.org/packages/4d/74/633b04871c669e23b8917877e812376827c06df866e1677f15abfadc95cb/ruff-0.12.7-py3-none-musllinux_1_2_i686.whl", hash = "sha256:69ffe0e5f9b2cf2b8e289a3f8945b402a1b19eff24ec389f45f23c42a3dd6fb5", size = 12479945 },
    { url = "https://files.pythonhosted.org/packages/be/34/c3ef2d7799c9778b835a76189c6f53c179d3bdebc8c65288c29032e03613/ruff-0.12.7-py3-none-musllinux_1_2_x86_64.whl", hash = "sha256:a07a5c8ffa2611a52732bdc67bf88e243abd84fe2d7f6daef3826b59abbfeda4", size = 12998677 },
    { url = "https://files.pythonhosted.org/packages/77/ab/aca2e756ad7b09b3d662a41773f3edcbd262872a4fc81f920dc1ffa44541/ruff-0.12.7-py3-none-win32.whl", hash = "sha256:c928f1b2ec59fb77dfdf70e0419408898b63998789cc98197e15f560b9e77f77", size = 11756687 },
    { url = "https://files.pythonhosted.org/packages/b4/71/26d45a5042bc71db22ddd8252ca9d01e9ca454f230e2996bb04f16d72799/ruff-0.12.7-py3-none-win_amd64.whl", hash = "sha256:9c18f3d707ee9edf89da76131956aba1270c6348bfee8f6c647de841eac7194f", size = 12912365 },
    { url = "https://files.pythonhosted.org/packages/4c/9b/0b8aa09817b63e78d94b4977f18b1fcaead3165a5ee49251c5d5c245bb2d/ruff-0.12.7-py3-none-win_arm64.whl", hash = "sha256:dfce05101dbd11833a0776716d5d1578641b7fddb537fe7fa956ab85d1769b69", size = 11982083 },
]

[[package]]
name = "six"
version = "1.17.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/94/e7/b2c673351809dca68a0e064b6af791aa332cf192da575fd474ed7d6f16a2/six-1.17.0.tar.gz", hash = "sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81", size = 34031 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b7/ce/149a00dd41f10bc29e5921b496af8b574d8413afcd5e30dfa0ed46c2cc5e/six-1.17.0-py2.py3-none-any.whl", hash = "sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274", size = 11050 },
]

[[package]]
name = "sqlglot"
version = "27.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/4c/f6/97ef44306cf04419487f4369d9828c2fe6956439c673a67c099276962379/sqlglot-27.0.0.tar.gz", hash = "sha256:828736ff811a304e3bf6b05386aa0461a10f77f95e93dd1a2febc20f0fc4ada7", size = 5356535 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/31/ae/a68bf87d667f3e6ac33b4a7c111846bc9ba2169416b835d5879881df902b/sqlglot-27.0.0-py3-none-any.whl", hash = "sha256:96722da415a607914b1c49acd8f4ffbe65e5c2feee9254a9edf63f70e0fe0208", size = 479554 },
]

[[package]]
name = "typing-extensions"
version = "4.14.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d1/bc/51647cd02527e87d05cb083ccc402f93e441606ff1f01739a62c8ad09ba5/typing_extensions-4.14.0.tar.gz", hash = "sha256:8676b788e32f02ab42d9e7c61324048ae4c6d844a399eebace3d4979d75ceef4", size = 107423 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/69/e0/552843e0d356fbb5256d21449fa957fa4eff3bbc135a74a691ee70c7c5da/typing_extensions-4.14.0-py3-none-any.whl", hash = "sha256:a1514509136dd0b477638fc68d6a91497af5076466ad0fa6c338e44e359944af", size = 43839 },
]

[[package]]
name = "typing-inspection"
version = "0.4.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f8/b1/0c11f5058406b3af7609f121aaa6b609744687f1d158b3c3a5bf4cc94238/typing_inspection-0.4.1.tar.gz", hash = "sha256:6ae134cc0203c33377d43188d4064e9b357dba58cff3185f22924610e70a9d28", size = 75726 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/17/69/cd203477f944c353c31bade965f880aa1061fd6bf05ded0726ca845b6ff7/typing_inspection-0.4.1-py3-none-any.whl", hash = "sha256:389055682238f53b04f7badcb49b989835495a96700ced5dab2d8feae4b26f51", size = 14552 },
]

[[package]]
name = "tzdata"
version = "2025.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/95/32/1a225d6164441be760d75c2c42e2780dc0873fe382da3e98a2e1e48361e5/tzdata-2025.2.tar.gz", hash = "sha256:b60a638fcc0daffadf82fe0f57e53d06bdec2f36c4df66280ae79bce6bd6f2b9", size = 196380 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5c/23/c7abc0ca0a1526a0774eca151daeb8de62ec457e77262b66b359c3c7679e/tzdata-2025.2-py2.py3-none-any.whl", hash = "sha256:1a403fada01ff9221ca8044d701868fa132215d84beb92242d9acd2147f667a8", size = 347839 },
]

[[package]]
name = "tzlocal"
version = "5.3.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "tzdata", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/8b/2e/c14812d3d4d9cd1773c6be938f89e5735a1f11a9f184ac3639b93cef35d5/tzlocal-5.3.1.tar.gz", hash = "sha256:cceffc7edecefea1f595541dbd6e990cb1ea3d19bf01b2809f362a03dd7921fd", size = 30761 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c2/14/e2a54fabd4f08cd7af1c07030603c3356b74da07f7cc056e600436edfa17/tzlocal-5.3.1-py3-none-any.whl", hash = "sha256:eb1a66c3ef5847adf7a834f1be0800581b683b5608e74f86ecbcef8ab91bb85d", size = 18026 },
]

[[package]]
name = "urllib3"
version = "2.5.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/15/22/9ee70a2574a4f4599c47dd506532914ce044817c7752a79b6a51286319bc/urllib3-2.5.0.tar.gz", hash = "sha256:3fc47733c7e419d4bc3f6b3dc2b4f890bb743906a30d56ba4a5bfa4bbff92760", size = 393185 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a7/c2/fe1e52489ae3122415c51f387e221dd0773709bad6c6cdaa599e8a2c5185/urllib3-2.5.0-py3-none-any.whl", hash = "sha256:e6b01673c0fa6a13e374b50871808eb3bf7046c4b125b216f6bf1cc604cff0dc", size = 129795 },
]

[[package]]
name = "wrapt"
version = "1.17.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/c3/fc/e91cc220803d7bc4db93fb02facd8461c37364151b8494762cc88b0fbcef/wrapt-1.17.2.tar.gz", hash = "sha256:41388e9d4d1522446fe79d3213196bd9e3b301a336965b9e27ca2788ebd122f3", size = 55531 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ce/b9/0ffd557a92f3b11d4c5d5e0c5e4ad057bd9eb8586615cdaf901409920b14/wrapt-1.17.2-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:6ed6ffac43aecfe6d86ec5b74b06a5be33d5bb9243d055141e8cabb12aa08125", size = 53800 },
    { url = "https://files.pythonhosted.org/packages/c0/ef/8be90a0b7e73c32e550c73cfb2fa09db62234227ece47b0e80a05073b375/wrapt-1.17.2-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:35621ae4c00e056adb0009f8e86e28eb4a41a4bfa8f9bfa9fca7d343fe94f998", size = 38824 },
    { url = "https://files.pythonhosted.org/packages/36/89/0aae34c10fe524cce30fe5fc433210376bce94cf74d05b0d68344c8ba46e/wrapt-1.17.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:a604bf7a053f8362d27eb9fefd2097f82600b856d5abe996d623babd067b1ab5", size = 38920 },
    { url = "https://files.pythonhosted.org/packages/3b/24/11c4510de906d77e0cfb5197f1b1445d4fec42c9a39ea853d482698ac681/wrapt-1.17.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5cbabee4f083b6b4cd282f5b817a867cf0b1028c54d445b7ec7cfe6505057cf8", size = 88690 },
    { url = "https://files.pythonhosted.org/packages/71/d7/cfcf842291267bf455b3e266c0c29dcb675b5540ee8b50ba1699abf3af45/wrapt-1.17.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:49703ce2ddc220df165bd2962f8e03b84c89fee2d65e1c24a7defff6f988f4d6", size = 80861 },
    { url = "https://files.pythonhosted.org/packages/d5/66/5d973e9f3e7370fd686fb47a9af3319418ed925c27d72ce16b791231576d/wrapt-1.17.2-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8112e52c5822fc4253f3901b676c55ddf288614dc7011634e2719718eaa187dc", size = 89174 },
    { url = "https://files.pythonhosted.org/packages/a7/d3/8e17bb70f6ae25dabc1aaf990f86824e4fd98ee9cadf197054e068500d27/wrapt-1.17.2-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:9fee687dce376205d9a494e9c121e27183b2a3df18037f89d69bd7b35bcf59e2", size = 86721 },
    { url = "https://files.pythonhosted.org/packages/6f/54/f170dfb278fe1c30d0ff864513cff526d624ab8de3254b20abb9cffedc24/wrapt-1.17.2-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:18983c537e04d11cf027fbb60a1e8dfd5190e2b60cc27bc0808e653e7b218d1b", size = 79763 },
    { url = "https://files.pythonhosted.org/packages/4a/98/de07243751f1c4a9b15c76019250210dd3486ce098c3d80d5f729cba029c/wrapt-1.17.2-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:703919b1633412ab54bcf920ab388735832fdcb9f9a00ae49387f0fe67dad504", size = 87585 },
    { url = "https://files.pythonhosted.org/packages/f9/f0/13925f4bd6548013038cdeb11ee2cbd4e37c30f8bfd5db9e5a2a370d6e20/wrapt-1.17.2-cp313-cp313-win32.whl", hash = "sha256:abbb9e76177c35d4e8568e58650aa6926040d6a9f6f03435b7a522bf1c487f9a", size = 36676 },
    { url = "https://files.pythonhosted.org/packages/bf/ae/743f16ef8c2e3628df3ddfd652b7d4c555d12c84b53f3d8218498f4ade9b/wrapt-1.17.2-cp313-cp313-win_amd64.whl", hash = "sha256:69606d7bb691b50a4240ce6b22ebb319c1cfb164e5f6569835058196e0f3a845", size = 38871 },
    { url = "https://files.pythonhosted.org/packages/3d/bc/30f903f891a82d402ffb5fda27ec1d621cc97cb74c16fea0b6141f1d4e87/wrapt-1.17.2-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:4a721d3c943dae44f8e243b380cb645a709ba5bd35d3ad27bc2ed947e9c68192", size = 56312 },
    { url = "https://files.pythonhosted.org/packages/8a/04/c97273eb491b5f1c918857cd26f314b74fc9b29224521f5b83f872253725/wrapt-1.17.2-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:766d8bbefcb9e00c3ac3b000d9acc51f1b399513f44d77dfe0eb026ad7c9a19b", size = 40062 },
    { url = "https://files.pythonhosted.org/packages/4e/ca/3b7afa1eae3a9e7fefe499db9b96813f41828b9fdb016ee836c4c379dadb/wrapt-1.17.2-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:e496a8ce2c256da1eb98bd15803a79bee00fc351f5dfb9ea82594a3f058309e0", size = 40155 },
    { url = "https://files.pythonhosted.org/packages/89/be/7c1baed43290775cb9030c774bc53c860db140397047cc49aedaf0a15477/wrapt-1.17.2-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:40d615e4fe22f4ad3528448c193b218e077656ca9ccb22ce2cb20db730f8d306", size = 113471 },
    { url = "https://files.pythonhosted.org/packages/32/98/4ed894cf012b6d6aae5f5cc974006bdeb92f0241775addad3f8cd6ab71c8/wrapt-1.17.2-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a5aaeff38654462bc4b09023918b7f21790efb807f54c000a39d41d69cf552cb", size = 101208 },
    { url = "https://files.pythonhosted.org/packages/ea/fd/0c30f2301ca94e655e5e057012e83284ce8c545df7661a78d8bfca2fac7a/wrapt-1.17.2-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9a7d15bbd2bc99e92e39f49a04653062ee6085c0e18b3b7512a4f2fe91f2d681", size = 109339 },
    { url = "https://files.pythonhosted.org/packages/75/56/05d000de894c4cfcb84bcd6b1df6214297b8089a7bd324c21a4765e49b14/wrapt-1.17.2-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:e3890b508a23299083e065f435a492b5435eba6e304a7114d2f919d400888cc6", size = 110232 },
    { url = "https://files.pythonhosted.org/packages/53/f8/c3f6b2cf9b9277fb0813418e1503e68414cd036b3b099c823379c9575e6d/wrapt-1.17.2-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:8c8b293cd65ad716d13d8dd3624e42e5a19cc2a2f1acc74b30c2c13f15cb61a6", size = 100476 },
    { url = "https://files.pythonhosted.org/packages/a7/b1/0bb11e29aa5139d90b770ebbfa167267b1fc548d2302c30c8f7572851738/wrapt-1.17.2-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:4c82b8785d98cdd9fed4cac84d765d234ed3251bd6afe34cb7ac523cb93e8b4f", size = 106377 },
    { url = "https://files.pythonhosted.org/packages/6a/e1/0122853035b40b3f333bbb25f1939fc1045e21dd518f7f0922b60c156f7c/wrapt-1.17.2-cp313-cp313t-win32.whl", hash = "sha256:13e6afb7fe71fe7485a4550a8844cc9ffbe263c0f1a1eea569bc7091d4898555", size = 37986 },
    { url = "https://files.pythonhosted.org/packages/09/5e/1655cf481e079c1f22d0cabdd4e51733679932718dc23bf2db175f329b76/wrapt-1.17.2-cp313-cp313t-win_amd64.whl", hash = "sha256:eaf675418ed6b3b31c7a989fd007fa7c3be66ce14e5c3b27336383604c9da85c", size = 40750 },
    { url = "https://files.pythonhosted.org/packages/2d/82/f56956041adef78f849db6b289b282e72b55ab8045a75abad81898c28d19/wrapt-1.17.2-py3-none-any.whl", hash = "sha256:b18f2d1533a71f069c7f82d524a52599053d4c7166e9dd374ae2136b7f40f7c8", size = 23594 },
]



================================================
FILE: .python-version
================================================
3.13



================================================
FILE: component_config/component_long_description.md
================================================
Advanced DuckDB SQL transformation component for Keboola platform that provides sophisticated data processing capabilities with intelligent execution planning.

**Key Features:**

**Block-Based Orchestration**
- Execute SQL queries in consecutive blocks for logical separation
- Parallel execution of independent queries within each block
- Automatic dependency detection and execution planning

**Performance Optimization**
- Configurable parallel thread execution
- Automatic system resource detection (CPU/memory)
- Optimized DuckDB configuration for maximum performance

**SQL Processing**
- Advanced SQL parsing with SQLGlot integration
- Automatic dependency analysis between queries
- Syntax validation with detailed error reporting
- Support for complex SQL operations and CTEs

**Data Handling**
- Local CSV and Parquet file support
- Automatic data type inference for CSV files
- Snowflake INTEGER column optimization for Parquet files
- Flexible input/output table mapping

**Development Tools**
- SQL syntax checking without execution
- Data lineage visualization
- Execution plan visualization
- Expected input tables analysis

**System Integration**
- Automatic resource detection from cgroup limits
- Configurable memory and thread limits
- Debug logging and performance monitoring
- Comprehensive error handling and reporting

This component is designed for high-performance data transformations with intelligent execution planning, making it ideal for complex ETL workflows requiring parallel processing and dependency management.


================================================
FILE: component_config/component_short_description.md
================================================
DuckDB SQL transformation component with block-based orchestration, parallel execution, and automatic dependency detection.


================================================
FILE: component_config/configRowSchema.json
================================================
{}


================================================
FILE: component_config/configSchema.json
================================================
{}


================================================
FILE: component_config/configuration_description.md
================================================
Configuration description.


================================================
FILE: component_config/documentationUrl.md
================================================
https://github.com/keboola/component-duckdb-transformation/blob/main/README.md


================================================
FILE: component_config/licenseUrl.md
================================================
https://github.com/component-duckdb-transformation.git/blob/master/LICENSE.md


================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sourceCodeUrl.md
================================================
https://github.com/component-duckdb-transformation.git


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "parameters": {
    "blocks": [
      {
        "name": "Block 1",
        "codes": [
          {
            "name": "Sliced",
            "script": [
              "-- Export sliced as one table\nCREATE VIEW 'out-table' AS (\n SELECT * FROM sliced \n);"
            ]
          },
          {
            "name": "Days",
            "script": [
              "CREATE VIEW 'week' AS (\nSELECT *\nFROM days\nWHERE id::INT <= 5);",
              "CREATE VIEW 'weekend' AS (\nSELECT *\nFROM days\nWHERE id::INT > 5);"
            ]
          }
        ]
      },
      {
        "name": "Block 2",
        "codes": [
          {
            "name": "Join",
            "script": [
              "CREATE VIEW 'joined' AS (\nSELECT * \nFROM sliced \nLEFT JOIN days USING (id));"
            ]
          }
        ]
      }
    ]
  },
  "storage": {
    "output": {
      "tables": [
        {
          "destination": "out.c-out.out-table",
          "source": "out-table"
        },
        {
          "destination": "out.c-out.week",
          "source": "week"
        },
        {
          "destination": "out.c-out.weekend",
          "source": "weekend"
        },
        {
          "destination": "out.c-out.joined",
          "source": "joined"
        }
      ]
    },
    "input": {
      "tables": [
        {
          "source": "in.c-days.csv",
          "destination": "days",
          "where_column": "",
          "where_values": [],
          "where_operator": "eq",
          "columns": [],
          "keep_internal_timestamp_column": false
        },
        {
          "source": "in.c-sliced",
          "destination": "sliced",
          "where_column": "",
          "where_values": [],
          "where_operator": "eq",
          "columns": [],
          "keep_internal_timestamp_column": false
        }
      ]
    }
  }
}


================================================
FILE: component_config/sample-config/in/tables/days.csv
================================================
"1","Monday"
"2","Tuesday"
"3","Wednesday"
"4","Thursday"
"5","Friday"
"6","Saturday"
"7","Sunday"



================================================
FILE: component_config/sample-config/in/tables/days.csv.manifest
================================================
{"destination":"in.c-keboola-ex-google-drive-744153.ss-academy-workbook-registration-form","incremental":false, "columns":["id","name"]}


================================================
FILE: component_config/sample-config/in/tables/sliced/a.csv
================================================
"1","1152674","Platform Introduction (PR)"
"2","1152674","Platform Introduction (PR)"
"3","1249022","SQL Syntax Training (PR)"
"4","1152675","Best Practices (PR)"
"5","1152676","Debug Techniques (PR)"



================================================
FILE: component_config/sample-config/in/tables/sliced/b.csv
================================================
"6","1155656","Common Components and Processors (PR)"
"7","1152674","Platform Introduction (PR)"



================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi


================================================
FILE: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"


================================================
FILE: src/component.py
================================================
import logging
import os
import shutil
import time

from keboola.component.base import ComponentBase, sync_action
from keboola.component.dao import (
    BaseType,
    ColumnDefinition,
    SupportedDataTypes,
)
from keboola.component.exceptions import UserException
from keboola.component.sync_actions import MessageType

import duckdb_client
from actions.execution_plan_visualization import ExecutionPlanVisualizationAction
from actions.expected_input_tables import ExpectedInputTablesAction
from actions.lineage_visualization import LineageVisualizationAction
from configuration import Configuration
from in_tables_creator import LocalTableCreator
from query_orchestrator import BlockOrchestrator
from validators import SQLValidator


class Component(ComponentBase):
    def __init__(self):
        super().__init__()
        self.params = Configuration(**self.configuration.parameters)
        # Setup database connection
        self._setup_database_path()
        # Initialize connection
        self._connection = duckdb_client.init_connection(
            self.params.threads, self.params.max_memory_mb, self._db_out_path
        )

    def run(self):
        original_cwd = os.getcwd()
        try:
            os.chdir(self.data_folder_path)
            start_time = time.time()
            # Perform startup syntax check if enabled
            self._perform_startup_syntax_check()
            self._create_input_tables()
            self._process_queries()
            self._export_tables()
            self._export_files()
            if self.params.debug:
                duckdb_client.debug_log(self._connection)
            self._connection.close()
            total_time = time.time() - start_time
            logging.info(f"Total component execution time: {total_time:.2f}s")
        finally:
            try:
                os.chdir(original_cwd)
            except Exception as e:
                logging.warning(f"Failed to restore original working directory: {e}")

    def _setup_database_path(self):
        """Setup database paths and move existing database if needed."""
        db_in_path = os.path.join(self.data_folder_path, "in", "files", ".duck.db")
        self._db_out_path = os.path.join(self.data_folder_path, "out", "files", ".duck.db")
        # Ensure the output directory exists so DuckDB can create the database file
        out_dir = os.path.dirname(self._db_out_path)
        os.makedirs(out_dir, exist_ok=True)
        if os.path.exists(db_in_path):
            shutil.move(db_in_path, self._db_out_path)

    def _perform_startup_syntax_check(self) -> None:
        """
        Perform syntax check on all SQL queries at component startup.
        Raises UserException if syntax check fails and is enabled.
        """
        if not self.params.syntax_check_on_startup:
            logging.info("Skipping startup syntax check (disabled)")
            return
        logging.info("🔍 Performing syntax check on startup...")
        sql_validator = SQLValidator()
        syntax_result = sql_validator.validate_queries(self.params.blocks)
        if syntax_result.type == MessageType.DANGER:
            raise UserException(f"Syntax check failed on startup: {syntax_result.message}")
        else:
            logging.info(syntax_result.message)

    def _process_queries(self):
        """Process all SQL queries with timing."""
        start_time = time.time()
        # Block-based orchestration with consecutive blocks and parallel scripts
        orchestrator = BlockOrchestrator(connection=self._connection, max_workers=self.params.threads)
        orchestrator.add_queries_from_blocks(self.params.blocks)
        orchestrator.execute()
        logging.debug(f"All queries processed in {time.time() - start_time:.2f} seconds")

    @sync_action("syntax_check")
    def syntax_check(self):
        """
        Perform syntax check on all SQL queries without executing them.
        Returns ValidationResult with validation results.
        """
        sql_validator = SQLValidator()
        return sql_validator.validate_queries(self.params.blocks)

    @sync_action("lineage_visualization")
    def lineage_visualization(self):
        """
        Generate data lineage visualization from SQL queries.
        Returns ValidationResult with markdown lineage diagram.
        """
        action = LineageVisualizationAction()
        return action.lineage_visualization(self.params.blocks)

    @sync_action("execution_plan_visualization")
    def execution_plan_visualization(self):
        """
        Generate execution plan visualization showing block order and parallel execution.
        Returns ValidationResult with markdown execution plan.
        """
        action = ExecutionPlanVisualizationAction(self.params.threads)
        return action.execution_plan_visualization(self.params.blocks)

    @sync_action("expected_input_tables")
    def expected_input_tables(self):
        """
        Returns expected input tables with validation.
        If input tables are available in configuration, validates against them and returns detailed report.
        Otherwise returns a comma-separated list of required external input tables.
        """
        action = ExpectedInputTablesAction()

        # Try to get available input tables - if they exist, do validation
        available_tables = self._get_input_tables_definitions()
        if available_tables:
            # Do validation with detailed report
            return action.expected_input_tables(blocks=self.params.blocks, available_tables=available_tables)
        else:
            # Fall back to simple comma-separated list
            return action.expected_input_tables(self.params.blocks)

    def _get_input_tables_definitions(self):
        """
        Override parent method to add destination_table_name attribute from configuration.

        Returns:
            List of TableDefinition objects with added destination_table_name attribute and updated names
        """
        base_definitions = self.get_input_tables_definitions()

        for table_def in base_definitions:
            # Find mapping from source to destination names from config
            destination_table_name = None
            for table in self.configuration.tables_input_mapping:
                if table_def.id:
                    if table.source in table_def.id:
                        destination_table_name = table.destination
                        break

            # Fallback: use original name without .csv
            if not destination_table_name:
                destination_table_name = table_def.name

            # Add attribute and update name
            table_def.destination = destination_table_name

        return base_definitions

    def _create_input_tables(self):
        """Create input tables from detected sources."""
        start_time = time.time()

        for in_table in self._get_input_tables_definitions():
            creator = LocalTableCreator(self._connection, self.params.dtypes_infer)
            result = creator.create_table(in_table)
            logging.info(f"Input table created: {result.name} (is_view={result.is_view})")
        logging.debug(f"Input tables created in {time.time() - start_time:.2f} seconds")

    def _export_tables(self):
        """Export tables to KBC output with timing."""
        start_time = time.time()
        for table in self.configuration.tables_output_mapping:
            try:
                # Get table schema
                table_meta = self._connection.execute(f"""DESCRIBE TABLE '{table.source}';""").fetchall()
                schema = {
                    c[0]: ColumnDefinition(data_types=BaseType(dtype=self.convert_base_types(c[1]))) for c in table_meta
                }
                # Create output table definition
                out_table = self.create_out_table_definition(
                    name=table.source,
                    schema=schema,
                    primary_key=table.primary_key,
                    incremental=table.incremental,
                    destination=table.destination,
                    has_header=True,
                )
                # Export table to CSV
                self._connection.execute(f'''COPY "{table.source}" TO "{out_table.full_path}"
                                            (HEADER, DELIMITER ',', FORCE_QUOTE *)''')
                # Write manifest
                self.write_manifest(out_table)
            except Exception as e:
                raise UserException(f"Error exporting table {table.source}: {e}")
        logging.debug(f"Output tables exported in {time.time() - start_time:.2f} seconds")

    def _export_files(self):
        """Export files to KBC output with timing."""
        start_time = time.time()
        for file in self.configuration.files_output_mapping:
            out_file = self.create_out_file_definition(
                name=file.source,
                is_permanent=file.is_permanent,
                tags=file.tags,
            )
            self.write_manifest(out_file)
        logging.debug(f"Output files exported in {time.time() - start_time:.2f} seconds")

    @staticmethod
    def convert_base_types(dtype: str):
        dtype = dtype.split("(")[0]

        if dtype in [
            "TINYINT",
            "SMALLINT",
            "INTEGER",
            "BIGINT",
            "HUGEINT",
            "UTINYINT",
            "USMALLINT",
            "UINTEGER",
            "UBIGINT",
            "UHUGEINT",
        ]:
            return SupportedDataTypes.INTEGER
        elif dtype in ["REAL", "DECIMAL"]:
            return SupportedDataTypes.NUMERIC
        elif dtype == "DOUBLE":
            return SupportedDataTypes.FLOAT
        elif dtype == "BOOLEAN":
            return SupportedDataTypes.BOOLEAN
        elif dtype in ["TIMESTAMP", "TIMESTAMP WITH TIME ZONE"]:
            return SupportedDataTypes.TIMESTAMP
        elif dtype == "DATE":
            return SupportedDataTypes.DATE
        else:
            return SupportedDataTypes.STRING


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
FILE: src/configuration.py
================================================
import logging
from typing import Optional
from keboola.component.exceptions import UserException
from pydantic import BaseModel, Field, ValidationError
from system_resources import detect_cpu_count, get_optimal_memory_mb

# Default constants for system resources
DEFAULT_CPU_COUNT = 4
DEFAULT_MEMORY_MB = 4096


class Code(BaseModel):
    name: str
    script: list[str]


class Block(BaseModel):
    name: str
    codes: list[Code] = Field(default_factory=list)


class Configuration(BaseModel):
    blocks: list[Block] = Field(default_factory=list)
    threads: Optional[int] = Field(default=None, description="Number of threads (None for auto-detection)")
    max_memory_mb: Optional[int] = Field(default=None, description="Memory limit in MB (None for auto-detection)")
    dtypes_infer: bool = False
    debug: bool = False
    syntax_check_on_startup: bool = Field(default=False)

    def __init__(self, /, **data):
        try:
            super().__init__(**data)
            if self.debug:
                logging.debug("Component will run in Debug mode")
            # Apply resource detection
            self._apply_resource_detection()
        except ValidationError as e:
            error_messages = [f"{err['loc'][0]}: {err['msg']}" for err in e.errors()]
            raise UserException(f"Validation Error: {', '.join(error_messages)}")

    def _apply_resource_detection(self):
        """Apply resource detection logic."""
        # Get detected values for resources
        detected_threads = detect_cpu_count()
        optimal_memory = get_optimal_memory_mb()

        # Handle threads
        if self.threads is None:
            if detected_threads is not None:
                self.threads = detected_threads
            else:
                self.threads = DEFAULT_CPU_COUNT
                logging.info(f"Using default threads: {self.threads}")
        else:
            # Check if user value differs significantly from optimal
            if detected_threads is not None and self.threads != detected_threads:
                logging.info(f"User specified threads: {self.threads}, detected: {detected_threads}")

        # Handle memory
        if self.max_memory_mb is None:
            if optimal_memory is not None:
                self.max_memory_mb = optimal_memory
            else:
                self.max_memory_mb = DEFAULT_MEMORY_MB
                logging.info(f"Using default memory limit: {self.max_memory_mb}MB")
        else:
            # Check if user value differs significantly from optimal
            if optimal_memory is not None and self.max_memory_mb != optimal_memory:
                logging.info(f"User specified memory: {self.max_memory_mb}MB, optimal would be: {optimal_memory}MB")



================================================
FILE: src/duckdb_client.py
================================================
import logging
import os

import duckdb
from duckdb import DuckDBPyConnection

DUCK_DB_DIR = os.path.join(os.environ.get("TMPDIR", "/tmp"), "duckdb")


def init_connection(threads, max_memory, db_path) -> DuckDBPyConnection:
    """
    Returns connection to temporary DuckDB database with advanced optimizations.
    DuckDB supports thread-safe access to a single connection.
    """
    os.makedirs(DUCK_DB_DIR, exist_ok=True)
    # Enhanced configuration with performance optimizations
    # Using only definitely valid DuckDB configuration parameters
    config = {
        # Basic settings
        "temp_directory": DUCK_DB_DIR,
        "threads": threads,
        "max_memory": f"{max_memory}MB",
        "extension_directory": os.path.join(DUCK_DB_DIR, "extensions"),
        # Performance optimizations
        "preserve_insertion_order": False,  # Faster inserts
    }

    logging.info(f"Initializing DuckDB connection with config: {config}")
    conn = duckdb.connect(database=db_path, config=config)
    return conn


def debug_log(connection) -> None:
    """Debug logging for DuckDB connection."""
    try:
        q = [
            "SELECT database_name, table_name, has_primary_key, estimated_size, index_count FROM duckdb_tables();",
            "SELECT path, round(size/10**6)::INT as 'size_MB' FROM duckdb_temporary_files();",
            """SELECT tag,
                      round(memory_usage_bytes / 10 * 6)::INT as 'mem_MB',
                      round(temporary_storage_bytes / 10 * 6) ::INT as 'storage_MB'
               FROM duckdb_memory();""",
        ]
        for query in q:
            connection.sql(query).show()
    except Exception as e:
        logging.error(f"Failed to execute debug query: {e}")



================================================
FILE: src/in_tables_creator.py
================================================
"""Local file table creator."""

import logging
import os
from csv import DictReader
from dataclasses import dataclass

import duckdb
from keboola.component.dao import TableDefinition
from keboola.component.exceptions import UserException


@dataclass
class CreatedTable:
    """Information about created table/view."""

    name: str
    is_view: bool


class LocalTableCreator:
    """Create tables from local files (CSV, Parquet)."""

    def __init__(self, connection, dtypes_infer=True):
        self.connection = connection
        self.logger = logging.getLogger(self.__class__.__name__)
        self.dtypes_infer = dtypes_infer

    def create_table(self, in_table: TableDefinition) -> CreatedTable:
        """Create table from local file."""
        self.logger.debug(f"Processing local file for table: {in_table.name}")
        # Get data types
        dtype = self._get_data_types(in_table)
        # Get local file path
        path = self._get_local_file_path(in_table)
        # Create table
        ext = os.path.splitext(path)[1].lower()
        if ext in (".parquet", ".parq"):
            return self._create_table_from_parquet(in_table, path)
        else:
            try:
                return self._create_view_from_csv(in_table, path, dtype)
            except duckdb.IOException as e:
                raise UserException(f"Unsupported file type for table {in_table.name}, error: {e}")

    def _get_local_file_path(self, in_table: TableDefinition) -> str:
        """Get the appropriate file path for local file processing."""
        if in_table.is_sliced:
            path = f"{in_table.full_path}/*.csv"
            self.logger.debug(f"Using sliced path pattern: {path}")
        else:
            path = in_table.full_path
            self.logger.debug(f"Using direct path: {path}")
        return path

    def _get_data_types(self, in_table: TableDefinition) -> dict:
        """Get data types for table creation."""
        if not self.dtypes_infer:
            dtype = {key: value.data_types.get("base").dtype for key, value in in_table.schema.items()}
            self.logger.debug(f"Using custom dtypes: {dtype}")
        else:
            dtype = None
            self.logger.debug("Using automatic dtype inference")
        return dtype

    def _create_table_from_parquet(self, in_table: TableDefinition, path) -> CreatedTable:
        """Create table from Parquet files in S3 with optional type casting."""
        self.logger.debug(f"Creating table from Parquet files: {in_table.name}")
        # Check if type casting is needed for Snowflake INTEGER columns
        to_cast = self._get_columns_to_cast(in_table)
        if to_cast:
            return self._create_parquet_table_with_casting(in_table, path, to_cast)
        else:
            return self._create_parquet_table_without_casting(in_table, path)

    def _get_columns_to_cast(self, in_table: TableDefinition) -> list[str]:
        """Get list of columns that need to be cast to BIGINT."""
        """
        Snowflake keeps integers as NUMBER(38,0): https://docs.snowflake.com/en/sql-reference/data-types-numeric#int-integer-bigint-smallint-tinyint-byteint  # noqa: E501
        and exports them to Parquet as DECIMAL(38,0) which negatively impacts performance in DuckDB: https://duckdb.org/docs/stable/sql/data_types/numeric.html#fixed-point-decimals  # noqa: E501
        based on the KBC column metadata we are casting such columns to BIGINT.
        """
        to_cast = [
            k for k, v in in_table.table_metadata.column_metadata.items() if v.get("KBC.datatype.basetype") == "INTEGER"
        ]
        self.logger.debug(f"Columns to cast to BIGINT: {to_cast}")
        return to_cast

    def _create_parquet_table_with_casting(self, in_table: TableDefinition, path, to_cast: list[str]) -> CreatedTable:
        """Create Parquet table with type casting for INTEGER columns."""
        self.logger.debug("Processing Parquet with type casting")
        safe_path = path.replace("'", "''")
        rel = self.connection.sql(f"FROM read_parquet('{safe_path}')")
        # Use table name without parquet extension to avoid schema parsing (e.g., 'pq.parquet' -> 'pq')
        table_name = in_table.name.removesuffix(".parquet").removesuffix(".parq")
        columns = []
        for col in rel.columns:
            if col in to_cast:
                columns.append(duckdb.ColumnExpression(col).cast(duckdb.typing.BIGINT).alias(col))
            else:
                columns.append(duckdb.ColumnExpression(col))
        self.connection.execute(f'DROP TABLE IF EXISTS "{table_name}"')
        rel.select(*columns).to_table(table_name)
        return CreatedTable(
            name=table_name,
            is_view=False,
        )

    def _create_parquet_table_without_casting(self, in_table: TableDefinition, path) -> CreatedTable:
        """Create Parquet table without type casting."""
        self.logger.debug("Processing Parquet without type casting")
        table_name = in_table.destination_table_name.removesuffix(".parquet").removesuffix(".parq")
        safe_path = path.replace("'", "''")
        self.connection.execute(
            f"""
                CREATE OR REPLACE TABLE '{table_name}' AS
                FROM read_parquet('{safe_path}')
            """
        )
        return CreatedTable(
            name=table_name,
            is_view=False,
        )

    def _create_view_from_csv(self, in_table: TableDefinition, path: str, dtype: dict) -> CreatedTable:
        """Create table from local file with error handling."""
        try:
            # Table name should already be clean (without .csv) from get_input_tables_definitions
            table_name = in_table.destination.removesuffix(".csv")
            quote_char = in_table.enclosure or '"'
            self.logger.debug(
                f"Reading CSV file with parameters: delimiter='{in_table.delimiter or ','}',"
                f" quotechar='{quote_char}', header={self._has_header_in_file(in_table)}"
            )
            self.connection.read_csv(
                path_or_buffer=path,
                delimiter=in_table.delimiter or ",",
                quotechar=in_table.enclosure or '"',
                header=self._has_header_in_file(in_table),
                names=self._get_column_names(in_table),
                dtype=dtype,
            ).to_view(table_name, replace=True)
            return CreatedTable(
                name=table_name,
                is_view=True,
            )
        except duckdb.IOException as e:
            self.logger.error(f"DuckDB IO error importing table {in_table.name}: {e}")
            raise UserException(f"Error importing table {in_table.name}: {e}")
        except Exception as e:
            self.logger.error(f"Unexpected error importing table {in_table.name}: {e}")
            raise UserException(f"Unexpected error importing table {in_table.name}: {e}")

    @staticmethod
    def _has_header_in_file(t: TableDefinition) -> bool:
        """Determine if file has header."""
        is_input_mapping_manifest = t.stage == "in"
        if t.is_sliced:
            has_header = False
        elif t.column_names and not is_input_mapping_manifest:
            has_header = False
        else:
            has_header = True
        return has_header

    @staticmethod
    def _get_column_names(t: TableDefinition) -> list[str]:
        """Get table header from the file or from the manifest."""
        header = None
        if t.is_sliced or t.column_names:
            header = t.column_names
        else:
            with open(t.full_path, encoding="utf-8") as f:
                reader = DictReader(f, lineterminator="\n", delimiter=t.delimiter, quotechar=t.enclosure)
                header = reader.fieldnames
        return header



================================================
FILE: src/query_orchestrator.py
================================================
"""Block-based SQL query orchestrator with consecutive blocks and parallel scripts."""

import logging
import threading
import time
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor, as_completed
from dataclasses import dataclass

from keboola.component.exceptions import UserException

from sql_parser import SQLParser


@dataclass
class Query:
    """Simple query representation."""

    name: str
    sql: str
    dependencies: set[str]  # tables this query reads
    outputs: set[str]  # tables this query creates
    block_name: str  # Add block information
    code_name: str  # Add code information


@dataclass
class Batch:
    """A batch of queries that can be executed in parallel."""

    queries: list[Query]

    def __len__(self) -> int:
        return len(self.queries)

    def __iter__(self):
        return iter(self.queries)

    def __getitem__(self, index):
        return self.queries[index]


@dataclass
class Block:
    """A block containing batches that must be executed sequentially."""

    name: str
    batches: list[Batch]

    def __len__(self) -> int:
        return len(self.batches)

    def __iter__(self):
        return iter(self.batches)

    @property
    def total_queries(self) -> int:
        return sum(len(batch) for batch in self.batches)


@dataclass
class ExecutionPlan:
    """Complete execution plan with blocks that must be executed consecutively."""

    blocks: list[Block]

    def __len__(self) -> int:
        return len(self.blocks)

    def __iter__(self):
        return iter(self.blocks)

    @property
    def total_queries(self) -> int:
        return sum(block.total_queries for block in self.blocks)

    @property
    def total_batches(self) -> int:
        return sum(len(block) for block in self.blocks)


@dataclass
class ExecutionStats:
    """Statistics from query execution."""

    total_queries: int
    total_batches: int
    total_execution_time: float
    batch_times: list[float]
    query_times: list[float]
    fastest_query: float
    slowest_query: float

    @property
    def average_query_time(self) -> float:
        return sum(self.query_times) / len(self.query_times) if self.query_times else 0.0

    @property
    def average_batch_time(self) -> float:
        return sum(self.batch_times) / len(self.batch_times) if self.batch_times else 0.0


def _create_parallel_batches_for_block(block_queries: list[Query], producers: dict) -> list[Batch]:
    """
    Create parallel batches for queries within a single block.
    Uses topological sort to respect SQL dependencies.
    """
    batches = []
    remaining = {q.name: q for q in block_queries}
    # Create local dependency graph and in-degree for this block only
    local_graph = defaultdict(list)
    local_in_degree = {q.name: 0 for q in block_queries}

    # Build mapping of tables to CREATE queries in this block
    table_creators = {}
    for query in block_queries:
        if "CREATE" in query.sql.upper():
            for output in query.outputs:
                table_creators[output] = query

    # Build local dependency graph for this block
    for query in block_queries:
        # Add explicit INSERT → CREATE dependencies within the block
        if "INSERT" in query.sql.upper():
            for output in query.outputs:
                if output in table_creators:
                    creator = table_creators[output]
                    # Add dependency: CREATE must run before INSERT for the same table
                    local_graph[creator.name].append(query.name)
                    local_in_degree[query.name] += 1

        for dep in query.dependencies:
            # Check if dependency is produced by another query in this block
            if dep in producers:
                producer = producers[dep]
                # Only add edge if producer is in the same block
                if producer.name in remaining:
                    local_graph[producer.name].append(query.name)
                    local_in_degree[query.name] += 1
    while remaining:
        # Find queries with no local dependencies
        ready = [remaining[name] for name in remaining if local_in_degree[name] == 0]
        if not ready:
            # Check for circular dependencies within block
            remaining_names = list(remaining.keys())
            logging.error("Circular dependency detected in block!")
            logging.error(f"Remaining queries: {remaining_names}")
            for name in remaining_names:
                remaining_query = remaining[name]
                logging.error(f"Query '{name}' depends on: {remaining_query.dependencies}")
            raise UserException(
                f"Circular dependency detected among queries in block: {', '.join(remaining_names)}. "
                f"Check your SQL dependencies."
            )
        batches.append(Batch(queries=ready))
        # Remove processed queries and update local dependencies
        for query in ready:
            del remaining[query.name]
            for dependent in local_graph[query.name]:
                if dependent in local_in_degree:
                    local_in_degree[dependent] -= 1
    return batches


class BlockOrchestrator:
    """
    Orchestrator that executes blocks consecutively, but scripts within each block in parallel.
    Creates its own DAG based on SQL query analysis.
    """

    def __init__(self, connection, max_workers: int = 4):
        self.connection = connection
        self.max_workers = max_workers
        self.queries: list[Query] = []
        self.query_times: list[float] = []
        self.batch_times: list[float] = []
        self.sql_parser = SQLParser()

    def add_queries_from_blocks(self, blocks):
        """Add queries from Keboola blocks structure with block and code information."""
        for block, code, script, script_index in self.sql_parser.iterate_blocks(blocks):
            name = self.sql_parser.get_query_name(code, script_index)
            # Parse and create query with block information
            query = self._parse_sql(name, script, block.name, code.name)
            self.queries.append(query)

    def _parse_sql(self, name: str, sql: str, block_name: str, code_name: str) -> Query:
        """Parse SQL and create Query with extracted dependencies using SQLGlot."""
        try:
            # Use SQLParser to extract dependencies and outputs
            dependencies, outputs = self.sql_parser.extract_dependencies_and_outputs(sql)
            return Query(
                name=name,
                sql=sql,
                dependencies=dependencies,
                outputs=outputs,
                block_name=block_name,
                code_name=code_name,
            )
        except Exception as e:
            # Fallback to empty sets if parsing fails
            logging.warning(f"Failed to parse SQL for query '{name}': {e}")
            return Query(
                name=name,
                sql=sql,
                dependencies=set(),
                outputs=set(),
                block_name=block_name,
                code_name=code_name,
            )

    def build_block_execution_plan(self) -> ExecutionPlan:
        """
        Build execution plan that respects block order but allows parallel execution within blocks.
        Creates DAG based on SQL dependencies.

        Returns:
            ExecutionPlan containing blocks that must be executed consecutively,
            where each block contains batches that can run in parallel.
        """
        if not self.queries:
            return ExecutionPlan(blocks=[])
        # Group queries by block
        block_queries = defaultdict(list)
        for query in self.queries:
            block_queries[query.block_name].append(query)
        # Build producer mapping across all queries
        # For tables that have both CREATE and INSERT, INSERT should be the producer
        # (because reading from table usually needs data, not just empty structure)
        producers = {}
        create_producers = {}
        insert_producers = {}

        for query in self.queries:
            for output in query.outputs:
                # Check if this is a CREATE or INSERT query
                if "CREATE" in query.sql.upper():
                    create_producers[output] = query
                elif "INSERT" in query.sql.upper():
                    insert_producers[output] = query
                producers[output] = query

        # Override with INSERT producers where available (data is more important than structure)
        # Note: If multiple INSERTs exist for same table, last one becomes producer
        # This is acceptable as dependency graph still ensures correct execution order
        for table, insert_query in insert_producers.items():
            producers[table] = insert_query
        # Build dependency graph
        graph = defaultdict(list)
        in_degree = {q.name: 0 for q in self.queries}
        for query in self.queries:
            for dep in query.dependencies:
                if dep in producers:
                    producer = producers[dep]
                    graph[producer.name].append(query.name)
                    in_degree[query.name] += 1
                # else: external dependency (input table)
        # Create execution plan: blocks in order, queries within blocks in parallel
        blocks = []
        for block_name in block_queries.keys():
            block_queries_list = block_queries[block_name]
            # For each block, create batches of queries that can run in parallel
            batches = _create_parallel_batches_for_block(block_queries_list, producers)
            blocks.append(Block(name=block_name, batches=batches))
        return ExecutionPlan(blocks=blocks)

    def execute(self) -> ExecutionStats:
        """Execute queries with block-based parallelization and return statistics."""
        execution_start = time.time()
        # Reset statistics
        self.query_times.clear()
        self.batch_times.clear()
        execution_plan = self.build_block_execution_plan()

        block_count = len(execution_plan)
        block_text = "block" if block_count == 1 else "blocks"
        logging.info(
            f"Executing {execution_plan.total_queries} queries in "
            f"{execution_plan.total_batches} batches across {block_count} {block_text}"
        )

        batch_counter = 0
        # Execute blocks consecutively
        for block_index, block in enumerate(execution_plan):
            if not block.batches:
                continue

            block_start_time = time.time()
            logging.info(f"Starting block '{block.name}' ({block_index + 1}/{len(execution_plan)})")

            # Execute all batches within this block
            for batch in block:
                batch_counter += 1
                batch_start = time.time()
                if len(batch) == 1:
                    logging.info(
                        f"Batch {batch_counter}/{execution_plan.total_batches}: Executing 1 query sequentially"
                    )
                    try:
                        query_time = self._execute_query(batch[0])
                        self.query_times.append(query_time)
                    except Exception as e:
                        raise UserException(f"Query '{batch[0].name}' failed: {e}")
                else:
                    logging.info(
                        f"Batch {batch_counter}/{execution_plan.total_batches}: "
                        f"Executing {len(batch)} queries in parallel"
                    )
                    query_times = self._execute_batch_parallel(batch)
                    self.query_times.extend(query_times)
                batch_time = time.time() - batch_start
                self.batch_times.append(batch_time)

            # Block completed
            block_time = time.time() - block_start_time
            logging.info(f"Block '{block.name}' completed in {block_time:.2f}s")

        total_time = time.time() - execution_start
        # Create statistics
        stats = ExecutionStats(
            total_queries=execution_plan.total_queries,
            total_batches=execution_plan.total_batches,
            total_execution_time=total_time,
            batch_times=self.batch_times.copy(),
            query_times=self.query_times.copy(),
            fastest_query=min(self.query_times) if self.query_times else 0.0,
            slowest_query=max(self.query_times) if self.query_times else 0.0,
        )
        return stats

    @staticmethod
    def _get_sql_preview(sql: str, max_length: int = 10) -> str:
        """Get a preview of SQL query for logging purposes."""
        cleaned_sql = sql.replace("\n", " ").strip()
        if len(cleaned_sql) <= max_length:
            return cleaned_sql
        return cleaned_sql[:max_length] + "..."

    def _execute_query(self, query: Query) -> float:
        """Execute single query and return execution time."""
        thread_id = threading.current_thread().ident
        start = time.time()
        # DuckDB supports thread-safe access to a single connection
        self.connection.execute(query.sql)
        duration = time.time() - start
        sql_preview = BlockOrchestrator._get_sql_preview(query.sql)
        logging.info(f"Query '{query.name}' completed in {duration:.2f}s [Thread {thread_id}] - SQL: {sql_preview}")
        return duration

    def _execute_batch_parallel(self, batch: Batch) -> list[float]:
        """Execute batch of queries in parallel and return list of execution times."""
        max_workers = min(self.max_workers, len(batch))

        if max_workers == 1:
            query_times = []
            for query in batch:
                try:
                    execution_time = self._execute_query(query)
                    query_times.append(execution_time)
                except Exception as e:
                    raise UserException(f"Query '{query.name}' failed: {e}")
            return query_times
        else:
            logging.info(f"Using {max_workers} threads")
            with ThreadPoolExecutor(max_workers=max_workers) as executor:
                # Submit all queries
                future_to_query = {executor.submit(self._execute_query, query): query for query in batch}
                query_times = []
                failed_queries = []
                completed_futures = set()

                # Wait for completion with better error handling
                for future in as_completed(future_to_query):
                    completed_futures.add(future)
                    try:
                        execution_time = future.result()
                        query_times.append(execution_time)
                    except Exception as e:
                        failed_query = future_to_query[future]
                        failed_queries.append(f"{failed_query.name}: {str(e)}")

                if failed_queries:
                    if len(completed_futures) < len(future_to_query):
                        self._cancel_remaining_futures(future_to_query, completed_futures)
                    successful_count = len(query_times)
                    raise UserException(
                        f"Query execution failed after {successful_count} successful "
                        f"quer{'y' if successful_count == 1 else 'ies'}:\n  - {'\n  - '.join(failed_queries)}"
                    )

                return query_times

    @staticmethod
    def _cancel_remaining_futures(future_to_query: dict, completed_futures: set) -> int:
        """Cancel all futures that haven't completed yet. Returns number of cancelled futures."""
        cancelled_count = 0
        for future in future_to_query:
            if future not in completed_futures and not future.done():
                try:
                    if future.cancel():
                        cancelled_count += 1
                except Exception:
                    pass

        # Give a brief moment for cancellations to take effect
        if cancelled_count > 0:
            time.sleep(0.1)

        return cancelled_count



================================================
FILE: src/sql_parser.py
================================================
"""
SQL parsing utilities for dependency analysis and query processing.
"""

import logging
from typing import List, Set, Tuple

import sqlglot
from sqlglot import exp

from configuration import Block, Code


class SQLParser:
    """Utility class for parsing SQL and extracting dependencies and outputs."""

    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)

    def extract_dependencies_and_outputs(self, sql: str) -> Tuple[Set[str], Set[str]]:
        """
        Extract table dependencies and outputs from SQL query.

        Args:
            sql: SQL query string

        Returns:
            Tuple of (dependencies, outputs) sets
        """
        try:
            parsed = sqlglot.parse(sql, read="duckdb")
            dependencies = set()
            outputs = set()

            for statement in parsed:
                if statement is None:
                    continue

                # Find all table references (dependencies)
                # Exclude INSERT target tables from dependencies by identifying the target table
                # (see logic below: insert_target is set for INSERT statements, and such tables are skipped in the loop)
                insert_target = None
                if isinstance(statement, exp.Insert):
                    if statement.this and hasattr(statement.this, "name"):
                        insert_target = statement.this.name

                for table in statement.find_all(exp.Table):
                    table_name = table.name
                    if table_name and table_name != insert_target:
                        dependencies.add(table_name)

                # Find CREATE statements (outputs)
                if isinstance(statement, exp.Create):
                    if statement.this:
                        # For CREATE TABLE, statement.this is a Schema object
                        if hasattr(statement.this, "this") and statement.this.this:
                            outputs.add(str(statement.this.this))
                        elif hasattr(statement.this, "name") and statement.this.name:
                            outputs.add(str(statement.this.name))

                # Find INSERT statements (output only)
                # Note: INSERT table dependencies are handled explicitly in orchestrator
                if isinstance(statement, exp.Insert):
                    if statement.this and hasattr(statement.this, "name"):
                        table_name = statement.this.name
                        # INSERT modifies the table (output)
                        outputs.add(table_name)
                        # Exclude INSERT target table from dependencies to prevent self-dependencies
                        # (i.e., a table being both an output and a dependency in the same statement)

                # Find other statements that modify tables (UPDATE, DELETE, etc.)
                if isinstance(statement, (exp.Update, exp.Delete)):
                    if statement.this and hasattr(statement.this, "name"):
                        outputs.add(statement.this.name)

                # Remove CTEs from dependencies (they're defined in the same query)
                for cte in statement.find_all(exp.CTE):
                    if cte.alias:
                        dependencies.discard(cte.alias)

            # Remove CREATE outputs from dependencies (can't depend on what you create)
            # But keep INSERT dependencies (you need the table to exist before inserting)
            create_outputs = set()
            for statement in parsed:
                if statement is None:
                    continue
                if isinstance(statement, exp.Create):
                    if statement.this:
                        # For CREATE TABLE, statement.this is a Schema object
                        if hasattr(statement.this, "this") and statement.this.this:
                            create_outputs.add(str(statement.this.this))
                        elif hasattr(statement.this, "name") and statement.this.name:
                            create_outputs.add(str(statement.this.name))
            dependencies = dependencies - create_outputs

            return dependencies, outputs

        except Exception as e:
            self.logger.warning(f"Failed to parse SQL: {e}")
            return set(), set()

    @staticmethod
    def iterate_blocks(blocks: List[Block]):
        """
        Generator that yields (block, code, script, index) tuples.

        Args:
            blocks: List of blocks from configuration

        Yields:
            Tuple of (block, code, script, script_index)
        """
        for block in blocks:
            for code in block.codes:
                for i, script in enumerate(code.script):
                    yield block, code, script, i

    @staticmethod
    def get_query_name(code: Code, script_index: int) -> str:
        """
        Generate query name from code and script index.

        Args:
            code: Code object
            script_index: Index of script in code.script list

        Returns:
            Query name string
        """
        if len(code.script) > 1:
            return f"{code.name}_{script_index}"
        return code.name



================================================
FILE: src/system_resources.py
================================================
"""System resource detection and DuckDB optimization module."""

import os
import logging
from typing import Optional

# Constants for optimization
# Reserve a fixed amount of memory for Python runtime and overhead
PYTHON_RESERVED_MEMORY_MB = 256


def detect_cpu_count() -> Optional[int]:
    """Detect CPU count from cgroup."""
    # Try cgroup v1
    cpu_quota_path = "/sys/fs/cgroup/cpu/cpu.cfs_quota_us"
    cpu_period_path = "/sys/fs/cgroup/cpu/cpu.cfs_period_us"

    if os.path.exists(cpu_quota_path) and os.path.exists(cpu_period_path):
        try:
            with open(cpu_quota_path, "r") as f:
                quota = int(f.read().strip())
            with open(cpu_period_path, "r") as f:
                period = int(f.read().strip())

            if quota > 0:
                cpu_count = max(1, quota // period)
                logging.debug(f"cgroup v1 CPU detected: quota={quota}, period={period}, count={cpu_count}")
                return cpu_count
        except (ValueError, OSError, IOError) as e:
            logging.debug(f"cgroup v1 CPU detection failed: {e}")
        except Exception as e:
            logging.debug(f"Unexpected error in cgroup v1 CPU detection: {e}")

    # Try cgroup v2
    cpu_max_path = "/sys/fs/cgroup/cpu.max"
    if os.path.exists(cpu_max_path):
        try:
            with open(cpu_max_path, "r") as f:
                content = f.read().strip()
                if content != "max":
                    quota, period = map(int, content.split())
                    cpu_count = max(1, quota // period)
                    logging.debug(f"cgroup v2 CPU detected: quota={quota}, period={period}, count={cpu_count}")
                    return cpu_count
        except (ValueError, OSError, IOError) as e:
            logging.debug(f"cgroup v2 CPU detection failed: {e}")
        except Exception as e:
            logging.debug(f"Unexpected error in cgroup v2 CPU detection: {e}")

    return None


def detect_memory_mb() -> Optional[int]:
    """Detect memory limit from cgroup."""
    # Try cgroup v1
    memory_limit_path = "/sys/fs/cgroup/memory/memory.limit_in_bytes"
    if os.path.exists(memory_limit_path):
        try:
            with open(memory_limit_path, "r") as f:
                memory_bytes = int(f.read().strip())
                if memory_bytes > 0:
                    memory_mb = memory_bytes // (1024 * 1024)
                    logging.debug(f"cgroup v1 memory detected: {memory_bytes} bytes = {memory_mb}MB")
                    return memory_mb
        except (ValueError, OSError, IOError) as e:
            logging.debug(f"cgroup v1 memory detection failed: {e}")
        except Exception as e:
            logging.debug(f"Unexpected error in cgroup v1 memory detection: {e}")

    # Try cgroup v2
    memory_max_path = "/sys/fs/cgroup/memory.max"
    if os.path.exists(memory_max_path):
        try:
            with open(memory_max_path, "r") as f:
                content = f.read().strip()
                if content != "max":
                    memory_bytes = int(content)
                    memory_mb = memory_bytes // (1024 * 1024)
                    logging.debug(f"cgroup v2 memory detected: {memory_bytes} bytes = {memory_mb}MB")
                    return memory_mb
        except (ValueError, OSError, IOError) as e:
            logging.debug(f"cgroup v2 memory detection failed: {e}")
        except Exception as e:
            logging.debug(f"Unexpected error in cgroup v2 memory detection: {e}")

    return None


def get_optimal_memory_mb() -> Optional[int]:
    """Return detected memory minus a fixed Python reserve (in MB)."""
    try:
        detected_memory = detect_memory_mb()
        if detected_memory is None:
            logging.warning("Memory detection returned None")
            return None
        usable_memory = max(1, int(detected_memory) - PYTHON_RESERVED_MEMORY_MB)
        logging.info(
            f"Detected memory: {detected_memory}MB, reserving {PYTHON_RESERVED_MEMORY_MB}MB for Python"
            f", using: {usable_memory}MB"
        )
        return usable_memory
    except (ValueError, TypeError) as e:
        logging.warning(f"Memory calculation error: {e}")
        return None
    except Exception as e:
        logging.warning(f"Unexpected error in memory optimization: {e}")
        return None



================================================
FILE: src/actions/__init__.py
================================================
"""
Actions module for sync actions.
"""

from .lineage_visualization import LineageVisualizationAction
from .execution_plan_visualization import ExecutionPlanVisualizationAction
from .expected_input_tables import ExpectedInputTablesAction

__all__ = [
    "LineageVisualizationAction",
    "ExecutionPlanVisualizationAction",
    "ExpectedInputTablesAction",
]



================================================
FILE: src/actions/execution_plan_visualization.py
================================================
"""
Execution plan visualization action for query execution planning.
"""

import logging
from keboola.component.sync_actions import ValidationResult, MessageType
from query_orchestrator import BlockOrchestrator


class ExecutionPlanVisualizationAction:
    """Handles execution plan visualization sync action."""

    def __init__(self, max_workers: int):
        self.max_workers = max_workers
        self.logger = logging.getLogger(self.__class__.__name__)

    def execution_plan_visualization(self, blocks):
        """
        Generate execution plan visualization showing block order and parallel execution.
        Returns ValidationResult with markdown execution plan.
        """
        try:
            # Create orchestrator to build execution plan
            orchestrator = BlockOrchestrator(
                connection=None,  # We don't need actual connection for planning
                max_workers=self.max_workers,
            )
            orchestrator.add_queries_from_blocks(blocks)
            # Generate markdown execution plan
            return ValidationResult(
                message=self._generate_execution_plan_markdown(orchestrator), type=MessageType.SUCCESS
            )
        except Exception as e:
            return ValidationResult(
                message=f"Error generating execution plan visualization: {str(e)}", type=MessageType.DANGER
            )

    @staticmethod
    def _generate_execution_plan_markdown(orchestrator: BlockOrchestrator) -> str:
        """Generate markdown execution plan from orchestrator."""
        markdown = "# 🚀 Execution Plan Visualization\n\n"
        # Build execution plan
        execution_plan = orchestrator.build_block_execution_plan()
        markdown += "## 📊 Execution Summary\n\n"
        markdown += f"- **Total Queries:** {execution_plan.total_queries}\n"
        markdown += f"- **Total Batches:** {execution_plan.total_batches}\n"
        markdown += f"- **Total Blocks:** {len(execution_plan)}\n"
        markdown += f"- **Max Parallel Workers:** {orchestrator.max_workers}\n\n"
        markdown += "## 🔄 Execution Flow\n\n"

        # Iterate through blocks in execution order
        for block_index, block in enumerate(execution_plan, 1):
            markdown += f"### 🧱 Block {block_index}: {block.name}\n\n"
            markdown += f"**Block contains {len(block)} batches with {block.total_queries} queries total**\n\n"

            # Iterate through batches within this block
            for batch_index, batch in enumerate(block, 1):
                if len(batch) == 1:
                    markdown += f"#### 🔄 Batch {batch_index} (Sequential - 1 query)\n\n"
                else:
                    markdown += f"#### ⚡ Batch {batch_index} (Parallel - {len(batch)} queries)\n\n"

                for query in batch:
                    markdown += f"- **{query.name}** (Code: {query.code_name})\n"
                    if query.dependencies:
                        deps = ", ".join(sorted(query.dependencies))
                        markdown += f"  - Dependencies: `{deps}`\n"
                    if query.outputs:
                        outputs = ", ".join(sorted(query.outputs))
                        markdown += f"  - Outputs: `{outputs}`\n"
                    markdown += "\n"
            markdown += "---\n\n"
        markdown += "## 🔍 Dependency Analysis\n\n"
        # Show dependency graph
        for query in orchestrator.queries:
            markdown += f"### 📋 {query.name}\n\n"
            markdown += f"**Block:** {query.block_name}\n"
            markdown += f"**Code:** {query.code_name}\n\n"
            if query.dependencies:
                markdown += "**Dependencies:**\n"
                for dep in sorted(query.dependencies):
                    markdown += f"- `{dep}`\n"
                markdown += "\n"
            if query.outputs:
                markdown += "**Outputs:**\n"
                for output in sorted(query.outputs):
                    markdown += f"- `{output}`\n"
                markdown += "\n"
        return markdown



================================================
FILE: src/actions/expected_input_tables.py
================================================
"""
Expected input tables action for dependency analysis.
"""

import logging

from keboola.component.sync_actions import MessageType, ValidationResult

from sql_parser import SQLParser


class ExpectedInputTablesAction:
    """Handles expected input tables sync action."""

    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.sql_parser = SQLParser()

    def expected_input_tables(self, blocks, available_tables=None):
        """
        Returns a comma-separated list of required external input tables (filtering out likely CTE aliases).
        If available_tables is provided, validates against them and returns detailed report.
        """
        try:
            # Single-pass analysis: collect both dependencies and outputs
            all_dependencies = set()
            all_outputs = set()

            # Single pass: collect both dependencies and outputs from all queries
            for _, _, script, _ in self.sql_parser.iterate_blocks(blocks):
                dependencies, outputs = self.sql_parser.extract_dependencies_and_outputs(script)
                all_dependencies.update(dependencies)
                all_outputs.update(outputs)

            # External tables are dependencies that are never created anywhere in the entire pipeline
            external_tables = all_dependencies - all_outputs

            # If no validation requested, return simple comma-separated list
            if available_tables is None:
                message = ", ".join(sorted(external_tables)) if external_tables else ""
                return ValidationResult(message=message, type=MessageType.SUCCESS)

            # Perform validation against available tables
            return self._validate_against_available_tables(external_tables, available_tables)

        except Exception as e:
            error_message = f"Error analyzing expected input tables: {str(e)}"
            return ValidationResult(message=error_message, type=MessageType.DANGER)

    def _validate_against_available_tables(self, expected_tables, available_tables):
        """Validate expected tables against available input tables."""
        # Get available table names (remove .csv suffix)
        available_table_names = {
            table.destination.removesuffix(".csv").removesuffix(".parquet").removesuffix(".parq")
            for table in available_tables
        }

        # Compare expected vs available
        missing_tables = expected_tables - available_table_names
        extra_tables = available_table_names - expected_tables

        # Build detailed message
        message = self._build_validation_message(expected_tables, available_table_names, missing_tables, extra_tables)

        # Determine message type
        if missing_tables:
            message_type = MessageType.DANGER
        elif extra_tables:
            message_type = MessageType.WARNING
        else:
            message_type = MessageType.SUCCESS

        return ValidationResult(message=message, type=message_type)

    def _build_validation_message(self, expected_tables, available_table_names, missing_tables, extra_tables):
        """Build detailed validation message."""
        lines = []

        # Header with summary
        if not expected_tables:
            lines.append("✅ No input tables required by SQL queries")
            return "\n".join(lines)

        lines.append("📋 **Input Tables Validation Report**")
        lines.append("")

        # Expected tables section
        lines.append(f"**Required tables ({len(expected_tables)}):**")
        for table in sorted(expected_tables):
            status = "✅" if table in available_table_names else "❌"
            lines.append(f"  {status} `{table}`")
        lines.append("")

        # Available tables section
        lines.append(f"**Available tables ({len(available_table_names)}):**")
        for table in sorted(available_table_names):
            status = "✅" if table in expected_tables else "⚠️"
            lines.append(f"  {status} `{table}`")
        lines.append("")

        # Issues section
        if missing_tables or extra_tables:
            lines.append("**Issues found:**")

            if missing_tables:
                missing_table_list = ", ".join(f"`{t}`" for t in sorted(missing_tables))
                lines.append(f"❌ **Missing tables ({len(missing_tables)}):** {missing_table_list}")

            if extra_tables:
                extra_table_list = ", ".join(f"`{t}`" for t in sorted(extra_tables))
                lines.append(f"⚠️ **Extra tables ({len(extra_tables)}):** {extra_table_list}")
        else:
            lines.append("✅ **All required tables are available!**")

        return "\n".join(lines)



================================================
FILE: src/actions/lineage_visualization.py
================================================
"""
Lineage visualization action for data lineage analysis.
"""

import logging
from keboola.component.sync_actions import ValidationResult, MessageType

from sql_parser import SQLParser


class LineageVisualizationAction:
    """Handles lineage visualization sync action."""

    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.sql_parser = SQLParser()

    def lineage_visualization(self, blocks):
        """
        Generate data lineage visualization from SQL queries.
        Returns ValidationResult with markdown lineage diagram.
        """
        try:
            # Collect all queries and their dependencies
            queries = []
            for block, code, script, script_index in self.sql_parser.iterate_blocks(blocks):
                query_name = self.sql_parser.get_query_name(code, script_index)
                # Parse SQL to extract dependencies and outputs
                dependencies, outputs = self.sql_parser.extract_dependencies_and_outputs(script)
                queries.append(
                    {
                        "name": query_name,
                        "block": block.name,
                        "code": code.name,
                        "dependencies": dependencies,
                        "outputs": outputs,
                        "sql": script,
                    }
                )
            # Generate markdown lineage diagram
            markdown = self._generate_lineage_markdown(queries)
            return ValidationResult(message=markdown, type=MessageType.SUCCESS)
        except Exception as e:
            error_message = f"Error generating lineage visualization: {str(e)}"
            return ValidationResult(message=error_message, type=MessageType.DANGER)

    @staticmethod
    def _generate_lineage_markdown(queries: list) -> str:
        """Generate markdown lineage diagram from queries."""
        markdown = "# 📊 Data Lineage Visualization\n\n"
        # Collect all tables
        all_tables = set()
        for query in queries:
            all_tables.update(query["dependencies"])
            all_tables.update(query["outputs"])
        # Group by blocks
        blocks = {}
        for query in queries:
            block_name = query["block"]
            if block_name not in blocks:
                blocks[block_name] = []
            blocks[block_name].append(query)
        markdown += "## 🔗 Table Dependencies\n\n"
        # Show table dependencies
        for table in sorted(all_tables):
            markdown += f"### 📋 {table}\n\n"
            # Find queries that read this table
            readers = [q for q in queries if table in q["dependencies"]]
            if readers:
                markdown += "**Read by:**\n"
                for reader in readers:
                    markdown += f"- `{reader['name']}` (Block: {reader['block']}, Code: {reader['code']})\n"
                markdown += "\n"
            # Find queries that create this table
            creators = [q for q in queries if table in q["outputs"]]
            if creators:
                markdown += "**Created by:**\n"
                for creator in creators:
                    markdown += f"- `{creator['name']}` (Block: {creator['block']}, Code: {creator['code']})\n"
                markdown += "\n"
        markdown += "## 📈 Query Flow\n\n"
        # Show query flow by blocks
        for block_name, block_queries in blocks.items():
            markdown += f"### 🧱 {block_name}\n\n"
            for query in block_queries:
                markdown += f"#### 🔧 {query['name']}\n\n"
                markdown += f"**Code:** {query['code']}\n\n"
                if query["dependencies"]:
                    markdown += "**Inputs:**\n"
                    for dep in sorted(query["dependencies"]):
                        markdown += f"- `{dep}`\n"
                    markdown += "\n"
                if query["outputs"]:
                    markdown += "**Outputs:**\n"
                    for output in sorted(query["outputs"]):
                        markdown += f"- `{output}`\n"
                    markdown += "\n"
                markdown += "**SQL:**\n```sql\n"
                markdown += query["sql"]
                markdown += "\n```\n\n"
        return markdown



================================================
FILE: src/validators/__init__.py
================================================
"""Validators module for SQL and other validations."""

from .sql_validator import SQLValidator

__all__ = ["SQLValidator"]



================================================
FILE: src/validators/sql_validator.py
================================================
"""SQL validation module."""

import logging
from typing import Dict, List

import sqlglot
from keboola.component.sync_actions import MessageType, ValidationResult
from sqlglot.errors import ParseError

from sql_parser import SQLParser


class SQLValidator:
    """SQL syntax and semantic validation."""

    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.sql_parser = SQLParser()

    def validate_queries(self, blocks) -> ValidationResult:
        """
        Validate all SQL queries in blocks.
        Args:
            blocks: List of Block objects (Pydantic models) with codes containing SQL scripts
        Returns:
            ValidationResult with validation results
        """
        total_queries = 0
        valid_queries = 0
        errors = []
        try:
            for block, code, script, script_index in self.sql_parser.iterate_blocks(blocks):
                query_name = self.sql_parser.get_query_name(code, script_index)
                total_queries += 1
                try:
                    # Parse SQL with sqlglot
                    parsed = sqlglot.parse(script, read="duckdb")
                    if not parsed:
                        errors.append(f"Block '{block.name}' > Query '{query_name}': Empty or invalid SQL query")
                    else:
                        # Additional validation for common errors
                        warnings = self._check_common_sql_errors(script)
                        if warnings:
                            errors.extend(
                                [f"Block '{block.name}' > Query '{query_name}': {w['error']}" for w in warnings]
                            )
                        else:
                            valid_queries += 1
                except ParseError as e:
                    errors.append(f"Block '{block.name}' > Query '{query_name}': Syntax error: {str(e)}")
                except Exception as e:
                    errors.append(f"Block '{block.name}' > Query '{query_name}': Unexpected error: {str(e)}")
            # Create appropriate message based on results
            if total_queries == 0:
                message = "No SQL queries found to validate."
                message_type = MessageType.WARNING
            elif len(errors) == 0:
                message = f"✅ All {total_queries} SQL queries are syntactically valid."
                message_type = MessageType.SUCCESS
            else:
                error_summary = (
                    f"❌ Found {len(errors)} syntax errors in {total_queries} queries "
                    f"({valid_queries} valid, {len(errors)} invalid):\n"
                )
                error_summary += "\n".join(f"• {error}" for error in errors[:10])
                if len(errors) > 10:
                    error_summary += f"\n... and {len(errors) - 10} more errors"
                message = error_summary
                message_type = MessageType.DANGER
            return ValidationResult(message=message, type=message_type)
        except Exception as e:
            error_message = f"System error during syntax check: {str(e)}"
            return ValidationResult(message=error_message, type=MessageType.DANGER)

    def validate_single_query(self, sql: str, query_name: str = "query") -> ValidationResult:
        """
        Validate a single SQL query.
        Args:
            sql: SQL query to validate
            query_name: Name of the query for error reporting
        Returns:
            ValidationResult with validation result
        """
        try:
            # Parse SQL with sqlglot
            parsed = sqlglot.parse(sql, read="duckdb")
            if not parsed:
                message = f"❌ Query '{query_name}': Empty or invalid SQL query"
                return ValidationResult(message=message, type=MessageType.DANGER)
            # Check for common errors
            warnings = self._check_common_sql_errors(sql)
            if warnings:
                error_messages = [w["error"] for w in warnings]
                message = f"❌ Query '{query_name}': {'; '.join(error_messages)}"
                return ValidationResult(message=message, type=MessageType.DANGER)
            message = f"✅ Query '{query_name}': SQL is syntactically valid"
            return ValidationResult(message=message, type=MessageType.SUCCESS)
        except ParseError as e:
            message = f"❌ Query '{query_name}': Syntax error: {str(e)}"
            return ValidationResult(message=message, type=MessageType.DANGER)
        except Exception as e:
            message = f"❌ Query '{query_name}': Unexpected error: {str(e)}"
            return ValidationResult(message=message, type=MessageType.DANGER)

    @staticmethod
    def _check_common_sql_errors(sql: str) -> List[Dict[str, str]]:
        """
        Check for common SQL errors that sqlglot might not catch.
        Args:
            sql: SQL query to check
        Returns:
            List of error messages
        """
        errors = []
        sql_upper = sql.upper()
        # Check for common typos in keywords
        if "CREATE OR RE PLACE" in sql_upper:
            errors.append({"error": "Syntax error: 'RE PLACE' should be 'REPLACE'"})
        if "CREATE OR REPLACE VIEW" in sql_upper and "AS" not in sql_upper:
            errors.append({"error": "Syntax error: CREATE VIEW missing 'AS' keyword"})
        if "SELECT" in sql_upper and "FROM" not in sql_upper:
            errors.append({"error": "Syntax error: SELECT statement missing 'FROM' clause"})
        # Check for WHERE clause without comparison operators
        where_ops = ["=", ">", "<", "!=", "LIKE", "IN", "BETWEEN", "IS"]
        if "WHERE" in sql_upper and not any(op in sql_upper for op in where_ops):
            errors.append({"error": "Syntax error: WHERE clause missing comparison operator"})
        # Check for unmatched parentheses
        if sql.count("(") != sql.count(")"):
            errors.append({"error": "Syntax error: Unmatched parentheses"})
        # Check for DuckDB-specific function issues
        if "PERCENTILE(" in sql_upper and "WITHIN GROUP" in sql_upper:
            errors.append({"error": "DuckDB Error: Use PERCENTILE_CONT() or PERCENTILE_DISC() instead of PERCENTILE()"})
        # Check for unsupported window functions
        if "PERCENTILE_CONT(" in sql_upper and "OVER (" in sql_upper and "WITHIN GROUP" not in sql_upper:
            errors.append(
                {"error": "DuckDB Error: PERCENTILE_CONT() cannot be used as window function, use WITHIN GROUP instead"}
            )
        # Check for common type casting issues
        if (
            "CAST(" in sql_upper
            and "AS VARCHAR" in sql_upper
            and any(op in sql_upper for op in ["+", "-", "*", "/", ">", "<", "="])
            and "||" not in sql_upper
        ):
            errors.append({"error": "Warning: Arithmetic operations on VARCHAR columns may cause Binder Errors"})
        return errors

    def extract_table_dependencies(self, sql: str) -> Dict[str, List[str]]:
        """
        Extract table dependencies from SQL query.
        Args:
            sql: SQL query to analyze
        Returns:
            Dict with 'dependencies' (tables read) and 'outputs' (tables created)
        """
        try:
            parsed = sqlglot.parse(sql, read="duckdb")
            dependencies = set()
            outputs = set()
            for statement in parsed:
                if statement is None:
                    continue
                # Find table references (dependencies)
                for table in statement.find_all(sqlglot.exp.Table):
                    table_name = table.name
                    if table_name:
                        dependencies.add(table_name)
                # Find CREATE statements (outputs)
                if isinstance(statement, sqlglot.exp.Create):
                    if statement.this and hasattr(statement.this, "name"):
                        outputs.add(statement.this.name)
            return {"dependencies": list(dependencies), "outputs": list(outputs)}
        except Exception as e:
            self.logger.warning(f"Failed to extract dependencies from SQL: {e}")
            return {"dependencies": [], "outputs": []}



================================================
FILE: tests/__init__.py
================================================
import sys
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")



================================================
FILE: tests/test_component.py
================================================
"""
Created on 12. 11. 2018

@author: esner
"""

import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):
    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {"KBC_DATADIR": "./non-existing-dir"})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: tests/test_functional.py
================================================
import os
from os import path
import unittest

from datadirtest import DataDirTester
from freezegun import freeze_time


class TestComponent(unittest.TestCase):
    @freeze_time("2023-04-02")
    def test_functional(self):
        os.environ["KBC_DATA_TYPE_SUPPORT"] = "none"
        base_dir = path.dirname(__file__)
        functional_tests = DataDirTester(data_dir=path.join(base_dir, "functional"))
        functional_tests.run()


if __name__ == "__main__":
    unittest.main()


================================================
FILE: tests/unit/__init__.py
================================================
import sys
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../../src")


================================================
FILE: tests/unit/test_execution_plan_visualization_action.py
================================================
import unittest
import os
import sys

# Ensure src is on sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../../src")))

from keboola.component.sync_actions import MessageType
from actions.execution_plan_visualization import ExecutionPlanVisualizationAction
from configuration import Block, Code


def _make_blocks():
    return [
        Block(
            name="B1",
            codes=[
                Code(
                    name="C1",
                    script=[
                        "CREATE TABLE t1 AS SELECT * FROM in_a;",
                        "CREATE TABLE t2 AS SELECT * FROM t1 JOIN in_b USING(id);",
                        "CREATE VIEW v_t2 AS SELECT * FROM t2;",
                    ],
                )
            ],
        ),
        Block(
            name="B2",
            codes=[
                Code(
                    name="C2",
                    script=[
                        "SELECT * FROM v_t2 JOIN in_c USING(id);",
                    ],
                )
            ],
        ),
    ]


class TestExecutionPlanVisualizationAction(unittest.TestCase):
    def test_execution_plan_success(self):
        sys.stderr.write("🚀 Starting test: test_execution_plan_success\n")
        sys.stderr.flush()
        action = ExecutionPlanVisualizationAction(max_workers=4)
        res = action.execution_plan_visualization(_make_blocks())

        self.assertEqual(res.type, MessageType.SUCCESS)
        expected_start = (
            "# 🚀 Execution Plan Visualization\n\n"
            "## 📊 Execution Summary\n\n"
            "- **Total Queries:** 4\n"
            "- **Total Batches:** 4\n"
            "- **Total Blocks:** 2\n"
            "- **Max Parallel Workers:** 4\n\n"
            "## 🔄 Execution Flow\n\n"
            "### 🧱 Block 1: B1\n\n"
            "**Block contains 3 batches with 3 queries total**\n\n"
            "#### 🔄 Batch 1 (Sequential - 1 query)\n\n"
            "- **C1_0** (Code: C1)\n"
        )
        # Only verify the start to keep the test robust to ordering of later sections
        self.assertTrue(res.message.startswith(expected_start))

    def test_execution_plan_error(self):
        sys.stderr.write("🚀 Starting test: test_execution_plan_error\n")
        sys.stderr.flush()
        import actions.execution_plan_visualization as mod
        
        original_orchestrator = mod.BlockOrchestrator

        def boom(*_, **__):
            raise RuntimeError("boom")

        try:
            mod.BlockOrchestrator = boom
            action = ExecutionPlanVisualizationAction(max_workers=2)
            res = action.execution_plan_visualization([])

            self.assertEqual(res.type, MessageType.DANGER)
            self.assertIn("Error generating execution plan visualization", res.message)
        finally:
            mod.BlockOrchestrator = original_orchestrator





================================================
FILE: tests/unit/test_expected_input_tables_action.py
================================================
import unittest
import os
import sys

# Ensure src is on sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../../src")))

from keboola.component.sync_actions import MessageType
from actions.expected_input_tables import ExpectedInputTablesAction
from configuration import Block, Code, Configuration


class TestExpectedInputTablesAction(unittest.TestCase):
    def test_expected_input_tables_success(self):
        sys.stderr.write("🚀 Starting test: test_expected_input_tables_success\n")
        sys.stderr.flush()
        action = ExpectedInputTablesAction()
        cfg = Configuration(
            blocks=[
                Block(
                    name="B1",
                    codes=[
                        Code(
                            name="C1",
                            script=[
                                # CTE alias should be filtered, external deps in_a and in_b should remain
                                """
                                WITH base_data AS (
                                    SELECT * FROM in_a
                                )
                                CREATE TABLE out_a AS
                                SELECT *
                                FROM base_data bd
                                JOIN in_b USING(id);
                                """.strip(),
                                # Create a view that reads out_a, so out_a is not external
                                "CREATE VIEW v1 AS SELECT * FROM out_a;",
                            ],
                        )
                    ],
                ),
                Block(
                    name="B2",
                    codes=[
                        Code(
                            name="C2",
                            script=[
                                # Another CTE alias filtered out, selects from v1 and in_c
                                """
                                WITH temp_data AS (
                                    SELECT * FROM in_c
                                )
                                SELECT * FROM v1 JOIN temp_data USING(id);
                                """.strip(),
                            ],
                        )
                    ],
                ),
            ]
        )
        res = action.expected_input_tables(cfg.blocks)

        self.assertEqual(res.type, MessageType.SUCCESS)
        # external tables = dependencies - outputs => {in_a, in_b, in_c}
        self.assertEqual(res.message, "in_a, in_b, in_c")

    def test_expected_input_tables_empty(self):
        sys.stderr.write("🚀 Starting test: test_expected_input_tables_empty\n")
        sys.stderr.flush()
        action = ExpectedInputTablesAction()
        res = action.expected_input_tables([])

        self.assertEqual(res.type, MessageType.SUCCESS)
        self.assertEqual(res.message, "")

    def test_expected_input_tables_error(self):
        sys.stderr.write("🚀 Starting test: test_expected_input_tables_error\n")
        sys.stderr.flush()
        action = ExpectedInputTablesAction()
        original_iterate_blocks = action.sql_parser.iterate_blocks

        def boom(_):
            raise RuntimeError("boom")

        try:
            # Force error path
            action.sql_parser.iterate_blocks = boom
            res = action.expected_input_tables([])

            self.assertEqual(res.type, MessageType.DANGER)
            self.assertIn("Error analyzing expected input tables", res.message)
        finally:
            action.sql_parser.iterate_blocks = original_iterate_blocks

    def test_expected_input_tables_filters_cte_aliases_only(self):
        sys.stderr.write("🚀 Starting test: test_expected_input_tables_filters_cte_aliases_only\n")
        sys.stderr.flush()
        # If all identifiers are typical CTE aliases, result should be empty
        action = ExpectedInputTablesAction()
        cfg = Configuration(
            blocks=[
                Block(
                    name="B",
                    codes=[
                        Code(
                            name="C",
                            script=[
                                """
                                WITH base_data AS (SELECT * FROM raw_data),
                                     temp_data AS (SELECT * FROM base_data)
                                SELECT * FROM temp_data;
                                """.strip()
                            ],
                        )
                    ],
                )
            ]
        )
        res = action.expected_input_tables(cfg.blocks)
        self.assertEqual(res.type, MessageType.SUCCESS)
        # Without heuristic filtering, raw_data remains as true external dependency
        self.assertEqual(res.message, "raw_data")

    def test_expected_input_tables_create_without_inputs(self):
        sys.stderr.write("🚀 Starting test: test_expected_input_tables_create_without_inputs\n")
        sys.stderr.flush()
        # CREATE from constant has no external dependencies
        action = ExpectedInputTablesAction()
        cfg = Configuration(
            blocks=[
                Block(
                    name="B",
                    codes=[
                        Code(
                            name="C",
                            script=[
                                "CREATE TABLE t AS SELECT 1 AS id;",
                            ],
                        )
                    ],
                )
            ]
        )
        res = action.expected_input_tables(cfg.blocks)
        self.assertEqual(res.type, MessageType.SUCCESS)
        self.assertEqual(res.message, "")


================================================
FILE: tests/unit/test_lineage_visualization_action.py
================================================
import unittest
import os
import sys

# Ensure src is on sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../../src")))

from keboola.component.sync_actions import MessageType
from actions.lineage_visualization import LineageVisualizationAction
from configuration import Block, Code
import textwrap


class TestLineageVisualizationAction(unittest.TestCase):
    def test_lineage_visualization_success(self):
        sys.stderr.write("🚀 Starting test: test_lineage_visualization_success\n")
        sys.stderr.flush()
        # More complex lineage with CTE, CREATE VIEW, JOINs and multiple blocks
        sql1 = textwrap.dedent(
            """
            WITH base_data AS (
                SELECT * FROM in_x
            )
            CREATE TABLE out_x AS
            SELECT * FROM base_data
            JOIN in_y USING(id);
            """
        ).strip()
        sql2 = "CREATE VIEW v_x AS SELECT id FROM out_x;"
        sql3 = "SELECT * FROM v_x JOIN in_z USING(id);"

        blocks = [
            Block(
                name="B1",
                codes=[
                    Code(
                        name="C1",
                        script=[sql1, sql2],
                    )
                ],
            ),
            Block(
                name="B2",
                codes=[
                    Code(
                        name="C2",
                        script=[sql3],
                    )
                ],
            ),
        ]
        action = LineageVisualizationAction()
        res = action.lineage_visualization(blocks)

        self.assertEqual(res.type, MessageType.SUCCESS)
        expected = (
            "# 📊 Data Lineage Visualization\n\n"
            "## 🔗 Table Dependencies\n\n"
            "### 📋 in_x\n\n"
            "**Read by:**\n"
            "- `C1_0` (Block: B1, Code: C1)\n\n"
            "### 📋 in_y\n\n"
            "**Read by:**\n"
            "- `C1_0` (Block: B1, Code: C1)\n\n"
            "### 📋 in_z\n\n"
            "**Read by:**\n"
            "- `C2` (Block: B2, Code: C2)\n\n"
            "### 📋 out_x\n\n"
            "**Read by:**\n"
            "- `C1_1` (Block: B1, Code: C1)\n\n"
            "**Created by:**\n"
            "- `C1_0` (Block: B1, Code: C1)\n\n"
            "### 📋 v_x\n\n"
            "**Read by:**\n"
            "- `C2` (Block: B2, Code: C2)\n\n"
            "**Created by:**\n"
            "- `C1_1` (Block: B1, Code: C1)\n\n"
            "## 📈 Query Flow\n\n"
            "### 🧱 B1\n\n"
            "#### 🔧 C1_0\n\n"
            "**Code:** C1\n\n"
            "**Inputs:**\n"
            "- `in_x`\n"
            "- `in_y`\n\n"
            "**Outputs:**\n"
            "- `out_x`\n\n"
            "**SQL:**\n```sql\n"
            f"{sql1}\n"
            "```\n\n"
            "#### 🔧 C1_1\n\n"
            "**Code:** C1\n\n"
            "**Inputs:**\n"
            "- `out_x`\n\n"
            "**Outputs:**\n"
            "- `v_x`\n\n"
            "**SQL:**\n```sql\n"
            f"{sql2}\n"
            "```\n\n"
            "### 🧱 B2\n\n"
            "#### 🔧 C2\n\n"
            "**Code:** C2\n\n"
            "**Inputs:**\n"
            "- `in_z`\n"
            "- `v_x`\n\n"
            "**SQL:**\n```sql\n"
            f"{sql3}\n"
            "```\n\n"
        )
        # Normalize whitespace to avoid false negatives from indentation/spacing
        def _normalize(s: str) -> str:
            return "\n".join(line.rstrip() for line in s.strip().splitlines())

        self.assertEqual(_normalize(res.message), _normalize(expected))

    def test_lineage_visualization_handles_no_tables(self):
        sys.stderr.write("🚀 Starting test: test_lineage_visualization_handles_no_tables\n")
        sys.stderr.flush()
        # SQL that has no FROM (constant select) should not break
        blocks = [Block(name="B", codes=[Code(name="C", script=["SELECT 1 AS x;"])])]
        action = LineageVisualizationAction()
        res = action.lineage_visualization(blocks)
        self.assertEqual(res.type, MessageType.SUCCESS)
        # Should still include the query section and SQL
        self.assertIn("SELECT 1 AS x;", res.message)

    def test_lineage_visualization_empty(self):
        sys.stderr.write("🚀 Starting test: test_lineage_visualization_empty\n")
        sys.stderr.flush()
        action = LineageVisualizationAction()
        res = action.lineage_visualization([])

        self.assertEqual(res.type, MessageType.SUCCESS)

    def test_lineage_visualization_error(self):
        sys.stderr.write("🚀 Starting test: test_lineage_visualization_error\n")
        sys.stderr.flush()
        action = LineageVisualizationAction()
        original_iterate_blocks = action.sql_parser.iterate_blocks

        def boom(_):
            raise RuntimeError("boom")

        try:
            action.sql_parser.iterate_blocks = boom
            res = action.lineage_visualization([])

            self.assertEqual(res.type, MessageType.DANGER)
            self.assertIn("Error generating lineage visualization", res.message)
        finally:
            action.sql_parser.iterate_blocks = original_iterate_blocks


================================================
FILE: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "keboola.duckdb-transformation" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "keboola" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: ${{ vars.KBC_DEVELOPERPORTAL_USERNAME }}

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo $raw | sed "s/.*origin\///" | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unittest discovery..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest sh -lc 'python -m unittest discover'

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh


