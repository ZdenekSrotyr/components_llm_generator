Directory structure:
└── keboola-ex-azure-storage-table/
    ├── docker/
    │   ├── php-prod.ini
    │   └── composer-install.sh
    ├── .travis.yml
    ├── deploy.sh
    ├── phpcs.xml
    ├── docker-compose.yml
    ├── src/
    │   ├── CsvWriter/
    │   │   ├── BaseCsvWriter.php
    │   │   ├── RawCsvWriter.php
    │   │   ├── CsvWriterFactory.php
    │   │   ├── ICsvWriter.php
    │   │   └── MappingCsvWriter.php
    │   ├── RetryProxyFactory.php
    │   ├── Extractor.php
    │   ├── QueryFactory.php
    │   ├── Component.php
    │   ├── Exception/
    │   │   ├── UserException.php
    │   │   ├── UndefinedValueException.php
    │   │   ├── ApplicationException.php
    │   │   └── UnexpectedValueException.php
    │   ├── TableClientFactory.php
    │   ├── IncrementalFetchingHelper.php
    │   ├── Configuration/
    │   │   ├── Config.php
    │   │   ├── Node/
    │   │   │   └── DbNode.php
    │   │   ├── ActionConfigDefinition.php
    │   │   └── ConfigDefinition.php
    │   ├── run.php
    │   └── JsonDeserializer.php
    ├── .env.dist
    ├── composer.lock
    ├── phpstan.neon
    ├── tests/
    │   ├── phpunit/
    │   │   ├── ConfigTest.php
    │   │   ├── Data/
    │   │   │   ├── upload.php
    │   │   │   ├── tables/
    │   │   │   │   ├── types.csv
    │   │   │   │   ├── inc-fetching.csv
    │   │   │   │   ├── types-mismatch.csv
    │   │   │   │   └── simple.csv
    │   │   │   └── DataUploader.php
    │   │   ├── MaxTest.php
    │   │   └── bootstrap.php
    │   └── functional/
    │       ├── inc-fetching-datetime/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── test-connection-ok/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── inc-fetching-datetime-state/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── state.json
    │       ├── inc-fetching-int32-state/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── state.json
    │       ├── mode-raw-filter/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── inc-fetching-int64/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── inc-fetching-mode-raw/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── inc-fetching-string/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── empty-app/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── mode-mapping-simple/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── mode-raw-select/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── error-bad-connection-string-2/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── inc-fetching-string-state/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── state.json
    │       ├── mode-raw-types/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── inc-fetching-double/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── inc-fetching-guid-state/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── state.json
    │       ├── error-bad-connection-string-1/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── inc-fetching-error-missing-key/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── inc-fetching-error-null/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── mode-raw-filter-limit-select/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── mode-raw-select-missing-partition-key/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── output.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── inc-fetching-guid/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── inc-fetching-boolean/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── DatadirTest.php
    │       ├── inc-fetching-error-string-length-mismatch/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── mode-raw-simple/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── inc-fetching-mode-mapping/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── inc-fetching-double-state/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── state.json
    │       ├── error-retry/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── mode-raw-limit/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── mode-raw-select-missing-row-key/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── output.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── inc-fetching-error-type-mismatch/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       ├── config.json
    │       │   │       └── in/
    │       │   │           └── state.json
    │       │   └── expected-code
    │       ├── inc-fetching-int64-state/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── state.json
    │       │   │           ├── tables/
    │       │   │           │   ├── .gitkeep
    │       │   │           │   ├── output.csv
    │       │   │           │   └── output.csv.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           └── in/
    │       │               └── state.json
    │       └── inc-fetching-int32/
    │           ├── expected-stdout
    │           ├── expected/
    │           │   └── data/
    │           │       └── out/
    │           │           ├── state.json
    │           │           ├── tables/
    │           │           │   ├── .gitkeep
    │           │           │   ├── output.csv
    │           │           │   └── output.csv.manifest
    │           │           └── files/
    │           │               └── .gitkeep
    │           └── source/
    │               └── data/
    │                   └── config.json
    ├── phpunit.xml.dist
    ├── composer.json
    ├── .dockerignore
    ├── Dockerfile
    └── README.md

================================================
File: /docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1


================================================
File: /docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT


================================================
File: /.travis.yml
================================================
sudo: required

language: bash

services:
  - docker

before_script:
  - export APP_IMAGE=keboola-component
  - docker -v
  - docker build -t $APP_IMAGE .
  - docker run -e CONNECTION_STRING $APP_IMAGE composer ci

  # push test image to ECR
  - docker pull quay.io/keboola/developer-portal-cli-v2:latest
  - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
  - docker tag $APP_IMAGE:latest $REPOSITORY:test
  - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
  - docker push $REPOSITORY:test
  - docker pull quay.io/keboola/syrup-cli:latest


script:
  # run test job inside KBC
  - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_APP_TEST_CONFIG_ID test

deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh
  on:
    tags: true


================================================
File: /deploy.sh
================================================
#!/bin/bash
set -e

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TRAVIS_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TRAVIS_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TRAVIS_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TRAVIS_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TRAVIS_TAG} is not allowed."
fi


================================================
File: /phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>


================================================
File: /docker-compose.yml
================================================
version: '3'
services:
  dev:
    build: .
    environment:
      - CONNECTION_STRING
    volumes:
      - ./:/code
      - ./data:/data


================================================
File: /src/CsvWriter/BaseCsvWriter.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\CsvWriter;

use Keboola\AzureStorageTableExtractor\Configuration\Config;
use Keboola\AzureStorageTableExtractor\IncrementalFetchingHelper;
use Keboola\Component\Manifest\ManifestManager;

abstract class BaseCsvWriter implements ICsvWriter
{
    protected string $dataDir;

    protected ManifestManager $manifestManager;

    protected Config $config;

    protected IncrementalFetchingHelper $incFetchingHelper;

    protected int $rowCount = 0;

    public function __construct(
        string $dataDir,
        ManifestManager $manifestManager,
        Config $config,
        IncrementalFetchingHelper $incFetchingHelper
    ) {
        $this->dataDir = $dataDir;
        $this->manifestManager = $manifestManager;
        $this->config = $config;
        $this->incFetchingHelper = $incFetchingHelper;
        $this->init();
    }

    abstract protected function init(): void;

    public function writeItem(object $item): void
    {
        $this->incFetchingHelper->processItem($item, $this->rowCount);
        $this->rowCount++;
    }

    protected function unsetODataMetadata(object $item): void
    {
        foreach ($item as $key => $value) {
            if (strpos($key, 'odata.') !== false) {
                unset($item->{$key});
            }
        }
    }
}


================================================
File: /src/CsvWriter/RawCsvWriter.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\CsvWriter;

use Keboola\AzureStorageTableExtractor\Exception\ApplicationException;
use Keboola\AzureStorageTableExtractor\Exception\UserException;
use Keboola\Component\Manifest\ManifestManager\Options\OutTableManifestOptions;
use Keboola\Csv\CsvWriter;

class RawCsvWriter extends BaseCsvWriter implements ICsvWriter
{
    public const ITEM_PARTITION_KEY_COLUMN = 'PartitionKey';
    public const ITEM_ROW_KEY_COLUMN = 'RowKey';
    public const PARTITION_KEY_COLUMN = 'PartitionKey';
    public const ROW_KEY_COLUMN = 'RowKey';
    public const DATA_COLUMN = 'data';

    private string $csvPath;

    private CsvWriter $writer;

    public function init(): void
    {
        $this->csvPath = sprintf('%s/out/tables/%s.csv', $this->dataDir, $this->config->getOutput());
        $this->writer = new CsvWriter($this->csvPath);
    }

    public function __destruct()
    {
        // No rows -> no CSV file
        if ($this->rowCount === 0) {
            @unlink($this->csvPath);
        }
    }

    public function writeItem(object $item): void
    {
        parent::writeItem($item);
        $this->unsetODataMetadata($item);

        [$partitionKey, $rowKey] = $this->getPrimaryKey($item);

        // Write row to CSV
        $this->writer->writeRow([
            self::PARTITION_KEY_COLUMN => $partitionKey,
            self::ROW_KEY_COLUMN => $rowKey,
            self::DATA_COLUMN => json_encode($item),
        ]);
    }

    public function finalize(): void
    {
        $this->writeManifest();
    }

    protected function writeManifest(): void
    {
        if ($this->rowCount > 0) {
            $this->manifestManager->writeTableManifest(basename($this->csvPath), $this->getManifest());
        }
    }

    protected function getManifest(): OutTableManifestOptions
    {
        $options = new OutTableManifestOptions();
        $options->setColumns([self::PARTITION_KEY_COLUMN, self::ROW_KEY_COLUMN, self::DATA_COLUMN]);
        $options->setPrimaryKeyColumns([self::PARTITION_KEY_COLUMN, self::ROW_KEY_COLUMN]);
        $options->setIncremental($this->config->isIncremental());
        return $options;
    }

    protected function getPrimaryKey(object $item): array
    {
        foreach ([self::ITEM_PARTITION_KEY_COLUMN, self::ITEM_ROW_KEY_COLUMN] as $key) {
            if (!property_exists($item, $key)) {
                if ($this->config->hasSelect()) {
                    // ID is missing, because it is not configured in the "select"
                    throw new UserException(sprintf(
                        'Missing "%s" key in the query results. ' .
                        'Please modify the "select" value in the configuration ' .
                        'or use the "mapping" mode instead of the "raw".',
                        $key
                    ));
                } else {
                    throw new ApplicationException(sprintf('Missing "%s" key in the query results.', $key));
                }
            }
        }

        $partitionKey = $item->{self::ITEM_PARTITION_KEY_COLUMN};
        $rowKey = $item->{self::ITEM_ROW_KEY_COLUMN};
        return [$partitionKey, $rowKey];
    }
}


================================================
File: /src/CsvWriter/CsvWriterFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\CsvWriter;

use Keboola\AzureStorageTableExtractor\Configuration\Config;
use Keboola\AzureStorageTableExtractor\Configuration\ConfigDefinition;
use Keboola\AzureStorageTableExtractor\Exception\UnexpectedValueException;
use Keboola\AzureStorageTableExtractor\IncrementalFetchingHelper;
use Keboola\Component\Manifest\ManifestManager;

class CsvWriterFactory
{
    private string $dataDir;

    private ManifestManager $manifestManager;

    private Config $config;

    private IncrementalFetchingHelper $incFetchingHelper;

    public function __construct(
        string $dataDir,
        ManifestManager $manifestManager,
        Config $config,
        IncrementalFetchingHelper $incFetchingHelper
    ) {
        $this->dataDir = $dataDir;
        $this->manifestManager = $manifestManager;
        $this->config = $config;
        $this->incFetchingHelper = $incFetchingHelper;
    }

    public function create(): ICsvWriter
    {
        switch ($this->config->getMode()) {
            case ConfigDefinition::MODE_RAW:
                return new RawCsvWriter(
                    $this->dataDir,
                    $this->manifestManager,
                    $this->config,
                    $this->incFetchingHelper
                );
            case ConfigDefinition::MODE_MAPPING:
                return new MappingCsvWriter(
                    $this->dataDir,
                    $this->manifestManager,
                    $this->config,
                    $this->incFetchingHelper
                );
        }

        throw new UnexpectedValueException(sprintf('Unexpected mode "%s".', $this->config->getMode()));
    }
}


================================================
File: /src/CsvWriter/ICsvWriter.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\CsvWriter;

interface ICsvWriter
{
    /**
     * Write single decoded JSON document to CSV file
     */
    public function writeItem(object $item): void;

    /**
     * Called when all items are written
     */
    public function finalize(): void;
}


================================================
File: /src/CsvWriter/MappingCsvWriter.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\CsvWriter;

use Keboola\AzureStorageTableExtractor\Exception\ApplicationException;
use Keboola\AzureStorageTableExtractor\Exception\UserException;
use Keboola\Component\Manifest\ManifestManager\Options\OutTableManifestOptions;
use Keboola\CsvMap\Exception\CsvMapperException;
use Keboola\CsvMap\Mapper;
use Keboola\CsvTable\Table;

class MappingCsvWriter extends BaseCsvWriter implements ICsvWriter
{
    private Mapper $mapper;

    protected function init(): void
    {
        try {
            $this->mapper = new Mapper($this->config->getMapping(), false, $this->config->getOutput());
        } catch (CsvMapperException $e) {
            throw new UserException($e->getMessage(), $e->getCode(), $e);
        }
    }

    public function writeItem(object $item): void
    {
        parent::writeItem($item);
        $this->unsetODataMetadata($item);

        // Ensure UNIQUE FK for sub-documents with the SAME CONTENT, but from the DIFFERENT parent document
        $userData = ['parentId' => md5(serialize($item))];
        try {
            $this->mapper->parseRow($item, $userData);
        } catch (CsvMapperException $e) {
            throw new UserException($e->getMessage(), $e->getCode(), $e);
        }
    }

    public function finalize(): void
    {
        $this->copyTempCsvFiles();
        $this->writeManifest();
    }

    protected function copyTempCsvFiles(): void
    {
        foreach ($this->mapper->getCsvFiles() as $csvTable) {
            /** @var Table|null $csvTable */
            if (!$csvTable) {
                // Skip, no row
                continue;
            }

            // Check file size
            $source = $csvTable->getPathName();
            $dest = $this->getCsvTargetPath($csvTable);
            $filesize = filesize($source);
            if ($filesize === false) {
                throw new ApplicationException(sprintf('Failed to get file size "%s".', $source));
            } elseif ($filesize === 0) {
                // No rows -> no CSV file
                continue;
            }

            // Copy
            $result = copy($source, $dest);
            if (!$result) {
                throw new ApplicationException(sprintf('Failed to copy "%s" -> "%s".', $source, $dest));
            }
        }
    }

    protected function writeManifest(): void
    {
        foreach ($this->mapper->getCsvFiles() as $csvTable) {
            /** @var Table|null $csvTable */
            if (!$csvTable) {
                // Skip, no row
                continue;
            }

            // Check if CSV exists
            $csvPath = $this->getCsvTargetPath($csvTable);
            if (!file_exists($csvPath)) {
                // The empty file is not copied, so we also do not create the manifest
                return;
            }

            $this->manifestManager->writeTableManifest(basename($csvPath), $this->getManifest($csvTable));
        }
    }

    protected function getManifest(Table $csvTable): OutTableManifestOptions
    {
        /** @var string[] $primaryKey */
        $primaryKey = $csvTable->getPrimaryKey(true) ?? [];
        $options = new OutTableManifestOptions();
        $options->setColumns($csvTable->getHeader());
        $options->setPrimaryKeyColumns($primaryKey);
        $options->setIncremental($this->config->isIncremental());
        return $options;
    }

    protected function getCsvTargetPath(Table $csvTable): string
    {
        return sprintf('%s/out/tables/%s.csv', $this->dataDir, $csvTable->getName());
    }
}


================================================
File: /src/RetryProxyFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor;

use GuzzleHttp\Exception\TransferException;
use MicrosoftAzure\Storage\Common\Exceptions\ServiceException;
use Keboola\AzureStorageTableExtractor\Configuration\Config;
use Psr\Log\LoggerInterface;
use Retry\BackOff\ExponentialBackOffPolicy;
use Retry\Policy\SimpleRetryPolicy;
use Retry\RetryProxy;

class RetryProxyFactory
{
    private Config $config;

    private LoggerInterface $logger;

    public function __construct(Config $config, LoggerInterface $logger)
    {
        $this->config = $config;
        $this->logger = $logger;
    }

    public function create(): RetryProxy
    {
        $retryPolicy = new SimpleRetryPolicy(
            $this->config->getMaxTries(),
            [ServiceException::class, TransferException::class]
        );
        $backOffPolicy = new ExponentialBackOffPolicy();
        return new RetryProxy($retryPolicy, $backOffPolicy, $this->logger);
    }
}


================================================
File: /src/Extractor.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor;

use GuzzleHttp\Exception\TransferException;
use GuzzleHttp\Promise\Promise;
use GuzzleHttp\Promise\PromiseInterface;
use Keboola\AzureStorageTableExtractor\Configuration\Config;
use Keboola\AzureStorageTableExtractor\CsvWriter\CsvWriterFactory;
use Keboola\AzureStorageTableExtractor\Exception\UserException;
use MicrosoftAzure\Storage\Common\Exceptions\ServiceException;
use MicrosoftAzure\Storage\Table\Internal\ITable;
use MicrosoftAzure\Storage\Table\Models\QueryEntitiesOptions;
use MicrosoftAzure\Storage\Table\Models\QueryEntitiesResult;
use Psr\Log\LoggerInterface;
use Retry\RetryProxy;

class Extractor
{
    public const ACCEPT_HEADER = 'application/json;odata=fullmetadata';

    public const PROGRESS_LOG_INTERVAL_SEC = 30;

    private Config $config;

    private LoggerInterface $logger;

    private ITable $tableClient;

    private QueryFactory $queryFactory;

    private CsvWriterFactory $csvWriterFactory;

    private IncrementalFetchingHelper $incFetchingHelper;

    private RetryProxyFactory $retryProxyFactory;

    private RetryProxy $retryProxy;

    private int $pageCount = 0;

    private int $rowsCount = 0;

    private ?float $lastProgressLog = null;

    public function __construct(
        Config $config,
        LoggerInterface $logger,
        ITable $tableClient,
        QueryFactory $queryFactory,
        CsvWriterFactory $csvWriterFactory,
        IncrementalFetchingHelper $incFetchingHelper,
        RetryProxyFactory $retryProxyFactory
    ) {
        $this->config = $config;
        $this->logger = $logger;
        $this->tableClient = $tableClient;
        $this->queryFactory = $queryFactory;
        $this->csvWriterFactory = $csvWriterFactory;
        $this->incFetchingHelper = $incFetchingHelper;
        $this->retryProxyFactory = $retryProxyFactory;
    }

    public function testConnection(): void
    {
        try {
            $this->tableClient->queryTables();
        } catch (ServiceException $e) {
            throw UserException::from($e, $this->config->getConnectionString());
        }
    }

    public function extract(): void
    {
        try {
            $this->doExtract();
        } catch (ServiceException|TransferException $e) {
            throw new UserException(
                sprintf('Export of the table "%s" failed: %s', $this->config->getTable(), $e->getMessage()),
                $e->getCode(),
                $e
            );
        }
    }

    private function doExtract(): void
    {
        $this->retryProxy = $this->retryProxyFactory->create();
        $csvWriter = $this->csvWriterFactory->create();
        $limit = $this->config->hasLimit() ? $this->config->getLimit() : null;

        $this->logger->info(sprintf(
            'Exporting table "%s" to "%s" ...',
            $this->config->getTable(),
            $this->config->getOutput()
        ));

        $query = $this->queryFactory->create();
        $options = new QueryEntitiesOptions();
        $options->setQuery($query);
        $options->setDecodeContent(false);
        $options->setAccept(Extractor::ACCEPT_HEADER);

        $prevPagePromise = null;
        while (true) {
            // Wait for the previous page
            /** @var mixed $result -> workaround for phpstan bug */
            $result = $prevPagePromise  ? $this->waitWithRetry($prevPagePromise, $options) : null;

            // Set continuation token if present
            if ($result && $result->getContinuationToken()) {
                $options->setContinuationToken($result->getContinuationToken());
            }

            // Start loading of the the new page, if it is first page, or continuation token is present
            $newPagePromise = !$result || $result->getContinuationToken() ? $this->runQuery($options) : null;

            // Process the previous page, while waiting for the next page ^^^^
            if ($result) {
                $this->pageCount++;
                foreach ($result->getEntities() as &$entity) {
                    $csvWriter->writeItem($entity);
                    $this->rowsCount++;

                    // In the QueryFactory is "$top" set to the limit from the config
                    // But "$top" is limit for one request/page, therefore we must check limit in the code
                    if ($limit && $this->rowsCount >= $limit) {
                        break 2;
                    }
                }

                $this->logProgress();
            }

            // No more pages?
            if (!$newPagePromise) {
                break;
            }
            $prevPagePromise = $newPagePromise;
        }

        $this->logFinalStats();

        // All items wrote, finalize
        $csvWriter->finalize();

        // Write last state incremental fetching
        $this->incFetchingHelper->writeState();
    }

    private function waitWithRetry(PromiseInterface $firstPromise, QueryEntitiesOptions $options): QueryEntitiesResult
    {
        $promise = $firstPromise;
        return $this->retryProxy->call(function () use (&$promise, $options) {
            if ($promise->getState() === Promise::REJECTED) {
                $promise = $this->runQuery($options);
            }
            return $promise->wait();
        });
    }

    private function runQuery(QueryEntitiesOptions $options): PromiseInterface
    {
        return $this->tableClient->queryEntitiesAsync($this->config->getTable(), $options);
    }

    private function logProgress(): void
    {
        if (microtime(true) - $this->lastProgressLog < self::PROGRESS_LOG_INTERVAL_SEC) {
            return;
        }

        if ($this->lastProgressLog) {
            $this->logger->info(sprintf(
                'Progress: "%s" rows / "%s" pages exported.',
                $this->rowsCount,
                $this->pageCount
            ));
        }

        $this->lastProgressLog = microtime(true);
    }

    private function logFinalStats(): void
    {
        $this->logger->info(sprintf(
            'Exported "%s" rows / "%s" pages.',
            $this->rowsCount,
            $this->pageCount
        ));
    }
}


================================================
File: /src/QueryFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor;

use Keboola\AzureStorageTableExtractor\Configuration\Config;
use MicrosoftAzure\Storage\Table\Models\Filters\Filter;
use MicrosoftAzure\Storage\Table\Models\Query;
use Psr\Log\LoggerInterface;

class QueryFactory
{
    private Config $config;

    private LoggerInterface $logger;

    private IncrementalFetchingHelper $incFetchingHelper;

    public function __construct(Config $config, LoggerInterface $logger, IncrementalFetchingHelper $incFetchingHelper)
    {
        $this->config = $config;
        $this->logger = $logger;
        $this->incFetchingHelper = $incFetchingHelper;
    }

    public function create(): Query
    {
        $query = new Query();

        // Filter
        if ($this->incFetchingHelper->hasValue()) {
            $filter = Filter::applyGe(
                Filter::applyPropertyName($this->incFetchingHelper->getKey()),
                Filter::applyConstant(
                    $this->incFetchingHelper->getValue(),
                    $this->incFetchingHelper->getValueType()
                )
            );
            $query->setFilter($filter);
            $this->logger->info(sprintf(
                'Incremental fetching: loading rows where "%s" >= "%s" (%s)',
                $this->incFetchingHelper->getKey(),
                $this->incFetchingHelper->getValue(),
                $this->incFetchingHelper->getValueType()
            ));
        } elseif ($this->config->hasFilter()) {
            $query->setFilter(Filter::applyQueryString($this->config->getFilter()));
        }

        // Select
        if ($this->config->hasSelect()) {
            $query->setSelectFields($this->config->getSelect());
        }

        // Limit
        if ($this->config->hasLimit()) {
            $query->setTop($this->config->getLimit());
        }

        return $query;
    }
}


================================================
File: /src/Component.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor;

use Keboola\AzureStorageTableExtractor\Configuration\ActionConfigDefinition;
use Keboola\AzureStorageTableExtractor\Configuration\Config;
use Keboola\AzureStorageTableExtractor\Configuration\ConfigDefinition;
use Keboola\AzureStorageTableExtractor\CsvWriter\CsvWriterFactory;
use Keboola\Component\BaseComponent;
use Psr\Log\LoggerInterface;

class Component extends BaseComponent
{
    public const ACTION_RUN = 'run';
    public const ACTION_TEST_CONNECTION = 'testConnection';

    private Extractor $extractor;

    public function __construct(LoggerInterface $logger)
    {
        parent::__construct($logger);
        $config = $this->getConfig();
        $logger = $this->getLogger();
        $dataDir = $this->getDataDir();
        $manifestManager = $this->getManifestManager();
        $retryProxyFactory = new RetryProxyFactory($config, $logger);
        $incFetchingHelper = new IncrementalFetchingHelper($config, $logger, $dataDir, $this->getInputState());
        $clientFactory = new TableClientFactory($config, $logger, $retryProxyFactory);
        $queryFactory = new QueryFactory($config, $logger, $incFetchingHelper);
        $csvWriterFactory = new CsvWriterFactory($dataDir, $manifestManager, $config, $incFetchingHelper);
        $this->extractor = new Extractor(
            $config,
            $logger,
            $clientFactory->create(),
            $queryFactory,
            $csvWriterFactory,
            $incFetchingHelper,
            $retryProxyFactory
        );
    }

    protected function getSyncActions(): array
    {
        return [
            self::ACTION_TEST_CONNECTION => 'handleTestConnection',
        ];
    }

    protected function run(): void
    {
        $this->extractor->extract();
    }

    protected function handleTestConnection(): array
    {
        $this->extractor->testConnection();
        return ['success' => true];
    }

    public function getConfig(): Config
    {
        /** @var Config $config */
        $config = parent::getConfig();
        return $config;
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        $action = $this->getRawConfig()['action'] ?? 'run';
        return $action === 'run' ? ConfigDefinition::class : ActionConfigDefinition::class;
    }
}


================================================
File: /src/Exception/UserException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\Exception;

use Throwable;
use RuntimeException;
use Keboola\CommonExceptions\UserExceptionInterface;

class UserException extends RuntimeException implements UserExceptionInterface
{
    public static function from(Throwable $e, string $connectionString, string $msgPrefix = ''): self
    {
        $msg = $e->getMessage();
        // Hide connection string
        $msg = str_replace($connectionString, '*****', $msg);
        throw new static($msgPrefix . $msg, $e->getCode(), $e);
    }
}


================================================
File: /src/Exception/UndefinedValueException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\Exception;

use Keboola\CommonExceptions\ApplicationExceptionInterface;
use RuntimeException;

class UndefinedValueException extends RuntimeException implements ApplicationExceptionInterface
{

}


================================================
File: /src/Exception/ApplicationException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\Exception;

use Keboola\CommonExceptions\ApplicationExceptionInterface;
use RuntimeException;

class ApplicationException extends RuntimeException implements ApplicationExceptionInterface
{

}


================================================
File: /src/Exception/UnexpectedValueException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\Exception;

class UnexpectedValueException extends ApplicationException
{

}


================================================
File: /src/TableClientFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor;

use GuzzleHttp\MessageFormatter;
use GuzzleHttp\Middleware;
use Keboola\AzureStorageTableExtractor\Exception\UserException;
use MicrosoftAzure\Storage\Common\Internal\Authentication\SharedAccessSignatureAuthScheme;
use MicrosoftAzure\Storage\Common\Internal\Middlewares\CommonRequestMiddleware;
use MicrosoftAzure\Storage\Common\Internal\StorageServiceSettings;
use MicrosoftAzure\Storage\Common\Internal\Utilities;
use MicrosoftAzure\Storage\Table\Internal\Authentication\TableSharedKeyLiteAuthScheme;
use MicrosoftAzure\Storage\Table\Internal\MimeReaderWriter;
use MicrosoftAzure\Storage\Table\Internal\TableResources as Resources;
use Psr\Log\LoggerInterface;
use Psr\Log\LogLevel;
use RuntimeException;
use Keboola\AzureStorageTableExtractor\Configuration\Config;
use MicrosoftAzure\Storage\Table\Internal\ITable;
use MicrosoftAzure\Storage\Table\TableRestProxy;

class TableClientFactory
{
    private Config $config;

    private LoggerInterface $logger;

    private RetryProxyFactory $retryProxyFactory;

    public function __construct(Config $config, LoggerInterface $logger, RetryProxyFactory $retryProxyFactory)
    {
        $this->config = $config;
        $this->logger = $logger;
        $this->retryProxyFactory = $retryProxyFactory;
    }

    public function create(): ITable
    {
        $retry = $this->config->getAction() !== 'testConnection';

        try {
            if ($retry) {
                $retryProxy = $this->retryProxyFactory->create();
                return $retryProxy->call(function () {
                    return $this->createTableService($this->config->getConnectionString());
                });
            } else {
                return $this->createTableService($this->config->getConnectionString());
            }
        } catch (RuntimeException $e) {
            throw UserException::from($e, $this->config->getConnectionString(), 'Connection error: ');
        }
    }

    /**
     * Modified version of MicrosoftAzure\Storage\Table\TableRestProxy
     * We are using own $odataSerializer
     */
    private function createTableService(
        string $connectionString,
        array $options = []
    ): ITable {
        $settings = StorageServiceSettings::createFromConnectionString(
            $connectionString
        );

        $odataSerializer = new JsonDeserializer();
        $mimeSerializer = new MimeReaderWriter();

        $primaryUri = Utilities::tryAddUrlScheme(
            $settings->getTableEndpointUri()
        );
        $secondaryUri = Utilities::tryAddUrlScheme(
            $settings->getTableSecondaryEndpointUri()
        );

        $tableWrapper = new TableRestProxy(
            $primaryUri,
            $secondaryUri,
            $odataSerializer,
            $mimeSerializer,
            $options
        );

        // Adding headers filter
        $headers               = array();
        $headers[Resources::DATA_SERVICE_VERSION]     = Resources::DATA_SERVICE_VERSION_VALUE;
        $headers[Resources::MAX_DATA_SERVICE_VERSION] = Resources::MAX_DATA_SERVICE_VERSION_VALUE;
        $headers[Resources::ACCEPT_HEADER]            = Extractor::ACCEPT_HEADER;
        $headers[Resources::ACCEPT_CHARSET]           = Resources::ACCEPT_CHARSET_VALUE;

        // Getting authentication scheme
        if ($settings->hasSasToken()) {
            $authScheme = new SharedAccessSignatureAuthScheme(
                $settings->getSasToken()
            );
        } else {
            $authScheme = new TableSharedKeyLiteAuthScheme(
                $settings->getName(),
                $settings->getKey()
            );
        }

        // Adding common request middleware
        $commonRequestMiddleware = new CommonRequestMiddleware(
            $authScheme,
            Resources::STORAGE_API_LATEST_VERSION,
            Resources::TABLE_SDK_VERSION,
            $headers
        );
        $tableWrapper->pushMiddleware($commonRequestMiddleware);

        return $tableWrapper;
    }
}


================================================
File: /src/IncrementalFetchingHelper.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor;

use Keboola\AzureStorageTableExtractor\Configuration\Config;
use Keboola\AzureStorageTableExtractor\Exception\UndefinedValueException;
use Keboola\AzureStorageTableExtractor\Exception\UserException;
use Keboola\Component\JsonHelper;
use MicrosoftAzure\Storage\Table\Models\EdmType;
use Psr\Log\LoggerInterface;

class IncrementalFetchingHelper
{
    public const STATE_INCREMENTAL_KEY = 'maxIncrementalKey';
    public const STATE_INCREMENTAL_VALUE = 'maxIncrementalValue';
    public const STATE_INCREMENTAL_VALUE_TYPE = 'maxIncrementalValueType';
    public const ALLOWED_TYPES = [
        EdmType::STRING,
        EdmType::INT32,
        EdmType::INT64,
        EdmType::DATETIME,
        EdmType::DOUBLE,
        EdmType::GUID,
    ];

    private Config $config;

    private LoggerInterface $logger;

    private string $dataDir;

    private array $inputState;

    private bool $enabled;

    /** @var mixed|null */
    protected $maxValue = null;

    /** @var int|null */
    protected $maxValueLength = null;

    /** @var string|null */
    protected $valueType = null;

    protected ?string $key;

    protected bool $valueTypeChecked = false;

    /**
     * @param mixed $value1
     * @param mixed $value2
     * @return mixed
     */
    public static function max($value1, $value2)
    {
        if (is_numeric($value1) && is_numeric($value2)) {
            return $value1 > $value2 ? $value1 : $value2;
        }

        return strnatcmp((string) $value1, (string) $value2) > 0 ?
            $value1 : $value2;
    }

    public function __construct(Config $config, LoggerInterface $logger, string $dataDir, array $inputState)
    {
        $this->config = $config;
        $this->logger = $logger;
        $this->dataDir = $dataDir;
        $this->inputState = $inputState;
        $this->enabled = $config->hasIncrementalFetchingKey();
        $this->key = $config->hasIncrementalFetchingKey() ? $config->getIncrementalFetchingKey() : null;
        $stateKey = $inputState[self::STATE_INCREMENTAL_KEY] ?? null;
        if ($stateKey && $stateKey !== $this->key) {
            $this->maxValue = null;
            $this->valueType = null;
        } else {
            $this->valueType = $inputState[self::STATE_INCREMENTAL_VALUE_TYPE] ?? null;
            $this->maxValue = $inputState[self::STATE_INCREMENTAL_VALUE] ?? null;
            $this->maxValueLength = $this->valueType === EdmType::STRING ? strlen($this->maxValue) : null;
        }
    }

    public function isEnabled(): bool
    {
        return $this->enabled;
    }

    public function hasValue(): bool
    {
        return $this->enabled && $this->maxValue;
    }

    public function getKey(): string
    {
        if (!$this->key) {
            throw new UndefinedValueException('Incremental fetching key is not defined.');
        }

        return $this->key;
    }

    /**
     * @return mixed
     */
    public function getValue()
    {
        if (!$this->hasValue()) {
            throw new UndefinedValueException('Incremental fetching max value is not defined.');
        }

        return $this->maxValue;
    }

    public function getValueType(): string
    {
        if (!$this->valueType) {
            throw new UndefinedValueException('Incremental fetching value type is not defined.');
        }

        return $this->valueType;
    }

    public function processItem(object $item, int $rowIndex): void
    {
        if (!$this->enabled) {
            return;
        }

        [$newValue, $newType] = $this->getIncValueAndType($item);

        // Null values are not allowed
        if ($newValue === null) {
            throw new UserException(sprintf(
                'Missing incremental fetching key "%s" in the row "%s".',
                $this->key,
                $rowIndex + 1
            ));
        }

        // Value type must be same for all rows
        if ($this->valueType && $newType !== $this->valueType) {
            throw new UserException(sprintf(
                'Incremental column type mismatch: "%s" and "%s" types found.',
                $this->valueType,
                $newType ?? '(null)'
            ));
        }

        // Check if is type allowed, for the first row
        if (!$this->valueTypeChecked) {
            if (!in_array($newType, self::ALLOWED_TYPES, true)) {
                throw new UserException(sprintf(
                    'Unexpected type "%s" of the incremental fetching "%s" key. Allowed types "%s".',
                    $newType,
                    $this->key,
                    implode('", "', self::ALLOWED_TYPES)
                ));
            }

            if ($newType === EdmType::STRING) {
                $this->logger->warning(sprintf(
                    'Warning: Key "%s" - type "%s" is used for incremental fetching. ' .
                    'For string type, all values must be the same length, ' .
                    'otherwise incremental fetching fails.',
                    $this->key,
                    $newType
                ));
            }

            $this->valueTypeChecked = true;
        }

        // Check if the string values have same length
        // it's because of how string comparison works.
        // Let's have string values "1" ... "1000"
        // - if we used a condition >= "80", database returns "9", "80"
        // - if we used a condition >= "99", database returns "99", but "100" is missing
        if ($newType === EdmType::STRING) {
            $newValueLength = strlen($newValue);
            if ($this->maxValue && $newValueLength !== $this->maxValueLength) {
                throw new UserException(sprintf(
                    'Unexpected value: Key "%s" - type "%s" is used for incremental fetching. ' .
                    'For string type, all values must be the same length. ' .
                    'This condition is not met, found "%s" (length=%d) and "%s" (length=%d). ' .
                    'Please use the same string lengths or use a key with a different type: "%s".',
                    $this->key,
                    $newType,
                    $this->maxValue,
                    $this->maxValueLength,
                    $newValue,
                    $newValueLength,
                    implode('", "', array_diff(self::ALLOWED_TYPES, [EdmType::STRING]))
                ));
            }
            $this->maxValueLength = $newValueLength;
        }

        $this->maxValue = self::max($this->maxValue, $newValue);
        $this->valueType = $newType;
    }

    public function writeState(): void
    {
        if ($this->enabled && $this->maxValue) {
            JsonHelper::writeFile(
                $this->dataDir . '/out/state.json',
                [
                    self::STATE_INCREMENTAL_KEY => $this->key,
                    self::STATE_INCREMENTAL_VALUE => $this->maxValue,
                    self::STATE_INCREMENTAL_VALUE_TYPE => $this->valueType,
                ]
            );
            $this->logger->info(sprintf(
                'Incremental fetching: new state "%s" = "%s" (%s)',
                $this->key,
                $this->maxValue,
                $this->valueType
            ));
        }
    }

    private function getIncValueAndType(object $item): array
    {
        // Type is defined by annotation, or default types [Int32, Double, String] should be used.
        $value = $item->{$this->key} ?? null;
        $typeKey = $this->key . '@odata.type';
        switch (true) {
            case property_exists($item, $typeKey):
                $type = $item->{$typeKey};
                break;
            case is_int($value):
                $type = EdmType::INT32;
                break;
            case is_float($value):
                $type = EdmType::DOUBLE;
                break;
            case is_bool($value):
                $type = EdmType::BOOLEAN;
                break;
            default:
                $type = EdmType::STRING;
        }

        return [&$value, &$type];
    }
}


================================================
File: /src/Configuration/Config.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\Configuration;

use InvalidArgumentException;
use Keboola\AzureStorageTableExtractor\Exception\UndefinedValueException;
use Keboola\Component\Config\BaseConfig;

class Config extends BaseConfig
{
    public function getConnectionString(): string
    {
        return $this->getValue(['parameters', 'db', '#connectionString']);
    }

    public function getTable(): string
    {
        return $this->getValue(['parameters', 'table']);
    }

    public function getOutput(): string
    {
        return $this->getValue(['parameters', 'output']);
    }

    public function getMaxTries(): int
    {
        return (int) $this->getValue(['parameters', 'maxTries']);
    }

    public function hasFilter(): bool
    {
        return $this->getValue(['parameters', 'filter']) !== null;
    }

    public function getFilter(): string
    {
        if (!$this->hasFilter()) {
            throw new UndefinedValueException('Filter is not defined.');
        }

        return $this->getValue(['parameters', 'filter']);
    }

    public function getMode(): string
    {
        return $this->getValue(['parameters', 'mode']);
    }

    public function getMapping(): array
    {
        if ($this->getMode() !== ConfigDefinition::MODE_MAPPING) {
            throw new UndefinedValueException('Mode is not set to mapping.');
        }

        return $this->getValue(['parameters', 'mapping']);
    }

    public function isIncremental(): bool
    {
        return $this->getValue(['parameters', 'incremental']);
    }

    public function hasIncrementalFetchingKey(): bool
    {
        try {
            return $this->getValue(['parameters', 'incrementalFetchingKey']) !== null;
        } catch (InvalidArgumentException $e) {
            return false;
        }
    }

    public function getIncrementalFetchingKey(): string
    {
        if (!$this->hasIncrementalFetchingKey()) {
            throw new UndefinedValueException('IncrementalFetchingKey is not defined.');
        }

        return $this->getValue(['parameters', 'incrementalFetchingKey']);
    }

    public function hasSelect(): bool
    {
        return $this->getValue(['parameters', 'select']) !== null;
    }

    public function getSelect(): array
    {
        if (!$this->hasSelect()) {
            throw new UndefinedValueException('Select is not defined.');
        }

        return array_map(
            fn(string $field) => trim($field),
            explode(',', $this->getValue(['parameters', 'select']))
        );
    }

    public function hasLimit(): bool
    {
        return $this->getValue(['parameters', 'limit']) !== null;
    }

    public function getLimit(): int
    {
        if (!$this->hasLimit()) {
            throw new UndefinedValueException('Limit is not defined.');
        }

        return (int) $this->getValue(['parameters', 'limit']);
    }
}


================================================
File: /src/Configuration/Node/DbNode.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\Configuration\Node;

use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\NodeBuilder;

class DbNode extends ArrayNodeDefinition
{
    public const NODE_NAME = 'db';

    public function __construct()
    {
        parent::__construct(self::NODE_NAME);
        $this->isRequired();
        $this->init($this->children());
    }

    protected function init(NodeBuilder $builder): void
    {
        $builder
            ->scalarNode('#connectionString')->isRequired()->cannotBeEmpty()->end();
    }
}


================================================
File: /src/Configuration/ActionConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\Configuration;

use Keboola\AzureStorageTableExtractor\Configuration\Node\DbNode;
use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class ActionConfigDefinition extends BaseConfigDefinition
{
    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        $parametersNode->isRequired();
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->ignoreExtraKeys(true)
            ->children()
                ->append(new DbNode());
        // @formatter:on
        return $parametersNode;
    }
}


================================================
File: /src/Configuration/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\Configuration;

use Keboola\AzureStorageTableExtractor\Configuration\Node\DbNode;
use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigDefinition extends BaseConfigDefinition
{
    public const DEFAULT_MAX_TRIES = 5;

    public const MODE_RAW = 'raw';
    public const MODE_MAPPING = 'mapping';

    private const INCREMENTAL_FETCHING_INCOMPATIBLE_NODES = ['select', 'filter', 'limit'];

    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        $parametersNode->isRequired();
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->ignoreExtraKeys(true)
            ->children()
                ->append(new DbNode())
                ->scalarNode('table')->isRequired()->cannotBeEmpty()->end()
                ->scalarNode('output')->isRequired()->cannotBeEmpty()->end()
                ->integerNode('maxTries')->min(1)->defaultValue(self::DEFAULT_MAX_TRIES)->end()
                // Generated query
                ->scalarNode('filter')->defaultNull()->cannotBeEmpty()->end()
                ->scalarNode('select')->defaultNull()->cannotBeEmpty()->end()
                ->integerNode('limit')->defaultNull()->end()
                // Mapping
                ->enumNode('mode')
                    ->values([self::MODE_MAPPING, self::MODE_RAW])
                    ->defaultValue(self::MODE_MAPPING)
                ->end()
                ->variableNode('mapping')->end()
                  // Incremental loading
                ->booleanNode('incremental')->defaultValue(false)->end()
                // Incremental fetching
                ->scalarNode('incrementalFetchingKey')->defaultNull()->end();
        // @formatter:on

        // Validation
        $parametersNode->validate()->always(function ($v) {
            // incrementalFetchingKey can not be used with select/sort.
            foreach (self::INCREMENTAL_FETCHING_INCOMPATIBLE_NODES as $node) {
                if (isset($v['incrementalFetchingKey']) && isset($v[$node])) {
                    throw new InvalidConfigurationException(sprintf(
                        'Invalid configuration, "incrementalFetchingKey" cannot be configured together with "%s".',
                        $node
                    ));
                }
            }

            // Validate mode
            switch ($v['mode']) {
                case self::MODE_RAW:
                    if (isset($v['mapping'])) {
                        throw new InvalidConfigurationException(
                            'Invalid configuration, "mapping" is configured, but mode is set to "raw".'
                        );
                    }
                    break;

                case self::MODE_MAPPING:
                    if (!isset($v['mapping'])) {
                        throw new InvalidConfigurationException(
                            'Invalid configuration, missing "mapping" key, mode is set to "mapping".'
                        );
                    }
                    break;

                default:
                    throw new InvalidConfigurationException(sprintf('Unexpected mode "%s".', $v['mode']));
            }

            return $v;
        });

        return $parametersNode;
    }
}


================================================
File: /src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\Component\Logger;
use Keboola\CommonExceptions\UserExceptionInterface;
use Keboola\AzureStorageTableExtractor\Component;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
try {
    $app = new Component($logger);
    $app->execute();
    exit(0);
} catch (UserExceptionInterface $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (Throwable $e) {
    $logger->critical(
        get_class($e) . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => is_object($e->getPrevious()) ? get_class($e->getPrevious()) : '',
        ]
    );
    exit(2);
}


================================================
File: /src/JsonDeserializer.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor;

use GuzzleHttp\Psr7\Stream;
use Keboola\Component\JsonHelper;
use MicrosoftAzure\Storage\Table\Internal\TableResources as Resources;
use MicrosoftAzure\Storage\Table\Models\Entity;
use RuntimeException;
use MicrosoftAzure\Storage\Table\Internal\IODataReaderWriter;

/**
 * Our version of the MicrosoftAzure\Storage\Table\Internal\JsonODataReaderWriter
 * We do not need to map the results to entities.
 */
class JsonDeserializer implements IODataReaderWriter
{

    /** @inheritDoc */
    public function getTable($name): void
    {
        throw new RuntimeException('Not implemented.');
    }

    /** @inheritDoc */
    public function parseTable($body): void
    {
        throw new RuntimeException('Not implemented.');
    }

    /** @inheritDoc */
    public function parseTableEntries($body): array
    {
        // We use "queryTables" to test connection
        // ... but we don't need to parse response.
        // See Extractor class
        return ['not-implemented'];
    }

    /** @inheritDoc */
    public function getEntity(Entity $entity): void
    {
        throw new RuntimeException('Not implemented.');
    }

    /** @inheritDoc */
    public function parseEntity($body): void
    {
        throw new RuntimeException('Not implemented.');
    }

    /** @inheritDoc */
    public function parseEntities($body)
    {
        // Parse JSON body to array
        /** @var Stream $stream */
        $stream = $body;
        $stream->rewind();
        $bodyArray = json_decode($stream->getContents(), false, 512, JSON_THROW_ON_ERROR);
        return $bodyArray->{Resources::JSON_VALUE};
    }
}


================================================
File: /.env.dist
================================================
CONNECTION_STRING=""


================================================
File: /composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "7013fee3b871707a20c45fffe2013cb3",
    "packages": [
        {
            "name": "guzzlehttp/guzzle",
            "version": "6.5.5",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/guzzle.git",
                "reference": "9d4290de1cfd701f38099ef7e183b64b4b7b0c5e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/guzzle/zipball/9d4290de1cfd701f38099ef7e183b64b4b7b0c5e",
                "reference": "9d4290de1cfd701f38099ef7e183b64b4b7b0c5e",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "guzzlehttp/promises": "^1.0",
                "guzzlehttp/psr7": "^1.6.1",
                "php": ">=5.5",
                "symfony/polyfill-intl-idn": "^1.17.0"
            },
            "require-dev": {
                "ext-curl": "*",
                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.4 || ^7.0",
                "psr/log": "^1.1"
            },
            "suggest": {
                "psr/log": "Required for using the Log middleware"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "6.5-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\": "src/"
                },
                "files": [
                    "src/functions_include.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                }
            ],
            "description": "Guzzle is a PHP HTTP client library",
            "homepage": "http://guzzlephp.org/",
            "keywords": [
                "client",
                "curl",
                "framework",
                "http",
                "http client",
                "rest",
                "web service"
            ],
            "support": {
                "issues": "https://github.com/guzzle/guzzle/issues",
                "source": "https://github.com/guzzle/guzzle/tree/6.5"
            },
            "time": "2020-06-16T21:01:06+00:00"
        },
        {
            "name": "guzzlehttp/promises",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/promises.git",
                "reference": "60d379c243457e073cff02bc323a2a86cb355631"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/promises/zipball/60d379c243457e073cff02bc323a2a86cb355631",
                "reference": "60d379c243457e073cff02bc323a2a86cb355631",
                "shasum": ""
            },
            "require": {
                "php": ">=5.5"
            },
            "require-dev": {
                "symfony/phpunit-bridge": "^4.4 || ^5.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.4-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Promise\\": "src/"
                },
                "files": [
                    "src/functions_include.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                }
            ],
            "description": "Guzzle promises library",
            "keywords": [
                "promise"
            ],
            "support": {
                "issues": "https://github.com/guzzle/promises/issues",
                "source": "https://github.com/guzzle/promises/tree/1.4.0"
            },
            "time": "2020-09-30T07:37:28+00:00"
        },
        {
            "name": "guzzlehttp/psr7",
            "version": "1.7.0",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/psr7.git",
                "reference": "53330f47520498c0ae1f61f7e2c90f55690c06a3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/psr7/zipball/53330f47520498c0ae1f61f7e2c90f55690c06a3",
                "reference": "53330f47520498c0ae1f61f7e2c90f55690c06a3",
                "shasum": ""
            },
            "require": {
                "php": ">=5.4.0",
                "psr/http-message": "~1.0",
                "ralouphie/getallheaders": "^2.0.5 || ^3.0.0"
            },
            "provide": {
                "psr/http-message-implementation": "1.0"
            },
            "require-dev": {
                "ext-zlib": "*",
                "phpunit/phpunit": "~4.8.36 || ^5.7.27 || ^6.5.14 || ^7.5.20 || ^8.5.8 || ^9.3.10"
            },
            "suggest": {
                "laminas/laminas-httphandlerrunner": "Emit PSR-7 responses"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.7-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Psr7\\": "src/"
                },
                "files": [
                    "src/functions_include.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "Tobias Schultze",
                    "homepage": "https://github.com/Tobion"
                }
            ],
            "description": "PSR-7 message implementation that also provides common utility methods",
            "keywords": [
                "http",
                "message",
                "psr-7",
                "request",
                "response",
                "stream",
                "uri",
                "url"
            ],
            "support": {
                "issues": "https://github.com/guzzle/psr7/issues",
                "source": "https://github.com/guzzle/psr7/tree/1.7.0"
            },
            "time": "2020-09-30T07:37:11+00:00"
        },
        {
            "name": "keboola/common-exceptions",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/common-exceptions.git",
                "reference": "fb3ac03b92e7db56f1f4e1952d232ef8640a18d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/common-exceptions/zipball/fb3ac03b92e7db56f1f4e1952d232ef8640a18d7",
                "reference": "fb3ac03b92e7db56f1f4e1952d232ef8640a18d7",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^1.0",
                "phpstan/phpstan-shim": "^0.10.6",
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\CommonExceptions\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Common exceptions shared between different applications",
            "support": {
                "source": "https://github.com/keboola/common-exceptions/tree/master"
            },
            "time": "2020-07-07T07:42:44+00:00"
        },
        {
            "name": "keboola/csv",
            "version": "2.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csv.git",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csv/zipball/eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "ext-json": "*",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Csv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola CSV reader and writer",
            "homepage": "http://keboola.com",
            "keywords": [
                "csv",
                "rfc4180"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csv/issues",
                "source": "https://github.com/keboola/php-csv/tree/master"
            },
            "time": "2020-07-28T09:27:05+00:00"
        },
        {
            "name": "keboola/csvmap",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csvmap.git",
                "reference": "87ebc40091b3fc14ebda382fbdd6ad7f69639b5f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csvmap/zipball/87ebc40091b3fc14ebda382fbdd6ad7f69639b5f",
                "reference": "87ebc40091b3fc14ebda382fbdd6ad7f69639b5f",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/csv": "^2.1",
                "keboola/php-csvtable": "^1.1",
                "keboola/php-utils": "^4.1",
                "php": "^7.1"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "dev-master",
                "phpunit/phpunit": ">=7.5",
                "squizlabs/php_codesniffer": "~2.7"
            },
            "type": "library",
            "autoload": {
                "psr-0": {
                    "Keboola\\CsvMap": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ondrej Vana",
                    "email": "kachna@keboola.cz"
                }
            ],
            "description": "Flatten an object into a CSV file(s)",
            "keywords": [
                "csv",
                "flatten",
                "object"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csvmap/issues",
                "source": "https://github.com/keboola/php-csvmap/tree/1.1.0"
            },
            "time": "2020-10-29T12:19:34+00:00"
        },
        {
            "name": "keboola/php-component",
            "version": "8.1.2",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-component.git",
                "reference": "49af27d934f09be2e11ea1becb2c98e75032b36b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-component/zipball/49af27d934f09be2e11ea1becb2c98e75032b36b",
                "reference": "49af27d934f09be2e11ea1becb2c98e75032b36b",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/common-exceptions": "^1.0",
                "monolog/monolog": "^2.0",
                "php": "^7.3",
                "symfony/config": "^5.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/serializer": "^5.0"
            },
            "require-dev": {
                "devedge/sami-github": "^1.0",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^2.0",
                "phpstan/phpstan": "^0.12.14",
                "phpunit/phpunit": "^9.0"
            },
            "type": "project",
            "autoload": {
                "psr-4": {
                    "Keboola\\Component\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Helper classes for developing Keboola PHP components",
            "keywords": [
                "component",
                "docker",
                "keboola"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-component/issues",
                "source": "https://github.com/keboola/php-component/tree/8.1.2"
            },
            "time": "2020-04-30T11:08:47+00:00"
        },
        {
            "name": "keboola/php-csvtable",
            "version": "1.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csvtable.git",
                "reference": "f3abf0d300452ad81fc5e9b1f4302ae1eead633e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csvtable/zipball/f3abf0d300452ad81fc5e9b1f4302ae1eead633e",
                "reference": "f3abf0d300452ad81fc5e9b1f4302ae1eead633e",
                "shasum": ""
            },
            "require": {
                "keboola/csv": "^2.2",
                "keboola/php-temp": "^2.0",
                "php": "^7.1"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "dev-master",
                "phpunit/phpunit": ">=7.5"
            },
            "type": "library",
            "autoload": {
                "psr-0": {
                    "Keboola\\CsvTable": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ondrej Vana",
                    "email": "kachna@keboola.cz"
                }
            ],
            "description": "CSV file class with Keboola StorageApi extensions",
            "keywords": [
                "csv",
                "storageapi",
                "table"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csvtable/issues",
                "source": "https://github.com/keboola/php-csvtable/tree/1.1.1"
            },
            "time": "2020-10-27T14:00:27+00:00"
        },
        {
            "name": "keboola/php-temp",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/filesystem": ">2.8"
            },
            "require-dev": {
                "infection/infection": "^0.12",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^8.0",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0|^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Temp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Temp library handles application temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-temp/issues",
                "source": "https://github.com/keboola/php-temp/tree/2.0.1"
            },
            "time": "2019-04-26T07:18:24+00:00"
        },
        {
            "name": "keboola/php-utils",
            "version": "4.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-utils.git",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-utils/zipball/f5be83a50b5c4858f5698747e8a795048a89c382",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382",
                "shasum": ""
            },
            "require": {
                "keboola/sanitizer": "^0.1",
                "php": ">=5.6.0",
                "seld/jsonlint": "^1.4"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "~0.2",
                "phpunit/phpunit": "~5.0",
                "squizlabs/php_codesniffer": "~2.4"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/Keboola/Utils/jsonDecode.php",
                    "src/Keboola/Utils/sanitizeUtf8.php",
                    "src/Keboola/Utils/objectToArray.php",
                    "src/Keboola/Utils/formatDateTime.php",
                    "src/Keboola/Utils/replaceDates.php",
                    "src/Keboola/Utils/replaceDatesInArray.php",
                    "src/Keboola/Utils/buildUrl.php",
                    "src/Keboola/Utils/httpBuildUrl.php",
                    "src/Keboola/Utils/returnBytes.php",
                    "src/Keboola/Utils/camelize.php",
                    "src/Keboola/Utils/getDataFromPath.php",
                    "src/Keboola/Utils/isValidDateTimeString.php",
                    "src/Keboola/Utils/flattenArray.php",
                    "src/Keboola/Utils/arrayToObject.php",
                    "src/Keboola/Utils/isEmptyObject.php",
                    "src/Keboola/Utils/stripInvalidUtf16.php",
                    "src/Keboola/Utils/toAscii.php",
                    "src/Keboola/Utils/sanitizeColumnName.php",
                    "src/Keboola/Utils/formatBytes.php"
                ],
                "psr-0": {
                    "Keboola\\Utils": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Misc utility functions",
            "keywords": [
                "utility"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-utils/issues",
                "source": "https://github.com/keboola/php-utils/tree/master"
            },
            "time": "2019-10-04T20:55:45+00:00"
        },
        {
            "name": "keboola/retry",
            "version": "0.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/retry.git",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/retry/zipball/afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "psr/log": "^1.1"
            },
            "replace": {
                "vkartaviy/retry": "*"
            },
            "require-dev": {
                "keboola/coding-standard": "^7.0",
                "phpstan/phpstan-shim": "^0.10",
                "phpunit/phpunit": "7.*"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Retry\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola Dev",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Library for repeatable and retryable operations",
            "keywords": [
                "backoff",
                "proxy",
                "repeat",
                "retry"
            ],
            "support": {
                "issues": "https://github.com/keboola/retry/issues",
                "source": "https://github.com/keboola/retry/tree/0.5.0"
            },
            "time": "2020-01-31T14:20:00+00:00"
        },
        {
            "name": "keboola/sanitizer",
            "version": "0.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/sanitizer.git",
                "reference": "6edda00cd177409a33f180b8f12bdad89bf893c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/sanitizer/zipball/6edda00cd177409a33f180b8f12bdad89bf893c5",
                "reference": "6edda00cd177409a33f180b8f12bdad89bf893c5",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Utils\\Sanitizer\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Column name sanitizer",
            "support": {
                "issues": "https://github.com/keboola/sanitizer/issues",
                "source": "https://github.com/keboola/sanitizer/tree/0.1.0"
            },
            "time": "2019-01-11T10:21:17+00:00"
        },
        {
            "name": "microsoft/azure-storage-common",
            "version": "1.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/Azure/azure-storage-common-php.git",
                "reference": "fe85677aa5188f8efe6916b4d6773a194e2c2ede"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Azure/azure-storage-common-php/zipball/fe85677aa5188f8efe6916b4d6773a194e2c2ede",
                "reference": "fe85677aa5188f8efe6916b4d6773a194e2c2ede",
                "shasum": ""
            },
            "require": {
                "guzzlehttp/guzzle": "~6.0",
                "php": ">=5.6.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "MicrosoftAzure\\Storage\\Common\\": "src/Common"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Azure Storage PHP Client Library",
                    "email": "dmsh@microsoft.com"
                }
            ],
            "description": "This project provides a set of common code shared by Azure Storage Blob, Table, Queue and File PHP client libraries.",
            "keywords": [
                "azure",
                "common",
                "php",
                "sdk",
                "storage"
            ],
            "support": {
                "issues": "https://github.com/Azure/azure-storage-common-php/issues",
                "source": "https://github.com/Azure/azure-storage-common-php/tree/master"
            },
            "time": "2020-08-28T09:02:11+00:00"
        },
        {
            "name": "microsoft/azure-storage-table",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/Azure/azure-storage-table-php.git",
                "reference": "756c7ec4bac0509d94b330e95fc2fb2dc5c1bcc8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Azure/azure-storage-table-php/zipball/756c7ec4bac0509d94b330e95fc2fb2dc5c1bcc8",
                "reference": "756c7ec4bac0509d94b330e95fc2fb2dc5c1bcc8",
                "shasum": ""
            },
            "require": {
                "microsoft/azure-storage-common": "~1.5",
                "php": ">=5.6.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "MicrosoftAzure\\Storage\\Table\\": "src/Table"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Azure Storage PHP Client Library",
                    "email": "dmsh@microsoft.com"
                }
            ],
            "description": "This project provides a set of PHP client libraries that make it easy to access Microsoft Azure Storage Table APIs.",
            "keywords": [
                "azure",
                "php",
                "sdk",
                "storage",
                "table"
            ],
            "support": {
                "issues": "https://github.com/Azure/azure-storage-table-php/issues",
                "source": "https://github.com/Azure/azure-storage-table-php/tree/v1.1.3"
            },
            "time": "2020-08-28T09:56:37+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "2.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "f9eee5cec93dfb313a38b6b288741e84e53f02d5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/f9eee5cec93dfb313a38b6b288741e84e53f02d5",
                "reference": "f9eee5cec93dfb313a38b6b288741e84e53f02d5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2",
                "psr/log": "^1.0.1"
            },
            "provide": {
                "psr/log-implementation": "1.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "elasticsearch/elasticsearch": "^6.0",
                "graylog2/gelf-php": "^1.4.2",
                "php-amqplib/php-amqplib": "~2.4",
                "php-console/php-console": "^3.1.3",
                "php-parallel-lint/php-parallel-lint": "^1.0",
                "phpspec/prophecy": "^1.6.1",
                "phpunit/phpunit": "^8.5",
                "predis/predis": "^1.1",
                "rollbar/rollbar": "^1.3",
                "ruflin/elastica": ">=0.90 <3.0",
                "swiftmailer/swiftmailer": "^5.3|^6.0"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-mbstring": "Allow to work properly with unicode symbols",
                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "php-console/php-console": "Allow sending log messages to Google Chrome",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "http://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "http://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/monolog/issues",
                "source": "https://github.com/Seldaek/monolog/tree/2.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/monolog/monolog",
                    "type": "tidelift"
                }
            ],
            "time": "2020-07-23T08:41:23+00:00"
        },
        {
            "name": "psr/http-message",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-message.git",
                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-message/zipball/f6561bf28d520154e4b0ec72be95418abe6d9363",
                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Message\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP messages",
            "homepage": "https://github.com/php-fig/http-message",
            "keywords": [
                "http",
                "http-message",
                "psr",
                "psr-7",
                "request",
                "response"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-message/tree/master"
            },
            "time": "2016-08-06T14:39:51+00:00"
        },
        {
            "name": "psr/log",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/0f73288fd15629204f9d42b7055f72dacbe811fc",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "Psr/Log/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "support": {
                "source": "https://github.com/php-fig/log/tree/1.1.3"
            },
            "time": "2020-03-23T09:12:05+00:00"
        },
        {
            "name": "ralouphie/getallheaders",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/ralouphie/getallheaders.git",
                "reference": "120b605dfeb996808c31b6477290a714d356e822"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822",
                "reference": "120b605dfeb996808c31b6477290a714d356e822",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "php-coveralls/php-coveralls": "^2.1",
                "phpunit/phpunit": "^5 || ^6.5"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/getallheaders.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ralph Khattar",
                    "email": "ralph.khattar@gmail.com"
                }
            ],
            "description": "A polyfill for getallheaders.",
            "support": {
                "issues": "https://github.com/ralouphie/getallheaders/issues",
                "source": "https://github.com/ralouphie/getallheaders/tree/develop"
            },
            "time": "2019-03-08T08:55:37+00:00"
        },
        {
            "name": "seld/jsonlint",
            "version": "1.8.3",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/jsonlint.git",
                "reference": "9ad6ce79c342fbd44df10ea95511a1b24dee5b57"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/jsonlint/zipball/9ad6ce79c342fbd44df10ea95511a1b24dee5b57",
                "reference": "9ad6ce79c342fbd44df10ea95511a1b24dee5b57",
                "shasum": ""
            },
            "require": {
                "php": "^5.3 || ^7.0 || ^8.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0"
            },
            "bin": [
                "bin/jsonlint"
            ],
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Seld\\JsonLint\\": "src/Seld/JsonLint/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "http://seld.be"
                }
            ],
            "description": "JSON Linter",
            "keywords": [
                "json",
                "linter",
                "parser",
                "validator"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/jsonlint/issues",
                "source": "https://github.com/Seldaek/jsonlint/tree/1.8.3"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/seld/jsonlint",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-11T09:19:24+00:00"
        },
        {
            "name": "symfony/config",
            "version": "v5.1.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/config.git",
                "reference": "11baeefa4c179d6908655a7b6be728f62367c193"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/config/zipball/11baeefa4c179d6908655a7b6be728f62367c193",
                "reference": "11baeefa4c179d6908655a7b6be728f62367c193",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/deprecation-contracts": "^2.1",
                "symfony/filesystem": "^4.4|^5.0",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-php80": "^1.15"
            },
            "conflict": {
                "symfony/finder": "<4.4"
            },
            "require-dev": {
                "symfony/event-dispatcher": "^4.4|^5.0",
                "symfony/finder": "^4.4|^5.0",
                "symfony/messenger": "^4.4|^5.0",
                "symfony/service-contracts": "^1.1|^2",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "symfony/yaml": "To use the yaml reference dumper"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Config\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Config Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/config/tree/v5.1.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-24T12:01:57+00:00"
        },
        {
            "name": "symfony/deprecation-contracts",
            "version": "v2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/deprecation-contracts.git",
                "reference": "5fa56b4074d1ae755beb55617ddafe6f5d78f665"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/5fa56b4074d1ae755beb55617ddafe6f5d78f665",
                "reference": "5fa56b4074d1ae755beb55617ddafe6f5d78f665",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.2-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "files": [
                    "function.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "A generic function and convention to trigger deprecation notices",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/deprecation-contracts/tree/master"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-09-07T11:33:47+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v5.1.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "df08650ea7aee2d925380069c131a66124d79177"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/df08650ea7aee2d925380069c131a66124d79177",
                "reference": "df08650ea7aee2d925380069c131a66124d79177",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-ctype": "~1.8"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Filesystem Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/filesystem/tree/v5.1.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-24T12:01:57+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v5.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "fd8305521692f27eae3263895d1ef1571c71a78d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/fd8305521692f27eae3263895d1ef1571c71a78d",
                "reference": "fd8305521692f27eae3263895d1ef1571c71a78d",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Finder Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/finder/tree/v5.2.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-18T09:42:36+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.20.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "f4ba089a5b6366e453971d3aad5fe8e897b37f41"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/f4ba089a5b6366e453971d3aad5fe8e897b37f41",
                "reference": "f4ba089a5b6366e453971d3aad5fe8e897b37f41",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.20-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.20.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-23T14:02:19+00:00"
        },
        {
            "name": "symfony/polyfill-intl-idn",
            "version": "v1.20.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-idn.git",
                "reference": "3b75acd829741c768bc8b1f84eb33265e7cc5117"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-idn/zipball/3b75acd829741c768bc8b1f84eb33265e7cc5117",
                "reference": "3b75acd829741c768bc8b1f84eb33265e7cc5117",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/polyfill-intl-normalizer": "^1.10",
                "symfony/polyfill-php72": "^1.10"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.20-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Idn\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Laurent Bassin",
                    "email": "laurent@bassin.info"
                },
                {
                    "name": "Trevor Rowbotham",
                    "email": "trevor.rowbotham@pm.me"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's idn_to_ascii and idn_to_utf8 functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "idn",
                "intl",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-idn/tree/v1.20.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-23T14:02:19+00:00"
        },
        {
            "name": "symfony/polyfill-intl-normalizer",
            "version": "v1.20.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-normalizer.git",
                "reference": "727d1096295d807c309fb01a851577302394c897"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/727d1096295d807c309fb01a851577302394c897",
                "reference": "727d1096295d807c309fb01a851577302394c897",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.20-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Normalizer\\": ""
                },
                "files": [
                    "bootstrap.php"
                ],
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's Normalizer class and related functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "intl",
                "normalizer",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-normalizer/tree/v1.20.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-23T14:02:19+00:00"
        },
        {
            "name": "symfony/polyfill-php72",
            "version": "v1.20.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php72.git",
                "reference": "cede45fcdfabdd6043b3592e83678e42ec69e930"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php72/zipball/cede45fcdfabdd6043b3592e83678e42ec69e930",
                "reference": "cede45fcdfabdd6043b3592e83678e42ec69e930",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.20-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Php72\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 7.2+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php72/tree/v1.20.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-23T14:02:19+00:00"
        },
        {
            "name": "symfony/polyfill-php80",
            "version": "v1.20.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php80.git",
                "reference": "e70aa8b064c5b72d3df2abd5ab1e90464ad009de"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/e70aa8b064c5b72d3df2abd5ab1e90464ad009de",
                "reference": "e70aa8b064c5b72d3df2abd5ab1e90464ad009de",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.20-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Php80\\": ""
                },
                "files": [
                    "bootstrap.php"
                ],
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ion Bazan",
                    "email": "ion.bazan@gmail.com"
                },
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php80/tree/v1.20.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-23T14:02:19+00:00"
        },
        {
            "name": "symfony/serializer",
            "version": "v5.1.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/serializer.git",
                "reference": "20d3c6c58c41344a427488c0d2902bfbfbe17ddb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/serializer/zipball/20d3c6c58c41344a427488c0d2902bfbfbe17ddb",
                "reference": "20d3c6c58c41344a427488c0d2902bfbfbe17ddb",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-php80": "^1.15"
            },
            "conflict": {
                "phpdocumentor/type-resolver": "<0.2.1",
                "symfony/dependency-injection": "<4.4",
                "symfony/property-access": "<4.4",
                "symfony/property-info": "<4.4",
                "symfony/yaml": "<4.4"
            },
            "require-dev": {
                "doctrine/annotations": "~1.0",
                "doctrine/cache": "~1.0",
                "phpdocumentor/reflection-docblock": "^3.2|^4.0",
                "symfony/cache": "^4.4|^5.0",
                "symfony/config": "^4.4|^5.0",
                "symfony/dependency-injection": "^4.4|^5.0",
                "symfony/error-handler": "^4.4|^5.0",
                "symfony/http-foundation": "^4.4|^5.0",
                "symfony/mime": "^4.4|^5.0",
                "symfony/property-access": "^4.4|^5.0",
                "symfony/property-info": "^4.4|^5.0",
                "symfony/validator": "^4.4|^5.0",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "doctrine/annotations": "For using the annotation mapping. You will also need doctrine/cache.",
                "doctrine/cache": "For using the default cached annotation reader and metadata cache.",
                "psr/cache-implementation": "For using the metadata cache.",
                "symfony/config": "For using the XML mapping loader.",
                "symfony/mime": "For using a MIME type guesser within the DataUriNormalizer.",
                "symfony/property-access": "For using the ObjectNormalizer.",
                "symfony/property-info": "To deserialize relations.",
                "symfony/yaml": "For using the default YAML mapping loader."
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Serializer\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Serializer Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/serializer/tree/v5.1.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-24T12:01:57+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "doctrine/instantiator",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/instantiator.git",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "require-dev": {
                "doctrine/coding-standard": "^8.0",
                "ext-pdo": "*",
                "ext-phar": "*",
                "phpbench/phpbench": "^0.13 || 1.0.0-alpha2",
                "phpstan/phpstan": "^0.12",
                "phpstan/phpstan-phpunit": "^0.12",
                "phpunit/phpunit": "^7.0 || ^8.0 || ^9.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com",
                    "homepage": "https://ocramius.github.io/"
                }
            ],
            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
            "keywords": [
                "constructor",
                "instantiate"
            ],
            "support": {
                "issues": "https://github.com/doctrine/instantiator/issues",
                "source": "https://github.com/doctrine/instantiator/tree/1.4.0"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-10T18:47:58+00:00"
        },
        {
            "name": "keboola/coding-standard",
            "version": "9.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "bcf9ac5f664aa3bf816902438c0a8a9187cd4ebb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/bcf9ac5f664aa3bf816902438c0a8a9187cd4ebb",
                "reference": "bcf9ac5f664aa3bf816902438c0a8a9187cd4ebb",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "^4.8.6",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "support": {
                "issues": "https://github.com/keboola/phpcs-standard/issues",
                "source": "https://github.com/keboola/phpcs-standard/tree/master"
            },
            "time": "2019-10-16T11:14:48+00:00"
        },
        {
            "name": "keboola/datadir-tests",
            "version": "5.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/datadir-tests.git",
                "reference": "9b2bf6d1495973e43b48a267469cb990dfe44520"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/datadir-tests/zipball/9b2bf6d1495973e43b48a267469cb990dfe44520",
                "reference": "9b2bf6d1495973e43b48a267469cb990dfe44520",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/php-temp": "^2.0",
                "php": "^7.3",
                "phpunit/phpunit": "^9.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/process": "^5.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^9.0",
                "phpstan/phpstan": "^0.12.14"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DatadirTests\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Tool for functional testing of Keboola Connection components",
            "support": {
                "issues": "https://github.com/keboola/datadir-tests/issues",
                "source": "https://github.com/keboola/datadir-tests/tree/5.2.0"
            },
            "time": "2020-09-10T12:31:35+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.10.2",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "776f831124e9c62e1a2c601ecc52e776d8bb7220"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/776f831124e9c62e1a2c601ecc52e776d8bb7220",
                "reference": "776f831124e9c62e1a2c601ecc52e776d8bb7220",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "replace": {
                "myclabs/deep-copy": "self.version"
            },
            "require-dev": {
                "doctrine/collections": "^1.0",
                "doctrine/common": "^2.6",
                "phpunit/phpunit": "^7.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                },
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "support": {
                "issues": "https://github.com/myclabs/DeepCopy/issues",
                "source": "https://github.com/myclabs/DeepCopy/tree/1.10.2"
            },
            "funding": [
                {
                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-13T09:40:50+00:00"
        },
        {
            "name": "nikic/php-parser",
            "version": "v4.10.2",
            "source": {
                "type": "git",
                "url": "https://github.com/nikic/PHP-Parser.git",
                "reference": "658f1be311a230e0907f5dfe0213742aff0596de"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/658f1be311a230e0907f5dfe0213742aff0596de",
                "reference": "658f1be311a230e0907f5dfe0213742aff0596de",
                "shasum": ""
            },
            "require": {
                "ext-tokenizer": "*",
                "php": ">=7.0"
            },
            "require-dev": {
                "ircmaxell/php-yacc": "^0.0.7",
                "phpunit/phpunit": "^6.5 || ^7.0 || ^8.0 || ^9.0"
            },
            "bin": [
                "bin/php-parse"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.9-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpParser\\": "lib/PhpParser"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Nikita Popov"
                }
            ],
            "description": "A PHP parser written in PHP",
            "keywords": [
                "parser",
                "php"
            ],
            "support": {
                "issues": "https://github.com/nikic/PHP-Parser/issues",
                "source": "https://github.com/nikic/PHP-Parser/tree/v4.10.2"
            },
            "time": "2020-09-26T10:30:38+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-phar": "*",
                "ext-xmlwriter": "*",
                "phar-io/version": "^3.0.1",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "support": {
                "issues": "https://github.com/phar-io/manifest/issues",
                "source": "https://github.com/phar-io/manifest/tree/master"
            },
            "time": "2020-06-27T14:33:11+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "c6bb6825def89e0a32220f88337f8ceaf1975fa0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/c6bb6825def89e0a32220f88337f8ceaf1975fa0",
                "reference": "c6bb6825def89e0a32220f88337f8ceaf1975fa0",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "support": {
                "issues": "https://github.com/phar-io/version/issues",
                "source": "https://github.com/phar-io/version/tree/master"
            },
            "time": "2020-06-27T14:39:04+00:00"
        },
        {
            "name": "php-parallel-lint/php-parallel-lint",
            "version": "v1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-parallel-lint/PHP-Parallel-Lint.git",
                "reference": "474f18bc6cc6aca61ca40bfab55139de614e51ca"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-parallel-lint/PHP-Parallel-Lint/zipball/474f18bc6cc6aca61ca40bfab55139de614e51ca",
                "reference": "474f18bc6cc6aca61ca40bfab55139de614e51ca",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "php": ">=5.4.0"
            },
            "replace": {
                "grogy/php-parallel-lint": "*",
                "jakub-onderka/php-parallel-lint": "*"
            },
            "require-dev": {
                "nette/tester": "^1.3 || ^2.0",
                "php-parallel-lint/php-console-highlighter": "~0.3",
                "squizlabs/php_codesniffer": "~3.0"
            },
            "suggest": {
                "php-parallel-lint/php-console-highlighter": "Highlight syntax in code snippet"
            },
            "bin": [
                "parallel-lint"
            ],
            "type": "library",
            "autoload": {
                "classmap": [
                    "./"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Jakub Onderka",
                    "email": "ahoj@jakubonderka.cz"
                }
            ],
            "description": "This tool check syntax of PHP files about 20x faster than serial check.",
            "homepage": "https://github.com/php-parallel-lint/PHP-Parallel-Lint",
            "support": {
                "issues": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/issues",
                "source": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/tree/master"
            },
            "time": "2020-04-04T12:18:32+00:00"
        },
        {
            "name": "phpdocumentor/reflection-common",
            "version": "2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionCommon.git",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-2.x": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jaap van Otterdijk",
                    "email": "opensource@ijaap.nl"
                }
            ],
            "description": "Common reflection classes used by phpdocumentor to reflect the code structure",
            "homepage": "http://www.phpdoc.org",
            "keywords": [
                "FQSEN",
                "phpDocumentor",
                "phpdoc",
                "reflection",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionCommon/issues",
                "source": "https://github.com/phpDocumentor/ReflectionCommon/tree/2.x"
            },
            "time": "2020-06-27T09:03:43+00:00"
        },
        {
            "name": "phpdocumentor/reflection-docblock",
            "version": "5.2.2",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/069a785b2141f5bcf49f3e353548dc1cce6df556",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556",
                "shasum": ""
            },
            "require": {
                "ext-filter": "*",
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.2",
                "phpdocumentor/type-resolver": "^1.3",
                "webmozart/assert": "^1.9.1"
            },
            "require-dev": {
                "mockery/mockery": "~1.3.2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                },
                {
                    "name": "Jaap van Otterdijk",
                    "email": "account@ijaap.nl"
                }
            ],
            "description": "With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.",
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionDocBlock/issues",
                "source": "https://github.com/phpDocumentor/ReflectionDocBlock/tree/master"
            },
            "time": "2020-09-03T19:13:55+00:00"
        },
        {
            "name": "phpdocumentor/type-resolver",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/TypeResolver.git",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.0"
            },
            "require-dev": {
                "ext-tokenizer": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-1.x": "1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                }
            ],
            "description": "A PSR-5 based resolver of Class names, Types and Structural Element Names",
            "support": {
                "issues": "https://github.com/phpDocumentor/TypeResolver/issues",
                "source": "https://github.com/phpDocumentor/TypeResolver/tree/1.4.0"
            },
            "time": "2020-09-17T18:55:26+00:00"
        },
        {
            "name": "phpspec/prophecy",
            "version": "1.12.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phpspec/prophecy.git",
                "reference": "8ce87516be71aae9b956f81906aaf0338e0d8a2d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpspec/prophecy/zipball/8ce87516be71aae9b956f81906aaf0338e0d8a2d",
                "reference": "8ce87516be71aae9b956f81906aaf0338e0d8a2d",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.2",
                "php": "^7.2 || ~8.0, <8.1",
                "phpdocumentor/reflection-docblock": "^5.2",
                "sebastian/comparator": "^3.0 || ^4.0",
                "sebastian/recursion-context": "^3.0 || ^4.0"
            },
            "require-dev": {
                "phpspec/phpspec": "^6.0",
                "phpunit/phpunit": "^8.0 || ^9.0 <9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.11.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Prophecy\\": "src/Prophecy"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Konstantin Kudryashov",
                    "email": "ever.zet@gmail.com",
                    "homepage": "http://everzet.com"
                },
                {
                    "name": "Marcello Duarte",
                    "email": "marcello.duarte@gmail.com"
                }
            ],
            "description": "Highly opinionated mocking framework for PHP 5.3+",
            "homepage": "https://github.com/phpspec/prophecy",
            "keywords": [
                "Double",
                "Dummy",
                "fake",
                "mock",
                "spy",
                "stub"
            ],
            "support": {
                "issues": "https://github.com/phpspec/prophecy/issues",
                "source": "https://github.com/phpspec/prophecy/tree/1.12.1"
            },
            "time": "2020-09-29T09:10:42+00:00"
        },
        {
            "name": "phpstan/phpstan",
            "version": "0.12.57",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan.git",
                "reference": "f9909d1d0c44b4cbaf72babcf80e8f14d6fdd55b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan/zipball/f9909d1d0c44b4cbaf72babcf80e8f14d6fdd55b",
                "reference": "f9909d1d0c44b4cbaf72babcf80e8f14d6fdd55b",
                "shasum": ""
            },
            "require": {
                "php": "^7.1|^8.0"
            },
            "conflict": {
                "phpstan/phpstan-shim": "*"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.12-dev"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan - PHP Static Analysis Tool",
            "support": {
                "issues": "https://github.com/phpstan/phpstan/issues",
                "source": "https://github.com/phpstan/phpstan/tree/0.12.57"
            },
            "funding": [
                {
                    "url": "https://github.com/ondrejmirtes",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/phpstan",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpstan/phpstan",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-21T12:53:28+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "9.2.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "0a7f0acf9269c190fd982b5c04423feae986b6e0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/0a7f0acf9269c190fd982b5c04423feae986b6e0",
                "reference": "0a7f0acf9269c190fd982b5c04423feae986b6e0",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-xmlwriter": "*",
                "nikic/php-parser": "^4.10.2",
                "php": ">=7.3",
                "phpunit/php-file-iterator": "^3.0.3",
                "phpunit/php-text-template": "^2.0.2",
                "sebastian/code-unit-reverse-lookup": "^2.0.2",
                "sebastian/complexity": "^2.0",
                "sebastian/environment": "^5.1.2",
                "sebastian/lines-of-code": "^1.0",
                "sebastian/version": "^3.0.1",
                "theseer/tokenizer": "^1.2.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcov": "*",
                "ext-xdebug": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-11-27T06:15:15+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "3.0.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/aa4be8575f26070b100fccb67faabb28f21f66f8",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:57:25+00:00"
        },
        {
            "name": "phpunit/php-invoker",
            "version": "3.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-invoker.git",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "ext-pcntl": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcntl": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Invoke callables with a timeout",
            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
            "keywords": [
                "process"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
                "source": "https://github.com/sebastianbergmann/php-invoker/tree/3.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:58:55+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
                "source": "https://github.com/sebastianbergmann/php-text-template/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T05:33:50+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "5.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-timer/issues",
                "source": "https://github.com/sebastianbergmann/php-timer/tree/5.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:16:10+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "9.4.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "9fa359ff5ddaa5eb2be2bedb08a6a5787a5807ab"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/9fa359ff5ddaa5eb2be2bedb08a6a5787a5807ab",
                "reference": "9fa359ff5ddaa5eb2be2bedb08a6a5787a5807ab",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.3.1",
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "ext-xmlwriter": "*",
                "myclabs/deep-copy": "^1.10.1",
                "phar-io/manifest": "^2.0.1",
                "phar-io/version": "^3.0.2",
                "php": ">=7.3",
                "phpspec/prophecy": "^1.12.1",
                "phpunit/php-code-coverage": "^9.2",
                "phpunit/php-file-iterator": "^3.0.5",
                "phpunit/php-invoker": "^3.1.1",
                "phpunit/php-text-template": "^2.0.3",
                "phpunit/php-timer": "^5.0.2",
                "sebastian/cli-parser": "^1.0.1",
                "sebastian/code-unit": "^1.0.6",
                "sebastian/comparator": "^4.0.5",
                "sebastian/diff": "^4.0.3",
                "sebastian/environment": "^5.1.3",
                "sebastian/exporter": "^4.0.3",
                "sebastian/global-state": "^5.0.1",
                "sebastian/object-enumerator": "^4.0.3",
                "sebastian/resource-operations": "^3.0.3",
                "sebastian/type": "^2.3",
                "sebastian/version": "^3.0.2"
            },
            "require-dev": {
                "ext-pdo": "*",
                "phpspec/prophecy-phpunit": "^2.0.1"
            },
            "suggest": {
                "ext-soap": "*",
                "ext-xdebug": "*"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.4-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ],
                "files": [
                    "src/Framework/Assert/Functions.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                "source": "https://github.com/sebastianbergmann/phpunit/tree/9.4.3"
            },
            "funding": [
                {
                    "url": "https://phpunit.de/donate.html",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-11-10T12:53:30+00:00"
        },
        {
            "name": "sebastian/cli-parser",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/cli-parser.git",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for parsing CLI options",
            "homepage": "https://github.com/sebastianbergmann/cli-parser",
            "support": {
                "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
                "source": "https://github.com/sebastianbergmann/cli-parser/tree/1.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:08:49+00:00"
        },
        {
            "name": "sebastian/code-unit",
            "version": "1.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit.git",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the PHP code units",
            "homepage": "https://github.com/sebastianbergmann/code-unit",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit/issues",
                "source": "https://github.com/sebastianbergmann/code-unit/tree/1.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:08:54+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:30:19+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/55f4261989e546dc112258c7a75935a81a7ce382",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/diff": "^4.0",
                "sebastian/exporter": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/comparator/issues",
                "source": "https://github.com/sebastianbergmann/comparator/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:49:45+00:00"
        },
        {
            "name": "sebastian/complexity",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/complexity.git",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/739b35e53379900cc9ac327b2147867b8b6efd88",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.7",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for calculating the complexity of PHP code units",
            "homepage": "https://github.com/sebastianbergmann/complexity",
            "support": {
                "issues": "https://github.com/sebastianbergmann/complexity/issues",
                "source": "https://github.com/sebastianbergmann/complexity/tree/2.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:52:27+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3",
                "symfony/process": "^4.2 || ^5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/diff/issues",
                "source": "https://github.com/sebastianbergmann/diff/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:10:38+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "5.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/388b6ced16caa751030f6a69e588299fa09200ac",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-posix": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "http://www.github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/environment/issues",
                "source": "https://github.com/sebastianbergmann/environment/tree/5.1.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:52:38+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "4.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-mbstring": "*",
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "http://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/exporter/issues",
                "source": "https://github.com/sebastianbergmann/exporter/tree/4.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:24:23+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "5.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/a90ccbddffa067b51f574dea6eb25d5680839455",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-dom": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-uopz": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "http://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/global-state/issues",
                "source": "https://github.com/sebastianbergmann/global-state/tree/5.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:55:19+00:00"
        },
        {
            "name": "sebastian/lines-of-code",
            "version": "1.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/lines-of-code.git",
                "reference": "acf76492a65401babcf5283296fa510782783a7a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/acf76492a65401babcf5283296fa510782783a7a",
                "reference": "acf76492a65401babcf5283296fa510782783a7a",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.6",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for counting the lines of code in PHP source code",
            "homepage": "https://github.com/sebastianbergmann/lines-of-code",
            "support": {
                "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/1.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T17:03:56+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:12:34+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
                "source": "https://github.com/sebastianbergmann/object-reflector/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:14:26+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/cd9d8cf3c5804de4341c283ed787f099f5506172",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "http://www.github.com/sebastianbergmann/recursion-context",
            "support": {
                "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
                "source": "https://github.com/sebastianbergmann/recursion-context/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:17:30+00:00"
        },
        {
            "name": "sebastian/resource-operations",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/resource-operations.git",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides a list of PHP built-in functions that operate on resources",
            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
            "support": {
                "issues": "https://github.com/sebastianbergmann/resource-operations/issues",
                "source": "https://github.com/sebastianbergmann/resource-operations/tree/3.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:45:17+00:00"
        },
        {
            "name": "sebastian/type",
            "version": "2.3.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/type.git",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.3-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the types of the PHP type system",
            "homepage": "https://github.com/sebastianbergmann/type",
            "support": {
                "issues": "https://github.com/sebastianbergmann/type/issues",
                "source": "https://github.com/sebastianbergmann/type/tree/2.3.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:18:59+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "c6c1022351a901512170118436c764e473f6de8c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c",
                "reference": "c6c1022351a901512170118436c764e473f6de8c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "support": {
                "issues": "https://github.com/sebastianbergmann/version/issues",
                "source": "https://github.com/sebastianbergmann/version/tree/3.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:39:44+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "4.8.7",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "shasum": ""
            },
            "require": {
                "php": "^7.1",
                "squizlabs/php_codesniffer": "^3.4.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "1.0.0",
                "phing/phing": "2.16.1",
                "phpstan/phpstan": "0.9.2",
                "phpstan/phpstan-phpunit": "0.9.4",
                "phpstan/phpstan-strict-rules": "0.9",
                "phpunit/phpunit": "7.5.1"
            },
            "type": "phpcodesniffer-standard",
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "support": {
                "issues": "https://github.com/slevomat/coding-standard/issues",
                "source": "https://github.com/slevomat/coding-standard/tree/4.8.7"
            },
            "time": "2019-01-03T13:15:50+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.5.8",
            "source": {
                "type": "git",
                "url": "https://github.com/squizlabs/PHP_CodeSniffer.git",
                "reference": "9d583721a7157ee997f235f327de038e7ea6dac4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/9d583721a7157ee997f235f327de038e7ea6dac4",
                "reference": "9d583721a7157ee997f235f327de038e7ea6dac4",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0"
            },
            "bin": [
                "bin/phpcs",
                "bin/phpcbf"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "lead"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "https://github.com/squizlabs/PHP_CodeSniffer",
            "keywords": [
                "phpcs",
                "standards"
            ],
            "support": {
                "issues": "https://github.com/squizlabs/PHP_CodeSniffer/issues",
                "source": "https://github.com/squizlabs/PHP_CodeSniffer",
                "wiki": "https://github.com/squizlabs/PHP_CodeSniffer/wiki"
            },
            "time": "2020-10-23T02:01:07+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v5.1.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "f00872c3f6804150d6a0f73b4151daab96248101"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/f00872c3f6804150d6a0f73b4151daab96248101",
                "reference": "f00872c3f6804150d6a0f73b4151daab96248101",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-php80": "^1.15"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Process Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/process/tree/v5.1.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-24T12:01:57+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/75a63c33a8577608444246075ea0af0d052e452a",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "support": {
                "issues": "https://github.com/theseer/tokenizer/issues",
                "source": "https://github.com/theseer/tokenizer/tree/master"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2020-07-12T23:59:07+00:00"
        },
        {
            "name": "webmozart/assert",
            "version": "1.9.1",
            "source": {
                "type": "git",
                "url": "https://github.com/webmozart/assert.git",
                "reference": "bafc69caeb4d49c39fd0779086c03a3738cbb389"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/webmozart/assert/zipball/bafc69caeb4d49c39fd0779086c03a3738cbb389",
                "reference": "bafc69caeb4d49c39fd0779086c03a3738cbb389",
                "shasum": ""
            },
            "require": {
                "php": "^5.3.3 || ^7.0 || ^8.0",
                "symfony/polyfill-ctype": "^1.8"
            },
            "conflict": {
                "phpstan/phpstan": "<0.12.20",
                "vimeo/psalm": "<3.9.1"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.8.36 || ^7.5.13"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Webmozart\\Assert\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Assertions to validate method input/output with nice error messages.",
            "keywords": [
                "assert",
                "check",
                "validate"
            ],
            "support": {
                "issues": "https://github.com/webmozart/assert/issues",
                "source": "https://github.com/webmozart/assert/tree/master"
            },
            "time": "2020-07-08T17:02:28+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": "^7.4",
        "ext-json": "*"
    },
    "platform-dev": [],
    "plugin-api-version": "2.0.0"
}


================================================
File: /phpstan.neon
================================================
parameters:
    checkMissingIterableValueType: false
    ignoreErrors:
        - '#Cannot call method .*\(\) on Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface\|null.#'
        - '#Unsafe usage of new static\(\).#'
        - '#Access to an undefined property object::\$PartitionKey.#'
        - '#Access to an undefined property object::\$RowKey.#'
        - '#Argument of an invalid type object supplied for foreach, only iterables are supported.#'
        # Ignore errors from JsonDeserializer not implemented methods
        - '#Keboola\\AzureStorageTableExtractor\\JsonDeserializer#'


================================================
File: /tests/phpunit/ConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\Tests;

use Keboola\AzureStorageTableExtractor\Configuration\Config;
use Keboola\AzureStorageTableExtractor\Configuration\ConfigDefinition;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigTest extends TestCase
{
    /**
     * @dataProvider getValidConfigs
     */
    public function testValidConfig(array $input, array $expected): void
    {
        $config = new Config(['parameters' => $input], new ConfigDefinition());
        Assert::assertSame($expected, $this->configToArray($config));
    }

    /**
     * @dataProvider getInvalidConfigs
     */
    public function testInvalidConfig(string $expectedMsg, array $input): void
    {
        $this->expectException(InvalidConfigurationException::class);
        $this->expectDeprecationMessage($expectedMsg);
        new Config(['parameters' => $input], new ConfigDefinition());
    }

    public function getValidConfigs(): iterable
    {
        yield 'minimal' => [
            [
                'db' => $this->getDbNode(),
                'table' => 'input-table',
                'output' => 'output-csv',
                'mode' => 'raw',
            ],
            [
                'connectionString' => 'DefaultEndpointsProtocol=https;...',
                'table' => 'input-table',
                'output' => 'output-csv',
                'maxTries' => 5,
                'select' => null,
                'limit' => null,
                'filter' => null,
                'mode' => 'raw',
                'mapping' => null,
                'isIncremental' => false,
                'incrementalFetchingKey' => null,
            ],
        ];

        yield 'filter-and-select' => [
            [
                'db' => $this->getDbNode(),
                'table' => 'input-table',
                'output' => 'output-csv',
                'mode' => 'raw',
                'filter' => "RowKey ge '2' and age gt 17",
                'select' => 'name, data',
            ],
            [
                'connectionString' => 'DefaultEndpointsProtocol=https;...',
                'table' => 'input-table',
                'output' => 'output-csv',
                'maxTries' => 5,
                'select' => ['name', 'data'],
                'limit' => null,
                'filter' => "RowKey ge '2' and age gt 17",
                'mode' => 'raw',
                'mapping' => null,
                'isIncremental' => false,
                'incrementalFetchingKey' => null,
            ],
        ];

        yield 'limit-and-select' => [
            [
                'db' => $this->getDbNode(),
                'table' => 'input-table',
                'output' => 'output-csv',
                'maxTries' => 3,
                'select' => 'name, data',
                'limit' => 500,
                'mode' => 'raw',
                'incremental' => true,
            ],
            [
                'connectionString' => 'DefaultEndpointsProtocol=https;...',
                'table' => 'input-table',
                'output' => 'output-csv',
                'maxTries' => 3,
                'select' => ['name', 'data'],
                'limit' => 500,
                'filter' => null,
                'mode' => 'raw',
                'mapping' => null,
                'isIncremental' => true,
                'incrementalFetchingKey' => null,
            ],
        ];

        yield 'custom-filter' => [
            [
                'db' => $this->getDbNode(),
                'table' => 'input-table',
                'output' => 'output-csv',
                'filter' => "RowKey ge '2' and age gt 17",
                'mode' => 'raw',
            ],
            [
                'connectionString' => 'DefaultEndpointsProtocol=https;...',
                'table' => 'input-table',
                'output' => 'output-csv',
                'maxTries' => 5,
                'select' => null,
                'limit' => null,
                'filter' => "RowKey ge '2' and age gt 17",
                'mode' => 'raw',
                'mapping' => null,
                'isIncremental' => false,
                'incrementalFetchingKey' => null,
            ],
        ];

        yield 'mapping' => [
            [
                'db' => $this->getDbNode(),
                'table' => 'input-table',
                'output' => 'output-csv',
                'mode' => 'mapping',
                'mapping' => [
                    'id' => [
                        'type' => 'column',
                        'mapping' => [
                            'destination' => 'id',
                            'primaryKey' => true,
                        ],
                    ],
                ],
            ],
            [
                'connectionString' => 'DefaultEndpointsProtocol=https;...',
                'table' => 'input-table',
                'output' => 'output-csv',
                'maxTries' => 5,
                'select' => null,
                'limit' => null,
                'filter' => null,
                'mode' => 'mapping',
                'mapping' => [
                    'id' => [
                        'type' => 'column',
                        'mapping' => [
                            'destination' => 'id',
                            'primaryKey' => true,
                        ],
                    ],
                ],
                'isIncremental' => false,
                'incrementalFetchingKey' => null,
            ],
        ];
    }

    public function getInvalidConfigs(): iterable
    {
        yield 'empty' => [
            'The child node "db" at path "root.parameters" must be configured.',
            [],
        ];

        yield 'missing-mapping' => [
            'Invalid configuration, missing "mapping" key, mode is set to "mapping".',
            [
                'db' => $this->getDbNode(),
                'table' => 'input-table',
                'output' => 'output-csv',
                'mode' => 'mapping',
            ],
        ];

        yield 'unexpected-mapping' => [
            'Invalid configuration, "mapping" is configured, but mode is set to "raw".',
            [
                'db' => $this->getDbNode(),
                'table' => 'input-table',
                'output' => 'output-csv',
                'mode' => 'raw',
                'mapping' => ['abc' => 'def'],
            ],
        ];

        yield 'limit-and-incremental-fetching' => [
            'Invalid configuration, "incrementalFetchingKey" cannot be configured together with "limit".',
            [
                'db' => $this->getDbNode(),
                'table' => 'input-table',
                'output' => 'output-csv',
                'mode' => 'raw',
                'limit' => 100,
                'incrementalFetchingKey' => 'date',
            ],
        ];
    }

    private function configToArray(Config $config): array
    {
        return [
            'connectionString' => $config->getConnectionString(),
            'table' => $config->getTable(),
            'output' => $config->getOutput(),
            'maxTries' => $config->getMaxTries(),
            'select' => $config->hasSelect() ? $config->getSelect() : null,
            'limit' => $config->hasLimit() ? $config->getLimit() : null,
            'filter' => $config->hasFilter() ? $config->getFilter() : null,
            'mode' => $config->getMode(),
            'mapping' => $config->getMode() === ConfigDefinition::MODE_MAPPING ? $config->getMapping() : null,
            'isIncremental' => $config->isIncremental(),
            'incrementalFetchingKey' =>
                $config->hasIncrementalFetchingKey() ? $config->getIncrementalFetchingKey() : null,
        ];
    }

    private function getDbNode(): array
    {
        return [
            '#connectionString' => 'DefaultEndpointsProtocol=https;...',
        ];
    }
}


================================================
File: /tests/phpunit/Data/upload.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/../../../vendor/autoload.php';

use Keboola\AzureStorageTableExtractor\Tests\Data\DataUploader;

$dataUploader = new DataUploader();
$dataUploader->uploadFromDir(__DIR__ . '/tables');
$dataUploader->uploadBigTable();


================================================
File: /tests/phpunit/Data/tables/types.csv
================================================
"PartitionKey","RowKey","name","age","height","credits","has_pet","date","bin"
"Europe","1","Edm.String:John","Edm.Int32:14","Edm.Int64:150","Edm.Double:1.23","Edm.Boolean:1","Edm.DateTime:2020-01-17T16:07:34","Edm.Binary:bin_blob1"
"Europe","3","Edm.String:Jacob","Edm.Int32:25","Edm.Int64:182","Edm.Double:0.45","Edm.Boolean:0","Edm.DateTime:2020-04-15T14:47:38","Edm.Binary:bin_blob2"
"Europe","2","Edm.String:Elizabeth","Edm.Int32:17","Edm.Int64:169","Edm.Double:18.93","Edm.Boolean:1","Edm.DateTime:2020-08-09T15:47:15","Edm.Binary:bin_blob3"
"Europe","4","Edm.String:Michael","Edm.Int32:27","Edm.Int64:173","Edm.Double:14.2","Edm.Boolean:1","Edm.DateTime:2020-07-17T07:03:57","Edm.Binary:bin_blob4"
"Europe","5","Edm.String:Oliver","Edm.Int32:37","Edm.Int64:175","Edm.Double:11.89","Edm.Boolean:0","Edm.DateTime:2020-04-01T08:22:49","Edm.Binary:bin_blob5"


================================================
File: /tests/phpunit/Data/tables/inc-fetching.csv
================================================
"PartitionKey","RowKey","name","string","int32","int64","double","datetime","boolean","guid","nullable"
"Europe","1","Edm.String:John","Edm.String:00001","Edm.Int32:50000","Edm.Int64:10","Edm.Double:1.2","Edm.DateTime:2014-09-15T23:14:25","Edm.Boolean:1","Edm.Guid:2e4437ce-7a91-40a8-997a-69d8d18afefb","Edm.Int32:1"
"Europe","20","Edm.String:Jacob","Edm.String:00020","Edm.Int32:4000","Edm.Int64:20","Edm.Double:20.5","Edm.DateTime:2016-09-15T23:14:25","Edm.Boolean:0","Edm.Guid:9af071f2-d1eb-448a-936b-16cbe370763a","Edm.Int32:2"
"Europe","300","Edm.String:Elizabeth","Edm.String:00300","Edm.Int32:300","Edm.Int64:100","Edm.Double:50000.8","Edm.DateTime:2015-09-15T23:14:25","Edm.Boolean:1","Edm.Guid:8f57927d-f437-4868-af1c-2b4706fa1d28","Edm.Int32:3"
"Europe","4000","Edm.String:Michael","Edm.String:04000","Edm.Int32:20","Edm.Int64:40","Edm.Double:4000.3","Edm.DateTime:2017-09-15T23:14:25","Edm.Boolean:0","Edm.Guid:066c93c2-c535-466a-ad90-c38f039e6287",""
"Europe","50000","Edm.String:Oliver","Edm.String:50000","Edm.Int32:1","Edm.Int64:30","Edm.Double:300.9","Edm.DateTime:2018-09-15T23:14:25","Edm.Boolean:1","Edm.Guid:be0f9a11-5c7c-4de8-9f04-cbc4a879ac31","Edm.Int32:5"


================================================
File: /tests/phpunit/Data/tables/types-mismatch.csv
================================================
"PartitionKey","RowKey","name","height"
"Europe","1","Edm.String:John","Edm.Int32:150"
"Europe","3","Edm.String:Jacob","Edm.Int64:182"
"Europe","2","Edm.String:Elizabeth","Edm.String:169"
"Europe","4","Edm.String:Michael",""
"Europe","5","Edm.String:Oliver","Edm.Int64:175"


================================================
File: /tests/phpunit/Data/tables/simple.csv
================================================
"PartitionKey","RowKey","name","age"
"Europe","1","Edm.String:John","Edm.Int32:14"
"Europe","2","Edm.String:Jacob","Edm.Int32:25"
"Europe","3","Edm.String:Elizabeth","Edm.Int32:17"
"Europe","4","Edm.String:Michael","Edm.Int32:27"


================================================
File: /tests/phpunit/Data/DataUploader.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\Tests\Data;

use Generator;
use DateTimeImmutable;
use SplFileInfo;
use RuntimeException;
use MicrosoftAzure\Storage\Table\Models\EdmType;
use MicrosoftAzure\Storage\Common\Exceptions\ServiceException;
use MicrosoftAzure\Storage\Table\Internal\ITable;
use MicrosoftAzure\Storage\Table\Models\Entity;
use MicrosoftAzure\Storage\Table\Models\BatchOperations;
use MicrosoftAzure\Storage\Table\TableRestProxy;
use Symfony\Component\Finder\Finder;
use Keboola\Csv\CsvReader;

class DataUploader
{
    private ITable $client;

    public function __construct()
    {
        $this->client = TableRestProxy::createTableService((string) getenv('CONNECTION_STRING'));
    }

    public function uploadFromDir(string $dir): void
    {
        $finder = new Finder();
        $csvFiles = $finder->files()->in($dir)->name('*.csv');
        foreach ($csvFiles as $csvFile) {
            $this->upload($csvFile);
        }
    }

    public function upload(SplFileInfo $csvFile): void
    {
        $tableName = (string) preg_replace('~\.csv$~', '', $csvFile->getFilename());
        $this->createTable($tableName);

        printf('Inserting rows from "%s" to table "%s" ... ', $csvFile->getFilename(), $tableName);
        $csvReader = new CsvReader($csvFile->getPathname());
        $csvIterator = new \NoRewindIterator($csvReader);
        $header = $csvReader->getHeader();
        $csvIterator->next(); // skip header

        $batch = new BatchOperations();
        foreach ($csvIterator as $row) {
            $batch->addInsertOrReplaceEntity($tableName, $this->rowToEntity($row, $header));
        }
        $this->client->batch($batch);
        echo "OK\n";
    }

    public function uploadBigTable(): void
    {
        $tableName = 'big-table';
        $this->createTable($tableName);

        printf('Inserting rows to "%s" ... ', $tableName);
        $entities = $this->generateEntities();
        $batchSize = 1000;
        $batchIndex = 1;
        while ($entities->valid()) {
            $batch = new BatchOperations();
            for ($i = 0; $i < $batchSize && $entities->valid(); $i++) {
                /** @var Entity $entity */
                $entity = $entities->current();
                $entity->setPartitionKey($entity->getPartitionKey() . '_' . $batchIndex);
                $batch->addInsertOrReplaceEntity($tableName, $entity);
                $entities->next();
            }
            $this->client->batch($batch);
            $batchIndex++;
            echo '+';
        }

        echo " OK\n";
    }

    private function createTable(string $tableName): void
    {
        printf('Creating table "%s" ... ', $tableName);
        try {
            $this->client->createTable($tableName);
            echo "OK\n";
        } catch (ServiceException $e) {
            if (strpos($e->getMessage(), 'already exists') !== false) {
                echo "EXISTS\n";
                return;
            }

            if (strpos($e->getMessage(), 'not supported for serverless accounts.') !== false) {
                throw new RuntimeException(sprintf(
                    'Database is running in the serverless mode. Cannot create table. ' .
                    'Please create table "%s" manually in the Azure Portal.',
                    $tableName
                ));
            }

            throw $e;
        }
    }

    private function rowToEntity(array &$row, array &$header): Entity
    {
        $entity = new Entity();
        foreach ($row as $index => $cell) {
            // Ignore empty cells
            if ($cell === '') {
                continue;
            }

            $key = $header[$index];
            if ($key === 'PartitionKey' || $key === 'RowKey') {
                $value = $cell;
                $type = null;
            } else {
                [$type, $value] = $this->explodeTypeAndValue($cell);
                // Convert datetime
                if ($type === EdmType::DATETIME) {
                    $date = $value;
                    $value = DateTimeImmutable::createFromFormat('Y-m-d\TH:i:s', $date);
                    if (!$value) {
                        throw new RuntimeException(sprintf('Invalid date: "%s".', $date));
                    }
                } elseif ($type === EdmType::BOOLEAN) {
                    $value = $value === '1';
                }
            }

            if ($key === 'PartitionKey') {
                $entity->setPartitionKey((string) $value);
            } elseif ($key === 'RowKey') {
                $entity->setRowKey((string) $value);
            } else {
                $entity->addProperty($key, $type, $value);
            }
        }

        return $entity;
    }

    /**
     * @return Generator|Entity[]
     */
    public function generateEntities(): Generator
    {
        for ($id = 1; $id <= 10000; $id++) {
            $entity = new Entity();
            $entity->setPartitionKey('my-partition');
            $entity->setRowKey((string) $id);
            $entity->addProperty('rowId', EdmType::STRING, sprintf('%020d', $id));
            $entity->addProperty('rand1', EdmType::STRING, (string) rand(1, 1000));
            $entity->addProperty('rand2', EdmType::INT32, rand(1, 1000));
            yield $entity;
        }
    }

    private function explodeTypeAndValue(string $cell): array
    {
        return explode(':', $cell, 2);
    }
}


================================================
File: /tests/phpunit/MaxTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\Tests;

use Keboola\AzureStorageTableExtractor\IncrementalFetchingHelper;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

class MaxTest extends TestCase
{
    /**
     * @dataProvider getData
     * @param mixed $value1
     * @param mixed $value2
     * @param mixed $expected
     */
    public function testMax($value1, $value2, $expected): void
    {
        Assert::assertSame($expected, IncrementalFetchingHelper::max($value1, $value2));
        Assert::assertSame($expected, IncrementalFetchingHelper::max($value2, $value1));
    }

    public function getData(): iterable
    {
        // value1, value2, max
        yield [-100, -100, -100];
        yield [-100.0, -100.0, -100.0];
        yield ['-100', '-100', '-100'];
        yield ['-100.0', '-100.0', '-100.0'];
        yield [-100, -99, -99];
        yield [-100.0, -99.0, -99.0];
        yield [-99.2, -99.1, -99.1];
        yield ['-100', '-99', '-99'];
        yield ['-100.0', '-99.0', '-99.0'];
        yield [0, 0, 0];
        yield [0.0, 0.0, 0.0];
        yield ['0', '0', '0'];
        yield ['0.0', '0.0', '0.0'];
        yield [0, 100, 100];
        yield [100.0, 100.0, 100.0];
        yield ['0', '100', '100'];
        yield ['0.0', '100.0', '100.0'];
        yield [100.1, 100.2, 100.2];
        yield ['100.1', '100.2', '100.2'];
        yield [9999, 10000, 10000];
        yield [9999.0, 10000.0, 10000.0];
        yield ['9999', '10000', '10000'];
        yield ['9999.0', '10000.0', '10000.0'];
        yield ['abc', 'abc', 'abc'];
        yield ['abc', 'Abc', 'abc'];
        yield ['abc', 'def', 'def'];
        yield ['abc', 'Def', 'abc'];
        yield ['dog', 'dog2', 'dog2'];
        yield ['dog2', 'dog3', 'dog3'];
        yield ['dog2', 'dog3', 'dog3'];
        yield ['2020-01-17T16:07:34', '2020-04-01T08:22:49', '2020-04-01T08:22:49'];
        yield ['2020-01-01T00:00:00', '2020-01-01T00:00:01', '2020-01-01T00:00:01'];
        yield ['2020-01-02T00:00:00', '2020-01-01T00:00:01', '2020-01-02T00:00:00'];
    }
}


================================================
File: /tests/phpunit/bootstrap.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/../../vendor/autoload.php';


================================================
File: /tests/functional/inc-fetching-datetime/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Exported "5" rows / "1" pages.
Incremental fetching: new state "datetime" = "2018-09-15T23:14:25.0000000Z" (Edm.DateTime)


================================================
File: /tests/functional/inc-fetching-datetime/expected/data/out/state.json
================================================
{"maxIncrementalKey":"datetime","maxIncrementalValue":"2018-09-15T23:14:25.0000000Z","maxIncrementalValueType":"Edm.DateTime"}


================================================
File: /tests/functional/inc-fetching-datetime/expected/data/out/tables/output.csv
================================================
"1","2014-09-15T23:14:25.0000000Z"
"20","2016-09-15T23:14:25.0000000Z"
"300","2015-09-15T23:14:25.0000000Z"
"4000","2017-09-15T23:14:25.0000000Z"
"50000","2018-09-15T23:14:25.0000000Z"


================================================
File: /tests/functional/inc-fetching-datetime/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "datetime"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-datetime/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "datetime",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "datetime": "datetime"
    }
  }
}


================================================
File: /tests/functional/test-connection-ok/expected-stdout
================================================
{"success":true}


================================================
File: /tests/functional/test-connection-ok/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    }
  }
}


================================================
File: /tests/functional/inc-fetching-datetime-state/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Incremental fetching: loading rows where "datetime" >= "2016-09-15T23:14:25.0000000Z" (Edm.DateTime)
Exported "3" rows / "1" pages.
Incremental fetching: new state "datetime" = "2018-09-15T23:14:25.0000000Z" (Edm.DateTime)


================================================
File: /tests/functional/inc-fetching-datetime-state/expected/data/out/state.json
================================================
{"maxIncrementalKey":"datetime","maxIncrementalValue":"2018-09-15T23:14:25.0000000Z","maxIncrementalValueType":"Edm.DateTime"}


================================================
File: /tests/functional/inc-fetching-datetime-state/expected/data/out/tables/output.csv
================================================
"20","2016-09-15T23:14:25.0000000Z"
"4000","2017-09-15T23:14:25.0000000Z"
"50000","2018-09-15T23:14:25.0000000Z"


================================================
File: /tests/functional/inc-fetching-datetime-state/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "datetime"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-datetime-state/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "datetime",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "datetime": "datetime"
    }
  }
}


================================================
File: /tests/functional/inc-fetching-datetime-state/source/data/in/state.json
================================================
{"maxIncrementalKey":"datetime","maxIncrementalValue":"2016-09-15T23:14:25.0000000Z","maxIncrementalValueType":"Edm.DateTime"}


================================================
File: /tests/functional/inc-fetching-int32-state/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Incremental fetching: loading rows where "int32" >= "4000" (Edm.Int32)
Exported "2" rows / "1" pages.
Incremental fetching: new state "int32" = "50000" (Edm.Int32)


================================================
File: /tests/functional/inc-fetching-int32-state/expected/data/out/state.json
================================================
{"maxIncrementalKey":"int32","maxIncrementalValue":50000,"maxIncrementalValueType":"Edm.Int32"}


================================================
File: /tests/functional/inc-fetching-int32-state/expected/data/out/tables/output.csv
================================================
"1","50000"
"20","4000"


================================================
File: /tests/functional/inc-fetching-int32-state/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "int32"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-int32-state/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "int32",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "int32": "int32"
    }
  }
}


================================================
File: /tests/functional/inc-fetching-int32-state/source/data/in/state.json
================================================
{"maxIncrementalKey":"int32","maxIncrementalValue":4000,"maxIncrementalValueType":"Edm.Int32"}


================================================
File: /tests/functional/mode-raw-filter/expected-stdout
================================================
Exporting table "simple" to "output" ...
Exported "2" rows / "1" pages.


================================================
File: /tests/functional/mode-raw-filter/expected/data/out/tables/output.csv
================================================
"Europe","2","{""PartitionKey"":""Europe"",""RowKey"":""2"",""name"":""Jacob"",""age"":25,""Timestamp"":""***""}"
"Europe","4","{""PartitionKey"":""Europe"",""RowKey"":""4"",""name"":""Michael"",""age"":27,""Timestamp"":""***""}"


================================================
File: /tests/functional/mode-raw-filter/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "PartitionKey",
        "RowKey"
    ],
    "columns": [
        "PartitionKey",
        "RowKey",
        "data"
    ],
    "incremental": false
}


================================================
File: /tests/functional/mode-raw-filter/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "simple",
    "output": "output",
    "mode": "raw",
    "filter": "RowKey ge '2' and age gt 17"
  }
}


================================================
File: /tests/functional/inc-fetching-int64/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Exported "5" rows / "1" pages.
Incremental fetching: new state "int64" = "100" (Edm.Int64)


================================================
File: /tests/functional/inc-fetching-int64/expected/data/out/state.json
================================================
{"maxIncrementalKey":"int64","maxIncrementalValue":"100","maxIncrementalValueType":"Edm.Int64"}


================================================
File: /tests/functional/inc-fetching-int64/expected/data/out/tables/output.csv
================================================
"1","10"
"20","20"
"300","100"
"4000","40"
"50000","30"


================================================
File: /tests/functional/inc-fetching-int64/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "int64"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-int64/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "int64",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "int64": "int64"
    }
  }
}


================================================
File: /tests/functional/inc-fetching-mode-raw/expected-stdout
================================================
Exporting table "types" to "output" ...
Exported "5" rows / "1" pages.
Incremental fetching: new state "height" = "182" (Edm.Int64)


================================================
File: /tests/functional/inc-fetching-mode-raw/expected/data/out/state.json
================================================
{"maxIncrementalKey":"height","maxIncrementalValue":"182","maxIncrementalValueType":"Edm.Int64"}


================================================
File: /tests/functional/inc-fetching-mode-raw/expected/data/out/tables/output.csv
================================================
"Europe","1","{""PartitionKey"":""Europe"",""RowKey"":""1"",""name"":""John"",""age"":14,""height"":""150"",""credits"":1.23,""has_pet"":true,""date"":""***"",""bin"":""YmluX2Jsb2Ix"",""Timestamp"":""***""}"
"Europe","3","{""PartitionKey"":""Europe"",""RowKey"":""3"",""name"":""Jacob"",""age"":25,""height"":""182"",""credits"":0.45,""has_pet"":false,""date"":""***"",""bin"":""YmluX2Jsb2Iy"",""Timestamp"":""***""}"
"Europe","2","{""PartitionKey"":""Europe"",""RowKey"":""2"",""name"":""Elizabeth"",""age"":17,""height"":""169"",""credits"":18.93,""has_pet"":true,""date"":""***"",""bin"":""YmluX2Jsb2Iz"",""Timestamp"":""***""}"
"Europe","4","{""PartitionKey"":""Europe"",""RowKey"":""4"",""name"":""Michael"",""age"":27,""height"":""173"",""credits"":14.2,""has_pet"":true,""date"":""***"",""bin"":""YmluX2Jsb2I0"",""Timestamp"":""***""}"
"Europe","5","{""PartitionKey"":""Europe"",""RowKey"":""5"",""name"":""Oliver"",""age"":37,""height"":""175"",""credits"":11.89,""has_pet"":false,""date"":""***"",""bin"":""YmluX2Jsb2I1"",""Timestamp"":""***""}"


================================================
File: /tests/functional/inc-fetching-mode-raw/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "PartitionKey",
        "RowKey"
    ],
    "columns": [
        "PartitionKey",
        "RowKey",
        "data"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-mode-raw/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "types",
    "output": "output",
    "mode": "raw",
    "incremental": true,
    "incrementalFetchingKey": "height"
  }
}


================================================
File: /tests/functional/inc-fetching-string/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Exported "5" rows / "1" pages.
Incremental fetching: new state "string" = "50000" (Edm.String)


================================================
File: /tests/functional/inc-fetching-string/expected/data/out/state.json
================================================
{"maxIncrementalKey":"string","maxIncrementalValue":"50000","maxIncrementalValueType":"Edm.String"}


================================================
File: /tests/functional/inc-fetching-string/expected/data/out/tables/output.csv
================================================
"1","00001"
"20","00020"
"300","00300"
"4000","04000"
"50000","50000"


================================================
File: /tests/functional/inc-fetching-string/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "string"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-string/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "string",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "string": "string"
    }
  }
}


================================================
File: /tests/functional/empty-app/expected-stderr
================================================
%AThe child node "parameters" at path "root" must be configured.%A


================================================
File: /tests/functional/empty-app/source/data/config.json
================================================
{
}


================================================
File: /tests/functional/empty-app/expected-code
================================================
1


================================================
File: /tests/functional/mode-mapping-simple/expected-stdout
================================================
Exporting table "simple" to "output" ...
Exported "4" rows / "1" pages.


================================================
File: /tests/functional/mode-mapping-simple/expected/data/out/tables/output.csv
================================================
"1","John","14",""
"2","Jacob","25",""
"3","Elizabeth","17",""
"4","Michael","27",""


================================================
File: /tests/functional/mode-mapping-simple/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [],
    "columns": [
        "id",
        "name",
        "age",
        "missing"
    ],
    "incremental": false
}


================================================
File: /tests/functional/mode-mapping-simple/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "simple",
    "output": "output",
    "mode": "mapping",
    "mapping": {
      "RowKey": "id",
      "name": "name",
      "age": "age",
      "missing": "missing"
    }
  }
}


================================================
File: /tests/functional/mode-raw-select/expected-stdout
================================================
Exporting table "simple" to "output" ...
Exported "4" rows / "1" pages.


================================================
File: /tests/functional/mode-raw-select/expected/data/out/tables/output.csv
================================================
"Europe","1","{""name"":""John"",""age"":14,""PartitionKey"":""Europe"",""RowKey"":""1""}"
"Europe","2","{""name"":""Jacob"",""age"":25,""PartitionKey"":""Europe"",""RowKey"":""2""}"
"Europe","3","{""name"":""Elizabeth"",""age"":17,""PartitionKey"":""Europe"",""RowKey"":""3""}"
"Europe","4","{""name"":""Michael"",""age"":27,""PartitionKey"":""Europe"",""RowKey"":""4""}"


================================================
File: /tests/functional/mode-raw-select/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "PartitionKey",
        "RowKey"
    ],
    "columns": [
        "PartitionKey",
        "RowKey",
        "data"
    ],
    "incremental": false
}


================================================
File: /tests/functional/mode-raw-select/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "simple",
    "output": "output",
    "mode": "raw",
    "select": "PartitionKey, RowKey, name, age"
  }
}


================================================
File: /tests/functional/error-bad-connection-string-2/expected-stderr
================================================
Fail: Code: 403 Value: Forbidden details (if any):%A


================================================
File: /tests/functional/error-bad-connection-string-2/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "db": {
      "#connectionString": "DefaultEndpointsProtocol=https;AccountName=ex-cosmosdb-table-api-dev-ci;AccountKey=INVALID;TableEndpoint=https://ex-cosmosdb-table-api-dev-ci.table.cosmos.azure.com:443/;"
    }
  }
}


================================================
File: /tests/functional/error-bad-connection-string-2/expected-code
================================================
1


================================================
File: /tests/functional/inc-fetching-string-state/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Incremental fetching: loading rows where "string" >= "00300" (Edm.String)
Exported "3" rows / "1" pages.
Incremental fetching: new state "string" = "50000" (Edm.String)


================================================
File: /tests/functional/inc-fetching-string-state/expected/data/out/state.json
================================================
{"maxIncrementalKey":"string","maxIncrementalValue":"50000","maxIncrementalValueType":"Edm.String"}


================================================
File: /tests/functional/inc-fetching-string-state/expected/data/out/tables/output.csv
================================================
"300","00300"
"4000","04000"
"50000","50000"


================================================
File: /tests/functional/inc-fetching-string-state/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "string"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-string-state/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "string",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "string": "string"
    }
  }
}


================================================
File: /tests/functional/inc-fetching-string-state/source/data/in/state.json
================================================
{"maxIncrementalKey":"string","maxIncrementalValue":"00300","maxIncrementalValueType":"Edm.String"}


================================================
File: /tests/functional/mode-raw-types/expected-stdout
================================================
Exporting table "types" to "output" ...
Exported "5" rows / "1" pages.


================================================
File: /tests/functional/mode-raw-types/expected/data/out/tables/output.csv
================================================
"Europe","1","{""PartitionKey"":""Europe"",""RowKey"":""1"",""name"":""John"",""age"":14,""height"":""150"",""credits"":1.23,""has_pet"":true,""date"":""***"",""bin"":""YmluX2Jsb2Ix"",""Timestamp"":""***""}"
"Europe","3","{""PartitionKey"":""Europe"",""RowKey"":""3"",""name"":""Jacob"",""age"":25,""height"":""182"",""credits"":0.45,""has_pet"":false,""date"":""***"",""bin"":""YmluX2Jsb2Iy"",""Timestamp"":""***""}"
"Europe","2","{""PartitionKey"":""Europe"",""RowKey"":""2"",""name"":""Elizabeth"",""age"":17,""height"":""169"",""credits"":18.93,""has_pet"":true,""date"":""***"",""bin"":""YmluX2Jsb2Iz"",""Timestamp"":""***""}"
"Europe","4","{""PartitionKey"":""Europe"",""RowKey"":""4"",""name"":""Michael"",""age"":27,""height"":""173"",""credits"":14.2,""has_pet"":true,""date"":""***"",""bin"":""YmluX2Jsb2I0"",""Timestamp"":""***""}"
"Europe","5","{""PartitionKey"":""Europe"",""RowKey"":""5"",""name"":""Oliver"",""age"":37,""height"":""175"",""credits"":11.89,""has_pet"":false,""date"":""***"",""bin"":""YmluX2Jsb2I1"",""Timestamp"":""***""}"


================================================
File: /tests/functional/mode-raw-types/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "PartitionKey",
        "RowKey"
    ],
    "columns": [
        "PartitionKey",
        "RowKey",
        "data"
    ],
    "incremental": false
}


================================================
File: /tests/functional/mode-raw-types/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "types",
    "output": "output",
    "mode": "raw"
  }
}


================================================
File: /tests/functional/inc-fetching-double/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Exported "5" rows / "1" pages.
Incremental fetching: new state "double" = "50000.8" (Edm.Double)


================================================
File: /tests/functional/inc-fetching-double/expected/data/out/state.json
================================================
{"maxIncrementalKey":"double","maxIncrementalValue":50000.8,"maxIncrementalValueType":"Edm.Double"}


================================================
File: /tests/functional/inc-fetching-double/expected/data/out/tables/output.csv
================================================
"1","1.2"
"20","20.5"
"300","50000.8"
"4000","4000.3"
"50000","300.9"


================================================
File: /tests/functional/inc-fetching-double/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "double"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-double/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "double",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "double": "double"
    }
  }
}


================================================
File: /tests/functional/inc-fetching-guid-state/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Incremental fetching: loading rows where "guid" >= "9af071f2-d1eb-448a-936b-16cbe370763a" (Edm.Guid)
Exported "2" rows / "1" pages.
Incremental fetching: new state "guid" = "be0f9a11-5c7c-4de8-9f04-cbc4a879ac31" (Edm.Guid)


================================================
File: /tests/functional/inc-fetching-guid-state/expected/data/out/state.json
================================================
{"maxIncrementalKey":"guid","maxIncrementalValue":"be0f9a11-5c7c-4de8-9f04-cbc4a879ac31","maxIncrementalValueType":"Edm.Guid"}


================================================
File: /tests/functional/inc-fetching-guid-state/expected/data/out/tables/output.csv
================================================
"20","9af071f2-d1eb-448a-936b-16cbe370763a"
"50000","be0f9a11-5c7c-4de8-9f04-cbc4a879ac31"


================================================
File: /tests/functional/inc-fetching-guid-state/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "guid"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-guid-state/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "guid",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "guid": "guid"
    }
  }
}


================================================
File: /tests/functional/inc-fetching-guid-state/source/data/in/state.json
================================================
{"maxIncrementalKey":"guid","maxIncrementalValue":"9af071f2-d1eb-448a-936b-16cbe370763a","maxIncrementalValueType":"Edm.Guid"}


================================================
File: /tests/functional/error-bad-connection-string-1/expected-stderr
================================================
Connection error: The provided connection string '*****' does not have complete configuration settings.


================================================
File: /tests/functional/error-bad-connection-string-1/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "db": {
      "#connectionString": "DefaultEndpointsProtocol=https;AccountName=bad"
    }
  }
}


================================================
File: /tests/functional/error-bad-connection-string-1/expected-code
================================================
1


================================================
File: /tests/functional/inc-fetching-error-missing-key/expected-stdout
================================================
Exporting table "simple" to "output" ...


================================================
File: /tests/functional/inc-fetching-error-missing-key/expected-stderr
================================================
Missing incremental fetching key "invalid" in the row "1".


================================================
File: /tests/functional/inc-fetching-error-missing-key/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "simple",
    "output": "output",
    "mode": "mapping",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "invalid": "invalid"
    },
    "incremental": true,
    "incrementalFetchingKey": "invalid"
  }
}


================================================
File: /tests/functional/inc-fetching-error-missing-key/expected-code
================================================
1


================================================
File: /tests/functional/inc-fetching-error-null/expected-stderr
================================================
Missing incremental fetching key "nullable" in the row "4".


================================================
File: /tests/functional/inc-fetching-error-null/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "nullable": "nullable"
    },
    "incremental": true,
    "incrementalFetchingKey": "nullable"
  }
}


================================================
File: /tests/functional/inc-fetching-error-null/expected-code
================================================
1


================================================
File: /tests/functional/mode-raw-filter-limit-select/expected-stdout
================================================
Exporting table "simple" to "output" ...
Exported "2" rows / "1" pages.


================================================
File: /tests/functional/mode-raw-filter-limit-select/expected/data/out/tables/output.csv
================================================
"Europe","1","{""name"":""John"",""age"":14,""PartitionKey"":""Europe"",""RowKey"":""1""}"
"Europe","2","{""name"":""Jacob"",""age"":25,""PartitionKey"":""Europe"",""RowKey"":""2""}"


================================================
File: /tests/functional/mode-raw-filter-limit-select/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "PartitionKey",
        "RowKey"
    ],
    "columns": [
        "PartitionKey",
        "RowKey",
        "data"
    ],
    "incremental": false
}


================================================
File: /tests/functional/mode-raw-filter-limit-select/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "simple",
    "output": "output",
    "mode": "raw",
    "filter": "RowKey ge '1' and age gt 1",
    "limit": 2,
    "select": "PartitionKey, RowKey, name, age"
  }
}


================================================
File: /tests/functional/mode-raw-select-missing-partition-key/expected-stdout
================================================
Exporting table "simple" to "output" ...


================================================
File: /tests/functional/mode-raw-select-missing-partition-key/expected-stderr
================================================
Missing "PartitionKey" key in the query results. Please modify the "select" value in the configuration or use the "mapping" mode instead of the "raw".


================================================
File: /tests/functional/mode-raw-select-missing-partition-key/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "simple",
    "output": "output",
    "mode": "raw",
    "select": "RowKey, name, age"
  }
}


================================================
File: /tests/functional/mode-raw-select-missing-partition-key/expected-code
================================================
1


================================================
File: /tests/functional/inc-fetching-guid/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Exported "5" rows / "1" pages.
Incremental fetching: new state "guid" = "be0f9a11-5c7c-4de8-9f04-cbc4a879ac31" (Edm.Guid)


================================================
File: /tests/functional/inc-fetching-guid/expected/data/out/state.json
================================================
{"maxIncrementalKey":"guid","maxIncrementalValue":"be0f9a11-5c7c-4de8-9f04-cbc4a879ac31","maxIncrementalValueType":"Edm.Guid"}


================================================
File: /tests/functional/inc-fetching-guid/expected/data/out/tables/output.csv
================================================
"1","2e4437ce-7a91-40a8-997a-69d8d18afefb"
"20","9af071f2-d1eb-448a-936b-16cbe370763a"
"300","8f57927d-f437-4868-af1c-2b4706fa1d28"
"4000","066c93c2-c535-466a-ad90-c38f039e6287"
"50000","be0f9a11-5c7c-4de8-9f04-cbc4a879ac31"


================================================
File: /tests/functional/inc-fetching-guid/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "guid"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-guid/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "guid",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "guid": "guid"
    }
  }
}


================================================
File: /tests/functional/inc-fetching-boolean/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...


================================================
File: /tests/functional/inc-fetching-boolean/expected-stderr
================================================
Unexpected type "Edm.Boolean" of the incremental fetching "boolean" key. Allowed types "Edm.String", "Edm.Int32", "Edm.Int64", "Edm.DateTime", "Edm.Double", "Edm.Guid".


================================================
File: /tests/functional/inc-fetching-boolean/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "boolean",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "boolean": "boolean"
    }
  }
}


================================================
File: /tests/functional/inc-fetching-boolean/expected-code
================================================
1


================================================
File: /tests/functional/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureStorageTableExtractor\FunctionalTests;

use Throwable;
use Keboola\Component\JsonHelper;
use Keboola\DatadirTests\DatadirTestCase;
use Keboola\DatadirTests\DatadirTestSpecificationInterface;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;

class DatadirTest extends DatadirTestCase
{
    protected function assertMatchesSpecification(
        DatadirTestSpecificationInterface $specification,
        Process $runProcess,
        string $tempDatadir
    ): void {
        // Remove timestamps from output.csv files (in raw mode)
        $finder = new Finder();
        foreach ($finder->files()->in($tempDatadir . '/out/tables')->name('*.csv') as $file) {
            $content = (string) file_get_contents($file->getPathname());
            $content = (string) preg_replace(
                '~""\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d+Z""~',
                '""***""',
                $content
            );
            file_put_contents($file->getPathname(), $content);
        }

        // Pretty print manifests
        $finder = new Finder();
        foreach ($finder->files()->in($tempDatadir . '/out/tables')->name('*.csv.manifest') as $file) {
            $content = (string) file_get_contents($file->getPathname());
            $json = JsonHelper::decode($content);
            file_put_contents($file->getPathname(), JsonHelper::encode($json, true));
        }

        parent::assertMatchesSpecification($specification, $runProcess, $tempDatadir);
    }
}


================================================
File: /tests/functional/inc-fetching-error-string-length-mismatch/expected-stderr
================================================
Warning: Key "RowKey" - type "Edm.String" is used for incremental fetching. For string type, all values must be the same length, otherwise incremental fetching fails.
Unexpected value: Key "RowKey" - type "Edm.String" is used for incremental fetching. For string type, all values must be the same length. This condition is not met, found "1" (length=1) and "20" (length=2). Please use the same string lengths or use a key with a different type: "Edm.Int32", "Edm.Int64", "Edm.DateTime", "Edm.Double", "Edm.Guid".


================================================
File: /tests/functional/inc-fetching-error-string-length-mismatch/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "RowKey",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      }
    }
  }
}


================================================
File: /tests/functional/inc-fetching-error-string-length-mismatch/expected-code
================================================
1


================================================
File: /tests/functional/mode-raw-simple/expected-stdout
================================================
Exporting table "simple" to "output" ...
Exported "4" rows / "1" pages.


================================================
File: /tests/functional/mode-raw-simple/expected/data/out/tables/output.csv
================================================
"Europe","1","{""PartitionKey"":""Europe"",""RowKey"":""1"",""name"":""John"",""age"":14,""Timestamp"":""***""}"
"Europe","2","{""PartitionKey"":""Europe"",""RowKey"":""2"",""name"":""Jacob"",""age"":25,""Timestamp"":""***""}"
"Europe","3","{""PartitionKey"":""Europe"",""RowKey"":""3"",""name"":""Elizabeth"",""age"":17,""Timestamp"":""***""}"
"Europe","4","{""PartitionKey"":""Europe"",""RowKey"":""4"",""name"":""Michael"",""age"":27,""Timestamp"":""***""}"


================================================
File: /tests/functional/mode-raw-simple/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "PartitionKey",
        "RowKey"
    ],
    "columns": [
        "PartitionKey",
        "RowKey",
        "data"
    ],
    "incremental": false
}


================================================
File: /tests/functional/mode-raw-simple/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "simple",
    "output": "output",
    "mode": "raw"
  }
}


================================================
File: /tests/functional/inc-fetching-mode-mapping/expected-stdout
================================================
Exporting table "simple" to "output" ...
Exported "4" rows / "1" pages.
Incremental fetching: new state "RowKey" = "4" (Edm.String)


================================================
File: /tests/functional/inc-fetching-mode-mapping/expected/data/out/state.json
================================================
{"maxIncrementalKey":"RowKey","maxIncrementalValue":"4","maxIncrementalValueType":"Edm.String"}


================================================
File: /tests/functional/inc-fetching-mode-mapping/expected/data/out/tables/output.csv
================================================
"1","John","14",""
"2","Jacob","25",""
"3","Elizabeth","17",""
"4","Michael","27",""


================================================
File: /tests/functional/inc-fetching-mode-mapping/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [],
    "columns": [
        "id",
        "name",
        "age",
        "missing"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-mode-mapping/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "simple",
    "output": "output",
    "mode": "mapping",
    "mapping": {
      "RowKey": "id",
      "name": "name",
      "age": "age",
      "missing": "missing"
    },
    "incremental": true,
    "incrementalFetchingKey": "RowKey"
  }
}


================================================
File: /tests/functional/inc-fetching-double-state/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Incremental fetching: loading rows where "double" >= "20.5" (Edm.Double)
Exported "4" rows / "1" pages.
Incremental fetching: new state "double" = "50000.8" (Edm.Double)


================================================
File: /tests/functional/inc-fetching-double-state/expected/data/out/state.json
================================================
{"maxIncrementalKey":"double","maxIncrementalValue":50000.8,"maxIncrementalValueType":"Edm.Double"}


================================================
File: /tests/functional/inc-fetching-double-state/expected/data/out/tables/output.csv
================================================
"20","20.5"
"300","50000.8"
"4000","4000.3"
"50000","300.9"


================================================
File: /tests/functional/inc-fetching-double-state/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "double"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-double-state/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "double",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "double": "double"
    }
  }
}


================================================
File: /tests/functional/inc-fetching-double-state/source/data/in/state.json
================================================
{"maxIncrementalKey":"double","maxIncrementalValue":20.5,"maxIncrementalValueType":"Edm.Double"}


================================================
File: /tests/functional/error-retry/expected-stdout
================================================
Exporting table "table" to "output" ...
Fail: Code: 404 Value: Not Found details (if any): %A Retrying... [1x]
Fail: Code: 404 Value: Not Found details (if any): %A Retrying... [2x]


================================================
File: /tests/functional/error-retry/expected-stderr
================================================
Export of the table "table" failed: Fail: Code: 404 Value: Not Found details (if any): %A


================================================
File: /tests/functional/error-retry/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "table",
    "output": "output",
    "mode": "raw",
    "maxTries": 3
  }
}


================================================
File: /tests/functional/error-retry/expected-code
================================================
1


================================================
File: /tests/functional/mode-raw-limit/expected-stdout
================================================
Exporting table "simple" to "output" ...
Exported "3" rows / "1" pages.


================================================
File: /tests/functional/mode-raw-limit/expected/data/out/tables/output.csv
================================================
"Europe","1","{""PartitionKey"":""Europe"",""RowKey"":""1"",""name"":""John"",""age"":14,""Timestamp"":""***""}"
"Europe","2","{""PartitionKey"":""Europe"",""RowKey"":""2"",""name"":""Jacob"",""age"":25,""Timestamp"":""***""}"
"Europe","3","{""PartitionKey"":""Europe"",""RowKey"":""3"",""name"":""Elizabeth"",""age"":17,""Timestamp"":""***""}"


================================================
File: /tests/functional/mode-raw-limit/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "PartitionKey",
        "RowKey"
    ],
    "columns": [
        "PartitionKey",
        "RowKey",
        "data"
    ],
    "incremental": false
}


================================================
File: /tests/functional/mode-raw-limit/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "simple",
    "output": "output",
    "mode": "raw",
    "limit": 3
  }
}


================================================
File: /tests/functional/mode-raw-select-missing-row-key/expected-stdout
================================================
Exporting table "simple" to "output" ...


================================================
File: /tests/functional/mode-raw-select-missing-row-key/expected-stderr
================================================
Missing "RowKey" key in the query results. Please modify the "select" value in the configuration or use the "mapping" mode instead of the "raw".


================================================
File: /tests/functional/mode-raw-select-missing-row-key/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "simple",
    "output": "output",
    "mode": "raw",
    "select": "PartitionKey, name, age"
  }
}


================================================
File: /tests/functional/mode-raw-select-missing-row-key/expected-code
================================================
1


================================================
File: /tests/functional/inc-fetching-error-type-mismatch/expected-stderr
================================================
Incremental column type mismatch: "Edm.Int64" and "Edm.String" types found.


================================================
File: /tests/functional/inc-fetching-error-type-mismatch/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "types-mismatch",
    "output": "output",
    "mode": "mapping",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "height": "height"
    },
    "incremental": true,
    "incrementalFetchingKey": "height"
  }
}


================================================
File: /tests/functional/inc-fetching-error-type-mismatch/source/data/in/state.json
================================================
{"maxIncrementalValue":"173","maxIncrementalValueType":"Edm.Int64"}


================================================
File: /tests/functional/inc-fetching-error-type-mismatch/expected-code
================================================
1


================================================
File: /tests/functional/inc-fetching-int64-state/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Incremental fetching: loading rows where "int64" >= "30" (Edm.Int64)
Exported "3" rows / "1" pages.
Incremental fetching: new state "int64" = "100" (Edm.Int64)


================================================
File: /tests/functional/inc-fetching-int64-state/expected/data/out/state.json
================================================
{"maxIncrementalKey":"int64","maxIncrementalValue":"100","maxIncrementalValueType":"Edm.Int64"}


================================================
File: /tests/functional/inc-fetching-int64-state/expected/data/out/tables/output.csv
================================================
"300","100"
"4000","40"
"50000","30"


================================================
File: /tests/functional/inc-fetching-int64-state/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "int64"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-int64-state/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "int64",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "int64": "int64"
    }
  }
}


================================================
File: /tests/functional/inc-fetching-int64-state/source/data/in/state.json
================================================
{"maxIncrementalKey":"int64","maxIncrementalValue":"30","maxIncrementalValueType":"Edm.Int64"}


================================================
File: /tests/functional/inc-fetching-int32/expected-stdout
================================================
Exporting table "inc-fetching" to "output" ...
Exported "5" rows / "1" pages.
Incremental fetching: new state "int32" = "50000" (Edm.Int32)


================================================
File: /tests/functional/inc-fetching-int32/expected/data/out/state.json
================================================
{"maxIncrementalKey":"int32","maxIncrementalValue":50000,"maxIncrementalValueType":"Edm.Int32"}


================================================
File: /tests/functional/inc-fetching-int32/expected/data/out/tables/output.csv
================================================
"1","50000"
"20","4000"
"300","300"
"4000","20"
"50000","1"


================================================
File: /tests/functional/inc-fetching-int32/expected/data/out/tables/output.csv.manifest
================================================
{
    "primary_key": [
        "id"
    ],
    "columns": [
        "id",
        "int32"
    ],
    "incremental": true
}


================================================
File: /tests/functional/inc-fetching-int32/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "#connectionString": "%env(string:CONNECTION_STRING)%"
    },
    "table": "inc-fetching",
    "output": "output",
    "mode": "mapping",
    "incremental": true,
    "incrementalFetchingKey": "int32",
    "mapping": {
      "RowKey": {
        "type": "column",
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "int32": "int32"
    }
  }
}


================================================
File: /phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         bootstrap="tests/phpunit/bootstrap.php">
    <testsuite name="Main Test Suite">
        <directory>tests/phpunit</directory>
    </testsuite>
</phpunit>


================================================
File: /composer.json
================================================
{
    "name": "keboola/ex-azure-storage-table",
    "description": "Azure Table storage / Azure Cosmos DB Table API extractor.",
    "license": "MIT",
    "require": {
        "php": "^7.4",
        "ext-json": "*",
        "keboola/common-exceptions": "^1.1",
        "keboola/csv": "^2.2",
        "keboola/csvmap": "^1.1",
        "keboola/php-component": "^8.1",
        "keboola/retry": "^0.5.0",
        "microsoft/azure-storage-table": "^1.1"
    },
    "require-dev": {
        "keboola/coding-standard": ">=7.0.2",
        "keboola/datadir-tests": "^5.2",
        "keboola/php-temp": "^2.0",
        "php-parallel-lint/php-parallel-lint": "^1.2",
        "phpstan/phpstan": "^0.12.14",
        "phpunit/phpunit": "^9.0",
        "symfony/finder": "^5.2",
        "symfony/process": "^5.0"
    },
    "autoload": {
        "psr-4": {
            "Keboola\\AzureStorageTableExtractor\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Keboola\\AzureStorageTableExtractor\\Tests\\": "tests/phpunit/",
            "Keboola\\AzureStorageTableExtractor\\FunctionalTests\\": "tests/functional/"
        }
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests-datadir": "phpunit tests/functional",
        "tests": [
            "@tests-phpunit",
            "@tests-datadir"
        ],

        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "build": [
            "@phplint",
            "@phpcs",
            "@phpstan",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true
    }
}


================================================
File: /.dockerignore
================================================
vendor/


================================================
File: /Dockerfile
================================================
FROM php:7.4-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update && apt-get install -y --no-install-recommends \
        git \
        locales \
        unzip \
        libcurl4-openssl-dev \
        libxml2-dev \
        libxslt-dev \
	&& rm -r /var/lib/apt/lists/* \
	&& sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
	&& locale-gen \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# Install curl extension
RUN docker-php-ext-install curl

# Install xsl extension
RUN docker-php-ext-install xsl

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/

# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD ["php", "/code/src/run.php"]


================================================
File: /README.md
================================================
# Azure Storage Table Extractor

[![Build Status](https://travis-ci.com/keboola/ex-azure-storage-table.svg?branch=master)](https://travis-ci.com/keboola/ex-azure-storage-table)

Extracts data  from
- [Azure Cosmos DB Table API](https://docs.microsoft.com/en-us/azure/cosmos-db/table-introduction)
- [Azure Table storage](https://docs.microsoft.com/en-us/azure/cosmos-db/table-support)

... to the [Keboola Connection](https://www.keboola.com).

## Configuration

The configuration `config.json` contains following properties in `parameters` key: 
- `db` - object (required): Configuration of the connection.
    - `#connectionString` - string (required): Connection string to Azure Table storage or Azure Cosmos DB Table API.
- `table` - string (required): Name of the input table in the API.
- `output` - string (required): Name of the output CSV file.
- `maxTries`- integer (optional): Number of the max retries if an error occurred. Default `5`.
- `incremental` - boolean (optional): Enables [Incremental Loading](https://help.keboola.com/storage/tables/#incremental-loading). Default `false`.
- `incrementalFetchingKey` - string (optional): Name of the key for [Incremental Fetching](https://help.keboola.com/components/extractors/database/#incremental-fetching).
- `mode` - enum (optional)
    - `mapping` (default) - Rows are exported using specified `mapping`, [read more](https://github.com/keboola/php-csvmap).
    - `raw` - Rows are exported as plain JSON strings. CSV file will contain `PartitionKey`, `RowKey` and `data` columns.
- `mapping` - string - required for `mode` = `mapping`, [read more](https://github.com/keboola/php-csvmap).

- By default, extractor exports all rows and columns. It can be adjusted using these settings.
    - `select` - string (optional), eg. `PartitionKey, RowKey, Name, Age`.
       - For `raw` mode must be `PartitionKey` and `RowKey` fields present in the query results.
    - `limit` - integer (optional), maximum number of the exported rows, eg. `500`.   
    - `filter` - string (optional), [OData query $filter](https://docs.microsoft.com/en-us/azure/search/search-query-odata-filter), eg. `RowKey ge '2' and age gt 17`


## Actions

Read more about actions [in KBC documentation](https://developers.keboola.com/extend/common-interface/actions/).

### Test Connection

Action `testConnection` tests the connection to the server.

The `parameters.db` node must be specified in the configuration.

## Development
 
Clone this repository and init the workspace with following command:

```
git clone https://github.com/keboola/ex-azure-storage-table
cd ex-azure-storage-table
docker-compose build
docker-compose run --rm dev composer install --no-scripts
```


Create `.env` file with following variables:
```env
CONNECTION_STRING="DefaultEndpointsProtocol=https;AccountName=..."
```


Run the test suite using this command:

```
docker-compose run --rm dev composer tests
```
 
# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


