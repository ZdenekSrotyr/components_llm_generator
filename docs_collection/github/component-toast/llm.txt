Directory structure:
└── keboola-component-toast/
    ├── .python-version
    ├── flake8.cfg
    ├── deploy.sh
    ├── docker-compose.yml
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   ├── parser_mapping.json
    │   └── client.py
    ├── tests/
    │   ├── test_component.py
    │   └── __init__.py
    ├── requirements.in
    ├── component_config/
    │   ├── logger
    │   ├── component_long_description.md
    │   ├── configuration_description.md
    │   ├── component_short_description.md
    │   ├── loggerConfiguration.json
    │   ├── configSchema.json
    │   ├── configRowSchema.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── tables/
    │       │   │   ├── test.csv
    │       │   │   └── test.csv.manifest
    │       │   └── files/
    │       │       └── order1.xml
    │       └── out/
    │           ├── tables/
    │           │   └── test.csv
    │           └── files/
    │               └── order1.xml
    ├── scripts/
    │   ├── update_dev_portal_properties.sh
    │   ├── run_kbc_tests.ps1
    │   ├── build_n_run.ps1
    │   └── build_n_test.sh
    ├── requirements.txt
    ├── .github/
    │   └── workflows/
    │       └── push.yml
    ├── docs/
    │   └── imgs/
    ├── TEMPLATE_README.md
    ├── Dockerfile
    ├── LICENSE.md
    └── README.md

================================================
File: /.python-version
================================================
3.13


================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /src/component.py
================================================
"""
Template Component main class.

"""
import csv
import logging

from keboola.component.base import ComponentBase
from keboola.component.exceptions import UserException
from keboola.component.dao import TableDefinition
from keboola.utils import parse_datetime_interval as parse_date
from keboola.json_to_csv import TableMapping, Parser

from configuration import Configuration
from client import ToastClient

import json
from pathlib import Path
from typing import Dict, IO
from dataclasses import dataclass
import datetime


@dataclass
class WriterCacheRecord:
    file: IO
    writer: csv.DictWriter
    table_definition: TableDefinition


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()

        self._writer_cache: dict[str, WriterCacheRecord] = dict()
        with open(Path(__file__).parent.joinpath('parser_mapping.json')) as f:
            self.parser_mapping = json.loads(f.read())

        self._init_configuration()
        self._init_client()
        self.current_start_time = datetime.datetime.now(datetime.UTC).timestamp()
        self.state = self.get_state_file()

    def _init_configuration(self) -> None:
        self.validate_configuration_parameters(Configuration.get_dataclass_required_parameters())
        self.cfg: Configuration = Configuration.load_from_dict(self.configuration.parameters)

    def _init_client(self) -> None:
        self.client = ToastClient(self.cfg.credentials.client_id, self.cfg.credentials.pswd_client_secret,
                                  self.cfg.credentials.url)

    def run(self):
        """
        Main execution code
        """

        if self.cfg.restaurants.restaurant_select_type == 'all_available':
            restaurants = self.client.list_restaurants()

            mng_ids_raw = self.cfg.restaurants.management_group_ids.split(',')
            mng_ids = [uid.strip() for uid in mng_ids_raw]

            restaurant_ids = [r['restaurantGuid'] for r in restaurants if 'restaurantGuid' in r
                              and r['managementGroupGuid'] in mng_ids]

        else:
            restaurant_ids_raw = self.cfg.restaurants.restaurants_ids.split(',')
            restaurant_ids = [uid.strip() for uid in restaurant_ids_raw]

        for guid in restaurant_ids:
            if 'configuration_information' in self.cfg.endpoints:
                self.download_restaurant_config(guid)
            if 'orders' in self.cfg.endpoints:
                self.download_orders(guid)

        for table, cache_record in self._writer_cache.items():
            cache_record.file.close()
            self.write_manifest(cache_record.table_definition)

        state = {'last_run': self.current_start_time}
        self.write_state_file(state)
        logging.debug(f'Writing State file: {state}')

    def download_orders(self, restaurant_id: str):

        end_date, start_date = self.get_dates()

        orders = self.client.list_orders(restaurant_id, start_date, end_date)

        for batch in orders:
            mapping = TableMapping.build_from_mapping_dict(self.parser_mapping['orders'])
            parser = Parser("orders", TableMapping.build_from_mapping_dict(self.parser_mapping['orders']), False)

            out = parser.parse_data(batch)

            logging.info(f'Writing {len(out["orders"])} orders to output')

            for table_name, table_mapping in table_mappings_flattened_by_key(mapping).items():
                if table_name in out:
                    self.write_to_csv(out, table_name, table_mapping, restaurant_id)

    def get_dates(self):
        if self.cfg.sync_options.start_date in {"last", "lastrun", "last run"}:
            if self.state.get('last_run'):
                start_date = datetime.datetime.fromtimestamp(self.state['last_run'])
            else:
                start_date = datetime.datetime.fromtimestamp(0, datetime.UTC)
            end_date, _ = parse_date(self.cfg.sync_options.end_date, self.cfg.sync_options.end_date)
        else:
            start_date, end_date = parse_date(self.cfg.sync_options.start_date, self.cfg.sync_options.end_date)
        return end_date, start_date

    def download_restaurant_config(self, restaurant_id: str):
        config = self.client.get_restaurant_configuration(restaurant_id)
        mapping = TableMapping.build_from_mapping_dict(self.parser_mapping['configuration'])

        parser = Parser("configuration", mapping, False)
        out = parser.parse_data(config)

        for table_name, table_mapping in table_mappings_flattened_by_key(mapping).items():
            if table_name in out:
                self.write_to_csv(out, table_name, table_mapping)

    def write_to_csv(self, parsed_data: dict,
                     table_name: str,
                     table_mapping: TableMapping,
                     restaurant_id: str = None
                     ) -> None:

        if not self._writer_cache.get(table_name):
            incremental_load = self.cfg.destination.load_type.is_incremental()
            # TODO: use table_mapping.table_name for name once fixed in Parser
            columns = list(table_mapping.column_mappings.values())
            if restaurant_id:
                columns.insert(0, 'restaurantGuid')

            table_def = self.create_out_table_definition(f'{table_name}.csv',
                                                         primary_key=table_mapping.primary_keys,
                                                         incremental=incremental_load,
                                                         schema=columns,
                                                         has_header=True)

            out = open(table_def.full_path, 'w', newline='')
            writer = csv.DictWriter(out, columns)
            writer.writeheader()

            self._writer_cache[table_name] = WriterCacheRecord(out, writer, table_def)

        writer = self._writer_cache[table_name].writer
        for record in parsed_data[table_name]:
            if restaurant_id:
                record['restaurantGuid'] = restaurant_id
            writer.writerow(record)


# temp before fix is merged
def table_mappings_flattened_by_key(table_mapping: TableMapping) -> dict[str, TableMapping]:
    """
    Retrieve a flattened representation of the mapping structures. Returns dictionary structure where each mapping
    in the hierarchy is indexed by the table name.

    E.g. Table mapping with root table name `user` and child table `user_address` returns following strucutre:
    {"user": TableMapping, "user_address":TableMapping")

    Parameters:
    - path (Optional[str]): The object path for which the mapping should be retrieved.
                            If None, the full flattened mapping is returned.

    Returns:
    - Dict: Flattened representation of the mapping structure.
    """

    def _flatten_mapping(mapping: 'TableMapping', key='') -> Dict:
        flat_mappings = {}

        table_name = mapping.table_name
        if not key:
            key = table_name
        flat_mappings[key] = mapping

        for child_key, child_mapping in mapping.child_tables.items():
            # TODO: use dynamic separator
            new_key = f'{key}_{child_key}'
            flat_mappings.update(_flatten_mapping(child_mapping, new_key))

        return flat_mappings

    # recursively flatten
    full_mapping = _flatten_mapping(table_mapping)

    return full_mapping


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: /src/configuration.py
================================================
import dataclasses
import json
from dataclasses import dataclass, field
from typing import List
from enum import Enum
import dataconf


class ConfigurationBase:
    @staticmethod
    def _convert_private_value(value: str):
        return value.replace('"#', '"pswd_')

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith("pswd_"):
            return value.replace("pswd_", "#", 1)
        else:
            return value

    @classmethod
    def load_from_dict(cls, configuration: dict):
        """
        Initialize the configuration dataclass object from dictionary.
        Args:
            configuration: Dictionary loaded from json configuration.

        Returns:

        """
        json_conf = json.dumps(configuration)
        json_conf = ConfigurationBase._convert_private_value(json_conf)
        return dataconf.loads(json_conf, cls, ignore_unexpected=True)

    @classmethod
    def get_dataclass_required_parameters(cls) -> List[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: List[str]

        """
        return [cls._convert_private_value_inv(f.name)
                for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING
                and f.default_factory == dataclasses.MISSING
                ]


@dataclass
class Credentials(ConfigurationBase):
    url: str = ""
    client_id: str = ""
    pswd_client_secret: str = ""


@dataclass
class RestaurantsOptions(ConfigurationBase):
    restaurant_select_type: str = ""
    restaurants_ids: str = ""
    management_group_ids: str = ""


@dataclass
class SyncOptions(ConfigurationBase):
    start_date: str = ""
    end_date: str = ""


class LoadType(str, Enum):
    full_load = "full_load"
    incremental_load = "incremental_load"

    def is_incremental(self) -> bool:
        return self.value == self.incremental_load


@dataclass
class Destination(ConfigurationBase):
    load_type: LoadType = "incremental_load"


@dataclass
class Configuration(ConfigurationBase):
    credentials: Credentials
    restaurants: RestaurantsOptions
    sync_options: SyncOptions
    destination: Destination
    endpoints: List[str] = field(default_factory=list)


================================================
File: /src/parser_mapping.json
================================================
{
  "orders": {
    "table_name": "orders",
    "primary_keys": [
      "guid"
    ],
    "column_mappings": {
      "guid": "guid",
      "entityType": "entityType",
      "externalId": "externalId",
      "openedDate": "openedDate",
      "modifiedDate": "modifiedDate",
      "promisedDate": "promisedDate",
      "diningOption.guid": "diningOption_guid",
      "diningOption.externalId": "diningOption_ExternalId",
      "checks": "checks",
      "table.guid": "table_guid",
      "table.externalId": "table_externalId",
      "serviceArea.guid": "serviceArea_guid",
      "serviceArea.externalId": "serviceArea_externalId",
      "restaurantService.guid": "restaurantService_guid",
      "restaurantService.externalId": "restaurantService_externalId",
      "revenueCenter.guid": "revenueCenter_guid",
      "revenueCenter.externalId": "revenueCenter_externalId",
      "source": "source",
      "duration": "duration",
      "deliveryInfo": "deliveryInfo",
      "requiredPrepTime": "requiredPrepTime",
      "estimatedFulfillmentDate": "estimatedFulfillmentDate",
      "numberOfGuests": "numberOfGuests",
      "voided": "voided",
      "voidDate": "voidDate",
      "voidBusinessDate": "voidBusinessDate",
      "paidDate": "paidDate",
      "closedDate": "closedDate",
      "deletedDate": "deletedDate",
      "deleted": "deleted",
      "businessDate": "businessDate",
      "server.guid": "server_guid",
      "server.externalId": "server_externalId",
      "pricingFeatures": "pricingFeatures",
      "approvalStatus": "approvalStatus",
      "guestOrderStatus": "guestOrderStatus",
      "createdDevice.id": "createdDevice_id",
      "createdDate": "createdDate",
      "initialDate": "initialDate",
      "lastModifiedDevice.id": "lastModifiedDevice",
      "curbsidePickupInfo.guid": "curbsidePickupInfo_guid",
      "curbsidePickupInfo.transportColor": "curbsidePickupInfo_transportColor",
      "curbsidePickupInfo.transportDescription": "curbsidePickupInfo_transportDescription",
      "curbsidePickupInfo.notes": "curbsidePickupInfo_notes",
      "deliveryServiceInfo.guid": "deliveryServiceInfo_guid",
      "deliveryServiceInfo.providerId": "deliveryServiceInfo_providerId",
      "deliveryServiceInfo.providerName": "deliveryServiceInfo_providerName",
      "deliveryServiceInfo.driverName": "deliveryServiceInfo_driverName",
      "deliveryServiceInfo.driverPhoneNumber": "deliveryServiceInfo_driverPhoneNumber",
      "deliveryServiceInfo.providerInfo": "deliveryServiceInfo_providerInfo",
      "deliveryServiceInfo.originalQuotedDeliveryDate": "deliveryServiceInfo_originalQuotedDeliveryDate",
      "marketplaceFacilitatorTaxInfo": "marketplaceFacilitatorTaxInfo",
      "createdInTestMode": "createdInTestMode",
      "appliedPackagingInfo.guid": "appliedPackagingInfo",
      "excessFoodInfo": "excessFoodInfo"
    },
    "force_types": [
    ],
    "child_tables": {
      "checks": {
        "table_name": "checks",
        "column_mappings": {
          "guid": "guid",
          "orders_guid": "orders_guid",
          "entityType": "entityType",
          "externalId": "externalId",
          "createdDate": "createdDate",
          "openedDate": "openedDate",
          "closedDate": "closedDate",
          "modifiedDate": "modifiedDate",
          "deletedDate": "deletedDate",
          "deleted": "deleted",
          "selections": "selections",
          "customer": "customer",
          "appliedLoyaltyInfo": "appliedLoyaltyInfo",
          "taxExempt": "taxExempt",
          "displayNumber": "displayNumber",
          "appliedServiceCharges": "appliedServiceCharges",
          "amount": "amount",
          "taxAmount": "taxAmount",
          "totalAmount": "totalAmount",
          "payments": "payments",
          "tabName": "tabName",
          "paymentStatus": "paymentStatus",
          "appliedDiscounts": "appliedDiscounts",
          "voided": "voided",
          "voidDate": "voidDate",
          "voidBusinessDate": "voidBusinessDate",
          "paidDate": "paidDate",
          "createdDevice": "createdDevice",
          "lastModifiedDevice": "lastModifiedDevice",
          "duration": "duration"
        },
        "primary_keys": [
          "guid"
        ],
        "force_types": [
        ],
        "child_tables": {
          "payments": {
            "table_name": "payments",
            "column_mappings": {
              "guid": "guid",
              "orders_checks_guid": "orders_checks_guid",
              "entityType": "entityType",
              "externalId": "externalId",
              "paidDate": "paidDate",
              "paidBusinessDate": "paidBusinessDate",
              "type": "type",
              "cardEntryMode": "cardEntryMode",
              "amount": "amount",
              "tipAmount": "tipAmount",
              "amountTendered": "amountTendered",
              "cardType": "cardType",
              "last4Digits": "last4Digits",
              "originalProcessingFee": "originalProcessingFee",
              "server": "server",
              "cashDrawer": "cashDrawer",
              "refundStatus": "refundStatus",
              "refund": "refund",
              "paymentStatus": "paymentStatus",
              "voidInfo": "voidInfo",
              "houseAccount": "houseAccount",
              "otherPayment": "otherPayment",
              "createdDevice": "createdDevice",
              "lastModifiedDevice": "lastModifiedDevice",
              "mcaRepaymentAmount": "mcaRepaymentAmount",
              "cardPaymentId": "cardPaymentId",
              "tenderTransactionGuid": "tenderTransactionGuid"
            },
            "primary_keys": [
              "guid"
            ],
            "force_types": [
            ],
            "child_tables": {}
          },
          "selections": {
            "table_name": "selections",
            "column_mappings": {
              "guid": "guid",
              "orders_checks_guid": "orders_checks_guid",
              "entityType": "entityType",
              "externalId": "externalId",
              "item.guid": "item_guid",
              "item.entityType": "item_entityType",
              "item.multiLocationId": "item_multiLocationId",
              "item.externalId": "item_externalId",
              "itemGroup.guid": "itemGroup_guid",
              "itemGroup.entityType": "itemGroup_entityType",
              "itemGroup.multiLocationId": "itemGroup_multiLocationId",
              "itemGroup.externalId": "itemGroup_externalId",
              "optionGroup.guid": "optionGroup_guid",
              "optionGroup.entityType": "optionGroup_entityType",
              "optionGroup.multiLocationId": "optionGroup_multiLocationId",
              "optionGroup.externalId": "optionGroup_externalId",
              "preModifier.guid": "preModifier_guid",
              "preModifier.entityType": "preModifier_entityType",
              "preModifier.multiLocationId": "preModifier_multiLocationId",
              "preModifier.externalId": "preModifier_externalId",
              "quantity": "quantity",
              "seatNumber": "seatNumber",
              "unitOfMeasure": "unitOfMeasure",
              "selectionType": "selectionType",
              "salesCategory.guid": "salesCategory_guid",
              "salesCategory.entityType": "salesCategory_entityType",
              "salesCategory.multiLocationId": "salesCategory_multiLocationId",
              "salesCategory.externalId": "salesCategory_externalId",
              "deferred": "deferred",
              "preDiscountPrice": "preDiscountPrice",
              "price": "price",
              "tax": "tax",
              "openPriceAmount": "openPriceAmount",
              "externalPriceAmount": "externalPriceAmount"
            },
            "primary_keys": [
              "guid"
            ],
            "force_types": [
            ],
            "child_tables": {}
          },
          "appliedServiceCharges": {
            "table_name": "service_charges",
            "column_mappings": {
              "guid": "guid",
              "orders_checks_guid": "orders_checks_guid",
              "entityType": "entityType",
              "externalId": "externalId",
              "chargeAmount": "chargeAmount",
              "serviceCharge.guid": "serviceCharge_guid",
              "serviceCharge.entityType": "serviceCharge.entityType",
              "serviceCharge.externalId": "serviceCharge_externalId",
              "chargeType": "chargeType",
              "name": "name",
              "delivery": "delivery",
              "takeout": "takeout",
              "dineIn": "dineIn",
              "gratuity": "gratuity",
              "taxable": "taxable",
              "refundDetails.refundAmount": "refundDetails_refundAmount",
              "refundDetails.taxRefundAmount": "refundDetails_taxRefundAmount",
              "refundDetails.refundTransaction.guid": "refundDetails_refundTransaction_guid",
              "refundDetails.refundTransaction.entityType": "refundDetails_refundTransaction_entityType",
              "serviceChargeCategory": "serviceChargeCategory",
              "paymentGuid": "paymentGuid"
            },
            "primary_keys": [
              "guid"
            ],
            "force_types": [
            ],
            "child_tables": {
            }
          }
        }
      }
    }
  },
  "configuration": {
    "table_name": "configuration",
    "primary_keys": [
      "guid"
    ],
    "column_mappings": {
      "guid": "guid",
      "general.name": "general_name",
      "general.locationName": "general_locationName",
      "general.locationCode": "general_locationCode",
      "general.description": "general_description",
      "general.timeZone": "general_timeZone",
      "general.closeoutHour": "general_closeoutHour",
      "general.managementGroupGuid": "general_managementGroupGuid",
      "general.currencyCode": "general_currencyCode",
      "general.firstBusinessDate": "general_firstBusinessDate",
      "general.archived": "general_archived",
      "urls.website": "urls_website",
      "urls.facebook": "urls_facebook",
      "urls.twitter": "urls_twitter",
      "urls.orderOnline": "urls_orderOnline",
      "urls.purchaseGiftCard": "urls_purchaseGiftCard",
      "urls.checkGiftCard": "urls_checkGiftCard",
      "location.address1": "location_address1",
      "location.address2": "location_address2",
      "location.city": "location_city",
      "location.stateCode": "location_stateCode",
      "location.administrativeArea": "location_administrativeArea",
      "location.zipCode": "location_zipCode",
      "location.country": "location_country",
      "location.phone": "location_phone",
      "location.phoneCountryCode": "location_phoneCountryCode",
      "location.latitude": "location_latitude",
      "location.longitude": "location_longitude",
      "schedules.weekSchedule.monday": "schedules_weekSchedule_monday",
      "schedules.weekSchedule.tuesday": "schedules_weekSchedule_tuesday",
      "schedules.weekSchedule.wednesday": "schedules_weekSchedule_wednesday",
      "schedules.weekSchedule.thursday": "schedules_weekSchedule_thursday",
      "schedules.weekSchedule.friday": "schedules_weekSchedule_friday",
      "schedules.weekSchedule.saturday": "schedules_weekSchedule_saturday",
      "schedules.weekSchedule.sunday": "schedules_weekSchedule_sunday",
      "delivery.enabled": "delivery_enabled",
      "delivery.minimum": "delivery_minimum",
      "delivery.area": "delivery_area",
      "onlineOrdering.enabled": "onlineOrdering_enabled",
      "onlineOrdering.scheduling": "onlineOrdering_scheduling",
      "onlineOrdering.specialRequests": "onlineOrdering_specialRequests",
      "onlineOrdering.specialRequestsMessage": "onlineOrdering_specialRequestsMessage",
      "onlineOrdering.paymentOptions.delivery.cash": "onlineOrdering_paymentOptions_delivery_cash",
      "onlineOrdering.paymentOptions.delivery.ccSameDay": "onlineOrdering_paymentOptions_delivery_ccSameDay",
      "onlineOrdering.paymentOptions.delivery.ccFuture": "onlineOrdering_paymentOptions_delivery_ccFuture",
      "onlineOrdering.paymentOptions.takeout.cash": "onlineOrdering_paymentOptions_takeout_cash",
      "onlineOrdering.paymentOptions.takeout.ccSameDay": "onlineOrdering_paymentOptions_takeout_ccSameDay",
      "onlineOrdering.paymentOptions.takeout.ccFuture": "onlineOrdering_paymentOptions_takeout_ccFuture",
      "onlineOrdering.paymentOptions.takeout.ccInStore": "onlineOrdering_paymentOptions_takeout_ccInStore",
      "onlineOrdering.paymentOptions.ccTip": "onlineOrdering_paymentOptions_ccTip",
      "prepTimes.deliveryPrepTime": "prepTimes_deliveryPrepTime",
      "prepTimes.deliveryTimeAfterOpen": "prepTimes_deliveryTimeAfterOpen",
      "prepTimes.deliveryTimeBeforeClose": "prepTimes_deliveryTimeBeforeClose",
      "prepTimes.takeoutPrepTime": "prepTimes_takeoutPrepTime",
      "prepTimes.takeoutTimeAfterOpen": "prepTimes_takeoutTimeAfterOpen",
      "prepTimes.takeoutTimeBeforeClose": "prepTimes_takeoutTimeBeforeClose",
      "prepTimes.takeoutThrottlingTime": "prepTimes_takeoutThrottlingTime",
      "prepTimes.deliveryThrottlingTime": "prepTimes_deliveryThrottlingTime"
    },
    "force_types": [
    ],
    "child_tables": {
      "schedules": {
        "table_name": "schedules",
        "column_mappings": {
          "configuration_guid": "configuration_guid",
          "schedules.daySchedules": "day_schedules",
          "weekSchedule.monday": "weekSchedule_monday",
          "weekSchedule.tuesday": "weekSchedule_tuesday",
          "weekSchedule.wednesday": "weekSchedule_wednesday",
          "weekSchedule.thursday": "weekSchedule_thursday",
          "weekSchedule.friday": "weekSchedule_friday",
          "weekSchedule.saturday": "weekSchedule_saturday",
          "weekSchedule.sunday": "weekSchedule_sunday"
        },
        "primary_keys": [
          "configuration_guid"
        ],
        "force_types": [
        ],
        "child_tables": {}
      }
    }
  }
}


================================================
File: /src/client.py
================================================
import logging
import datetime
from collections.abc import Iterator
from typing import Dict
from requests.exceptions import HTTPError
from ratelimit import limits, sleep_and_retry

from keboola.component import UserException
from keboola.http_client import HttpClient

ORDERS_PAGE_SIZE = 100
ORDERS_BATCH_SIZE = 1000


class ToastClient(HttpClient):

    def __init__(self, client_id, client_secret, url):
        super().__init__(url)

        self.access_token = self.get_token(client_id, client_secret)
        self.update_auth_header({"Authorization": f'Bearer {self.access_token}'})

    # API rate limits: https://doc.toasttab.com/doc/devguide/apiRateLimiting.html
    @sleep_and_retry
    @limits(calls=20, period=1)
    @sleep_and_retry
    @limits(calls=10_000, period=900)
    def request(self, method, endpoint_path, **kwargs):
        logging.debug(f"Requesting {method}, {endpoint_path}")
        return self._request_raw(method, endpoint_path, **kwargs)

    def get_token(self, client_id, client_secret):
        headers = {"Content-Type": "application/json"}
        payload = {"clientId": client_id, "clientSecret": client_secret, "userAccessType": "TOAST_MACHINE_CLIENT"}

        refresh_rsp = self.request("POST", "authentication/v1/authentication/login", headers=headers, json=payload)

        if refresh_rsp.status_code == 200:
            logging.info("Successfully refreshed access token.")
            return refresh_rsp.json()['token']['accessToken']

        else:
            raise UserException(f"Could not refresh access token. "
                                f"Received: {refresh_rsp.status_code} - {refresh_rsp.json()}.")

    def list_restaurants(self) -> list[Dict]:
        """
        List all orders
        """

        try:
            response = self.request("GET", "partners/v1/restaurants")
            response.raise_for_status()

        except HTTPError as e:
            raise UserException(f"Error while listing restaurants: {e.response.json()['message']}")

        return response.json()

    def list_restaurants_in_group(self, restaurant_id: str, restaurant_group_id: str) -> list[str]:
        """
        List all orders
        """
        self.update_auth_header({"Toast-Restaurant-External-ID": restaurant_id})

        try:
            response = self.request("GET", endpoint_path=f"/restaurants/v1/groups/{restaurant_group_id}/restaurants")
            response.raise_for_status()

        except HTTPError as e:
            raise UserException(f"Error while listing orders: {e.response.json()['message']}")

        return [str(r['guid']) for r in response if 'guid' in r]

    def get_restaurant_configuration(self, restaurant_id: str) -> Dict:
        self.update_auth_header({"Toast-Restaurant-External-ID": restaurant_id})

        try:
            response = self.request("GET", endpoint_path=f"restaurants/v1/restaurants/{restaurant_id}")
            response.raise_for_status()

        except HTTPError as e:
            raise UserException(f"Error while listing restaurant details: {e.response.json()['message']}")

        return response.json()

    def list_orders(self, restaurant_id: str, date_from: datetime, date_to: datetime) -> Iterator[list[Dict]]:
        """
        List all orders
        """
        self.update_auth_header({"Toast-Restaurant-External-ID": restaurant_id})
        batch = []
        page = 1
        while True:
            query = {
                "endDate": date_to.isoformat(timespec="milliseconds") + '+0000',
                "page": page,
                "pageSize": ORDERS_PAGE_SIZE,
                "startDate": date_from.isoformat(timespec="milliseconds") + '+0000'
            }

            try:

                response = self.request("GET", endpoint_path='orders/v2/ordersBulk', params=query)
                response.raise_for_status()

            except HTTPError as e:
                raise UserException(f"Error while listing orders: {e.response.json()['message']}")

            if not response.json():
                break

            batch.extend(response.json())

            if page % (ORDERS_BATCH_SIZE/ORDERS_PAGE_SIZE) == 0:
                yield batch
                batch = []

            page += 1

        if batch:
            yield batch


================================================
File: /tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: /requirements.in
================================================
keboola.component
keboola.utils
keboola.http-client
mock
flake8
freezegun
dataconf
keboola.json-to-csv
ratelimit

================================================
File: /component_config/logger
================================================
gelf

================================================
File: /component_config/component_long_description.md
================================================
Toast is a POS for restaurants

================================================
File: /component_config/configuration_description.md
================================================
#### Authorization
Provide the URL, Client ID, and Client Secret to connect to your account.

#### Restaurants
You can choose to load all restaurants or just a specific one.

#### Endpoints
You can select which endpoints you want to download.

#### Sync Options
Specify the date range for the orders you want to download.

#### Destination
Load Type: You can choose whether the output tables in the bucket should be incrementally loaded or if the entire table should be replaced.

================================================
File: /component_config/component_short_description.md
================================================
Toast is a POS for restaurants

================================================
File: /component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: /component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Component configuration",
  "required": [
    "credentials"
  ],
  "properties": {
    "credentials": {
      "type": "object",
      "title": "Authorization",
      "required": [
        "url",
        "client_id",
        "#client_secret"
      ],
      "properties": {
        "url": {
          "type": "string",
          "title": "Url of your Toast instance",
          "propertyOrder": 1
        },
        "client_id": {
          "type": "string",
          "title": "Client ID",
          "propertyOrder": 2
        },
        "#client_secret": {
          "type": "string",
          "format": "password",
          "title": "Client Secret",
          "propertyOrder": 3
        }
      },
      "propertyOrder": 1
    },
    "restaurants": {
      "type": "object",
      "title": "Restaurants",
      "properties": {
        "restaurant_select_type": {
          "enum": [
            "all_available",
            "selected_ids"
          ],
          "type": "string",
          "title": "Restaurants Selection",
          "format": "checkbox",
          "default": "incremental_load",
          "options": {
            "enum_titles": [
              "All Available Restaurants In Specified Management Groups",
              "Selected Restaurants"
            ]
          },
          "description": "For download data from all available restaurants, partner-level credentials are required.",
          "propertyOrder": 1
        },
        "restaurants_ids": {
          "type": "string",
          "title": "IDs of restaurants separated by comma",
          "propertyOrder": 2,
          "options": {
            "dependencies": {
              "restaurant_select_type": "selected_ids"
            }
          }
        },
        "management_group_ids": {
          "type": "string",
          "title": "Management Group IDs, separated by coma",
          "propertyOrder": 3,
            "options": {
                "dependencies": {
                "restaurant_select_type": "all_available"
                }
            }
        }
      },
      "propertyOrder": 2
    },
    "endpoints": {
      "type": "array",
      "format": "select",
      "title": "Endpoints",
      "description": "Endpoints to download data from",
      "uniqueItems": true,
      "items": {
        "options": {
          "enum_titles": [
            "Restaurant Configuration Information",
            "Orders"
          ]
        },
        "enum": [
          "configuration_information",
          "orders"
        ],
        "type": "string"
      },
      "default": [
        "configuration_information",
        "orders"
      ],
      "propertyOrder": 3
    },
    "sync_options": {
      "type": "object",
      "title": "Sync Options",
      "properties": {
        "start_date": {
          "type": "string",
          "title": "Date From",
          "default": "last run",
          "description": "Date from which data is downloaded. Either date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc. You can also set this as last run, which will fetch data from the last run of the component.",
          "propertyOrder": 1
        },
        "end_date": {
          "type": "string",
          "title": "Date to",
          "default": "now",
          "description": "Date to which data is downloaded. Either date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, now, etc.",
          "propertyOrder": 2
        }
      },
      "propertyOrder": 4
    },
    "destination": {
      "type": "object",
      "title": "Destination",
      "required": [
        "load_type"
      ],
      "properties": {
        "load_type": {
          "enum": [
            "full_load",
            "incremental_load"
          ],
          "type": "string",
          "title": "Load Type",
          "format": "checkbox",
          "default": "incremental_load",
          "options": {
            "enum_titles": [
              "Full Load",
              "Incremental Load"
            ]
          },
          "description": "If Full load is used, the destination table will be overwritten every run. If incremental load is used, data will be upserted into the destination table.",
          "propertyOrder": 1
        }
      },
      "propertyOrder": 5
    }
  }
}

================================================
File: /component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Configuration Parameters",
  "required": [
  ],
  "properties": {
    "report_settings": {
      "title": "Report Settings",
      "type": "object",
      "propertyOrder": 1,
      "required": [
        "restaurant_id",
        "date_from",
        "date_to"
      ],
      "properties": {
        "restaurant_id": {
          "type": "string",
          "title": "Restaurant ID",
          "propertyOrder": 1
        },
        "date_from": {
          "type": "string",
          "title": "Date From",
          "description": "Date from which data is downloaded. Either date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc.",
          "propertyOrder": 2
        },
        "date_to": {
          "type": "string",
          "title": "Date to",
          "description": "Date to which data is downloaded. Either date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, now, etc.",
          "propertyOrder": 3
        }
      }
    },
    "destination": {
      "title": "Destination",
      "type": "object",
      "propertyOrder": 2,
      "required": [
        "output_table_name",
        "load_type"
      ],
      "properties": {
        "output_table_name": {
          "type": "string",
          "title": "Storage Table Name",
          "description": "Name of the table stored in Storage.",
          "propertyOrder": 10
        },
        "load_type": {
          "type": "string",
          "required": true,
          "enum": [
            "full_load",
            "incremental_load"
          ],
          "options": {
            "enum_titles": [
              "Full Load",
              "Incremental Load"
            ]
          },
          "default": "full_load",
          "title": "Load Type",
          "description": "If Full load is used, the destination table will be overwritten every run. If incremental load is used, data will be upserted into the destination table. Tables with a primary key will have rows updated, tables without a primary key will have rows appended.",
          "propertyOrder": 20
        },
        "primary_keys": {
          "type": "string",
          "title": "Primary Keys",
          "description": "List of primary keys separated by commas e.g. id, other_id. If a primary key is set, updates can be done on the table by selecting incremental loads. The primary key can consist of multiple columns. The primary key of an existing table cannot be changed.",
          "propertyOrder": 30
        }
      }
    }
  }
}

================================================
File: /component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: /component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /requirements.txt
================================================
# This file was autogenerated by uv via the following command:
#    uv pip compile requirements.in --universal --output-file requirements.txt
certifi==2024.12.14
    # via requests
charset-normalizer==3.4.1
    # via requests
dataconf==3.3.0
    # via -r requirements.in
dateparser==1.2.0
    # via keboola-utils
deprecated==1.2.15
    # via keboola-component
flake8==7.1.1
    # via -r requirements.in
freezegun==1.5.1
    # via -r requirements.in
idna==3.10
    # via requests
isodate==0.6.1
    # via dataconf
keboola-component==1.6.10
    # via -r requirements.in
keboola-http-client==1.0.1
    # via -r requirements.in
keboola-json-to-csv==0.0.12
    # via -r requirements.in
keboola-utils==1.1.0
    # via -r requirements.in
mccabe==0.7.0
    # via flake8
mock==5.1.0
    # via -r requirements.in
pycodestyle==2.12.1
    # via flake8
pyflakes==3.2.0
    # via flake8
pygelf==0.4.2
    # via keboola-component
pyhocon==0.3.61
    # via dataconf
pyparsing==3.2.1
    # via
    #   dataconf
    #   pyhocon
python-dateutil==2.9.0.post0
    # via
    #   dataconf
    #   dateparser
    #   freezegun
pytz==2024.2
    # via
    #   dateparser
    #   keboola-component
    #   keboola-utils
pyyaml==6.0.2
    # via dataconf
ratelimit==2.2.1
    # via -r requirements.in
regex==2024.11.6
    # via dateparser
requests==2.32.3
    # via keboola-http-client
six==1.17.0
    # via
    #   isodate
    #   python-dateutil
tzdata==2024.2 ; sys_platform == 'win32'
    # via tzlocal
tzlocal==5.2
    # via dateparser
urllib3==2.3.0
    # via requests
wrapt==1.17.2
    # via deprecated


================================================
File: /.github/workflows/push.yml
================================================
name: Keboola Component Deployment Pipeline
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  DOCKERHUB_USER: "keboolabot"
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-toast"
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team"
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # to be set in repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # required for pushing to ECR
  # KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests (optional)
  # KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Docker login
      if: env.DOCKERHUB_TOKEN
      run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

    - name: Build image
      run: docker build -t "${{ env.KBC_DEVELOPERPORTAL_APP }}" .

    - name: Set image tag
      id: tag
      run: |
        TAG="${GITHUB_REF##*/}"
        IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
        echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
        echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
        echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT

    - name: Push image to ECR
      uses: keboola/action-push-to-ecr@master
      with:
        vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
        app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
        username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
        password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
        tag: ${{ steps.tag.outputs.app_image_tag }}
        push_latest: ${{ steps.tag.outputs.is_semantic_tag }}
        source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  tests:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.KBC_DEVELOPERPORTAL_APP}}
          tag_as_latest: true

      - name: Run tests
        run: |
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }} flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }} python -m unittest discover

  tests-kbc:
    env:
      KBC_TEST_PROJECT_CONFIGS: ${{ vars.KBC_TEST_PROJECT_CONFIGS }}
      KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }}
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Run KBC test jobs
        if: ${{ env.KBC_TEST_PROJECT_CONFIGS != '' }} && ${{ env.KBC_STORAGE_TOKEN != '' }}
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - build
      - tests
      - tests-kbc
    if : startsWith(github.ref, 'refs/tags/') && needs.build.outputs.is_semantic_tag == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set tag in the Developer Portal
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/update_dev_portal_properties.sh
          scripts/update_dev_portal_properties.sh

================================================
File: /TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

================================================
File: /Dockerfile
================================================
FROM python:3.13-slim

ENV PYTHONIOENCODING=utf-8

RUN apt-get update && apt-get install -y build-essential
RUN pip3 install uv

COPY requirements.txt /code/requirements.txt
RUN uv pip sync --system /code/requirements.txt

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

WORKDIR /code/

CMD ["python", "-u", "/code/src/component.py"]


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /README.md
================================================
Toast
=============

This component extract data from the Toast API.

Supported endpoints
===================
following endpoints are supported:
- restaurant configuration
- orders

Configuration
=============

#### Authorization
Provide the URL, Client ID, and Client Secret to connect to your account.

#### Restaurants
You can choose to load all restaurants in management group or just a specific one.

#### Endpoints
You can select which endpoints you want to download.

#### Sync Options
Specify the date range for the orders you want to download.

#### Destination
Load Type: You can choose whether the output tables in the bucket should be incrementally loaded or if the entire table should be replaced.

Output
======

List of tables, foreign keys, schema.

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone https://github.com/keboola/component-toast component-toast
cd component-toast
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)


