Directory structure:
└── keboola-ex-cosmosdb/
    ├── README.md
    ├──  .eslintignore
    ├── Dockerfile
    ├── composer.json
    ├── composer.lock
    ├── deploy.sh
    ├── docker-compose.yml
    ├── package.json
    ├── phpcs.xml
    ├── phpstan-baseline.neon
    ├── phpstan.neon
    ├── phpunit.xml.dist
    ├── .dockerignore
    ├── .env.dist
    ├── .eslintrc.json
    ├── docker/
    │   ├── composer-install.sh
    │   └── php-prod.ini
    ├── src/
    │   ├── Component.php
    │   ├── run.php
    │   ├── Configuration/
    │   │   ├── ActionConfigDefinition.php
    │   │   ├── Config.php
    │   │   ├── ConfigDefinition.php
    │   │   └── Node/
    │   │       └── DbNode.php
    │   ├── Exception/
    │   │   ├── ApplicationException.php
    │   │   ├── ProcessException.php
    │   │   ├── UndefinedValueException.php
    │   │   └── UserException.php
    │   └── Extractor/
    │       ├── Extractor.php
    │       ├── JsonDecoder.php
    │       ├── ProcessFactory.php
    │       ├── ProcessWrapper.php
    │       ├── QueryFactory.php
    │       ├── CsvWriter/
    │       │   ├── BaseCsvWriter.php
    │       │   ├── ICsvWriter.php
    │       │   ├── MappingCsvWriter.php
    │       │   └── RawCsvWriter.php
    │       └── NodeJs/
    │           ├── extract.js
    │           ├── testConnection.js
    │           └── lib/
    │               ├── ApplicationError.js
    │               ├── Extractor.js
    │               ├── UserError.js
    │               └── jsonStream.js
    ├── tests/
    │   ├── functional/
    │   │   ├── DatadirTest.php
    │   │   ├── error-bad-custom-query-3-max-tries/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── error-bad-custom-query-no-retry/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── error-container-not-found/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── error-mapping-bad-config/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── error-mapping-bad-data/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── error-raw-select-missing-id/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── mapping-complex/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── actor.csv
    │   │   │   │               ├── actor.csv.manifest
    │   │   │   │               ├── movie.csv
    │   │   │   │               ├── movie.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── mapping-fk-keys/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── level1.csv
    │   │   │   │               ├── level1.csv.manifest
    │   │   │   │               ├── level2-a.csv
    │   │   │   │               ├── level2-a.csv.manifest
    │   │   │   │               ├── level2-b.csv
    │   │   │   │               ├── level2-b.csv.manifest
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── mapping-incremental-fetching/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── state.json
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── mapping-incremental-fetching-empty-container/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── mapping-incremental-fetching-empty-container-with-state/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── state.json
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── state.json
    │   │   ├── mapping-incremental-fetching-native-types-manifest/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── state.json
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── mapping-incremental-fetching-with-state/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── state.json
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── state.json
    │   │   ├── mapping-no-data/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── mapping-simple/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── raw-custom-query/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── raw-from/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── raw-incremental-fetching/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── state.json
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── raw-incremental-fetching-empty-container/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── raw-incremental-fetching-empty-container-with-state/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── state.json
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── state.json
    │   │   ├── raw-incremental-fetching-with-state/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── state.json
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── state.json
    │   │   ├── raw-incremental-true/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── raw-limit/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── raw-no-data/
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── raw-select/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── raw-simple/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── raw-simple-config-row/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── raw-sort/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── output-csv.csv
    │   │   │   │               ├── output-csv.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── test-connection-bad-config/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── test-connection-bad-endpoint/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── test-connection-database-not-found/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── test-connection-invalid-endpoint/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── test-connection-invalid-key/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   └── test-connection-ok/
    │   │       ├── expected-stdout
    │   │       ├── expected/
    │   │       │   └── data/
    │   │       │       └── out/
    │   │       │           ├── files/
    │   │       │           │   └── .gitkeep
    │   │       │           └── tables/
    │   │       │               └── .gitkeep
    │   │       └── source/
    │   │           └── data/
    │   │               └── config.json
    │   └── phpunit/
    │       ├── AbstractTestCase.php
    │       ├── ConfigTest.php
    │       ├── JsonDecoderTest.php
    │       ├── ProcessFactoryTest.php
    │       ├── bootstrap.php
    │       └── fixtures/
    │           ├── datasets/
    │           │   ├── empty.json
    │           │   ├── fk_keys_check.json
    │           │   ├── movie.json
    │           │   ├── restaurant.json
    │           │   └── simple.json
    │           ├── import/
    │           │   └── importDatasets.js
    │           ├── json-decoder/
    │           │   ├── emptyOutput.js
    │           │   ├── invalidJson1.js
    │           │   ├── invalidJson2.js
    │           │   ├── manyDocuments.js
    │           │   ├── oneDocument1.js
    │           │   └── oneDocument2.js
    │           └── process-factory/
    │               ├── exitCode.js
    │               └── stdoutAndStderr.js
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
# Cosmos DB Extractor

[CosmosDB](https://azure.microsoft.com/en-us/free/cosmos-db) extractor for the [Keboola Connection](https://www.keboola.com).

## Configuration

The configuration `config.json` contains following properties in `parameters` key: 
- `db` - object (required): Configuration of the connection.
    - `endpoint` - string (required): Cosmos DB [SQL API](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-query-getting-started) endpoint.
    - `#key` - string (required): Access key.
    - `databaseId` - string (required): Database ID.
- `id` - integer (optional): Id of the config row.
- `name` - string (optional): Name of the config row.
- `containerId` - string (required): Container is similar to table in the relational db, or collection in the MongoDB.
- `output` - string (required): Name of the output CSV file.
- `maxTries`- integer (optional): Number of the max retries if an error occurred. Default `5`.
- `ignoredKeys`- array (optional): 
    - CosmosDB automatically adds some metadata keys when the item is inserted.
    - By default, these keys are ignored: `["_rid", "_self", "_etag", "_attachments", "_ts"]`
- `incremental` - boolean (optional): Enables [Incremental Loading](https://help.keboola.com/storage/tables/#incremental-loading). Default `false`.
- `incrementalFetchingKey` - string (optional): Name of key for [Incremental Fetching](https://help.keboola.com/components/extractors/database/#incremental-fetching)
- `mode` - enum (optional)
    - `mapping` (default) - Documents are exported using specified `mapping`, [read more](https://github.com/keboola/php-csvmap).
    - `raw` - Documents are exported as plain JSON strings. CSV file will contain `id` and `data` columns.
- `mapping` - string - required for `mode` = `mapping`, [read more](https://github.com/keboola/php-csvmap).



- By default, Extractor exports all documents, using **the generated SQL query**.
    - Default query is `SELECT * FROM c`     
    - Query can be modified with these parameters:
    - `select` - string (optional), eg. `c.name, c.date`, default `*`, [read more](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-query-select).
       - For `raw` mode must be `id` field present in the query results.
    - `from` - string (optional), eg. `Families f`, default `c`, [read more](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-query-from).
    - `sort` - string (optional), eg. `c.date`, [read more](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-query-order-by).
    - `limit` - integer (optional), eg. `500`, [read more](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-query-offset-limit).
    - `incrementalFetchingKey` - string (optional), eg. `c.id`, [read more](https://help.keboola.com/components/extractors/database/#incremental-fetching)
    
    
- Or you can set **a custom query** using parameter:
    - `query` - string (optional), eg. `SELECT f.name FROM Families f`


## Actions

Read more about actions [in KBC documentation](https://developers.keboola.com/extend/common-interface/actions/).

### Test Connection

Action `testConnection` tests the connection to the server.

The `parameters.db` node must be specified in the configuration.

## Data flow

- The connection to CosmosDB is established from the NodeJs code, using the official package [@azure/cosmos](https://www.npmjs.com/package/@azure/cosmos).
- There is no reliable driver for PHP now.
- The NodeJs code prints exported JSON documents to `JSON_STREAM_FD` file descriptor, from there they are read by the `JsonDecoder` PHP class.
- This communication is asynchronous.
- The code in PHP decodes the loaded JSON documents and writes them to the CSV files using [keboola/php-csvmap](https://github.com/keboola/php-csvmap).

## Development
 
Clone this repository and init the workspace with following command:

```
git clone https://github.com/keboola/ex-cosmosdb
cd ex-cosmosdb
docker compose build
docker compose run --rm dev composer install --no-scripts
docker compose run --rm dev npm install
```

Create `.env` file with following variables:
```env
ENDPOINT=
KEY=
DATABASE_ID=
```


Run the test suite using this command:

```
docker compose run --rm dev composer tests
```
 
# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
File:  .eslintignore
================================================
node_modules


================================================
File: Dockerfile
================================================
FROM php:8.3-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update && apt-get install -y --no-install-recommends \
        git \
        locales \
        unzip \
        nodejs \
        npm \
        libssl-dev \
        libevent-dev \
	&& rm -r /var/lib/apt/lists/* \
	&& sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
	&& locale-gen \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

# Install ext-event dependencies
RUN docker-php-ext-install sockets \
    && docker-php-ext-install pcntl

# Install ext-event for react-php
RUN pecl install event \
    && docker-php-ext-enable --ini-name zz-event.ini event

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/
# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# First copy only packages files
COPY package* /code/
RUN npm install

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

# Run normal npm - all deps are cached already
RUN npm install

CMD ["php", "/code/src/run.php"]


================================================
File: composer.json
================================================
{
    "name": "keboola/ex-cosmosdb",
    "description": "CosmosDB extractor for Keboola Connection.",
    "license": "MIT",
    "require": {
        "php": "^8.3",
        "ext-event": "*",
        "ext-json": "*",
        "ext-pcntl": "*",
        "halaxa/json-machine": "^0.3.3",
        "keboola/csv": "^3",
        "keboola/csvmap": "^2",
        "keboola/php-component": "^10",
        "react/child-process": "^0.6.1",
        "react/event-loop": "^1",
        "react/promise": "^2.8"
    },
    "require-dev": {
        "colinodell/psr-testlogger": "^1.3",
        "keboola/coding-standard": ">=15",
        "keboola/datadir-tests": "^5.2",
        "keboola/php-temp": "^2.0",
        "php-parallel-lint/php-parallel-lint": "^1.2",
        "phpstan/phpstan": "^1",
        "phpunit/phpunit": "^9.0",
        "symfony/process": "^6.0"
    },
    "autoload": {
        "psr-4": {
            "CosmosDbExtractor\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "CosmosDbExtractor\\Tests\\": "tests/phpunit/",
            "CosmosDbExtractor\\FunctionalTests\\": "tests/functional/"
        }
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests-datadir": "phpunit tests/functional",
        "tests": [
            "@tests-phpunit",
            "@tests-datadir"
        ],

        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor,node_modules --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor,node_modules --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "eslint": "./node_modules/.bin/eslint --color src",
        "eslint-fix": "./node_modules/.bin/eslint --fix --color src",
        "build": [
            "@phplint",
            "@phpcs",
            "@phpstan",
            "@eslint",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true,
        "allow-plugins": {
            "dealerdirect/phpcodesniffer-composer-installer": true
        }
    }
}


================================================
File: composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "0059d8906944078c059ca33f445437b0",
    "packages": [
        {
            "name": "evenement/evenement",
            "version": "v3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/igorw/evenement.git",
                "reference": "0a16b0d71ab13284339abb99d9d2bd813640efbc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/igorw/evenement/zipball/0a16b0d71ab13284339abb99d9d2bd813640efbc",
                "reference": "0a16b0d71ab13284339abb99d9d2bd813640efbc",
                "shasum": ""
            },
            "require": {
                "php": ">=7.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9 || ^6"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Evenement\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Igor Wiedler",
                    "email": "igor@wiedler.ch"
                }
            ],
            "description": "Événement is a very simple event dispatching library for PHP",
            "keywords": [
                "event-dispatcher",
                "event-emitter"
            ],
            "support": {
                "issues": "https://github.com/igorw/evenement/issues",
                "source": "https://github.com/igorw/evenement/tree/v3.0.2"
            },
            "time": "2023-08-08T05:53:35+00:00"
        },
        {
            "name": "halaxa/json-machine",
            "version": "0.3.3",
            "source": {
                "type": "git",
                "url": "https://github.com/halaxa/json-machine.git",
                "reference": "6333030d3f5f3673738db30425264ca5d901aac8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/halaxa/json-machine/zipball/6333030d3f5f3673738db30425264ca5d901aac8",
                "reference": "6333030d3f5f3673738db30425264ca5d901aac8",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "php": ">=5.6"
            },
            "require-dev": {
                "guzzlehttp/guzzle": "^6",
                "phpunit/phpunit": "^5.7",
                "symfony/http-client": "^5"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/functions.php"
                ],
                "psr-4": {
                    "JsonMachine\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "authors": [
                {
                    "name": "Filip Halaxa",
                    "email": "filip@halaxa.cz"
                }
            ],
            "description": "Efficient, easy-to-use and fast JSON pull parser",
            "support": {
                "issues": "https://github.com/halaxa/json-machine/issues",
                "source": "https://github.com/halaxa/json-machine/tree/0.3.3"
            },
            "time": "2019-12-20T18:30:23+00:00"
        },
        {
            "name": "keboola/common-exceptions",
            "version": "1.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/common-exceptions.git",
                "reference": "35ac327808f0e4157c9de6cbe0bf8536145cb5ac"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/common-exceptions/zipball/35ac327808f0e4157c9de6cbe0bf8536145cb5ac",
                "reference": "35ac327808f0e4157c9de6cbe0bf8536145cb5ac",
                "shasum": ""
            },
            "require": {
                "php": "^7.1|^8.0"
            },
            "require-dev": {
                "keboola/coding-standard": "^13.0",
                "keboola/php-temp": "^1.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpstan": "^0.12.93",
                "phpunit/phpunit": "^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\CommonExceptions\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Common exceptions shared between different applications",
            "support": {
                "source": "https://github.com/keboola/common-exceptions/tree/1.2.1"
            },
            "time": "2022-10-02T21:12:00+00:00"
        },
        {
            "name": "keboola/csv",
            "version": "3.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csv.git",
                "reference": "73ffd7e6682b7286ccf770598ddaeb3a10b8832e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csv/zipball/73ffd7e6682b7286ccf770598ddaeb3a10b8832e",
                "reference": "73ffd7e6682b7286ccf770598ddaeb3a10b8832e",
                "shasum": ""
            },
            "require": {
                "php": ">=7.4"
            },
            "require-dev": {
                "ext-json": "*",
                "keboola/coding-standard": "^15.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpdoc-parser": "^1.25",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": ">=7.5 <=9.6"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Csv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola CSV reader and writer",
            "homepage": "http://keboola.com",
            "keywords": [
                "csv",
                "rfc4180"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csv/issues",
                "source": "https://github.com/keboola/php-csv/tree/3.4.0"
            },
            "time": "2024-01-11T07:47:58+00:00"
        },
        {
            "name": "keboola/csvmap",
            "version": "2.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csvmap.git",
                "reference": "b818b565e7b42f0c19bb1f932537da6c1fecf3ae"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csvmap/zipball/b818b565e7b42f0c19bb1f932537da6c1fecf3ae",
                "reference": "b818b565e7b42f0c19bb1f932537da6c1fecf3ae",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/csv": "^3.0",
                "keboola/php-csvtable": "^2.1",
                "keboola/php-utils": "^4.1",
                "php": "^8.1"
            },
            "require-dev": {
                "keboola/coding-standard": "^13.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpstan": "^1.4",
                "phpunit/phpunit": ">=7.5"
            },
            "type": "library",
            "autoload": {
                "psr-0": {
                    "Keboola\\CsvMap": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ondrej Vana",
                    "email": "kachna@keboola.cz"
                }
            ],
            "description": "Flatten an object into a CSV file(s)",
            "keywords": [
                "csv",
                "flatten",
                "object"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csvmap/issues",
                "source": "https://github.com/keboola/php-csvmap/tree/2.1.0"
            },
            "time": "2022-05-10T11:34:12+00:00"
        },
        {
            "name": "keboola/php-component",
            "version": "10.1.4",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-component.git",
                "reference": "ed4ddea277ceb443567e10204a5d86576d7ffe7a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-component/zipball/ed4ddea277ceb443567e10204a5d86576d7ffe7a",
                "reference": "ed4ddea277ceb443567e10204a5d86576d7ffe7a",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/common-exceptions": "^1.2",
                "monolog/monolog": "^2.3",
                "php": ">=8.1",
                "symfony/config": "^5.4|^6.0",
                "symfony/filesystem": "^5.4|^6.0",
                "symfony/finder": "^5.4|^6.0",
                "symfony/property-access": "^5.4|^6.0",
                "symfony/serializer": "^5.4|^6.0"
            },
            "require-dev": {
                "devedge/sami-github": "^1.0",
                "keboola/coding-standard": "^15.0",
                "keboola/php-temp": "^2.0",
                "phpstan/phpstan": "^1.4",
                "phpunit/phpunit": "^9.5"
            },
            "type": "project",
            "autoload": {
                "psr-4": {
                    "Keboola\\Component\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Helper classes for developing Keboola PHP components",
            "keywords": [
                "component",
                "docker",
                "keboola"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-component/issues",
                "source": "https://github.com/keboola/php-component/tree/10.1.4"
            },
            "time": "2024-07-30T13:34:46+00:00"
        },
        {
            "name": "keboola/php-csvtable",
            "version": "2.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csvtable.git",
                "reference": "11f5a00348dbd4e249cf0ae53f09b757201a18bd"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csvtable/zipball/11f5a00348dbd4e249cf0ae53f09b757201a18bd",
                "reference": "11f5a00348dbd4e249cf0ae53f09b757201a18bd",
                "shasum": ""
            },
            "require": {
                "keboola/csv": "^3.0",
                "keboola/php-temp": "^2.0",
                "php": "^8.1"
            },
            "require-dev": {
                "keboola/coding-standard": "^13.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpstan": "^1.4",
                "phpunit/phpunit": ">=7.5"
            },
            "type": "library",
            "autoload": {
                "psr-0": {
                    "Keboola\\CsvTable": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ondrej Vana",
                    "email": "kachna@keboola.cz"
                }
            ],
            "description": "CSV file class with Keboola StorageApi extensions",
            "keywords": [
                "csv",
                "storageapi",
                "table"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csvtable/issues",
                "source": "https://github.com/keboola/php-csvtable/tree/2.1.0"
            },
            "time": "2022-05-10T11:09:22+00:00"
        },
        {
            "name": "keboola/php-temp",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/filesystem": ">2.8"
            },
            "require-dev": {
                "infection/infection": "^0.12",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^8.0",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0|^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Temp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Temp library handles application temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-temp/issues",
                "source": "https://github.com/keboola/php-temp/tree/2.0.1"
            },
            "time": "2019-04-26T07:18:24+00:00"
        },
        {
            "name": "keboola/php-utils",
            "version": "4.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-utils.git",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-utils/zipball/f5be83a50b5c4858f5698747e8a795048a89c382",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382",
                "shasum": ""
            },
            "require": {
                "keboola/sanitizer": "^0.1",
                "php": ">=5.6.0",
                "seld/jsonlint": "^1.4"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "~0.2",
                "phpunit/phpunit": "~5.0",
                "squizlabs/php_codesniffer": "~2.4"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/Keboola/Utils/jsonDecode.php",
                    "src/Keboola/Utils/sanitizeUtf8.php",
                    "src/Keboola/Utils/objectToArray.php",
                    "src/Keboola/Utils/formatDateTime.php",
                    "src/Keboola/Utils/replaceDates.php",
                    "src/Keboola/Utils/replaceDatesInArray.php",
                    "src/Keboola/Utils/buildUrl.php",
                    "src/Keboola/Utils/httpBuildUrl.php",
                    "src/Keboola/Utils/returnBytes.php",
                    "src/Keboola/Utils/camelize.php",
                    "src/Keboola/Utils/getDataFromPath.php",
                    "src/Keboola/Utils/isValidDateTimeString.php",
                    "src/Keboola/Utils/flattenArray.php",
                    "src/Keboola/Utils/arrayToObject.php",
                    "src/Keboola/Utils/isEmptyObject.php",
                    "src/Keboola/Utils/stripInvalidUtf16.php",
                    "src/Keboola/Utils/toAscii.php",
                    "src/Keboola/Utils/sanitizeColumnName.php",
                    "src/Keboola/Utils/formatBytes.php"
                ],
                "psr-0": {
                    "Keboola\\Utils": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Misc utility functions",
            "keywords": [
                "utility"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-utils/issues",
                "source": "https://github.com/keboola/php-utils/tree/master"
            },
            "time": "2019-10-04T20:55:45+00:00"
        },
        {
            "name": "keboola/sanitizer",
            "version": "0.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/sanitizer.git",
                "reference": "e3b65cf64fc891406b2849c096cd3b0edef19900"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/sanitizer/zipball/e3b65cf64fc891406b2849c096cd3b0edef19900",
                "reference": "e3b65cf64fc891406b2849c096cd3b0edef19900",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Utils\\Sanitizer\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Column name sanitizer",
            "support": {
                "issues": "https://github.com/keboola/sanitizer/issues",
                "source": "https://github.com/keboola/sanitizer/tree/0.1.1"
            },
            "time": "2022-06-02T18:15:37+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "2.9.3",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "a30bfe2e142720dfa990d0a7e573997f5d884215"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/a30bfe2e142720dfa990d0a7e573997f5d884215",
                "reference": "a30bfe2e142720dfa990d0a7e573997f5d884215",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2",
                "psr/log": "^1.0.1 || ^2.0 || ^3.0"
            },
            "provide": {
                "psr/log-implementation": "1.0.0 || 2.0.0 || 3.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "elasticsearch/elasticsearch": "^7 || ^8",
                "ext-json": "*",
                "graylog2/gelf-php": "^1.4.2 || ^2@dev",
                "guzzlehttp/guzzle": "^7.4",
                "guzzlehttp/psr7": "^2.2",
                "mongodb/mongodb": "^1.8",
                "php-amqplib/php-amqplib": "~2.4 || ^3",
                "phpspec/prophecy": "^1.15",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": "^8.5.38 || ^9.6.19",
                "predis/predis": "^1.1 || ^2.0",
                "rollbar/rollbar": "^1.3 || ^2 || ^3",
                "ruflin/elastica": "^7",
                "swiftmailer/swiftmailer": "^5.3|^6.0",
                "symfony/mailer": "^5.4 || ^6",
                "symfony/mime": "^5.4 || ^6"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-curl": "Required to send log messages using the IFTTTHandler, the LogglyHandler, the SendGridHandler, the SlackWebhookHandler or the TelegramBotHandler",
                "ext-mbstring": "Allow to work properly with unicode symbols",
                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
                "ext-openssl": "Required to send log messages using SSL",
                "ext-sockets": "Allow sending log messages to a Syslog server (via UDP driver)",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "https://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "https://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/monolog/issues",
                "source": "https://github.com/Seldaek/monolog/tree/2.9.3"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/monolog/monolog",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-12T20:52:51+00:00"
        },
        {
            "name": "psr/container",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/container.git",
                "reference": "c71ecc56dfe541dbd90c5360474fbc405f8d5963"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/container/zipball/c71ecc56dfe541dbd90c5360474fbc405f8d5963",
                "reference": "c71ecc56dfe541dbd90c5360474fbc405f8d5963",
                "shasum": ""
            },
            "require": {
                "php": ">=7.4.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Container\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common Container Interface (PHP FIG PSR-11)",
            "homepage": "https://github.com/php-fig/container",
            "keywords": [
                "PSR-11",
                "container",
                "container-interface",
                "container-interop",
                "psr"
            ],
            "support": {
                "issues": "https://github.com/php-fig/container/issues",
                "source": "https://github.com/php-fig/container/tree/2.0.2"
            },
            "time": "2021-11-05T16:47:00+00:00"
        },
        {
            "name": "psr/log",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "fe5ea303b0887d5caefd3d431c3e61ad47037001"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/fe5ea303b0887d5caefd3d431c3e61ad47037001",
                "reference": "fe5ea303b0887d5caefd3d431c3e61ad47037001",
                "shasum": ""
            },
            "require": {
                "php": ">=8.0.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "support": {
                "source": "https://github.com/php-fig/log/tree/3.0.0"
            },
            "time": "2021-07-14T16:46:02+00:00"
        },
        {
            "name": "react/child-process",
            "version": "v0.6.5",
            "source": {
                "type": "git",
                "url": "https://github.com/reactphp/child-process.git",
                "reference": "e71eb1aa55f057c7a4a0d08d06b0b0a484bead43"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/reactphp/child-process/zipball/e71eb1aa55f057c7a4a0d08d06b0b0a484bead43",
                "reference": "e71eb1aa55f057c7a4a0d08d06b0b0a484bead43",
                "shasum": ""
            },
            "require": {
                "evenement/evenement": "^3.0 || ^2.0 || ^1.0",
                "php": ">=5.3.0",
                "react/event-loop": "^1.2",
                "react/stream": "^1.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3 || ^5.7 || ^4.8.35",
                "react/socket": "^1.8",
                "sebastian/environment": "^5.0 || ^3.0 || ^2.0 || ^1.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "React\\ChildProcess\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Christian Lück",
                    "email": "christian@clue.engineering",
                    "homepage": "https://clue.engineering/"
                },
                {
                    "name": "Cees-Jan Kiewiet",
                    "email": "reactphp@ceesjankiewiet.nl",
                    "homepage": "https://wyrihaximus.net/"
                },
                {
                    "name": "Jan Sorgalla",
                    "email": "jsorgalla@gmail.com",
                    "homepage": "https://sorgalla.com/"
                },
                {
                    "name": "Chris Boden",
                    "email": "cboden@gmail.com",
                    "homepage": "https://cboden.dev/"
                }
            ],
            "description": "Event-driven library for executing child processes with ReactPHP.",
            "keywords": [
                "event-driven",
                "process",
                "reactphp"
            ],
            "support": {
                "issues": "https://github.com/reactphp/child-process/issues",
                "source": "https://github.com/reactphp/child-process/tree/v0.6.5"
            },
            "funding": [
                {
                    "url": "https://github.com/WyriHaximus",
                    "type": "github"
                },
                {
                    "url": "https://github.com/clue",
                    "type": "github"
                }
            ],
            "time": "2022-09-16T13:41:56+00:00"
        },
        {
            "name": "react/event-loop",
            "version": "v1.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/reactphp/event-loop.git",
                "reference": "bbe0bd8c51ffc05ee43f1729087ed3bdf7d53354"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/reactphp/event-loop/zipball/bbe0bd8c51ffc05ee43f1729087ed3bdf7d53354",
                "reference": "bbe0bd8c51ffc05ee43f1729087ed3bdf7d53354",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.6 || ^5.7 || ^4.8.36"
            },
            "suggest": {
                "ext-pcntl": "For signal handling support when using the StreamSelectLoop"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "React\\EventLoop\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Christian Lück",
                    "email": "christian@clue.engineering",
                    "homepage": "https://clue.engineering/"
                },
                {
                    "name": "Cees-Jan Kiewiet",
                    "email": "reactphp@ceesjankiewiet.nl",
                    "homepage": "https://wyrihaximus.net/"
                },
                {
                    "name": "Jan Sorgalla",
                    "email": "jsorgalla@gmail.com",
                    "homepage": "https://sorgalla.com/"
                },
                {
                    "name": "Chris Boden",
                    "email": "cboden@gmail.com",
                    "homepage": "https://cboden.dev/"
                }
            ],
            "description": "ReactPHP's core reactor event loop that libraries can use for evented I/O.",
            "keywords": [
                "asynchronous",
                "event-loop"
            ],
            "support": {
                "issues": "https://github.com/reactphp/event-loop/issues",
                "source": "https://github.com/reactphp/event-loop/tree/v1.5.0"
            },
            "funding": [
                {
                    "url": "https://opencollective.com/reactphp",
                    "type": "open_collective"
                }
            ],
            "time": "2023-11-13T13:48:05+00:00"
        },
        {
            "name": "react/promise",
            "version": "v2.11.0",
            "source": {
                "type": "git",
                "url": "https://github.com/reactphp/promise.git",
                "reference": "1a8460931ea36dc5c76838fec5734d55c88c6831"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/reactphp/promise/zipball/1a8460931ea36dc5c76838fec5734d55c88c6831",
                "reference": "1a8460931ea36dc5c76838fec5734d55c88c6831",
                "shasum": ""
            },
            "require": {
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.6 || ^5.7 || ^4.8.36"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/functions_include.php"
                ],
                "psr-4": {
                    "React\\Promise\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jan Sorgalla",
                    "email": "jsorgalla@gmail.com",
                    "homepage": "https://sorgalla.com/"
                },
                {
                    "name": "Christian Lück",
                    "email": "christian@clue.engineering",
                    "homepage": "https://clue.engineering/"
                },
                {
                    "name": "Cees-Jan Kiewiet",
                    "email": "reactphp@ceesjankiewiet.nl",
                    "homepage": "https://wyrihaximus.net/"
                },
                {
                    "name": "Chris Boden",
                    "email": "cboden@gmail.com",
                    "homepage": "https://cboden.dev/"
                }
            ],
            "description": "A lightweight implementation of CommonJS Promises/A for PHP",
            "keywords": [
                "promise",
                "promises"
            ],
            "support": {
                "issues": "https://github.com/reactphp/promise/issues",
                "source": "https://github.com/reactphp/promise/tree/v2.11.0"
            },
            "funding": [
                {
                    "url": "https://opencollective.com/reactphp",
                    "type": "open_collective"
                }
            ],
            "time": "2023-11-16T16:16:50+00:00"
        },
        {
            "name": "react/stream",
            "version": "v1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/reactphp/stream.git",
                "reference": "1e5b0acb8fe55143b5b426817155190eb6f5b18d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/reactphp/stream/zipball/1e5b0acb8fe55143b5b426817155190eb6f5b18d",
                "reference": "1e5b0acb8fe55143b5b426817155190eb6f5b18d",
                "shasum": ""
            },
            "require": {
                "evenement/evenement": "^3.0 || ^2.0 || ^1.0",
                "php": ">=5.3.8",
                "react/event-loop": "^1.2"
            },
            "require-dev": {
                "clue/stream-filter": "~1.2",
                "phpunit/phpunit": "^9.6 || ^5.7 || ^4.8.36"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "React\\Stream\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Christian Lück",
                    "email": "christian@clue.engineering",
                    "homepage": "https://clue.engineering/"
                },
                {
                    "name": "Cees-Jan Kiewiet",
                    "email": "reactphp@ceesjankiewiet.nl",
                    "homepage": "https://wyrihaximus.net/"
                },
                {
                    "name": "Jan Sorgalla",
                    "email": "jsorgalla@gmail.com",
                    "homepage": "https://sorgalla.com/"
                },
                {
                    "name": "Chris Boden",
                    "email": "cboden@gmail.com",
                    "homepage": "https://cboden.dev/"
                }
            ],
            "description": "Event-driven readable and writable streams for non-blocking I/O in ReactPHP",
            "keywords": [
                "event-driven",
                "io",
                "non-blocking",
                "pipe",
                "reactphp",
                "readable",
                "stream",
                "writable"
            ],
            "support": {
                "issues": "https://github.com/reactphp/stream/issues",
                "source": "https://github.com/reactphp/stream/tree/v1.4.0"
            },
            "funding": [
                {
                    "url": "https://opencollective.com/reactphp",
                    "type": "open_collective"
                }
            ],
            "time": "2024-06-11T12:45:25+00:00"
        },
        {
            "name": "seld/jsonlint",
            "version": "1.10.2",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/jsonlint.git",
                "reference": "9bb7db07b5d66d90f6ebf542f09fc67d800e5259"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/jsonlint/zipball/9bb7db07b5d66d90f6ebf542f09fc67d800e5259",
                "reference": "9bb7db07b5d66d90f6ebf542f09fc67d800e5259",
                "shasum": ""
            },
            "require": {
                "php": "^5.3 || ^7.0 || ^8.0"
            },
            "require-dev": {
                "phpstan/phpstan": "^1.5",
                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0 || ^8.5.13"
            },
            "bin": [
                "bin/jsonlint"
            ],
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Seld\\JsonLint\\": "src/Seld/JsonLint/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "https://seld.be"
                }
            ],
            "description": "JSON Linter",
            "keywords": [
                "json",
                "linter",
                "parser",
                "validator"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/jsonlint/issues",
                "source": "https://github.com/Seldaek/jsonlint/tree/1.10.2"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/seld/jsonlint",
                    "type": "tidelift"
                }
            ],
            "time": "2024-02-07T12:57:50+00:00"
        },
        {
            "name": "symfony/config",
            "version": "v6.4.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/config.git",
                "reference": "12e7e52515ce37191b193cf3365903c4f3951e35"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/config/zipball/12e7e52515ce37191b193cf3365903c4f3951e35",
                "reference": "12e7e52515ce37191b193cf3365903c4f3951e35",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/deprecation-contracts": "^2.5|^3",
                "symfony/filesystem": "^5.4|^6.0|^7.0",
                "symfony/polyfill-ctype": "~1.8"
            },
            "conflict": {
                "symfony/finder": "<5.4",
                "symfony/service-contracts": "<2.5"
            },
            "require-dev": {
                "symfony/event-dispatcher": "^5.4|^6.0|^7.0",
                "symfony/finder": "^5.4|^6.0|^7.0",
                "symfony/messenger": "^5.4|^6.0|^7.0",
                "symfony/service-contracts": "^2.5|^3",
                "symfony/yaml": "^5.4|^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Config\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Helps you find, load, combine, autofill and validate configuration values of any kind",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/config/tree/v6.4.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:49:08+00:00"
        },
        {
            "name": "symfony/deprecation-contracts",
            "version": "v3.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/deprecation-contracts.git",
                "reference": "0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1",
                "reference": "0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.5-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "files": [
                    "function.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "A generic function and convention to trigger deprecation notices",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/deprecation-contracts/tree/v3.5.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-18T09:32:20+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v6.4.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "4d37529150e7081c51b3c5d5718c55a04a9503f3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/4d37529150e7081c51b3c5d5718c55a04a9503f3",
                "reference": "4d37529150e7081c51b3c5d5718c55a04a9503f3",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-mbstring": "~1.8"
            },
            "require-dev": {
                "symfony/process": "^5.4|^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides basic utilities for the filesystem",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/filesystem/tree/v6.4.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:49:08+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v6.4.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "3ef977a43883215d560a2cecb82ec8e62131471c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/3ef977a43883215d560a2cecb82ec8e62131471c",
                "reference": "3ef977a43883215d560a2cecb82ec8e62131471c",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1"
            },
            "require-dev": {
                "symfony/filesystem": "^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Finds files and directories via an intuitive fluent interface",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/finder/tree/v6.4.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:49:08+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.30.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "0424dff1c58f028c451efff2045f5d92410bd540"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/0424dff1c58f028c451efff2045f5d92410bd540",
                "reference": "0424dff1c58f028c451efff2045f5d92410bd540",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "provide": {
                "ext-ctype": "*"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.30.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T15:07:36+00:00"
        },
        {
            "name": "symfony/polyfill-intl-grapheme",
            "version": "v1.30.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-grapheme.git",
                "reference": "64647a7c30b2283f5d49b874d84a18fc22054b7a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-grapheme/zipball/64647a7c30b2283f5d49b874d84a18fc22054b7a",
                "reference": "64647a7c30b2283f5d49b874d84a18fc22054b7a",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Grapheme\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's grapheme_* functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "grapheme",
                "intl",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-grapheme/tree/v1.30.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T15:07:36+00:00"
        },
        {
            "name": "symfony/polyfill-intl-normalizer",
            "version": "v1.30.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-normalizer.git",
                "reference": "a95281b0be0d9ab48050ebd988b967875cdb9fdb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/a95281b0be0d9ab48050ebd988b967875cdb9fdb",
                "reference": "a95281b0be0d9ab48050ebd988b967875cdb9fdb",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Normalizer\\": ""
                },
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's Normalizer class and related functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "intl",
                "normalizer",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-normalizer/tree/v1.30.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T15:07:36+00:00"
        },
        {
            "name": "symfony/polyfill-mbstring",
            "version": "v1.30.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-mbstring.git",
                "reference": "fd22ab50000ef01661e2a31d850ebaa297f8e03c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/fd22ab50000ef01661e2a31d850ebaa297f8e03c",
                "reference": "fd22ab50000ef01661e2a31d850ebaa297f8e03c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "provide": {
                "ext-mbstring": "*"
            },
            "suggest": {
                "ext-mbstring": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Mbstring\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for the Mbstring extension",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "mbstring",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.30.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-19T12:30:46+00:00"
        },
        {
            "name": "symfony/property-access",
            "version": "v6.4.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/property-access.git",
                "reference": "e4d9b00983612f9c0013ca37c61affdba2dd975a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/property-access/zipball/e4d9b00983612f9c0013ca37c61affdba2dd975a",
                "reference": "e4d9b00983612f9c0013ca37c61affdba2dd975a",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/deprecation-contracts": "^2.5|^3",
                "symfony/property-info": "^5.4|^6.0|^7.0"
            },
            "require-dev": {
                "symfony/cache": "^5.4|^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\PropertyAccess\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides functions to read and write from/to an object or array using a simple string notation",
            "homepage": "https://symfony.com",
            "keywords": [
                "access",
                "array",
                "extraction",
                "index",
                "injection",
                "object",
                "property",
                "property-path",
                "reflection"
            ],
            "support": {
                "source": "https://github.com/symfony/property-access/tree/v6.4.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:49:08+00:00"
        },
        {
            "name": "symfony/property-info",
            "version": "v7.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/property-info.git",
                "reference": "0f80f818c6728f15de30a4f89866d68e4912ae84"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/property-info/zipball/0f80f818c6728f15de30a4f89866d68e4912ae84",
                "reference": "0f80f818c6728f15de30a4f89866d68e4912ae84",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/string": "^6.4|^7.0",
                "symfony/type-info": "^7.1"
            },
            "conflict": {
                "phpdocumentor/reflection-docblock": "<5.2",
                "phpdocumentor/type-resolver": "<1.5.1",
                "symfony/dependency-injection": "<6.4",
                "symfony/serializer": "<6.4"
            },
            "require-dev": {
                "phpdocumentor/reflection-docblock": "^5.2",
                "phpstan/phpdoc-parser": "^1.0",
                "symfony/cache": "^6.4|^7.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/serializer": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\PropertyInfo\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Kévin Dunglas",
                    "email": "dunglas@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Extracts information about PHP class' properties using metadata of popular sources",
            "homepage": "https://symfony.com",
            "keywords": [
                "doctrine",
                "phpdoc",
                "property",
                "symfony",
                "type",
                "validator"
            ],
            "support": {
                "source": "https://github.com/symfony/property-info/tree/v7.1.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:57:53+00:00"
        },
        {
            "name": "symfony/serializer",
            "version": "v6.4.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/serializer.git",
                "reference": "d6eda9966a3e5d1823c1cedf41bf98f8ed969d7c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/serializer/zipball/d6eda9966a3e5d1823c1cedf41bf98f8ed969d7c",
                "reference": "d6eda9966a3e5d1823c1cedf41bf98f8ed969d7c",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/deprecation-contracts": "^2.5|^3",
                "symfony/polyfill-ctype": "~1.8"
            },
            "conflict": {
                "doctrine/annotations": "<1.12",
                "phpdocumentor/reflection-docblock": "<3.2.2",
                "phpdocumentor/type-resolver": "<1.4.0",
                "symfony/dependency-injection": "<5.4",
                "symfony/property-access": "<5.4",
                "symfony/property-info": "<5.4.24|>=6,<6.2.11",
                "symfony/uid": "<5.4",
                "symfony/validator": "<6.4",
                "symfony/yaml": "<5.4"
            },
            "require-dev": {
                "doctrine/annotations": "^1.12|^2",
                "phpdocumentor/reflection-docblock": "^3.2|^4.0|^5.0",
                "seld/jsonlint": "^1.10",
                "symfony/cache": "^5.4|^6.0|^7.0",
                "symfony/config": "^5.4|^6.0|^7.0",
                "symfony/console": "^5.4|^6.0|^7.0",
                "symfony/dependency-injection": "^5.4|^6.0|^7.0",
                "symfony/error-handler": "^5.4|^6.0|^7.0",
                "symfony/filesystem": "^5.4|^6.0|^7.0",
                "symfony/form": "^5.4|^6.0|^7.0",
                "symfony/http-foundation": "^5.4|^6.0|^7.0",
                "symfony/http-kernel": "^5.4|^6.0|^7.0",
                "symfony/messenger": "^5.4|^6.0|^7.0",
                "symfony/mime": "^5.4|^6.0|^7.0",
                "symfony/property-access": "^5.4.26|^6.3|^7.0",
                "symfony/property-info": "^5.4.24|^6.2.11|^7.0",
                "symfony/translation-contracts": "^2.5|^3",
                "symfony/uid": "^5.4|^6.0|^7.0",
                "symfony/validator": "^6.4|^7.0",
                "symfony/var-dumper": "^5.4|^6.0|^7.0",
                "symfony/var-exporter": "^5.4|^6.0|^7.0",
                "symfony/yaml": "^5.4|^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Serializer\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Handles serializing and deserializing data structures, including object graphs, into array structures or other formats like XML and JSON.",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/serializer/tree/v6.4.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:49:08+00:00"
        },
        {
            "name": "symfony/string",
            "version": "v7.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/string.git",
                "reference": "60bc311c74e0af215101235aa6f471bcbc032df2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/string/zipball/60bc311c74e0af215101235aa6f471bcbc032df2",
                "reference": "60bc311c74e0af215101235aa6f471bcbc032df2",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-intl-grapheme": "~1.0",
                "symfony/polyfill-intl-normalizer": "~1.0",
                "symfony/polyfill-mbstring": "~1.0"
            },
            "conflict": {
                "symfony/translation-contracts": "<2.5"
            },
            "require-dev": {
                "symfony/emoji": "^7.1",
                "symfony/error-handler": "^6.4|^7.0",
                "symfony/http-client": "^6.4|^7.0",
                "symfony/intl": "^6.4|^7.0",
                "symfony/translation-contracts": "^2.5|^3.0",
                "symfony/var-exporter": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "Resources/functions.php"
                ],
                "psr-4": {
                    "Symfony\\Component\\String\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides an object-oriented API to strings and deals with bytes, UTF-8 code points and grapheme clusters in a unified way",
            "homepage": "https://symfony.com",
            "keywords": [
                "grapheme",
                "i18n",
                "string",
                "unicode",
                "utf-8",
                "utf8"
            ],
            "support": {
                "source": "https://github.com/symfony/string/tree/v7.1.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-04T06:40:14+00:00"
        },
        {
            "name": "symfony/type-info",
            "version": "v7.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/type-info.git",
                "reference": "60b28eb733f1453287f1263ed305b96091e0d1dc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/type-info/zipball/60b28eb733f1453287f1263ed305b96091e0d1dc",
                "reference": "60b28eb733f1453287f1263ed305b96091e0d1dc",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "psr/container": "^1.1|^2.0"
            },
            "conflict": {
                "phpstan/phpdoc-parser": "<1.0",
                "symfony/dependency-injection": "<6.4",
                "symfony/property-info": "<6.4"
            },
            "require-dev": {
                "phpstan/phpdoc-parser": "^1.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/property-info": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\TypeInfo\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mathias Arlaud",
                    "email": "mathias.arlaud@gmail.com"
                },
                {
                    "name": "Baptiste LEDUC",
                    "email": "baptiste.leduc@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Extracts PHP types information.",
            "homepage": "https://symfony.com",
            "keywords": [
                "PHPStan",
                "phpdoc",
                "symfony",
                "type"
            ],
            "support": {
                "source": "https://github.com/symfony/type-info/tree/v7.1.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:59:31+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "colinodell/psr-testlogger",
            "version": "v1.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/colinodell/psr-testlogger.git",
                "reference": "291f5b70ea0d3139787d18f442365a8e2784a462"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/colinodell/psr-testlogger/zipball/291f5b70ea0d3139787d18f442365a8e2784a462",
                "reference": "291f5b70ea0d3139787d18f442365a8e2784a462",
                "shasum": ""
            },
            "require": {
                "php": "^8.0",
                "psr/log": "^1.0 || ^2.0 || ^3.0"
            },
            "provide": {
                "psr/log-implementation": "1.0.0 || 2.0.0 || 3.0.0"
            },
            "require-dev": {
                "phpstan/phpstan": "^1.9.2",
                "phpunit/phpunit": "^9.5.5",
                "scrutinizer/ocular": "^1.8.1",
                "unleashedtech/php-coding-standard": "^3.1",
                "vimeo/psalm": "^4.30.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "ColinODell\\PsrTestLogger\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Colin O'Dell",
                    "email": "colinodell@gmail.com",
                    "homepage": "https://www.colinodell.com",
                    "role": "Lead Developer"
                }
            ],
            "description": "PSR-3 compliant test logger based on psr/log v1's, but compatible with v2 and v3 too!",
            "homepage": "https://github.com/colinodell/psr-testlogger",
            "keywords": [
                "log",
                "logger",
                "logging",
                "mock",
                "phpunit",
                "psr",
                "test",
                "unit"
            ],
            "support": {
                "issues": "https://github.com/colinodell/psr-testlogger/issues",
                "rss": "https://github.com/colinodell/psr-testlogger/releases.atom",
                "source": "https://github.com/colinodell/psr-testlogger"
            },
            "funding": [
                {
                    "url": "https://www.colinodell.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://www.paypal.me/colinpodell/10.00",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/colinodell",
                    "type": "github"
                }
            ],
            "time": "2023-11-29T23:03:34+00:00"
        },
        {
            "name": "dealerdirect/phpcodesniffer-composer-installer",
            "version": "v1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/PHPCSStandards/composer-installer.git",
                "reference": "4be43904336affa5c2f70744a348312336afd0da"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/PHPCSStandards/composer-installer/zipball/4be43904336affa5c2f70744a348312336afd0da",
                "reference": "4be43904336affa5c2f70744a348312336afd0da",
                "shasum": ""
            },
            "require": {
                "composer-plugin-api": "^1.0 || ^2.0",
                "php": ">=5.4",
                "squizlabs/php_codesniffer": "^2.0 || ^3.1.0 || ^4.0"
            },
            "require-dev": {
                "composer/composer": "*",
                "ext-json": "*",
                "ext-zip": "*",
                "php-parallel-lint/php-parallel-lint": "^1.3.1",
                "phpcompatibility/php-compatibility": "^9.0",
                "yoast/phpunit-polyfills": "^1.0"
            },
            "type": "composer-plugin",
            "extra": {
                "class": "PHPCSStandards\\Composer\\Plugin\\Installers\\PHPCodeSniffer\\Plugin"
            },
            "autoload": {
                "psr-4": {
                    "PHPCSStandards\\Composer\\Plugin\\Installers\\PHPCodeSniffer\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Franck Nijhof",
                    "email": "franck.nijhof@dealerdirect.com",
                    "homepage": "http://www.frenck.nl",
                    "role": "Developer / IT Manager"
                },
                {
                    "name": "Contributors",
                    "homepage": "https://github.com/PHPCSStandards/composer-installer/graphs/contributors"
                }
            ],
            "description": "PHP_CodeSniffer Standards Composer Installer Plugin",
            "homepage": "http://www.dealerdirect.com",
            "keywords": [
                "PHPCodeSniffer",
                "PHP_CodeSniffer",
                "code quality",
                "codesniffer",
                "composer",
                "installer",
                "phpcbf",
                "phpcs",
                "plugin",
                "qa",
                "quality",
                "standard",
                "standards",
                "style guide",
                "stylecheck",
                "tests"
            ],
            "support": {
                "issues": "https://github.com/PHPCSStandards/composer-installer/issues",
                "source": "https://github.com/PHPCSStandards/composer-installer"
            },
            "time": "2023-01-05T11:28:13+00:00"
        },
        {
            "name": "doctrine/instantiator",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/instantiator.git",
                "reference": "c6222283fa3f4ac679f8b9ced9a4e23f163e80d0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/c6222283fa3f4ac679f8b9ced9a4e23f163e80d0",
                "reference": "c6222283fa3f4ac679f8b9ced9a4e23f163e80d0",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "require-dev": {
                "doctrine/coding-standard": "^11",
                "ext-pdo": "*",
                "ext-phar": "*",
                "phpbench/phpbench": "^1.2",
                "phpstan/phpstan": "^1.9.4",
                "phpstan/phpstan-phpunit": "^1.3",
                "phpunit/phpunit": "^9.5.27",
                "vimeo/psalm": "^5.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com",
                    "homepage": "https://ocramius.github.io/"
                }
            ],
            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
            "keywords": [
                "constructor",
                "instantiate"
            ],
            "support": {
                "issues": "https://github.com/doctrine/instantiator/issues",
                "source": "https://github.com/doctrine/instantiator/tree/2.0.0"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator",
                    "type": "tidelift"
                }
            ],
            "time": "2022-12-30T00:23:10+00:00"
        },
        {
            "name": "keboola/coding-standard",
            "version": "15.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "39ae7c3d14776105d574c7c3636e76b72482916a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/39ae7c3d14776105d574c7c3636e76b72482916a",
                "reference": "39ae7c3d14776105d574c7c3636e76b72482916a",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "^8",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "support": {
                "issues": "https://github.com/keboola/phpcs-standard/issues",
                "source": "https://github.com/keboola/phpcs-standard/tree/15.0.1"
            },
            "time": "2023-12-11T08:31:50+00:00"
        },
        {
            "name": "keboola/datadir-tests",
            "version": "5.6.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/datadir-tests.git",
                "reference": "d43f7657806d660f2326d8c438dd800d7ccc1e3d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/datadir-tests/zipball/d43f7657806d660f2326d8c438dd800d7ccc1e3d",
                "reference": "d43f7657806d660f2326d8c438dd800d7ccc1e3d",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/php-temp": "^2.0",
                "php": "^7.4|^8.0",
                "phpunit/phpunit": "^9.5",
                "symfony/filesystem": "^5.0|^6.0",
                "symfony/finder": "^5.0|^6.0",
                "symfony/process": "^5.0|^6.0"
            },
            "require-dev": {
                "keboola/coding-standard": "^13.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpstan": "^1.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DatadirTests\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Tool for functional testing of Keboola Connection components",
            "support": {
                "issues": "https://github.com/keboola/datadir-tests/issues",
                "source": "https://github.com/keboola/datadir-tests/tree/5.6.0"
            },
            "time": "2023-10-20T08:02:53+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.12.0",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c",
                "reference": "3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "conflict": {
                "doctrine/collections": "<1.6.8",
                "doctrine/common": "<2.13.3 || >=3 <3.2.2"
            },
            "require-dev": {
                "doctrine/collections": "^1.6.8",
                "doctrine/common": "^2.13.3 || ^3.2.2",
                "phpspec/prophecy": "^1.10",
                "phpunit/phpunit": "^7.5.20 || ^8.5.23 || ^9.5.13"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ],
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "support": {
                "issues": "https://github.com/myclabs/DeepCopy/issues",
                "source": "https://github.com/myclabs/DeepCopy/tree/1.12.0"
            },
            "funding": [
                {
                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-12T14:39:25+00:00"
        },
        {
            "name": "nikic/php-parser",
            "version": "v5.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/nikic/PHP-Parser.git",
                "reference": "139676794dc1e9231bf7bcd123cfc0c99182cb13"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/139676794dc1e9231bf7bcd123cfc0c99182cb13",
                "reference": "139676794dc1e9231bf7bcd123cfc0c99182cb13",
                "shasum": ""
            },
            "require": {
                "ext-ctype": "*",
                "ext-json": "*",
                "ext-tokenizer": "*",
                "php": ">=7.4"
            },
            "require-dev": {
                "ircmaxell/php-yacc": "^0.0.7",
                "phpunit/phpunit": "^7.0 || ^8.0 || ^9.0"
            },
            "bin": [
                "bin/php-parse"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpParser\\": "lib/PhpParser"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Nikita Popov"
                }
            ],
            "description": "A PHP parser written in PHP",
            "keywords": [
                "parser",
                "php"
            ],
            "support": {
                "issues": "https://github.com/nikic/PHP-Parser/issues",
                "source": "https://github.com/nikic/PHP-Parser/tree/v5.0.2"
            },
            "time": "2024-03-05T20:51:40+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "54750ef60c58e43759730615a392c31c80e23176"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/54750ef60c58e43759730615a392c31c80e23176",
                "reference": "54750ef60c58e43759730615a392c31c80e23176",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-phar": "*",
                "ext-xmlwriter": "*",
                "phar-io/version": "^3.0.1",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "support": {
                "issues": "https://github.com/phar-io/manifest/issues",
                "source": "https://github.com/phar-io/manifest/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2024-03-03T12:33:53+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "3.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "4f7fd7836c6f332bb2933569e566a0d6c4cbed74"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/4f7fd7836c6f332bb2933569e566a0d6c4cbed74",
                "reference": "4f7fd7836c6f332bb2933569e566a0d6c4cbed74",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "support": {
                "issues": "https://github.com/phar-io/version/issues",
                "source": "https://github.com/phar-io/version/tree/3.2.1"
            },
            "time": "2022-02-21T01:04:05+00:00"
        },
        {
            "name": "php-parallel-lint/php-parallel-lint",
            "version": "v1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-parallel-lint/PHP-Parallel-Lint.git",
                "reference": "6db563514f27e19595a19f45a4bf757b6401194e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-parallel-lint/PHP-Parallel-Lint/zipball/6db563514f27e19595a19f45a4bf757b6401194e",
                "reference": "6db563514f27e19595a19f45a4bf757b6401194e",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "php": ">=5.3.0"
            },
            "replace": {
                "grogy/php-parallel-lint": "*",
                "jakub-onderka/php-parallel-lint": "*"
            },
            "require-dev": {
                "nette/tester": "^1.3 || ^2.0",
                "php-parallel-lint/php-console-highlighter": "0.* || ^1.0",
                "squizlabs/php_codesniffer": "^3.6"
            },
            "suggest": {
                "php-parallel-lint/php-console-highlighter": "Highlight syntax in code snippet"
            },
            "bin": [
                "parallel-lint"
            ],
            "type": "library",
            "autoload": {
                "classmap": [
                    "./src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Jakub Onderka",
                    "email": "ahoj@jakubonderka.cz"
                }
            ],
            "description": "This tool checks the syntax of PHP files about 20x faster than serial check.",
            "homepage": "https://github.com/php-parallel-lint/PHP-Parallel-Lint",
            "keywords": [
                "lint",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/issues",
                "source": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/tree/v1.4.0"
            },
            "time": "2024-03-27T12:14:49+00:00"
        },
        {
            "name": "phpstan/phpdoc-parser",
            "version": "1.29.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpdoc-parser.git",
                "reference": "fcaefacf2d5c417e928405b71b400d4ce10daaf4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpdoc-parser/zipball/fcaefacf2d5c417e928405b71b400d4ce10daaf4",
                "reference": "fcaefacf2d5c417e928405b71b400d4ce10daaf4",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "require-dev": {
                "doctrine/annotations": "^2.0",
                "nikic/php-parser": "^4.15",
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpstan/extension-installer": "^1.0",
                "phpstan/phpstan": "^1.5",
                "phpstan/phpstan-phpunit": "^1.1",
                "phpstan/phpstan-strict-rules": "^1.0",
                "phpunit/phpunit": "^9.5",
                "symfony/process": "^5.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "PHPStan\\PhpDocParser\\": [
                        "src/"
                    ]
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPDoc parser with support for nullable, intersection and generic types",
            "support": {
                "issues": "https://github.com/phpstan/phpdoc-parser/issues",
                "source": "https://github.com/phpstan/phpdoc-parser/tree/1.29.1"
            },
            "time": "2024-05-31T08:52:43+00:00"
        },
        {
            "name": "phpstan/phpstan",
            "version": "1.11.5",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan.git",
                "reference": "490f0ae1c92b082f154681d7849aee776a7c1443"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan/zipball/490f0ae1c92b082f154681d7849aee776a7c1443",
                "reference": "490f0ae1c92b082f154681d7849aee776a7c1443",
                "shasum": ""
            },
            "require": {
                "php": "^7.2|^8.0"
            },
            "conflict": {
                "phpstan/phpstan-shim": "*"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan - PHP Static Analysis Tool",
            "keywords": [
                "dev",
                "static analysis"
            ],
            "support": {
                "docs": "https://phpstan.org/user-guide/getting-started",
                "forum": "https://github.com/phpstan/phpstan/discussions",
                "issues": "https://github.com/phpstan/phpstan/issues",
                "security": "https://github.com/phpstan/phpstan/security/policy",
                "source": "https://github.com/phpstan/phpstan-src"
            },
            "funding": [
                {
                    "url": "https://github.com/ondrejmirtes",
                    "type": "github"
                },
                {
                    "url": "https://github.com/phpstan",
                    "type": "github"
                }
            ],
            "time": "2024-06-17T15:10:54+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "9.2.31",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "48c34b5d8d983006bd2adc2d0de92963b9155965"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/48c34b5d8d983006bd2adc2d0de92963b9155965",
                "reference": "48c34b5d8d983006bd2adc2d0de92963b9155965",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-xmlwriter": "*",
                "nikic/php-parser": "^4.18 || ^5.0",
                "php": ">=7.3",
                "phpunit/php-file-iterator": "^3.0.3",
                "phpunit/php-text-template": "^2.0.2",
                "sebastian/code-unit-reverse-lookup": "^2.0.2",
                "sebastian/complexity": "^2.0",
                "sebastian/environment": "^5.1.2",
                "sebastian/lines-of-code": "^1.0.3",
                "sebastian/version": "^3.0.1",
                "theseer/tokenizer": "^1.2.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcov": "PHP extension that provides line coverage",
                "ext-xdebug": "PHP extension that provides line coverage as well as branch and path coverage"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                "security": "https://github.com/sebastianbergmann/php-code-coverage/security/policy",
                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.31"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:37:42+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "3.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf",
                "reference": "cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2021-12-02T12:48:52+00:00"
        },
        {
            "name": "phpunit/php-invoker",
            "version": "3.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-invoker.git",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "ext-pcntl": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcntl": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Invoke callables with a timeout",
            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
            "keywords": [
                "process"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
                "source": "https://github.com/sebastianbergmann/php-invoker/tree/3.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:58:55+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
                "source": "https://github.com/sebastianbergmann/php-text-template/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T05:33:50+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "5.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-timer/issues",
                "source": "https://github.com/sebastianbergmann/php-timer/tree/5.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:16:10+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "9.6.19",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "a1a54a473501ef4cdeaae4e06891674114d79db8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/a1a54a473501ef4cdeaae4e06891674114d79db8",
                "reference": "a1a54a473501ef4cdeaae4e06891674114d79db8",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.3.1 || ^2",
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "ext-xmlwriter": "*",
                "myclabs/deep-copy": "^1.10.1",
                "phar-io/manifest": "^2.0.3",
                "phar-io/version": "^3.0.2",
                "php": ">=7.3",
                "phpunit/php-code-coverage": "^9.2.28",
                "phpunit/php-file-iterator": "^3.0.5",
                "phpunit/php-invoker": "^3.1.1",
                "phpunit/php-text-template": "^2.0.3",
                "phpunit/php-timer": "^5.0.2",
                "sebastian/cli-parser": "^1.0.1",
                "sebastian/code-unit": "^1.0.6",
                "sebastian/comparator": "^4.0.8",
                "sebastian/diff": "^4.0.3",
                "sebastian/environment": "^5.1.3",
                "sebastian/exporter": "^4.0.5",
                "sebastian/global-state": "^5.0.1",
                "sebastian/object-enumerator": "^4.0.3",
                "sebastian/resource-operations": "^3.0.3",
                "sebastian/type": "^3.2",
                "sebastian/version": "^3.0.2"
            },
            "suggest": {
                "ext-soap": "To be able to generate mocks based on WSDL files",
                "ext-xdebug": "PHP extension that provides line coverage as well as branch and path coverage"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.6-dev"
                }
            },
            "autoload": {
                "files": [
                    "src/Framework/Assert/Functions.php"
                ],
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                "security": "https://github.com/sebastianbergmann/phpunit/security/policy",
                "source": "https://github.com/sebastianbergmann/phpunit/tree/9.6.19"
            },
            "funding": [
                {
                    "url": "https://phpunit.de/sponsors.html",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpunit/phpunit",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-05T04:35:58+00:00"
        },
        {
            "name": "sebastian/cli-parser",
            "version": "1.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/cli-parser.git",
                "reference": "2b56bea83a09de3ac06bb18b92f068e60cc6f50b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/2b56bea83a09de3ac06bb18b92f068e60cc6f50b",
                "reference": "2b56bea83a09de3ac06bb18b92f068e60cc6f50b",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for parsing CLI options",
            "homepage": "https://github.com/sebastianbergmann/cli-parser",
            "support": {
                "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
                "source": "https://github.com/sebastianbergmann/cli-parser/tree/1.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:27:43+00:00"
        },
        {
            "name": "sebastian/code-unit",
            "version": "1.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit.git",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the PHP code units",
            "homepage": "https://github.com/sebastianbergmann/code-unit",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit/issues",
                "source": "https://github.com/sebastianbergmann/code-unit/tree/1.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:08:54+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:30:19+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "4.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "fa0f136dd2334583309d32b62544682ee972b51a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/fa0f136dd2334583309d32b62544682ee972b51a",
                "reference": "fa0f136dd2334583309d32b62544682ee972b51a",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/diff": "^4.0",
                "sebastian/exporter": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/comparator/issues",
                "source": "https://github.com/sebastianbergmann/comparator/tree/4.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2022-09-14T12:41:17+00:00"
        },
        {
            "name": "sebastian/complexity",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/complexity.git",
                "reference": "25f207c40d62b8b7aa32f5ab026c53561964053a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/25f207c40d62b8b7aa32f5ab026c53561964053a",
                "reference": "25f207c40d62b8b7aa32f5ab026c53561964053a",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.18 || ^5.0",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for calculating the complexity of PHP code units",
            "homepage": "https://github.com/sebastianbergmann/complexity",
            "support": {
                "issues": "https://github.com/sebastianbergmann/complexity/issues",
                "source": "https://github.com/sebastianbergmann/complexity/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-12-22T06:19:30+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "ba01945089c3a293b01ba9badc29ad55b106b0bc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/ba01945089c3a293b01ba9badc29ad55b106b0bc",
                "reference": "ba01945089c3a293b01ba9badc29ad55b106b0bc",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3",
                "symfony/process": "^4.2 || ^5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/diff/issues",
                "source": "https://github.com/sebastianbergmann/diff/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:30:58+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "5.1.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "830c43a844f1f8d5b7a1f6d6076b784454d8b7ed"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/830c43a844f1f8d5b7a1f6d6076b784454d8b7ed",
                "reference": "830c43a844f1f8d5b7a1f6d6076b784454d8b7ed",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-posix": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "http://www.github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/environment/issues",
                "source": "https://github.com/sebastianbergmann/environment/tree/5.1.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-02-03T06:03:51+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "78c00df8f170e02473b682df15bfcdacc3d32d72"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/78c00df8f170e02473b682df15bfcdacc3d32d72",
                "reference": "78c00df8f170e02473b682df15bfcdacc3d32d72",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-mbstring": "*",
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "https://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/exporter/issues",
                "source": "https://github.com/sebastianbergmann/exporter/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:33:00+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "5.0.7",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9",
                "reference": "bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-dom": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-uopz": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "http://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/global-state/issues",
                "source": "https://github.com/sebastianbergmann/global-state/tree/5.0.7"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:35:11+00:00"
        },
        {
            "name": "sebastian/lines-of-code",
            "version": "1.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/lines-of-code.git",
                "reference": "e1e4a170560925c26d424b6a03aed157e7dcc5c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/e1e4a170560925c26d424b6a03aed157e7dcc5c5",
                "reference": "e1e4a170560925c26d424b6a03aed157e7dcc5c5",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.18 || ^5.0",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for counting the lines of code in PHP source code",
            "homepage": "https://github.com/sebastianbergmann/lines-of-code",
            "support": {
                "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/1.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-12-22T06:20:34+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:12:34+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
                "source": "https://github.com/sebastianbergmann/object-reflector/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:14:26+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "4.0.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1",
                "reference": "e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "https://github.com/sebastianbergmann/recursion-context",
            "support": {
                "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
                "source": "https://github.com/sebastianbergmann/recursion-context/tree/4.0.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-02-03T06:07:39+00:00"
        },
        {
            "name": "sebastian/resource-operations",
            "version": "3.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/resource-operations.git",
                "reference": "05d5692a7993ecccd56a03e40cd7e5b09b1d404e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/05d5692a7993ecccd56a03e40cd7e5b09b1d404e",
                "reference": "05d5692a7993ecccd56a03e40cd7e5b09b1d404e",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides a list of PHP built-in functions that operate on resources",
            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
            "support": {
                "source": "https://github.com/sebastianbergmann/resource-operations/tree/3.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-14T16:00:52+00:00"
        },
        {
            "name": "sebastian/type",
            "version": "3.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/type.git",
                "reference": "75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7",
                "reference": "75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the types of the PHP type system",
            "homepage": "https://github.com/sebastianbergmann/type",
            "support": {
                "issues": "https://github.com/sebastianbergmann/type/issues",
                "source": "https://github.com/sebastianbergmann/type/tree/3.2.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-02-03T06:13:03+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "c6c1022351a901512170118436c764e473f6de8c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c",
                "reference": "c6c1022351a901512170118436c764e473f6de8c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "support": {
                "issues": "https://github.com/sebastianbergmann/version/issues",
                "source": "https://github.com/sebastianbergmann/version/tree/3.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:39:44+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "8.15.0",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "7d1d957421618a3803b593ec31ace470177d7817"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/7d1d957421618a3803b593ec31ace470177d7817",
                "reference": "7d1d957421618a3803b593ec31ace470177d7817",
                "shasum": ""
            },
            "require": {
                "dealerdirect/phpcodesniffer-composer-installer": "^0.6.2 || ^0.7 || ^1.0",
                "php": "^7.2 || ^8.0",
                "phpstan/phpdoc-parser": "^1.23.1",
                "squizlabs/php_codesniffer": "^3.9.0"
            },
            "require-dev": {
                "phing/phing": "2.17.4",
                "php-parallel-lint/php-parallel-lint": "1.3.2",
                "phpstan/phpstan": "1.10.60",
                "phpstan/phpstan-deprecation-rules": "1.1.4",
                "phpstan/phpstan-phpunit": "1.3.16",
                "phpstan/phpstan-strict-rules": "1.5.2",
                "phpunit/phpunit": "8.5.21|9.6.8|10.5.11"
            },
            "type": "phpcodesniffer-standard",
            "extra": {
                "branch-alias": {
                    "dev-master": "8.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "keywords": [
                "dev",
                "phpcs"
            ],
            "support": {
                "issues": "https://github.com/slevomat/coding-standard/issues",
                "source": "https://github.com/slevomat/coding-standard/tree/8.15.0"
            },
            "funding": [
                {
                    "url": "https://github.com/kukulich",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/slevomat/coding-standard",
                    "type": "tidelift"
                }
            ],
            "time": "2024-03-09T15:20:58+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.10.1",
            "source": {
                "type": "git",
                "url": "https://github.com/PHPCSStandards/PHP_CodeSniffer.git",
                "reference": "8f90f7a53ce271935282967f53d0894f8f1ff877"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/PHPCSStandards/PHP_CodeSniffer/zipball/8f90f7a53ce271935282967f53d0894f8f1ff877",
                "reference": "8f90f7a53ce271935282967f53d0894f8f1ff877",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0 || ^8.0 || ^9.3.4"
            },
            "bin": [
                "bin/phpcbf",
                "bin/phpcs"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "Former lead"
                },
                {
                    "name": "Juliette Reinders Folmer",
                    "role": "Current lead"
                },
                {
                    "name": "Contributors",
                    "homepage": "https://github.com/PHPCSStandards/PHP_CodeSniffer/graphs/contributors"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "https://github.com/PHPCSStandards/PHP_CodeSniffer",
            "keywords": [
                "phpcs",
                "standards",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/PHPCSStandards/PHP_CodeSniffer/issues",
                "security": "https://github.com/PHPCSStandards/PHP_CodeSniffer/security/policy",
                "source": "https://github.com/PHPCSStandards/PHP_CodeSniffer",
                "wiki": "https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki"
            },
            "funding": [
                {
                    "url": "https://github.com/PHPCSStandards",
                    "type": "github"
                },
                {
                    "url": "https://github.com/jrfnl",
                    "type": "github"
                },
                {
                    "url": "https://opencollective.com/php_codesniffer",
                    "type": "open_collective"
                }
            ],
            "time": "2024-05-22T21:24:41+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v6.4.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "8d92dd79149f29e89ee0f480254db595f6a6a2c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/8d92dd79149f29e89ee0f480254db595f6a6a2c5",
                "reference": "8d92dd79149f29e89ee0f480254db595f6a6a2c5",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Executes commands in sub-processes",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/process/tree/v6.4.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:49:08+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.2.3",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2",
                "reference": "737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "support": {
                "issues": "https://github.com/theseer/tokenizer/issues",
                "source": "https://github.com/theseer/tokenizer/tree/1.2.3"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2024-03-03T12:36:25+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": "^8.3",
        "ext-event": "*",
        "ext-json": "*",
        "ext-pcntl": "*"
    },
    "platform-dev": [],
    "plugin-api-version": "2.6.0"
}


================================================
File: deploy.sh
================================================
#!/bin/bash
set -e

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TRAVIS_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TRAVIS_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TRAVIS_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TRAVIS_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TRAVIS_TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
services:
  dev:
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - ENDPOINT
      - KEY
      - DATABASE_ID
      - KBC_DATA_TYPE_SUPPORT=none


================================================
File: package.json
================================================
{
  "name": "keboola-ex-cosmosdb",
  "version": "1.0.0",
  "dependencies": {
    "@azure/cosmos": "^3",
    "@keboola/eslint-config-node": "^2.0.0",
    "eslint": "^7.12.1",
    "eslint-plugin-import": "^2.22.1",
    "p-retry": "^6"
  },
  "devDependencies": {},
  "type": "module"
}


================================================
File: phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>


================================================
File: phpstan-baseline.neon
================================================
parameters:
	ignoreErrors:
		-
			message: "#^Method CosmosDbExtractor\\\\Configuration\\\\Config\\:\\:isIncremental\\(\\) should return bool but returns mixed\\.$#"
			count: 1
			path: src/Configuration/Config.php


================================================
File: phpstan.neon
================================================
parameters:
    ignoreErrors:
        - '#Cannot call method .* React\\Stream\\ReadableStreamInterface\|.*#'
        - '#Cannot call method .* on Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface\|null.#'
        - identifier: missingType.iterableValue
includes:
	- phpstan-baseline.neon


================================================
File: phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         bootstrap="tests/phpunit/bootstrap.php">
    <testsuite name="Main Test Suite">
        <directory>tests/phpunit</directory>
    </testsuite>
</phpunit>


================================================
File: .dockerignore
================================================
vendor/


================================================
File: .env.dist
================================================
ENDPOINT=
KEY=
DATABASE_ID=


================================================
File: .eslintrc.json
================================================
{
  "extends": [
    "@keboola/node"
  ],
  "plugins": [
    "import"
  ],
  "env": {
    "node": true
  },
  "rules": {
    "no-console": "off",
    "no-constant-condition": "off",
    "no-await-in-loop": "off",
    "no-case-declarations": "off",
    "import/extensions": "off"
  }
}


================================================
File: docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT


================================================
File: docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1


================================================
File: src/Component.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor;

use CosmosDbExtractor\Configuration\ActionConfigDefinition;
use CosmosDbExtractor\Configuration\Config;
use CosmosDbExtractor\Configuration\ConfigDefinition;
use CosmosDbExtractor\Extractor\Extractor;
use Keboola\Component\BaseComponent;
use Psr\Log\LoggerInterface;

class Component extends BaseComponent
{
    public const string ACTION_RUN = 'run';
    public const string ACTION_TEST_CONNECTION = 'testConnection';

    private Extractor $extractor;

    public function __construct(LoggerInterface $logger)
    {
        parent::__construct($logger);
        $this->extractor = new Extractor(
            $this->getLogger(),
            $this->getDataDir(),
            $this->getConfig(),
            $this->getInputState(),
        );
    }

    /**
     * @return array<string, string>
     */
    protected function getSyncActions(): array
    {
        return [
            self::ACTION_TEST_CONNECTION => 'handleTestConnection',
        ];
    }

    protected function run(): void
    {
        $this->extractor->extract();
    }

    /**
     * @return array{success: bool}
     */
    protected function handleTestConnection(): array
    {
        $this->extractor->testConnection();
        return ['success' => true];
    }

    public function getConfig(): Config
    {
        /** @var Config $config */
        $config = parent::getConfig();
        return $config;
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        $action = $this->getRawConfig()['action'] ?? Component::ACTION_RUN;
        return $action === Component::ACTION_RUN ? ConfigDefinition::class : ActionConfigDefinition::class;
    }
}


================================================
File: src/run.php
================================================
<?php

declare(strict_types=1);

use CosmosDbExtractor\Component;
use Keboola\CommonExceptions\UserExceptionInterface;
use Keboola\Component\Logger;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
try {
    $app = new Component($logger);
    $app->execute();
    exit(0);
} catch (UserExceptionInterface $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (Throwable $e) {
    $logger->critical(
        get_class($e) . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => is_object($e->getPrevious()) ? get_class($e->getPrevious()) : '',
        ],
    );
    exit(2);
}


================================================
File: src/Configuration/ActionConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Configuration;

use CosmosDbExtractor\Configuration\Node\DbNode;
use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class ActionConfigDefinition extends BaseConfigDefinition
{
    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->ignoreExtraKeys(true)
            ->children()
                ->append(new DbNode())
        ;
        // @formatter:on
        return $parametersNode;
    }
}


================================================
File: src/Configuration/Config.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Configuration;

use CosmosDbExtractor\Exception\UndefinedValueException;
use Keboola\Component\Config\BaseConfig;

class Config extends BaseConfig
{
    public const STATE_LAST_FETCHED_ROW = 'lastFetchedRow';

    public function getEndpoint(): string
    {
        return $this->getStringValue(['parameters', 'db', 'endpoint']);
    }

    public function getKey(): string
    {
        return $this->getStringValue(['parameters', 'db', '#key']);
    }

    public function getDatabaseId(): string
    {
        return $this->getStringValue(['parameters', 'db', 'databaseId']);
    }

    public function getContainerId(): string
    {
        return $this->getStringValue(['parameters', 'containerId']);
    }

    public function getOutput(): string
    {
        return $this->getStringValue(['parameters', 'output']);
    }

    public function hasConfigRowId(): bool
    {

        return $this->getValue(['parameters', 'id']) !== null;
    }

    public function getConfigRowId(): int
    {
        if (!$this->hasConfigRowId()) {
            throw new UndefinedValueException('Config row id is not defined.');
        }

        return $this->getIntValue(['parameters', 'id']);
    }

    public function hasConfigRowName(): bool
    {
        return $this->getValue(['parameters', 'name']) !== null;
    }

    public function getConfigRowName(): string
    {
        if (!$this->hasConfigRowName()) {
            throw new UndefinedValueException('Config row name is not defined.');
        }

        return $this->getStringValue(['parameters', 'name']);
    }

    public function getMaxTries(): int
    {
        return $this->getIntValue(['parameters', 'maxTries']);
    }

    /**
     * @return array<string>
     */
    public function getIgnoredKeys(): array
    {
        return $this->getArrayValue(['parameters', 'ignoredKeys']);
    }

    public function hasSelect(): bool
    {
        return $this->getValue(['parameters', 'select']) !== null;
    }

    public function getSelect(): string
    {
        if (!$this->hasSelect()) {
            throw new UndefinedValueException('Select is not defined.');
        }

        return $this->getStringValue(['parameters', 'select']);
    }

    public function hasFrom(): bool
    {
        return $this->getValue(['parameters', 'from']) !== null;
    }

    public function getFrom(): string
    {
        if (!$this->hasFrom()) {
            throw new UndefinedValueException('From is not defined.');
        }

        return $this->getStringValue(['parameters', 'from']);
    }

    public function hasSort(): bool
    {
        return $this->getValue(['parameters', 'sort']) !== null;
    }

    public function getSort(): string
    {
        if (!$this->hasSort()) {
            throw new UndefinedValueException('Sort is not defined.');
        }

        return $this->getStringValue(['parameters', 'sort']);
    }

    public function hasLimit(): bool
    {
        return $this->getValue(['parameters', 'limit']) !== null;
    }

    public function getLimit(): int
    {
        if (!$this->hasLimit()) {
            throw new UndefinedValueException('Limit is not defined.');
        }

        return $this->getIntValue(['parameters', 'limit']);
    }

    public function hasQuery(): bool
    {
        return $this->getValue(['parameters', 'query']) !== null;
    }

    public function getQuery(): string
    {
        if (!$this->hasQuery()) {
            throw new UndefinedValueException('Query is not defined.');
        }

        return $this->getStringValue(['parameters', 'query']);
    }

    public function getMode(): string
    {
        return $this->getStringValue(['parameters', 'mode']);
    }

    /**
     * @return string[]
     */
    public function getMapping(): array
    {
        if ($this->getMode() !== ConfigDefinition::MODE_MAPPING) {
            throw new UndefinedValueException('Mode is not set to mapping.');
        }

        return $this->getArrayValue(['parameters', 'mapping']);
    }

    public function isIncremental(): bool
    {
          return $this->getValue(['parameters', 'incremental']);
    }

    public function hasIncrementalFetchingKey(): bool
    {
        return $this->getValue(['parameters', 'incrementalFetchingKey']) !== null;
    }

    public function getIncrementalFetchingKey(): string
    {
        if (!$this->hasIncrementalFetchingKey()) {
            throw new UndefinedValueException('IncrementalFetchingKey is not defined.');
        }

        return $this->getStringValue(['parameters', 'incrementalFetchingKey']);
    }
}


================================================
File: src/Configuration/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Configuration;

use CosmosDbExtractor\Configuration\Node\DbNode;
use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigDefinition extends BaseConfigDefinition
{
    public const DEFAULT_MAX_TRIES = 5;

    public const MODE_RAW = 'raw';
    public const MODE_MAPPING = 'mapping';

    private const DEFAULT_IGNORED_KEYS = ['_rid', '_self', '_etag', '_attachments', '_ts'];
    private const QUERY_INCOMPATIBLE_NODES = ['select', 'from', 'sort', 'limit', 'incrementalFetchingKey'];
    private const INCREMENTAL_FETCHING_INCOMPATIBLE_NODES = ['select', 'sort'];
    private const REMOVE_EMPTY_NODES = ['select', 'from', 'sort', 'query', 'mapping', 'incrementalFetchingKey'];

    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->ignoreExtraKeys(true)
            ->children()
                ->append(new DbNode())
                ->integerNode('id')->min(0)->defaultNull()->end()
                ->scalarNode('name')->cannotBeEmpty()->defaultNull()->end()
                ->scalarNode('containerId')->isRequired()->cannotBeEmpty()->end()
                ->scalarNode('output')->isRequired()->cannotBeEmpty()->end()
                ->integerNode('maxTries')->min(1)->defaultValue(self::DEFAULT_MAX_TRIES)->end()
                // Ignore generated keys by default
                ->arrayNode('ignoredKeys')
                    ->treatNullLike([])
                    ->prototype('scalar')->end()
                    ->defaultValue(self::DEFAULT_IGNORED_KEYS)
                ->end()
                // Generated query
                ->scalarNode('select')->defaultNull()->end()
                ->scalarNode('from')->defaultNull()->end()
                ->scalarNode('sort')->defaultNull()->end()
                ->integerNode('limit')->defaultNull()->end()
                // Custom query
                ->scalarNode('query')->defaultNull()->cannotBeEmpty()->end()
                // Mapping
                ->enumNode('mode')
                    ->values([self::MODE_MAPPING, self::MODE_RAW])
                    ->defaultValue(self::MODE_MAPPING)
                ->end()
                ->variableNode('mapping')->end()
                // Incremental loading
                ->booleanNode('incremental')->defaultValue(false)->end()
                // Incremental fetching
                ->scalarNode('incrementalFetchingKey')->defaultNull()->end()
            ->end()
            ->validate()->always(function ($item) {
                foreach (self::REMOVE_EMPTY_NODES as $removeEmptyNode) {
                    if (empty($item[$removeEmptyNode])) {
                        $item[$removeEmptyNode] = null;
                    }
                }
                return $item;
            })->end()
        ;
        // @formatter:on

        // Validation
        $parametersNode->validate()->always(function ($v) {
            // Custom or generated query can be used, not both.
            foreach (self::QUERY_INCOMPATIBLE_NODES as $node) {
                if (isset($v['query']) && isset($v[$node])) {
                    throw new InvalidConfigurationException(sprintf(
                        'Invalid configuration, "query" cannot be configured together with "%s".',
                        $node,
                    ));
                }
            }

            // incrementalFetchingKey can not be used with select/sort.
            foreach (self::INCREMENTAL_FETCHING_INCOMPATIBLE_NODES as $node) {
                if (isset($v['incrementalFetchingKey']) && isset($v[$node])) {
                    throw new InvalidConfigurationException(sprintf(
                        'Invalid configuration, "incrementalFetchingKey" cannot be configured together with "%s".',
                        $node,
                    ));
                }
            }

            // Validate mode
            switch ($v['mode']) {
                case self::MODE_RAW:
                    unset($v['mapping']);
                    break;

                case self::MODE_MAPPING:
                    if (!isset($v['mapping'])) {
                        throw new InvalidConfigurationException(
                            'Invalid configuration, missing "mapping" key, mode is set to "mapping".',
                        );
                    }
                    break;

                default:
                    throw new InvalidConfigurationException(sprintf('Unexpected mode "%s".', $v['mode']));
            }

            return $v;
        });

        return $parametersNode;
    }
}


================================================
File: src/Configuration/Node/DbNode.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Configuration\Node;

use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\NodeBuilder;

class DbNode extends ArrayNodeDefinition
{
    public const NODE_NAME = 'db';

    public function __construct()
    {
        parent::__construct(self::NODE_NAME);
        $this->isRequired();
        $this->init($this->children());
    }

    protected function init(NodeBuilder $builder): void
    {
        $builder
            ->scalarNode('endpoint')->isRequired()->cannotBeEmpty()->end()
            ->scalarNode('#key')->isRequired()->cannotBeEmpty()->end()
            ->scalarNode('databaseId')->isRequired()->cannotBeEmpty()->end();
    }
}


================================================
File: src/Exception/ApplicationException.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Exception;

use Exception;
use Keboola\CommonExceptions\ApplicationExceptionInterface;

class ApplicationException extends Exception implements ApplicationExceptionInterface
{

}


================================================
File: src/Exception/ProcessException.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Exception;

use Throwable;

class ProcessException extends ApplicationException
{
    public function __construct(string $message, int $exitCode, ?Throwable $previous = null)
    {
        parent::__construct($message, $exitCode, $previous);
    }

    public function getExitCode(): int
    {
        return $this->code;
    }
}


================================================
File: src/Exception/UndefinedValueException.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class UndefinedValueException extends ApplicationException
{

}


================================================
File: src/Exception/UserException.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Exception;

use Exception;
use Keboola\CommonExceptions\UserExceptionInterface;

class UserException extends Exception implements UserExceptionInterface
{

}


================================================
File: src/Extractor/Extractor.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Extractor;

use CosmosDbExtractor\Configuration\Config;
use CosmosDbExtractor\Configuration\ConfigDefinition;
use CosmosDbExtractor\Exception\ApplicationException;
use CosmosDbExtractor\Exception\ProcessException;
use CosmosDbExtractor\Exception\UserException;
use CosmosDbExtractor\Extractor\CsvWriter\ICsvWriter;
use CosmosDbExtractor\Extractor\CsvWriter\MappingCsvWriter;
use CosmosDbExtractor\Extractor\CsvWriter\RawCsvWriter;
use Keboola\Component\Manifest\ManifestManager;
use Psr\Log\LoggerInterface;
use React\EventLoop\Factory as EventLoopFactory;
use React\EventLoop\LoopInterface;
use Throwable;
use UnexpectedValueException;

class Extractor
{
    public const int LOG_PROGRESS_SECONDS = 30;

    private LoggerInterface $logger;

    private string $dataDir;

    private Config $config;

    private LoopInterface  $loop;

    private ProcessFactory $processFactory;

    private QueryFactory $queryFactory;

    /**
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification
     */
    private array $inputState;

    private int $processed;

    /**
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification
     */
    public function __construct(LoggerInterface $logger, string $dataDir, Config $config, array $inputState)
    {
        $this->logger = $logger;
        $this->dataDir = $dataDir;
        $this->config = $config;
        $this->inputState = $inputState;
        $this->loop = EventLoopFactory::create();
        $this->processFactory = new ProcessFactory($this->logger, $this->loop);
        $this->queryFactory = new QueryFactory($this->config, $inputState);
    }

    public function testConnection(): void
    {
        // Register a new NodeJs process to event loop.
        $process = $this->createNodeJsProcess('testConnection.js', $this->getTestConnectionEnv());

        // On sync actions are logged only errors (no info/warning messages)
        // ... because on sync action success -> JSON output is expected.
        // So we need to capture STDERR and wrap it in an exception on process failure.
        $stderr = '';
        $process->getStderr()->on('data', function (string $chunk) use (&$stderr): void {
            $stderr .= $chunk;
        });

        // Convert process failure to User/Application exception
        $process
            ->getPromise()
            ->done(null, function (Throwable $e) use (&$stderr): void {
                $msg = trim($stderr ?: $e->getMessage());
                if ($e instanceof ProcessException && $e->getExitCode() === 1) {
                    throw new UserException($msg, $e->getCode(), $e);
                } else {
                    throw new ApplicationException($msg, $e->getCode(), $e);
                }
            });

        // Start event loop
        $this->loop->run();
    }

    public function extract(): void
    {
        $csvWriter = $this->createCsvWriter();

        // Log config row name
        if ($this->config->hasConfigRowName()) {
            $this->logger->info(sprintf('Exporting "%s" ...', $this->config->getConfigRowName()));
        }

        // Register a new NodeJs process to event loop.
        // STDOUT output is logged as info message, and STDERR as warning.
        // If the process fails, a ProcessException is thrown.
        // See ProcessFactory for more info.
        $process = $this->createNodeJsProcess('extract.js', $this->getExtractEnv());

        // JSON documents separated by delimiter (see JsonDecoder) are asynchronously read and decoded
        // from the process output (on the separated file descriptor) and converted to CSV.
        $this->processed = 0;
        $decoder = new JsonDecoder();
        $decoder->processStream($process->getJsonStream(), function (object $item) use ($csvWriter): void {
            $this->writeToCsv($item, $csvWriter);
            $this->processed++;
        });

        // Throw an exception on process failure
        $process
            ->getPromise()
            ->done(null, function (Throwable $e): void {
                if ($e instanceof ProcessException && $e->getExitCode() === 1) {
                    throw new UserException('Export failed.', $e->getCode(), $e);
                } else {
                    throw new ApplicationException($e->getMessage(), $e->getCode(), $e);
                }
            });

        // Log progress
        $this->loop->addPeriodicTimer(self::LOG_PROGRESS_SECONDS, function (): void {
            $this->logger->info(sprintf(
                '"%s" items processed.',
                number_format($this->processed, 0, '.', ' '),
            ));
        });

        // Start event loop
        $this->loop->run();

        // All items wrote, finalize
        $csvWriter->finalize();

        // Write last state incremental fetching
        if ($this->config->hasIncrementalFetchingKey()) {
            $csvWriter->writeLastState($this->inputState);
        }
    }

    protected function writeToCsv(object $item, ICsvWriter $csvWriter): void
    {
        $csvWriter->writeItem($item);
    }

    /**
     * @return array<string,mixed>
     */
    protected function getTestConnectionEnv(): array
    {
        return [
            'JSON_DELIMITER' => json_encode(JsonDecoder::DELIMITER),
            'ENDPOINT' => $this->config->getEndpoint(),
            'KEY' => $this->config->getKey(),
            'DATABASE_ID' => $this->config->getDatabaseId(),
        ];
    }

    /**
     * @return array<string,mixed>
     */
    protected function getExtractEnv(): array
    {
        return array_merge($this->getTestConnectionEnv(), [
            'CONTAINER_ID' => $this->config->getContainerId(),
            'QUERY' => $this->queryFactory->create(),
            'MAX_TRIES' => $this->config->getMaxTries(),
        ]);
    }

    /**
     * @param array<string,mixed> $env
     */
    protected function createNodeJsProcess(string $script, array $env): ProcessWrapper
    {
        return $this->processFactory->create(sprintf('node %s/NodeJs/%s', __DIR__, $script), $env);
    }

    protected function createCsvWriter(): ICsvWriter
    {
        $manifestManager = new ManifestManager($this->dataDir);
        switch ($this->config->getMode()) {
            case ConfigDefinition::MODE_RAW:
                return new RawCsvWriter($this->dataDir, $this->config, $manifestManager);
            case ConfigDefinition::MODE_MAPPING:
                return new MappingCsvWriter($this->dataDir, $this->config, $manifestManager);
        }

        throw new UnexpectedValueException(sprintf('Unexpected mode "%s".', $this->config->getMode()));
    }
}


================================================
File: src/Extractor/JsonDecoder.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Extractor;

use Generator;
use React\Stream\ReadableStreamInterface;
use Throwable;

/**
 * JsonDecoder decodes a stream of JSON documents separated by the DELIMITER.
 * This is a memory-efficient way to process a large set of the JSON documents.
 * Eg. {...json1...}DELIMITER{...json2...}DELIMITER{...json3...}
 */
class JsonDecoder
{
    public const DELIMITER = "\n---\n";

    private string $buffer = '';

    /**
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification
     */
    public function processChunk(string $chunk): array
    {
        $this->buffer .= $chunk;
        return iterator_to_array($this->parse());
    }

    public function processStream(ReadableStreamInterface $stream, callable $worker): void
    {
        // New data is processed when it arrives
        $stream->on('data', function (string $chunk) use ($worker): void {
            foreach ($this->processChunk($chunk) as &$document) {
                $worker($document);
            }
        });

        // At the end, the rest of the buffer is parsed
        $stream->on('end', function () use ($worker): void {
            foreach ($this->processChunk(self::DELIMITER) as &$document) {
                $worker($document);
            }
        });

        // Throw exception when it occurs
        $stream->on('error', function (Throwable $e): void {
            throw $e;
        });
    }

    protected function parse(): Generator
    {
        // Keep parsing while the delimiter has been found
        while (($delimiter = strpos($this->buffer, self::DELIMITER)) !== false) {
            // Split buffer by delimiter
            $json = (string) substr($this->buffer, 0, $delimiter);
            $this->buffer = (string) substr($this->buffer, $delimiter + strlen(self::DELIMITER));

            // Decode JSON document, throw the JsonException on the error
            if (trim($json) !== '') {
                yield json_decode($json, false, 512, JSON_THROW_ON_ERROR);
            }
        }
    }
}


================================================
File: src/Extractor/ProcessFactory.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Extractor;

use CosmosDbExtractor\Exception\ProcessException;
use Generator;
use Psr\Log\LoggerInterface;
use React\ChildProcess\Process;
use React\EventLoop\LoopInterface;
use React\Promise\Deferred;

class ProcessFactory
{
    public const JSON_STREAM_FD = 3;

    private LoggerInterface $logger;

    private LoopInterface $loop;

    public function __construct(LoggerInterface $logger, LoopInterface $loop)
    {
        $this->logger = $logger;
        $this->loop = $loop;
    }

    /**
     * @param array<string,mixed> $env
     */
    public function create(string $cmd, array $env = []): ProcessWrapper
    {
        $fileDescriptors = [
            // STDIN
            0 => ['pipe', 'r'],
            // STDOUT
            1 => ['pipe', 'w'],
            // STDERR
            2 => ['pipe', 'w'],
            // JSON STREAM (custom)
            self::JSON_STREAM_FD => ['pipe', 'w'],
        ];

        // Let NodeJs script know which file descriptor should be used to write JSON documents to
        $env['JSON_STREAM_FD'] = self::JSON_STREAM_FD;

        // Create process and attach it to the event loop
        $process = new Process($cmd, null, $env, $fileDescriptors);
        $process->start($this->loop);

        // Log process stdout output as info
        $process->stdout->on('data', function (string $chunk): void {
            foreach ($this->explodeLines($chunk) as $line) {
                $this->logger->info($line);
            }
        });

        // Log process stderr output as warning
        $process->stderr->on('data', function (string $chunk): void {
            foreach ($this->explodeLines($chunk) as $line) {
                $this->logger->warning($line);
            }
        });

        // Handle process exit
        $deferred = new Deferred();
        $process->on('exit', function (int $exitCode) use ($cmd, $deferred): void {
            if ($exitCode === 0) {
                $this->logger->debug(sprintf('Process "%s" completed successfully.', $cmd));
                $deferred->resolve();
            } else {
                $deferred->reject(
                    new ProcessException(sprintf('Process "%s" exited with code "%d".', $cmd, $exitCode), $exitCode),
                );
            }

            // Make sure the event loop ends
            $this->loop->stop();
        });

        return new ProcessWrapper($process, $deferred->promise());
    }

    /**
     * @return Generator<string>
     */
    private function explodeLines(string $str): Generator
    {
        foreach (explode("\n", $str) as $line) {
            $line = trim($line);
            if ($line) {
                yield $line;
            }
        }
    }
}


================================================
File: src/Extractor/ProcessWrapper.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Extractor;

use React\ChildProcess\Process;
use React\Promise\ExtendedPromiseInterface;
use React\Promise\PromiseInterface;
use React\Stream\ReadableResourceStream;
use UnexpectedValueException;

/**
 * Helper class,
 * wraps Process and process Promise together and adds some shortcut methods.
 */
class ProcessWrapper
{
    private Process $process;

    private ExtendedPromiseInterface $promise;

    public function __construct(Process $process, PromiseInterface $promise)
    {
        if (!$promise instanceof ExtendedPromiseInterface) {
            throw new UnexpectedValueException('Expected ExtendedPromiseInterface.');
        }

        $this->process = $process;
        $this->promise = $promise;
    }

    public function getProcess(): Process
    {
        return $this->process;
    }

    public function getPromise(): ExtendedPromiseInterface
    {
        return $this->promise;
    }

    public function getStdout(): ReadableResourceStream
    {
        /** @var ReadableResourceStream $stdout */
        $stdout = $this->process->stdout;
        return $stdout;
    }

    public function getStderr(): ReadableResourceStream
    {
        /** @var ReadableResourceStream $stderr */
        $stderr = $this->process->stderr;
        return $stderr;
    }

    public function getJsonStream(): ReadableResourceStream
    {
        // We use separated file descriptor for JSON documents stream, see ProcessFactory
        /** @var ReadableResourceStream $jsonStream */
        $jsonStream = $this->process->pipes[ProcessFactory::JSON_STREAM_FD];
        return $jsonStream;
    }
}


================================================
File: src/Extractor/QueryFactory.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Extractor;

use CosmosDbExtractor\Configuration\Config;

class QueryFactory
{
    private Config $config;

    /**
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification
     */
    private array $inputState;

    /**
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification
     */
    public function __construct(Config $config, array $inputState)
    {
        $this->config = $config;
        $this->inputState = $inputState;
    }

    public function create(): string
    {
        return $this->config->hasQuery() ? $this->config->getQuery() : $this->generate();
    }

    protected function generate(): string
    {
        $sql = [];
        $sql[] = 'SELECT ' . $this->getSelect();
        $sql[] = 'FROM ' . $this->getFrom();

        if ($this->config->hasIncrementalFetchingKey()) {
            if (isset($this->inputState[Config::STATE_LAST_FETCHED_ROW])) {
                $lastFetchedRow = $this->inputState[Config::STATE_LAST_FETCHED_ROW];
                if (is_string($lastFetchedRow)) {
                    $lastFetchedRow = $this->quote($lastFetchedRow);
                }
                $sql[] = sprintf(
                    'WHERE %s >= %s',
                    $this->config->getIncrementalFetchingKey(),
                    $lastFetchedRow,
                );
            }
            $sql[] = 'ORDER BY ' . $this->config->getIncrementalFetchingKey();
        } elseif ($this->config->hasSort()) {
            $sql[] = 'ORDER BY ' . $this->config->getSort();
        }

        if ($this->config->hasLimit()) {
            $sql[] = 'OFFSET 0 LIMIT ' . $this->config->getLimit();
        }

        return implode(' ', $sql);
    }

    protected function getSelect(): string
    {
        return $this->config->hasSelect() ? $this->config->getSelect() : '*';
    }

    protected function getFrom(): string
    {
        return $this->config->hasFrom() ? $this->config->getFrom() : 'c';
    }

    protected function quote(string $str): string
    {
        return sprintf('"%s"', $str);
    }
}


================================================
File: src/Extractor/CsvWriter/BaseCsvWriter.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Extractor\CsvWriter;

use CosmosDbExtractor\Configuration\Config;
use CosmosDbExtractor\Exception\UserException;
use Keboola\Component\JsonHelper;
use Keboola\Component\Manifest\ManifestManager;

abstract class BaseCsvWriter implements ICsvWriter
{
    /**
     * @var string[]
     */
    protected array $ignoredKeys;

    protected ?object $lastRow = null;

    public function __construct(
        protected readonly string $dataDir,
        protected readonly Config $config,
        protected readonly ManifestManager $manifestManager,
    ) {
        $this->ignoredKeys = $config->getIgnoredKeys();
    }

    /**
     * @param array<mixed> $inputState
     */
    public function writeLastState(array $inputState): void
    {
        $lastValue = null;
        if ($this->lastRow) {
            $lastValue = $this->getValueFromRow(
                $this->lastRow,
                $this->config->getIncrementalFetchingKey(),
            );
        } elseif (isset($inputState[Config::STATE_LAST_FETCHED_ROW])) {
            $lastValue = $inputState[Config::STATE_LAST_FETCHED_ROW];
        }

        if ($lastValue) {
            JsonHelper::writeFile(
                $this->dataDir . '/out/state.json',
                [
                    Config::STATE_LAST_FETCHED_ROW => $lastValue,
                ],
            );
        }
    }

    protected function removeIgnoredKeys(object $item): object
    {
        foreach ($this->ignoredKeys as $key) {
            unset($item->$key);
        }

        return $item;
    }

    protected function getValueFromRow(object $lastRow, string $pathString): mixed
    {
        $path = explode('.', $pathString);
        array_shift($path);
        $value = $lastRow;
        foreach ($path as $item) {
            if (isset($value->{$item})) {
                $value = $value->{$item};
            } else {
                throw new UserException(sprintf('Cannot find path "%s".', $pathString));
            }
        }
        if (is_object($value)) {
            throw new UserException(sprintf('Last endpoint of the path "%s" is object.', $pathString));
        }
        return $value;
    }
}


================================================
File: src/Extractor/CsvWriter/ICsvWriter.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Extractor\CsvWriter;

interface ICsvWriter
{
    /**
     * Write single decoded JSON document to CSV file
     */
    public function writeItem(object $item): void;

    /**
     * Called when all items are written
     */
    public function finalize(): void;

    /**
     * Write last state for incremental fetching
     * @param array<mixed> $inputState
     */
    public function writeLastState(array $inputState): void;
}


================================================
File: src/Extractor/CsvWriter/MappingCsvWriter.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Extractor\CsvWriter;

use CosmosDbExtractor\Configuration\Config;
use CosmosDbExtractor\Exception\ApplicationException;
use CosmosDbExtractor\Exception\UserException;
use Generator;
use Keboola\Component\Manifest\ManifestManager;
use Keboola\Component\Manifest\ManifestManager\Options\OutTable\ManifestOptionsSchema;
use Keboola\CsvMap\Exception\CsvMapperException;
use Keboola\CsvMap\Mapper;
use Keboola\CsvTable\Table;

class MappingCsvWriter extends BaseCsvWriter implements ICsvWriter
{
    private Mapper $mapper;

    public function __construct(string $dataDir, Config $config, ManifestManager $manifestManager)
    {
        parent::__construct($dataDir, $config, $manifestManager);
        try {
            $this->mapper = new Mapper($this->config->getMapping(), false, $this->config->getOutput());
        } catch (CsvMapperException $e) {
            throw new UserException($e->getMessage(), $e->getCode(), $e);
        }
    }

    public function writeItem(object $item): void
    {
        // Remove ignored (generated) keys
        $item = $this->removeIgnoredKeys($item);

        // Ensure UNIQUE FK for sub-documents with the SAME CONTENT, but from the DIFFERENT parent document
        $userData = ['parentId' => md5(serialize($item))];
        try {
            $this->mapper->parseRow($item, $userData);
        } catch (CsvMapperException $e) {
            throw new UserException($e->getMessage(), $e->getCode(), $e);
        }
        $this->lastRow = $item;
    }

    public function finalize(): void
    {
        $this->copyTempCsvFiles();
        $this->writeManifest();
    }

    protected function copyTempCsvFiles(): void
    {
        foreach ($this->mapper->getCsvFiles() as $csvTable) {
            /** @var Table|null $csvTable */
            if (!$csvTable) {
                // Skip, no row
                continue;
            }

            // Check file size
            $source = $csvTable->getPathName();
            $dest = $this->getCsvTargetPath($csvTable);
            $filesize = filesize($source);
            if ($filesize === false) {
                throw new ApplicationException(sprintf('Failed to get file size "%s".', $source));
            }

            if ($filesize === 0) {
                // No rows -> no CSV file
                continue;
            }

            // Copy
            $result = copy($source, $dest);
            if (!$result) {
                throw new ApplicationException(sprintf('Failed to copy "%s" -> "%s".', $source, $dest));
            }
        }
    }

    protected function writeManifest(): void
    {
        foreach ($this->mapper->getCsvFiles() as $csvTable) {
            /** @var Table|null $csvTable */
            if (!$csvTable) {
                // Skip, no row
                continue;
            }

            // Check if CSV exists
            $csvPath = $this->getCsvTargetPath($csvTable);
            if (!file_exists($csvPath)) {
                // The empty file is not copied, so we also do not create the manifest
                return;
            }

            $options = new ManifestManager\Options\OutTable\ManifestOptions();
            $options
                ->setSchema(iterator_to_array($this->getSchema($csvTable)))
                ->setIncremental($this->config->isIncremental());

            $this->manifestManager->writeTableManifest(
                $csvTable->getName() . '.csv',
                $options,
                $this->config->getDataTypeSupport()->usingLegacyManifest(),
            );
        }
    }

    /**
     * @return Generator<ManifestOptionsSchema>
     */
    protected function getSchema(Table $csvTable): Generator
    {
        /** @var string[]|null $primaryKey */
        $primaryKey = $csvTable->getPrimaryKey(true);
        if ($primaryKey === null) {
            $primaryKey = [];
        }
        foreach ($csvTable->getHeader() as $column) {
            yield new ManifestOptionsSchema(
                $column,
                ['base' => ['type' => 'string']],
                true,
                in_array($column, $primaryKey, true),
            );
        }
    }

    protected function getCsvTargetPath(Table $csvTable): string
    {
        return sprintf('%s/out/tables/%s.csv', $this->dataDir, $csvTable->getName());
    }
}


================================================
File: src/Extractor/CsvWriter/RawCsvWriter.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Extractor\CsvWriter;

use CosmosDbExtractor\Configuration\Config;
use CosmosDbExtractor\Exception\ApplicationException;
use CosmosDbExtractor\Exception\UserException;
use Keboola\BigQuery\Extractor\UnloadToCloudStorage\Csv;
use Keboola\BigQuery\Extractor\Utils\IdGenerator;
use Keboola\Component\Manifest\ManifestManager;
use Keboola\Component\Manifest\ManifestManager\Options\OutTable\ManifestOptionsSchema;
use Keboola\Csv\CsvWriter;

class RawCsvWriter extends BaseCsvWriter implements ICsvWriter
{
    public const ITEM_ID_KEY = 'id';
    public const ID_COLUMN = 'id';
    public const DATA_COLUMN = 'data';

    private string $csvPath;

    private CsvWriter $writer;

    private int $rows = 0;

    public function __construct(string $dataDir, Config $config, ManifestManager $manifestManager)
    {
        parent::__construct($dataDir, $config, $manifestManager);
        $this->csvPath = sprintf('%s/out/tables/%s.csv', $dataDir, $config->getOutput());
        $this->writer = new CsvWriter($this->csvPath);
    }

    public function __destruct()
    {
        // No rows -> no CSV file
        if ($this->rows === 0) {
            @unlink($this->csvPath);
        }
    }

    public function writeItem(object $item): void
    {
        $id = $this->getId($item);

        // Remove ignored (generated) keys
        $item = $this->removeIgnoredKeys($item);

        // Write row to CSV
        $this->writer->writeRow([
            self::ID_COLUMN => $id,
            self::DATA_COLUMN => json_encode($item),
        ]);

        $this->lastRow = $item;
        $this->rows++;
    }

    public function finalize(): void
    {
        $this->writeManifest();
    }

    public function writeManifest(): void
    {
        if ($this->rows > 0) {
            $options = new ManifestManager\Options\OutTable\ManifestOptions();
            $options
                ->setSchema($this->getSchema())
                ->setIncremental($this->config->isIncremental());

            $this->manifestManager->writeTableManifest(
                $this->config->getOutput().'.csv',
                $options,
                $this->config->getDataTypeSupport()->usingLegacyManifest(),
            );
        }
    }

    /**
     * @return ManifestOptionsSchema[]
     */
    protected function getSchema(): array
    {
        return [
            new ManifestOptionsSchema(
                'id',
                ['base' => ['type' => 'string']],
                false,
                true,
            ),
            new ManifestOptionsSchema(
                'data',
                ['base' => ['type' => 'string']],
                true,
                false,
            ),
        ];
    }

    protected function getId(object $item): string
    {
        // Each Cosmos DB item has the ID field
        $id = property_exists($item, self::ITEM_ID_KEY) ? $item->{self::ITEM_ID_KEY} : null;

        if (!$id) {
            if ($this->config->hasSelect()) {
                // ID is missing, because it is not configured in the "select"
                throw new UserException(
                    'Missing "id" key in the query results. ' .
                    'Please modify the "select" value in the configuration ' .
                    'or use the "mapping" mode instead of the "raw".',
                );
            }

            throw new ApplicationException('Missing "id" key in the query results.');
        }

        return (string) $id;
    }
}


================================================
File: src/Extractor/NodeJs/extract.js
================================================
'use strict';

import Extractor from './lib/Extractor.js';
import UserError from './lib/UserError.js';
import ApplicationError from './lib/ApplicationError.js';

async function main() {
  const extractor = new Extractor();
  await extractor.extract();
}

main().catch((error) => {
  // User error
  if (error instanceof UserError) {
    console.error(error.message);
    process.exit(1);
  }

  // Application error
  console.error(error instanceof ApplicationError ? error.message : error);
  process.exit(2);
});


================================================
File: src/Extractor/NodeJs/testConnection.js
================================================
'use strict';

import Extractor from './lib/Extractor.js';
import UserError from './lib/UserError.js';
import ApplicationError from './lib/ApplicationError.js';

async function main() {
  const extractor = new Extractor();
  await extractor.testConnection();
}

main().catch((error) => {
  // User error
  if (error instanceof UserError) {
    console.error(error.message);
    process.exit(1);
  }

  // Application error
  console.error(error instanceof ApplicationError ? error.message : error);
  process.exit(2);
});


================================================
File: src/Extractor/NodeJs/lib/ApplicationError.js
================================================
'use strict';

export default class ApplicationError extends Error {}


================================================
File: src/Extractor/NodeJs/lib/Extractor.js
================================================
'use strict';

import promiseRetry from 'p-retry';
import { CosmosClient } from '@azure/cosmos';
import UserError from './UserError.js';
import ApplicationError from './ApplicationError.js';
import jsonStream from './jsonStream.js';

export default class Extractor {
  static async fetchNextWithRetry(iterator, maxTries) {
    return promiseRetry(async () => iterator.fetchNext(), {
      onFailedAttempt: (error) => {
        if (error.retriesLeft > 0) {
          console.log(`${error.message}. Retrying... [${error.attemptNumber}x]`);
        }
      },
      retries: maxTries - 1,
      factor: 2, // exponential factor
      minTimeout: 1000,
      maxTimeout: 30000,
    });
  }

  constructor() {
    // Check environment variables
    ['JSON_DELIMITER', 'ENDPOINT', 'KEY', 'DATABASE_ID'].forEach((key) => {
      if (!process.env[key]) {
        throw new ApplicationError(`Missing "${key}" environment variable.`);
      }
    });

    this.delimiter = JSON.parse(process.env.JSON_DELIMITER);
    this.endpoint = process.env.ENDPOINT;
    this.key = process.env.KEY;
    this.databaseId = process.env.DATABASE_ID;
  }

  async testConnection() {
    await this.getDatabase();
  }

  async extract() {
    // Check additional environment variables
    ['CONTAINER_ID', 'QUERY', 'MAX_TRIES'].forEach((key) => {
      if (!process.env[key]) {
        throw new ApplicationError(`Missing "${key}" environment variable.`);
      }
    });

    const containerId = process.env.CONTAINER_ID;
    const query = process.env.QUERY;
    const maxTries = process.env.MAX_TRIES;
    const container = await this.getContainer(containerId);

    try {
      await this.fetchAll(container, query, maxTries);
    } catch (e) {
      switch (true) {
        case e.code === 400:
          // Bad request, eg. bad SQL query
          throw new UserError(e.message);

        default:
          throw e;
      }
    }
  }

  async processPage(page, pageIndex, resolve) {
    if (!page.resources) {
      resolve(0);
      return;
    }

    let count = 0;
    page.resources.forEach((item) => {
      // Write item in JSON format, so PHP process can process it
      jsonStream.write(JSON.stringify(item));
      // Write delimiter
      jsonStream.write(this.delimiter);
      count += 1;
    });
    resolve(count);
  }

  async fetchAll(container, query, maxTries) {
    console.log(`Running query: "${query}"`);
    const iterator = container.items.query(query);

    let i = 0;
    let count = 0;
    let prevPage = null;

    while (true) {
      // Start fetching of the next page
      const page = iterator.hasMoreResults() ? await Extractor.fetchNextWithRetry(iterator, maxTries) : null;

      // Wait for the previous page to be processed,
      // ... so the outputs from the two pages are not mixed
      count += await prevPage;

      // End if no new page present
      if (!page) {
        break;
      }

      // Schedule the page processing,
      // ... so we can start fetching of the next page during processing of the current page
      const pageIndex = i;
      prevPage = new Promise((resolve) => process.nextTick(() => this.processPage(page, pageIndex, resolve)));
      i += 1;
    }

    // Wait until all data has been sent to the PHP process
    await new Promise((resolve) => jsonStream.end(resolve));
    console.log(`Fetched "${count}" items / "${i}" pages from the container "${container.id}".`);
  }

  async getContainer(containerId) {
    // Container is something like a table or a collection
    const database = await this.getDatabase();
    try {
      const container = database.container(containerId);
      const containerInfo = await container.read();
      console.log(`Connected to the container: "${containerInfo.resource.id}"`);
      return container;
    } catch (e) {
      switch (true) {
        case e.code === 404:
          throw new UserError(`Container "${containerId}" not found.`);

        default:
          throw e;
      }
    }
  }

  async getDatabase() {
    try {
      console.log(`Connecting to the endpoint: "${this.endpoint}"`);
      const client = new CosmosClient({ endpoint: this.endpoint, key: this.key });
      const database = client.database(this.databaseId);
      const databaseInfo = await database.read();
      console.log(`Connected to the database: "${databaseInfo.resource.id}"`);
      return database;
    } catch (e) {
      switch (true) {
        case e.code === 'ERR_INVALID_URL':
          throw new UserError(`Cannot connect: Invalid endpoint url "${this.endpoint}".`);

        case e.code === 404:
          throw new UserError('Cannot connect: Database not found.');

        case e.message && e.message.includes('authorization token can\'t serve the request.'):
          throw new UserError('Cannot connect: Invalid key.');

        default:
          const msg = e.message || e;
          throw new UserError(`Cannot connect: ${msg}`);
      }
    }
  }
}


================================================
File: src/Extractor/NodeJs/lib/UserError.js
================================================
'use strict';

export default class UserError extends Error {}


================================================
File: src/Extractor/NodeJs/lib/jsonStream.js
================================================
'use strict';

import fs from 'fs';
// We are using separated file descriptor to output JSON documents
// Default file descriptors are used: STDOUT to log info messages and STDERR to log warnings.
// Number of the custom file descriptor is loaded from ENV (set by PHP), ... fallback is STDOUT.
let jsonStreamFd;
if (process.env.JSON_STREAM_FD !== undefined) {
  jsonStreamFd = parseInt(process.env.JSON_STREAM_FD, 10);
} else {
  console.error('Please, set env variable "JSON_STREAM_FD". Using STDOUT as fallback.');
  jsonStreamFd = process.stdout.fd;
}
export default fs.createWriteStream(null, { fd: jsonStreamFd });


================================================
File: tests/functional/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\FunctionalTests;

use Keboola\DatadirTests\DatadirTestCase;
use Symfony\Component\Finder\Finder;
use Throwable;

class DatadirTest extends DatadirTestCase
{
    public function assertDirectoryContentsSame(string $expected, string $actual): void
    {
        $this->prettifyAllManifests($actual);
        parent::assertDirectoryContentsSame($expected, $actual);
    }
    protected function prettifyAllManifests(string $actual): void
    {
        foreach ($this->findManifests($actual . '/tables') as $file) {
            $this->prettifyJsonFile((string) $file->getRealPath());
        }
    }

    protected function prettifyJsonFile(string $path): void
    {
        $json = (string) file_get_contents($path);
        try {
            file_put_contents($path, (string) json_encode(json_decode($json), JSON_PRETTY_PRINT));
        } catch (Throwable) {
            // If a problem occurs, preserve the original contents
            file_put_contents($path, $json);
        }
    }

    protected function findManifests(string $dir): Finder
    {
        $finder = new Finder();
        return $finder->files()->in($dir)->name(['~.*\.manifest~']);
    }
}


================================================
File: tests/functional/error-bad-custom-query-3-max-tries/expected-code
================================================
1


================================================
File: tests/functional/error-bad-custom-query-3-max-tries/expected-stderr
================================================
%AOne of the input values is invalid.%A


================================================
File: tests/functional/error-bad-custom-query-3-max-tries/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "movie"
Running query: "SELECT foo FROM bar"
%AOne of the input values is invalid.%A Retrying... [1x]
%AOne of the input values is invalid.%A Retrying... [2x]


================================================
File: tests/functional/error-bad-custom-query-3-max-tries/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "movie",
    "output": "output-csv",
    "mode": "raw",
    "query": "SELECT foo FROM bar",
    "maxTries": 3
  }
}


================================================
File: tests/functional/error-bad-custom-query-no-retry/expected-code
================================================
1


================================================
File: tests/functional/error-bad-custom-query-no-retry/expected-stderr
================================================
%AOne of the input values is invalid.%A


================================================
File: tests/functional/error-bad-custom-query-no-retry/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "movie"
Running query: "SELECT foo FROM bar"


================================================
File: tests/functional/error-bad-custom-query-no-retry/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "movie",
    "output": "output-csv",
    "mode": "raw",
    "query": "SELECT foo FROM bar",
    "maxTries": 1
  }
}


================================================
File: tests/functional/error-container-not-found/expected-code
================================================
1


================================================
File: tests/functional/error-container-not-found/expected-stderr
================================================
Container "invalid" not found.
Export failed.


================================================
File: tests/functional/error-container-not-found/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"


================================================
File: tests/functional/error-container-not-found/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "invalid",
    "output": "output-csv",
    "mode": "raw"
  }
}


================================================
File: tests/functional/error-mapping-bad-config/expected-code
================================================
1


================================================
File: tests/functional/error-mapping-bad-config/expected-stderr
================================================
Key 'destination' is not set for table 'abc'.


================================================
File: tests/functional/error-mapping-bad-config/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c"


================================================
File: tests/functional/error-mapping-bad-config/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "simple",
    "output": "output-csv",
    "mode": "mapping",
    "mapping": {
      "abc": {
        "type": "table"
      }
    }
  }
}


================================================
File: tests/functional/error-mapping-bad-data/expected-code
================================================
1


================================================
File: tests/functional/error-mapping-bad-data/expected-stderr
================================================
Error writing 'info' column: Cannot write data into column: (object)%A


================================================
File: tests/functional/error-mapping-bad-data/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "movie"
Running query: "SELECT * FROM c"


================================================
File: tests/functional/error-mapping-bad-data/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "movie",
    "output": "output-csv",
    "mode": "mapping",
    "mapping": {
      "id": "id",
      "info": "info"
    }
  }
}


================================================
File: tests/functional/error-raw-select-missing-id/expected-code
================================================
1


================================================
File: tests/functional/error-raw-select-missing-id/expected-stderr
================================================
Missing "id" key in the query results. Please modify the "select" value in the configuration or use the "mapping" mode instead of the "raw".


================================================
File: tests/functional/error-raw-select-missing-id/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "movie"
Running query: "SELECT c.title, c.actors FROM c"


================================================
File: tests/functional/error-raw-select-missing-id/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "movie",
    "output": "output-csv",
    "mode": "raw",
    "select": "c.title, c.actors"
  }
}


================================================
File: tests/functional/mapping-complex/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "movie"
Running query: "SELECT * FROM c"
Fetched "3" items / "1" pages from the container "movie".


================================================
File: tests/functional/mapping-complex/expected/data/out/tables/actor.csv
================================================
"Daniel Bruhl","Rush"
"Chris Hemsworth","Rush"
"Olivia Wilde","Rush"
"Hugh Jackman","Prisoners"
"Jake Gyllenhaal","Prisoners"
"Viola Davis","Prisoners"
"Patrick Wilson","Insidious: Chapter 2"
"Rose Byrne","Insidious: Chapter 2"
"Barbara Hershey","Insidious: Chapter 2"


================================================
File: tests/functional/mapping-complex/expected/data/out/tables/actor.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "name",
        "movie_pk"
    ],
    "column_metadata": {
        "name": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "movie_pk": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/mapping-complex/expected/data/out/tables/movie.csv
================================================
"Rush","2013-09-02T00:00:00Z","","[""Ron Howard""]"
"Prisoners","2013-08-30T00:00:00Z","","[""Denis Villeneuve""]"
"Insidious: Chapter 2","2013-09-13T00:00:00Z","","[""James Wan""]"


================================================
File: tests/functional/mapping-complex/expected/data/out/tables/movie.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "title-id",
        "release_date",
        "missing",
        "directors"
    ],
    "primary_key": [
        "title-id"
    ],
    "column_metadata": {
        "title-id": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "release_date": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "missing": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "directors": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/mapping-complex/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "movie",
    "output": "movie",
    "mode": "mapping",
    "mapping": {
      "title": {
        "type": "column",
        "mapping": {
          "destination": "title-id",
          "primaryKey": true
        }
      },
      "info.release_date": "release_date",
      "missing": "missing",
      "info.directors": { "type": "column", "mapping": { "destination": "directors" }, "forceType": true },
      "info.actors": { "type": "table", "destination": "actor", "tableMapping": { "": "name" } }
    }
  }
}


================================================
File: tests/functional/mapping-fk-keys/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "fk_keys_check"
Running query: "SELECT * FROM c"
Fetched "4" items / "1" pages from the container "fk_keys_check".


================================================
File: tests/functional/mapping-fk-keys/expected/data/out/tables/level1.csv
================================================
"123","123","be5e25e72e6b2a5454dc99f9cc830c21","be5e25e72e6b2a5454dc99f9cc830c21","4a59fa3c94f060c5060c16a37d8a08b1"
"123","123","8548ce314658dfbc022ca94635cf1905","8548ce314658dfbc022ca94635cf1905","d725966bce29c19dae4131145f26e529"
"456","123","177bc26b5ae19099c845ed74d094eed6","177bc26b5ae19099c845ed74d094eed6","87a69f76b73ba3008c4e800e9c66d9f1"
"456","123","cc281168d52b3c39ad594a56c94548af","cc281168d52b3c39ad594a56c94548af","a16939320e0ba853a22833ca84fca80d"


================================================
File: tests/functional/mapping-fk-keys/expected/data/out/tables/level1.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "a",
        "b",
        "level2-a",
        "level2-b",
        "output-csv_pk"
    ],
    "column_metadata": {
        "a": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "b": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "level2-a": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "level2-b": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "output-csv_pk": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/mapping-fk-keys/expected/data/out/tables/level2-a.csv
================================================
"1","123","be5e25e72e6b2a5454dc99f9cc830c21"
"1","123","8548ce314658dfbc022ca94635cf1905"
"20","456","177bc26b5ae19099c845ed74d094eed6"
"20","456","cc281168d52b3c39ad594a56c94548af"


================================================
File: tests/functional/mapping-fk-keys/expected/data/out/tables/level2-a.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "count",
        "itemId",
        "level1_pk"
    ],
    "column_metadata": {
        "count": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "itemId": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "level1_pk": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/mapping-fk-keys/expected/data/out/tables/level2-b.csv
================================================
"1","123","be5e25e72e6b2a5454dc99f9cc830c21"
"1","123","8548ce314658dfbc022ca94635cf1905"
"1","123","177bc26b5ae19099c845ed74d094eed6"
"1","123","cc281168d52b3c39ad594a56c94548af"


================================================
File: tests/functional/mapping-fk-keys/expected/data/out/tables/level2-b.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "count",
        "itemId",
        "level1_pk"
    ],
    "column_metadata": {
        "count": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "itemId": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "level1_pk": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/mapping-fk-keys/expected/data/out/tables/output-csv.csv
================================================
"5716054bee6e764c94fa7aaa","4a59fa3c94f060c5060c16a37d8a08b1"
"5716054bee6e764c94fa7aab","d725966bce29c19dae4131145f26e529"
"5716054bee6e764c94fa7aac","87a69f76b73ba3008c4e800e9c66d9f1"
"5716054bee6e764c94fa7aad","a16939320e0ba853a22833ca84fca80d"


================================================
File: tests/functional/mapping-fk-keys/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "level1"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "level1": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/mapping-fk-keys/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "fk_keys_check",
    "output": "output-csv",
    "mode": "mapping",
    "mapping": {
      "id": "id",
      "item": {
        "type": "table",
        "destination": "level1",
        "tableMapping": {
          "a.itemId": "a",
          "b.itemId": "b",
          "a": {
            "type": "table",
            "destination": "level2-a",
            "tableMapping": {
              "count": "count",
              "itemId": "itemId"
            }
          },
          "b": {
            "type": "table",
            "destination": "level2-b",
            "tableMapping": {
              "count": "count",
              "itemId": "itemId"
            }
          }
        }
      }
    }
  }
}


================================================
File: tests/functional/mapping-incremental-fetching/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c ORDER BY c.id"
Fetched "5" items / "1" pages from the container "simple".


================================================
File: tests/functional/mapping-incremental-fetching/expected/data/out/state.json
================================================
{"lastFetchedRow":"5"}


================================================
File: tests/functional/mapping-incremental-fetching/expected/data/out/tables/output-csv.csv
================================================
"1","Erika Harrell","18"
"2","Nahla Nunez","20"
"3","Jaeden Escobar","14"
"4","Zane Craft","13"
"5","Sebastien Mora","32"


================================================
File: tests/functional/mapping-incremental-fetching/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "full_name",
        "age"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "full_name": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "age": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/mapping-incremental-fetching/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "simple",
    "output": "output-csv",
    "mode": "mapping",
    "incrementalFetchingKey": "c.id",
    "mapping": {
      "id": "id",
      "name": "full_name",
      "age": "age"
    }
  }
}


================================================
File: tests/functional/mapping-incremental-fetching-empty-container/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "empty"
Running query: "SELECT * FROM c ORDER BY c.id"
Fetched "0" items / "1" pages from the container "empty".


================================================
File: tests/functional/mapping-incremental-fetching-empty-container/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "empty",
    "output": "output-csv",
    "mode": "mapping",
    "incrementalFetchingKey": "c.id",
    "mapping": {
      "id": "id",
      "name": "full_name",
      "age": "age"
    }
  }
}


================================================
File: tests/functional/mapping-incremental-fetching-empty-container-with-state/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "empty"
Running query: "SELECT * FROM c WHERE c.id >= "4" ORDER BY c.id"
Fetched "0" items / "1" pages from the container "empty".


================================================
File: tests/functional/mapping-incremental-fetching-empty-container-with-state/expected/data/out/state.json
================================================
{"lastFetchedRow":"4"}


================================================
File: tests/functional/mapping-incremental-fetching-empty-container-with-state/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "empty",
    "output": "output-csv",
    "mode": "mapping",
    "incrementalFetchingKey": "c.id",
    "mapping": {
      "id": "id",
      "name": "full_name",
      "age": "age"
    }
  }
}


================================================
File: tests/functional/mapping-incremental-fetching-empty-container-with-state/source/data/in/state.json
================================================
{"lastFetchedRow":"4"}


================================================
File: tests/functional/mapping-incremental-fetching-native-types-manifest/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c ORDER BY c.id"
Fetched "5" items / "1" pages from the container "simple".


================================================
File: tests/functional/mapping-incremental-fetching-native-types-manifest/expected/data/out/state.json
================================================
{"lastFetchedRow":"5"}


================================================
File: tests/functional/mapping-incremental-fetching-native-types-manifest/expected/data/out/tables/output-csv.csv
================================================
"1","Erika Harrell","18"
"2","Nahla Nunez","20"
"3","Jaeden Escobar","14"
"4","Zane Craft","13"
"5","Sebastien Mora","32"


================================================
File: tests/functional/mapping-incremental-fetching-native-types-manifest/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "schema": [
        {
            "nullable": true,
            "primary_key": false,
            "name": "id",
            "data_type": {
                "base": {
                    "type": "string"
                }
            }
        },
        {
            "nullable": true,
            "primary_key": false,
            "name": "full_name",
            "data_type": {
                "base": {
                    "type": "string"
                }
            }
        },
        {
            "nullable": true,
            "primary_key": false,
            "name": "age",
            "data_type": {
                "base": {
                    "type": "string"
                }
            }
        }
    ]
}

================================================
File: tests/functional/mapping-incremental-fetching-native-types-manifest/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "simple",
    "output": "output-csv",
    "mode": "mapping",
    "incrementalFetchingKey": "c.id",
    "mapping": {
      "id": "id",
      "name": "full_name",
      "age": "age"
    }
  },
  "storage": {
    "output": {
      "data_type_support": "authoritative"
    }
  }
}


================================================
File: tests/functional/mapping-incremental-fetching-with-state/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c WHERE c.id >= "4" ORDER BY c.id"
Fetched "2" items / "1" pages from the container "simple".


================================================
File: tests/functional/mapping-incremental-fetching-with-state/expected/data/out/state.json
================================================
{"lastFetchedRow":"5"}


================================================
File: tests/functional/mapping-incremental-fetching-with-state/expected/data/out/tables/output-csv.csv
================================================
"4","Zane Craft","13"
"5","Sebastien Mora","32"


================================================
File: tests/functional/mapping-incremental-fetching-with-state/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "full_name",
        "age"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "full_name": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "age": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/mapping-incremental-fetching-with-state/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "simple",
    "output": "output-csv",
    "mode": "mapping",
    "incrementalFetchingKey": "c.id",
    "mapping": {
      "id": "id",
      "name": "full_name",
      "age": "age"
    }
  }
}


================================================
File: tests/functional/mapping-incremental-fetching-with-state/source/data/in/state.json
================================================
{"lastFetchedRow":"4"}


================================================
File: tests/functional/mapping-no-data/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c WHERE c.name = 'not_found'"
Fetched "0" items / "1" pages from the container "simple".


================================================
File: tests/functional/mapping-no-data/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "simple",
    "query": "SELECT * FROM c WHERE c.name = 'not_found'",
    "output": "output-csv",
    "mode": "mapping",
    "mapping": {
      "id": "id",
      "name": "full_name",
      "age": "age"
    }
  }
}


================================================
File: tests/functional/mapping-simple/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c"
Fetched "5" items / "1" pages from the container "simple".


================================================
File: tests/functional/mapping-simple/expected/data/out/tables/output-csv.csv
================================================
"1","Erika Harrell","18"
"2","Nahla Nunez","20"
"3","Jaeden Escobar","14"
"4","Zane Craft","13"
"5","Sebastien Mora","32"


================================================
File: tests/functional/mapping-simple/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "full_name",
        "age"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "full_name": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "age": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/mapping-simple/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "simple",
    "output": "output-csv",
    "mode": "mapping",
    "mapping": {
      "id": "id",
      "name": "full_name",
      "age": "age"
    }
  }
}


================================================
File: tests/functional/raw-custom-query/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "movie"
Running query: "SELECT m.title AS id FROM Movie m OFFSET 0 LIMIT 1"
Fetched "1" items / "1" pages from the container "movie".


================================================
File: tests/functional/raw-custom-query/expected/data/out/tables/output-csv.csv
================================================
"Rush","{""id"":""Rush""}"


================================================
File: tests/functional/raw-custom-query/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "data"
    ],
    "primary_key": [
        "id"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": false
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "data": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/raw-custom-query/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "movie",
    "output": "output-csv",
    "mode": "raw",
    "query": "SELECT m.title AS id FROM Movie m OFFSET 0 LIMIT 1"
  }
}


================================================
File: tests/functional/raw-from/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "movie"
Running query: "SELECT CONCAT(m.id, '-', g) AS id, m.title, g AS genre FROM Movie m JOIN g IN m.info.genres"
Fetched "9" items / "1" pages from the container "movie".


================================================
File: tests/functional/raw-from/expected/data/out/tables/output-csv.csv
================================================
"1-Action","{""id"":""1-Action"",""title"":""Rush"",""genre"":""Action""}"
"1-Biography","{""id"":""1-Biography"",""title"":""Rush"",""genre"":""Biography""}"
"1-Drama","{""id"":""1-Drama"",""title"":""Rush"",""genre"":""Drama""}"
"1-Sport","{""id"":""1-Sport"",""title"":""Rush"",""genre"":""Sport""}"
"2-Crime","{""id"":""2-Crime"",""title"":""Prisoners"",""genre"":""Crime""}"
"2-Drama","{""id"":""2-Drama"",""title"":""Prisoners"",""genre"":""Drama""}"
"2-Thriller","{""id"":""2-Thriller"",""title"":""Prisoners"",""genre"":""Thriller""}"
"3-Horror","{""id"":""3-Horror"",""title"":""Insidious: Chapter 2"",""genre"":""Horror""}"
"3-Thriller","{""id"":""3-Thriller"",""title"":""Insidious: Chapter 2"",""genre"":""Thriller""}"


================================================
File: tests/functional/raw-from/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "data"
    ],
    "primary_key": [
        "id"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": false
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "data": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/raw-from/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "movie",
    "output": "output-csv",
    "mode": "raw",
    "select": "CONCAT(m.id, '-', g) AS id, m.title, g AS genre",
    "from": "Movie m JOIN g IN m.info.genres"
  }
}


================================================
File: tests/functional/raw-incremental-fetching/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c ORDER BY c.id"
Fetched "5" items / "1" pages from the container "simple".


================================================
File: tests/functional/raw-incremental-fetching/expected/data/out/state.json
================================================
{"lastFetchedRow":"5"}


================================================
File: tests/functional/raw-incremental-fetching/expected/data/out/tables/output-csv.csv
================================================
"1","{""id"":""1"",""name"":""Erika Harrell"",""age"":18}"
"2","{""id"":""2"",""name"":""Nahla Nunez"",""age"":20}"
"3","{""id"":""3"",""name"":""Jaeden Escobar"",""age"":14}"
"4","{""id"":""4"",""name"":""Zane Craft"",""age"":13}"
"5","{""id"":""5"",""name"":""Sebastien Mora"",""age"":32}"


================================================
File: tests/functional/raw-incremental-fetching/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "data"
    ],
    "primary_key": [
        "id"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": false
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "data": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/raw-incremental-fetching/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "simple",
    "output": "output-csv",
    "mode": "raw",
    "incrementalFetchingKey": "c.id"
  }
}


================================================
File: tests/functional/raw-incremental-fetching-empty-container/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "empty"
Running query: "SELECT * FROM c ORDER BY c.id"
Fetched "0" items / "1" pages from the container "empty".


================================================
File: tests/functional/raw-incremental-fetching-empty-container/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "empty",
    "output": "output-csv",
    "mode": "raw",
    "incrementalFetchingKey": "c.id"
  }
}


================================================
File: tests/functional/raw-incremental-fetching-empty-container-with-state/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "empty"
Running query: "SELECT * FROM c WHERE c.id >= "4" ORDER BY c.id"
Fetched "0" items / "1" pages from the container "empty".


================================================
File: tests/functional/raw-incremental-fetching-empty-container-with-state/expected/data/out/state.json
================================================
{"lastFetchedRow":"4"}


================================================
File: tests/functional/raw-incremental-fetching-empty-container-with-state/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "empty",
    "output": "output-csv",
    "mode": "raw",
    "incrementalFetchingKey": "c.id"
  }
}


================================================
File: tests/functional/raw-incremental-fetching-empty-container-with-state/source/data/in/state.json
================================================
{"lastFetchedRow":"4"}


================================================
File: tests/functional/raw-incremental-fetching-with-state/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c WHERE c.id >= "4" ORDER BY c.id"
Fetched "2" items / "1" pages from the container "simple".


================================================
File: tests/functional/raw-incremental-fetching-with-state/expected/data/out/state.json
================================================
{"lastFetchedRow":"5"}


================================================
File: tests/functional/raw-incremental-fetching-with-state/expected/data/out/tables/output-csv.csv
================================================
"4","{""id"":""4"",""name"":""Zane Craft"",""age"":13}"
"5","{""id"":""5"",""name"":""Sebastien Mora"",""age"":32}"


================================================
File: tests/functional/raw-incremental-fetching-with-state/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "data"
    ],
    "primary_key": [
        "id"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": false
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "data": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/raw-incremental-fetching-with-state/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "simple",
    "output": "output-csv",
    "mode": "raw",
    "incrementalFetchingKey": "c.id"
  }
}


================================================
File: tests/functional/raw-incremental-fetching-with-state/source/data/in/state.json
================================================
{"lastFetchedRow":"4"}


================================================
File: tests/functional/raw-incremental-true/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c"
Fetched "5" items / "1" pages from the container "simple".


================================================
File: tests/functional/raw-incremental-true/expected/data/out/tables/output-csv.csv
================================================
"1","{""id"":""1"",""name"":""Erika Harrell"",""age"":18}"
"2","{""id"":""2"",""name"":""Nahla Nunez"",""age"":20}"
"3","{""id"":""3"",""name"":""Jaeden Escobar"",""age"":14}"
"4","{""id"":""4"",""name"":""Zane Craft"",""age"":13}"
"5","{""id"":""5"",""name"":""Sebastien Mora"",""age"":32}"


================================================
File: tests/functional/raw-incremental-true/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": true,
    "columns": [
        "id",
        "data"
    ],
    "primary_key": [
        "id"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": false
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "data": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/raw-incremental-true/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "simple",
    "output": "output-csv",
    "mode": "raw",
    "incremental": true
  }
}


================================================
File: tests/functional/raw-limit/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "movie"
Running query: "SELECT c.title AS id, c.year FROM c OFFSET 0 LIMIT 2"
Fetched "2" items / "1" pages from the container "movie".


================================================
File: tests/functional/raw-limit/expected/data/out/tables/output-csv.csv
================================================
"Rush","{""id"":""Rush"",""year"":2013}"
"Prisoners","{""id"":""Prisoners"",""year"":2011}"


================================================
File: tests/functional/raw-limit/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "data"
    ],
    "primary_key": [
        "id"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": false
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "data": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/raw-limit/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "movie",
    "output": "output-csv",
    "mode": "raw",
    "select": "c.title AS id, c.year",
    "limit": 2
  }
}


================================================
File: tests/functional/raw-no-data/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c WHERE c.name = 'not_found'"
Fetched "0" items / "1" pages from the container "simple".


================================================
File: tests/functional/raw-no-data/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "simple",
    "query": "SELECT * FROM c WHERE c.name = 'not_found'",
    "output": "output-csv",
    "mode": "raw"
  }
}


================================================
File: tests/functional/raw-select/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "movie"
Running query: "SELECT c.title AS id, c.info.genres FROM c"
Fetched "3" items / "1" pages from the container "movie".


================================================
File: tests/functional/raw-select/expected/data/out/tables/output-csv.csv
================================================
"Rush","{""id"":""Rush"",""genres"":[""Action"",""Biography"",""Drama"",""Sport""]}"
"Prisoners","{""id"":""Prisoners"",""genres"":[""Crime"",""Drama"",""Thriller""]}"
"Insidious: Chapter 2","{""id"":""Insidious: Chapter 2"",""genres"":[""Horror"",""Thriller""]}"


================================================
File: tests/functional/raw-select/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "data"
    ],
    "primary_key": [
        "id"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": false
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "data": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/raw-select/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "movie",
    "output": "output-csv",
    "mode": "raw",
    "select": "c.title AS id, c.info.genres"
  }
}


================================================
File: tests/functional/raw-simple/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c"
Fetched "5" items / "1" pages from the container "simple".


================================================
File: tests/functional/raw-simple/expected/data/out/tables/output-csv.csv
================================================
"1","{""id"":""1"",""name"":""Erika Harrell"",""age"":18}"
"2","{""id"":""2"",""name"":""Nahla Nunez"",""age"":20}"
"3","{""id"":""3"",""name"":""Jaeden Escobar"",""age"":14}"
"4","{""id"":""4"",""name"":""Zane Craft"",""age"":13}"
"5","{""id"":""5"",""name"":""Sebastien Mora"",""age"":32}"


================================================
File: tests/functional/raw-simple/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "data"
    ],
    "primary_key": [
        "id"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": false
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "data": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/raw-simple/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "simple",
    "output": "output-csv",
    "mode": "raw"
  }
}


================================================
File: tests/functional/raw-simple-config-row/expected-stdout
================================================
Exporting "config-row-123" ...
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "simple"
Running query: "SELECT * FROM c"
Fetched "5" items / "1" pages from the container "simple".


================================================
File: tests/functional/raw-simple-config-row/expected/data/out/tables/output-csv.csv
================================================
"1","{""id"":""1"",""name"":""Erika Harrell"",""age"":18}"
"2","{""id"":""2"",""name"":""Nahla Nunez"",""age"":20}"
"3","{""id"":""3"",""name"":""Jaeden Escobar"",""age"":14}"
"4","{""id"":""4"",""name"":""Zane Craft"",""age"":13}"
"5","{""id"":""5"",""name"":""Sebastien Mora"",""age"":32}"


================================================
File: tests/functional/raw-simple-config-row/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "data"
    ],
    "primary_key": [
        "id"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": false
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "data": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/raw-simple-config-row/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "id": 123,
    "name": "config-row-123",
    "containerId": "simple",
    "output": "output-csv",
    "mode": "raw"
  }
}


================================================
File: tests/functional/raw-sort/expected-stdout
================================================
Connecting to the endpoint: "%a"
Connected to the database: "%a"
Connected to the container: "movie"
Running query: "SELECT c.title AS id, c.year FROM c ORDER BY c.year DESC"
Fetched "3" items / "1" pages from the container "movie".


================================================
File: tests/functional/raw-sort/expected/data/out/tables/output-csv.csv
================================================
"Rush","{""id"":""Rush"",""year"":2013}"
"Insidious: Chapter 2","{""id"":""Insidious: Chapter 2"",""year"":2012}"
"Prisoners","{""id"":""Prisoners"",""year"":2011}"


================================================
File: tests/functional/raw-sort/expected/data/out/tables/output-csv.csv.manifest
================================================
{
    "incremental": false,
    "columns": [
        "id",
        "data"
    ],
    "primary_key": [
        "id"
    ],
    "column_metadata": {
        "id": [
            {
                "key": "KBC.datatype.nullable",
                "value": false
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ],
        "data": [
            {
                "key": "KBC.datatype.nullable",
                "value": true
            },
            {
                "key": "KBC.datatype.basetype",
                "value": "string"
            }
        ]
    }
}

================================================
File: tests/functional/raw-sort/source/data/config.json
================================================
{
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    },
    "containerId": "movie",
    "output": "output-csv",
    "mode": "raw",
    "select": "c.title AS id, c.year",
    "sort": "c.year DESC"
  }
}


================================================
File: tests/functional/test-connection-bad-config/expected-code
================================================
1


================================================
File: tests/functional/test-connection-bad-config/expected-stderr
================================================
The child config "db" under "root.parameters" must be configured.


================================================
File: tests/functional/test-connection-bad-config/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
  }
}


================================================
File: tests/functional/test-connection-bad-endpoint/expected-code
================================================
1


================================================
File: tests/functional/test-connection-bad-endpoint/expected-stderr
================================================
Cannot connect: Unexpected token < in JSON at position 0


================================================
File: tests/functional/test-connection-bad-endpoint/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "db": {
      "endpoint": "https://google.com",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    }
  }
}


================================================
File: tests/functional/test-connection-database-not-found/expected-code
================================================
1


================================================
File: tests/functional/test-connection-database-not-found/expected-stderr
================================================
Cannot connect: Database not found.


================================================
File: tests/functional/test-connection-database-not-found/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "invalid-database"
    }
  }
}


================================================
File: tests/functional/test-connection-invalid-endpoint/expected-code
================================================
1


================================================
File: tests/functional/test-connection-invalid-endpoint/expected-stderr
================================================
Cannot connect: Invalid endpoint url "invalid endpoint".


================================================
File: tests/functional/test-connection-invalid-endpoint/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "db": {
      "endpoint": "invalid endpoint",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    }
  }
}


================================================
File: tests/functional/test-connection-invalid-key/expected-code
================================================
1


================================================
File: tests/functional/test-connection-invalid-key/expected-stderr
================================================
Cannot connect: Invalid key.


================================================
File: tests/functional/test-connection-invalid-key/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "invalidKey",
      "databaseId": "%env(string:DATABASE_ID)%"
    }
  }
}


================================================
File: tests/functional/test-connection-ok/expected-stdout
================================================
{"success":true}


================================================
File: tests/functional/test-connection-ok/source/data/config.json
================================================
{
  "action": "testConnection",
  "parameters": {
    "db": {
      "endpoint": "%env(string:ENDPOINT)%",
      "#key": "%env(string:KEY)%",
      "databaseId": "%env(string:DATABASE_ID)%"
    }
  }
}


================================================
File: tests/phpunit/AbstractTestCase.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Tests;

use ColinODell\PsrTestLogger\TestLogger;
use CosmosDbExtractor\Extractor\ProcessFactory;
use CosmosDbExtractor\Extractor\ProcessWrapper;
use PHPUnit\Framework\TestCase;
use React\EventLoop\Factory;
use React\EventLoop\LoopInterface;

abstract class AbstractTestCase extends TestCase
{
    protected TestLogger $logger;

    protected LoopInterface $loop;

    protected ProcessFactory $processFactory;

    protected function setUp(): void
    {
        parent::setUp();
        $this->logger = new TestLogger();
        $this->loop = Factory::create();
        $this->processFactory = new ProcessFactory($this->logger, $this->loop);
    }

    protected function createScriptProcess(string $script): ProcessWrapper
    {
        return $this->processFactory->create(sprintf('node %s/fixtures/%s', __DIR__, $script));
    }
}


================================================
File: tests/phpunit/ConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Tests;

use CosmosDbExtractor\Configuration\Config;
use CosmosDbExtractor\Configuration\ConfigDefinition;
use PHPUnit\Framework\Assert;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigTest extends AbstractTestCase
{
    /**
     * @dataProvider getValidConfigs
     * @param array<string,mixed> $input
     * @param array<string,mixed> $expected
     */
    public function testValidConfig(array $input, array $expected): void
    {
        $config = new Config(['parameters' => $input], new ConfigDefinition());
        Assert::assertSame($expected, $this->configToArray($config));
    }

    /**
     * @dataProvider getInvalidConfigs
     * @param array<string,mixed> $input
     */
    public function testInvalidConfig(string $expectedMsg, array $input): void
    {
        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage($expectedMsg);
        new Config(['parameters' => $input], new ConfigDefinition());
    }

    /**
     * @return iterable<string,array{array<string,mixed>,array<string,mixed>}>
     */
    public function getValidConfigs(): iterable
    {
        yield 'minimal' => [
            [
                'db' => $this->getDbNode(),
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'mode' => 'raw',
            ],
            [
                'endpoint' => 'https://abc.example.com',
                'key' => '12345',
                'databaseId' => 'myDatabase',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'configRowId' => null,
                'configRowName' => null,
                'maxTries' => 5,
                'select' => null,
                'from' => null,
                'sort' => null,
                'limit' => null,
                'query' => null,
                'mode' => 'raw',
                'mapping' => null,
                'isIncremental' => false,
                'incrementalFetchingKey' => null,
            ],
        ];

        yield 'generated-query' => [
            [
                'db' => $this->getDbNode(),
                'id' => 123,
                'name' => 'row123',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'maxTries' => 3,
                'select' => 'x.name, x.data',
                'from' => 'x',
                'sort' => 'x.date',
                'limit' => 500,
                'mode' => 'raw',
                'incremental' => true,
            ],
            [
                'endpoint' => 'https://abc.example.com',
                'key' => '12345',
                'databaseId' => 'myDatabase',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'configRowId' => 123,
                'configRowName' => 'row123',
                'maxTries' => 3,
                'select' => 'x.name, x.data',
                'from' => 'x',
                'sort' => 'x.date',
                'limit' => 500,
                'query' => null,
                'mode' => 'raw',
                'mapping' => null,
                'isIncremental' => true,
                'incrementalFetchingKey' => null,
            ],
        ];

        yield 'custom-query' => [
            [
                'db' => $this->getDbNode(),
                'id' => 123,
                'name' => 'row123',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'query' => 'SELECT name, data FROM c',
                'mode' => 'raw',
            ],
            [
                'endpoint' => 'https://abc.example.com',
                'key' => '12345',
                'databaseId' => 'myDatabase',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'configRowId' => 123,
                'configRowName' => 'row123',
                'maxTries' => 5,
                'select' => null,
                'from' => null,
                'sort' => null,
                'limit' => null,
                'query' => 'SELECT name, data FROM c',
                'mode' => 'raw',
                'mapping' => null,
                'isIncremental' => false,
                'incrementalFetchingKey' => null,
            ],
            [
                'endpoint' => 'https://abc.example.com',
                'key' => '12345',
                'databaseId' => 'myDatabase',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'configRowId' => 123,
                'configRowName' => 'row123',
                'maxTries' => 5,
                'select' => '',
                'from' => '',
                'sort' => '',
                'limit' => null,
                'query' => 'SELECT name, data FROM c',
                'mode' => 'raw',
                'mapping' => '',
                'isIncremental' => false,
                'incrementalFetchingKey' => '',
            ],
        ];

        yield 'mapping' => [
            [
                'db' => $this->getDbNode(),
                'id' => 123,
                'name' => 'row123',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'mode' => 'mapping',
                'mapping' => [
                    'id' => [
                        'type' => 'column',
                        'mapping' => [
                            'destination' => 'id',
                            'primaryKey' => true,
                        ],
                    ],
                ],
            ],
            [
                'endpoint' => 'https://abc.example.com',
                'key' => '12345',
                'databaseId' => 'myDatabase',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'configRowId' => 123,
                'configRowName' => 'row123',
                'maxTries' => 5,
                'select' => null,
                'from' => null,
                'sort' => null,
                'limit' => null,
                'query' => null,
                'mode' => 'mapping',
                'mapping' => [
                    'id' => [
                        'type' => 'column',
                        'mapping' => [
                            'destination' => 'id',
                            'primaryKey' => true,
                        ],
                    ],
                ],
                'isIncremental' => false,
                'incrementalFetchingKey' => null,
            ],
        ];

        yield 'raw-mapping' => [
            [
                'db' => $this->getDbNode(),
                'id' => 123,
                'name' => 'row123',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'mode' => 'raw',
                'mapping' => ['abc' => 'def'],
            ],
            [
                'endpoint' => 'https://abc.example.com',
                'key' => '12345',
                'databaseId' => 'myDatabase',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'configRowId' => 123,
                'configRowName' => 'row123',
                'maxTries' => 5,
                'select' => null,
                'from' => null,
                'sort' => null,
                'limit' => null,
                'query' => null,
                'mode' => 'raw',
                'mapping' => null,
                'isIncremental' => false,
                'incrementalFetchingKey' => null,
            ],
        ];
    }

    /**
     * @return iterable<string,array{string,array<string,mixed>}>
     */
    public function getInvalidConfigs(): iterable
    {
        yield 'empty' => [
            'The child config "db" under "root.parameters" must be configured.',
            [],
        ];

        yield 'missing-mapping' => [
            'Invalid configuration, missing "mapping" key, mode is set to "mapping".',
            [
                'db' => $this->getDbNode(),
                'id' => 123,
                'name' => 'row123',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'mode' => 'mapping',
            ],
        ];

        yield 'query-and-select' => [
            'Invalid configuration, "query" cannot be configured together with "select".',
            [
                'db' => $this->getDbNode(),
                'id' => 123,
                'name' => 'row123',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'mode' => 'raw',
                'query' => 'SELECT name, data FROM c',
                'select' => 'name, data',
            ],
        ];

        yield 'incremental-fetching-and-sort' => [
            'Invalid configuration, "incrementalFetchingKey" cannot be configured together with "sort".',
            [
                'db' => $this->getDbNode(),
                'id' => 123,
                'name' => 'row123',
                'containerId' => 'myContainer',
                'output' => 'output-csv',
                'mode' => 'raw',
                'sort' => 'c.id',
                'incrementalFetchingKey' => 'c.id',
            ],
        ];
    }

    /**
     * @return array<string,mixed>
     */
    private function configToArray(Config $config): array
    {
        return [
            'endpoint' => $config->getEndpoint(),
            'key' => $config->getKey(),
            'databaseId' => $config->getDatabaseId(),
            'containerId' => $config->getContainerId(),
            'output' => $config->getOutput(),
            'configRowId' => $config->hasConfigRowId() ? $config->getConfigRowId() : null,
            'configRowName' => $config->hasConfigRowName() ? $config->getConfigRowName() : null,
            'maxTries' => $config->getMaxTries(),
            'select' => $config->hasSelect() ? $config->getSelect() : null,
            'from' => $config->hasFrom() ? $config->getFrom() : null,
            'sort' => $config->hasSort() ? $config->getSort() : null,
            'limit' => $config->hasLimit() ? $config->getLimit() : null,
            'query' => $config->hasQuery() ? $config->getQuery() : null,
            'mode' => $config->getMode(),
            'mapping' => $config->getMode() === ConfigDefinition::MODE_MAPPING ? $config->getMapping() : null,
            'isIncremental' => $config->isIncremental(),
            'incrementalFetchingKey' =>
                $config->hasIncrementalFetchingKey() ? $config->getIncrementalFetchingKey() : null,
        ];
    }

    /**
     * @return array<string,string>
     */
    private function getDbNode(): array
    {
        return [
            'endpoint' => 'https://abc.example.com',
            '#key' => '12345',
            'databaseId' => 'myDatabase',
        ];
    }
}


================================================
File: tests/phpunit/JsonDecoderTest.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Tests;

use CosmosDbExtractor\Extractor\JsonDecoder;
use JsonException;
use PHPUnit\Framework\Assert;

class JsonDecoderTest extends AbstractTestCase
{
    private JsonDecoder $jsonDecoder;

    protected function setUp(): void
    {
        parent::setUp();
        $this->jsonDecoder = new JsonDecoder();
    }

    /**
     * @dataProvider getValidScripts
     * @param array<int, array<string,string>> $expectedDocuments
     */
    public function testValidJson(string $script, array $expectedDocuments): void
    {
        $parsedDocuments = [];
        $process = $this->createScriptProcess($script);
        $this->jsonDecoder->processStream(
            $process->getJsonStream(),
            function (object $document) use (&$parsedDocuments): void {
                // Convert object to array for asserts
                $parsedDocuments[] = (array) $document;
            },
        );

        $this->loop->run();
        Assert::assertTrue($this->logger->hasDebugThatMatches('~Process ".*" completed successfully.~'));
        Assert::assertSame($expectedDocuments, $parsedDocuments);
    }

    /**
     * @dataProvider getInvalidScripts
     */
    public function testInvalidJson(string $script): void
    {
        $process = $this->createScriptProcess($script);
        $this->jsonDecoder->processStream($process->getJsonStream(), function (): void {
        });

        $this->expectException(JsonException::class);
        $this->loop->run();
    }

    /**
     * @return array<string, array{string, array<int, array<string,string>>}>
     */
    public function getValidScripts(): array
    {
        return [
            'emptyOutput.js' => [
                'json-decoder/emptyOutput.js',
                [],
            ],
            'oneDocument1.js' => [
                'json-decoder/oneDocument1.js',
                [
                    ['a' => 'b', 'c' => 'd'],
                ],
            ],
            'oneDocument2.js' => [
                'json-decoder/oneDocument2.js',
                [
                    ['a' => 'b', 'c' => 'd'],
                ],
            ],
            'manyDocuments.js' => [
                'json-decoder/manyDocuments.js',
                [
                    ['a' => '1', 'c' => 'd'],
                    ['a' => '2', 'c' => 'd'],
                    ['a' => '3', 'c' => 'd'],
                    ['a' => '4', 'c' => 'd'],
                ],
            ],
        ];
    }

    /**
     * @return array<string, array{string}>
     */
    public function getInvalidScripts(): array
    {
        return [
            'invalidJson1.js' => ['json-decoder/invalidJson1.js'],
            'invalidJson2.js' => ['json-decoder/invalidJson2.js'],
        ];
    }
}


================================================
File: tests/phpunit/ProcessFactoryTest.php
================================================
<?php

declare(strict_types=1);

namespace CosmosDbExtractor\Tests;

use CosmosDbExtractor\Exception\ProcessException;
use PHPUnit\Framework\Assert;

class ProcessFactoryTest extends AbstractTestCase
{
    public function testSuccessfulProcess(): void
    {
        $process = $this->createScriptProcess('process-factory/stdoutAndStderr.js');
        $process->getPromise()->done(); // ensures exception if the process fails
        $this->loop->run();

        Assert::assertTrue($this->logger->hasInfoThatContains('stdout1'));
        Assert::assertTrue($this->logger->hasInfoThatContains('stdout2'));
        Assert::assertTrue($this->logger->hasInfoThatContains('stdout3'));
        Assert::assertTrue($this->logger->hasInfoThatContains('stdout4'));
        Assert::assertTrue($this->logger->hasWarningThatContains('stderr1'));
        Assert::assertTrue($this->logger->hasWarningThatContains('stderr2'));
        Assert::assertTrue($this->logger->hasDebugThatMatches('~Process ".*" completed successfully.~'));
    }

    public function testFailedProcess(): void
    {
        $process = $this->createScriptProcess('process-factory/exitCode.js');
        $process->getPromise()->done(); // ensures exception if the process fails

        try {
            $this->loop->run();
            Assert::fail('Exception expected.');
        } catch (ProcessException $e) {
            Assert::assertSame(ProcessException::class, get_class($e));
            Assert::assertStringMatchesFormat('Process "%a/exitCode.js" exited with code "123".', $e->getMessage());
        }

        Assert::assertTrue($this->logger->hasWarningThatContains('stderr1'));
        Assert::assertTrue($this->logger->hasWarningThatContains('stderr2'));
        Assert::assertFalse($this->logger->hasDebugThatMatches('~Process ".*" completed successfully.~'));
    }
}


================================================
File: tests/phpunit/bootstrap.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/../../vendor/autoload.php';

// Import datasets by NodeJs script
passthru(sprintf('nodejs %s/fixtures/import/importDatasets.js', __DIR__), $exitCode);
if ($exitCode !== 0) {
    exit($exitCode);
}


================================================
File: tests/phpunit/fixtures/datasets/empty.json
================================================
[]


================================================
File: tests/phpunit/fixtures/datasets/fk_keys_check.json
================================================
[
  {"id" : "5716054bee6e764c94fa7aaa", "item":  {"a":  {"count": 1, "itemId": 123}, "b":  {"count": 1, "itemId": 123}}},
  {"id" : "5716054bee6e764c94fa7aab", "item":  {"a":  {"count": 1, "itemId": 123}, "b":  {"count": 1, "itemId": 123}}},
  {"id" : "5716054bee6e764c94fa7aac", "item":  {"a":  {"count": 20, "itemId": 456}, "b":  {"count": 1, "itemId": 123}}},
  {"id" : "5716054bee6e764c94fa7aad", "item":  {"a":  {"count": 20, "itemId": 456}, "b":  {"count": 1, "itemId": 123}}}
]


================================================
File: tests/phpunit/fixtures/datasets/movie.json
================================================
[
  {"id": "1", "year":2013,"title":"Rush","info":{"directors":["Ron Howard"],"release_date":"2013-09-02T00:00:00Z","rating":8.3,"genres":["Action","Biography","Drama","Sport"],"image_url":"http://ia.media-imdb.com/images/M/MV5BMTQyMDE0MTY0OV5BMl5BanBnXkFtZTcwMjI2OTI0OQ@@._V1_SX400_.jpg","plot":"A re-creation of the merciless 1970s rivalry between Formula One rivals James Hunt and Niki Lauda.","rank":2,"running_time_secs":7380,"actors":["Daniel Bruhl","Chris Hemsworth","Olivia Wilde"]}},
  {"id": "2", "year":2011,"title":"Prisoners","info":{"directors":["Denis Villeneuve"],"release_date":"2013-08-30T00:00:00Z","rating":8.2,"genres":["Crime","Drama","Thriller"],"image_url":"http://ia.media-imdb.com/images/M/MV5BMTg0NTIzMjQ1NV5BMl5BanBnXkFtZTcwNDc3MzM5OQ@@._V1_SX400_.jpg","plot":"When Keller Dover's daughter and her friend go missing, he takes matters into his own hands as the police pursue multiple leads and the pressure mounts. But just how far will this desperate father go to protect his family?","rank":3,"running_time_secs":9180,"actors":["Hugh Jackman","Jake Gyllenhaal","Viola Davis"]}},
  {"id": "3", "year":2012,"title":"Insidious: Chapter 2","info":{"directors":["James Wan"],"release_date":"2013-09-13T00:00:00Z","rating":7.1,"genres":["Horror","Thriller"],"image_url":"http://ia.media-imdb.com/images/M/MV5BMTg0OTA5ODIxNF5BMl5BanBnXkFtZTcwNTUzNDg4OQ@@._V1_SX400_.jpg","plot":"The haunted Lambert family seeks to uncover the mysterious childhood secret that has left them dangerously connected to the spirit world.","rank":7,"running_time_secs":6360,"actors":["Patrick Wilson","Rose Byrne","Barbara Hershey"]}}
]


================================================
File: tests/phpunit/fixtures/datasets/restaurant.json
================================================
[
{"URL":"http://www.just-eat.co.uk/restaurants-cn-chinese-cardiff/menu","id":"55f14312c7447c3da7051b26","address":"228 City Road","address line 2":"Cardiff","name":".CN Chinese","outcode":"CF24","postcode":"3JH","rating":5,"type_of_food":"Chinese"},
{"URL":"http://www.just-eat.co.uk/restaurants-atthai-ss9/menu","id":"55f14312c7447c3da7051b27","address":"376 Rayleigh Road","address line 2":"Essex","name":"@ Thai","outcode":"SS9","postcode":"5PT","rating":5.5,"type_of_food":"Thai"},
{"URL":"http://www.just-eat.co.uk/restaurants-atthairestaurant/menu","id":"55f14312c7447c3da7051b28","address":"30 Greyhound Road Hammersmith","address line 2":"London","name":"@ Thai Restaurant","outcode":"W6","postcode":"8NX","rating":4.5,"type_of_food":"Thai"},
{"URL":"http://www.just-eat.co.uk/restaurants-atthairestaurant/menu","id":"55f14312c7447c3da7051b29","address":"30 Greyhound Road Hammersmith","address line 2":"London","name":"@ Thai Restaurant","outcode":"W6","postcode":"8NX","rating":4.5,"type_of_food":"Thai"},
{"URL":"http://www.just-eat.co.uk/restaurants-indiancom-ch4/menu","id":"55f14312c7447c3da7051b2a","address":"9 Broughton Hall Road","address line 2":"Broughton","name":"@Indian.com","outcode":"CH4","postcode":"0QR","rating":6,"type_of_food":"Curry"},
{"URL":"http://www.just-eat.co.uk/restaurants-007takeaway-s65/menu","id":"55f14312c7447c3da7051b2b","address":"6 Drummond Street","address line 2":"Rotherham","name":"007 Takeaway","outcode":"S65","postcode":"1HY","rating":6,"type_of_food":"Pizza"},
{"URL":"http://www.just-eat.co.uk/restaurants-042-restaurant-e11/menu","id":"55f14312c7447c3da7051b2c","address":"885 High Road Leytonstone","address line 2":"London","name":"042 Restaurant \u0026 Bar","outcode":"E11","postcode":"1HR","rating":3,"type_of_food":"African"},
{"URL":"http://www.just-eat.co.uk/restaurants-042-restaurant-e11/menu","id":"55f14312c7447c3da7051b2d","address":"885 High Road Leytonstone","address line 2":"London","name":"042 Restaurant \u0026 Bar","outcode":"E11","postcode":"1HR","rating":3,"type_of_food":"African"},
{"URL":"http://www.just-eat.co.uk/restaurants-042-restaurant-e11/menu","id":"55f14312c7447c3da7051b2e","address":"885 High Road Leytonstone","address line 2":"London","name":"042 Restaurant \u0026 Bar","outcode":"E11","postcode":"1HR","rating":3,"type_of_food":"African"},
{"URL":"http://www.just-eat.co.uk/restaurants-1-2-3-chinese-rowlands-gill/menu","id":"55f14312c7447c3da7051b2f","address":"Unit 4 Spencer House","address line 2":"Swalwell","name":"1 2 3 Chinese","outcode":"NE16","postcode":"3DS","rating":4.5,"type_of_food":"Chinese"},
{"URL":"http://www.just-eat.co.uk/restaurants-1-2-3-chinese-rowlands-gill/menu","id":"55f14312c7447c3da7051b30","address":"Unit 4 Spencer House","address line 2":"Swalwell","name":"1 2 3 Chinese","outcode":"NE16","postcode":"3DS","rating":4.5,"type_of_food":"Chinese"},
{"URL":"http://www.just-eat.co.uk/restaurants-100-degrees-chinese-restaurant-pontypridd/menu","id":"55f14312c7447c3da7051b31","address":"67 Park Street","address line 2":"Treforest","name":"100 Degrees Chinese Restaurant","outcode":"CF37","postcode":"1SN","rating":5,"type_of_food":"Chinese"},
{"URL":"http://www.just-eat.co.uk/restaurants-100menu-wn1/menu","id":"55f14312c7447c3da7051b32","address":"50 Wallgate","address line 2":"Wigan","name":"100 Menu","outcode":"WN1","postcode":"1JU","rating":5,"type_of_food":"Chinese"},
{"URL":"http://www.just-eat.co.uk/restaurants-104-turkish-BBQ/menu","id":"55f14312c7447c3da7051b33","address":"104 Tanners Lane","address line 2":"Essex","name":"104 Turkish BBQ","outcode":"IG6","postcode":"1QE","rating":5,"type_of_food":"Turkish"},
{"URL":"http://www.just-eat.co.uk/restaurants-109restaurant-w2/menu","id":"55f14312c7447c3da7051b34","address":"109 Westbourne Park Road","address line 2":"London","name":"109 Ristorante","outcode":"W2","postcode":"5QL","rating":5,"type_of_food":"Pizza"},
{"URL":"http://www.just-eat.co.uk/restaurants-113-fish-bar-wallasey/menu","id":"55f14312c7447c3da7051b35","address":"113 Poulton Road","address line 2":"Merseyside","name":"113 Fish Bar","outcode":"CH44","postcode":"9DE","rating":5.5,"type_of_food":"Chinese"},
{"URL":"http://www.just-eat.co.uk/restaurants-133-takeaway-irvine/menu","id":"55f14312c7447c3da7051b36","address":"133 Fullarton Street","address line 2":"Irvine","name":"133 Takeaway","outcode":"KA12","postcode":"8DG","rating":"Not yet rated","type_of_food":"Breakfast"},
{"URL":"http://www.just-eat.co.uk/restaurants-1498thespiceaffair-pe11/menu","id":"55f14312c7447c3da7051b37","address":"Red Lion Hotel","address line 2":"Spalding","name":"1498 The Spice Affair","outcode":"PE11","postcode":"1SU","rating":5.5,"type_of_food":"Curry"},
{"URL":"http://www.just-eat.co.uk/restaurants-168chinese-ls18/menu","id":"55f14312c7447c3da7051b38","address":"17 Alexandra Road","address line 2":"West Yorkshire","name":"168 Chinese \u0026 Cantonese Takeaway","outcode":"LS18","postcode":"4HE","rating":5.5,"type_of_food":"Chinese"},
{"URL":"http://www.just-eat.co.uk/restaurants-1awok-pa7/menu","id":"55f14312c7447c3da7051b39","address":"Unit 2 30 Greenock Road","address line 2":"Bishopton","name":"1A Wok","outcode":"PA7","postcode":"5JN","rating":5,"type_of_food":"Chinese"},
{"URL":"http://www.just-eat.co.uk/restaurants-1pizza1com-ls26/menu","id":"55f14312c7447c3da7051b3a","address":"160 Leeds Road","address line 2":"Leeds","name":"1pizza1","outcode":"LS26","postcode":"0JH","rating":4,"type_of_food":"Pizza"},
{"URL":"http://www.just-eat.co.uk/restaurants-1st-choice-pizza-ws11/menu","id":"55f14312c7447c3da7051b3b","address":"1 Walsall Road","address line 2":"Cannock","name":"1st Choice Pizza","outcode":"WS11","postcode":"0HG","rating":4,"type_of_food":"Pizza"},
{"URL":"http://www.just-eat.co.uk/restaurants-1stclasspizza-bs7/menu","id":"55f14312c7447c3da7051b3c","address":"388 Filton Avenue","address line 2":"Bristol","name":"1st Class Pizza","outcode":"BS7","postcode":"0BE","rating":4.5,"type_of_food":"Pizza"},
{"URL":"http://www.just-eat.co.uk/restaurants-1stclasspizza-bs7/menu","id":"55f14312c7447c3da7051b3d","address":"388 Filton Avenue","address line 2":"Bristol","name":"1st Class Pizza","outcode":"BS7","postcode":"0BE","rating":4.5,"type_of_food":"Pizza"},
{"URL":"http://www.just-eat.co.uk/restaurants-1stclasspizza-ng18/menu","id":"55f14312c7447c3da7051b3e","address":"70 Carter Lane","address line 2":"Mansfield","name":"1st Class Pizza","outcode":"NG18","postcode":"3DH","rating":4.5,"type_of_food":"Pizza"}
]


================================================
File: tests/phpunit/fixtures/datasets/simple.json
================================================
[
  {"id":  "1", "name": "Erika Harrell", "age": 18},
  {"id":  "2", "name": "Nahla Nunez", "age": 20},
  {"id":  "3", "name": "Jaeden Escobar", "age": 14},
  {"id":  "4", "name": "Zane Craft", "age": 13},
  {"id":  "5", "name": "Sebastien Mora", "age": 32}
]


================================================
File: tests/phpunit/fixtures/import/importDatasets.js
================================================
'use strict';

import fs from 'fs';
import readline from 'readline';
import {CosmosClient} from '@azure/cosmos';


// List of the datasets
const datasets = [
    // If bulkSize > 1, then order of the documents is random
    {container: "simple", file: "simple.json", count: 5, bulkSize: 1},
    {container: "movie", file: "movie.json", count: 3, bulkSize: 1},
    {container: "fk_keys_check", file: "fk_keys_check.json", count: 4, bulkSize: 1},
    {container: "restaurant", file: "restaurant.json", count: 25, bulkSize: 25},
    {container: "empty", file: "empty.json", count: 0, bulkSize: 1}
];

class Importer {
    constructor() {
        // Check environment variables
        ['ENDPOINT', 'KEY', 'DATABASE_ID'].forEach(function (key) {
            if (process.env[key] === undefined) {
                throw new Error(`bootstrap: Missing "${key}" environment variable.`);
            }
        })

        this.endpoint = process.env['ENDPOINT'];
        this.key = process.env['KEY'];
        this.databaseId = process.env['DATABASE_ID'];
        this.client = new CosmosClient({endpoint: this.endpoint, key: this.key});
        this.database = this.client.database(this.databaseId);
    }

    async importAllDatasets() {
        for (let dataset of datasets) {
            await this.importDataset(dataset)
        }
    }

    async importDataset(dataset) {
        process.stdout.write(`bootstrap: Importing "${dataset.file}" to container "${dataset.container}": `)

        // Get container, it is similar to a table or an collection
        await this.database.containers.createIfNotExists({id: dataset.container});
        const container = this.database.container(dataset.container)

        // Check if items count match
        if (await this.checkItemsCount(container, dataset)) {
            // Yes, up to date, nothing to do
            process.stdout.write(` FOUND\n`)
            return;
        }

        // Import items
        for await (let bulk of this.getBulks(dataset)) {
            process.stdout.write('.');
            // Create `bulk_size` parallel requests and wait for all
            // We are using upsert, it is more safe for parallel builds
            const requests = bulk.map((item) => container.items.upsert(item));
            await Promise.all(requests);
        }
        process.stdout.write(" IMPORTED\n");
    }

    async checkItemsCount(container, dataset) {
        const count = await this.count(container);
        if (count === dataset.count) {
            // Number of items match, nothing to do
            return true
        } else if (count > 0) {
            // Number of items does not match -> clear container
            await container.delete();
            await this.database.containers.create({id: dataset.container});
            process.stdout.write(`cleared, `)
            return false
        }
    }

    async count(container) {
        return (await container.items.query('SELECT VALUE COUNT(1) FROM c').fetchNext()).resources[0];
    }

    async* getBulks(dataset) {
        let bulk = [];
        for await (let item of this.getItems(dataset)) {
            bulk.push(item);
            if (bulk.length === dataset.bulkSize) {
                yield bulk;
                bulk = [];
            }
        }

        if (bulk.length > 0) {
            yield bulk
        }
    }

    // Load items from JSON dataset file, ... one line = one JSON document
    async* getItems(dataset) {
        const fileStream = fs.createReadStream(`${__dirname}/../datasets/${dataset.file}`);
        const reader = readline.createInterface({input: fileStream, crlfDelay: Infinity});
        for await (let line of reader) {
            // Trim and remove coma from the end
            line = line.trim().replace(/,\s*$/, "");

            // Skip array start, end, empty line
            if (line === '[' || line === ']' || line === '') {
                continue;
            }

            yield JSON.parse(line);
        }
    }
}

async function main() {
    console.log('bootstrap: Importing datasets ...');
    const importer = new Importer();
    await importer.importAllDatasets()
    console.log('bootstrap: OK');
    console.log('');
}

main().catch((error) => {
    console.error("\nbootstrap: An error occurred while importing the datasets\n");
    console.error(error);
    process.exit(1);
});



================================================
File: tests/phpunit/fixtures/json-decoder/emptyOutput.js
================================================
// No code

================================================
File: tests/phpunit/fixtures/json-decoder/invalidJson1.js
================================================
import jsonStream from '../../../../src/Extractor/NodeJs/lib/jsonStream.js';

jsonStream.write('{"a": "b", "c".....');


================================================
File: tests/phpunit/fixtures/json-decoder/invalidJson2.js
================================================
import jsonStream from '../../../../src/Extractor/NodeJs/lib/jsonStream.js';

async function sleep() {
    await new Promise(resolve => setTimeout(resolve, 250));
}

(async () => {
    jsonStream.write('{"a": "1", "c": "d"}');
    await sleep();
    jsonStream.write("\n---\n");
    jsonStream.write('{"a": "2", "c": "d"}');
    jsonStream.write("\n---\n");
    jsonStream.write('{"a": "3", "c"....'); // <<<<<<<<<<<<<<<<
    await sleep();
    jsonStream.write("\n---\n");
    jsonStream.write('{"a": "4", "c": "d"}');
})();


================================================
File: tests/phpunit/fixtures/json-decoder/manyDocuments.js
================================================
import jsonStream from '../../../../src/Extractor/NodeJs/lib/jsonStream.js';

async function sleep() {
    await new Promise(resolve => setTimeout(resolve, 250));
}

(async () => {
    jsonStream.write('{"a": "1", "c": "d"}');
    await sleep();
    jsonStream.write("\n---\n");
    jsonStream.write('{"a": "2", "c": "d"}');
    jsonStream.write("\n---\n");
    jsonStream.write('{"a": "3", "c": "d"}');
    await sleep();
    jsonStream.write("\n---\n");
    jsonStream.write('{"a": "4", "c": "d"}');
})();


================================================
File: tests/phpunit/fixtures/json-decoder/oneDocument1.js
================================================
import jsonStream from '../../../../src/Extractor/NodeJs/lib/jsonStream.js';

jsonStream.write('{"a": "b", "c": "d"}');


================================================
File: tests/phpunit/fixtures/json-decoder/oneDocument2.js
================================================
import jsonStream from '../../../../src/Extractor/NodeJs/lib/jsonStream.js';

jsonStream.write('{"a": "b", "c": "d"}');
// Json Decoder must be foolproof, try an delimiter on the end
jsonStream.write("\n---\n");
jsonStream.write(' ');


================================================
File: tests/phpunit/fixtures/process-factory/exitCode.js
================================================
console.log('stdout1');
console.log('stdout2');
console.error("stderr1");
console.log('stdout3');
console.log('stdout4');
console.error("stderr2");

process.exit(123);


================================================
File: tests/phpunit/fixtures/process-factory/stdoutAndStderr.js
================================================
console.log('stdout1');
console.log('stdout2');
console.error("stderr1");
console.log('stdout3');
console.log('stdout4');
console.error("stderr2");

================================================
File: .github/workflows/push.yml
================================================
name: GitHub Actions
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # Name of the image in the ECR
  APP_IMAGE: keboola.ex-cosmosdb

  # Developer portal login
  KBC_DEVELOPERPORTAL_VENDOR: "keboola"
  KBC_DEVELOPERPORTAL_APP: "keboola.ex-cosmosdb"
  KBC_DEVELOPERPORTAL_USERNAME: "keboola+ex_cosmosdb_gh_actions"
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # DockerHub login
  DOCKERHUB_USER: "keboolabot"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Cosmos credentials
  ENDPOINT: "https://ex-cosmosdb-dev-ci.documents.azure.com"
  KEY: ${{ secrets.KEY }}
  DATABASE_ID: "dev-ci-database"

  # Test KBC project
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }}
  KBC_TEST_PROJECT_URL: "https://connection.keboola.com/admin/projects/2703/dashboard"
  KBC_TEST_PROJECT_CONFIGS: "2827483993 2827495464 2906467182" # space separated list
  KBC_DATA_TYPE_SUPPORT: "none"
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Print Docker version
        run: docker -v
      -
        name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"
      -
        name: Build image
        run: docker build -t $APP_IMAGE .
      -
        name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
      -
        name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ steps.tag.outputs.app_image_tag }}
          push_latest: ${{ steps.tag.outputs.is_semantic_tag }}
          source_image: ${{ env.APP_IMAGE}}

  tests:
    needs: build
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix: ...
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.APP_IMAGE}}
          tag_as_latest: true
      -
        name: Run tests
        run: |
          docker run \
          -e KEY \
          -e ENDPOINT \
          -e DATABASE_ID \
          -e KBC_DATA_TYPE_SUPPORT \
          ${{env.APP_IMAGE}} \
          composer ci

  tests-in-kbc:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Run KBC test jobs
        if: env.KBC_STORAGE_TOKEN && env.KBC_TEST_PROJECT_CONFIGS
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ env.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    needs:
      - build
      - tests
      - tests-in-kbc
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.build.outputs.is_semantic_tag == 'true'
    steps:
      -
        name: Set tag in the Developer Portal
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}


