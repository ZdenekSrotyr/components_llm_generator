Directory structure:
└── keboola-component-tiktok-ads/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── TEMPLATE_README.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── basicreport.csv.manifest
    │               ├── test.csv
    │               └── basicreport.csv/
    │                   └── XXXXXXXXXX.csv
    ├── docs/
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   └── tiktok/
    │       ├── __init__.py
    │       └── client.py
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
TikTok Ads Extractor
=============

TikTok is a video-sharing focused social networking service.

This component enables users to extract integrated TikTok Ad reports into Keboola. 


The component uses the TikTok API v1.3 and requests a [synchronous report](https://ads.tiktok.com/marketing_api/docs?id=1740302848100353).
Currently the filtering is not supported. 

**Table of contents:**

[TOC]


Configuration
=============

## Row Configuration
 - Advertiser ID (advertiser_id) - [REQ] Specifies ad account for which the report will be downloaded. Multiple ad accounts should be input as a comma separated list. If left empty all ad accounts will be downloaded.
 - Report Settings (report_settings) - [REQ] report settings is a dictionary containing the following items:
   - Report type (report_type) - [REQ] Select one of the available report types described in the <a href=https://ads.tiktok.com/gateway/docs/index?identify_key=2b9b4278e47b275f36e7c39a4af4ba067d088e031d5f5fe45d381559ac89ba48&language=ENGLISH&doc_id=1701890951192578'>documentation</a>
   - Service type (service_type) - [REQ] Select one of the service types described in the <a href='https://ads.tiktok.com/marketing_api/docs?id=1740302848100353'>documentation</a>
   - Data Level (data_level) - [OPT] Select one of the data level types described in the <a href='https://ads.tiktok.com/marketing_api/docs?id=1740302848100353'>documentation</a>. Use NOT_DEFINED if you do not need the data level, e.g. with the report type PLAYABLE_MATERIAL
   - Dimensions (dimensions) - [REQ] Comma separated list of dimensions to use for the report, find supported dimensions for specific report types in the <a href='https://ads.tiktok.com/marketing_api/docs?id=1738864835805186'>documentation</a>
   - Metrics (metrics) - [REQ] Comma separated list of metrics to use for the report, find supported metrics for specific report types in the <a href='https://ads.tiktok.com/marketing_api/docs?id=1738864835805186'>documentation</a>
   - Date From (date_from) - [REQ] Start date of the report. Either date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc.
   - Date to (date_to) - [REQ] End date of the report. Either date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc.
 - Destination (destination) - [REQ] destination is a dictionary containing the following items:
   - Storage Table Name (output_table_name) - [REQ] Name of the table stored in Storage.
   - Incremental Load (incremental) - [REQ] If incremental load is turned on, the table will be updated instead of rewritten. Tables with a primary key will have rows updated, tables without a primary key will have rows appended.


Sample Configuration
=============
```json
{
    "parameters": {
        "#access_token": "SECRET_VALUE",
        "destination": {
            "incremental": true,
            "output_table_name": "basic report"
        },
        "advertiser_id": "",
        "report_settings": {
            "data_level": "AUCTION_CAMPAIGN",
            "metrics": "spend,cpc,cpm,impressions,clicks,ctr,reach,cost_per_1000_reached,conversion,cost_per_conversion,conversion_rate,real_time_conversion,real_time_cost_per_conversion,real_time_conversion_rate,result,cost_per_result,result_rate,real_time_result,real_time_cost_per_result,real_time_result_rate,secondary_goal_result,cost_per_secondary_goal_result,secondary_goal_result_rate",
            "date_from": "2 weeks ago",
            "date_to": "now",
            "dimensions": "campaign_id, stat_time_day",
            "report_type": "BASIC",
            "service_type": "AUCTION"
        }
    },
    "action": "run",
    "authorization": {
        "oauth_api": {
            "id": "OAUTH_API_ID",
            "credentials": {
                "id": "main",
                "authorizedFor": "Myself",
                "creator": {
                    "id": "1234",
                    "description": "me@keboola.com"
                },
                "created": "2016-01-31 00:13:30",
                "#data": "{\"data\": {\"access_token\" : \"SECRET_VALUE\",\"advertiser_ids\":[SECRET_VALUE]}}",
                "oauthVersion": "2.0",
                "appKey": "SECRET_VALUE",
                "#appSecret": "SECRET_VALUE"
            }
        }
    }
}
```


Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in
the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)

================================================
File: Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
keboola.component==1.4.2
keboola.utils
keboola.http-client
mock~=4.0.3
freezegun~=1.2.2
dateparser==1.1.8

================================================
File: component_config/component_long_description.md
================================================
This component enables users to extract integrated TikTok Ad reports into Keboola

================================================
File: component_config/component_short_description.md
================================================
TikTok is a video-sharing focused social networking service.

================================================
File: component_config/configRowSchema.json
================================================
{
  "title": "Row Configuration",
  "type": "object",
  "required": [
    "advertiser_id",
    "report_settings",
    "destination"
  ],
  "properties": {
    "advertiser_id": {
      "title": "Advertiser ID",
      "type": "array",
      "format": "select",
      "items": {
        "enum": [],
        "type": "string"
      },
      "options": {
        "async": {
          "label": "Re-load Advertiser IDs",
          "action": "loadAdvertiserIds"
        }
      },
      "uniqueItems": true,
      "propertyOrder": 10,
      "description": "Specifies ad accounts for which the report will be downloaded. If left empty, all ad accounts will be downloaded."
    },
    "report_settings": {
      "title": "Report settings",
      "type": "object",
      "propertyOrder": 20,
      "required": [
        "dimensions",
        "report_type",
        "date_from",
        "service_type",
        "date_to",
        "metrics"
      ],
      "properties": {
        "report_type": {
          "title": "Report type",
          "type": "string",
          "required": true,
          "enum": [
            "BASIC",
            "AUDIENCE",
            "PLAYABLE_MATERIAL",
            "CATALOG"
          ],
          "default": "BASIC",
          "propertyOrder": 10,
          "description": "Select one of the available report types described in the <a href='https://ads.tiktok.com/gateway/docs/index?identify_key=2b9b4278e47b275f36e7c39a4af4ba067d088e031d5f5fe45d381559ac89ba48&language=ENGLISH&doc_id=1701890951192578'>documentation</a>"
        },
        "service_type": {
          "title": "Service type",
          "type": "string",
          "required": true,
          "enum": [
            "AUCTION",
            "RESERVATION"
          ],
          "default": "AUCTION",
          "description": "Select one of the service types described in the <a href='https://ads.tiktok.com/marketing_api/docs?id=1740302848100353'>documentation</a>",
          "propertyOrder": 20
        },
        "data_level": {
          "title": "Data level",
          "type": "string",
          "required": true,
          "enum": [
            "NOT_DEFINED",
            "AUCTION_AD",
            "AUCTION_ADGROUP",
            "AUCTION_ADVERTISER",
            "AUCTION_CAMPAIGN",
            "RESERVATION_AD",
            "RESERVATION_ADGROUP",
            "RESERVATION_ADVERTISER",
            "RESERVATION_CAMPAIGN"
          ],
          "description": "Select one of the data level types described in the <a href='https://ads.tiktok.com/marketing_api/docs?id=1740302848100353'>documentation</a>. Use NOT_DEFINED if you do not need the data level, e.g., with the report type PLAYABLE_MATERIAL",
          "propertyOrder": 30
        },
        "dimensions": {
          "type": "string",
          "title": "Dimensions",
          "format": "textarea",
          "options": {
            "input_height": "100px"
          },
          "description": "Comma-separated list of dimensions to use for the report, find supported dimensions for specific report types in the <a href='https://ads.tiktok.com/marketing_api/docs?id=1738864835805186'>documentation</a>",
          "propertyOrder": 40
        },
        "metrics": {
          "type": "string",
          "format": "textarea",
          "options": {
            "input_height": "100px"
          },
          "title": "Metrics",
          "description": "Comma-separated list of metrics to use for the report, find supported metrics for specific report types in the <a href='https://ads.tiktok.com/marketing_api/docs?id=1738864835805186'>documentation</a>",
          "propertyOrder": 50
        },
        "date_from": {
          "type": "string",
          "title": "Date from",
          "default": "1 week ago",
          "description": "Start date of the report. Either date in YYYY-MM-DD format or dateparser string; i.e., 5 days ago, 1 month ago, yesterday, etc.",
          "propertyOrder": 60
        },
        "date_to": {
          "type": "string",
          "title": "Date to",
          "default": "now",
          "description": "End date of the report. Either date in YYYY-MM-DD format or dateparser string; i.e., 5 days ago, 1 month ago, yesterday, etc.",
          "propertyOrder": 70
        },
        "filters": {
          "type": "array",
          "format": "table",
          "options": {
            "hidden": true
          },
          "title": "Filter",
          "propertyOrder": 100,
          "items": {
            "type": "object",
            "title": "Filter",
            "properties": {
              "field_name": {
                "title": "Field name",
                "type": "string",
                "propertyOrder": 150
              },
              "filter_type": {
                "type": "string",
                "title": "Type",
                "required": true,
                "enum": [
                  "IN",
                  "MATCH",
                  "GREATER_THAN",
                  "GREATER_EQUAL",
                  "LOWER_THAN",
                  "LOWER_EQUAL",
                  "RANGE"
                ],
                "propertyOrder": 200,
                "default": "MATCH"
              },
              "filter_value": {
                "type": "string",
                "title": "Value",
                "propertyOrder": 300
              }
            }
          }
        }
      }
    },
    "destination": {
      "title": "Destination",
      "type": "object",
      "propertyOrder": 30,
      "required": [
        "output_table_name",
        "incremental"
      ],
      "properties": {
        "output_table_name": {
          "type": "string",
          "title": "Storage table name",
          "description": "Name of the table stored in Storage",
          "propertyOrder": 10
        },
        "incremental": {
          "type": "boolean",
          "format": "checkbox",
          "title": "Incremental load",
          "description": "If incremental load is turned on, the table will be updated instead of rewritten. Tables with a primary key will have rows updated, tables without a primary key will have rows appended.",
          "propertyOrder": 20
        }
      }
    }
  }
}

================================================
File: component_config/configSchema.json
================================================
{}

================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/sample-config/config.json
================================================
{
    "parameters": {
        "#access_token": "SECRET_VALUE",
        "destination": {
            "incremental": true,
            "output_table_name": "basic report"
        },
        "advertiser_id": "",
        "report_settings": {
            "data_level": "AUCTION_CAMPAIGN",
            "metrics": "spend,cpc,cpm,impressions,clicks,ctr,reach,cost_per_1000_reached,conversion,cost_per_conversion,conversion_rate,real_time_conversion,real_time_cost_per_conversion,real_time_conversion_rate,result,cost_per_result,result_rate,real_time_result,real_time_cost_per_result,real_time_result_rate,secondary_goal_result,cost_per_secondary_goal_result,secondary_goal_result_rate",
            "date_from": "November 30, 2021",
            "date_to": "November 30, 2021",
            "dimensions": "campaign_id, stat_time_day",
            "report_type": "BASIC",
            "service_type": "AUCTION"
        }
    },
    "action": "run",
    "authorization": {
        "oauth_api": {
            "id": "OAUTH_API_ID",
            "credentials": {
                "id": "main",
                "authorizedFor": "Myself",
                "creator": {
                    "id": "1234",
                    "description": "me@keboola.com"
                },
                "created": "2016-01-31 00:13:30",
                "#data": "{\"data\": {\"access_token\" : \"SECRET_VALUE\",\"advertiser_ids\":[SECRET_VALUE]}}",
                "oauthVersion": "2.0",
                "appKey": "SECRET_VALUE",
                "#appSecret": "SECRET_VALUE"
            }
        }
    }
}

================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/out/tables/basicreport.csv.manifest
================================================
{"primary_key": ["ex_advertiser_id", "campaign_id", "stat_time_day"], "columns": ["ex_advertiser_id", "campaign_id", "stat_time_day", "spend", "cpc", "cpm", "impressions", "clicks", "ctr", "reach", "cost_per_1000_reached", "conversion", "cost_per_conversion", "conversion_rate", "real_time_conversion", "real_time_cost_per_conversion", "real_time_conversion_rate", "result", "cost_per_result", "result_rate", "real_time_result", "real_time_cost_per_result", "real_time_result_rate", "secondary_goal_result", "cost_per_secondary_goal_result", "secondary_goal_result_rate"], "incremental": true, "metadata": [], "column_metadata": {}}

================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/out/tables/basicreport.csv/XXXXXXXXXX.csv
================================================
XXXXXXXXX,XXXXXXXXX,2022-11-30 00:00:00,40.18,0.11,0.76,52869,360,0.68,46791,0.859,0,0.0,0.0,0,0.0,0.0,0,0.0,0.0,0,0.0,0.0,-,-,-


================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi

================================================
File: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"

================================================
File: src/component.py
================================================
import csv
import datetime
import logging
import os
import re
import string
import warnings
from typing import Tuple, List, Dict

import dateparser
from keboola.component.base import ComponentBase, sync_action
from keboola.component.dao import TableDefinition
from keboola.component.exceptions import UserException
from keboola.component.sync_actions import SelectElement
from keboola.utils.helpers import comma_separated_values_to_list

from tiktok import TikTokClient, TikTokClientException

KEY_ACCESS_TOKEN = "#access_token"

KEY_ADVERTISER_ID = "advertiser_id"

KEY_REPORT_SETTINGS = "report_settings"
KEY_REPORT_SETTINGS_DATE_FROM = "date_from"
KEY_REPORT_SETTINGS_DATE_TO = "date_to"
KEY_REPORT_SETTINGS_METRICS = "metrics"
KEY_REPORT_SETTINGS_DIMENSIONS = "dimensions"
KEY_REPORT_SETTINGS_REPORT_TYPE = "report_type"
KEY_REPORT_SETTINGS_SERVICE_TYPE = "service_type"
KEY_REPORT_SETTINGS_DATA_LEVEL = "data_level"

KEY_REPORT_SETTINGS_FILTER = "filters"

KEY_DESTINATION = "destination"
KEY_DESTINATION_INCREMENTAL = "incremental"
KEY_DESTINATION_OUTPUT_TABLE_NAME = "output_table_name"

REQUIRED_PARAMETERS = [KEY_REPORT_SETTINGS, KEY_DESTINATION]
REQUIRED_REPORT_SETTINGS_PARAMETERS = [KEY_REPORT_SETTINGS_DATE_FROM, KEY_REPORT_SETTINGS_DATE_TO,
                                       KEY_REPORT_SETTINGS_DIMENSIONS, KEY_REPORT_SETTINGS_REPORT_TYPE,
                                       KEY_REPORT_SETTINGS_SERVICE_TYPE, KEY_REPORT_SETTINGS_METRICS]
REQUIRED_DESTINATION_PARAMETERS = [KEY_DESTINATION_INCREMENTAL, KEY_DESTINATION_OUTPUT_TABLE_NAME]
REQUIRED_IMAGE_PARS = []

KEY_DATE_FORMAT = "%Y-%m-%d"

warnings.filterwarnings(
    "ignore",
    message="The localize method is no longer necessary, as this time zone supports the fold attribute",
)


class Component(ComponentBase):

    def __init__(self):
        super().__init__()
        self._tiktok_client: TikTokClient

    def _init_tiktok_client(self) -> None:
        access_token = self.configuration.parameters.get(KEY_ACCESS_TOKEN)
        if not access_token:
            access_token = self._get_access_token()
        self._tiktok_client = TikTokClient(access_token, sandbox=False)

    def run(self):
        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        self.validate_image_parameters(REQUIRED_IMAGE_PARS)

        self._validate_parameters(self.configuration.parameters.get(KEY_REPORT_SETTINGS),
                                  REQUIRED_REPORT_SETTINGS_PARAMETERS, 'config parameters')
        self._validate_parameters(self.configuration.parameters.get(KEY_DESTINATION),
                                  REQUIRED_DESTINATION_PARAMETERS, 'config parameters')
        self._add_last_run_to_state()

        params = self.configuration.parameters
        self._init_tiktok_client()

        destination = params.get(KEY_DESTINATION)
        destination_incremental = destination.get(KEY_DESTINATION_INCREMENTAL)
        outfile_name = self._normalize_table_name(destination.get(KEY_DESTINATION_OUTPUT_TABLE_NAME))

        columns, primary_keys = self._get_columns_and_keys()

        if destination_incremental and not ("stat_time_day" in columns or "stat_time_hour" in columns):
            logging.warning("You are using incremental mode, but are not using any dimension for time/date, "
                            "therefore you are overwriting data in the source."
                            " And you will not know the range of the data. We encourage you to use stat_time_day "
                            "in the dimensions if possible")

        table = self.create_out_table_definition(outfile_name,
                                                 columns=columns,
                                                 primary_key=primary_keys,
                                                 incremental=destination_incremental,
                                                 is_sliced=True)
        self.create_sliced_file(table.full_path)

        self._fetch_and_save_all_report_data(self._tiktok_client, table)
        self.write_manifest(table)

    def _fetch_and_save_all_report_data(self, tiktok_client: TikTokClient, table: TableDefinition) -> None:
        params = self.configuration.parameters
        advertiser_ids = self._get_advertiser_ids()
        report_settings = params.get(KEY_REPORT_SETTINGS)
        filters = report_settings.get(KEY_REPORT_SETTINGS_FILTER)
        report_type = report_settings.get(KEY_REPORT_SETTINGS_REPORT_TYPE)
        service_type = report_settings.get(KEY_REPORT_SETTINGS_SERVICE_TYPE)
        data_level = report_settings.get(KEY_REPORT_SETTINGS_DATA_LEVEL)

        date_from, date_to = self._get_report_date_range()

        metrics = comma_separated_values_to_list(report_settings.get(KEY_REPORT_SETTINGS_METRICS))
        dimensions = comma_separated_values_to_list(report_settings.get(KEY_REPORT_SETTINGS_DIMENSIONS))

        logging.info(f"Fetching Data for Advertisers : {advertiser_ids}")

        for advertiser_id in advertiser_ids:
            logging.info(f"Fetching Data for Advertiser : {advertiser_id}")
            self._fetch_and_save_report_data(tiktok_client, table, str(advertiser_id), report_type, dimensions,
                                             date_from, date_to, filters, service_type, data_level, metrics)

    @staticmethod
    def _fetch_and_save_report_data(tiktok_client: TikTokClient, table: TableDefinition, advertiser_id: str,
                                    report_type: str, dimensions: List[str], date_from: str,
                                    date_to: str, filters: List[Dict], service_type: str, data_level: str,
                                    metrics: List[str]) -> None:

        with open(f"{table.full_path}/{advertiser_id}.csv", 'w') as f:
            dict_writer = csv.DictWriter(f, fieldnames=table.columns)
            try:
                for i, page in enumerate(tiktok_client.get_integrated_report(advertiser_id,
                                                                             report_type,
                                                                             dimensions,
                                                                             date_from,
                                                                             date_to,
                                                                             filters=filters,
                                                                             service_type=service_type,
                                                                             data_level=data_level,
                                                                             metrics=metrics)):
                    if i % 100 == 0:
                        logging.info(f"Fetching page {i} for advertiser {advertiser_id}")
                    for datum in page:
                        dict_writer.writerow({**datum["dimensions"],
                                              **datum["metrics"],
                                              **{"ex_advertiser_id": advertiser_id}})
            except TikTokClientException as tiktok_exc:
                raise UserException(tiktok_exc) from tiktok_exc

    def _get_columns_and_keys(self) -> Tuple[List[str], List[str]]:
        params = self.configuration.parameters
        report_settings = params.get(KEY_REPORT_SETTINGS)
        metrics = comma_separated_values_to_list(report_settings.get(KEY_REPORT_SETTINGS_METRICS))
        dimensions = comma_separated_values_to_list(report_settings.get(KEY_REPORT_SETTINGS_DIMENSIONS))
        columns = ["ex_advertiser_id"] + dimensions + metrics
        primary_key = ["ex_advertiser_id"] + dimensions
        return columns, primary_key

    def _get_access_token(self) -> str:
        try:
            return self.configuration.oauth_credentials["data"]['data']["access_token"]
        except (KeyError, TypeError) as err:
            raise UserException("Configuration is improperly authorized, "
                                "could not get access token from OAuth Credentials. Response from TikTok : "
                                f"{self.configuration.oauth_credentials['data']['data'].get('message')}") from err

    def _get_advertiser_ids(self) -> List[str]:
        params = self.configuration.parameters
        if isinstance(params.get(KEY_ADVERTISER_ID, ""), str):
            advertiser_ids = comma_separated_values_to_list(params.get(KEY_ADVERTISER_ID, ""))
        else:
            advertiser_ids = params.get(KEY_ADVERTISER_ID, [])
        if not advertiser_ids:
            advertisers = self._tiktok_client.get_authorized_ad_accounts(
                self.configuration.oauth_credentials.appKey,
                self.configuration.oauth_credentials.appSecret)
            advertiser_ids = [str(ad_id['advertiser_id']) for ad_id in advertisers]

        return advertiser_ids

    @staticmethod
    def _normalize_table_name(user_defined_name: str) -> str:
        permitted_chars = string.digits + string.ascii_letters + '_' + "-"
        user_defined_name = user_defined_name.replace(".csv", "")
        cleaned_name = re.sub(f"[^{permitted_chars}]", "", user_defined_name)
        return f"{cleaned_name}.csv"

    def _get_report_date_range(self) -> Tuple[str, str]:

        params = self.configuration.parameters
        report_settings = params.get(KEY_REPORT_SETTINGS)
        date_from_str = report_settings.get(KEY_REPORT_SETTINGS_DATE_FROM)
        date_to_str = report_settings.get(KEY_REPORT_SETTINGS_DATE_TO)

        date_from = self._parse_date(date_from_str)
        date_to = self._parse_date(date_to_str)
        return date_from, date_to

    def _parse_date(self, date_to_parse: str) -> str:
        if date_to_parse.lower() in {"last", "lastrun", "last run"}:
            state = self.get_state_file()
            return state.get("last_run", "1997-01-01")
        try:
            parsed_date = dateparser.parse(date_to_parse).date().strftime(KEY_DATE_FORMAT)
        except (AttributeError, TypeError) as err:
            raise UserException(f"Failed to parse date {date_to_parse}") from err
        return parsed_date

    def _add_last_run_to_state(self) -> None:
        state = self.get_state_file()
        state["last_run"] = datetime.date.today().strftime(KEY_DATE_FORMAT)
        self.write_state_file(state)

    @staticmethod
    def create_sliced_file(outfile_name):
        if not os.path.exists(outfile_name):
            os.makedirs(outfile_name)

    @sync_action("loadAdvertiserIds")
    def fetch_advertiser_ids(self) -> List[SelectElement]:
        self._init_tiktok_client()
        ad_ids = self._tiktok_client.get_authorized_ad_accounts(self.configuration.oauth_credentials.appKey,
                                                                self.configuration.oauth_credentials.appSecret)

        return [
            SelectElement(value=str(ad_id['advertiser_id']),
                          label=f'{ad_id["advertiser_name"]} [{ad_id["advertiser_id"]}]')
            for ad_id in ad_ids]


if __name__ == "__main__":
    try:
        comp = Component()
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: src/tiktok/__init__.py
================================================
from .client import TikTokClient, TikTokClientException # noqa


================================================
File: src/tiktok/client.py
================================================
from typing import List, Generator, Dict

from keboola.http_client import HttpClient

SANDBOX_URL = "https://sandbox-ads.tiktok.com/open_api/"
PRODUCTION_URL = "https://business-api.tiktok.com/open_api/"
DEFAULT_API_VERSION = "v1.3/"
INTEGRATED_REPORTS_ENDPOINT = "report/integrated/get"

OK_MESSAGE = "OK"


class TikTokClientException(Exception):
    pass


class TikTokClient(HttpClient):
    def __init__(self, access_token, sandbox=False):
        base_url = "".join([PRODUCTION_URL, DEFAULT_API_VERSION])
        if sandbox:
            base_url = "".join([SANDBOX_URL, DEFAULT_API_VERSION])

        auth_header = {"Access-Token": access_token, 'Content-Type': 'application/json'}

        super().__init__(base_url, auth_header=auth_header)

    def get_integrated_report(self, advertiser_id: str, report_type: str, dimensions: List[str], date_from: str,
                              date_to: str, filters: List[Dict] = None, service_type: str = None,
                              data_level: str = None, metrics: List[str] = None) -> Generator:
        params = {"advertiser_id": advertiser_id,
                  "report_type": report_type,
                  "start_date": date_from,
                  "end_date": date_to,
                  "dimensions": self._get_string_of_list(dimensions)}

        if data_level and data_level != "NOT_DEFINED":
            params["data_level"] = data_level
        if metrics:
            params["metrics"] = self._get_string_of_list(metrics)
        if filters:
            params["filtering"] = filters
        if service_type:
            params["service_type"] = service_type
        return self._paginate(params)

    def _paginate(self, params: Dict) -> Generator:
        report_data: Dict = self.get(endpoint_path=INTEGRATED_REPORTS_ENDPOINT, params=params)  # noqa
        if report_data.get("message") != OK_MESSAGE:
            raise TikTokClientException(report_data.get("message"))
        page_info = report_data.get("data").get("page_info")
        total_pages = page_info.get("total_page")
        yield report_data.get("data").get("list")
        for page_num in range(2, total_pages + 1):
            params["page"] = page_num
            report_data: Dict = self.get(endpoint_path=INTEGRATED_REPORTS_ENDPOINT, params=params)  # noqa
            if report_data.get("message") != OK_MESSAGE:
                raise TikTokClientException(report_data.get("message"))
            yield report_data.get("data").get("list")

    @staticmethod
    def _get_string_of_list(list_to_convert: List[str]) -> str:
        quoted_word_list = ",".join(f"\"{word}\"" for word in list_to_convert)
        return f"[{quoted_word_list}]"

    def get_authorized_ad_accounts(self, app_id: str, app_secret: str) -> List[Dict]:
        params = {"app_id": app_id,
                  "secret": app_secret}
        return self.get(endpoint_path="oauth2/advertiser/get", params=params).get("data", {}).get('list', [])


================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()

    # @mock.patch.dict(os.environ, {'KBC_DATADIR': 'data'})
    # def test_run_no_cfg_fails(self):
    #     comp = Component()
    #     comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-tiktok-ads" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

