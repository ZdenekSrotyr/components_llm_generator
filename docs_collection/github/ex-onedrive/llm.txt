Directory structure:
└── keboola-ex-onedrive/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE
    ├── composer.json
    ├── composer.lock
    ├── docker-compose.yml
    ├── phpcs.xml
    ├── phpstan.neon
    ├── phpunit.xml.dist
    ├── .dockerignore
    ├── .env.dist
    ├── docker/
    │   ├── composer-install.sh
    │   └── php-prod.ini
    ├── src/
    │   ├── Component.php
    │   ├── Extractor.php
    │   ├── Sheet.php
    │   ├── SheetFile.php
    │   ├── SheetProvider.php
    │   ├── run.php
    │   ├── Api/
    │   │   ├── Api.php
    │   │   ├── ApiFactory.php
    │   │   ├── GraphApiFactory.php
    │   │   ├── Helpers.php
    │   │   ├── WorkbooksFinder.php
    │   │   ├── Batch/
    │   │   │   ├── BatchRequest.php
    │   │   │   └── Request.php
    │   │   └── Model/
    │   │       ├── Drive.php
    │   │       ├── File.php
    │   │       ├── SheetContent.php
    │   │       ├── Site.php
    │   │       ├── TableHeader.php
    │   │       ├── TableRange.php
    │   │       └── Worksheet.php
    │   ├── Auth/
    │   │   ├── RefreshTokenProvider.php
    │   │   ├── TokenDataManager.php
    │   │   ├── TokenProvider.php
    │   │   └── TokenProviderFactory.php
    │   ├── Configuration/
    │   │   ├── Config.php
    │   │   ├── ConfigDefinition.php
    │   │   ├── Actions/
    │   │   │   ├── GetWorksheetsConfigDefinition.php
    │   │   │   └── SearchConfigDefinition.php
    │   │   └── Parts/
    │   │       ├── WorkbookDefinition.php
    │   │       └── WorksheetDefinition.php
    │   └── Exception/
    │       ├── AccessDeniedException.php
    │       ├── AccessTokenInitException.php
    │       ├── AccessTokenRefreshException.php
    │       ├── BadRequestException.php
    │       ├── BatchRequestException.php
    │       ├── GatewayTimeoutException.php
    │       ├── InvalidAuthDataException.php
    │       ├── InvalidConfigException.php
    │       ├── InvalidFileTypeException.php
    │       ├── NotSupportedException.php
    │       ├── PropertyNotSetException.php
    │       ├── ResourceNotFoundException.php
    │       ├── ShareLinkException.php
    │       ├── SheetEmptyException.php
    │       ├── UnexpectedCountException.php
    │       ├── UnexpectedValueException.php
    │       └── UserException.php
    ├── tests/
    │   ├── bootstrap.php
    │   ├── api/
    │   │   ├── AuthTest.php
    │   │   ├── BaseTest.php
    │   │   ├── BatchRequestTest.php
    │   │   ├── GetContentTest.php
    │   │   ├── GetSheetIdTest.php
    │   │   ├── GetSheetsTest.php
    │   │   ├── SearchForFileTest.php
    │   │   └── SitesTest.php
    │   ├── datadir/
    │   │   ├── DatadirTest.php
    │   │   ├── DatadirTestsProvider.php
    │   │   ├── extract-big-file/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── big-table.csv
    │   │   │   │               ├── big-table.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-empty-sheet/
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-file-path-drive/
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── sheet-table.csv
    │   │   │   │               ├── sheet-table.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-file-path-drive-me/
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── sheet-table.csv
    │   │   │   │               ├── sheet-table.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-file-path-drive-site/
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── sheet-table.csv
    │   │   │   │               ├── sheet-table.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-hidden-sheet/
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── sheet-table.csv
    │   │   │   │               ├── sheet-table.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-invalid-drive-id/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-invalid-file-id/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-invalid-file-type/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-multiple-files-found/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-not-found-drive-id/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-not-found-file-id/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-only-header-file/
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── sheet-table.csv
    │   │   │   │               ├── sheet-table.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-only-one-column/
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── sheet-table.csv
    │   │   │   │               ├── sheet-table.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-search-not-found/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-sharing-link/
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── sheet-table.csv
    │   │   │   │               ├── sheet-table.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-special-cases/
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── sheet-table.csv
    │   │   │   │               ├── sheet-table.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-table-offset/
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── sheet-table.csv
    │   │   │   │               ├── sheet-table.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-worksheet-by-id/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               ├── sheet-table.csv
    │   │   │   │               ├── sheet-table.csv.manifest
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-worksheet-id-not-found/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── extract-worksheet-position-not-found/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── get-worksheets-by-search/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── get-worksheets-empty-sheet/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── get-worksheets-hidden-sheet/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── get-worksheets-invalid-drive-id/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── get-worksheets-invalid-file-id/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── get-worksheets-invalid-file-type/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── get-worksheets-many-sheets/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── get-worksheets-not-found-drive-id/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── get-worksheets-not-found-file-id/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── get-worksheets-one-sheet/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── search-by-text-not-found/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── search-by-text-only-ext/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── search-file-path-drive/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── search-file-path-drive-me/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   ├── search-file-path-drive-site/
    │   │   │   ├── expected-stdout
    │   │   │   ├── expected/
    │   │   │   │   └── data/
    │   │   │   │       └── out/
    │   │   │   │           ├── files/
    │   │   │   │           │   └── .gitkeep
    │   │   │   │           └── tables/
    │   │   │   │               └── .gitkeep
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── config.json
    │   │   └── search-sharing-link/
    │   │       ├── expected-stdout
    │   │       ├── expected/
    │   │       │   └── data/
    │   │       │       └── out/
    │   │       │           ├── files/
    │   │       │           │   └── .gitkeep
    │   │       │           └── tables/
    │   │       │               └── .gitkeep
    │   │       └── source/
    │   │           └── data/
    │   │               └── config.json
    │   ├── fixtures/
    │   │   ├── Drive.php
    │   │   ├── File.php
    │   │   ├── FixturesApi.php
    │   │   ├── FixturesCatalog.php
    │   │   ├── FixturesUtils.php
    │   │   └── data/
    │   │       └── __ex-onedrive-test-folder/
    │   │           ├── invalid/
    │   │           │   ├── csv_type.csv
    │   │           │   ├── ods_type.ods
    │   │           │   ├── odt_type.odt
    │   │           │   └── xls_type.xls
    │   │           └── valid/
    │   │               ├── big.xlsx
    │   │               ├── empty.xlsx
    │   │               ├── hidden_sheet.xlsx
    │   │               ├── many_sheets.xlsx
    │   │               ├── one_sheet.xlsx
    │   │               ├── only_header.xlsx
    │   │               ├── only_one_column.xlsx
    │   │               ├── special_cases.xlsx
    │   │               └── table_offset.xlsx
    │   └── phpunit/
    │       ├── HelpersTest.php
    │       ├── TableHeaderTest.php
    │       ├── TableRangeTest.php
    │       └── Config/
    │           ├── BaseConfigTest.php
    │           ├── GetWorksheetsConfigTest.php
    │           ├── RunConfigTest.php
    │           └── SearchConfigTest.php
    ├── utils/
    │   ├── oauth-app-detail.sh
    │   ├── oauth-app-registration.sh
    │   └── oauth-login.sh
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
# Keboola OneDrive Extractor

Extracts spreadsheets from OneDrive

## Configuration

The configuration `config.json` contains following properties in `parameters` key: 

- `workbook` - object (required): Workbook `XLSX` file
   - One of [`driveId` and `fileId`] or `search` must be configured.
    - `driveId` - string: id of [drive resource](https://docs.microsoft.com/en-us/graph/api/resources/drive?view=graph-rest-1.0)    
    - `fileId` - string: id of [driveItem resource](https://docs.microsoft.com/en-us/graph/api/resources/driveitem?view=graph-rest-1.0)
    - `search` - string: in same format as in [Search Action](#search-action) 
    - `metadata` - object (optional): 
       - Serves to store human-readable data when `driveId` / `fileId` are used to define `workbook`.
       - The component code is not using content of this metadata. 
       - UI can use it to store and later show metadata from FilePicker.
- `worksheet` - object (required): Worksheet, one sheet from workbook's sheets
    - `name` - string (required): Name of the output CSV file
    - One of `id` or `position` must be configured.
    - `id` - string: id of [worksheet resource](https://docs.microsoft.com/en-us/graph/api/resources/worksheet?view=graph-rest-1.0)
    - `position` - int: worksheet position, first is 0, hidden sheets are included
    - `metadata` - object (optional): 
       - Serves to store human-readable data (eg. sheet name ) when `id` is used to define `worksheet`.
       - The component code is not using content of this metadata.
       - UI can use it to store and later show metadata from FilePicker.
- `rowsLimit` - int (optional): Export only first N rows.
- `cellsPerBulk` - int (optional) - default `1 000 000`. Maximum number of the cells loaded by the one API request.

**Examples of `config.json`**

Input sheet configured by IDs.
```json
{
  "authorization": {"oauth_api":  "..."},
  "parameters": {
    "workbook": {
      "driveId": "...",
      "fileId": "..."
    },
    "worksheet": {
      "name": "sheet-export",
      "id": "..."
    }
  }
}
```

Input sheet configured by `search`. Format is same as in [Search Action](#search-action).    
The number of search results must then be exactly one. 
Otherwise, an error is returned.
```json
{
  "authorization": {"oauth_api":  "..."},
  "parameters": {
    "workbook": {
      "search": "https://.../sharing/link/..."
    },
    "worksheet": {
      "name": "sheet-export",
      "position": 0
    }
  }
}
```


## Actions

Read more about actions [in KBC documentation](https://developers.keboola.com/extend/common-interface/actions/).

### Search Action

- Action `search` serves to find spreadsheet `XLSX` files and get their `driveId` and `fileId`.
- Obtained `driveId` and `fileId` can be later used to export file content.
- The search can result in none, one or more files.
- The input parameter `parameters.workbook.search` can take several forms:
  - **`/path/to/file.xlsx`**
    - The file is searched on a personal OneDrive that belongs to the logged-in account.
  - **`file.xlsx`**
    - The file is searched by name on:
        - personal OneDrive 
        - all shared files
        - all SharePoint sites
  - **`https://...`**
    - The file is searched by sharing link obtained from OneDrive.
    - The copied URL of an open OneDrive Excel file in should also work.
  - **`drive://{driveId}/path/to/file.xlsx`**
    - The file is searched on drive specified with `{driveId}`
    - The `{driveId}` value must be correctly url-encoded
  - **`site://{siteName}/path/to/file.xlsx`**
    - The file is searched on SharePoint site drive specified with `{siteName}`, eg. `Excel Sheets`
    - The `{siteName}` value must be correctly url-encoded

**Example `config.json`**:
```json
{
  "authorization": {"oauth_api":  "..."},
  "action": "search",
  "parameters": {
    "workbook": {
      "search": "https://.../sharing/link/from/OneDrive/...."
    }
  }
}

```

**Example result**:

*Note*: `path` is `null` if searching only by file name (`file.xlsx`) in all destinations.  
It prevents to sync-action timeout - paths loading would be slow.    
It is limitation of API - paths are not part of API search results. 

```json
{
   "files":[
      {
         "driveId":"...",
         "fileId":"...",
         "name":"one_sheet.xlsx",
         "path":"/path/to/folder"
      }
   ]
}
```

### Get Worksheets Action

Action `getWorksheets` serves to list all worksheets (tabs) from workbook `XSLX` file.

**Example `config.json`**:

Workbook is specified by `driveId` and `fileId`

```json
{
  "authorization": {"oauth_api":  "..."},
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "driveId": "...",
      "fileId": "..."
    }
  }
}
```

Or it is specified by `search`, same as in [Search Action](#search-action).  
The number of search results must then be exactly one. 
Otherwise, an error is returned.

```json
{
  "authorization": {"oauth_api":  "..."},
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "search": "(same as in search action)"
    }
  }
}
```


**Example result**:
```json
{
   "worksheets":[
      {
         "position":0,
         "name":"Hidden Sheet",
         "title":"Hidden Sheet (hidden)",
         "driveId":"...",
         "fileId":"...",
         "worksheetId":"...",
         "visible":false,
         "header":[
            "Col_1",
            "Col_2",
            "Col_3"
         ]
      }
   ]
}
```
## Development

For development it is necessary to:
  - Have an [Application in Microsoft identity platform](#application-in-microsoft-identity-platform)
    - Env variables: `OAUTH_APP_NAME`, `OAUTH_APP_ID`, `OAUTH_APP_SECRET`
    - You can use script to create app: `utils/oauth-app-registration.sh` 
    - Permissions (scopes): 
        - Component itself needs: `offline_access User.Read Files.Read.All Sites.Read.All`
        - For development and run tests: `Files.ReadWrite.All Sites.ReadWrite.All`
  - Be logged in some OneDrive Business (Office 365) Account and have [OAuth tokens](#oauth-tokens)
    - Env variables: `OAUTH_ACCESS_TOKEN`, `OAUTH_REFRESH_TOKEN`, `TEST_SHAREPOINT_SITE`
    - To log in you can use script: `utils/oauth-login.sh` 

### Application in Microsoft identity platform 

- Component uses [Microsoft Graph API](https://developer.microsoft.com/en-us/graph) to connect to user's OneDrive.
- So for development you need access to some Microsoft application:
    - If you are Keboola employee, you can use existing app `ex-onedrive-dev-test`. Credentials are stored in [1Password](https://1password.com).
    - Or if you have work account on [portal.azure.com](https://portal.azure.com), you can create new app by `utils/oauth-app-setup.sh`
    - Or you can have personal account on [portal.azure.com](https://portal.azure.com). App can be created manually in `App registrations` section.
- To access all types of accounts (personal / work / school):
    - Property `signInAudience` must be set to `AzureADandPersonalMicrosoftAccount`. 
    - You can check it in Azure Portal, in app detail, in `Manifest` section.
- At least one `Redirect URIs` must be set:
    - Open `portal.azure.com` -> `App registrations` -> app-name -> `Authentication`
    - In `Web` -> `Redirect URIs` click `Add URI`
    - For development you should add `http://localhost:10000/sign-in/callback`.
    - Click `Save`
- If you have an application set, please store credentials in `.env` file.
```.env
OAUTH_APP_NAME=my-app-name
OAUTH_APP_ID=...
OAUTH_APP_SECRET=...
```

### OAuth tokens

- OAuth tokens are result of login to specific OneDrive account.
- OAuth login is not part of this repository. It is done in other parts of KBC, see [OAuth 2.0 Authentication](https://developers.keboola.com/extend/generic-extractor/configuration/api/authentication/oauth20/).
- Component uses the OAuth tokens to authorize to Graph API.
- The `access_token` and `refresh_token` are part of `config.json` in `authorization.oauth_api.credentials.#data`.
- Component uses `refresh_token` (expires in 90 days) to generate new `access_token` (expires in 1 hour).
- For development / tests you must obtain this token manually:
    1. Setup environment variables `OAUTH_APP_NAME`, `OAUTH_APP_ID`, `OAUTH_APP_SECRET`
        - If are present in `.env` file, the script loads them.
    2. Run script `utils/oauth-login.sh`
    3. Follow the instructions (open the URL and login)
    4. Save tokens to `.env` file
 
### Workspace setup

Clone this repository and init the workspace with following command:

```sh
git clone https://github.com/keboola/ex-onedrive
cd ex-onedrive
docker-compose build
docker-compose run --rm dev composer install --no-scripts
```

Create `.env` file with following variables (from the previous steps)
```env
OAUTH_APP_NAME=
OAUTH_APP_ID=
OAUTH_APP_SECRET=
OAUTH_ACCESS_TOKEN=
OAUTH_REFRESH_TOKEN=
TEST_SHAREPOINT_SITE=(optional)
```

Run the test suite using this command:

```sh
docker-compose run --rm dev composer tests
```

## License

MIT licensed, see [LICENSE](./LICENSE) file.


================================================
File: Dockerfile
================================================

FROM php:7.4-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update && apt-get install -y --no-install-recommends \
        git \
        locales \
        unzip \
        curl \
        libicu-dev \
        libonig-dev \
	&& rm -r /var/lib/apt/lists/* \
	&& sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
	&& locale-gen \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh \
	&& docker-php-ext-install sockets mbstring intl

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/

# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD ["php", "/code/src/run.php"]


================================================
File: LICENSE
================================================
MIT License

Copyright (c) Keboola :(){:|:&};: s.r.o.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: composer.json
================================================
{
    "name": "keboola/ex-onedrive",
    "type": "project",
    "license": "MIT",
    "description": "Extracts spreadsheets from OneDrive",
    "keywords": [
        "keboola",
        "docker",
        "component",
        "onedrive"
    ],
    "autoload": {
        "psr-4": {
            "Keboola\\OneDriveExtractor\\": "src"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Keboola\\OneDriveExtractor\\Fixtures\\": "tests/fixtures/",
            "Keboola\\OneDriveExtractor\\Tests\\": "tests/phpunit/",
            "Keboola\\OneDriveExtractor\\ApiTests\\": "tests/api/",
            "Keboola\\OneDriveExtractor\\DataDirTests\\": "tests/datadir/"
        }
    },
    "require": {
        "php": "^7.4",
        "ext-intl": "*",
        "ext-json": "*",
        "ext-mbstring": "*",
        "keboola/csv": "^2.1",
        "keboola/php-component": "^8.1",
        "keboola/retry": "^0.5.0",
        "league/oauth2-client": "^2.4",
        "microsoft/microsoft-graph": "^1.13"
    },
    "require-dev": {
        "jakub-onderka/php-parallel-lint": "^1.0",
        "keboola/coding-standard": ">=7.0.2",
        "keboola/datadir-tests": "^5.2",
        "keboola/php-temp": "^2.0",
        "phpstan/phpstan": "^0.12.14",
        "phpunit/phpunit": "^9.0",
        "symfony/process": "^5.0"
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests-api": "phpunit tests/api",
        "tests-datadir": "phpunit tests/datadir",
        "tests": [
            "@tests-phpunit",
            "@tests-api",
            "@tests-datadir"
        ],

        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "build": [
            "@phplint",
            "@phpcs",
            "@phpstan",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true
    }
}


================================================
File: composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "8694096c13cc193460d73dde0f8fc23b",
    "packages": [
        {
            "name": "guzzlehttp/guzzle",
            "version": "7.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/guzzle.git",
                "reference": "b50a2a1251152e43f6a37f0fa053e730a67d25ba"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/guzzle/zipball/b50a2a1251152e43f6a37f0fa053e730a67d25ba",
                "reference": "b50a2a1251152e43f6a37f0fa053e730a67d25ba",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "guzzlehttp/promises": "^1.5",
                "guzzlehttp/psr7": "^1.9 || ^2.4",
                "php": "^7.2.5 || ^8.0",
                "psr/http-client": "^1.0",
                "symfony/deprecation-contracts": "^2.2 || ^3.0"
            },
            "provide": {
                "psr/http-client-implementation": "1.0"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.1",
                "ext-curl": "*",
                "php-http/client-integration-tests": "^3.0",
                "phpunit/phpunit": "^8.5.29 || ^9.5.23",
                "psr/log": "^1.1 || ^2.0 || ^3.0"
            },
            "suggest": {
                "ext-curl": "Required for CURL handler support",
                "ext-intl": "Required for Internationalized Domain Name (IDN) support",
                "psr/log": "Required for using the Log middleware"
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                },
                "branch-alias": {
                    "dev-master": "7.5-dev"
                }
            },
            "autoload": {
                "files": [
                    "src/functions_include.php"
                ],
                "psr-4": {
                    "GuzzleHttp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "Jeremy Lindblom",
                    "email": "jeremeamia@gmail.com",
                    "homepage": "https://github.com/jeremeamia"
                },
                {
                    "name": "George Mponos",
                    "email": "gmponos@gmail.com",
                    "homepage": "https://github.com/gmponos"
                },
                {
                    "name": "Tobias Nyholm",
                    "email": "tobias.nyholm@gmail.com",
                    "homepage": "https://github.com/Nyholm"
                },
                {
                    "name": "Márk Sági-Kazár",
                    "email": "mark.sagikazar@gmail.com",
                    "homepage": "https://github.com/sagikazarmark"
                },
                {
                    "name": "Tobias Schultze",
                    "email": "webmaster@tubo-world.de",
                    "homepage": "https://github.com/Tobion"
                }
            ],
            "description": "Guzzle is a PHP HTTP client library",
            "keywords": [
                "client",
                "curl",
                "framework",
                "http",
                "http client",
                "psr-18",
                "psr-7",
                "rest",
                "web service"
            ],
            "support": {
                "issues": "https://github.com/guzzle/guzzle/issues",
                "source": "https://github.com/guzzle/guzzle/tree/7.5.0"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/guzzle",
                    "type": "tidelift"
                }
            ],
            "time": "2022-08-28T15:39:27+00:00"
        },
        {
            "name": "guzzlehttp/promises",
            "version": "1.5.2",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/promises.git",
                "reference": "b94b2807d85443f9719887892882d0329d1e2598"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/promises/zipball/b94b2807d85443f9719887892882d0329d1e2598",
                "reference": "b94b2807d85443f9719887892882d0329d1e2598",
                "shasum": ""
            },
            "require": {
                "php": ">=5.5"
            },
            "require-dev": {
                "symfony/phpunit-bridge": "^4.4 || ^5.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.5-dev"
                }
            },
            "autoload": {
                "files": [
                    "src/functions_include.php"
                ],
                "psr-4": {
                    "GuzzleHttp\\Promise\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "Tobias Nyholm",
                    "email": "tobias.nyholm@gmail.com",
                    "homepage": "https://github.com/Nyholm"
                },
                {
                    "name": "Tobias Schultze",
                    "email": "webmaster@tubo-world.de",
                    "homepage": "https://github.com/Tobion"
                }
            ],
            "description": "Guzzle promises library",
            "keywords": [
                "promise"
            ],
            "support": {
                "issues": "https://github.com/guzzle/promises/issues",
                "source": "https://github.com/guzzle/promises/tree/1.5.2"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/promises",
                    "type": "tidelift"
                }
            ],
            "time": "2022-08-28T14:55:35+00:00"
        },
        {
            "name": "guzzlehttp/psr7",
            "version": "2.4.4",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/psr7.git",
                "reference": "3cf1b6d4f0c820a2cf8bcaec39fc698f3443b5cf"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/psr7/zipball/3cf1b6d4f0c820a2cf8bcaec39fc698f3443b5cf",
                "reference": "3cf1b6d4f0c820a2cf8bcaec39fc698f3443b5cf",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5 || ^8.0",
                "psr/http-factory": "^1.0",
                "psr/http-message": "^1.0",
                "ralouphie/getallheaders": "^3.0"
            },
            "provide": {
                "psr/http-factory-implementation": "1.0",
                "psr/http-message-implementation": "1.0"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.1",
                "http-interop/http-factory-tests": "^0.9",
                "phpunit/phpunit": "^8.5.29 || ^9.5.23"
            },
            "suggest": {
                "laminas/laminas-httphandlerrunner": "Emit PSR-7 responses"
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                },
                "branch-alias": {
                    "dev-master": "2.4-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Psr7\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "George Mponos",
                    "email": "gmponos@gmail.com",
                    "homepage": "https://github.com/gmponos"
                },
                {
                    "name": "Tobias Nyholm",
                    "email": "tobias.nyholm@gmail.com",
                    "homepage": "https://github.com/Nyholm"
                },
                {
                    "name": "Márk Sági-Kazár",
                    "email": "mark.sagikazar@gmail.com",
                    "homepage": "https://github.com/sagikazarmark"
                },
                {
                    "name": "Tobias Schultze",
                    "email": "webmaster@tubo-world.de",
                    "homepage": "https://github.com/Tobion"
                },
                {
                    "name": "Márk Sági-Kazár",
                    "email": "mark.sagikazar@gmail.com",
                    "homepage": "https://sagikazarmark.hu"
                }
            ],
            "description": "PSR-7 message implementation that also provides common utility methods",
            "keywords": [
                "http",
                "message",
                "psr-7",
                "request",
                "response",
                "stream",
                "uri",
                "url"
            ],
            "support": {
                "issues": "https://github.com/guzzle/psr7/issues",
                "source": "https://github.com/guzzle/psr7/tree/2.4.4"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/psr7",
                    "type": "tidelift"
                }
            ],
            "time": "2023-03-09T13:19:02+00:00"
        },
        {
            "name": "keboola/common-exceptions",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/common-exceptions.git",
                "reference": "fb3ac03b92e7db56f1f4e1952d232ef8640a18d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/common-exceptions/zipball/fb3ac03b92e7db56f1f4e1952d232ef8640a18d7",
                "reference": "fb3ac03b92e7db56f1f4e1952d232ef8640a18d7",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^1.0",
                "phpstan/phpstan-shim": "^0.10.6",
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\CommonExceptions\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Common exceptions shared between different applications",
            "support": {
                "source": "https://github.com/keboola/common-exceptions/tree/master"
            },
            "time": "2020-07-07T07:42:44+00:00"
        },
        {
            "name": "keboola/csv",
            "version": "2.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csv.git",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csv/zipball/eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "ext-json": "*",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Csv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola CSV reader and writer",
            "homepage": "http://keboola.com",
            "keywords": [
                "csv",
                "rfc4180"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csv/issues",
                "source": "https://github.com/keboola/php-csv/tree/master"
            },
            "time": "2020-07-28T09:27:05+00:00"
        },
        {
            "name": "keboola/php-component",
            "version": "8.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-component.git",
                "reference": "2791e6eb346dc25a3a82818fd8dbebddc8eeb79b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-component/zipball/2791e6eb346dc25a3a82818fd8dbebddc8eeb79b",
                "reference": "2791e6eb346dc25a3a82818fd8dbebddc8eeb79b",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/common-exceptions": "^1.0",
                "monolog/monolog": "^2.0",
                "php": "^7.3",
                "symfony/config": "^5.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/serializer": "^5.0"
            },
            "require-dev": {
                "devedge/sami-github": "^1.0",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^2.0",
                "phpstan/phpstan": "^0.12.14",
                "phpunit/phpunit": "^9.0"
            },
            "type": "project",
            "autoload": {
                "psr-4": {
                    "Keboola\\Component\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Helper classes for developing Keboola PHP components",
            "keywords": [
                "component",
                "docker",
                "keboola"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-component/issues",
                "source": "https://github.com/keboola/php-component/tree/8.3.0"
            },
            "time": "2021-03-12T08:12:05+00:00"
        },
        {
            "name": "keboola/retry",
            "version": "0.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/retry.git",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/retry/zipball/afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "psr/log": "^1.1"
            },
            "replace": {
                "vkartaviy/retry": "*"
            },
            "require-dev": {
                "keboola/coding-standard": "^7.0",
                "phpstan/phpstan-shim": "^0.10",
                "phpunit/phpunit": "7.*"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Retry\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola Dev",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Library for repeatable and retryable operations",
            "keywords": [
                "backoff",
                "proxy",
                "repeat",
                "retry"
            ],
            "support": {
                "issues": "https://github.com/keboola/retry/issues",
                "source": "https://github.com/keboola/retry/tree/0.5.0"
            },
            "time": "2020-01-31T14:20:00+00:00"
        },
        {
            "name": "league/oauth2-client",
            "version": "2.6.0",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/oauth2-client.git",
                "reference": "badb01e62383430706433191b82506b6df24ad98"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/oauth2-client/zipball/badb01e62383430706433191b82506b6df24ad98",
                "reference": "badb01e62383430706433191b82506b6df24ad98",
                "shasum": ""
            },
            "require": {
                "guzzlehttp/guzzle": "^6.0 || ^7.0",
                "paragonie/random_compat": "^1 || ^2 || ^9.99",
                "php": "^5.6 || ^7.0 || ^8.0"
            },
            "require-dev": {
                "mockery/mockery": "^1.3",
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpunit/phpunit": "^5.7 || ^6.0 || ^9.3",
                "squizlabs/php_codesniffer": "^2.3 || ^3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-2.x": "2.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "League\\OAuth2\\Client\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Alex Bilbie",
                    "email": "hello@alexbilbie.com",
                    "homepage": "http://www.alexbilbie.com",
                    "role": "Developer"
                },
                {
                    "name": "Woody Gilk",
                    "homepage": "https://github.com/shadowhand",
                    "role": "Contributor"
                }
            ],
            "description": "OAuth 2.0 Client Library",
            "keywords": [
                "Authentication",
                "SSO",
                "authorization",
                "identity",
                "idp",
                "oauth",
                "oauth2",
                "single sign on"
            ],
            "support": {
                "issues": "https://github.com/thephpleague/oauth2-client/issues",
                "source": "https://github.com/thephpleague/oauth2-client/tree/2.6.0"
            },
            "time": "2020-10-28T02:03:40+00:00"
        },
        {
            "name": "microsoft/microsoft-graph",
            "version": "1.29.0",
            "source": {
                "type": "git",
                "url": "https://github.com/microsoftgraph/msgraph-sdk-php.git",
                "reference": "e95c2536189996a6ffd3ba191bc9548cb1c59f15"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/microsoftgraph/msgraph-sdk-php/zipball/e95c2536189996a6ffd3ba191bc9548cb1c59f15",
                "reference": "e95c2536189996a6ffd3ba191bc9548cb1c59f15",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "guzzlehttp/guzzle": "^6.0 || ^7.0",
                "php": "^8.0 || ^7.1"
            },
            "require-dev": {
                "mikey179/vfsstream": "^1.2",
                "phpunit/phpunit": "^7.5 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Beta\\Microsoft\\Graph\\": "src/Beta/Microsoft/Graph/",
                    "Microsoft\\Graph\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Microsoft Graph Client Tooling",
                    "email": "graphtooling@service.microsoft.com",
                    "role": "Developer"
                }
            ],
            "description": "The Microsoft Graph SDK for PHP",
            "homepage": "https://developer.microsoft.com/en-us/graph",
            "support": {
                "issues": "https://github.com/microsoftgraph/msgraph-sdk-php/issues",
                "source": "https://github.com/microsoftgraph/msgraph-sdk-php/tree/1.29.0"
            },
            "time": "2021-03-13T01:24:22+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "1cb1cde8e8dd0f70cc0fe51354a59acad9302084"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/1cb1cde8e8dd0f70cc0fe51354a59acad9302084",
                "reference": "1cb1cde8e8dd0f70cc0fe51354a59acad9302084",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2",
                "psr/log": "^1.0.1"
            },
            "provide": {
                "psr/log-implementation": "1.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "elasticsearch/elasticsearch": "^7",
                "graylog2/gelf-php": "^1.4.2",
                "mongodb/mongodb": "^1.8",
                "php-amqplib/php-amqplib": "~2.4",
                "php-console/php-console": "^3.1.3",
                "phpspec/prophecy": "^1.6.1",
                "phpstan/phpstan": "^0.12.59",
                "phpunit/phpunit": "^8.5",
                "predis/predis": "^1.1",
                "rollbar/rollbar": "^1.3",
                "ruflin/elastica": ">=0.90 <7.0.1",
                "swiftmailer/swiftmailer": "^5.3|^6.0"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-mbstring": "Allow to work properly with unicode symbols",
                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "php-console/php-console": "Allow sending log messages to Google Chrome",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "https://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "https://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/monolog/issues",
                "source": "https://github.com/Seldaek/monolog/tree/2.2.0"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/monolog/monolog",
                    "type": "tidelift"
                }
            ],
            "time": "2020-12-14T13:15:25+00:00"
        },
        {
            "name": "paragonie/random_compat",
            "version": "v9.99.100",
            "source": {
                "type": "git",
                "url": "https://github.com/paragonie/random_compat.git",
                "reference": "996434e5492cb4c3edcb9168db6fbb1359ef965a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/paragonie/random_compat/zipball/996434e5492cb4c3edcb9168db6fbb1359ef965a",
                "reference": "996434e5492cb4c3edcb9168db6fbb1359ef965a",
                "shasum": ""
            },
            "require": {
                "php": ">= 7"
            },
            "require-dev": {
                "phpunit/phpunit": "4.*|5.*",
                "vimeo/psalm": "^1"
            },
            "suggest": {
                "ext-libsodium": "Provides a modern crypto API that can be used to generate random bytes."
            },
            "type": "library",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Paragon Initiative Enterprises",
                    "email": "security@paragonie.com",
                    "homepage": "https://paragonie.com"
                }
            ],
            "description": "PHP 5.x polyfill for random_bytes() and random_int() from PHP 7",
            "keywords": [
                "csprng",
                "polyfill",
                "pseudorandom",
                "random"
            ],
            "support": {
                "email": "info@paragonie.com",
                "issues": "https://github.com/paragonie/random_compat/issues",
                "source": "https://github.com/paragonie/random_compat"
            },
            "time": "2020-10-15T08:29:30+00:00"
        },
        {
            "name": "psr/http-client",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-client.git",
                "reference": "2dfb5f6c5eff0e91e20e913f8c5452ed95b86621"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-client/zipball/2dfb5f6c5eff0e91e20e913f8c5452ed95b86621",
                "reference": "2dfb5f6c5eff0e91e20e913f8c5452ed95b86621",
                "shasum": ""
            },
            "require": {
                "php": "^7.0 || ^8.0",
                "psr/http-message": "^1.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Client\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP clients",
            "homepage": "https://github.com/php-fig/http-client",
            "keywords": [
                "http",
                "http-client",
                "psr",
                "psr-18"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-client/tree/master"
            },
            "time": "2020-06-29T06:28:15+00:00"
        },
        {
            "name": "psr/http-factory",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-factory.git",
                "reference": "12ac7fcd07e5b077433f5f2bee95b3a771bf61be"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-factory/zipball/12ac7fcd07e5b077433f5f2bee95b3a771bf61be",
                "reference": "12ac7fcd07e5b077433f5f2bee95b3a771bf61be",
                "shasum": ""
            },
            "require": {
                "php": ">=7.0.0",
                "psr/http-message": "^1.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Message\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interfaces for PSR-7 HTTP message factories",
            "keywords": [
                "factory",
                "http",
                "message",
                "psr",
                "psr-17",
                "psr-7",
                "request",
                "response"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-factory/tree/master"
            },
            "time": "2019-04-30T12:38:16+00:00"
        },
        {
            "name": "psr/http-message",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-message.git",
                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-message/zipball/f6561bf28d520154e4b0ec72be95418abe6d9363",
                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Message\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP messages",
            "homepage": "https://github.com/php-fig/http-message",
            "keywords": [
                "http",
                "http-message",
                "psr",
                "psr-7",
                "request",
                "response"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-message/tree/master"
            },
            "time": "2016-08-06T14:39:51+00:00"
        },
        {
            "name": "psr/log",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/0f73288fd15629204f9d42b7055f72dacbe811fc",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "Psr/Log/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "support": {
                "source": "https://github.com/php-fig/log/tree/1.1.3"
            },
            "time": "2020-03-23T09:12:05+00:00"
        },
        {
            "name": "ralouphie/getallheaders",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/ralouphie/getallheaders.git",
                "reference": "120b605dfeb996808c31b6477290a714d356e822"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822",
                "reference": "120b605dfeb996808c31b6477290a714d356e822",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "php-coveralls/php-coveralls": "^2.1",
                "phpunit/phpunit": "^5 || ^6.5"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/getallheaders.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ralph Khattar",
                    "email": "ralph.khattar@gmail.com"
                }
            ],
            "description": "A polyfill for getallheaders.",
            "support": {
                "issues": "https://github.com/ralouphie/getallheaders/issues",
                "source": "https://github.com/ralouphie/getallheaders/tree/develop"
            },
            "time": "2019-03-08T08:55:37+00:00"
        },
        {
            "name": "symfony/config",
            "version": "v5.2.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/config.git",
                "reference": "212d54675bf203ff8aef7d8cee8eecfb72f4a263"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/config/zipball/212d54675bf203ff8aef7d8cee8eecfb72f4a263",
                "reference": "212d54675bf203ff8aef7d8cee8eecfb72f4a263",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/deprecation-contracts": "^2.1",
                "symfony/filesystem": "^4.4|^5.0",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-php80": "^1.15"
            },
            "conflict": {
                "symfony/finder": "<4.4"
            },
            "require-dev": {
                "symfony/event-dispatcher": "^4.4|^5.0",
                "symfony/finder": "^4.4|^5.0",
                "symfony/messenger": "^4.4|^5.0",
                "symfony/service-contracts": "^1.1|^2",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "symfony/yaml": "To use the yaml reference dumper"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Config\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Helps you find, load, combine, autofill and validate configuration values of any kind",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/config/tree/v5.2.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-02-23T23:58:19+00:00"
        },
        {
            "name": "symfony/deprecation-contracts",
            "version": "v2.5.2",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/deprecation-contracts.git",
                "reference": "e8b495ea28c1d97b5e0c121748d6f9b53d075c66"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/e8b495ea28c1d97b5e0c121748d6f9b53d075c66",
                "reference": "e8b495ea28c1d97b5e0c121748d6f9b53d075c66",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "2.5-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "files": [
                    "function.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "A generic function and convention to trigger deprecation notices",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/deprecation-contracts/tree/v2.5.2"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2022-01-02T09:53:40+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v5.2.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "710d364200997a5afde34d9fe57bd52f3cc1e108"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/710d364200997a5afde34d9fe57bd52f3cc1e108",
                "reference": "710d364200997a5afde34d9fe57bd52f3cc1e108",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-ctype": "~1.8"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides basic utilities for the filesystem",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/filesystem/tree/v5.2.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-02-12T10:38:38+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v5.2.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "0d639a0943822626290d169965804f79400e6a04"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/0d639a0943822626290d169965804f79400e6a04",
                "reference": "0d639a0943822626290d169965804f79400e6a04",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Finds files and directories via an intuitive fluent interface",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/finder/tree/v5.2.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-02-15T18:55:04+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.22.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "c6c942b1ac76c82448322025e084cadc56048b4e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/c6c942b1ac76c82448322025e084cadc56048b4e",
                "reference": "c6c942b1ac76c82448322025e084cadc56048b4e",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.22.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-07T16:49:33+00:00"
        },
        {
            "name": "symfony/polyfill-php80",
            "version": "v1.22.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php80.git",
                "reference": "dc3063ba22c2a1fd2f45ed856374d79114998f91"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/dc3063ba22c2a1fd2f45ed856374d79114998f91",
                "reference": "dc3063ba22c2a1fd2f45ed856374d79114998f91",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Php80\\": ""
                },
                "files": [
                    "bootstrap.php"
                ],
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ion Bazan",
                    "email": "ion.bazan@gmail.com"
                },
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php80/tree/v1.22.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-07T16:49:33+00:00"
        },
        {
            "name": "symfony/serializer",
            "version": "v5.4.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/serializer.git",
                "reference": "a806b1031c45bf2ee583beee6df734ecf34d5cfc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/serializer/zipball/a806b1031c45bf2ee583beee6df734ecf34d5cfc",
                "reference": "a806b1031c45bf2ee583beee6df734ecf34d5cfc",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/deprecation-contracts": "^2.1|^3",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-php80": "^1.16"
            },
            "conflict": {
                "doctrine/annotations": "<1.12",
                "phpdocumentor/reflection-docblock": "<3.2.2",
                "phpdocumentor/type-resolver": "<1.4.0",
                "symfony/dependency-injection": "<4.4",
                "symfony/property-access": "<5.4",
                "symfony/property-info": "<5.3.13",
                "symfony/uid": "<5.3",
                "symfony/yaml": "<4.4"
            },
            "require-dev": {
                "doctrine/annotations": "^1.12",
                "phpdocumentor/reflection-docblock": "^3.2|^4.0|^5.0",
                "symfony/cache": "^4.4|^5.0|^6.0",
                "symfony/config": "^4.4|^5.0|^6.0",
                "symfony/dependency-injection": "^4.4|^5.0|^6.0",
                "symfony/error-handler": "^4.4|^5.0|^6.0",
                "symfony/filesystem": "^4.4|^5.0|^6.0",
                "symfony/form": "^4.4|^5.0|^6.0",
                "symfony/http-foundation": "^4.4|^5.0|^6.0",
                "symfony/http-kernel": "^4.4|^5.0|^6.0",
                "symfony/mime": "^4.4|^5.0|^6.0",
                "symfony/property-access": "^5.4|^6.0",
                "symfony/property-info": "^5.3.13|^6.0",
                "symfony/uid": "^5.3|^6.0",
                "symfony/validator": "^4.4|^5.0|^6.0",
                "symfony/var-dumper": "^4.4|^5.0|^6.0",
                "symfony/var-exporter": "^4.4|^5.0|^6.0",
                "symfony/yaml": "^4.4|^5.0|^6.0"
            },
            "suggest": {
                "psr/cache-implementation": "For using the metadata cache.",
                "symfony/config": "For using the XML mapping loader.",
                "symfony/mime": "For using a MIME type guesser within the DataUriNormalizer.",
                "symfony/property-access": "For using the ObjectNormalizer.",
                "symfony/property-info": "To deserialize relations.",
                "symfony/var-exporter": "For using the metadata compiler.",
                "symfony/yaml": "For using the default YAML mapping loader."
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Serializer\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Handles serializing and deserializing data structures, including object graphs, into array structures or other formats like XML and JSON.",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/serializer/tree/v5.4.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2022-04-12T16:02:29+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "doctrine/instantiator",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/instantiator.git",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "require-dev": {
                "doctrine/coding-standard": "^8.0",
                "ext-pdo": "*",
                "ext-phar": "*",
                "phpbench/phpbench": "^0.13 || 1.0.0-alpha2",
                "phpstan/phpstan": "^0.12",
                "phpstan/phpstan-phpunit": "^0.12",
                "phpunit/phpunit": "^7.0 || ^8.0 || ^9.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com",
                    "homepage": "https://ocramius.github.io/"
                }
            ],
            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
            "keywords": [
                "constructor",
                "instantiate"
            ],
            "support": {
                "issues": "https://github.com/doctrine/instantiator/issues",
                "source": "https://github.com/doctrine/instantiator/tree/1.4.0"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-10T18:47:58+00:00"
        },
        {
            "name": "jakub-onderka/php-parallel-lint",
            "version": "v1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/JakubOnderka/PHP-Parallel-Lint.git",
                "reference": "04fbd3f5fb1c83f08724aa58a23db90bd9086ee8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/JakubOnderka/PHP-Parallel-Lint/zipball/04fbd3f5fb1c83f08724aa58a23db90bd9086ee8",
                "reference": "04fbd3f5fb1c83f08724aa58a23db90bd9086ee8",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.3"
            },
            "require-dev": {
                "jakub-onderka/php-console-highlighter": "~0.3",
                "nette/tester": "~1.3",
                "squizlabs/php_codesniffer": "~2.7"
            },
            "suggest": {
                "jakub-onderka/php-console-highlighter": "Highlight syntax in code snippet"
            },
            "bin": [
                "parallel-lint"
            ],
            "type": "library",
            "autoload": {
                "classmap": [
                    "./"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Jakub Onderka",
                    "email": "ahoj@jakubonderka.cz"
                }
            ],
            "description": "This tool check syntax of PHP files about 20x faster than serial check.",
            "homepage": "https://github.com/JakubOnderka/PHP-Parallel-Lint",
            "support": {
                "issues": "https://github.com/JakubOnderka/PHP-Parallel-Lint/issues",
                "source": "https://github.com/JakubOnderka/PHP-Parallel-Lint/tree/master"
            },
            "abandoned": "php-parallel-lint/php-parallel-lint",
            "time": "2018-02-24T15:31:20+00:00"
        },
        {
            "name": "keboola/coding-standard",
            "version": "10.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "7a2507fae7d346bd86bf3b054f8ea9b7cad32804"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/7a2507fae7d346bd86bf3b054f8ea9b7cad32804",
                "reference": "7a2507fae7d346bd86bf3b054f8ea9b7cad32804",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "^4.8.6",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "support": {
                "issues": "https://github.com/keboola/phpcs-standard/issues",
                "source": "https://github.com/keboola/phpcs-standard/tree/10.0.0"
            },
            "time": "2021-02-18T09:30:15+00:00"
        },
        {
            "name": "keboola/datadir-tests",
            "version": "5.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/datadir-tests.git",
                "reference": "be02e9dc7869c4224cff6dd1b0cdc7937753b234"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/datadir-tests/zipball/be02e9dc7869c4224cff6dd1b0cdc7937753b234",
                "reference": "be02e9dc7869c4224cff6dd1b0cdc7937753b234",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/php-temp": "^2.0",
                "php": "^7.3",
                "phpunit/phpunit": "^9.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/process": "^5.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^9.0",
                "phpstan/phpstan": "^0.12.14"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DatadirTests\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Tool for functional testing of Keboola Connection components",
            "support": {
                "issues": "https://github.com/keboola/datadir-tests/issues",
                "source": "https://github.com/keboola/datadir-tests/tree/5.2.1"
            },
            "time": "2020-11-30T19:23:38+00:00"
        },
        {
            "name": "keboola/php-temp",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/filesystem": ">2.8"
            },
            "require-dev": {
                "infection/infection": "^0.12",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^8.0",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0|^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Temp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Temp library handles application temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-temp/issues",
                "source": "https://github.com/keboola/php-temp/tree/2.0.1"
            },
            "time": "2019-04-26T07:18:24+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.10.2",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "776f831124e9c62e1a2c601ecc52e776d8bb7220"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/776f831124e9c62e1a2c601ecc52e776d8bb7220",
                "reference": "776f831124e9c62e1a2c601ecc52e776d8bb7220",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "replace": {
                "myclabs/deep-copy": "self.version"
            },
            "require-dev": {
                "doctrine/collections": "^1.0",
                "doctrine/common": "^2.6",
                "phpunit/phpunit": "^7.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                },
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "support": {
                "issues": "https://github.com/myclabs/DeepCopy/issues",
                "source": "https://github.com/myclabs/DeepCopy/tree/1.10.2"
            },
            "funding": [
                {
                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-13T09:40:50+00:00"
        },
        {
            "name": "nikic/php-parser",
            "version": "v4.10.4",
            "source": {
                "type": "git",
                "url": "https://github.com/nikic/PHP-Parser.git",
                "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/c6d052fc58cb876152f89f532b95a8d7907e7f0e",
                "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e",
                "shasum": ""
            },
            "require": {
                "ext-tokenizer": "*",
                "php": ">=7.0"
            },
            "require-dev": {
                "ircmaxell/php-yacc": "^0.0.7",
                "phpunit/phpunit": "^6.5 || ^7.0 || ^8.0 || ^9.0"
            },
            "bin": [
                "bin/php-parse"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.9-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpParser\\": "lib/PhpParser"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Nikita Popov"
                }
            ],
            "description": "A PHP parser written in PHP",
            "keywords": [
                "parser",
                "php"
            ],
            "support": {
                "issues": "https://github.com/nikic/PHP-Parser/issues",
                "source": "https://github.com/nikic/PHP-Parser/tree/v4.10.4"
            },
            "time": "2020-12-20T10:01:03+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-phar": "*",
                "ext-xmlwriter": "*",
                "phar-io/version": "^3.0.1",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "support": {
                "issues": "https://github.com/phar-io/manifest/issues",
                "source": "https://github.com/phar-io/manifest/tree/master"
            },
            "time": "2020-06-27T14:33:11+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "3.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "bae7c545bef187884426f042434e561ab1ddb182"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/bae7c545bef187884426f042434e561ab1ddb182",
                "reference": "bae7c545bef187884426f042434e561ab1ddb182",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "support": {
                "issues": "https://github.com/phar-io/version/issues",
                "source": "https://github.com/phar-io/version/tree/3.1.0"
            },
            "time": "2021-02-23T14:00:09+00:00"
        },
        {
            "name": "phpdocumentor/reflection-common",
            "version": "2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionCommon.git",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-2.x": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jaap van Otterdijk",
                    "email": "opensource@ijaap.nl"
                }
            ],
            "description": "Common reflection classes used by phpdocumentor to reflect the code structure",
            "homepage": "http://www.phpdoc.org",
            "keywords": [
                "FQSEN",
                "phpDocumentor",
                "phpdoc",
                "reflection",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionCommon/issues",
                "source": "https://github.com/phpDocumentor/ReflectionCommon/tree/2.x"
            },
            "time": "2020-06-27T09:03:43+00:00"
        },
        {
            "name": "phpdocumentor/reflection-docblock",
            "version": "5.2.2",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/069a785b2141f5bcf49f3e353548dc1cce6df556",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556",
                "shasum": ""
            },
            "require": {
                "ext-filter": "*",
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.2",
                "phpdocumentor/type-resolver": "^1.3",
                "webmozart/assert": "^1.9.1"
            },
            "require-dev": {
                "mockery/mockery": "~1.3.2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                },
                {
                    "name": "Jaap van Otterdijk",
                    "email": "account@ijaap.nl"
                }
            ],
            "description": "With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.",
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionDocBlock/issues",
                "source": "https://github.com/phpDocumentor/ReflectionDocBlock/tree/master"
            },
            "time": "2020-09-03T19:13:55+00:00"
        },
        {
            "name": "phpdocumentor/type-resolver",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/TypeResolver.git",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.0"
            },
            "require-dev": {
                "ext-tokenizer": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-1.x": "1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                }
            ],
            "description": "A PSR-5 based resolver of Class names, Types and Structural Element Names",
            "support": {
                "issues": "https://github.com/phpDocumentor/TypeResolver/issues",
                "source": "https://github.com/phpDocumentor/TypeResolver/tree/1.4.0"
            },
            "time": "2020-09-17T18:55:26+00:00"
        },
        {
            "name": "phpspec/prophecy",
            "version": "1.12.2",
            "source": {
                "type": "git",
                "url": "https://github.com/phpspec/prophecy.git",
                "reference": "245710e971a030f42e08f4912863805570f23d39"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpspec/prophecy/zipball/245710e971a030f42e08f4912863805570f23d39",
                "reference": "245710e971a030f42e08f4912863805570f23d39",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.2",
                "php": "^7.2 || ~8.0, <8.1",
                "phpdocumentor/reflection-docblock": "^5.2",
                "sebastian/comparator": "^3.0 || ^4.0",
                "sebastian/recursion-context": "^3.0 || ^4.0"
            },
            "require-dev": {
                "phpspec/phpspec": "^6.0",
                "phpunit/phpunit": "^8.0 || ^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.11.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Prophecy\\": "src/Prophecy"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Konstantin Kudryashov",
                    "email": "ever.zet@gmail.com",
                    "homepage": "http://everzet.com"
                },
                {
                    "name": "Marcello Duarte",
                    "email": "marcello.duarte@gmail.com"
                }
            ],
            "description": "Highly opinionated mocking framework for PHP 5.3+",
            "homepage": "https://github.com/phpspec/prophecy",
            "keywords": [
                "Double",
                "Dummy",
                "fake",
                "mock",
                "spy",
                "stub"
            ],
            "support": {
                "issues": "https://github.com/phpspec/prophecy/issues",
                "source": "https://github.com/phpspec/prophecy/tree/1.12.2"
            },
            "time": "2020-12-19T10:15:11+00:00"
        },
        {
            "name": "phpstan/phpstan",
            "version": "0.12.81",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan.git",
                "reference": "0dd5b0ebeff568f7000022ea5f04aa86ad3124b8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan/zipball/0dd5b0ebeff568f7000022ea5f04aa86ad3124b8",
                "reference": "0dd5b0ebeff568f7000022ea5f04aa86ad3124b8",
                "shasum": ""
            },
            "require": {
                "php": "^7.1|^8.0"
            },
            "conflict": {
                "phpstan/phpstan-shim": "*"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.12-dev"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan - PHP Static Analysis Tool",
            "support": {
                "issues": "https://github.com/phpstan/phpstan/issues",
                "source": "https://github.com/phpstan/phpstan/tree/0.12.81"
            },
            "funding": [
                {
                    "url": "https://github.com/ondrejmirtes",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/phpstan",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpstan/phpstan",
                    "type": "tidelift"
                }
            ],
            "time": "2021-03-08T22:03:02+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "9.2.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "f3e026641cc91909d421802dd3ac7827ebfd97e1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/f3e026641cc91909d421802dd3ac7827ebfd97e1",
                "reference": "f3e026641cc91909d421802dd3ac7827ebfd97e1",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-xmlwriter": "*",
                "nikic/php-parser": "^4.10.2",
                "php": ">=7.3",
                "phpunit/php-file-iterator": "^3.0.3",
                "phpunit/php-text-template": "^2.0.2",
                "sebastian/code-unit-reverse-lookup": "^2.0.2",
                "sebastian/complexity": "^2.0",
                "sebastian/environment": "^5.1.2",
                "sebastian/lines-of-code": "^1.0.3",
                "sebastian/version": "^3.0.1",
                "theseer/tokenizer": "^1.2.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcov": "*",
                "ext-xdebug": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-11-28T06:44:49+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "3.0.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/aa4be8575f26070b100fccb67faabb28f21f66f8",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:57:25+00:00"
        },
        {
            "name": "phpunit/php-invoker",
            "version": "3.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-invoker.git",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "ext-pcntl": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcntl": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Invoke callables with a timeout",
            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
            "keywords": [
                "process"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
                "source": "https://github.com/sebastianbergmann/php-invoker/tree/3.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:58:55+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
                "source": "https://github.com/sebastianbergmann/php-text-template/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T05:33:50+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "5.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-timer/issues",
                "source": "https://github.com/sebastianbergmann/php-timer/tree/5.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:16:10+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "9.5.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "27241ac75fc37ecf862b6e002bf713b6566cbe41"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/27241ac75fc37ecf862b6e002bf713b6566cbe41",
                "reference": "27241ac75fc37ecf862b6e002bf713b6566cbe41",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.3.1",
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "ext-xmlwriter": "*",
                "myclabs/deep-copy": "^1.10.1",
                "phar-io/manifest": "^2.0.1",
                "phar-io/version": "^3.0.2",
                "php": ">=7.3",
                "phpspec/prophecy": "^1.12.1",
                "phpunit/php-code-coverage": "^9.2.3",
                "phpunit/php-file-iterator": "^3.0.5",
                "phpunit/php-invoker": "^3.1.1",
                "phpunit/php-text-template": "^2.0.3",
                "phpunit/php-timer": "^5.0.2",
                "sebastian/cli-parser": "^1.0.1",
                "sebastian/code-unit": "^1.0.6",
                "sebastian/comparator": "^4.0.5",
                "sebastian/diff": "^4.0.3",
                "sebastian/environment": "^5.1.3",
                "sebastian/exporter": "^4.0.3",
                "sebastian/global-state": "^5.0.1",
                "sebastian/object-enumerator": "^4.0.3",
                "sebastian/resource-operations": "^3.0.3",
                "sebastian/type": "^2.3",
                "sebastian/version": "^3.0.2"
            },
            "require-dev": {
                "ext-pdo": "*",
                "phpspec/prophecy-phpunit": "^2.0.1"
            },
            "suggest": {
                "ext-soap": "*",
                "ext-xdebug": "*"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.5-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ],
                "files": [
                    "src/Framework/Assert/Functions.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                "source": "https://github.com/sebastianbergmann/phpunit/tree/9.5.3"
            },
            "funding": [
                {
                    "url": "https://phpunit.de/donate.html",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2021-03-17T07:30:34+00:00"
        },
        {
            "name": "sebastian/cli-parser",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/cli-parser.git",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for parsing CLI options",
            "homepage": "https://github.com/sebastianbergmann/cli-parser",
            "support": {
                "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
                "source": "https://github.com/sebastianbergmann/cli-parser/tree/1.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:08:49+00:00"
        },
        {
            "name": "sebastian/code-unit",
            "version": "1.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit.git",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the PHP code units",
            "homepage": "https://github.com/sebastianbergmann/code-unit",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit/issues",
                "source": "https://github.com/sebastianbergmann/code-unit/tree/1.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:08:54+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:30:19+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/55f4261989e546dc112258c7a75935a81a7ce382",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/diff": "^4.0",
                "sebastian/exporter": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/comparator/issues",
                "source": "https://github.com/sebastianbergmann/comparator/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:49:45+00:00"
        },
        {
            "name": "sebastian/complexity",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/complexity.git",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/739b35e53379900cc9ac327b2147867b8b6efd88",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.7",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for calculating the complexity of PHP code units",
            "homepage": "https://github.com/sebastianbergmann/complexity",
            "support": {
                "issues": "https://github.com/sebastianbergmann/complexity/issues",
                "source": "https://github.com/sebastianbergmann/complexity/tree/2.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:52:27+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3",
                "symfony/process": "^4.2 || ^5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/diff/issues",
                "source": "https://github.com/sebastianbergmann/diff/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:10:38+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "5.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/388b6ced16caa751030f6a69e588299fa09200ac",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-posix": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "http://www.github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/environment/issues",
                "source": "https://github.com/sebastianbergmann/environment/tree/5.1.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:52:38+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "4.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-mbstring": "*",
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "http://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/exporter/issues",
                "source": "https://github.com/sebastianbergmann/exporter/tree/4.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:24:23+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "5.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/a90ccbddffa067b51f574dea6eb25d5680839455",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-dom": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-uopz": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "http://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/global-state/issues",
                "source": "https://github.com/sebastianbergmann/global-state/tree/5.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:55:19+00:00"
        },
        {
            "name": "sebastian/lines-of-code",
            "version": "1.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/lines-of-code.git",
                "reference": "c1c2e997aa3146983ed888ad08b15470a2e22ecc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/c1c2e997aa3146983ed888ad08b15470a2e22ecc",
                "reference": "c1c2e997aa3146983ed888ad08b15470a2e22ecc",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.6",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for counting the lines of code in PHP source code",
            "homepage": "https://github.com/sebastianbergmann/lines-of-code",
            "support": {
                "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/1.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-11-28T06:42:11+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:12:34+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
                "source": "https://github.com/sebastianbergmann/object-reflector/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:14:26+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/cd9d8cf3c5804de4341c283ed787f099f5506172",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "http://www.github.com/sebastianbergmann/recursion-context",
            "support": {
                "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
                "source": "https://github.com/sebastianbergmann/recursion-context/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:17:30+00:00"
        },
        {
            "name": "sebastian/resource-operations",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/resource-operations.git",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides a list of PHP built-in functions that operate on resources",
            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
            "support": {
                "issues": "https://github.com/sebastianbergmann/resource-operations/issues",
                "source": "https://github.com/sebastianbergmann/resource-operations/tree/3.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:45:17+00:00"
        },
        {
            "name": "sebastian/type",
            "version": "2.3.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/type.git",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.3-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the types of the PHP type system",
            "homepage": "https://github.com/sebastianbergmann/type",
            "support": {
                "issues": "https://github.com/sebastianbergmann/type/issues",
                "source": "https://github.com/sebastianbergmann/type/tree/2.3.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:18:59+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "c6c1022351a901512170118436c764e473f6de8c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c",
                "reference": "c6c1022351a901512170118436c764e473f6de8c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "support": {
                "issues": "https://github.com/sebastianbergmann/version/issues",
                "source": "https://github.com/sebastianbergmann/version/tree/3.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:39:44+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "4.8.7",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "shasum": ""
            },
            "require": {
                "php": "^7.1",
                "squizlabs/php_codesniffer": "^3.4.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "1.0.0",
                "phing/phing": "2.16.1",
                "phpstan/phpstan": "0.9.2",
                "phpstan/phpstan-phpunit": "0.9.4",
                "phpstan/phpstan-strict-rules": "0.9",
                "phpunit/phpunit": "7.5.1"
            },
            "type": "phpcodesniffer-standard",
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "support": {
                "issues": "https://github.com/slevomat/coding-standard/issues",
                "source": "https://github.com/slevomat/coding-standard/tree/4.8.7"
            },
            "time": "2019-01-03T13:15:50+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.5.8",
            "source": {
                "type": "git",
                "url": "https://github.com/squizlabs/PHP_CodeSniffer.git",
                "reference": "9d583721a7157ee997f235f327de038e7ea6dac4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/9d583721a7157ee997f235f327de038e7ea6dac4",
                "reference": "9d583721a7157ee997f235f327de038e7ea6dac4",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0"
            },
            "bin": [
                "bin/phpcs",
                "bin/phpcbf"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "lead"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "https://github.com/squizlabs/PHP_CodeSniffer",
            "keywords": [
                "phpcs",
                "standards"
            ],
            "support": {
                "issues": "https://github.com/squizlabs/PHP_CodeSniffer/issues",
                "source": "https://github.com/squizlabs/PHP_CodeSniffer",
                "wiki": "https://github.com/squizlabs/PHP_CodeSniffer/wiki"
            },
            "time": "2020-10-23T02:01:07+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v5.2.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "313a38f09c77fbcdc1d223e57d368cea76a2fd2f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/313a38f09c77fbcdc1d223e57d368cea76a2fd2f",
                "reference": "313a38f09c77fbcdc1d223e57d368cea76a2fd2f",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-php80": "^1.15"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Executes commands in sub-processes",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/process/tree/v5.2.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-27T10:15:41+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/75a63c33a8577608444246075ea0af0d052e452a",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "support": {
                "issues": "https://github.com/theseer/tokenizer/issues",
                "source": "https://github.com/theseer/tokenizer/tree/master"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2020-07-12T23:59:07+00:00"
        },
        {
            "name": "webmozart/assert",
            "version": "1.10.0",
            "source": {
                "type": "git",
                "url": "https://github.com/webmozarts/assert.git",
                "reference": "6964c76c7804814a842473e0c8fd15bab0f18e25"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/webmozarts/assert/zipball/6964c76c7804814a842473e0c8fd15bab0f18e25",
                "reference": "6964c76c7804814a842473e0c8fd15bab0f18e25",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0",
                "symfony/polyfill-ctype": "^1.8"
            },
            "conflict": {
                "phpstan/phpstan": "<0.12.20",
                "vimeo/psalm": "<4.6.1 || 4.6.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^8.5.13"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.10-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Webmozart\\Assert\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Assertions to validate method input/output with nice error messages.",
            "keywords": [
                "assert",
                "check",
                "validate"
            ],
            "support": {
                "issues": "https://github.com/webmozarts/assert/issues",
                "source": "https://github.com/webmozarts/assert/tree/1.10.0"
            },
            "time": "2021-03-09T10:59:23+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": "^7.4",
        "ext-intl": "*",
        "ext-json": "*",
        "ext-mbstring": "*"
    },
    "platform-dev": [],
    "plugin-api-version": "2.3.0"
}


================================================
File: docker-compose.yml
================================================
version: '3'
services:
  dev:
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
     - OAUTH_APP_NAME
     - OAUTH_APP_ID
     - OAUTH_APP_SECRET
     - OAUTH_ACCESS_TOKEN
     - OAUTH_REFRESH_TOKEN
     - TEST_SHAREPOINT_SITE



================================================
File: phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>


================================================
File: phpstan.neon
================================================
parameters:
    checkMissingIterableValueType: false
    checkGenericClassInNonGenericObjectType: false
    ignoreErrors:
        - '#Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface\|null#'


================================================
File: phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" backupGlobals="false" backupStaticAttributes="false" colors="true" convertErrorsToExceptions="true" convertNoticesToExceptions="true" convertWarningsToExceptions="true" processIsolation="false" stopOnFailure="false" bootstrap="tests/bootstrap.php" xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/9.3/phpunit.xsd">
  <coverage processUncoveredFiles="true">
    <include>
      <directory suffix=".php">.</directory>
    </include>
    <exclude>
      <directory suffix=".php">vendor</directory>
    </exclude>
  </coverage>
  <testsuite name="Main Test Suite">
    <directory>tests/phpunit</directory>
  </testsuite>
</phpunit>


================================================
File: .dockerignore
================================================
vendor
.git


================================================
File: .env.dist
================================================
OAUTH_APP_NAME=
OAUTH_APP_ID=
OAUTH_APP_SECRET=
OAUTH_ACCESS_TOKEN=
OAUTH_REFRESH_TOKEN=
TEST_SHAREPOINT_SITE=


================================================
File: docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT


================================================
File: docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1


================================================
File: src/Component.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor;

use ArrayObject;
use Keboola\OneDriveExtractor\Auth\TokenProviderFactory;
use UnexpectedValueException;
use Psr\Log\LoggerInterface;
use Keboola\OneDriveExtractor\Api\Api;
use Keboola\OneDriveExtractor\Api\ApiFactory;
use Keboola\Component\BaseComponent;
use Keboola\OneDriveExtractor\Configuration\Config;
use Keboola\OneDriveExtractor\Configuration\Actions\SearchConfigDefinition;
use Keboola\OneDriveExtractor\Configuration\Actions\GetWorksheetsConfigDefinition;
use Keboola\OneDriveExtractor\Configuration\ConfigDefinition;

class Component extends BaseComponent
{
    public const ACTION_RUN = 'run';
    public const ACTION_SEARCH = 'search';
    public const ACTION_GET_WORKSHEETS = 'getWorksheets';

    private ArrayObject $stateObject;

    private Api $api;

    private SheetProvider $sheetProvider;

    public function __construct(LoggerInterface $logger)
    {
        parent::__construct($logger);
        $config = $this->getConfig();
        $this->stateObject = new ArrayObject($this->getInputState());

        $tokenProviderFactory = new TokenProviderFactory($config, $this->stateObject);
        $tokenProvider = $tokenProviderFactory->create();
        $apiFactory = new ApiFactory($logger, $tokenProvider);
        $maxAttempts = $this->isSyncAction() ? 3 : Api::RETRY_MAX_TRIES;
        $this->api = $apiFactory->create($maxAttempts);
        $this->sheetProvider = new SheetProvider($this->api, $this->getConfig());
    }

    public function execute(): void
    {
        try {
            parent::execute();
        } finally {
            $this->writeOutputStateToFile($this->stateObject->getArrayCopy());
        }
    }

    public function getConfig(): Config
    {
        $config = parent::getConfig();
        assert($config instanceof Config);
        return $config;
    }

    protected function getSyncActions(): array
    {
        return [
            self::ACTION_SEARCH => 'handleSearchSyncAction',
            self::ACTION_GET_WORKSHEETS => 'handleGetWorksheetsSyncAction',
        ];
    }

    protected function run(): void
    {
        $sheet = $this->sheetProvider->getSheet();
        $this->createExtractor()->extract($sheet);
    }

    protected function handleSearchSyncAction(): array
    {
        return [
            'files' => iterator_to_array($this->api->searchWorkbooks($this->getConfig()->getSearch())),
        ];
    }

    protected function handleGetWorksheetsSyncAction(): array
    {
        $workbook = $this->sheetProvider->getFile();
        $worksheets = iterator_to_array($this->api->getWorksheets($workbook->getDriveId(), $workbook->getFileId()));
        return [
            'worksheets' => $worksheets,
        ];
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        $action = $this->getRawConfig()['action'] ?? 'run';
        switch ($action) {
            case self::ACTION_RUN:
                return ConfigDefinition::class;
            case self::ACTION_SEARCH:
                return SearchConfigDefinition::class;
            case self::ACTION_GET_WORKSHEETS:
                return GetWorksheetsConfigDefinition::class;
            default:
                throw new UnexpectedValueException(sprintf('Unexpected action "%s"', $action));
        }
    }

    private function createExtractor(): Extractor
    {
        $config = $this->getConfig();
        return new Extractor(
            $this->getLogger(),
            $this->getManifestManager(),
            $this->getConfig(),
            $this->api,
            $this->getDataDir(),
            $config->getWorksheetName(),
        );
    }
}


================================================
File: src/Extractor.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor;

use Keboola\OneDriveExtractor\Configuration\Config;
use Psr\Log\LoggerInterface;
use Keboola\Component\Manifest\ManifestManager;
use Keboola\Component\Manifest\ManifestManager\Options\OutTableManifestOptions;
use Keboola\Csv\CsvWriter;
use Keboola\OneDriveExtractor\Api\Api;
use Keboola\OneDriveExtractor\Exception\SheetEmptyException;

class Extractor
{
    private LoggerInterface $logger;

    private ManifestManager $manifestManager;

    private Config $config;

    private Api $api;

    private string $outputDir;

    private string $outputTable;

    public function __construct(
        LoggerInterface $logger,
        ManifestManager $manifestManager,
        Config $config,
        Api $api,
        string $dataDir,
        string $outputTable
    ) {
        $this->logger = $logger;
        $this->manifestManager = $manifestManager;
        $this->config = $config;
        $this->api = $api;
        $this->outputDir = $dataDir . '/out/tables';
        $this->outputTable = $outputTable;
    }

    public function extract(Sheet $sheet): void
    {
        try {
            $sessionId = $this->api->getWorkbookSessionId(
                $sheet->getDriveId(),
                $sheet->getFileId(),
            );

            $sheetContent = $this->api->getWorksheetContent(
                $sheet->getDriveId(),
                $sheet->getFileId(),
                $sheet->getWorksheetId(),
                $this->config->getRowsLimit(),
                $this->config->getCellPerBulk(),
                $sessionId,
            );
        } catch (SheetEmptyException $e) {
            $this->logger->warning('Sheet is empty. Nothing was exported.');
            return;
        }

        // Write rows
        $csvFile = "{$this->outputTable}.csv";
        $csvWriter = new CsvWriter("{$this->outputDir}/${csvFile}");
        foreach ($sheetContent->getRows() as $row) {
            $csvWriter->writeRow($row);
        }

        // Write manifest
        $options = new OutTableManifestOptions();
        $options->setColumns($sheetContent->getHeader()->getColumns());
        $this->manifestManager->writeTableManifest($csvFile, $options);
    }
}


================================================
File: src/Sheet.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor;

class Sheet
{
    private SheetFile $file;

    private string $worksheetId;

    public function __construct(SheetFile $file, string $worksheetId)
    {
        $this->file = $file;
        $this->worksheetId = $worksheetId;
    }

    public function getDriveId(): string
    {
        return $this->file->getDriveId();
    }

    public function getFileId(): string
    {
        return $this->file->getFileId();
    }

    public function getWorksheetId(): string
    {
        return $this->worksheetId;
    }
}


================================================
File: src/SheetFile.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor;

class SheetFile
{
    private string $driveId;

    private string $fileId;

    public function __construct(string $driveId, string $fileId)
    {
        $this->driveId = $driveId;
        $this->fileId = $fileId;
    }

    public function getDriveId(): string
    {
        return $this->driveId;
    }

    public function getFileId(): string
    {
        return $this->fileId;
    }
}


================================================
File: src/SheetProvider.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor;

use Keboola\OneDriveExtractor\Api\Api;
use Keboola\OneDriveExtractor\Api\Model\File;
use Keboola\OneDriveExtractor\Configuration\Config;
use Keboola\OneDriveExtractor\Exception\ResourceNotFoundException;

class SheetProvider
{
    private Api $api;

    private Config $config;

    public function __construct(Api $api, Config $config)
    {
        $this->api = $api;
        $this->config = $config;
    }

    public function getSheet(): Sheet
    {
        $config = $this->config;
        $workbook = $this->getFile();
        if ($config->hasWorksheetId()) {
            $worksheetId = $config->getWorksheetId();
        } else {
            $position = $this->config->getWorksheetPosition();
            $worksheetId = $this->getWorksheetIdByPosition($workbook->getDriveId(), $workbook->getFileId(), $position);
        }

        return new Sheet($workbook, $worksheetId);
    }

    public function getFile(): SheetFile
    {
        $config = $this->config;
        if ($config->hasDriveId() && $config->hasFileId()) {
            $driveId = $config->getDriveId();
            $fileId = $config->getFileId();
        } else {
            [$driveId, $fileId] = $this->searchForFile($config->getSearch());
        }

        return new SheetFile($driveId, $fileId);
    }

    private function searchForFile(string $search): array
    {
        /** @var File[] $files */
        $files = iterator_to_array($this->api->searchWorkbooks($search));
        $count = count($files);

        // Check number of results
        if ($count === 0) {
            throw new ResourceNotFoundException(sprintf('No file found when searching for "%s".', $search));
        } elseif ($count > 1) {
            $msg = 'Multiple files "%s" found when searching for "%s". Please use a more specific expression.';
            $fileNames = implode('", "', array_map(fn(File $file) => $file->getName(), $files));
            throw new ResourceNotFoundException(sprintf($msg, $fileNames, $search));
        }

        $file = $files[0];
        return [$file->getDriveId(), $file->getFileId()];
    }

    private function getWorksheetIdByPosition(string $driveId, string $fileId, int $position): string
    {
        return $this->api->getWorksheetId($driveId, $fileId, $position);
    }
}


================================================
File: src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\CommonExceptions\UserExceptionInterface;
use Keboola\Component\Logger;
use Keboola\OneDriveExtractor\Component;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
try {
    $app = new Component($logger);
    $app->execute();
    exit(0);
} catch (UserExceptionInterface $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (\Throwable $e) {
    $logger->critical(
        get_class($e) . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => is_object($e->getPrevious()) ? get_class($e->getPrevious()) : '',
        ]
    );
    exit(2);
}


================================================
File: src/Api/Api.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api;

use ArrayIterator;
use GuzzleHttp\Exception\RequestException;
use Iterator;
use Keboola\OneDriveExtractor\Api\Batch\BatchRequest;
use Keboola\OneDriveExtractor\Api\Model\Drive;
use Keboola\OneDriveExtractor\Api\Model\File;
use Keboola\OneDriveExtractor\Api\Model\SheetContent;
use Keboola\OneDriveExtractor\Api\Model\Site;
use Keboola\OneDriveExtractor\Api\Model\TableHeader;
use Keboola\OneDriveExtractor\Api\Model\TableRange;
use Keboola\OneDriveExtractor\Api\Model\Worksheet;
use Keboola\OneDriveExtractor\Exception\GatewayTimeoutException;
use Keboola\OneDriveExtractor\Exception\ResourceNotFoundException;
use Keboola\OneDriveExtractor\Exception\SheetEmptyException;
use Keboola\OneDriveExtractor\Exception\UnexpectedCountException;
use Keboola\OneDriveExtractor\Exception\UnexpectedValueException;
use Microsoft\Graph\Graph;
use Microsoft\Graph\Http\GraphResponse;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;
use Retry\BackOff\ExponentialBackOffPolicy;
use Retry\Policy\CallableRetryPolicy;
use Retry\RetryProxy;

class Api
{
    // API can work with max. 5M cells
    public const DEFAULT_CELLS_PER_BULK = 1_000_000;

    public const RETRY_MAX_TRIES = 14;

    public const RETRY_HTTP_CODES = [
        409, // 409 Conflict
        429, // 429 Too Many Requests
        500, // 500 Internal Serve Error
        502, // 502 Bad Gateway
        503, // 503 Service Unavailable
        504, // 504 Gateway Timeout
    ];

    private Graph $graphApi;

    private LoggerInterface $logger;

    private int $maxAttempts;

    public function __construct(Graph $graphApi, LoggerInterface $logger, int $maxAttempts)
    {
        $this->graphApi = $graphApi;
        $this->logger = $logger;
        $this->maxAttempts = $maxAttempts;
    }

    public function logger(): LoggerInterface
    {
        return $this->logger;
    }

    public function maxAttempts(): int
    {
        return $this->maxAttempts;
    }

    public function getWorkbookSessionId(string $driveId, string $fileId): ?string
    {
        $uri = '/drives/{driveId}/items/{fileId}/workbook/createSession';
        $response = $this->post(
            $uri,
            [
                'driveId' => $driveId,
                'fileId' => $fileId,
            ],
            [
                'persistChanges' => false,
            ],
            [
                'Prefer' => 'respond-async',
            ],
        );

        switch ($response->getStatus()) {
            case 201:
                return $response->getBody()['id'];
            case 202:
                $responseHeader = $response->getHeaders();

                $sessionLocation = current($responseHeader['Location']);

                $status = 'running';
                while ($status === 'running') {
                    sleep(2);
                    $session = $this->get($sessionLocation)->getBody();
                    $status = $session['status'];
                }

                if ($status !== 'succeeded') {
                    $this->logger->info('The workbook session could not be created.');
                    return null;
                }

                $sessionResource = $this->get($session['resourceLocation'])->getBody();

                return $sessionResource['id'];
            default:
                $this->logger->info('The workbook session could not be created.');
                return null;
        }
    }

    public function getAccountName(): string
    {
        $response = $this->get('/me?$select=userPrincipalName')->getBody();
        return (string) $response['userPrincipalName'];
    }

    public function getUsedRange(string $driveId, string $fileId, string $worksheetId, ?string $sessionId): TableRange
    {
        $endpoint = '/drives/{driveId}/items/{fileId}/workbook/worksheets/{worksheetId}';
        $uri = $endpoint . '/usedRange(valuesOnly=true)?$select=address';
        $headers = [];
        if ($sessionId) {
            $headers['Workbook-Session-Id'] = $sessionId;
        }
        $response = $this->get(
            $uri,
            ['driveId' => $driveId, 'fileId' => $fileId, 'worksheetId' => $worksheetId],
            $headers
        );
        $body = $response->getBody();

        // Parse range
        $address = $body['address'];
        return TableRange::from($address);
    }

    public function getWorksheetContent(
        string $driveId,
        string $fileId,
        string $worksheetId,
        ?int $rowsLimit = null,
        int $cellsPerBulk = self::DEFAULT_CELLS_PER_BULK,
        ?string $sessionId = null
    ): SheetContent {
        $usedRange = $this->getUsedRange($driveId, $fileId, $worksheetId, $sessionId);
        $header = $this->getWorksheetHeader($driveId, $fileId, $worksheetId, $sessionId);

        // Is empty?
        if (empty($header->getColumns())) {
            throw new SheetEmptyException('Spreadsheet is empty.');
        }

        // Skip header row
        $rowsRange = $usedRange->skipRows($header->getRowsCount());

        // We don't need to load more rows in one bulk than the limit.
        $cellsLimit = $rowsLimit && $rowsRange ? $rowsLimit * $rowsRange->getColumnsCount() : null;
        $cellsPerBulk = $cellsLimit && $cellsLimit < $cellsPerBulk ? $cellsLimit : $cellsPerBulk;

        // Log total rows count
        $this->logger->info(sprintf(
            'Number of rows in the sheet: %d header + %d',
            $header->getRowsCount(),
            $rowsRange ? $rowsRange->getRowsCount() : 0
        ));

        // Log limit
        if ($rowsLimit) {
            $this->logger->info(sprintf('Configured rows limit: %d', $rowsLimit));
        }

        $iterator = $rowsRange ?
            $this->getRowsForRange($driveId, $fileId, $worksheetId, $rowsRange, $rowsLimit, $cellsPerBulk, $sessionId) :
            new ArrayIterator([]);
        return new SheetContent($header, $usedRange, $iterator);
    }

    public function getWorksheetHeader(
        string $driveId,
        string $fileId,
        string $worksheetId,
        ?string $sessionId
    ): TableHeader {
        // Table header is first row in worksheet
        // Table can be shifted because we use "usedRange".
        $endpoint = '/drives/{driveId}/items/{fileId}/workbook/worksheets/{worksheetId}';
        $uri = $endpoint . '/usedRange(valuesOnly=true)/row(row=0)?$select=address,text';
        $headers = [];
        if ($sessionId) {
            $headers['Workbook-Session-Id'] = $sessionId;
        }
        $body = $this
            ->get($uri, ['driveId' => $driveId, 'fileId' => $fileId, 'worksheetId' => $worksheetId], $headers)
            ->getBody();
        $header = TableHeader::from($body['address'], $body['text'][0]);

        // Log
        $this->logger->info(sprintf(
            'Sheet header (%s:%s): %s',
            $header->getStartCell(),
            $header->getEndCell(),
            Helpers::formatIterable($header->getColumns()),
        ));

        return $header;
    }

    public function getWorksheetId(string $driveId, string $fileId, int $position): string
    {
        // Check position value, must be greater than zero
        if ($position < 0) {
            throw new UnexpectedValueException(sprintf(
                'Worksheet position must be greater than zero. Given "%d".',
                $position
            ));
        }

        // Load list of worksheets in workbook
        $uri = '/drives/{driveId}/items/{fileId}/workbook/worksheets?$select=id,name,position';
        $body = $this->get($uri, ['driveId' => $driveId, 'fileId' => $fileId])->getBody();

        // Search by position
        $worksheet = null;
        foreach ($body['value'] as $data) {
            if ($data['position'] === $position) {
                $worksheet = $data;
                break;
            }
        }

        // Log and return
        if ($worksheet) {
            $this->logger->info(sprintf(
                'Found worksheet "%s" at position "%s".',
                $worksheet['name'],
                $position
            ));
            return $worksheet['id'];
        }

        throw new ResourceNotFoundException(sprintf('No worksheet at position "%d".', $position));
    }

    /**
     * @return Iterator|Worksheet[]
     */
    public function getWorksheets(string $driveId, string $fileId): Iterator
    {
        $sessionId = $this->getWorkbookSessionId($driveId, $fileId);
        $headers = [];
        if ($sessionId) {
            $headers['Workbook-Session-Id'] = $sessionId;
        }

        // Load list of worksheets in workbook
        $uri = '/drives/{driveId}/items/{fileId}/workbook/worksheets?$select=id,position,name,visibility';
        $body = $this
            ->get($uri, ['driveId' => $driveId, 'fileId' => $fileId], $headers)
            ->getBody();

        // Map to object and load header in batch request
        $batch = $this->createBatchRequest();
        foreach ($body['value'] as $data) {
            $worksheet = Worksheet::from($data, $driveId, $fileId);
            $endpoint = '/drives/{driveId}/items/{fileId}/workbook/worksheets/{worksheetId}';
            $uri = $endpoint . '/usedRange(valuesOnly=true)/row(row=0)?$select=address,text';
            $args = ['driveId' => $driveId, 'fileId' => $fileId, 'worksheetId' => $worksheet->getWorksheetId()];
            $batch->addRequest($uri, $args, function (array $body) use ($worksheet) {
                if (isset($body['address'])) {
                    $header = TableHeader::from($body['address'], $body['text'][0]);
                    $worksheet->setHeader($header);
                    yield $worksheet;
                }
            });
        }

        // Load headers for worksheets in one request, sort by position
        $worksheets = iterator_to_array($batch->execute());
        usort($worksheets, fn(Worksheet $a, Worksheet $b) => $a->getPosition() - $b->getPosition());
        yield from $worksheets;
    }

    /**
     * @return Iterator|Drive[]
     */
    public function getSitesDrives(): Iterator
    {
        $batch = $this->createBatchRequest();
        $siteIdsChecked = [];

        foreach ($this->getSites() as $site) {
            // Split ID parts, eg. "keboolads.sharepoint.com,7df65f25-e443-4c7e-af...."
            $siteIdParts = explode(',', $site->getId());
            $siteId = urlencode($siteIdParts[0]);
            if (in_array($siteId, $siteIdsChecked)) {
                continue;
            }

            $batch->addRequest(
                '/sites/{siteId}/drives?$select=id,name',
                ['siteId' => $siteId],
                function (array $body) use ($site) {
                    foreach ($body['value'] as $data) {
                        yield Drive::from($data, $site);
                    }
                }
            );

            $siteIdsChecked[] = $siteId;
        }

        // Fetch all in one request
        return $batch->execute();
    }

    /**
     * @return Iterator|Site[]
     */
    public function getSites(): Iterator
    {
        $response = $this->get('/sites?search=&$select=id,name');
        assert($response instanceof GraphResponse);
        foreach ($response->getBody()['value'] as $data) {
            yield Site::from($data);
        }
    }

    public function getSite(string $name): Site
    {
        $response = $this->get('/sites?search={name}&$select=id,name', ['name' => $name]);
        $body = $response->getBody();
        $count = count($body['value']);
        if ($count === 1) {
            $siteData = $body['value'][0];
            return Site::from($siteData);
        } elseif ($count === 0) {
            throw new ResourceNotFoundException(sprintf('Site "%s" not found.', $name));
        } else {
            throw new UnexpectedCountException(sprintf('Multiple sites found when searching for "%s".', $name));
        }
    }

    /**
     * @return Iterator|File[]
     */
    public function searchWorkbooks(string $search = ''): Iterator
    {
        $this->logger = new NullLogger();
        $finder = new WorkbooksFinder($this, $this->logger);
        return $finder->search($search);
    }

    public function createBatchRequest(): BatchRequest
    {
        return new BatchRequest($this);
    }

    public function get(string $uri, array $params = [], array $headers = []): GraphResponse
    {
        return $this->executeWithRetry('GET', $uri, $params, [], $headers);
    }

    public function post(string $uri, array $params = [], array $body = [], array $headers = []): GraphResponse
    {
        return $this->executeWithRetry('POST', $uri, $params, $body, $headers);
    }

    public function createRetry(LoggerInterface $logger, int $maxAttempts = self::RETRY_MAX_TRIES): RetryProxy
    {
        $backOffPolicy = new ExponentialBackOffPolicy(1000);
        $retryPolicy = new CallableRetryPolicy(function (\Throwable $e) {
            // Always retry on gateway timeout
            if ($e instanceof GatewayTimeoutException) {
                return true;
            }

            if ($e instanceof RequestException) {
                // Retry only on defined HTTP codes
                if (in_array($e->getCode(), self::RETRY_HTTP_CODES, true)) {
                    return true;
                }

                // Retry if communication problems
                if (str_contains(
                    $e->getMessage(),
                    'There were communication or server problems',
                )) {
                    return true;
                }

                // Retry on possible transient session error
                if (str_contains(
                    $e->getMessage(),
                    'The session specified in the request does not exist or is invalid due to a transient error.',
                )) {
                    return true;
                }
            }

            return false;
        }, $maxAttempts);
        return new RetryProxy($retryPolicy, $backOffPolicy, $logger);
    }


    private function getRowsForRange(
        string $driveId,
        string $fileId,
        string $worksheetId,
        TableRange $range,
        ?int $rowsLimit,
        int $cellsPerBulk,
        ?string $sessionId
    ): Iterator {
        $rowsCount = 0;
        foreach ($range->split($cellsPerBulk, $rowsLimit) as $subRange) {
            $rowsForAddress = $this->getRowsForAddress(
                $driveId,
                $fileId,
                $worksheetId,
                $subRange->getAddress(),
                $sessionId
            );
            foreach ($rowsForAddress as &$row) {
                yield $row;
                $rowsCount++;
            };
        }

        $this->logger->info(sprintf('Exported all %d rows.', $rowsCount));
    }

    private function getRowsForAddress(
        string $driveId,
        string $fileId,
        string $worksheetId,
        string $address,
        ?string $sessionId
    ): ArrayIterator {
        $this->logger->info(sprintf('Exporting range "%s".', $address));
        $endpoint = '/drives/{driveId}/items/{fileId}/workbook/worksheets/{worksheetId}';
        $uri = $endpoint . '/range(address=\'{address}\')?$select=address,text';
        $headers = [];
        if ($sessionId) {
            $headers['Workbook-Session-Id'] = $sessionId;
        }
        $response = $this->get(
            $uri,
            [
                'driveId' => $driveId,
                'fileId' => $fileId,
                'worksheetId' => $worksheetId,
                'address' => $address,
            ],
            $headers
        );

        // Pagination is not supported by this endpoint
        /** @var string|null $nextLink */
        $nextLink = $response->getNextLink();
        if ($nextLink !== null) {
            throw new UnexpectedValueException('API response contains link to next page. It is not expected.');
        }

        $body = $response->getBody();
        return new ArrayIterator($body['text']);
    }

    private function executeWithRetry(
        string $method,
        string $uri,
        array $params = [],
        array $body = [],
        array $headers = []
    ): GraphResponse {
        return $this
            ->createRetry($this->logger, $this->maxAttempts)
            ->call(function () use ($method, $uri, $params, $body, $headers) {
                return $this->execute($method, $uri, $params, $body, $headers);
            });
    }

    private function execute(
        string $method,
        string $uri,
        array $params = [],
        array $body = [],
        array $headers = []
    ): GraphResponse {
        $uri = Helpers::replaceParamsInUri($uri, $params);
        $request = $this->graphApi->createRequest($method, $uri);
        if ($headers) {
            $request->addHeaders($headers);
        }
        if ($body) {
            $request->attachBody($body);
        }

        try {
            return $request->execute();
        } catch (RequestException $e) {
            # Log response of the failed API request
            $response = $e->getResponse();
            if ($response) {
                $body = $response->getBody();
                $body->rewind();
                $this->logger->error(sprintf(
                    'API request failed, uri: "%s", response: "%s".',
                    $e->getRequest()->getUri(),
                    $body->getContents(),
                ));
            }

            // Convert to user exception
            throw Helpers::processRequestException($e);
        }
    }
}


================================================
File: src/Api/ApiFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api;

use Psr\Log\LoggerInterface;
use Keboola\OneDriveExtractor\Auth\TokenProvider;

class ApiFactory
{
    private LoggerInterface $logger;

    private TokenProvider $tokenProvider;

    public function __construct(LoggerInterface $logger, TokenProvider $tokenProvider)
    {
        $this->logger = $logger;
        $this->tokenProvider = $tokenProvider;
    }

    public function create(int $maxAttempts = Api::RETRY_MAX_TRIES): Api
    {
        $graphApiFactory = new GraphApiFactory();
        $graphApi = $graphApiFactory->create($this->tokenProvider->get());
        return new Api($graphApi, $this->logger, $maxAttempts);
    }
}


================================================
File: src/Api/GraphApiFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api;

use League\OAuth2\Client\Token\AccessTokenInterface;
use Microsoft\Graph\Graph;

class GraphApiFactory
{
    public function create(AccessTokenInterface $token): Graph
    {
        $api = new Graph();
        $api->setAccessToken($token->getToken());
        return $api;
    }
}


================================================
File: src/Api/Helpers.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api;

use Keboola\OneDriveExtractor\Exception\AccessDeniedException;
use Keboola\OneDriveExtractor\Exception\BadRequestException;
use Keboola\OneDriveExtractor\Exception\BatchRequestException;
use Keboola\OneDriveExtractor\Exception\GatewayTimeoutException;
use Keboola\OneDriveExtractor\Exception\NotSupportedException;
use Normalizer;
use GuzzleHttp\Exception\RequestException;
use InvalidArgumentException;
use Keboola\Component\JsonHelper;
use Keboola\OneDriveExtractor\Exception\InvalidFileTypeException;
use Keboola\OneDriveExtractor\Exception\ResourceNotFoundException;
use Psr\Http\Message\MessageInterface;
use Throwable;

class Helpers
{
    public static function isFilePath(string $str): bool
    {
        // Relative or absolute path
        return preg_match('~^(/?[^/]+)?(/[^/]+)+$~ui', $str) === 1;
    }

    public static function isDriveFilePath(string $str): bool
    {
        try {
            self::explodeDriveFilePath($str);
            return true;
        } catch (InvalidArgumentException $e) {
            return false;
        }
    }

    public static function isSiteFilePath(string $str): bool
    {
        try {
            self::explodeSiteFilePath($str);
            return true;
        } catch (InvalidArgumentException $e) {
            return false;
        }
    }

    public static function isHttpsUrl(string $str): bool
    {
        return preg_match('~^https://~', $str) === 1;
    }

    public static function explodeDriveFilePath(string $str): array
    {
        preg_match('~^drive://([^/]+)/(.+)$~', $str, $m);
        if (!$m) {
            throw new InvalidArgumentException('Input not match regexp.');
        }
        $site = urldecode(rtrim($m[1], '/'));
        $path = $m[2];
        return [$site, $path];
    }

    public static function explodeSiteFilePath(string $str): array
    {
        preg_match('~^site://([^/]+)/(.+)$~', $str, $m);
        if (!$m) {
            throw new InvalidArgumentException('Input not match regexp.');
        }
        $site = urldecode(rtrim($m[1], '/'));
        $path = $m[2];
        return [$site, $path];
    }

    public static function processRequestException(Throwable $e): Throwable
    {
        $error = Helpers::getErrorFromRequestException($e);

        if ($error === 'AccessDenied: Could not obtain a WAC access token.') {
            $msg = 'It looks like the specified file is not in the "XLSX" Excel format. Error: "%s"';
            return new InvalidFileTypeException(sprintf($msg, $error), 0, $e);
        } elseif (($error && strpos($error, 'AccessDenied: Access denied') === 0)
            || in_array($e->getCode(), [401, 403])
        ) {
            return new AccessDeniedException($error ?? $e->getMessage(), $e->getCode(), $e);
        } elseif ($e->getCode() === 404 || ($error && strpos($error, 'ItemNotFound:') === 0)) {
            // BadRequest, eg. bad fileId, "-1, Microsoft.SharePoint.Client.ResourceNotFoundException"
            return new ResourceNotFoundException(
                'Not found error. Please check configuration. ' .
                'It can be caused by typo in an ID, or resource doesn\'t exists.',
                $e->getCode(),
                $e
            );
        } elseif ($error && strpos($error, 'BadRequest: ') === 0) {
            // eg. BadRequest: Tenant does not have a SPO license.
            return new BadRequestException($error, $e->getCode(), $e);
        } elseif ($e->getCode() === 400) {
            // BadRequest, eg. bad fileId, "-1, Microsoft.SharePoint.Client.InvalidClientQueryException"
            return new BadRequestException(
                'Bad request error. Please check configuration. ' .
                'It can be caused by typo in an ID, or resource doesn\'t exists.',
                $e->getCode(),
                $e
            );
        } elseif ($e->getCode() === 501) {
            $message = $error ?? $e->getMessage();
            return new NotSupportedException(
                'Operation not supported by API:' . $message,
                $e->getCode(),
                $e
            );
        } elseif ($e->getCode() === 504) {
            return new GatewayTimeoutException(
                'Gateway Timeout Error. The Microsoft OneDrive API has some problems. ' .
                'Please try again later.',
                $e->getCode(),
                $e
            );
        }

        return $e;
    }

    public static function getErrorFromRequestException(Throwable $exception): ?string
    {
        if ($exception instanceof RequestException) {
            /** @var null|MessageInterface $response */
            $response = $exception->getResponse();
            if ($response === null) {
                return null;
            }
            $stream = $response->getBody();
            $stream->rewind();
            $body = JsonHelper::decode($stream->getContents());
        } elseif ($exception instanceof BatchRequestException) {
            $body = $exception->getBody();
        } else {
            return null;
        }

        try {
            $error = $body['error'];
            return sprintf('%s: %s', ucfirst($error['code']), $error['message']);
        } catch (Throwable $jsonException) {
            return null;
        }
    }

    public static function replaceParamsInUri(string $uri, array $params): string
    {
        // Replace params
        foreach ($params as $key => $value) {
            $uri = str_replace("{{$key}}", urlencode((string) $value), $uri);
        }
        return $uri;
    }

    public static function convertPathToApiFormat(string $path): string
    {
        // API use special path format:
        // eg. root path: /me/drive/root/children ... output of this fn is "/"
        // eg. absolute path /me/drive/root:/path/to/folder:/children ... output of this fn is ":/path/to/folder:/"
        $path = trim($path, '/');
        $path = $path ? (":/{$path}:/") : '/';
        return $path;
    }

    public static function toAscii(string $str): string
    {
        $str = (string) Normalizer::normalize($str, Normalizer::FORM_D);
        $str = (string) preg_replace('~\pM~u', '', $str);
        $str = (string) preg_replace('~[^a-zA-Z0-9\-.]+~', '_', $str);
        $str = trim($str, '_');
        return $str;
    }

    public static function truncate(string $value, int $maxLength = 20): string
    {
        return mb_strlen($value) > $maxLength ? mb_substr($value, 0, $maxLength) . '...' : $value;
    }

    public static function formatIterable(iterable $values, int $maxItems = 20, int $strLength = 30): string
    {
        $out = '';
        $i = 0;
        foreach ($values as $value) {
            // Append '...' if there are more items
            if ($i >= $maxItems) {
                $out .= ', ...';
                break;
            }

            // Truncate item length
            $value = self::truncate($value, $strLength);

            $out .= $i === 0 ? "\"{$value}\"" : ", \"{$value}\"";
            $i++;
        }

        return $out;
    }

    /**
     * Convert Excel column name to it int position.
     * See https://stackoverflow.com/questions/848147
     * Eg. A => 1, B => 2, AA => 27, ...
     */
    public static function columnStrToInt(string $columnName): int
    {
        if ($columnName === '') {
            throw new InvalidArgumentException('Column name cannot be empty.');
        }

        $columnName = strtoupper($columnName);
        $columnNumber = 0;
        $pow = 1;
        foreach (array_reverse(str_split($columnName)) as $letter) {
            if (!preg_match('~^[A-Z]$~', $letter)) {
                throw new InvalidArgumentException(sprintf('Unexpected letter, expected A-Z, given: "%s"', $letter));
            }
            $columnNumber += (ord($letter) - 65 + 1) * $pow;
            $pow *= 26;
        }

        return $columnNumber;
    }
}


================================================
File: src/Api/WorkbooksFinder.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api;

use GuzzleHttp\Exception\ServerException;
use Keboola\OneDriveExtractor\Exception\AccessDeniedException;
use Keboola\OneDriveExtractor\Exception\BatchRequestException;
use Throwable;
use Iterator;
use GuzzleHttp\Exception\RequestException;
use Keboola\OneDriveExtractor\Api\Model\File;
use Keboola\OneDriveExtractor\Exception\InvalidFileTypeException;
use Keboola\OneDriveExtractor\Exception\ResourceNotFoundException;
use Keboola\OneDriveExtractor\Exception\ShareLinkException;
use Psr\Log\LoggerInterface;

class WorkbooksFinder
{
    public const ALLOWED_MIME_TYPES = [
        # Only XLSX files can by accessed through API
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    ];

    private Api $api;

    private LoggerInterface $logger;

    public function __construct(Api $api, LoggerInterface $logger)
    {
        $this->api = $api;
        $this->logger = $logger;
    }

    /**
     * @return Iterator|File[]
     */
    public function search(string $search): Iterator
    {
        try {
            switch (true) {
                // Drive path, eg. "/path/to/file.xlsx"
                case Helpers::isFilePath($search):
                    $this->log('Searching for "%s" in personal OneDrive.', $search);
                    yield from $this->searchByPathInMeDrive($search);
                    break;

                // Site path, eg. "drive://1234driveId6789/path/to/file.xlsx"
                case Helpers::isDriveFilePath($search):
                    [$driveId, $path] = Helpers::explodeDriveFilePath($search);
                    $this->log(
                        'Searching for "%s" in drive "%s".',
                        $path,
                        Helpers::truncate($driveId, 15)
                    );
                    yield from $this->searchByPathInDrive('/drives/' . urlencode($driveId), $path, []);
                    break;

                // Site path, eg. "site://Excel Sheets/path/to/file.xlsx"
                case Helpers::isSiteFilePath($search):
                    [$siteName, $path] = Helpers::explodeSiteFilePath($search);
                    $this->log('Searching for "%s" in site "%s".', $path, $siteName);
                    yield from $this->searchByPathInSite($siteName, $path);
                    break;

                // Https url, eg: "https://keboolads.sharepoint.com/..."
                case Helpers::isHttpsUrl($search):
                    $this->log('Searching by link "%s".', Helpers::truncate($search, 20));
                    yield from $this->searchByUrl($search);
                    break;

                // Search for file by text in all locations
                default:
                    $this->log('Searching for "%s" in all locations.', $search);
                    yield from $this->searchByText($search);
                    break;
            }
        } catch (ResourceNotFoundException $e) {
            yield from  [];
        }
    }

    /**
     * @return Iterator|File[]
     */
    private function searchByPathInMeDrive(string $path): Iterator
    {
        return $this->searchByPathInDrive('/me/drive', $path, ['my']);
    }

    /**
     * @return Iterator|File[]
     */
    private function searchByPathInSite(string $siteName, string $path): Iterator
    {
        $site = $this->api->getSite($siteName);
        $prefix = '/sites/' . urlencode($site->getId()) .  '/drive';
        return $this->searchByPathInDrive($prefix, $path, ['sites', $siteName]);
    }

    /**
     * @return Iterator|File[]
     */
    private function searchByPathInDrive(string $drivePrefix, string $path, array $pathPrefix): Iterator
    {
        $path = Helpers::convertPathToApiFormat($path);
        $url = "{$drivePrefix}/root{$path}?\$select=id,name,parentReference,file";
        $body = $this->api->get($url)->getBody();

        // Check mime type
        self::checkFileMimeType($body);

        // Convert to object
        yield File::from($body, $pathPrefix);
    }

    /**
     * @return Iterator|File[]
     */
    private function searchByUrl(string $url): Iterator
    {
        // See: https://docs.microsoft.com/en-ca/onedrive/developer/rest-api/api/shares_get#encoding-sharing-urls
        $encode = base64_encode($url);
        $sharingUrl = 'u!' . str_replace('+', '-', str_replace('/', '_', rtrim($encode, '=')));

        // Get URL info and extract driveId, fileId
        try {
            $body = $this->api->get(sprintf('/shares/%s/driveItem', $sharingUrl))->getBody();
        } catch (RequestException|AccessDeniedException $e) {
            $error = Helpers::getErrorFromRequestException($e) ?? $e->getMessage();
            switch (true) {
                // Not exists
                case $error && strpos($error, 'AccessDenied: The sharing link no longer exists') === 0:
                    throw new ShareLinkException(sprintf(
                        'The sharing link "%s..." no exists, or you do not have permission to access it.',
                        substr($url, 0, 32)
                    ), 0, $e);

                // Access denied
                case $error && strpos($error, 'AccessDenied:') === 0:
                    throw new ShareLinkException(sprintf(
                        'The sharing link "%s..." no exists, or you do not have permission to access it.',
                        substr($url, 0, 32)
                    ), 0, $e);

                // Invalid link
                case $error === 'InvalidRequest: The sharing token is invalid.':
                    throw new ShareLinkException(sprintf(
                        'The sharing link "%s..." is invalid.',
                        substr($url, 0, 32)
                    ), 0, $e);

                default:
                    throw $e;
            }
        }

        // Check mime type
        self::checkFileMimeType($body);

        // Convert to object
        yield File::from($body, []);
    }

    /**
     * @return Iterator|File[]
     */
    private function searchByText(string $search = ''): Iterator
    {
        // Normalize searched string
        $search = preg_replace('~\.xlsx$~i', '', trim($search));
        assert(is_string($search));

        // Common args
        $select = 'id,name,file,parentReference';
        $limitPerRequest = 50;
        $args = ['search' => $search, 'select' => $select, 'limit' => $limitPerRequest];

        // See: https://docs.microsoft.com/en-us/graph/api/driveitem-search
        $batch = $this->api->createBatchRequest();

        // Find files in personal OneDrive
        $uriTemplate = "/me/drive/root/search(q='{search}')?\$select={select}&\$top={limit}";
        $batch->addRequest(
            $uriTemplate,
            $args,
            $this->getMapToFileCallback(['my'], $search),
            $this->getExceptionProcessor('me drive', $search)
        );

        // Add files shared with me
        $uriTemplate = '/me/drive/sharedWithMe?$select={select}&$top={limit}';
        $batch->addRequest(
            $uriTemplate,
            $args,
            $this->getMapToFileCallback(['shared'], $search),
            $this->getExceptionProcessor('shared files', $search)
        );

        // Find files in sites
        try {
            foreach ($this->api->getSitesDrives() as $drive) {
                $uriTemplate = "/drives/{driveId}/search(q='{search}')?\$top={limit}";
                $batch->addRequest(
                    $uriTemplate,
                    array_merge($args, ['driveId' => $drive->getId()]),
                    $this->getMapToFileCallback($drive->getPath(), $search),
                    $this->getExceptionProcessor(
                        sprintf('SharePoint site "%s"', $drive->getSite()->getName()),
                        $search
                    )
                );
            }
        } catch (ServerException $exception) {
            // 'Error when searching for sites: ' . $exception->getMessage());
        }

        // Fetch all in one request
        return $batch->execute();
    }

    private function getMapToFileCallback(array $path, string $search): callable
    {
        return function (array $body) use ($path, $search): Iterator {
            foreach ($body['value'] as $file) {
                $mimeType = $file['file']['mimeType'] ?? null;

                // Skip if not sheet
                if (!in_array($mimeType, self::ALLOWED_MIME_TYPES, true)) {
                    continue;
                }

                // Skip if file name doesn't contains searched string
                if ($search && strpos($file['name'], $search) === false) {
                    continue;
                }

                // Skip if missing driveId
                if (!isset($file['parentReference']['driveId'])) {
                    continue;
                }

                yield File::from($file, $path);
            }
        };
    }

    private function getExceptionProcessor(string $target, string $search): callable
    {
        return function (Throwable $e) use ($target, $search): void {
            $e = Helpers::processRequestException($e);
            if ($e instanceof BatchRequestException) {
                $this->logger->warning(sprintf(
                    'Error when searching for "%s" in %s: "%s" (%d).',
                    $search,
                    $target,
                    $e->getOriginalMessage(),
                    $e->getCode(),
                ));
                return;
            }

            throw $e;
        };
    }

    /**
     * @param mixed ...$args args for sprintf
     */
    private function log(...$args): void
    {
        $this->logger->info(sprintf(...$args));
    }

    private static function checkFileMimeType(array $body): void
    {
        if (!isset($body['file'])) {
            throw new InvalidFileTypeException('File type cannot be recognized.');
        }
        $mimeType = $body['file']['mimeType'];
        if (!in_array($mimeType, self::ALLOWED_MIME_TYPES, true)) {
            throw new InvalidFileTypeException(sprintf(
                'File is not in the "XLSX" Excel format. Mime type: "%s"',
                $mimeType
            ));
        }
    }
}


================================================
File: src/Api/Batch/BatchRequest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api\Batch;

use Keboola\OneDriveExtractor\Api\Helpers;
use Throwable;
use Iterator;
use NoRewindIterator;
use ArrayIterator;
use LimitIterator;
use InvalidArgumentException;
use Keboola\OneDriveExtractor\Api\Api;
use Keboola\OneDriveExtractor\Exception\BatchRequestException;
use Microsoft\Graph\Http\GraphResponse;

/**
 * Microsoft Graph API allows combine requests to batch, and run them as single request.
 * See: https://docs.microsoft.com/en-us/graph/json-batching
 */
class BatchRequest
{
    // https://docs.microsoft.com/en-us/graph/known-issues#limit-on-batch-size
    public const MAX_REQUESTS_PER_BATCH = 20;

    private Api $api;

    private ?int $limit;

    private int $idCounter = 1;

    private int $processedCount;

    /** @var array|Request[] */
    private array $requests = [];

    public function __construct(Api $api, ?int $limit = null)
    {
        $this->api = $api;
        $this->limit = $limit;
    }

    public function addRequest(
        string $uriTemplate,
        array $uriArgs = [],
        ?callable $responseMapper = null,
        ?callable $exceptionProcessor = null,
        string $method = 'GET'
    ): self {
        $id = (string) $this->idCounter++;
        $this->requests[$id] = new Request($id, $uriTemplate, $uriArgs, $responseMapper, $exceptionProcessor, $method);
        return $this;
    }

    public function execute(): Iterator
    {
        // Empty batch request cannot be executed, ... if empty => empty iterator is returned
        if ($this->requests) {
            $this->processedCount = 0;
            $retryProxy = $this->api->createRetry($this->api->logger(), $this->api->maxAttempts());
            yield from $retryProxy->call(function (): iterator {
                try {
                    foreach ($this->runBatchRequest() as $response) {
                        do {
                            yield from $this->processBatchResponse($response);
                            $response = $this->getNextPage($response);
                        } while ($response !== null);
                    }
                } catch (BatchRequestException $e) {
                    Helpers::processRequestException($e);
                }
            });
        }
    }

    private function getNextPage(GraphResponse $response): ?GraphResponse
    {
        // See: https://docs.microsoft.com/en-us/graph/paging
        /** @var string|null $nextLink */
        $nextLink = $response->getNextLink();
        if ($nextLink === null) {
            return null;
        }

        return $this->api->get($nextLink);
    }

    /**
     * @return GraphResponse[]
     */
    private function runBatchRequest(): array
    {
        /** @var GraphResponse[] $responses */
        $responses = [];

        $all = new NoRewindIterator(new ArrayIterator($this->requests));
        while ($all->valid()) {
            $batch = new LimitIterator($all, 0, self::MAX_REQUESTS_PER_BATCH);
            $requests = array_map(fn(Request $request) => $request->toArray(), array_values(iterator_to_array($batch)));
            $responses[] = $this->api->post('/$batch', [], [ 'requests' => $requests]);
        }

        return $responses;
    }

    private function processBatchResponse(GraphResponse $batchResponse): Iterator
    {
        $responses = $batchResponse->getBody()['responses'];
        assert(is_array($responses));

        foreach ($responses as $response) {
            $id = (string) $response['id'];
            $status = (int) $response['status'];
            $body = $response['body'] ?? [];
            $request = $this->getRequestById($id);

            try {
                yield from $this->processResponse($request, $status, $body);
            } catch (Throwable $e) {
                if ($request->hasExceptionProcessor()) {
                    $request->getExceptionProcessor()($e);
                    continue;
                }

                throw $e;
            }
        }
    }

    private function processResponse(Request $request, int $status, array $body): Iterator
    {
        // Request from batch failed, status != 2xx
        if ($status < 200 || $status >= 300) {
            throw new BatchRequestException(sprintf(
                'Unexpected status "%d" for request "%s": %s, %s',
                $status,
                $request->getUri(),
                $body['error']['code'] ?? '',
                $body['error']['message'] ?? '',
            ), $body['error']['message'], $body, $status);
        }

        // Map response body (eg. to files)
        /** @var iterable $values */
        $values = $request->hasResponseMapper() ? $request->getResponseMapper()($body) : [$body];
        foreach ($values as $key => $value) {
            // End if over limit (eg. last page has 10 items, but we need only 4)
            if ($this->limit && $this->processedCount >= $this->limit) {
                break;
            }

            // It is needed to specify key, otherwise it would be overwritten
            // ... because method is called multiple times, and without specifications are keys: 0, 1, 2 ...
            yield $this->processedCount => $value;

            // Increase processed
            $this->processedCount++;
        }
    }

    private function getRequestById(string $id): Request
    {
        if (!isset($this->requests[$id])) {
            throw new InvalidArgumentException(sprintf('Request with id "%s" not found.', $id));
        }

        return $this->requests[$id];
    }
}


================================================
File: src/Api/Batch/Request.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api\Batch;

use Keboola\OneDriveExtractor\Api\Helpers;
use Keboola\OneDriveExtractor\Exception\PropertyNotSetException;

class Request
{
    private string $id;

    private string $uri;

    private string $method;

    /** @var callable|null */
    private $responseMapper;

    /** @var callable|null */
    private $exceptionProcessor;

    public function __construct(
        string $id,
        string $uri,
        array $uriArgs,
        ?callable $responseMapper = null,
        ?callable $exceptionProcessor = null,
        string $method = 'GET'
    ) {
        $this->id = $id;
        $this->uri = Helpers::replaceParamsInUri($uri, $uriArgs);
        $this->responseMapper = $responseMapper;
        $this->exceptionProcessor = $exceptionProcessor;
        $this->method = $method;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getUri(): string
    {
        return $this->uri;
    }

    public function getMethod(): string
    {
        return $this->method;
    }

    public function hasResponseMapper(): bool
    {
        return $this->responseMapper !== null;
    }

    public function getResponseMapper(): callable
    {
        if (!$this->responseMapper) {
            throw new PropertyNotSetException('Response mapper is not set.');
        }
        return $this->responseMapper;
    }

    public function hasExceptionProcessor(): bool
    {
        return $this->exceptionProcessor !== null;
    }

    public function getExceptionProcessor(): callable
    {
        if (!$this->exceptionProcessor) {
            throw new PropertyNotSetException('Exception processor is not set.');
        }
        return $this->exceptionProcessor;
    }

    public function toArray(): array
    {
        return [
            'id' => $this->id,
            'method' => $this->method,
            'url' => $this->uri,
        ];
    }
}


================================================
File: src/Api/Model/Drive.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api\Model;

use InvalidArgumentException;

class Drive
{
    private Site $site;

    private string $id;

    private array $path;

    public static function from(array $data, Site $site): self
    {
        $path = ['sites', $site->getName(), $data['name']];
        return new self($site, $data['id'], $path);
    }

    public function __construct(Site $site, string $id, array $path)
    {
        if ($id === '') {
            throw new InvalidArgumentException('Drive id cannot be empty.');
        }
        $this->site = $site;
        $this->id = $id;
        $this->path = $path;
    }

    public function getSite(): Site
    {
        return $this->site;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getPath(): array
    {
        return $this->path;
    }
}


================================================
File: src/Api/Model/File.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api\Model;

use InvalidArgumentException;

class File implements \JsonSerializable
{
    private string $fileId;

    private string $driveId;

    private string $name;

    private array $path;

    public static function from(array $data, array $path = []): self
    {
        $fileId = $data['id'];
        $driveId = $data['parentReference']['driveId'];

        // In response can be defined folder path, eg. /drive/root:/__ex-onedrive-test-folder/valid
        $filePath = $data['parentReference']['path'] ?? null;
        if ($filePath && strpos($filePath, 'root:/') !== false) {
            $parts = explode('root:/', $filePath, 2);
            $path = array_merge($path, explode('/', $parts[1]));
        }

        return new self($fileId, $driveId, $data['name'], $path);
    }

    public function __construct(string $fileId, string $driveId, string $name, array $pathParts)
    {
        if (strlen($fileId) === 0) {
            throw new InvalidArgumentException('File id cannot be empty.');
        }
        if (strlen($driveId) === 0) {
            throw new InvalidArgumentException('Drive id cannot be empty.');
        }
        if (strlen($name) === 0) {
            throw new InvalidArgumentException('File name cannot be empty.');
        }

        $this->fileId = $fileId;
        $this->driveId = $driveId;
        $this->name = $name;
        $this->path = $pathParts;
    }

    public function getFileId(): string
    {
        return $this->fileId;
    }

    public function getDriveId(): string
    {
        return $this->driveId;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getPath(): array
    {
        return $this->path;
    }

    public function jsonSerialize(): array
    {
        return [
            'driveId' => $this->driveId,
            'fileId' => $this->fileId,
            'name' => $this->name,
            'path' => $this->path ? implode('/', $this->path) : null,
        ];
    }
}


================================================
File: src/Api/Model/SheetContent.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api\Model;

use Iterator;

class SheetContent
{
    private TableHeader $header;

    private TableRange $range;

    private Iterator $rows;

    public function __construct(TableHeader $header, TableRange $range, Iterator $rows)
    {
        $this->header = $header;
        $this->range = $range;
        $this->rows = $rows;
    }

    public function getHeader(): TableHeader
    {
        return $this->header;
    }

    public function getRows(): Iterator
    {
        return $this->rows;
    }

    public function getRange(): TableRange
    {
        return $this->range;
    }

    public function getAddress(): string
    {
        return $this->range->getAddress();
    }
}


================================================
File: src/Api/Model/Site.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api\Model;

use InvalidArgumentException;

class Site
{
    private string $id;

    private string $name;

    public static function from(array $data): self
    {
        return new self($data['id'], $data['name']);
    }

    public function __construct(string $id, string $name)
    {
        if (strlen($id) === 0) {
            throw new InvalidArgumentException('Site id cannot be empty.');
        }
        if (strlen($name) === 0) {
            throw new InvalidArgumentException('Site name cannot be empty.');
        }
        $this->id = $id;
        $this->name = $name;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getName(): string
    {
        return $this->name;
    }
}


================================================
File: src/Api/Model/TableHeader.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api\Model;

use Keboola\OneDriveExtractor\Api\Helpers;

class TableHeader extends TableRange implements \JsonSerializable
{
    private array $columns;

    public static function from(string $address, ?array $cells = null): self
    {
        [$start, $end, $firstRowNumber] = self::parseStartEnd($address);

        // For empty sheet API returns empty first cell, ignore it
        $cells = $cells ?? [];
        $empty = count($cells) <= 1 && ($cells[0] ?? '') === '';
        $columns = self::parseColumns($empty ? [] : $cells);

        // Intentionally 2x firstRowNumber, because header range, not whole table
        return new self($start, $end, $firstRowNumber, $firstRowNumber, $columns);
    }

    public static function parseColumns(array $columns): array
    {
        $output = [];
        foreach ($columns as $index => $colName) {
            // Normalize column name, fix empty value
            $colName = Helpers::toAscii((string) $colName);
            $colName = empty($colName) ? 'column-' . ($index + 1) : $colName;

            // Prevent duplicates
            $i = 1;
            $orgColName = $colName;
            while (in_array($colName, $output, true)) {
                $colName = $orgColName . '-' . $i++;
            }

            // Store
            $output[] = $colName;
        }
        return $output;
    }

    public function __construct(string $start, string $end, int $firstRowNumber, int $lastRowNumber, array $columns)
    {
        parent::__construct($start, $end, $firstRowNumber, $lastRowNumber);
        $this->columns = $columns;
    }

    public function getColumns(): array
    {
        return $this->columns;
    }

    public function jsonSerialize(): array
    {
        return $this->columns;
    }
}


================================================
File: src/Api/Model/TableRange.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api\Model;

use Iterator;
use InvalidArgumentException;
use Keboola\OneDriveExtractor\Api\Helpers;
use Keboola\OneDriveExtractor\Exception\UnexpectedValueException;

class TableRange
{
    private string $start;

    private string $end;

    private int $firstRowNumber;

    private int $lastRowNumber;

    public static function from(string $address): self
    {
        [$start, $end, $firstRowNumber, $lastRowNumber] = self::parseStartEnd($address);
        return new self($start, $end, $firstRowNumber, $lastRowNumber);
    }

    public static function parseStartEnd(string $address): array
    {
        // Eg. address = Sheet1!B123:I456 => start=B, end=I, row=123-456
        // ... or eg. A1 if empty file
        preg_match('~!?([A-Z]+)([0-9]+)?(?::([A-Z]+)([0-9]+)?)?$~', $address, $m);
        if (empty($m)) {
            throw new InvalidArgumentException(sprintf('Unexpected input: "%s"', $address));
        }

        $start = $m[1];
        $firstRowNumber = (int) $m[2];
        $end = $m[3] ?? $start;
        $lastRowNumber = (int) ($m[4] ?? $m[2]);

        return [$start, $end, $firstRowNumber, $lastRowNumber];
    }

    public function __construct(string $start, string $end, int $firstRowNumber, int $lastRowNumber)
    {
        $this->start = $start;
        $this->end = $end;
        $this->firstRowNumber = $firstRowNumber;
        $this->lastRowNumber = $lastRowNumber;
    }

    public function skipRows(int $skip): ?self
    {
        $firstRow = $this->firstRowNumber + $skip;
        $lastRow = $this->lastRowNumber;
        if ($firstRow > $lastRow) {
            // No rows
            return null;
        }

        return new self($this->start, $this->end, $firstRow, $lastRow);
    }

    public function getStart(): string
    {
        return $this->start;
    }

    public function getStartCell(): string
    {
        return $this->start . $this->firstRowNumber;
    }

    public function getEnd(): string
    {
        return $this->end;
    }

    public function getEndCell(): string
    {
        return $this->end . $this->lastRowNumber;
    }

    public function getAddress(): string
    {
        return $this->getStartCell() . ':' . $this->getEndCell();
    }

    public function getFirstRowNumber(): int
    {
        return $this->firstRowNumber;
    }

    public function getLastRowNumber(): int
    {
        return $this->lastRowNumber;
    }

    public function getColumnsCount(): int
    {
        return Helpers::columnStrToInt($this->getEnd()) - Helpers::columnStrToInt($this->getStart()) + 1;
    }

    public function getRowsCount(): int
    {
        return $this->getLastRowNumber() - $this->getFirstRowNumber() + 1;
    }

    /**
     * @return Iterator|self[]
     */
    public function split(int $cellsPerBulk, ?int $limitRows): Iterator
    {
        $rowsPerBulk = (int) floor($cellsPerBulk / $this->getColumnsCount()) ?: 1;
        $bulkIndex = 0;
        $endRow = min(
            $limitRows ? $this->firstRowNumber + $limitRows - 1 : $this->lastRowNumber,
            $this->lastRowNumber
        );

        while (true) {
            $rangeStartRow = $this->firstRowNumber + ($bulkIndex * $rowsPerBulk);
            $rangeEndRow = $rangeStartRow + $rowsPerBulk -1;

            // Last bulk?
            if ($rangeEndRow > $endRow) {
                $rangeEndRow = $endRow;
            }

            // All done?
            if ($rangeStartRow > $endRow) {
                return;
            }

            // Yield range address
            yield TableRange::from($this->start . $rangeStartRow . ':' . $this->end . $rangeEndRow);
            $bulkIndex++;
        }
    }
}


================================================
File: src/Api/Model/Worksheet.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Api\Model;

use InvalidArgumentException;

class Worksheet implements \JsonSerializable
{
    private string $driveId;

    private string $fileId;

    private string $worksheetId;

    private int $position; // 0,1,2 ...

    private string $name;

    private bool $visible;

    private ?TableHeader $header;

    public static function from(array $data, string $driveId, string $fileId): self
    {
        $worksheetId = $data['id'];
        $position = $data['position'];
        $name = $data['name'];
        $visible = strtolower($data['visibility']) === 'visible';
        return new self($driveId, $fileId, $worksheetId, $position, $name, $visible);
    }

    public function __construct(
        string $driveId,
        string $fileId,
        string $worksheetId,
        int $position,
        string $name,
        bool $visible,
        ?TableHeader $header = null
    ) {
        if (strlen($fileId) === 0) {
            throw new InvalidArgumentException('File id cannot be empty.');
        }
        if (strlen($driveId) === 0) {
            throw new InvalidArgumentException('Drive id cannot be empty.');
        }
        if (strlen($worksheetId) === 0) {
            throw new InvalidArgumentException('Worksheet id cannot be empty.');
        }
        if (strlen($name) === 0) {
            throw new InvalidArgumentException('Worksheet name cannot be empty.');
        }

        $this->driveId = $driveId;
        $this->fileId = $fileId;
        $this->worksheetId = $worksheetId;
        $this->position = $position;
        $this->name = $name;
        $this->visible = $visible;
        $this->header = $header;
    }

    public function getDriveId(): string
    {
        return $this->driveId;
    }

    public function getFileId(): string
    {
        return $this->fileId;
    }

    public function getWorksheetId(): string
    {
        return $this->worksheetId;
    }

    public function getPosition(): int
    {
        return $this->position;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getTitle(): string
    {
        return "{$this->name}" . ($this->visible ? '' : ' (hidden)');
    }

    public function getHeader(): ?TableHeader
    {
        return $this->header;
    }

    public function setHeader(TableHeader $header): self
    {
        $this->header = $header;
        return $this;
    }

    public function getVisible(): bool
    {
        return $this->visible;
    }

    public function toArray(): array
    {
        return [
            'position' => $this->position,
            'name' => $this->name,
            'title' => $this->getTitle(),
            'driveId' => $this->driveId,
            'fileId' => $this->fileId,
            'worksheetId' => $this->worksheetId,
            'visible' => $this->visible,
            'header' => $this->header,
        ];
    }

    public function jsonSerialize(): array
    {
        return $this->toArray();
    }
}


================================================
File: src/Auth/RefreshTokenProvider.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Auth;

use Keboola\OneDriveExtractor\Exception\AccessTokenRefreshException;
use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
use League\OAuth2\Client\Provider\GenericProvider;
use League\OAuth2\Client\Token\AccessTokenInterface;

class RefreshTokenProvider implements TokenProvider
{
    private const AUTHORITY_URL = 'https://login.microsoftonline.com/common';
    private const AUTHORIZE_ENDPOINT = '/oauth2/v2.0/authorize';
    private const TOKEN_ENDPOINT = '/oauth2/v2.0/token';
    private const SCOPES = ['offline_access', 'User.Read', 'Files.Read.All', 'Sites.Read.All'];

    private string $appId;

    private string $appSecret;

    private TokenDataManager $dataManager;

    public function __construct(string $appId, string $appSecret, TokenDataManager $dataManager)
    {
        $this->appId = $appId;
        $this->appSecret = $appSecret;
        $this->dataManager = $dataManager;
    }

    public function get(): AccessTokenInterface
    {
        $provider = $this->createOAuthProvider($this->appId, $this->appSecret);
        $tokens = $this->dataManager->load();

        // It is needed to always refresh token, because original token expires after 1 hour
        $newToken = null;
        $exception = null;

        // Try token from stored state, and from the configuration.
        foreach ($tokens as $token) {
            try {
                $newToken = $provider->getAccessToken(
                    'refresh_token',
                    ['refresh_token' => $token->getRefreshToken()]
                );
                break;
            } catch (IdentityProviderException $exception) {
                // try next token
            }
        }

        if (!$newToken) {
            throw new AccessTokenRefreshException(
                'Microsoft OAuth API token refresh failed, ' .
                'please reset authorization in the extractor configuration.',
                0,
                $exception
            );
        }

        $this->dataManager->store($newToken);
        return $newToken;
    }

    private function createOAuthProvider(string $appId, string $appSecret): GenericProvider
    {
        return new GenericProvider([
            'clientId' => $appId,
            'clientSecret' => $appSecret,
            'urlAuthorize' => self::AUTHORITY_URL . self::AUTHORIZE_ENDPOINT,
            'urlAccessToken' => self::AUTHORITY_URL . self::TOKEN_ENDPOINT,
            'urlResourceOwnerDetails' => '',
            'scopes' => implode(' ', self::SCOPES),
        ]);
    }
}


================================================
File: src/Auth/TokenDataManager.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Auth;

use ArrayObject;
use Keboola\Component\JsonHelper;
use Keboola\OneDriveExtractor\Exception\AccessTokenInitException;
use League\OAuth2\Client\Token\AccessToken;
use League\OAuth2\Client\Token\AccessTokenInterface;

class TokenDataManager
{
    public const STATE_AUTH_DATA_KEY = '#refreshed_auth_data'; // # -> must be encrypted!

    private array $configAuthData;

    private ArrayObject $state;

    public function __construct(array $configAuthData, ArrayObject $state)
    {
        $this->configAuthData = $configAuthData;
        $this->state = $state;

        // Check required keys
        $missingKeys = array_diff(['access_token', 'refresh_token'], array_keys($this->configAuthData));
        if ($missingKeys) {
            throw new AccessTokenInitException(
                sprintf('Missing key "%s" in OAuth data array.', implode('", "', $missingKeys))
            );
        }
    }

    public function load(): iterable
    {
        // Use OAuth from the configuration
        yield new AccessToken($this->configAuthData);

        // Or load tokens from state.json, if OAuth from the configuration is expired
        $authDataJson = $this->state[self::STATE_AUTH_DATA_KEY] ?? null;
        if (is_string($authDataJson)) {
            yield new AccessToken(JsonHelper::decode($authDataJson));
        }
    }

    public function store(AccessTokenInterface $newToken): void
    {
        // See AccessToken::jsonSerialize
        $this->state[self::STATE_AUTH_DATA_KEY] = json_encode($newToken);
    }
}


================================================
File: src/Auth/TokenProvider.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Auth;

use League\OAuth2\Client\Token\AccessTokenInterface;

interface TokenProvider
{
    public function get(): AccessTokenInterface;
}


================================================
File: src/Auth/TokenProviderFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Auth;

use ArrayObject;
use Keboola\OneDriveExtractor\Configuration\Config;
use Psr\Log\LoggerInterface;

class TokenProviderFactory
{
    private Config $config;

    private ArrayObject $stateObject;

    public function __construct(Config $config, ArrayObject $stateObject)
    {
        $this->config = $config;
        $this->stateObject = $stateObject;
    }

    public function create(): TokenProvider
    {
        // OAuth Refresh Token login
        $tokenDataManager = new TokenDataManager($this->config->getOAuthApiData(), $this->stateObject);
        return new RefreshTokenProvider(
            $this->config->getOAuthApiAppKey(),
            $this->config->getOAuthApiAppSecret(),
            $tokenDataManager
        );
    }
}


================================================
File: src/Configuration/Config.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Configuration;

use InvalidArgumentException;
use Keboola\Component\Config\BaseConfig;
use Keboola\Component\JsonHelper;
use Keboola\OneDriveExtractor\Exception\InvalidAuthDataException;
use Keboola\OneDriveExtractor\Exception\InvalidConfigException;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class Config extends BaseConfig
{
    public function __construct(array $config, ?ConfigurationInterface $configDefinition = null)
    {
        parent::__construct($config, $configDefinition);
        $this->customValidation();
    }

    public function hasDriveId(): bool
    {
        return $this->hasValue(['parameters', 'workbook', 'driveId']);
    }

    public function getDriveId(): string
    {
        return $this->getValue(['parameters', 'workbook', 'driveId']);
    }

    public function hasFileId(): bool
    {
        return $this->hasValue(['parameters', 'workbook', 'fileId']);
    }

    public function getFileId(): string
    {
        return $this->getValue(['parameters', 'workbook', 'fileId']);
    }

    public function hasSearch(): bool
    {
        return $this->hasValue(['parameters', 'workbook', 'search']);
    }

    public function getSearch(): string
    {
        return $this->getValue(['parameters', 'workbook', 'search']);
    }

    public function hasWorksheetId(): bool
    {
        return $this->hasValue(['parameters', 'worksheet', 'id']);
    }

    public function getWorksheetId(): string
    {
        return $this->getValue(['parameters', 'worksheet', 'id']);
    }

    public function hasWorksheetPosition(): bool
    {
        return $this->hasValue(['parameters', 'worksheet', 'position']);
    }


    public function getWorksheetPosition(): int
    {
        return $this->getValue(['parameters', 'worksheet', 'position']);
    }

    public function getWorksheetName(): string
    {
        return $this->getValue(['parameters', 'worksheet', 'name']);
    }

    public function getRowsLimit(): ?int
    {
        return $this->getValue(['parameters', 'rowsLimit']);
    }

    public function getCellPerBulk(): int
    {
        return $this->getValue(['parameters', 'cellsPerBulk']);
    }


    public function getOAuthApiData(): array
    {
        $data = parent::getOAuthApiData();

        if (empty($data)) {
            return [];
        }

        if (!is_string($data)) {
            throw new InvalidAuthDataException('Value of "authorization.oauth_api.credentials.#data".');
        }

        try {
            return JsonHelper::decode($data);
        } catch (\Throwable $e) {
            throw new InvalidAuthDataException(sprintf(
                'Value of "authorization.oauth_api.credentials.#data" must be valid JSON, sample: "%s"',
                substr($data, 0, 16)
            ));
        }
    }

    private function hasValue(array $keys): bool
    {
        try {
            $this->getValue($keys);
            return true;
        } catch (InvalidArgumentException $e) {
            return false;
        }
    }

    private function customValidation(): void
    {
        // Missing OAuth data
        if (!$this->getOAuthApiAppKey() || !$this->getOAuthApiAppSecret() || !$this->getOAuthApiData()) {
            throw new InvalidConfigException(
                'Missing OAuth credentials, ' .
                'please set "authorization.oauth_api.credentials.{appKey,#appSecret,#data}".'
            );
        }
    }
}


================================================
File: src/Configuration/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Configuration;

use Keboola\Component\Config\BaseConfigDefinition;
use Keboola\OneDriveExtractor\Api\Api;
use Keboola\OneDriveExtractor\Configuration\Parts\WorkbookDefinition;
use Keboola\OneDriveExtractor\Configuration\Parts\WorksheetDefinition;
use Keboola\OneDriveExtractor\Exception\InvalidConfigException;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;

class ConfigDefinition extends BaseConfigDefinition
{
    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $builder = new TreeBuilder('parameters');
        /** @var ArrayNodeDefinition $parametersNode */
        $parametersNode = $builder->getRootNode();

        // @formatter:off
        $parametersNode
            ->children()
                // Workbook is one XLSX file
                ->append(WorkbookDefinition::getDefinition())
                // In one workbook are multiple worksheets, specify one
                ->append(WorksheetDefinition::getDefinition())
                ->integerNode('rowsLimit')
                    ->defaultNull()
                ->end()
                ->integerNode('cellsPerBulk')
                    ->defaultValue(Api::DEFAULT_CELLS_PER_BULK)
                    ->max(5_000_000)
                ->end()
            ->end();
        // @formatter:on

        return $parametersNode;
    }
}


================================================
File: src/Configuration/Actions/GetWorksheetsConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Configuration\Actions;

use Keboola\Component\Config\BaseConfigDefinition;
use Keboola\OneDriveExtractor\Configuration\Parts\WorkbookDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;

class GetWorksheetsConfigDefinition extends BaseConfigDefinition
{
    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $builder = new TreeBuilder('parameters');
        /** @var ArrayNodeDefinition $parametersNode */
        $parametersNode = $builder->getRootNode();

        // @formatter:off
        $parametersNode
            ->children()
                // Workbook is one XLSX file
                ->append(WorkbookDefinition::getDefinition())
            ->end();
        // @formatter:on

        return $parametersNode;
    }
}


================================================
File: src/Configuration/Actions/SearchConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Configuration\Actions;

use Keboola\Component\Config\BaseConfigDefinition;
use Keboola\OneDriveExtractor\Configuration\Parts\WorkbookDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;

class SearchConfigDefinition extends BaseConfigDefinition
{
    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $builder = new TreeBuilder('parameters');
        /** @var ArrayNodeDefinition $parametersNode */
        $parametersNode = $builder->getRootNode();

        // @formatter:off
        $parametersNode
            ->children()
                // Workbook is one XLSX file
                ->append(WorkbookDefinition::getDefinition())
            ->end();
        // @formatter:on

        return $parametersNode;
    }
}


================================================
File: src/Configuration/Parts/WorkbookDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Configuration\Parts;

use Keboola\OneDriveExtractor\Exception\InvalidConfigException;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;

class WorkbookDefinition
{
    public static function getDefinition(): ArrayNodeDefinition
    {
        $treeBuilder = new TreeBuilder('workbook');

        /** @var ArrayNodeDefinition $root */
        $root = $treeBuilder->getRootNode();

        // @formatter:off
        $root
            ->isRequired()
            ->children()
                // Workbook is specified by driveId, fileId
                ->scalarNode('driveId')->cannotBeEmpty()->end()
                ->scalarNode('fileId')->cannotBeEmpty()->end()
                // ... OR by search (path, download url, ...)
                ->scalarNode('search')->cannotBeEmpty()->end()
                // optional metadata can be always present, it is not used in code
                ->arrayNode('metadata')->ignoreExtraKeys(true)->end()
            ->end()
            // Not empty
            ->validate()
                ->ifTrue(function (array $workbook): bool {
                    return !isset($workbook['search']) && !isset($workbook['driveId']) && !isset($workbook['fileId']);
                })
                ->thenInvalid(
                    'In config must be present "workbook.search" OR ' .
                    '("workbook.driveId" and "workbook.fileId").'
                )
            ->end()
            // Must be present "workbook.search" OR ("workbook,driveId" and "workbook.fileId") - not both
            ->validate()
                ->ifTrue(function (array $workbook): bool {
                    return isset($workbook['search']) && (isset($workbook['driveId']) || isset($workbook['fileId']));
                })
                ->thenInvalid(
                    'In config is present "workbook.search", ' .
                    'therefore "workbook,driveId" and "workbook.fileId" are not expected.'
                )
            ->end()
            // If is one of driveId/fileId set, check both are set
            ->validate()
                ->ifTrue(function (array $workbook): bool {
                    return isset($workbook['driveId']) xor isset($workbook['fileId']);
                })
                ->thenInvalid(
                    'Both "workbook.driveId" and "workbook.fileId" must be configured.'
                )
            ->end();
        // @formatter:on

        return $root;
    }
}


================================================
File: src/Configuration/Parts/WorksheetDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Configuration\Parts;

use Keboola\OneDriveExtractor\Exception\InvalidConfigException;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;

class WorksheetDefinition
{
    public static function getDefinition(): ArrayNodeDefinition
    {
        $treeBuilder = new TreeBuilder('worksheet');

        /** @var ArrayNodeDefinition $root */
        $root = $treeBuilder->getRootNode();

        // @formatter:off
        $root
            ->isRequired()
            ->children()
                // Name of the output CSV file (the file/sheet name can be quite exotic and we cannot rely on it)
                ->scalarNode('name')->isRequired()->cannotBeEmpty()->end()
                // Worksheet is specified by id
                ->scalarNode('id')->cannotBeEmpty()->end()
                // ... OR by position, first is 0, hidden sheets are included
                ->scalarNode('position')->cannotBeEmpty()->end()
                // optional metadata can be always present, it is not used in code
                ->arrayNode('metadata')->ignoreExtraKeys(true)->end()
            ->end()
            // Only one of id/position allowed
            ->validate()
                ->ifTrue(function (array $worksheet): bool {
                    $hasId = isset($worksheet['id']);
                    $hasPosition = array_key_exists('position', $worksheet); // position can be 0
                    return $hasId && $hasPosition;
                })
                ->thenInvalid('In config must be ONLY ONE OF "worksheet.id" OR "worksheet.position". Both given.')
            ->end()
            // One of id/position must be set
            ->validate()
                ->ifTrue(function (array $worksheet): bool {
                    $hasId = isset($worksheet['id']);
                    $hasPosition = array_key_exists('position', $worksheet); // position can be 0
                    return !$hasId && !$hasPosition;
                })
                ->thenInvalid('In config must be ONE OF "worksheet.id" OR "worksheet.position".')
            ->end();
        // @formatter:on

        return $root;
    }
}


================================================
File: src/Exception/AccessDeniedException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class AccessDeniedException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/AccessTokenInitException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\ApplicationExceptionInterface;

class AccessTokenInitException extends \Exception implements ApplicationExceptionInterface
{

}


================================================
File: src/Exception/AccessTokenRefreshException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class AccessTokenRefreshException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/BadRequestException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class BadRequestException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/BatchRequestException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;
use Throwable;

class BatchRequestException extends \Exception implements UserExceptionInterface
{
    private string $originalMessage;

    private array $body;

    public function __construct(
        string $message = '',
        string $originalMessage = '',
        array $body = [],
        int $code = 0,
        ?Throwable $previous = null
    ) {
        parent::__construct($message, $code, $previous);
        $this->originalMessage = $originalMessage;
        $this->body = $body;
    }

    public function getOriginalMessage(): string
    {
        return $this->originalMessage;
    }

    public function getBody(): array
    {
        return $this->body;
    }
}


================================================
File: src/Exception/GatewayTimeoutException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class GatewayTimeoutException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/InvalidAuthDataException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class InvalidAuthDataException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/InvalidConfigException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class InvalidConfigException extends InvalidConfigurationException implements UserExceptionInterface
{

}


================================================
File: src/Exception/InvalidFileTypeException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class InvalidFileTypeException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/NotSupportedException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class NotSupportedException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/PropertyNotSetException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\ApplicationExceptionInterface;

class PropertyNotSetException extends \Exception implements ApplicationExceptionInterface
{

}


================================================
File: src/Exception/ResourceNotFoundException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class ResourceNotFoundException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/ShareLinkException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class ShareLinkException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/SheetEmptyException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class SheetEmptyException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/UnexpectedCountException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class UnexpectedCountException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/UnexpectedValueException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class UnexpectedValueException extends \Exception implements UserExceptionInterface
{

}


================================================
File: src/Exception/UserException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class UserException extends \Exception implements UserExceptionInterface
{

}


================================================
File: tests/bootstrap.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/../vendor/autoload.php';

use Keboola\OneDriveExtractor\Fixtures\FixturesCatalog;
use Keboola\OneDriveExtractor\Fixtures\FixturesUtils;

FixturesCatalog::initialize();
FixturesUtils::disableLog();


================================================
File: tests/api/AuthTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\ApiTests;

use ArrayObject;
use Keboola\Component\JsonHelper;
use Keboola\OneDriveExtractor\Auth\TokenDataManager;
use Keboola\OneDriveExtractor\Exception\AccessTokenInitException;
use Keboola\OneDriveExtractor\Exception\AccessTokenRefreshException;
use PHPUnit\Framework\Assert;

class AuthTest extends BaseTest
{
    /**
     * @dataProvider getValidCredentials`
     */
    public function testValidCredentials(
        string $appId,
        string $appSecret,
        string $accessToken,
        string $refreshToken
    ): void {
        $data = [
            'access_token' => $accessToken,
            'refresh_token' => $refreshToken,
        ];
        $api = $this->createApi($appId, $appSecret, $data);
        Assert::assertNotEmpty($api->getAccountName());
    }

    /**
     * @dataProvider getInvalidCredentials
     */
    public function testInvalidCredentials(
        string $expectedExceptionMsg,
        string $appId,
        string $appSecret,
        string $accessToken,
        string $refreshToken
    ): void {
        $data = [
            'access_token' => $accessToken,
            'refresh_token' => $refreshToken,
        ];
        $this->expectException(AccessTokenRefreshException::class);
        $this->expectExceptionMessage($expectedExceptionMsg);
        $this->createApi($appId, $appSecret, $data);
    }

    /**
     * @dataProvider getInvalidAuthData
     */
    public function testInvalidAuthDataFormat(
        string $expectedExceptionMsg,
        array $data
    ): void {
        // Try auth with invalid app-id
        $this->expectException(AccessTokenInitException::class);
        $this->expectExceptionMessage($expectedExceptionMsg);
        $appId = (string) getenv('OAUTH_APP_ID');
        $appSecret = (string) getenv('OAUTH_APP_SECRET');
        $this->createApi($appId, $appSecret, $data);
    }

    public function testEmptyState(): void
    {
        // State is empty
        $state = new ArrayObject();
        $originAccessToken = (string) getenv('OAUTH_ACCESS_TOKEN');
        $originRefreshToken = (string) getenv('OAUTH_REFRESH_TOKEN');

        // Refresh tokens
        $tokenProvider = $this->createRefreshTokenProvider($state);
        $newAccessToken = $tokenProvider->get();

        // We have a new access token
        Assert::assertNotEmpty($newAccessToken->getToken());
        Assert::assertNotSame($originAccessToken, $newAccessToken->getToken());
        Assert::assertNotSame($originRefreshToken, $newAccessToken->getRefreshToken());

        // And tokens are stored to state
        $state = $state->getArrayCopy();
        $dataRaw = $state[TokenDataManager::STATE_AUTH_DATA_KEY];
        $data = JsonHelper::decode($dataRaw);
        Assert::assertNotEmpty($data['access_token']);
        Assert::assertNotEmpty($data['refresh_token']);
        Assert::assertNotSame($originAccessToken, $data['access_token']);
        Assert::assertNotSame($originRefreshToken, $data['refresh_token']);
    }

    public function testEmptyStateInvalidTokens(): void
    {
        $state = new ArrayObject([]);
        $tokenProvider = $this->createRefreshTokenProvider($state, [
            'access_token' => 'invalid',
            'refresh_token' => 'invalid',
        ]);

        $this->expectException(AccessTokenRefreshException::class);
        $this->expectExceptionMessage(
            'Microsoft OAuth API token refresh failed, please reset authorization in the extractor configuration.'
        );
        $tokenProvider->get();
    }

    public function testState(): void
    {
        // State contains valid tokens, from the previous run
        $originAccessToken = (string) getenv('OAUTH_ACCESS_TOKEN');
        $originRefreshToken = (string) getenv('OAUTH_REFRESH_TOKEN');
        $state = new ArrayObject([
            TokenDataManager::STATE_AUTH_DATA_KEY => json_encode([
                'access_token' => $originAccessToken,
                'refresh_token' => $originRefreshToken,
            ]),
        ]);

        // And configuration contains expired old tokens, but they are not used
        $tokenProvider = $this->createRefreshTokenProvider($state, [
            'access_token' => 'old',
            'refresh_token' => 'old',
        ]);
        $newAccessToken = $tokenProvider->get();

        // We have a new access token
        Assert::assertNotEmpty($newAccessToken->getToken());
        Assert::assertNotSame($originAccessToken, $newAccessToken->getToken());
        Assert::assertNotSame($originRefreshToken, $newAccessToken->getRefreshToken());

        // And tokens are stored to state
        $state = $state->getArrayCopy();
        $dataRaw = $state[TokenDataManager::STATE_AUTH_DATA_KEY];
        Assert::assertIsString($dataRaw);
        $data = JsonHelper::decode((string) $dataRaw);
        Assert::assertNotEmpty($data['access_token']);
        Assert::assertNotEmpty($data['refresh_token']);
        Assert::assertNotSame($originAccessToken, $data['access_token']);
        Assert::assertNotSame($originRefreshToken, $data['refresh_token']);
    }

    public function testStateInvalidTokens(): void
    {
        $state = new ArrayObject([
            TokenDataManager::STATE_AUTH_DATA_KEY => json_encode([
                'access_token' => 'invalid',
                'refresh_token' => 'invalid',
            ]),
        ]);
        $tokenProvider = $this->createRefreshTokenProvider($state, [
            'access_token' => 'invalid',
            'refresh_token' => 'invalid',
        ]);

        $this->expectException(AccessTokenRefreshException::class);
        $this->expectExceptionMessage(
            'Microsoft OAuth API token refresh failed, please reset authorization in the extractor configuration.'
        );
        $tokenProvider->get();
    }

    public function getValidCredentials(): array
    {
        return [
            'all-valid' => [
                getenv('OAUTH_APP_ID'),
                getenv('OAUTH_APP_SECRET'),
                getenv('OAUTH_ACCESS_TOKEN'),
                getenv('OAUTH_REFRESH_TOKEN'),
            ],
            // Invalid access token is not problem.
            // New access token will be obtained using refresh token.
            'invalid-access-token' => [
                getenv('OAUTH_APP_ID'),
                getenv('OAUTH_APP_SECRET'),
                'invalid-access-token',
                getenv('OAUTH_REFRESH_TOKEN'),
            ],
        ];
    }

    public function getInvalidCredentials(): array
    {
        return [
            'invalid-app-id' => [
                'Microsoft OAuth API token refresh failed, ' .
                'please reset authorization in the extractor configuration.',
                'invalid-app-id',
                getenv('OAUTH_APP_SECRET'),
                getenv('OAUTH_ACCESS_TOKEN'),
                getenv('OAUTH_REFRESH_TOKEN'),
            ],
            'invalid-app-secret' => [
                'Microsoft OAuth API token refresh failed, ' .
                'please reset authorization in the extractor configuration.',
                getenv('OAUTH_APP_ID'),
                'invalid-app-secret',
                getenv('OAUTH_ACCESS_TOKEN'),
                getenv('OAUTH_REFRESH_TOKEN'),
            ],
            'invalid-refresh-token' => [
                'Microsoft OAuth API token refresh failed, ' .
                'please reset authorization in the extractor configuration.',
                getenv('OAUTH_APP_ID'),
                getenv('OAUTH_APP_SECRET'),
                getenv('OAUTH_ACCESS_TOKEN'),
                'invalid-refresh-token',
            ],
        ];
    }

    public function getInvalidAuthData(): array
    {
        return [
            'empty-data' => [
                'Missing key "access_token", "refresh_token" in OAuth data array.',
                [],
            ],
            'missing-access-token' => [
                'Missing key "access_token" in OAuth data array.',
                [
                    'refresh_token' => getenv('OAUTH_REFRESH_TOKEN'),
                ],
            ],
            'missing-refresh-token' => [
                'Missing key "refresh_token" in OAuth data array.',
                [
                    'access_token' => getenv('OAUTH_ACCESS_TOKEN'),
                ],
            ],
        ];
    }
}


================================================
File: tests/api/BaseTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\ApiTests;

use ArrayObject;
use Keboola\OneDriveExtractor\Api\Api;
use Keboola\OneDriveExtractor\Api\ApiFactory;
use Keboola\OneDriveExtractor\Api\GraphApiFactory;
use Keboola\OneDriveExtractor\Auth\RefreshTokenProvider;
use Keboola\OneDriveExtractor\Auth\TokenDataManager;
use Keboola\OneDriveExtractor\Auth\TokenProvider;
use Keboola\OneDriveExtractor\Auth\TokenProviderFactory;
use Keboola\OneDriveExtractor\Configuration\Config;
use Keboola\OneDriveExtractor\Fixtures\FixturesCatalog;
use Microsoft\Graph\Graph;
use PHPUnit\Framework\TestCase;
use Psr\Log\Test\TestLogger;

abstract class BaseTest extends TestCase
{
    protected TestLogger $logger;

    protected Api $api;

    protected FixturesCatalog $fixtures;

    protected function setUp(): void
    {
        parent::setUp();

        $this->checkEnvironment(['OAUTH_APP_ID', 'OAUTH_APP_SECRET', 'OAUTH_ACCESS_TOKEN', 'OAUTH_REFRESH_TOKEN']);
        $this->logger = new TestLogger();
        $this->api = $this->createApi(
            (string) getenv('OAUTH_APP_ID'),
            (string) getenv('OAUTH_APP_SECRET'),
            [
                'access_token' => (string) getenv('OAUTH_ACCESS_TOKEN'),
                'refresh_token' => (string) getenv('OAUTH_REFRESH_TOKEN'),
            ],
        );
        $this->fixtures = FixturesCatalog::load();
    }

    protected function createApi(
        string $appId,
        string $appSecret,
        array $oauthData
    ): Api {
        $config = $this->createMock(Config::class);
        $config->method('getOAuthApiAppKey')->willReturn($appId);
        $config->method('getOAuthApiAppSecret')->willReturn($appSecret);
        $config->method('getOAuthApiData')->willReturn($oauthData);

        $state = new ArrayObject();
        $tokenProviderFactory = new TokenProviderFactory($config, $state);
        $tokenProvider = $tokenProviderFactory->create();
        $apiFactory = new ApiFactory($this->logger, $tokenProvider);
        return $apiFactory->create();
    }

    protected function createGraphApi(): Graph
    {
        $state = new ArrayObject();
        $tokenProvider = $this->createRefreshTokenProvider($state);
        $graphApiFactory = new GraphApiFactory();
        return $graphApiFactory->create($tokenProvider->get());
    }

    protected function createRefreshTokenProvider(ArrayObject $state, ?array $oauthData = null): TokenProvider
    {
        $appId = (string) getenv('OAUTH_APP_ID');
        $appSecret = (string) getenv('OAUTH_APP_SECRET');
        $accessToken = (string) getenv('OAUTH_ACCESS_TOKEN');
        $refreshToken = (string) getenv('OAUTH_REFRESH_TOKEN');
        $oauthData = $oauthData ?? [
                'access_token' => $accessToken,
                'refresh_token' => $refreshToken,
            ];
        $dataManager = new TokenDataManager($oauthData, $state);
        return new RefreshTokenProvider($appId, $appSecret, $dataManager);
    }

    protected function checkEnvironment(array $vars): void
    {
        foreach ($vars as $var) {
            if (empty(getenv($var))) {
                throw new \Exception(sprintf('Missing environment var "%s".', $var));
            }
        }
    }
}


================================================
File: tests/api/BatchRequestTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\ApiTests;

use Throwable;
use PHPUnit\Framework\Assert;

class BatchRequestTest extends BaseTest
{
    public function testEmptyBatchRequest(): void
    {
        // Test for bug COM-214, when empty batch request resulted to "BadRequest: Invalid batch payload format."
        $batch = $this->api->createBatchRequest();
        Assert::assertCount(0, iterator_to_array($batch->execute()));
    }

    public function testExceptionProcessor(): void
    {
        $batch = $this->api->createBatchRequest();
        $batch->addRequest('/some/invalid/path1', [], null, function (Throwable $e): void {
            $this->logger->warning('Warning, request 1 failed.');
        });
        $batch->addRequest('/some/invalid/path2', [], null, function (Throwable $e): void {
            $this->logger->warning('Warning, request 2 failed.');
        });

        $results = iterator_to_array($batch->execute());
        Assert::assertCount(0, $results);

        $logs = array_map(fn(array $r) => $r['message'], $this->logger->records);
        sort($logs); // sort by value, order is not guaranteed by API
        Assert::assertSame([
            'Warning, request 1 failed.',
            'Warning, request 2 failed.',
        ], $logs);
    }
}


================================================
File: tests/api/GetContentTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\ApiTests;

use Keboola\OneDriveExtractor\Exception\SheetEmptyException;
use Keboola\OneDriveExtractor\Fixtures\FixturesCatalog;
use PHPUnit\Framework\Assert;

class GetContentTest extends BaseTest
{
    /**
     * @dataProvider getFiles
     */
    public function testGetWorksheetHeader(
        string $fileName,
        int $worksheetPosition,
        string $expectedHeaderAddress,
        array $expectedHeader
    ): void {
        $fixture = $this->fixtures->getDrive()->getFile($fileName);
        $worksheetId = $this->api->getWorksheetId($fixture->getDriveId(), $fixture->getFileId(), $worksheetPosition);
        $header = $this->api->getWorksheetHeader($fixture->getDriveId(), $fixture->getFileId(), $worksheetId, null);
        Assert::assertSame($expectedHeaderAddress, $header->getAddress());
        Assert::assertSame($expectedHeader, json_decode((string) json_encode($header)));
    }

    public function testGetWorksheetHeaderEmptyFile(): void
    {
        $fixture = $this->fixtures->getDrive()->getFile(FixturesCatalog::FILE_EMPTY);
        $worksheetId = $this->api->getWorksheetId($fixture->getDriveId(), $fixture->getFileId(), 0);
        $header = $this->api->getWorksheetHeader($fixture->getDriveId(), $fixture->getFileId(), $worksheetId, null);
        Assert::assertSame([], json_decode((string) json_encode($header)));
    }

    /**
     * @dataProvider getFiles
     */
    public function testGetWorksheetContent(
        string $fileName,
        int $worksheetPosition,
        string $expectedHeaderAddress,
        array $expectedHeader,
        string $expectedTableAddress,
        array $expectedContent
    ): void {
        $fixture = $this->fixtures->getDrive()->getFile($fileName);
        $worksheetId = $this->api->getWorksheetId($fixture->getDriveId(), $fixture->getFileId(), $worksheetPosition);
        $table = $this->api->getWorksheetContent($fixture->getDriveId(), $fixture->getFileId(), $worksheetId);
        Assert::assertSame($expectedHeaderAddress, $table->getHeader()->getAddress());
        Assert::assertSame($expectedHeader, json_decode((string) json_encode($table->getHeader())));
        Assert::assertSame($expectedTableAddress, $table->getAddress());
        Assert::assertSame($expectedContent, iterator_to_array($table->getRows()));
    }

    public function testGetWorksheetContentEmptyFile(): void
    {
        $fixture = $this->fixtures->getDrive()->getFile(FixturesCatalog::FILE_EMPTY);
        $worksheetId = $this->api->getWorksheetId($fixture->getDriveId(), $fixture->getFileId(), 0);

        $this->expectException(SheetEmptyException::class);
        $this->expectExceptionMessage('Spreadsheet is empty.');
        $this->api->getWorksheetContent($fixture->getDriveId(), $fixture->getFileId(), $worksheetId);
    }

    public function getFiles(): array
    {
        return [
            'hidden-sheet' => [
                FixturesCatalog::FILE_HIDDEN_SHEET,
                2, // hidden sheet, see ListSheetsTest.php
                'A48:C48',
                ['Col_4', 'Col_5', 'Col_6'],
                'A48:C50',
                [
                    ['A', 'B', 'cell from hidden sheet'],
                    ['X', 'Y', 'Z'],
                ],
            ],
            'one-sheet' => [
                FixturesCatalog::FILE_ONE_SHEET,
                0,
                'A1:C1',
                ['Col_1', 'Col_2', 'Col_3'],
                'A1:C3',
                [
                    ['A', 'B', 'C'],
                    ['D', 'E', 'F'],
                ],
            ],
            'only-header' => [
                FixturesCatalog::FILE_ONLY_HEADER,
                0,
                'A1:D1',
                ['Col1', 'Col2', 'Col3', 'Col4'],
                'A1:D1',
                [],
            ],
            'only-one-column' => [
                FixturesCatalog::FILE_ONLY_ONE_COLUMN,
                0,
                'A1:A1',
                ['Col1'],
                'A1:A4',
                [
                    ['Row1'],
                    ['Row2'],
                    ['Row3'],
                ],
            ],
            'special-cases' => [
                FixturesCatalog::FILE_SPECIAL_CASES,
                0,
                'C4:I4',
                [
                    'Duplicate',
                    'Duplicate-1',
                    'column-3',
                    'column-4',
                    'Special_123_uescr',
                    'column-6',
                    'column-7',
                ],
                'C4:I14',
                [
                    ['A', '10', '(2x empty header)', '', ' $1,618.50 ', '1/1/2014', '(empty col)',],
                    ['B', '20', 'a', '', ' $1,321.00 ', '1/1/2014', '',],
                    ['A', '30', 'b', '', ' $2,178.00 ', '1/6/2014', 'x',],
                    ['B', '40', 'a', '', ' $888.00 ', '1/6/2014', 'y',],
                    ['A', '50', 'b', '', ' $2,470.00 ', '1/6/2014', 'z',],
                    ['B', '60', 'a', '', ' $1,513.00 ', '1/12/2014', '',],
                    ['A', '70', 'b', '', ' $921.00 ', '1/3/2014', '',],
                    ['', '', '', '', ' $2,518.00 ', '1/6/2014', '',],
                    ['', '', '', '', '', '', '',],
                    ['', '', '', '', ' $1,545.00 ', '', '',],
                ],
            ],
            'table-offset' => [
                FixturesCatalog::FILE_TABLE_OFFSET,
                0,
                'C9:L9',
                [
                    'Segment',
                    'column-2',
                    'Country',
                    'Duplicate',
                    'Duplicate-1',
                    'Product',
                    'Discount_Band',
                    'Units_Sold',
                    'column-9',
                    'column-10',
                ],
                'C9:L14',
                [
                    ['Government', '', 'Canada', '', '6', 'Carretera', 'None', '1618.5', '', '',],
                    ['Government', '', 'Germany', '', '7', 'Carretera', 'None', '1321', '', '',],
                    ['Midmarket', '', 'France', '', '8', 'Carretera', 'None', '2178', '', 'x',],
                    ['Midmarket', '', 'Germany', '', '9', 'Carretera', 'None', '888', '', 'y',],
                    [
                        'Midmarket', '(empty header)', 'Mexico', '(duplicate header)',
                        '(duplicate header)', 'Carretera', 'None', '2470', '', 'z',
                    ],
                ],
            ],
        ];
    }
}


================================================
File: tests/api/GetSheetIdTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\ApiTests;

use Keboola\OneDriveExtractor\Exception\ResourceNotFoundException;
use Keboola\OneDriveExtractor\Exception\UnexpectedValueException;
use Keboola\OneDriveExtractor\Fixtures\FixturesCatalog;
use PHPUnit\Framework\Assert;

class GetSheetIdTest extends BaseTest
{
    /**
     * @dataProvider getFiles
     */
    public function testGetWorksheetId(string $file): void
    {
        $fixture = $this->fixtures->getDrive()->getFile($file);
        $worksheets = $this->api->getWorksheets($fixture->getDriveId(), $fixture->getFileId());
        foreach ($worksheets as $worksheet) {
            Assert::assertSame(
                $worksheet->getWorksheetId(),
                $this->api->getWorksheetId($fixture->getDriveId(), $fixture->getFileId(), $worksheet->getPosition())
            );
        }
    }

    public function testWorksheetNotFound(): void
    {
        $fixture = $this->fixtures->getDrive()->getFile(FixturesCatalog::FILE_ONE_SHEET);

        $this->expectException(ResourceNotFoundException::class);
        $this->expectExceptionMessage('No worksheet at position "123".');
        $this->api->getWorksheetId($fixture->getDriveId(), $fixture->getFileId(), 123);
    }

    public function testNegativePosition(): void
    {
        $fixture = $this->fixtures->getDrive()->getFile(FixturesCatalog::FILE_ONE_SHEET);

        $this->expectException(UnexpectedValueException::class);
        $this->expectExceptionMessage('Worksheet position must be greater than zero. Given "-5".');
        $this->api->getWorksheetId($fixture->getDriveId(), $fixture->getFileId(), -5);
    }

    public function getFiles(): array
    {
        return [
            [FixturesCatalog::FILE_ONE_SHEET],
            [FixturesCatalog::FILE_HIDDEN_SHEET],
        ];
    }
}


================================================
File: tests/api/GetSheetsTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\ApiTests;

use Keboola\OneDriveExtractor\Exception\InvalidFileTypeException;
use Keboola\OneDriveExtractor\Exception\ResourceNotFoundException;
use Keboola\OneDriveExtractor\Fixtures;
use PHPUnit\Framework\Assert;

class GetSheetsTest extends BaseTest
{
    /**
     * @dataProvider getValidFiles
     */
    public function testValidFile(string $filePath, array $expected): void
    {
        $file = $this->fixtures->getDrive()->getFile($filePath);
        $worksheets = iterator_to_array($this->api->getWorksheets($file->getDriveId(), $file->getFileId()));

        // Compare with expected data
        $serialized = json_decode((string) json_encode($worksheets), true);
        foreach ($serialized as &$worksheet) {
            // Dynamic values: assert not empty and ignore
            Assert::assertNotEmpty($worksheet['driveId']);
            Assert::assertNotEmpty($worksheet['fileId']);
            Assert::assertNotEmpty($worksheet['worksheetId']);
            unset($worksheet['driveId']);
            unset($worksheet['fileId']);
            unset($worksheet['worksheetId']);
        }
        Assert::assertSame($expected, $serialized);
    }

    /**
     * @dataProvider getFilesWithInvalidType
     */
    public function testFileWithInvalidFileType(string $filePath): void
    {
        $file = $this->fixtures->getDrive()->getFile($filePath);
        $this->expectException(InvalidFileTypeException::class);
        $this->expectExceptionMessage(
            'It looks like the specified file is not in the "XLSX" Excel format. ' .
            'Error: "AccessDenied: Could not obtain a WAC access token."'
        );
        iterator_to_array($this->api->getWorksheets($file->getDriveId(), $file->getFileId()));
    }

    public function testFileNotFound(): void
    {
        $driveId = $this->fixtures->getDrive()->getFile(Fixtures\FixturesCatalog::FILE_EMPTY)->getDriveId();
        $fileId = '01GQDMCCPK5MFK6QCSJFC2HYWA7AABCDEF';  // not exists
        $this->expectException(ResourceNotFoundException::class);
        $this->expectExceptionMessage(
            'Not found error. Please check configuration. ' .
            'It can be caused by typo in an ID, or resource doesn\'t exists.'
        );
        iterator_to_array($this->api->getWorksheets($driveId, $fileId));
    }

    public function testDriveNotFound(): void
    {
        $driveId = 'b!nZgsjp3RK0aRFp01PZWjKUicqho1KehCtKM1UhLEWybvgM_dt6mJRKV571234567'; // not exists
        $fileId = $this->fixtures->getDrive()->getFile(Fixtures\FixturesCatalog::FILE_EMPTY)->getFileId();
        $this->expectException(ResourceNotFoundException::class);
        $this->expectExceptionMessage(
            'Not found error. Please check configuration. ' .
            'It can be caused by typo in an ID, or resource doesn\'t exists.'
        );
        iterator_to_array($this->api->getWorksheets($driveId, $fileId));
    }

    public function getValidFiles(): array
    {
        return [
            'empty' => [
                Fixtures\FixturesCatalog::FILE_EMPTY,
                [
                    [
                        'position' => 0,
                        'name' => 'Sheet1',
                        'title' => 'Sheet1',
                        'visible' => true,
                        'header' => [],
                    ],
                ],
            ],
            'hidden_sheet' => [
                Fixtures\FixturesCatalog::FILE_HIDDEN_SHEET,
                [
                    [
                        'position' => 0,
                        'name' => 'Sheet1',
                        'title' => 'Sheet1',
                        'visible' => true,
                        'header' => ['Col_1', 'Col_2', 'Col_3'],
                    ],
                    [
                        'position' => 1,
                        'name' => 'Zošit 2',
                        'title' => 'Zošit 2',
                        'visible' => true,
                        'header' => ['Col_1', 'Col_2', 'Col_3'],
                    ],
                    [
                        'position' => 2,
                        'name' => 'Hidden Sheet 3',
                        'title' => 'Hidden Sheet 3 (hidden)',
                        'visible' => false,
                        'header' => ['Col_4', 'Col_5', 'Col_6'],
                    ],
                    [
                        'position' => 3,
                        'name' => 'sheet=4',
                        'title' => 'sheet=4',
                        'visible' => true,
                        'header' => ['Col_1', 'Col_2', 'Col_3'],
                    ],
                ],
            ],
            'one_sheet' => [
                Fixtures\FixturesCatalog::FILE_ONE_SHEET,
                [
                    [
                        'position' => 0,
                        'name' => 'Only One Sheet',
                        'title' => 'Only One Sheet',
                        'visible' => true,
                        'header' => ['Col_1', 'Col_2', 'Col_3'],
                    ],
                ],
            ],
            'only_header' => [
                Fixtures\FixturesCatalog::FILE_ONLY_HEADER,
                [
                    [
                        'position' => 0,
                        'name' => 'Sheet1',
                        'title' => 'Sheet1',
                        'visible' => true,
                        'header' => ['Col1', 'Col2', 'Col3', 'Col4'],
                    ],
                ],
            ],
            'special_cases' => [
                Fixtures\FixturesCatalog::FILE_SPECIAL_CASES,
                [
                    [
                        'position' => 0,
                        'name' => 'Special 123úěščř!@#$%^',
                        'title' => 'Special 123úěščř!@#$%^',
                        'visible' => true,
                        'header' =>
                            [
                                'Duplicate',
                                'Duplicate-1',
                                'column-3',
                                'column-4',
                                'Special_123_uescr',
                                'column-6',
                                'column-7',
                            ],
                    ],
                ],
            ],
            'table_offset' => [
                Fixtures\FixturesCatalog::FILE_TABLE_OFFSET,
                [
                    [
                        'position' => 0,
                        'name' => 'Sheet 1',
                        'title' => 'Sheet 1',
                        'visible' => true,
                        'header' =>
                            [
                                'Segment',
                                'column-2',
                                'Country',
                                'Duplicate',
                                'Duplicate-1',
                                'Product',
                                'Discount_Band',
                                'Units_Sold',
                                'column-9',
                                'column-10',
                            ],
                    ],
                ],
            ],
        ];
    }

    public function getFilesWithInvalidType(): array
    {
        return [
            'csv-file' => [Fixtures\FixturesCatalog::FILE_CSV],
            'ods-file' => [Fixtures\FixturesCatalog::FILE_ODS],
            'odt-file' => [Fixtures\FixturesCatalog::FILE_ODT],
            'xls-file' => [Fixtures\FixturesCatalog::FILE_XLS],
        ];
    }
}


================================================
File: tests/api/SearchForFileTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\ApiTests;

use ArrayIterator;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\SkippedTestError;
use Keboola\OneDriveExtractor\Api\Api;
use Keboola\OneDriveExtractor\Exception\InvalidFileTypeException;
use Keboola\OneDriveExtractor\Exception\ShareLinkException;
use Keboola\OneDriveExtractor\Fixtures\FixturesCatalog;

class SearchForFileTest extends BaseTest
{
    public function testEmptySearch(): void
    {
        // Assert some files are found.
        // We cannot test it better,because if empty search, OneDrive returns random sample of files
        $files = iterator_to_array($this->api->searchWorkbooks(''));
        Assert::assertGreaterThan(0, count($files));
    }

    public function testSearchByPathInMeDrive1(): void
    {
        $fixture = $this->fixtures->getMeDrive()->getFile(FixturesCatalog::FILE_ONE_SHEET);
        $path = $fixture->getPath();
        Assert::assertSame('/', $path[0]); // path starts with /

        $files = iterator_to_array($this->api->searchWorkbooks($path));
        $file = $files[0];
        Assert::assertSame(1, count($files));
        Assert::assertSame('one_sheet.xlsx', $file->getName());
        Assert::assertSame(['my', '__ex-onedrive-test-folder', 'valid'], $file->getPath());
        Assert::assertSame($fixture->getDriveId(), $file->getDriveId());
        Assert::assertSame($fixture->getFileId(), $file->getFileId());
    }

    public function testSearchByPathInMeDrive2(): void
    {
        $fixture = $this->fixtures->getMeDrive()->getFile(FixturesCatalog::FILE_ONE_SHEET);
        $path = $fixture->getPath();
        $path = ltrim($path, '/');
        Assert::assertNotSame('/', $path[0]); // path NOT starts with /

        $files = iterator_to_array($this->api->searchWorkbooks($path));
        $file = $files[0];
        Assert::assertSame(1, count($files));
        Assert::assertSame('one_sheet.xlsx', $file->getName());
        Assert::assertSame(['my', '__ex-onedrive-test-folder', 'valid'], $file->getPath());
        Assert::assertSame($fixture->getDriveId(), $file->getDriveId());
        Assert::assertSame($fixture->getFileId(), $file->getFileId());
    }

    public function testSearchByPathInMeDriveNotFound(): void
    {
        $files = iterator_to_array($this->api->searchWorkbooks('/file/not/found'));
        Assert::assertSame(0, count($files));
    }

    public function testSearchByPathInMeDriveInvalidFileType(): void
    {
        $this->expectException(InvalidFileTypeException::class);
        $this->expectExceptionMessage(
            'File is not in the "XLSX" Excel format. Mime type: "application/vnd.oasis.opendocument.text"'
        );
        iterator_to_array($this->api->searchWorkbooks(
            $this->fixtures->getMeDrive()->getFile(FixturesCatalog::FILE_ODT)->getPath()
        ));
    }

    public function testSearchByPathInDrive(): void
    {
        $drive = $this->fixtures->getMeDrive();
        $driveId = urlencode($drive->getDriveId());
        $fixture = $drive->getFile(FixturesCatalog::FILE_ONE_SHEET);
        $files = iterator_to_array($this->api->searchWorkbooks("drive://{$driveId}/{$fixture->getPath()}"));
        $file = $files[0];
        Assert::assertSame(1, count($files));
        Assert::assertSame($fixture->getDriveId(), $file->getDriveId());
        Assert::assertSame($fixture->getFileId(), $file->getFileId());
        Assert::assertSame($fixture->getName(), $file->getName());
        Assert::assertSame(
            $fixture->getPath(),
            '/' .implode('/', $file->getPath()) . '/' . $file->getName()
        );
    }

    public function testSearchByPathInDriveNotFound(): void
    {
        $drive = $this->fixtures->getMeDrive();
        $driveId = urlencode($drive->getDriveId());
        $files = iterator_to_array($this->api->searchWorkbooks("drive://{$driveId}/file/not/found"));
        Assert::assertSame(0, count($files));
    }

    public function testSearchByPathInDriveInvalidFileType(): void
    {
        $drive = $this->fixtures->getMeDrive();
        $driveId = urlencode($drive->getDriveId());
        $fixture = $drive->getFile(FixturesCatalog::FILE_ODT);
        $path = "drive://{$driveId}/{$fixture->getPath()}";

        $this->expectException(InvalidFileTypeException::class);
        $this->expectExceptionMessage(
            'File is not in the "XLSX" Excel format. Mime type: "application/vnd.oasis.opendocument.text"'
        );
        iterator_to_array($this->api->searchWorkbooks($path));
    }

    public function testSearchByPathInSite(): void
    {
        $sharePointDrive = $this->fixtures->getSharePointDrive();
        $sharePointSiteName = $this->fixtures->getSharePointSiteName();
        if (!$sharePointDrive || !$sharePointSiteName) {
            throw new SkippedTestError('Skipped: share point drive is not set');
        }

        $siteName = urlencode($sharePointSiteName);
        $fixture = $sharePointDrive->getFile(FixturesCatalog::FILE_ONE_SHEET);
        $files = iterator_to_array($this->api->searchWorkbooks("site://{$siteName}/{$fixture->getPath()}"));
        $file = $files[0];
        Assert::assertSame(1, count($files));
        Assert::assertSame($fixture->getDriveId(), $file->getDriveId());
        Assert::assertSame($fixture->getFileId(), $file->getFileId());
        Assert::assertSame($fixture->getName(), $file->getName());
        Assert::assertSame(
            "sites/{$sharePointSiteName}" . $fixture->getPath(),
            implode('/', $file->getPath()) . '/' . $file->getName()
        );
    }

    public function testSearchByPathInSiteNotFound(): void
    {
        $sharePointDrive = $this->fixtures->getSharePointDrive();
        if (!$sharePointDrive) {
            throw new SkippedTestError('Skipped: share point drive is not set');
        }

        $siteName = $this->fixtures->getSharePointSiteName();
        $files = iterator_to_array($this->api->searchWorkbooks("site://{$siteName}/file/not/found"));
        Assert::assertSame(0, count($files));
    }

    public function testSearchByPathInSiteInvalidFileType(): void
    {
        $sharePointDrive = $this->fixtures->getSharePointDrive();
        if (!$sharePointDrive) {
            throw new SkippedTestError('Skipped: share point drive is not set');
        }

        $siteName = $this->fixtures->getSharePointSiteName();
        $fixture = $sharePointDrive->getFile(FixturesCatalog::FILE_ODT);
        $path = "site://{$siteName}/{$fixture->getPath()}";

        $this->expectException(InvalidFileTypeException::class);
        $this->expectExceptionMessage(
            'File is not in the "XLSX" Excel format. Mime type: "application/vnd.oasis.opendocument.text"'
        );
        iterator_to_array($this->api->searchWorkbooks($path));
    }

    public function testSearchFileNameWithoutExt(): void
    {
        $files = iterator_to_array($this->api->searchWorkbooks('one_sheet'));
        Assert::assertGreaterThan(0, count($files));
        $file = $files[0];
        Assert::assertSame('one_sheet.xlsx', $file->getName());
    }

    public function testSearchFileNameWithExt(): void
    {
        $files = iterator_to_array($this->api->searchWorkbooks('one_sheet.xlsx'));
        Assert::assertGreaterThan(0, count($files));
        $file = $files[0];
        Assert::assertSame('one_sheet.xlsx', $file->getName());
    }

    public function testSearchByUrlMeDrive(): void
    {
        $fixture = $this->fixtures->getMeDrive()->getFile(FixturesCatalog::FILE_ONE_SHEET);
        $files = iterator_to_array($this->api->searchWorkbooks($fixture->getSharingLink()));
        Assert::assertSame(1, count($files));
        Assert::assertSame('one_sheet.xlsx', $files[0]->getName());
    }

    public function testSearchByUrlSharePoint(): void
    {
        $sharePointDrive = $this->fixtures->getSharePointDrive();
        if (!$sharePointDrive) {
            throw new SkippedTestError('Skipped: share point drive is not set');
        }

        $fixture = $this->fixtures->getMeDrive()->getFile(FixturesCatalog::FILE_ONE_SHEET);
        $files = iterator_to_array($this->api->searchWorkbooks($fixture->getSharingLink()));
        Assert::assertSame(1, count($files));
        Assert::assertSame('one_sheet.xlsx', $files[0]->getName());
    }

    public function testSearchByUrlInvalidFileTypeMeDrive(): void
    {
        $sharePointDrive = $this->fixtures->getSharePointDrive();
        if (!$sharePointDrive) {
            throw new SkippedTestError('Skipped: share point drive is not set');
        }

        $this->expectException(InvalidFileTypeException::class);
        $this->expectExceptionMessage(
            'File is not in the "XLSX" Excel format. Mime type: "application/vnd.oasis.opendocument.text"'
        );
        $fixture = $sharePointDrive->getFile(FixturesCatalog::FILE_ODT);
        iterator_to_array($this->api->searchWorkbooks($fixture->getSharingLink()));
    }

    public function testSearchByUrlInvalidFileTypeSharePoint(): void
    {
        $sharePointDrive = $this->fixtures->getSharePointDrive();
        if (!$sharePointDrive) {
            throw new SkippedTestError('Skipped: share point drive is not set');
        }

        $this->expectException(InvalidFileTypeException::class);
        $this->expectExceptionMessage(
            'File is not in the "XLSX" Excel format. Mime type: "application/vnd.oasis.opendocument.text"'
        );
        $fixture = $sharePointDrive->getFile(FixturesCatalog::FILE_ODT);
        iterator_to_array($this->api->searchWorkbooks($fixture->getSharingLink()));
    }

    public function testSearchByInvalidUrl(): void
    {
        $notExistsUrl = 'https://keboolads.sharepoint.com/:x:/r/sites/KeboolaExtraction/Excel/invalid';
        $this->expectException(ShareLinkException::class);
        $this->expectExceptionMessageMatches(
            '~The sharing link ".*" no exists, or you do not have permission to access it\.~',
        );
        iterator_to_array($this->api->searchWorkbooks($notExistsUrl));
    }

    public function testSearchByTextNoSharePointSitePresent(): void
    {
        // Test for bug COM-214, when no share point site is present,
        // ... and search results to "BadRequest: Invalid batch payload format."
        // In testing account are sharePoint site present, so mock it
        $mock = $this
            ->getMockBuilder(Api::class)
            ->setConstructorArgs([$this->createGraphApi(), $this->logger, 2])
            ->setMethods(['getSites'])
            ->getMock();
        $mock->method('getSites')->willReturn(new ArrayIterator([])); // no site

        /** @var Api $api */
        $api = $mock;
        $files = iterator_to_array($api->searchWorkbooks('file_not_found_abc.xlsx'));
        Assert::assertCount(0, $files);
    }
}


================================================
File: tests/api/SitesTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\ApiTests;

use ArrayIterator;
use PHPUnit\Framework\Assert;
use Keboola\OneDriveExtractor\Api\Api;

class SitesTest extends BaseTest
{
    public function testSearchByTextNoSharePointSitePresent(): void
    {
        // Test for bug COM-214, when no share point site is present,
        // ... and getSitesDrives results to "BadRequest: Invalid batch payload format."
        // In testing account are sharePoint site present, so mock it
        $mock = $this
            ->getMockBuilder(Api::class)
            ->setConstructorArgs([$this->createGraphApi(), $this->logger, 2])
            ->setMethods(['getSites'])
            ->getMock();
        $mock->method('getSites')->willReturn(new ArrayIterator([])); // no site

        /** @var Api $api */
        $api = $mock;
        $sites = iterator_to_array($api->getSitesDrives());
        Assert::assertCount(0, $sites);
    }
}


================================================
File: tests/datadir/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\DataDirTests;

use PHPUnit\Framework\SkippedTestError;
use RuntimeException;
use ReflectionClass;
use Keboola\OneDriveExtractor\Fixtures\FixturesCatalog;
use Keboola\DatadirTests\AbstractDatadirTestCase;
use Keboola\DatadirTests\DatadirTestSpecificationInterface;
use Keboola\DatadirTests\DatadirTestsProviderInterface;
use Symfony\Component\Process\Process;

class DatadirTest extends AbstractDatadirTestCase
{
    protected FixturesCatalog $fixtures;

    protected ReflectionClass $fixturesCatalogRef;

    protected function setUp(): void
    {
        parent::setUp();
        $this->fixtures = FixturesCatalog::load();
        $this->fixturesCatalogRef = new ReflectionClass(FixturesCatalog::class);
    }


    /**
     * @dataProvider provideDatadirSpecifications
     */
    public function testDatadir(DatadirTestSpecificationInterface $specification): void
    {
        $tempDatadir = $this->getTempDatadir($specification);

        // Replace environment variables in config.json
        $configPath = $tempDatadir->getTmpFolder() . '/config.json';
        if (file_exists($configPath)) {
            $configContent = $this->modifyConfigFile((string) file_get_contents($configPath));
            file_put_contents($configPath, $configContent);
        }

        $process = $this->runScript($tempDatadir->getTmpFolder());

        $this->assertMatchesSpecification($specification, $process, $tempDatadir->getTmpFolder());
    }

    /**
     * @return DatadirTestsProviderInterface[]
     */
    protected function getDataProviders(): array
    {
        return [
            new DatadirTestsProvider($this->getTestFileDir()),
        ];
    }

    protected function modifyConfigFile(string $content): string
    {
        return (string) preg_replace_callback('~\$\{([^{}]+)}~', function (array $m) {
            $var = $m[1];
            $parts = explode('::', $var);

            switch (true) {
                // Special OAUTH_DATA variable
                case $var === 'OAUTH_DATA':
                    return (string) addslashes((string) json_encode([
                        'access_token' => getenv('OAUTH_ACCESS_TOKEN'),
                        'refresh_token' => getenv('OAUTH_REFRESH_TOKEN'),
                    ]));

                case $var === 'FIXTURES_CATALOG::getSharePointSiteName':
                    $sharePointSiteName = $this->fixtures->getSharePointSiteName();
                    if (!$sharePointSiteName) {
                        throw new SkippedTestError('SharePoint environment is not set.');
                    }
                    return $sharePointSiteName;

                case $var === 'FIXTURES_CATALOG::getMeDriveId':
                    return $this->fixtures->getMeDriveId();

                // Get file's property from FixturesCatalog
                case $parts[0] === 'FIXTURES_CATALOG':
                    array_shift($parts);
                    $driveType = (string) array_shift($parts);
                    $fileConst = (string) array_shift($parts);
                    $method = (string) array_shift($parts);

                    // Get drive
                    switch ($driveType) {
                        case 'DRIVE':
                            $drive = $this->fixtures->getDrive();
                            break;

                        case 'ME_DRIVE':
                            $drive = $this->fixtures->getMeDrive();
                            break;

                        case 'SHAREPOINT_DRIVE':
                            $drive = $this->fixtures->getSharePointDrive();
                            break;

                        default:
                            throw new RuntimeException(sprintf('Unexpected drive type ""%s.', $driveType));
                    }

                    if (!$drive) {
                        throw new SkippedTestError('Required type of "drive" is not present.');
                    }

                    // Get file
                    $file = $drive->getFile($this->fixturesCatalogRef->getConstant($fileConst));

                    // Return file property
                    $args = array_map(fn($arg) => is_numeric($arg) ? (int) $arg : $arg, $parts);
                    return $file->{$method}(...$args);

                // Return environment variable
                default:
                    $value = getenv($var);
                    if (!$value) {
                        throw new RuntimeException(sprintf('Environment variable "%s" not found.', $var));
                    }
                    return $value;
            }
        }, $content);
    }

    protected function assertMatchesSpecification(
        DatadirTestSpecificationInterface $specification,
        Process $runProcess,
        string $tempDatadir
    ): void {
        // Remove state.json, we cannot check it, it contains a dynamic new tokens, see OAuthTest
        @unlink($tempDatadir . '/out/state.json');

        if ($specification->getExpectedReturnCode() !== null) {
            $this->assertProcessReturnCode($specification->getExpectedReturnCode(), $runProcess);
        } else {
            $this->assertNotSame(0, $runProcess->getExitCode(), 'Exit code should have been non-zero');
        }
        if ($specification->getExpectedStdout() !== null) {
            // Match format, not exact same
            $this->assertStringMatchesFormat(
                trim($specification->getExpectedStdout()),
                trim($runProcess->getOutput()),
                'Failed asserting stdout output'
            );
        }
        if ($specification->getExpectedStderr() !== null) {
            // Match format, not exact same
            $this->assertStringMatchesFormat(
                trim($specification->getExpectedStderr()),
                trim($runProcess->getErrorOutput()),
                'Failed asserting stderr output'
            );
        }
        if ($specification->getExpectedOutDirectory() !== null) {
            $this->assertDirectoryContentsSame(
                $specification->getExpectedOutDirectory(),
                $tempDatadir . '/out'
            );
        }
    }

    protected function getScript(): string
    {
        return $this->getTestFileDir() . '/../../src/run.php';
    }
}


================================================
File: tests/datadir/DatadirTestsProvider.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\DataDirTests;

use Keboola\DatadirTests\DatadirTestsFromDirectoryProvider;
use Keboola\DatadirTests\DatadirTestSpecification;
use Keboola\DatadirTests\DatadirTestSpecificationInterface;
use Symfony\Component\Finder\SplFileInfo;

class DatadirTestsProvider extends DatadirTestsFromDirectoryProvider
{
    private string $testDirectory;

    /** @var DatadirTestSpecification[][] */
    protected array $datapoints;

    public function __construct(string $testDirectory = 'tests/functional')
    {
        parent::__construct($testDirectory);
        $this->testDirectory = $testDirectory;
    }

    /**
     * @return DatadirTestSpecificationInterface[][]
     */
    public function __invoke(): array
    {
        $this->datapoints = [];
        $this->processDirectory($this->testDirectory);
        return $this->datapoints;
    }

    protected function processOneTest(SplFileInfo $testSuite): void
    {
        $workingDirectory = $testSuite->getPathname();

        $name = $testSuite->getBasename();
        $sourceDatadirDirectory = $workingDirectory . '/source/data';
        $expectedStdoutFile = $workingDirectory . '/expected-stdout';
        $expectedStdout = null;
        $expectedStderrFile = $workingDirectory . '/expected-stderr';
        $expectedStderr = null;
        $expectedReturnCodeFile = $workingDirectory . '/expected-code';
        $expectedReturnCode = null;
        $expectedOutputDirectory = null;
        $outTemplateDir = $workingDirectory . '/expected/data/out';

        // Added, load stdout from file
        if (file_exists($expectedStdoutFile)) {
            $expectedStdout = (string) file_get_contents($expectedStdoutFile);
        }

        // Added, load stderr from file
        if (file_exists($expectedStderrFile)) {
            $expectedStderr = (string) file_get_contents($expectedStderrFile);
        }

        if (file_exists($expectedReturnCodeFile)) {
            $returnCode = trim((string) file_get_contents($expectedReturnCodeFile));
            if (preg_match('~^[012]$~', $returnCode)) {
                $expectedReturnCode = (int) $returnCode;
            } else {
                throw new \InvalidArgumentException(sprintf(
                    '%s: Expecting invalid return code (%s). Possible codes are: 0, 1, 2.',
                    $name,
                    $returnCode
                ));
            }
        }

        if (file_exists($outTemplateDir)) {
            if (is_null($expectedReturnCode)) {
                $expectedReturnCode = 0;
            }
            $expectedOutputDirectory = $outTemplateDir;
        }

        $this->datapoints[$name] = [
            new DatadirTestSpecification(
                $sourceDatadirDirectory,
                $expectedReturnCode,
                $expectedStdout,
                $expectedStderr,
                $expectedOutputDirectory
            ),
        ];
    }
}


================================================
File: tests/datadir/extract-big-file/expected-stdout
================================================
Sheet header (A1:I1): %A
Number of rows in the sheet: 1 header + 833610
Configured rows limit: 17
Exporting range "A2:I6".
Exporting range "A7:I11".
Exporting range "A12:I16".
Exporting range "A17:I18".
Exported all 17 rows.


================================================
File: tests/datadir/extract-big-file/expected/data/out/tables/big-table.csv
================================================
"1990-04-01","100100","North Cape","Far North District","2","2","0","0","0"
"1990-04-01","100200","Rangaunu Harbour","Far North District","1","1","0","0","0"
"1990-04-01","100300","Inlets Far North District","Far North District","0","0","0","0","0"
"1990-04-01","100400","Karikari Peninsula","Far North District","2","2","0","0","0"
"1990-04-01","100500","Tangonge","Far North District","1","1","0","0","0"
"1990-04-01","100600","Ahipara","Far North District","2","2","0","0","0"
"1990-04-01","100700","Kaitaia East","Far North District","3","2","0","0","1"
"1990-04-01","100800","Kaitaia West","Far North District","0","0","0","0","0"
"1990-04-01","100900","Rangitihi","Far North District","0","0","0","0","0"
"1990-04-01","101000","Oruru-Parapara","Far North District","1","1","0","0","0"
"1990-04-01","101100","Taumarumaru","Far North District","2","2","0","0","0"
"1990-04-01","101200","Herekino-Takahue","Far North District","0","0","0","0","0"
"1990-04-01","101300","Peria","Far North District","0","0","0","0","0"
"1990-04-01","101400","Taemaro-Oruaiti","Far North District","0","0","0","0","0"
"1990-04-01","101500","Whakapaku","Far North District","0","0","0","0","0"
"1990-04-01","101600","Hokianga North","Far North District","0","0","0","0","0"
"1990-04-01","101700","Kohukohu-Broadwood","Far North District","0","0","0","0","0"


================================================
File: tests/datadir/extract-big-file/expected/data/out/tables/big-table.csv.manifest
================================================
{"columns":["month","SA2_code","SA2_name","territorial_authority","total_dwelling_units","houses","apartments","retirement_village_units","townhouses_flats_units_other"]}


================================================
File: tests/datadir/extract-big-file/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_BIG::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_BIG::getFileId}"
    },
    "worksheet": {
      "name":  "big-table",
      "id": "${FIXTURES_CATALOG::DRIVE::FILE_BIG::getWorksheetId::0}"
    },
    "rowsLimit": 17,
    "cellsPerBulk": 50
  }
}


================================================
File: tests/datadir/extract-empty-sheet/expected-stderr
================================================
Sheet is empty. Nothing was exported.


================================================
File: tests/datadir/extract-empty-sheet/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_EMPTY::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_EMPTY::getFileId}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-file-path-drive/expected/data/out/tables/sheet-table.csv
================================================
"A","B","C"
"D","E","F"


================================================
File: tests/datadir/extract-file-path-drive/expected/data/out/tables/sheet-table.csv.manifest
================================================
{"columns":["Col_1","Col_2","Col_3"]}


================================================
File: tests/datadir/extract-file-path-drive/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "search": "drive://${FIXTURES_CATALOG::getMeDriveId}/${FIXTURES_CATALOG::SHAREPOINT_DRIVE::FILE_ONE_SHEET::getPath}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-file-path-drive-me/expected/data/out/tables/sheet-table.csv
================================================
"A","B","C"
"D","E","F"


================================================
File: tests/datadir/extract-file-path-drive-me/expected/data/out/tables/sheet-table.csv.manifest
================================================
{"columns":["Col_1","Col_2","Col_3"]}


================================================
File: tests/datadir/extract-file-path-drive-me/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "search": "${FIXTURES_CATALOG::DRIVE::FILE_ONE_SHEET::getPath}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-file-path-drive-site/expected/data/out/tables/sheet-table.csv
================================================
"A","B","C"
"D","E","F"


================================================
File: tests/datadir/extract-file-path-drive-site/expected/data/out/tables/sheet-table.csv.manifest
================================================
{"columns":["Col_1","Col_2","Col_3"]}


================================================
File: tests/datadir/extract-file-path-drive-site/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "search": "site://${FIXTURES_CATALOG::getSharePointSiteName}/${FIXTURES_CATALOG::SHAREPOINT_DRIVE::FILE_ONE_SHEET::getPath}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-hidden-sheet/expected/data/out/tables/sheet-table.csv
================================================
"A","B","cell from hidden sheet"
"X","Y","Z"


================================================
File: tests/datadir/extract-hidden-sheet/expected/data/out/tables/sheet-table.csv.manifest
================================================
{"columns":["Col_4","Col_5","Col_6"]}


================================================
File: tests/datadir/extract-hidden-sheet/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_HIDDEN_SHEET::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_HIDDEN_SHEET::getFileId}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 2
    }
  }
}


================================================
File: tests/datadir/extract-invalid-drive-id/expected-code
================================================
1


================================================
File: tests/datadir/extract-invalid-drive-id/expected-stderr
================================================
API request failed, uri: "%A", response: "%A".
Bad request error. Please check configuration. It can be caused by typo in an ID, or resource doesn't exists.


================================================
File: tests/datadir/extract-invalid-drive-id/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "invalid_drive_id",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_EMPTY::getFileId}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-invalid-file-id/expected-code
================================================
1


================================================
File: tests/datadir/extract-invalid-file-id/expected-stderr
================================================
API request failed, uri: "%A", response: "%A".
Not found error. Please check configuration. It can be caused by typo in an ID, or resource doesn't exists.


================================================
File: tests/datadir/extract-invalid-file-id/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::getMeDriveId}",
      "fileId": "invalid_file_id"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-invalid-file-type/expected-code
================================================
1


================================================
File: tests/datadir/extract-invalid-file-type/expected-stderr
================================================
API request failed, uri: "%A", response: "%A".
It looks like the specified file is not in the "XLSX" Excel format. Error: "AccessDenied: Could not obtain a WAC access token."


================================================
File: tests/datadir/extract-invalid-file-type/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_ODT::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_ODT::getFileId}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-multiple-files-found/expected-code
================================================
1


================================================
File: tests/datadir/extract-multiple-files-found/expected-stderr
================================================
Multiple files %A found when searching for ".xlsx". Please use a more specific expression.


================================================
File: tests/datadir/extract-multiple-files-found/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "search": ".xlsx"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-not-found-drive-id/expected-code
================================================
1


================================================
File: tests/datadir/extract-not-found-drive-id/expected-stderr
================================================
API request failed, uri: "%A", response: "%A".
Bad request error. Please check configuration. It can be caused by typo in an ID, or resource doesn't exists.


================================================
File: tests/datadir/extract-not-found-drive-id/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "b!nZgsjp3RK0aRFp01PZWjKUicqho1KehCtKM1UhLEWybvgM_dt6mJRKV57vuJLf6P",
      "fileId": "03GQDMCCLEQDECJHR7CRF3WI7AB4GWJESQ"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-not-found-file-id/expected-code
================================================
1


================================================
File: tests/datadir/extract-not-found-file-id/expected-stderr
================================================
API request failed, uri: "%A", response: "%A".
Bad request error. Please check configuration. It can be caused by typo in an ID, or resource doesn't exists.


================================================
File: tests/datadir/extract-not-found-file-id/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::getMeDriveId}",
      "fileId": "03GQDMCCLEQDECJHR7CRF3WI7AB4GWJES1"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-only-header-file/expected/data/out/tables/sheet-table.csv.manifest
================================================
{"columns":["Col1","Col2","Col3","Col4"]}


================================================
File: tests/datadir/extract-only-header-file/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_ONLY_HEADER::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_ONLY_HEADER::getFileId}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-only-one-column/expected/data/out/tables/sheet-table.csv
================================================
"Row1"
"Row2"
"Row3"


================================================
File: tests/datadir/extract-only-one-column/expected/data/out/tables/sheet-table.csv.manifest
================================================
{"columns":["Col1"]}


================================================
File: tests/datadir/extract-only-one-column/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "search": "drive://${FIXTURES_CATALOG::getMeDriveId}/${FIXTURES_CATALOG::SHAREPOINT_DRIVE::FILE_ONLY_ONE_COLUMN::getPath}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-search-not-found/expected-code
================================================
1


================================================
File: tests/datadir/extract-search-not-found/expected-stderr
================================================
No file found when searching for "file_not_found_abc.xlsx".


================================================
File: tests/datadir/extract-search-not-found/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "search": "file_not_found_abc.xlsx"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-sharing-link/expected/data/out/tables/sheet-table.csv
================================================
"A","B","C"
"D","E","F"


================================================
File: tests/datadir/extract-sharing-link/expected/data/out/tables/sheet-table.csv.manifest
================================================
{"columns":["Col_1","Col_2","Col_3"]}


================================================
File: tests/datadir/extract-sharing-link/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "search": "${FIXTURES_CATALOG::SHAREPOINT_DRIVE::FILE_ONE_SHEET::getSharingLink}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-special-cases/expected/data/out/tables/sheet-table.csv
================================================
"A","10","(2x empty header)",""," $1,618.50 ","1/1/2014","(empty col)"
"B","20","a",""," $1,321.00 ","1/1/2014",""
"A","30","b",""," $2,178.00 ","1/6/2014","x"
"B","40","a",""," $888.00 ","1/6/2014","y"
"A","50","b",""," $2,470.00 ","1/6/2014","z"
"B","60","a",""," $1,513.00 ","1/12/2014",""
"A","70","b",""," $921.00 ","1/3/2014",""
"","","",""," $2,518.00 ","1/6/2014",""
"","","","","","",""
"","","",""," $1,545.00 ","",""


================================================
File: tests/datadir/extract-special-cases/expected/data/out/tables/sheet-table.csv.manifest
================================================
{"columns":["Duplicate","Duplicate-1","column-3","column-4","Special_123_uescr","column-6","column-7"]}


================================================
File: tests/datadir/extract-special-cases/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_SPECIAL_CASES::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_SPECIAL_CASES::getFileId}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-table-offset/expected/data/out/tables/sheet-table.csv
================================================
"Government","","Canada","","6","Carretera","None","1618.5","",""
"Government","","Germany","","7","Carretera","None","1321","",""
"Midmarket","","France","","8","Carretera","None","2178","","x"
"Midmarket","","Germany","","9","Carretera","None","888","","y"
"Midmarket","(empty header)","Mexico","(duplicate header)","(duplicate header)","Carretera","None","2470","","z"


================================================
File: tests/datadir/extract-table-offset/expected/data/out/tables/sheet-table.csv.manifest
================================================
{"columns":["Segment","column-2","Country","Duplicate","Duplicate-1","Product","Discount_Band","Units_Sold","column-9","column-10"]}


================================================
File: tests/datadir/extract-table-offset/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_TABLE_OFFSET::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_TABLE_OFFSET::getFileId}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 0
    }
  }
}


================================================
File: tests/datadir/extract-worksheet-by-id/expected-stdout
================================================
Sheet header (A1:C1): "Col_1", "Col_2", "Col_3"
Number of rows in the sheet: 1 header + 2
Exporting range "A2:C3".
Exported all 2 rows.


================================================
File: tests/datadir/extract-worksheet-by-id/expected/data/out/tables/sheet-table.csv
================================================
"A","B","C"
"D","E","F"


================================================
File: tests/datadir/extract-worksheet-by-id/expected/data/out/tables/sheet-table.csv.manifest
================================================
{"columns":["Col_1","Col_2","Col_3"]}


================================================
File: tests/datadir/extract-worksheet-by-id/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_ONE_SHEET::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_ONE_SHEET::getFileId}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "id": "${FIXTURES_CATALOG::DRIVE::FILE_ONE_SHEET::getWorksheetId::0}"
    }
  }
}


================================================
File: tests/datadir/extract-worksheet-id-not-found/expected-code
================================================
1


================================================
File: tests/datadir/extract-worksheet-id-not-found/expected-stderr
================================================
API request failed, uri: "%A", response: "%A".
Not found error. Please check configuration. It can be caused by typo in an ID, or resource doesn't exists.


================================================
File: tests/datadir/extract-worksheet-id-not-found/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_ONE_SHEET::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_ONE_SHEET::getFileId}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "id": "foo-bar-123"
    }
  }
}


================================================
File: tests/datadir/extract-worksheet-position-not-found/expected-code
================================================
1


================================================
File: tests/datadir/extract-worksheet-position-not-found/expected-stderr
================================================
No worksheet at position "1".


================================================
File: tests/datadir/extract-worksheet-position-not-found/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_ONE_SHEET::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_ONE_SHEET::getFileId}"
    },
    "worksheet": {
      "name":  "sheet-table",
      "position": 1
    }
  }
}


================================================
File: tests/datadir/get-worksheets-by-search/expected-stdout
================================================
{"worksheets":[{"position":0,"name":"Only One Sheet","title":"Only One Sheet","driveId":"%s","fileId":"%s","worksheetId":"%s","visible":true,"header":["Col_1","Col_2","Col_3"]}]}


================================================
File: tests/datadir/get-worksheets-by-search/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "search": "drive://${FIXTURES_CATALOG::getMeDriveId}/${FIXTURES_CATALOG::SHAREPOINT_DRIVE::FILE_ONE_SHEET::getPath}"
    }
  }
}


================================================
File: tests/datadir/get-worksheets-empty-sheet/expected-stdout
================================================
{"worksheets":[{"position":0,"name":"Sheet1","title":"Sheet1","driveId":"%s","fileId":"%s","worksheetId":"%s","visible":true,"header":[]}]}


================================================
File: tests/datadir/get-worksheets-empty-sheet/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_EMPTY::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_EMPTY::getFileId}"
    }
  }
}


================================================
File: tests/datadir/get-worksheets-hidden-sheet/expected-stdout
================================================
{"worksheets":[{"position":0,"name":"Sheet1","title":"Sheet1","driveId":"%s","fileId":"%s","worksheetId":"%s","visible":true,"header":["Col_1","Col_2","Col_3"]},{"position":1,"name":"Zo\u0161it 2","title":"Zo\u0161it 2","driveId":"%s","fileId":"%s","worksheetId":"%s","visible":true,"header":["Col_1","Col_2","Col_3"]},{"position":2,"name":"Hidden Sheet 3","title":"Hidden Sheet 3 (hidden)","driveId":"%s","fileId":"%s","worksheetId":"%s","visible":false,"header":["Col_4","Col_5","Col_6"]},{"position":3,"name":"sheet=4","title":"sheet=4","driveId":"%s","fileId":"%s","worksheetId":"%s","visible":true,"header":["Col_1","Col_2","Col_3"]}]}


================================================
File: tests/datadir/get-worksheets-hidden-sheet/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_HIDDEN_SHEET::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_HIDDEN_SHEET::getFileId}"
    }
  }
}


================================================
File: tests/datadir/get-worksheets-invalid-drive-id/expected-code
================================================
1


================================================
File: tests/datadir/get-worksheets-invalid-drive-id/expected-stderr
================================================
API request failed, uri: "%A", response: "%A".
Bad request error. Please check configuration. It can be caused by typo in an ID, or resource doesn't exists.


================================================
File: tests/datadir/get-worksheets-invalid-drive-id/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "driveId": "invalid_drive_id",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_EMPTY::getFileId}"
    }
  }
}


================================================
File: tests/datadir/get-worksheets-invalid-file-id/expected-code
================================================
1


================================================
File: tests/datadir/get-worksheets-invalid-file-id/expected-stderr
================================================
API request failed, uri: "%A", response: "%A".
Not found error. Please check configuration. It can be caused by typo in an ID, or resource doesn't exists.


================================================
File: tests/datadir/get-worksheets-invalid-file-id/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::getMeDriveId}",
      "fileId": "invalid_file_id"
    }
  }
}


================================================
File: tests/datadir/get-worksheets-invalid-file-type/expected-code
================================================
1


================================================
File: tests/datadir/get-worksheets-invalid-file-type/expected-stderr
================================================
API request failed, uri: "%A", response: "%A".
It looks like the specified file is not in the "XLSX" Excel format. Error: "AccessDenied: Could not obtain a WAC access token."


================================================
File: tests/datadir/get-worksheets-invalid-file-type/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_ODT::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_ODT::getFileId}"
    }
  }
}


================================================
File: tests/datadir/get-worksheets-many-sheets/expected-stdout
================================================
{"worksheets":[{%A"Sheet1"%A"Sheet25"%A}]}


================================================
File: tests/datadir/get-worksheets-many-sheets/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_MANY_SHEETS::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_MANY_SHEETS::getFileId}"
    }
  }
}


================================================
File: tests/datadir/get-worksheets-not-found-drive-id/expected-code
================================================
1


================================================
File: tests/datadir/get-worksheets-not-found-drive-id/expected-stderr
================================================
API request failed, uri: "%A", response: "%A".
Bad request error. Please check configuration. It can be caused by typo in an ID, or resource doesn't exists.


================================================
File: tests/datadir/get-worksheets-not-found-drive-id/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "driveId": "b!nZgsjp3RK0aRFp01PZWjKUicqho1KehCtKM1UhLEWybvgM_dt6mJRKV57vuJLf6P",
      "fileId": "03GQDMCCLEQDECJHR7CRF3WI7AB4GWJESQ"
    }
  }
}


================================================
File: tests/datadir/get-worksheets-not-found-file-id/expected-code
================================================
1


================================================
File: tests/datadir/get-worksheets-not-found-file-id/expected-stderr
================================================
API request failed, uri: "%A", response: "%A".
Bad request error. Please check configuration. It can be caused by typo in an ID, or resource doesn't exists.


================================================
File: tests/datadir/get-worksheets-not-found-file-id/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::getMeDriveId}",
      "fileId": "03GQDMCCLEQDECJHR7CRF3WI7AB4GWJES1"
    }
  }
}


================================================
File: tests/datadir/get-worksheets-one-sheet/expected-stdout
================================================
{"worksheets":[{"position":0,"name":"Only One Sheet","title":"Only One Sheet","driveId":"%s","fileId":"%s","worksheetId":"%s","visible":true,"header":["Col_1","Col_2","Col_3"]}]}


================================================
File: tests/datadir/get-worksheets-one-sheet/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "getWorksheets",
  "parameters": {
    "workbook": {
      "driveId": "${FIXTURES_CATALOG::DRIVE::FILE_ONE_SHEET::getDriveId}",
      "fileId": "${FIXTURES_CATALOG::DRIVE::FILE_ONE_SHEET::getFileId}"
    }
  }
}


================================================
File: tests/datadir/search-by-text-not-found/expected-stdout
================================================
{"files":[]}


================================================
File: tests/datadir/search-by-text-not-found/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "search",
  "parameters": {
    "workbook": {
      "search": "file_not_found_abc.xlsx"
    }
  }
}


================================================
File: tests/datadir/search-by-text-only-ext/expected-stdout
================================================
{"files":[%s]}


================================================
File: tests/datadir/search-by-text-only-ext/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "search",
  "parameters": {
    "workbook": {
      "search": ".xlsx"
    }
  }
}


================================================
File: tests/datadir/search-file-path-drive/expected-stdout
================================================
{"files":[{"driveId":"%s","fileId":"%s","name":"one_sheet.xlsx","path":"__ex-onedrive-test-folder\/valid"}]}


================================================
File: tests/datadir/search-file-path-drive/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "search",
  "parameters": {
    "workbook": {
      "search": "drive://${FIXTURES_CATALOG::getMeDriveId}/${FIXTURES_CATALOG::SHAREPOINT_DRIVE::FILE_ONE_SHEET::getPath}"
    }
  }
}


================================================
File: tests/datadir/search-file-path-drive-me/expected-stdout
================================================
{"files":[{"driveId":"%s","fileId":"%s","name":"one_sheet.xlsx","path":"my\/__ex-onedrive-test-folder\/valid"}]}


================================================
File: tests/datadir/search-file-path-drive-me/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "search",
  "parameters": {
    "workbook": {
      "search": "${FIXTURES_CATALOG::DRIVE::FILE_ONE_SHEET::getPath}"
    }
  }
}


================================================
File: tests/datadir/search-file-path-drive-site/expected-stdout
================================================
{"files":[{"driveId":"%s","fileId":"%s","name":"one_sheet.xlsx","path":"sites\/%s\/__ex-onedrive-test-folder\/valid"}]}


================================================
File: tests/datadir/search-file-path-drive-site/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "search",
  "parameters": {
    "workbook": {
      "search": "site://${FIXTURES_CATALOG::getSharePointSiteName}/${FIXTURES_CATALOG::SHAREPOINT_DRIVE::FILE_ONE_SHEET::getPath}"
    }
  }
}


================================================
File: tests/datadir/search-sharing-link/expected-stdout
================================================
{"files":[{"driveId":"%s","fileId":"%s","name":"one_sheet.xlsx","path":"__ex-onedrive-test-folder\/valid"}]}


================================================
File: tests/datadir/search-sharing-link/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "${OAUTH_DATA}",
        "#appSecret": "${OAUTH_APP_SECRET}",
        "appKey": "${OAUTH_APP_ID}"
      }
    }
  },
  "action": "search",
  "parameters": {
    "workbook": {
      "search": "${FIXTURES_CATALOG::SHAREPOINT_DRIVE::FILE_ONE_SHEET::getSharingLink}"
    }
  }
}


================================================
File: tests/fixtures/Drive.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Fixtures;

use InvalidArgumentException;

class Drive
{
    private string $driveId;

    private array $files = [];

    public function __construct(string $driveId, array $files)
    {
        assert(strlen($driveId) > 0);
        $this->driveId = $driveId;
        $this->files = $files;
    }

    public function getDriveId(): string
    {
        return $this->driveId;
    }

    public function getFile(string $path): File
    {
        if (isset($this->files[$path])) {
            return $this->files[$path];
        }
        throw new InvalidArgumentException(sprintf('Fixture file "%s" not found.', $path));
    }

    public function addFile(File $file): void
    {
        $this->files[$file->getPath()] = $file;
    }
}


================================================
File: tests/fixtures/File.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Fixtures;

use RuntimeException;

class File
{
    private string $path;

    private string $driveId;

    private string $fileId;

    private string $sharingLink;

    private array $worksheetIds;

    public function __construct(string $path, string $driveId, string $fileId, string $sharingLink, array $worksheetIds)
    {
        assert(strlen($path) > 0);
        assert(strlen($driveId) > 0);
        assert(strlen($fileId) > 0);
        assert(strlen($sharingLink) > 0);
        $this->path = $path;
        $this->driveId = $driveId;
        $this->fileId = $fileId;
        $this->sharingLink = $sharingLink;
        $this->worksheetIds = $worksheetIds;
    }

    public function getPath(): string
    {
        return $this->path;
    }

    public function getName(): string
    {
        return basename($this->path);
    }

    public function getNameWithoutExt(): string
    {
        return pathinfo($this->path, PATHINFO_FILENAME);
    }

    public function getDir(): string
    {
        return dirname($this->path);
    }

    public function getDriveId(): string
    {
        return $this->driveId;
    }

    public function getFileId(): string
    {
        return $this->fileId;
    }

    public function getSharingLink(): string
    {
        return $this->sharingLink;
    }

    public function getWorksheetId(int $position): string
    {
        if (empty($this->worksheetIds)) {
            throw new RuntimeException(sprintf('File "%s" has no worksheets.', $this->getPath()));
        }

        if (!isset($this->worksheetIds[$position])) {
            throw new RuntimeException(sprintf('File "%s" has no worksheet "%d".', $this->getPath(), $position));
        }

        return $this->worksheetIds[$position];
    }
}


================================================
File: tests/fixtures/FixturesApi.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Fixtures;

use ArrayObject;
use GuzzleHttp\Exception\RequestException;
use Keboola\OneDriveExtractor\Api\Api;
use Keboola\OneDriveExtractor\Api\GraphApiFactory;
use Keboola\OneDriveExtractor\Api\Helpers;
use Keboola\OneDriveExtractor\Auth\TokenDataManager;
use Keboola\OneDriveExtractor\Exception\BatchRequestException;
use Keboola\OneDriveExtractor\Auth\RefreshTokenProvider;
use Microsoft\Graph\Graph;
use Microsoft\Graph\Http\GraphResponse;
use Retry\BackOff\ExponentialBackOffPolicy;
use Retry\Policy\CallableRetryPolicy;
use Retry\RetryProxy;

class FixturesApi
{
    private Graph $graphApi;

    public function __construct()
    {
        $this->graphApi = $this->createGraphApi();
    }

    public function getGraph(): Graph
    {
        return $this->graphApi;
    }

    public function get(string $uri, array $params = []): GraphResponse
    {
        return $this->executeWithRetry('GET', $uri, $params);
    }

    public function post(string $uri, array $params = [], array $body = []): GraphResponse
    {
        return $this->executeWithRetry('POST', $uri, $params, $body);
    }

    public function delete(string $uri, array $params = []): GraphResponse
    {
        return $this->executeWithRetry('DELETE', $uri, $params);
    }

    public function executeWithRetry(string $method, string $uri, array $params = [], array $body = []): GraphResponse
    {
        $backOffPolicy = new ExponentialBackOffPolicy(100, 2.0, 2000);
        $retryPolicy = new CallableRetryPolicy(function (\Throwable $e) {
            if ($e instanceof RequestException || $e instanceof BatchRequestException) {
                // Retry only on defined HTTP codes
                if (in_array($e->getCode(), Api::RETRY_HTTP_CODES, true)) {
                    return true;
                }

                // Retry if communication problems
                if (str_contains(
                    $e->getMessage(),
                    'There were communication or server problems',
                )) {
                    return true;
                }

                // Retry on possible transient session error
                if (str_contains(
                    $e->getMessage(),
                    'The session specified in the request does not exist or is invalid due to a transient error.',
                )) {
                    return true;
                }
            }

            return false;
        });

        $proxy = new RetryProxy($retryPolicy, $backOffPolicy);
        return $proxy->call(function () use ($method, $uri, $params, $body) {
            return $this->execute($method, $uri, $params, $body);
        });
    }

    public function execute(string $method, string $uri, array $params = [], array $body = []): GraphResponse
    {
        $uri = Helpers::replaceParamsInUri($uri, $params);
        $request = $this->graphApi->createRequest($method, $uri);
        if ($body) {
            $request->attachBody($body);
        }

        try {
            return $request->execute();
        } catch (RequestException $e) {
            throw Helpers::processRequestException($e);
        }
    }

    public function pathToUrl(string $driveId, string $path): string
    {
        $driveId = urlencode($driveId);
        $path = Helpers::convertPathToApiFormat($path);
        return "/drives/{$driveId}/root{$path}";
    }

    private function createGraphApi(): Graph
    {
        $appId = (string) getenv('OAUTH_APP_ID');
        $appSecret = (string) getenv('OAUTH_APP_SECRET');
        $accessToken = (string) getenv('OAUTH_ACCESS_TOKEN');
        $refreshToken = (string) getenv('OAUTH_REFRESH_TOKEN');
        $oauthData = [
                'access_token' => $accessToken,
                'refresh_token' => $refreshToken,
            ];
        $dataManager = new TokenDataManager($oauthData, new ArrayObject());
        $tokenProvider = new RefreshTokenProvider($appId, $appSecret, $dataManager);
        $apiFactory = new GraphApiFactory();
        return $apiFactory->create($tokenProvider->get());
    }
}


================================================
File: tests/fixtures/FixturesCatalog.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Fixtures;

use RuntimeException;

/**
 * This class stores metadata about fixtures stored in OneDrive.
 * Fixtures are uploaded at initialization from bootstrap.php.
 * Then are metadata loaded from file in functional tests.
 */
class FixturesCatalog
{
    public const
        CATALOG_FILE = __DIR__ . '/.fixturesCatalog',
        BASE_DIR = '/__ex-onedrive-test-folder',
        // Valid
        FILE_EMPTY = self::BASE_DIR . '/valid/empty.xlsx',
        FILE_HIDDEN_SHEET = self::BASE_DIR . '/valid/hidden_sheet.xlsx',
        FILE_ONE_SHEET = self::BASE_DIR . '/valid/one_sheet.xlsx',
        FILE_MANY_SHEETS = self::BASE_DIR . '/valid/many_sheets.xlsx',
        FILE_ONLY_HEADER = self::BASE_DIR . '/valid/only_header.xlsx',
        FILE_ONLY_ONE_COLUMN = self::BASE_DIR . '/valid/only_one_column.xlsx',
        FILE_SPECIAL_CASES = self::BASE_DIR . '/valid/special_cases.xlsx',
        FILE_TABLE_OFFSET = self::BASE_DIR . '/valid/table_offset.xlsx',
        FILE_BIG = self::BASE_DIR . '/valid/big.xlsx',
        // Invalid
        FILE_CSV = self::BASE_DIR . '/invalid/csv_type.csv',
        FILE_ODS = self::BASE_DIR . '/invalid/ods_type.ods',
        FILE_ODT = self::BASE_DIR . '/invalid/odt_type.odt',
        FILE_XLS = self::BASE_DIR . '/invalid/xls_type.xls';

    private Drive $meDrive;

    private ?string $sharePointSiteName;

    private ?Drive $sharePointDrive;

    private string $envHash;

    public static function initialize(): void
    {
        // Initialization is slow, run only once
        $envHash = self::generateEnvHash();
        if (file_exists(self::CATALOG_FILE)) {
            $catalog = self::load();
            if ($envHash === $catalog->getEnvHash()) {
                // No changes in environment => initialization is not needed
                return;
            }
        }

        $utils = new FixturesUtils();

        // Info
        FixturesUtils::log('');
        FixturesUtils::log('Uploading fixtures to OneDrive');
        FixturesUtils::log('PLEASE CLOSE ALL OPENED FILES ON OneDrive!!!');

        // Me drive
        $meDriveId = $utils->getMeDriveId();
        FixturesUtils::log('');
        FixturesUtils::log('Uploading fixtures to me Drive:');
        $meDriveFiles = iterator_to_array($utils->uploadRecursive($meDriveId, __DIR__ . '/data'));
        $meDrive = new Drive($meDriveId, $meDriveFiles);

        // Share point drive
        /** @var string|null $sharePointSiteName */
        $sharePointSiteName = getenv('TEST_SHAREPOINT_SITE') ?: null;
        if ($sharePointSiteName) {
            FixturesUtils::log('');
            FixturesUtils::log('Env variable TEST_SHAREPOINT_SITE is set.');
            FixturesUtils::log("Loading drive id for SharePoint site: \"{$sharePointSiteName}\"");
            FixturesUtils::log('Uploading fixtures to SharePoint drive:');
            $sharePointDriveId = $utils->getSharePointSiteDriveId($sharePointSiteName);
            $sharePointDriveFiles = iterator_to_array($utils->uploadRecursive($sharePointDriveId, __DIR__ . '/data'));
            $sharePointDrive = new Drive($sharePointDriveId, $sharePointDriveFiles);
        } else {
            FixturesUtils::log('');
            FixturesUtils::log('Env variable TEST_SHAREPOINT_SITE is not set.');
            FixturesUtils::log('SKIPPED upload of fixtures to SharePoint drive.');
            $sharePointSiteName = null;
            $sharePointDrive = null;
        }

        $catalog = new self($meDrive, $sharePointSiteName, $sharePointDrive, $envHash);
        $catalog->store();

        FixturesUtils::log('Sleep 300s');
        sleep(300);
    }

    public static function load(): self
    {
        if (!file_exists(self::CATALOG_FILE)) {
            throw new RuntimeException(
                'FixturesCatalog is not initialized. You should call initialize() from bootstrap.php.'
            );
        }

        $catalog = unserialize((string) file_get_contents(self::CATALOG_FILE));
        assert($catalog instanceof self);
        return $catalog;
    }

    public function store(): void
    {
        file_put_contents(self::CATALOG_FILE, serialize($this));
    }

    protected function __construct(Drive $meDrive, ?string $siteName, ?Drive $siteDrive, string $envHash)
    {
        $this->meDrive = $meDrive;
        $this->sharePointSiteName = $siteName;
        $this->sharePointDrive = $siteDrive;
        $this->envHash = $envHash;
    }

    public function getDrive(): Drive
    {
        return $this->getSharePointDrive() ?? $this->getMeDrive();
    }

    public function getMeDrive(): Drive
    {
        return $this->meDrive;
    }

    public function getMeDriveId(): string
    {
        return $this->meDrive->getDriveId();
    }

    public function getSharePointSiteName(): ?string
    {
        return $this->sharePointSiteName;
    }

    public function getSharePointDrive(): ?Drive
    {
        return $this->sharePointDrive;
    }

    public function getEnvHash(): string
    {
        return $this->envHash;
    }

    private static function generateEnvHash(): string
    {
        $envFingerPrint = getenv('TEST_SHAREPOINT_SITE') ?? ''; // TEST_SHAREPOINT_SITE is optional

        $requiredEnVars = [
            'OAUTH_APP_NAME',
            'OAUTH_APP_ID',
            'OAUTH_APP_SECRET',
            'OAUTH_ACCESS_TOKEN',
            'OAUTH_REFRESH_TOKEN',
        ];

        // Check environment and create env hash
        foreach ($requiredEnVars as $var) {
            $value = getenv($var);
            if (empty($value)) {
                throw new \Exception(sprintf('Missing environment var "%s".', $var));
            }
            $envFingerPrint .= $var . ':' . $value . '|';
        }

        return md5($envFingerPrint);
    }
}


================================================
File: tests/fixtures/FixturesUtils.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Fixtures;

use Iterator;
use Throwable;
use RuntimeException;
use GuzzleHttp\Exception\ClientException;
use Microsoft\Graph\Model;
use Symfony\Component\Finder\Finder;

class FixturesUtils
{
    private static bool $logEnabled = true;

    private FixturesApi $api;

    public static function disableLog(): void
    {
        self::$logEnabled = false;
    }

    public function __construct()
    {
        $this->api = new FixturesApi();
    }

    public function getMeDriveId(): string
    {
        $body = $this->api->get('/me/drive?$select=id')->getBody();
        return $body['id'];
    }

    public function getSharePointSiteDriveId(string $siteName): string
    {
        // Load site
        $siteName = urlencode($siteName);
        $body = $this->api->get('/sites?search={siteName}&$select=id,name', ['siteName' => $siteName])->getBody();
        $sites = $body['value'];
        if (count($body['value']) === 0) {
            throw new RuntimeException(sprintf(
                'SharePoint site "%s" not found.',
                $siteName
            ));
        } elseif (count($body['value']) > 1) {
            throw new RuntimeException(sprintf(
                'Multiple SharePoint sites "%s" found when searching for "%s".',
                implode('", "', array_map(fn(array $site) => $site['name'], $sites)),
                $siteName
            ));
        }

        // Load drive id
        $siteId = urlencode($body['value'][0]['id']);
        $body = $this->api->get('/sites/{siteId}/drive?$select=id', ['siteId' => $siteId])->getBody();
        return $body['id'];
    }

    public function uploadRecursive(string $driveId, string $relativePath): Iterator
    {
        // Upload file structure, folders are created automatically
        $finder = new Finder();
        foreach ($finder->files()->in($relativePath)->getIterator() as $item) {
            $localPath = $item->getPathname();
            $relativePath = '/' . $item->getRelativePath();
            $relativePath = $relativePath !== '/' ? $relativePath : '';
            $name = $item->getFilename();

            // API sometimes accidentally returns an error, retry!
            $retry = 3;
            while (true) {
                try {
                    yield from $this->uploadFile($driveId, $localPath, $relativePath, $name);
                    break;
                } catch (Throwable $e) {
                    // Delete file, can be partially uploaded
                    if ($retry === 3) {
                        try {
                            $url = $this->api->pathToUrl($driveId, $relativePath . '/' . $name);
                            $this->api->delete($url);
                        } catch (Throwable $e) {
                            // ignore if file not exits
                        }
                    }

                    if ($retry-- <= 0) {
                        var_dump($e);
                        throw $e;
                    }
                }
            }
        }
    }

    private function uploadFile(string $driveId, string $localPath, string $relativePath, string $name): Iterator
    {
        // The size of each byte range MUST be a multiple of 320 KiB
        // https://docs.microsoft.com/cs-cz/graph/api/driveitem-createuploadsession?view=graph-rest-1.0#upload-bytes-to-the-upload-session
        $uploadFragSize = 3200 * 1024; // 3.2 MiB
        $fileSize = filesize($localPath);
        $path = $relativePath . '/' . $name;
        $url = $this->api->pathToUrl($driveId, $relativePath . '/' . $name);

        // Create upload session
        /** @var Model\UploadSession $uploadSession */
        $uploadSession = $this
            ->api
            ->getGraph()
            ->createRequest('POST', $url . 'createUploadSession')
            ->attachBody(['@microsoft.graph.conflictBehavior'=> 'replace' ])
            ->setReturnType(Model\UploadSession::class)
            ->setTimeout('1000')
            ->execute();
        $uploadUrl = $uploadSession->getUploadUrl();

        // Upload file in parts
        $file = fopen($localPath, 'r');
        if (!$file) {
            throw new RuntimeException(sprintf('Cannot open file "%s".', $localPath));
        }

        FixturesUtils::log(sprintf('"%s" - uploading ...', $path));

        try {
            while (!feof($file)) {
                $start = ftell($file);
                $data = fread($file, $uploadFragSize);
                $end = ftell($file);
                $uploadSession = $this
                    ->api
                    ->getGraph()
                    ->createRequest('PUT', $uploadUrl)
                    ->addHeaders([
                        'Authorization' => '',
                        'Content-Length' => $end - $start,
                        'Content-Range' => sprintf('bytes %d-%d/%d', $start, $end-1, $fileSize),
                    ])
                    ->attachBody($data)
                    ->setReturnType(Model\UploadSession::class)
                    ->setTimeout('1000')
                    ->execute() ?? $uploadSession;
                $uploadUrl = $uploadSession->getUploadUrl() ?? $uploadUrl;
                echo '.';
            }
        } finally {
            fclose($file);
        }

        // Uploaded
        $fileId = $uploadSession->getId();
        FixturesUtils::log(sprintf('"%s" - uploaded', $path));

        // Create sharing link (for search by url tests)
        $linkBody = $this->api
            ->post($url . 'createLink', [], ['type' => 'view', 'scope' => 'organization'])
            ->getBody();
        $sharingLink = $linkBody['link']['webUrl'];
        FixturesUtils::log(sprintf('"%s" - created sharing link', $path));

        // Load worksheets if XLSX file
        $worksheets = iterator_to_array($this->loadWorksheets($path, $driveId, $fileId));
        yield $path => new File($path, $driveId, $fileId, $sharingLink, $worksheets);
    }

    private function loadWorksheets(string $path, string $driveId, string $fileId): Iterator
    {
        if (preg_match('~\.xlsx$~', $path)) {
            $body = $this
                ->api
                ->get(
                    '/drives/{driveId}/items/{fileId}/workbook/worksheets?$select=id,position',
                    ['driveId' => $driveId, 'fileId' => $fileId]
                )
                ->getBody();
            foreach ($body['value'] as $item) {
                yield $item['position'] => $item['id'];
            }
            FixturesUtils::log(sprintf('"%s" - loaded worksheet ids', $path));
        }
    }

    public static function log(string $text): void
    {
        if (self::$logEnabled) {
            echo empty($text) ? "\n" : "FixturesUtils: {$text}\n";
        }
    }
}


================================================
File: tests/fixtures/data/__ex-onedrive-test-folder/invalid/csv_type.csv
================================================
,Segment,,Country,Duplicate,Duplicate, Product , Discount Band , Units Sold ,,
,Government,,Canada,,6, Carretera , None ," $1 618,50 ",,
,Government,,Germany,,7, Carretera , None ," $1 321,00 ",,
,Midmarket,,France,,8, Carretera , None ," $2 178,00 ",,
,Midmarket,,Germany,,9, Carretera , None ," $888,00 ",,
,Midmarket,(empty header),Mexico,(duplicate header),(duplicate header), Carretera , None ," $2 470,00 ",,
,Government,,Germany,1,, Carretera , None ," $1 513,00 ",,
,Midmarket,,Germany,2,, Montana , None ," $921,00 ",,
,Channel Partners,,Canada,3,, Montana , None ," $2 518,00 ",,x
,Government,,France,4,, Montana , None ," $1 899,00 ",,y
,Channel Partners,,Germany,5,, Montana , None ," $1 545,00 ",,z


================================================
File: tests/phpunit/HelpersTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Tests;

use Keboola\OneDriveExtractor\Api\Helpers;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

class HelpersTest extends TestCase
{
    private const
        TYPE_FILE_PATH = 'file_path',
        TYPE_DRIVE_FILE_PATH = 'drive_file_path',
        TYPE_SITE_FILE_PATH = 'site_file_path',
        TYPE_HTTPS_URL = 'https_url',
        TYPE_INVALID = 'invalid';

    /**
     * @dataProvider getInputs
     */
    public function testIsFilePath(string $type, string $path): void
    {
        Assert::assertSame($type === self::TYPE_FILE_PATH, Helpers::isFilePath($path));
    }

    /**
     * @dataProvider getInputs
     */
    public function testIsDriveFilePath(string $type, string $path): void
    {
        Assert::assertSame($type === self::TYPE_DRIVE_FILE_PATH, Helpers::isDriveFilePath($path));
    }

    /**
     * @dataProvider getInputs
     */
    public function testIsSiteFilePath(string $type, string $path): void
    {
        Assert::assertSame($type === self::TYPE_SITE_FILE_PATH, Helpers::isSiteFilePath($path));
    }

    /**
     * @dataProvider getInputs
     */
    public function testIsHttpsUrl(string $type, string $path): void
    {
        Assert::assertSame($type === self::TYPE_HTTPS_URL, Helpers::isHttpsUrl($path));
    }

    /**
     * @dataProvider getDriveFilePaths
     */
    public function testExplodeDriveFilePath(array $expected, string $input): void
    {
        Assert::assertSame($expected, Helpers::explodeDriveFilePath($input));
    }

    /**
     * @dataProvider getSiteFilePaths
     */
    public function testExplodeSiteFilePath(array $expected, string $input): void
    {
        Assert::assertSame($expected, Helpers::explodeSiteFilePath($input));
    }

    /**
     * @dataProvider getReplaceParamsInUriInputs
     */
    public function testReplaceParamsInUri(string $uri, array $params, string $expectedUri): void
    {
        Assert::assertSame($expectedUri, Helpers::replaceParamsInUri($uri, $params));
    }

    /**
     * @dataProvider getApiPathInputs
     */
    public function testConvertPathToApiFormat(string $input, string $expected): void
    {
        Assert::assertSame($expected, Helpers::convertPathToApiFormat($input));
    }

    /**
     * @dataProvider getToAsciiInputs
     */
    public function testToAscii(string $intput, string $expected): void
    {
        Assert::assertSame($expected, Helpers::toAscii($intput));
    }

    /**
     * @dataProvider getStringsForTruncate
     */
    public function testTruncate(string $intput, int $maxLength, string $expected): void
    {
        Assert::assertSame($expected, Helpers::truncate($intput, $maxLength));
    }

    /**
     * @dataProvider getIterables
     */
    public function testFormatIterable(iterable $values, int $maxItems, string $expected): void
    {
        Assert::assertSame($expected, Helpers::formatIterable($values, $maxItems, 10));
    }

    /**
     * @dataProvider getColumns
     */
    public function testColumnStrToInt(int $expected, string $input): void
    {
        Assert::assertSame($expected, Helpers::columnStrToInt($input));
    }

    public function getInputs(): array
    {
        return [
            [self::TYPE_INVALID, ''],
            [self::TYPE_INVALID, '/'],
            [self::TYPE_INVALID, '/foo/'],
            [self::TYPE_INVALID, '/foo/bar/'],
            [self::TYPE_INVALID, '/special_chars/abc123čřž#$%_-/bar/'],
            [self::TYPE_INVALID, 'special_chars/abc123čřž#$%_-/bar/'],
            [self::TYPE_INVALID, 'site://foo'],
            [self::TYPE_INVALID, 'site://foo.xlsx'],
            [self::TYPE_INVALID, 'file'],
            [self::TYPE_INVALID, 'file.xlsx'],
            [self::TYPE_FILE_PATH, '/file'],
            [self::TYPE_FILE_PATH, '/file.xlsx'],
            [self::TYPE_FILE_PATH, '/some/path/file.xlsx'],
            [self::TYPE_FILE_PATH, 'some/path/file.xlsx'],
            [self::TYPE_FILE_PATH, '/some/path1/path2/file.xlsx'],
            [self::TYPE_FILE_PATH, 'some/path1/path2/file.xlsx'],
            [self::TYPE_FILE_PATH, '/some/path1/path2/file.ext1.ext2'],
            [self::TYPE_FILE_PATH, '/dir with space/foo bar/bar'],
            [self::TYPE_FILE_PATH, 'dir with space/foo bar/bar'],
            [self::TYPE_FILE_PATH, '/special_chars/abc123čřž#$%_-/bar'],
            [self::TYPE_FILE_PATH, 'special_chars/abc123čřž#$%_-/bar'],
            [self::TYPE_FILE_PATH, '/special_chars/abc123čřž#$%_-/abc123čřž#$%_-'],
            [self::TYPE_FILE_PATH, 'special_chars/abc123čřž#$%_-/barabc123čřž#$%_-'],
            [self::TYPE_DRIVE_FILE_PATH, 'drive://1234driveId5678/some/path/file'],
            [self::TYPE_DRIVE_FILE_PATH, 'drive://1234driveId5678/ssome/path/file.xlsx'],
            [self::TYPE_DRIVE_FILE_PATH, 'drive://1234driveId5678/ssome/path1/path2/file.xlsx'],
            [self::TYPE_DRIVE_FILE_PATH, 'drive://1234driveId5678/ssome/path1/path2/file.ext1.ext2'],
            [self::TYPE_SITE_FILE_PATH, 'site://site/some/path/file'],
            [self::TYPE_SITE_FILE_PATH, 'site://site/some/path/file.xlsx'],
            [self::TYPE_SITE_FILE_PATH, 'site://site/some/path1/path2/file.xlsx'],
            [self::TYPE_SITE_FILE_PATH, 'site://site/some/path1/path2/file.ext1.ext2'],
            [self::TYPE_SITE_FILE_PATH, 'site://site name with spaces/dir/file'],
            [self::TYPE_SITE_FILE_PATH, 'site://site name with spaces/dir/file.xlsx'],
            [self::TYPE_SITE_FILE_PATH, 'site://special chars abc123čřž#$%_-/dir/file'],
            [self::TYPE_SITE_FILE_PATH, 'site://special chars abc123čřž#$%_-/dir/file.xlsx'],
            [self::TYPE_SITE_FILE_PATH, 'site://special chars abc123čřž#$%_-/abc123 čřž#$%_-'],
            [self::TYPE_SITE_FILE_PATH, 'site://special chars abc123čřž#$%_-/abc123 čřž#$%_-.xlsx'],
            [self::TYPE_HTTPS_URL, 'https://foo'],
            [self::TYPE_HTTPS_URL, 'https://foo.xlsx'],
            [self::TYPE_HTTPS_URL, 'https://some/path2/file.xlsx'],
            [self::TYPE_HTTPS_URL, 'https://some/path1/path2/file.xlsx'],
            [self::TYPE_HTTPS_URL, 'https://some/path1/path2/file.ext1.ext2'],
        ];
    }

    public function getDriveFilePaths(): array
    {
        return [
            [
                ['1234driveId5678', 'some/path/file'],
                'drive://1234driveId5678/some/path/file',
            ],
            [
                ['1234driveId5678', 'path/file.xlsx'],
                'drive://1234driveId5678/path/file.xlsx',
            ],
            [
                ['1234driveId5678', 'path1/path2/file.xlsx'],
                'drive://1234driveId5678/path1/path2/file.xlsx',
            ],
        ];
    }

    public function getSiteFilePaths(): array
    {
        return [
            [
                ['some', 'path/file'],
                'site://some/path/file',
            ],
            [
                ['some', 'path/file.xlsx'],
                'site://some/path/file.xlsx',
            ],
            [
                ['some', 'path1/path2/file.xlsx'],
                'site://some/path1/path2/file.xlsx',
            ],
            [
                ['site name with spaces', 'dir/file'],
                'site://site name with spaces/dir/file',
            ],
            [
                ['site name with spaces', 'dir/file.xlsx'],
                'site://site name with spaces/dir/file.xlsx',
            ],
            [
                ['special chars abc123čřž#$%_-', 'dir/file'],
                'site://special chars abc123čřž#$%_-/dir/file',
            ],
            [
                ['special chars abc123čřž#$%_-', 'dir/file.xlsx'],
                'site://special chars abc123čřž#$%_-/dir/file.xlsx',
            ],
            [
                ['special chars abc123čřž#$%_-', 'abc123 čřž#$%_-'],
                'site://special chars abc123čřž#$%_-/abc123 čřž#$%_-',
            ],
            [
                ['special chars abc123čřž#$%_-', 'abc123 čřž#$%_-.xlsx'],
                'site://special chars abc123čřž#$%_-/abc123 čřž#$%_-.xlsx',
            ],
        ];
    }

    public function getReplaceParamsInUriInputs(): array
    {
        return [
            ['', [], ''],
            ['http://abc', [], 'http://abc'],
            ['http://abc/{foo}', [], 'http://abc/{foo}'],
            ['http://abc/{foo}', ['foo' => 'bar'], 'http://abc/bar'],
            ['http://abc/{a}/{b}?{c}=value', ['a' => 'd', 'b' => 'e', 'c' => 'f'], 'http://abc/d/e?f=value'],
            ['http://abc/{foo}', ['foo' => 'one or more spaces'], 'http://abc/one+or+more+spaces'],
            [
                'http://abc/{foo}',
                ['foo' => 'special/chars123úěš!@#'],
                'http://abc/special%2Fchars123%C3%BA%C4%9B%C5%A1%21%40%23',
            ],
        ];
    }

    public function getApiPathInputs(): array
    {
        return [
            ['', '/'],
            ['/', '/'],
            ['abc', ':/abc:/'],
            ['/abc', ':/abc:/'],
            ['path/to/file.xlsx', ':/path/to/file.xlsx:/'],
            ['/path/to/file.xlsx', ':/path/to/file.xlsx:/'],
        ];
    }

    public function getToAsciiInputs(): array
    {
        return [
            ['', ''],
            ['aBc', 'aBc'],
            ['!@#', ''],
            ['úěš', 'ues'],
            ['指事字', ''],
            ["a\n\tb_xy", 'a_b_xy'],
        ];
    }

    public function getStringsForTruncate(): array
    {
        return [
            ['abc', -5, '...'],
            ['abc', 0, '...'],
            ['abc', 3, 'abc'],
            ['abcd', 3, 'abc...'],
            ['some longer str', 10, 'some longe...'],
            ['some longer str', 20, 'some longer str'],
            ['special123úěš!@#', 12, 'special123úě...'],
            ['special123úěš!@#', 20, 'special123úěš!@#'],
        ];
    }

    public function getIterables(): array
    {
        return [
            [[], -5, ''],
            [[], 0, ''],
            [[], 10, ''],
            [['a', 'b', 'c'], 3, '"a", "b", "c"'],
            [['a', 'b', 'c'], 2, '"a", "b", ...'],
            [['some long string', 'b', 'c'], 3, '"some long ...", "b", "c"'],
            [['a', 'some long string', 'c'], 3, '"a", "some long ...", "c"'],
            [['a', 'b', 'some long string'], 3, '"a", "b", "some long ..."'],
            [['some long string', 'b', 'c'], 2, '"some long ...", "b", ...'],
            [['a', 'some long string', 'c'], 2, '"a", "some long ...", ...'],
            [['a', 'b', 'some long string'], 2, '"a", "b", ...'],

        ];
    }

    public function getColumns(): array
    {
        return [
            [1, 'A'],
            [2, 'B'],
            [3, 'C'],
            [26, 'Z'],
            [27, 'AA'],
            [28, 'AB'],
            [29, 'AC'],
            [52, 'AZ'],
            [53, 'BA'],
            [731, 'ABC'],
        ];
    }
}


================================================
File: tests/phpunit/TableHeaderTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Tests;

use Keboola\OneDriveExtractor\Api\Model\TableHeader;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

class TableHeaderTest extends TestCase
{
    public function testGetters(): void
    {
        $row = TableHeader::from('Sheet1!B123:I456', ['a', 'b', 'b', 'c']);
        Assert::assertSame('B', $row->getStart());
        Assert::assertSame('B123', $row->getStartCell());
        Assert::assertSame('I', $row->getEnd());
        Assert::assertSame('I123', $row->getEndCell());
        Assert::assertSame(123, $row->getFirstRowNumber());
        Assert::assertSame(123, $row->getLastRowNumber());
        Assert::assertSame(['a', 'b', 'b-1', 'c'], $row->getColumns());
    }

    /**
     * @dataProvider getColumns
     */
    public function testParseColumns(array $input, array $expected): void
    {
        Assert::assertSame($expected, TableHeader::parseColumns($input));
    }

    public function getColumns(): array
    {
        return [
            [
                [],
                [],
            ],
            [
                ['', 'b', ''],
                ['column-1', 'b', 'column-3'],
            ],
            [
                ['', 'column-1', '', 'column-3', 'column-1', 'column-3'],
                ['column-1', 'column-1-1', 'column-3', 'column-3-1', 'column-1-2', 'column-3-2'],
            ],
            [
                ['a', 'b', 'c'],
                ['a', 'b', 'c'],
            ],
            [
                ['!@#', 'úěš', '指事字'],
                ['column-1', 'ues', 'column-3'],
            ],
            [
                ['col1', 'col1', 'col1'],
                ['col1', 'col1-1', 'col1-2'],
            ],
        ];
    }
}


================================================
File: tests/phpunit/TableRangeTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Tests;

use InvalidArgumentException;
use Keboola\OneDriveExtractor\Api\Model\TableRange;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

class TableRangeTest extends TestCase
{
    public function testGetters(): void
    {
        $range = TableRange::from('Sheet1!B123:I456');
        Assert::assertSame('B', $range->getStart());
        Assert::assertSame('B123', $range->getStartCell());
        Assert::assertSame('I', $range->getEnd());
        Assert::assertSame('I456', $range->getEndCell());
        Assert::assertSame(123, $range->getFirstRowNumber());
        Assert::assertSame(456, $range->getLastRowNumber());
    }

    /**
     * @dataProvider getStartsEndsValid
     */
    public function testParseStartEndSuccess(string $input, array $expected): void
    {
        Assert::assertSame($expected, TableRange::parseStartEnd($input));
    }

    /**
     * @dataProvider getStartsEndsInvalid
     */
    public function testParseStartEndFail(string $input): void
    {
        $this->expectException(InvalidArgumentException::class);
        TableRange::parseStartEnd($input);
    }

    /**
     * @dataProvider getSplitData
     */
    public function testSplit(string $input, int $cellsPerBulk, ?int $limitRows, array $expected): void
    {
        $range = TableRange::from($input);
        $ranges = array_map(
            fn (TableRange $subRange) => $subRange->getAddress(),
            iterator_to_array($range->split($cellsPerBulk, $limitRows))
        );
        Assert::assertSame($expected, $ranges);
    }

    public function getStartsEndsValid(): array
    {
        return [
            [
                'Sheet1!B123:I123',
                ['B', 'I', 123, 123],
            ],
            [
                'Sheet1!B123:I456',
                ['B', 'I', 123, 456],
            ],
            [
                'Sheet1!A10',
                ['A', 'A', 10, 10],
            ],
            [
                'B123:I123',
                ['B', 'I', 123, 123],
            ],
            [
                'B123:I456',
                ['B', 'I', 123, 456],
            ],
            [
                'A10',
                ['A', 'A', 10, 10],
            ],
            [
                'Sheet1 a b c !!!X10:Y20 def ščřšč!B123:I456',
                ['B', 'I', 123, 456],
            ],
            [
                'Sheet1 a b c !!!X10:Y20 def ščřšč!A10',
                ['A', 'A', 10, 10],
            ],
        ];
    }

    public function getStartsEndsInvalid(): array
    {
        return [
            [''],
            ['abc'],
        ];
    }

    public function getSplitData(): iterable
    {
        // Max 1M cells per bulk -> all rows 1 address range
        yield [
            'Sheet1!B123:I456',
            1000000,
            null,
            ['B123:I456'],
        ];

        // Max 2 cells per bulk, but 3 columns in row, -> 1 address range for each row (minimum)
        yield [
            'Sheet1!A123:C125',
            2,
            null,
            ['A123:C123', 'A124:C124', 'A125:C125'],
        ];

        // Max 3 cells per bulk -> 1 address range for each row
        yield [
            'Sheet1!A123:C125',
            3,
            null,
            ['A123:C123', 'A124:C124', 'A125:C125'],
        ];

        // Max 4 cells per bulk -> it is not enough for 2 rows -> 1 address range for each row
        yield [
            'Sheet1!A123:C125',
            3,
            null,
            ['A123:C123', 'A124:C124', 'A125:C125'],
        ];

        // Max 8 cells per bulk -> 2 rows + 2 rows + 1 row
        yield [
            'Sheet1!A123:C127',
            8,
            null,
            ['A123:C124', 'A125:C126', 'A127:C127'],
        ];

        // Limit number of rows
        yield [
            'Sheet1!B123:I456',
            1000000,
            12,
            ['B123:I134'],
        ];
    }
}


================================================
File: tests/phpunit/Config/BaseConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Tests\Config;

use PHPUnit\Framework\TestCase;

abstract class BaseConfigTest extends TestCase
{
    protected function getValidAuthorization(): array
    {
        return [
            'oauth_api' => [
                'credentials' => [
                    '#data' => '{"access_token": "access", "refresh_token": "refresh"}',
                    '#appSecret' => 'secret',
                    'appKey' => 'key',
                ],
            ],
        ];
    }
}


================================================
File: tests/phpunit/Config/GetWorksheetsConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Tests\Config;

use Keboola\OneDriveExtractor\Configuration\Actions\GetWorksheetsConfigDefinition;
use Keboola\OneDriveExtractor\Configuration\Config;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class GetWorksheetsConfigTest extends BaseConfigTest
{
    /**
     * @dataProvider validConfigProvider
     */
    public function testValidConfig(array $config): void
    {
        new Config($config, new GetWorksheetsConfigDefinition());
        $this->expectNotToPerformAssertions();
    }

    /**
     * @dataProvider invalidConfigProvider
     */
    public function testInvalidConfig(string $expectedMsg, array $config): void
    {
        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage($expectedMsg);
        new Config($config, new GetWorksheetsConfigDefinition());
    }

    public function validConfigProvider(): array
    {
        return [
            'valid-search' => [
                [
                    'action' => 'getWorksheets',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'search' => '/path/to/file',
                        ],
                    ],
                ],
            ],
            'valid-ids' => [
                [
                    'action' => 'getWorksheets',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'driveId' => '1234abc',
                            'fileId' => '5678def',
                        ],
                    ],
                ],
            ],
            'valid-ids-plus-metadata' => [
                [
                    'action' => 'getWorksheets',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'driveId' => '1234abc',
                            'fileId' => '5678def',
                            'metadata' => [
                                'a' => 1,
                                'b' => 'abc',
                            ],
                        ],
                    ],
                ],
            ],
        ];
    }

    public function invalidConfigProvider(): array
    {
        return [
            'empty' => [
                'Missing OAuth credentials, ' .
                'please set "authorization.oauth_api.credentials.{appKey,#appSecret,#data}".',
                [
                    'action' => 'getWorksheets',
                ],
            ],
            'missing-authorization' => [
                'Missing OAuth credentials, ' .
                'please set "authorization.oauth_api.credentials.{appKey,#appSecret,#data}".',
                [
                    'action' => 'getWorksheets',
                    'parameters' => [
                        'workbook' => [
                            'search' => '/path/to/file',
                        ],
                    ],
                ],
            ],
            'missing-workbook' => [
                'The child config "workbook" under "root.parameters" must be configured.',
                [
                    'action' => 'getWorksheets',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [

                    ],
                ],
            ],
            'missing-file-id' => [
                'Both "workbook.driveId" and "workbook.fileId" must be configured.',
                [
                    'action' => 'getWorksheets',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'driveId' => '1234abc',
                        ],
                    ],
                ],
            ],
            'missing-drive-id' => [
                'Both "workbook.driveId" and "workbook.fileId" must be configured.',
                [
                    'action' => 'getWorksheets',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'fileId' => '1234abc',
                        ],
                    ],
                ],
            ],
            'extra-workbook-search-key' => [
                'In config is present "workbook.search", ' .
                'therefore "workbook,driveId" and "workbook.fileId" are not expected.',
                [
                    'action' => 'getWorksheets',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'search' => '/path/to/file',
                            'driveId' => '1234abc',
                            'fileId' => '4567def',
                        ],
                    ],
                ],
            ],
        ];
    }
}


================================================
File: tests/phpunit/Config/RunConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Tests\Config;

use Keboola\OneDriveExtractor\Configuration\Config;
use Keboola\OneDriveExtractor\Configuration\ConfigDefinition;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class RunConfigTest extends BaseConfigTest
{
    /**
     * @dataProvider validConfigProvider
     */
    public function testValidConfig(array $config): void
    {
        new Config($config, new ConfigDefinition());
        $this->addToAssertionCount(1); // Assert no error
    }

    /**
     * @dataProvider invalidConfigProvider
     */
    public function testInvalidConfig(string $expectedMsg, array $config): void
    {
        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage($expectedMsg);
        new Config($config, new ConfigDefinition());
    }

    public function validConfigProvider(): array
    {
        return [
            'valid-search-position' => [
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'search' => '/path/to/file',
                        ],
                        'worksheet' => [
                            'name' => 'sheet-table',
                            'position' => 0,
                        ],
                    ],
                ],
            ],
            'valid-file-id' => [
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'driveId' => '1234abc',
                            'fileId' => '5678def',
                        ],
                        'worksheet' => [
                            'name' => 'sheet-table',
                            'position' => 0,
                        ],
                    ],
                ],
            ],
            'valid-worksheet-id' => [
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'driveId' => '1234abc',
                            'fileId' => '5678def',
                        ],
                        'worksheet' => [
                            'name' => 'sheet-table',
                            'id' => '9012xyz',
                        ],
                    ],
                ],
            ],
            'valid-default-bucket' => [
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'driveId' => '1234abc',
                            'fileId' => '5678def',
                        ],
                        'worksheet' => [
                            'name' => 'sheet-table',
                            'id' => '9012xyz',
                        ],
                    ],
                ],
            ],
            'valid-plus-metadata' => [
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'driveId' => '1234abc',
                            'fileId' => '5678def',
                            'metadata' => [
                                'a' => 1,
                                'b' => 'abc',
                            ],
                        ],
                        'worksheet' => [
                            'name' => 'sheet-table',
                            'id' => '9012xyz',
                            'metadata' => [
                                'a' => 1,
                                'b' => 'abc',
                            ],
                        ],
                    ],
                ],
            ],
        ];
    }

    public function invalidConfigProvider(): array
    {
        return [
            'empty' => [
                'Missing OAuth credentials, ' .
                'please set "authorization.oauth_api.credentials.{appKey,#appSecret,#data}".',
                [],
            ],
            'missing-authorization' => [
                'Missing OAuth credentials, ' .
                'please set "authorization.oauth_api.credentials.{appKey,#appSecret,#data}".',
                [
                    'parameters' => [
                        'workbook' => [
                            'search' => '/path/to/file',
                        ],
                        'worksheet' => [
                            'name' => 'sheet-table',
                            'position' => 0,
                        ],
                    ],
                ],
            ],
            'missing-worksheet-name' => [
                'The child config "name" under "root.parameters.worksheet" must be configured.',
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'search' => '/path/to/file',
                        ],
                        'worksheet' => [
                            'position' => 0,
                        ],
                    ],
                ],
            ],
            'missing-workbook' => [
                'The child config "workbook" under "root.parameters" must be configured.',
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'worksheet' => [
                            'name' => 'sheet-table',
                            'position' => 0,
                        ],
                    ],
                ],
            ],
            'missing-worksheet' => [
                'The child config "worksheet" under "root.parameters" must be configured.',
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'search' => '/path/to/file',
                        ],
                    ],
                ],
            ],
            'missing-file-id' => [
                'Both "workbook.driveId" and "workbook.fileId" must be configured.',
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'driveId' => '1234abc',
                        ],
                        'worksheet' => [
                            'name' => 'sheet-table',
                            'position' => 0,
                        ],
                    ],
                ],
            ],
            'missing-drive-id' => [
                'Both "workbook.driveId" and "workbook.fileId" must be configured.',
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'fileId' => '1234abc',
                        ],
                        'worksheet' => [
                            'name' => 'sheet-table',
                            'position' => 0,
                        ],
                    ],
                ],
            ],
            'extra-workbook-search-key' => [
                'In config is present "workbook.search", ' .
                'therefore "workbook,driveId" and "workbook.fileId" are not expected.',
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'search' => '/path/to/file',
                            'driveId' => '1234abc',
                            'fileId' => '4567def',
                        ],
                        'worksheet' => [
                            'name' => 'sheet-table',
                            'position' => 0,
                        ],
                    ],
                ],
            ],
            'extra-worksheet-position' => [
                'In config must be ONLY ONE OF "worksheet.id" OR "worksheet.position". Both given.',
                [
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'driveId' => '1234abc',
                            'fileId' => '4567def',
                        ],
                        'worksheet' => [
                            'name' => 'sheet-table',
                            'id' => '901xyz',
                            'position' => 0,
                        ],
                    ],
                ],
            ],
        ];
    }
}


================================================
File: tests/phpunit/Config/SearchConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\OneDriveExtractor\Tests\Config;

use Keboola\OneDriveExtractor\Configuration\Actions\SearchConfigDefinition;
use Keboola\OneDriveExtractor\Configuration\Config;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class SearchConfigTest extends BaseConfigTest
{
    /**
     * @dataProvider validConfigProvider
     */
    public function testValidConfig(array $config): void
    {
        new Config($config, new SearchConfigDefinition());
        $this->addToAssertionCount(1); // Assert no error
    }

    /**
     * @dataProvider invalidConfigProvider
     */
    public function testInvalidConfig(string $expectedMsg, array $config): void
    {
        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage($expectedMsg);
        new Config($config, new SearchConfigDefinition());
    }

    public function validConfigProvider(): array
    {
        return [
            'valid-search' => [
                [
                    'action' => 'search',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'search' => '/path/to/file',
                        ],
                    ],
                ],
            ],
            'valid-ids' => [
                [
                    'action' => 'search',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'driveId' => '...',
                            'fileId' => '...',
                        ],
                    ],
                ],
            ],
            'valid-plus-metadata' => [
                [
                    'action' => 'search',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [
                            'driveId' => '...',
                            'fileId' => '...',
                            'metadata' => [
                                'a' => 1,
                                'b' => 'abc',
                            ],
                        ],
                    ],
                ],
            ],
        ];
    }

    public function invalidConfigProvider(): array
    {
        return [
            'empty' => [
                'Missing OAuth credentials, ' .
                'please set "authorization.oauth_api.credentials.{appKey,#appSecret,#data}".',
                [
                    'action' => 'search',
                ],
            ],
            'missing-authorization' => [
                'Missing OAuth credentials, ' .
                'please set "authorization.oauth_api.credentials.{appKey,#appSecret,#data}".',
                [
                    'action' => 'search',
                    'parameters' => [
                        'workbook' => [
                            'search' => '/path/to/file',
                        ],
                    ],
                ],
            ],
            'missing-workbook' => [
                'The child config "workbook" under "root.parameters" must be configured.',
                [
                    'action' => 'search',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [

                    ],
                ],
            ],
            'empty-workbook' => [
                'In config must be present "workbook.search" OR ("workbook.driveId" and "workbook.fileId").',
                [
                    'action' => 'search',
                    'authorization' => $this->getValidAuthorization(),
                    'parameters' => [
                        'workbook' => [

                        ],
                    ],
                ],
            ],
        ];
    }
}


================================================
File: utils/oauth-app-detail.sh
================================================
#!/usr/bin/env bash

set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

# Load env variables from .env file, but not overwrite the existing one
if [ -f ".env" ]; then
  source <(grep -v '^#' .env | sed -E 's|^([^=]+)=(.*)$|: ${\1=\2}; export \1|g')
fi

# Required environment variables
: "${OAUTH_APP_NAME:?Need to set OAUTH_APP_NAME env variable}"

# Constants
SCRIPT=$(realpath "$0")
SCRIPT_DIR=$(dirname "$SCRIPT")
SCRIPT_FILENAME=$(basename "$SCRIPT")
AZ_CLI_IMG="mcr.microsoft.com/azure-cli"

# If NOT run in the Docker container AND "az" executable not exists locally ...
if [ ! -f /.dockerenv ] && ! command -v az >/dev/null 2>&1; then
  # ... run script in Docker container
  echo "Running in Docker container ..."
  exec docker run \
    --rm -it \
    --volume "$SCRIPT_DIR:/utils" \
    -e OAUTH_APP_NAME \
    "$AZ_CLI_IMG" \
    "/utils/$SCRIPT_FILENAME"
fi

# Check if logged in, if not then login
if az account show >/dev/null 2>&1; then
  echo "You are already logged in!"  >&2
else
  az login --use-device-code >&2
  echo "You have been successfully logged in!"  >&2
fi

# List app info
echo "Getting info about app \"$OAUTH_APP_NAME\""
az ad app list \
    --output json \
    --filter "displayName eq '$OAUTH_APP_NAME'" "$@"
echo -e "\nDone\n"


================================================
File: utils/oauth-app-registration.sh
================================================
#!/usr/bin/env bash

set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

# Load env variables from .env file, but not overwrite the existing one
if [ -f ".env" ]; then
  source <(grep -v '^#' .env | sed -E 's|^([^=]+)=(.*)$|: ${\1=\2}; export \1|g')
fi

# Required environment variables
: "${OAUTH_APP_NAME:?Need to set OAUTH_APP_NAME env variable}"

# Constants
SCRIPT=$(realpath "$0")
SCRIPT_DIR=$(dirname "$SCRIPT")
SCRIPT_FILENAME=$(basename "$SCRIPT")
AZ_CLI_IMG="mcr.microsoft.com/azure-cli"

# Permissions
# https://www.shawntabrizi.com/aad/common-microsoft-resources-azure-active-directory/
api_id="00000003-0000-0000-c000-000000000000"
# https://github.com/stephaneey/azure-ad-vsts-extension/blob/master/overview.md
declare -A permissions
permissions["offline_access"]="7427e0e9-2fba-42fe-b0c0-848c9e6a8182"
permissions["User.Read"]="e1fe6dd8-ba31-4d61-89e7-88639da4683d"
permissions["Files.Read.All"]="df85f4d6-205c-4ac5-a5ea-6bf408dba283"
permissions["Sites.Read.All"]="205e70e5-aba6-4c52-a976-6d2d46c48043"
permissions["Files.ReadWrite.All"]="863451e7-0667-486c-a5d6-d135439485f0"
permissions["Sites.ReadWrite.All"]="89fe6a52-be36-487e-b7d8-d061c450a026"

# If NOT run in the Docker container AND "az" executable not exists locally ...
if [ ! -f /.dockerenv ] && ! command -v az >/dev/null 2>&1; then
  # ... run script in Docker container
  echo "Running in Docker container ..."
  exec docker run \
    --rm -it \
    --volume "$SCRIPT_DIR:/utils" \
    -e OAUTH_APP_NAME \
    "$AZ_CLI_IMG" \
    "/utils/$SCRIPT_FILENAME"
fi

# Check if logged in, if not then login
subscriptionId=$(az account show --query "tenantId" --output tsv || true)
if [ -z "$subscriptionId" ]; then
  subscriptionId=$(az login --use-device-code --query "[].tenantId | [0]" --output tsv)
  echo "You have been successfully logged in!"
else
  echo "You are already logged in!"
fi

# Get app id if exists
echo "Testing if the application \"$OAUTH_APP_NAME\" exists ..."
OAUTH_APP_ID=$(az ad app list --output tsv --filter "displayName eq '$OAUTH_APP_NAME'" --query "[].appId | [0]")

# Create app if not exists
if [ -z "$OAUTH_APP_ID" ]; then
  echo "Application does not exist."
  echo "Creating application \"$OAUTH_APP_NAME\""
  OAUTH_APP_ID=$(
   az ad app create \
        --output tsv \
        --query "appId" \
        --is-fallback-public-client false \
        --display-name "$OAUTH_APP_NAME" \
        --enable-access-token-issuance true \
        --sign-in-audience AzureADandPersonalMicrosoftAccount \
        --end-date '2050-12-31'
  )
  echo "Application created, OAUTH_APP_ID=\"$OAUTH_APP_ID\""

  # Get secret
  OAUTH_APP_SECRET=$(az ad app credential reset \
    --output tsv \
    --query "password" \
    --id "$OAUTH_APP_ID"
  )

  echo "SAVE SECRET KEY!!! -> OAUTH_APP_SECRET=\"$OAUTH_APP_SECRET\""
else
  echo "Application already exists, OAUTH_APP_ID=\"$OAUTH_APP_ID\""
fi

# Load active permissions
echo "Checking permission"
activePerms=$(az ad app list --output tsv --filter "displayName eq '$OAUTH_APP_NAME'"  --query "[].requiredResourceAccess[].resourceAccess[].id")

# Set permissions
perms_arg=()
for perm_name in "${!permissions[@]}"; do
  perm_id=${permissions[${perm_name}]}
  if [[ $activePerms != *"$perm_id"* ]]; then
    echo "Missing permission \"$perm_name\""
    perms_arg+=("$perm_id=Scope")
  fi
done

echo "Active permissions: $activePerms"

if [ ${#perms_arg[@]} -ne 0 ]; then
  echo "Setting permission"
  if ! az ad app permission add --id "$OAUTH_APP_ID" --api "$api_id" --api-permissions "${perms_arg[@]}" 2>/dev/null; then
    echo "WARNING: Error setting permissions."
    echo "WARNING: Please edit it manually in Azure Portal -> App registrations -> $OAUTH_APP_NAME -> Permissions"
  fi
fi


# Print ENV variables
echo -e "\nDone\n"
echo -e "\n-----------------------------------------------------"
echo -e "Please, add these envrioment variables to \".env\" file:\n"
echo "OAUTH_APP_NAME=\"$OAUTH_APP_NAME\""
echo "OAUTH_APP_ID=$OAUTH_APP_ID"
echo "OAUTH_APP_SECRET=${OAUTH_APP_SECRET:-...}"


================================================
File: utils/oauth-login.sh
================================================
#!/usr/bin/env bash

set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

# Load env variables from .env file, but not overwrite the existing one
if [ -f ".env" ]; then
  source <(grep -v '^#' .env | sed -E 's|^([^=]+)=(.*)$|: ${\1=\2}; export \1|g')
fi

# Required environment variables
: "${OAUTH_APP_ID:?Need to set OAUTH_APP_ID env variable}"
: "${OAUTH_APP_SECRET:?Need to set OAUTH_APP_SECRET env variable}"

# Constants
SCRIPT=$(realpath "$0")
SCRIPT_DIR=$(dirname "$SCRIPT")
SCRIPT_FILENAME=$(basename "$SCRIPT")
BASH_UTILS_IMG="bretfisher/netshoot"
HTTP_SERVER_PORT="10000"
HTTP_SERVER_URI="http://localhost:$HTTP_SERVER_PORT"

# OAuth constants
OAUTH_AUTHORITY_URL='https://login.microsoftonline.com/common'
OAUTH_AUTHORIZE_ENDPOINT="$OAUTH_AUTHORITY_URL/oauth2/v2.0/authorize"
OAUTH_TOKEN_ENDPOINT="$OAUTH_AUTHORITY_URL/oauth2/v2.0/token"
OAUTH_SCOPE="offline_access User.Read Files.Read.All Sites.Read.All";
# Scopes required for testing
OAUTH_SCOPE="$OAUTH_SCOPE Files.ReadWrite.All Sites.ReadWrite.All";

printInfo() {
  echo
  echo -e "Please open \"$HTTP_SERVER_URI\" in your browser and click \"signing in\".\n";
  echo -e "You will be redirected to the login page.\n"
  echo -e "After you receive the OAuth tokens, you can close this script.\n"
}

main() {
  case $1 in
    "handle") handle;;
    "runServer") runServer;;
    *) echo "Unexpected command '$1'." 2>&1; exit 1;;
  esac
}

runServer() {
  # If NOT run in the Docker container AND "az" executable not exists locally ...
  # This part can be removed if all tools are locally installed
  if [ ! -f /.dockerenv ]; then
    echo "Running in Docker container ..."
    exec docker run \
      --rm -it \
      --volume "$SCRIPT_DIR:/utils" \
      -p "$HTTP_SERVER_PORT:$HTTP_SERVER_PORT" \
      -e OAUTH_APP_ID \
      -e OAUTH_APP_SECRET \
      "$BASH_UTILS_IMG" \
      "/utils/$SCRIPT_FILENAME"
  fi

  # Run http server
  printInfo
  exec socat "tcp-l:$HTTP_SERVER_PORT",reuseaddr,fork,crlf exec:"$0 handle"
}

debug() {
  echo -e "DEBUG: $1\n" 1>&2
}

handle() {
  # Read HTTP request from stdin: method path version
  read _ path _
  debug "Received http request '$path'"
  route "$path"
}

route() {
  path="$1"
  if [ "$path" == "/" ]; then render_start_page
  elif [ "$path" == "/sign-in" ]; then render_sign_in
  elif [[ "$path" =~ ^/sign-in/callback\?code=(.+)$ ]]; then render_sign_in_callback "${BASH_REMATCH[1]}"
  elif [[ "$path" =~ ^/sign-in/callback\?error=(.+)\&error_description=(.+)$ ]]; then render_error_page "$(urldecode "${BASH_REMATCH[1]}: ${BASH_REMATCH[2]}")"
  else render_404_page
  fi
}

urlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"
}

urldecode() {
  : "${*//+/ }"; echo -e "${_//%/\\x}";
}

function get_authorize_url() {
  echo -n "$OAUTH_AUTHORIZE_ENDPOINT"
  echo -n "?client_id=$(urlencode "$OAUTH_APP_ID")"
  echo -n "&prompt=login"
  echo -n "&redirect_uri=$(urlencode "$HTTP_SERVER_URI/sign-in/callback")"
  echo -n "&scope=$(urlencode "$OAUTH_SCOPE")"
  echo -n "&response_type=code"
  echo -n "&response_mode=query"
}

function get_token_post_args() {
  authorization_code="$1"
  echo -n "client_id=$(urlencode "$OAUTH_APP_ID")"
  echo -n "&client_secret=$(urlencode "$OAUTH_APP_SECRET")"
  echo -n "&redirect_uri=$(urlencode "$HTTP_SERVER_URI/sign-in/callback")"
  echo -n "&code=$authorization_code"
  echo -n "&grant_type=authorization_code"
}

function render_404_page {
  echo 'HTTP/1.1 404 Not Found'
  echo 'Content-Type: text/html'
  echo ''
  echo '<html>'
  echo '<body>'
  echo '<h1>404 Not Found</h1>'
  echo "<p>Resource \"$path\" could not be found.</p>"
  echo '</body>'
}

function render_error_page {
  errorMsg="$1"
  echo 'HTTP/1.1 400 Bad Request'
  echo 'Content-Type: text/html'
  echo
  echo '<html>'
  echo '<body>'
  echo '<h1>An error occurred</h1>'
  echo '<p style="max-width: 600px;">'
  echo "$errorMsg"
  echo '</p>'
  echo '<p>'
  echo '<a href="/sign-in">Try signing in again</a>.'
  echo '</p>'
  echo '</body></html>'
}

function render_token_page {
  access_token="$1"
  refresh_token="$2"
  echo 'HTTP/1.1 400 Bad Request'
  echo 'Content-Type: text/html'
  echo
  echo '<html>'
  echo '<body>'
  echo '<h1>Hurray!</h1>'
  echo '<p><b>Please, add this envrioment variables to ".env" file:</b></p>'
  echo "<p style=\"max-width: 800px; word-wrap: break-word; word-break: break-all;\">"
  echo "<b>OAUTH_ACCESS_TOKEN</b>=<small>$access_token</small>"
  echo "</p>"
  echo "<p style=\"max-width: 800px; word-wrap: break-word; word-break: break-all;\">"
  echo "<b>OAUTH_REFRESH_TOKEN</b>=<small>$refresh_token</small>"
  echo "</p>"
  echo '<p>'
  echo '<a href="/sign-in">Sign in again.</a>.'
  echo '</p>'
  echo '</body></html>'
}

function render_start_page {
  echo 'HTTP/1.1 200 OK'
  echo 'Content-Type: text/html'
  echo
  echo '<html>'
  echo '<body>'
  echo '<h1>Hi from bash!</h1>'
  echo '<p>'
  echo 'This is a server running on socat and bash.'
  echo 'It can perform an OAuth 2 authorization code grant flow.'
  echo '</p>'
  echo '<p>'
  echo 'Try it now by'
  echo '<a href="/sign-in">signing in</a>.'
  echo '</p>'
  echo '</body></html>'
}

function render_sign_in {
  # Redirect to sign in page
  authorize_url=$(get_authorize_url)
  debug "Redirecting to: $authorize_url"
  echo 'HTTP/1.1 302 Found'
  echo "Location: $authorize_url"
}

function render_sign_in_callback {
  # Get token
  authorization_code="$1"
  post="$(get_token_post_args "$authorization_code")"
  response=$(curl -s -X POST -d "$post" "$OAUTH_TOKEN_ENDPOINT")

  # Handle error
  error=$(echo "$response" | jq -r ".error_description")
  if [ "$error" != "null" ]; then
    render_error_page "$error"
    debug "\nAn error occurred: \n$error\n\n"
    return
  fi

  # Print tokens
  access_token=$(echo "$response" | jq -r ".access_token")
  refresh_token=$(echo "$response" | jq -r ".refresh_token")
  render_token_page "$access_token" "$refresh_token"
  debug "The obtained tokens are displayed in a web browser."
}

# Command is first argument or default "runServer"
main "${1-runServer}"


================================================
File: .github/workflows/push.yml
================================================
name: GitHub Actions
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  APP_IMAGE: ex-onedrive

  # Developer portal login
  KBC_DEVELOPERPORTAL_VENDOR: "keboola"
  KBC_DEVELOPERPORTAL_APP: "keboola.ex-onedrive"
  KBC_DEVELOPERPORTAL_USERNAME: "keboola+ex_onedrive_gh"
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # DockerHub login
  DOCKERHUB_USER: "keboolabot"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # OAuth for tests
  OAUTH_APP_NAME: "ex-onedrive-dev-test"
  OAUTH_APP_ID: ${{ secrets.OAUTH_APP_ID }}
  OAUTH_APP_SECRET: ${{ secrets.OAUTH_APP_SECRET }}
  OAUTH_ACCESS_TOKEN: ${{ secrets.OAUTH_ACCESS_TOKEN }}
  OAUTH_REFRESH_TOKEN: ${{ secrets.OAUTH_REFRESH_TOKEN }}
  TEST_SHAREPOINT_SITE: "Excel Sheets"

  # Test KBC project
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }}
  KBC_TEST_PROJECT_URL: ""
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Print Docker version
        run: docker -v
      -
        name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"
      -
        name: Build image
        run: docker build -t $APP_IMAGE .
      -
        name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
      -
        name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ steps.tag.outputs.app_image_tag }}
          push_latest: ${{ steps.tag.outputs.is_semantic_tag }}
          source_image: ${{ env.APP_IMAGE}}

  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.APP_IMAGE}}
          tag_as_latest: true
      -
        name: Run tests
        run: |
          docker run \
          -e OAUTH_APP_NAME \
          -e OAUTH_APP_ID \
          -e OAUTH_APP_SECRET \
          -e OAUTH_ACCESS_TOKEN \
          -e OAUTH_REFRESH_TOKEN \
          -e TEST_SHAREPOINT_SITE \
          ${{env.APP_IMAGE}} composer ci

  tests-in-kbc:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Run KBC test jobs
        if: env.KBC_STORAGE_TOKEN && env.KBC_TEST_PROJECT_CONFIGS
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ env.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    needs:
      - build
      - tests
      - tests-in-kbc
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.build.outputs.is_semantic_tag == 'true'
    steps:
      -
        name: Set tag in the Deloper Portal
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}


