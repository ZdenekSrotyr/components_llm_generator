Directory structure:
└── keboola-component-kafka/
    ├── README.md
    ├── LICENSE.md
    ├── components/
    │   ├── VERSION
    │   ├── __init__.py
    │   ├── common/
    │   │   ├── __init__.py
    │   │   ├── kafka_client.py
    │   │   ├── requirements-common.txt
    │   │   └── utils.py
    │   ├── ex-kafka/
    │   │   ├── README.md
    │   │   ├── Dockerfile
    │   │   ├── LICENSE.md
    │   │   ├── VERSION
    │   │   ├── docker-compose.yml
    │   │   ├── flake8.cfg
    │   │   ├── requirements.txt
    │   │   ├── .gitignore
    │   │   ├── component_config/
    │   │   │   ├── component_long_description.md
    │   │   │   ├── component_short_description.md
    │   │   │   ├── configRowSchema.json
    │   │   │   ├── configSchema.json
    │   │   │   ├── configuration_description.md
    │   │   │   ├── stack_parameters.json
    │   │   │   └── sample-config/
    │   │   │       ├── config.json
    │   │   │       ├── in/
    │   │   │       │   ├── state.json
    │   │   │       │   ├── files/
    │   │   │       │   │   └── order1.xml
    │   │   │       │   └── tables/
    │   │   │       │       ├── test.csv
    │   │   │       │       └── test.csv.manifest
    │   │   │       └── out/
    │   │   │           ├── files/
    │   │   │           │   └── order1.xml
    │   │   │           └── tables/
    │   │   │               └── test.csv
    │   │   ├── docs/
    │   │   │   └── imgs/
    │   │   ├── scripts/
    │   │   │   ├── build_n_run.ps1
    │   │   │   ├── build_n_test.sh
    │   │   │   ├── run_kbc_tests.ps1
    │   │   │   └── developer_portal/
    │   │   │       ├── fn_actions_md_update.sh
    │   │   │       └── update_properties.sh
    │   │   ├── src/
    │   │   │   ├── component.py
    │   │   │   └── configuration.py
    │   │   └── tests/
    │   │       ├── __init__.py
    │   │       ├── test_component.py
    │   │       ├── test_functional.py
    │   │       └── functional/
    │   │           ├── 01_avro-value/
    │   │           │   ├── expected/
    │   │           │   │   └── data/
    │   │           │   │       └── out/
    │   │           │   │           ├── files/
    │   │           │   │           │   └── .gitkeep
    │   │           │   │           └── tables/
    │   │           │   │               ├── avro-value.manifest
    │   │           │   │               └── avro-value/
    │   │           │   │                   ├── p0-0.csv
    │   │           │   │                   ├── p1-0.csv
    │   │           │   │                   └── p2-0.csv
    │   │           │   └── source/
    │   │           │       ├── set_up.py
    │   │           │       └── data/
    │   │           │           ├── config.json
    │   │           │           ├── in/
    │   │           │           │   ├── .gitkeep
    │   │           │           │   ├── files/
    │   │           │           │   │   └── .gitkeep
    │   │           │           │   └── tables/
    │   │           │           │       └── .gitkeep
    │   │           │           └── out/
    │   │           │               ├── files/
    │   │           │               │   └── .gitkeep
    │   │           │               └── tables/
    │   │           │                   └── .gitkeep
    │   │           ├── 02_text-message/
    │   │           │   ├── expected/
    │   │           │   │   └── data/
    │   │           │   │       └── out/
    │   │           │   │           ├── files/
    │   │           │   │           │   └── .gitkeep
    │   │           │   │           └── tables/
    │   │           │   │               ├── text-message.manifest
    │   │           │   │               └── text-message/
    │   │           │   │                   ├── p0-0.csv
    │   │           │   │                   ├── p1-0.csv
    │   │           │   │                   └── p2-0.csv
    │   │           │   └── source/
    │   │           │       ├── set_up.py
    │   │           │       └── data/
    │   │           │           ├── config.json
    │   │           │           ├── in/
    │   │           │           │   ├── .gitkeep
    │   │           │           │   ├── files/
    │   │           │           │   │   └── .gitkeep
    │   │           │           │   └── tables/
    │   │           │           │       └── .gitkeep
    │   │           │           └── out/
    │   │           │               ├── files/
    │   │           │               │   └── .gitkeep
    │   │           │               └── tables/
    │   │           │                   └── .gitkeep
    │   │           └── 03_avro-columns/
    │   │               ├── expected/
    │   │               │   └── data/
    │   │               │       └── out/
    │   │               │           ├── files/
    │   │               │           │   └── .gitkeep
    │   │               │           └── tables/
    │   │               │               ├── avro-columns.manifest
    │   │               │               └── avro-columns/
    │   │               │                   ├── p0-0.csv
    │   │               │                   ├── p1-0.csv
    │   │               │                   └── p2-0.csv
    │   │               └── source/
    │   │                   ├── set_up.py
    │   │                   └── data/
    │   │                       ├── config.json
    │   │                       ├── in/
    │   │                       │   ├── .gitkeep
    │   │                       │   ├── files/
    │   │                       │   │   └── .gitkeep
    │   │                       │   └── tables/
    │   │                       │       └── .gitkeep
    │   │                       └── out/
    │   │                           ├── files/
    │   │                           │   └── .gitkeep
    │   │                           └── tables/
    │   │                               └── .gitkeep
    │   └── wr-kafka/
    │       ├── README.md
    │       ├── Dockerfile
    │       ├── LICENSE.md
    │       ├── VERSION
    │       ├── docker-compose.yml
    │       ├── flake8.cfg
    │       ├── requirements.txt
    │       ├── .gitignore
    │       ├── component_config/
    │       │   ├── component_long_description.md
    │       │   ├── component_short_description.md
    │       │   ├── configRowSchema.json
    │       │   ├── configSchema.json
    │       │   ├── configuration_description.md
    │       │   ├── stack_parameters.json
    │       │   └── sample-config/
    │       │       ├── config.json
    │       │       ├── in/
    │       │       │   ├── state.json
    │       │       │   ├── files/
    │       │       │   │   └── order1.xml
    │       │       │   └── tables/
    │       │       │       ├── test.csv
    │       │       │       └── test.csv.manifest
    │       │       └── out/
    │       │           ├── files/
    │       │           │   └── order1.xml
    │       │           └── tables/
    │       │               └── test.csv
    │       ├── docs/
    │       │   └── imgs/
    │       ├── scripts/
    │       │   ├── build_n_run.ps1
    │       │   ├── build_n_test.sh
    │       │   ├── run_kbc_tests.ps1
    │       │   └── developer_portal/
    │       │       ├── fn_actions_md_update.sh
    │       │       └── update_properties.sh
    │       ├── src/
    │       │   ├── component.py
    │       │   └── configuration.py
    │       └── tests/
    │           ├── __init__.py
    │           ├── test_component.py
    │           ├── test_functional.py
    │           └── test-data/
    │               ├── avro/
    │               │   ├── expected/
    │               │   │   └── out.csv
    │               │   └── source/
    │               │       ├── config.json
    │               │       └── in/
    │               │           ├── files/
    │               │           │   └── .gitkeep
    │               │           └── tables/
    │               │               ├── test.csv
    │               │               └── test.csv.manifest
    │               ├── avro-schema-registry/
    │               │   ├── expected/
    │               │   │   └── out.csv
    │               │   └── source/
    │               │       ├── config.json
    │               │       └── in/
    │               │           ├── files/
    │               │           │   └── .gitkeep
    │               │           └── tables/
    │               │               ├── test.csv
    │               │               └── test.csv.manifest
    │               ├── json/
    │               │   ├── expected/
    │               │   │   └── out.csv
    │               │   └── source/
    │               │       ├── config.json
    │               │       └── in/
    │               │           ├── files/
    │               │           │   └── .gitkeep
    │               │           └── tables/
    │               │               ├── test.csv
    │               │               └── test.csv.manifest
    │               ├── text/
    │               │   ├── expected/
    │               │   │   └── out.csv
    │               │   └── source/
    │               │       ├── config.json
    │               │       └── in/
    │               │           ├── files/
    │               │           │   └── .gitkeep
    │               │           └── tables/
    │               │               ├── test.csv
    │               │               └── test.csv.manifest
    │               └── text-key-from-config/
    │                   ├── expected/
    │                   │   └── out.csv
    │                   └── source/
    │                       ├── config.json
    │                       └── in/
    │                           ├── files/
    │                           │   └── .gitkeep
    │                           └── tables/
    │                               ├── test.csv
    │                               └── test.csv.manifest
    └── .github/
        ├── actions/
        │   └── check-version-change/
        │       └── action.yml
        └── workflows/
            ├── common-component-workflow.yml
            ├── ex-kafka.yml
            └── wr-kafka.yml

================================================
File: README.md
================================================
# KBC Kafka Components

Repository contains component ex-kafka and wr-kafka

Documentation is in the README.md files in the component folders.


================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
File: components/VERSION
================================================
0.0.1


================================================
File: components/__init__.py
================================================



================================================
File: components/common/__init__.py
================================================



================================================
File: components/common/kafka_client.py
================================================
import logging

from .utils import str_to_file
from confluent_kafka import Producer, Consumer, TopicPartition

# maximum time (s) the consumer is waiting for next message
NEXT_MSG_TIMEOUT = 60


def build_configuration(
    bootstrap_servers,
    client_id,
    logger,
    security_protocol,
    sasl_mechanisms,
    group_id=None,
    username=None,
    password=None,
    ssl_ca=None,
    ssl_key=None,
    ssl_certificate=None,
    config_params=None,
    debug=False,
):
    configuration = {
        "bootstrap.servers": bootstrap_servers,
        "group.id": group_id,
        "client.id": client_id,
        "security.protocol": security_protocol,
        "sasl.mechanisms": sasl_mechanisms,
        "sasl.username": username,
        "sasl.password": password,
        "ssl.ca.location": str_to_file(ssl_ca, ".pem"),
        "ssl.key.location": str_to_file(ssl_key, ".pem"),
        "ssl.certificate.location": str_to_file(ssl_certificate, ".pem"),
        "logger": logger,
    }
    if debug:
        configuration["debug"] = "consumer, broker"

    if group_id:  # if consumer add following params
        configuration.update(
            {
                "session.timeout.ms": 6000,
                # we are controlling offset ourselves, by default start from start
                "auto.offset.reset": "earliest",
                "enable.auto.commit": False,
            }
        )

    if config_params:
        configuration.update(config_params)

    # kafka config can't handle None or "" values
    return {key: value for key, value in configuration.items() if value is not None}


class KafkaProducer:
    def __init__(
        self,
        bootstrap_servers,
        client_id,
        logger,
        security_protocol,
        sasl_mechanisms,
        username=None,
        password=None,
        ssl_ca=None,
        ssl_key=None,
        ssl_certificate=None,
        config_params=None,
        debug=False,
    ):
        configuration = build_configuration(
            bootstrap_servers=bootstrap_servers,
            client_id=client_id,
            logger=logger,
            security_protocol=security_protocol,
            sasl_mechanisms=sasl_mechanisms,
            username=username,
            password=password,
            ssl_ca=ssl_ca,
            ssl_key=ssl_key,
            ssl_certificate=ssl_certificate,
            config_params=config_params,
            debug=debug,
        )

        self.producer = Producer(**configuration)

    def list_topics(self):
        return self.producer.list_topics(timeout=60).topics

    def produce_message(self, topic, key, value):
        self.producer.produce(topic=topic, key=key, value=value)
        self.producer.flush()


class KafkaConsumer:
    def __init__(
        self,
        bootstrap_servers,
        group_id,
        client_id,
        logger,
        security_protocol,
        sasl_mechanisms,
        username=None,
        password=None,
        ssl_ca=None,
        ssl_key=None,
        ssl_certificate=None,
        start_offset=None,
        config_params=None,
        debug=False,
    ):
        configuration = build_configuration(
            bootstrap_servers=bootstrap_servers,
            client_id=client_id,
            logger=logger,
            security_protocol=security_protocol,
            sasl_mechanisms=sasl_mechanisms,
            group_id=group_id,
            username=username,
            password=password,
            ssl_ca=ssl_ca,
            ssl_key=ssl_key,
            ssl_certificate=ssl_certificate,
            config_params=config_params,
            debug=debug,
        )

        if not start_offset:
            logging.info("No start offset specified, smallest offset will be used.")
        else:
            logging.info("Start offset specified, continue from previous state: {0}".format(start_offset))

        self.start_offsets = start_offset
        self.consumer = Consumer(**configuration)
        logging.debug(self.consumer.assignment())

    def _set_start_offsets(self, consumer, partitions):
        topic = partitions[0].topic

        if self.start_offsets.get(topic):
            logging.info(f"Extracting data from previous offsets: {self.start_offsets.get(topic)} - topic: {topic}")
            for p in partitions:
                p.offset = self.start_offsets.get(topic).get(f"p{p.partition}", -1) + 1
        else:
            logging.info("Extracting data from the beginning")
            for p in partitions:
                p.offset = 0

        consumer.assign(partitions)

    def consume_message_batch(self, topic):
        self.consumer.subscribe([topic], on_assign=self._set_start_offsets)

        # get highest offset for current topic
        max_offsets = self._get_max_offsets(topic)

        logging.info(f"Subscribed to the topic {topic}")
        # Data extraction
        do_poll = True
        # poll until timeout is reached or the max offset is received
        while do_poll:
            logging.info("Reading...")
            consume_pars = dict()
            consume_pars["timeout"] = NEXT_MSG_TIMEOUT

            msgs = self.consumer.consume(**consume_pars)
            if not msgs:
                # polling timed out, stop
                logging.info(f"Polling timed out, there was no message received for more than {NEXT_MSG_TIMEOUT}s")
                do_poll = False

            for msg in msgs:
                if msg is None:
                    continue

                if max_offsets.get(msg.partition()) == msg.offset():
                    max_offsets.pop(msg.partition())

                # if all partitions max offset was reached, end
                if not max_offsets:
                    do_poll = False

                yield msg

    def _get_max_offsets(self, topic):
        logging.debug("Getting offset boundaries for all partitions.")
        offsets = dict()
        curr_topics = self.consumer.list_topics(timeout=60).topics
        if not curr_topics.get(topic):
            raise ValueError(f'The topic: "{topic}" does not exist. Available topics are: {curr_topics}')
        for p in curr_topics[topic].partitions:
            boundaries = self.consumer.get_watermark_offsets(TopicPartition(topic, p))
            # store only if there are some new messages
            if boundaries[1] > 0:
                # decrement to get max existing offset
                offsets[p] = boundaries[1] - 1
        logging.debug(f"Offset boundaries listed successfully. {offsets}")
        return offsets

    def list_topics(self):
        return self.consumer.list_topics(timeout=60).topics



================================================
File: components/common/requirements-common.txt
================================================
keboola.component==1.6.8
mock
freezegun
confluent_kafka[avro, schemaregistry]==2.10.0
pydantic==2.10.4
requests==2.32.3
https://bitbucket.org/kds_consulting_team/datadirtest/get/1.8.3.zip#egg=datadirtest
polars==1.21.0


================================================
File: components/common/utils.py
================================================
import tempfile


def _create_temp_file(content: str | bytes, suffix: str) -> str:
    with tempfile.NamedTemporaryFile(suffix=suffix, delete=False) as temp_file:
        temp_file.write(content.encode())
        return temp_file.name


def str_to_file(content: str, suffix: str) -> str | None:
    """
    If content is not None, create a temporary file with the given content and suffix.

    :param content: The content to write to the file.
    :param suffix: The suffix for the temporary file.
    :return: The path to the temporary file or None if no content is provided.
    """
    path = None
    if content:
        path = _create_temp_file(content, suffix)
    return path



================================================
File: components/ex-kafka/README.md
================================================
# KBC Kafka Consumer

Simple Kafka consumer for Keboola Connection.


## Functionality

Component supports following security protocols: PLAINTEXT, SASL_PLAINTEXT, SSL

Message payload can be either stored raw in the single column of output table or deserialized by JSON or Avro deserializer.

The schema for Avro deserialization can be provided as schema string, or obtained from the schema registry if configured.
The component was tested with the Confluent Schema Registry
If the payload is deserialized, it can be stored either as json in column, or all values flattened to columns.

The consumer persists its "committed" offsets in its own state so it is completely independent of commit states 
at Kafka and reading by other consumers in a same group won't affect its setup. The last committed offset is used as 
a starting offset each consecutive run.

It is possible to override the starting offsets manually using `begin_offsets` parameter.

The extractor pulls only messages that haven't been downloaded yet until the last message that is present in 
each partition at the time of execution. Any messages produced at the time of extraction will be collected next run. 
If there is no new message, the extractor will finish without writing any results.


## Configuration parameters - Application

- **servers** - [REQ] list of Kafka servers. Bootstrap Servers are a list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
 These servers are just used for the initial connection to discover the full cluster membership.
- **group_id** - [REQ] Group ID of the consumer. Resulting in `[GROUP_ID]-consumer` ID. The consumer group is used for coordination between consumer. 
 Since the app contains a single consumer and maintains the offset itself, it can be an arbitrary value.
- **security_protocol** - [REQ] Security protocol. Possible values: `PLAINTEXT`, `SASL_PLAINTEXT`, `SSL`
- **username** - [REQ] Username required if `security_protocol` is set to `SASL_PLAINTEXT`
- **#password** - [REQ] Password required if `security_protocol` is set to `SASL_PLAINTEXT`
- **#ssl_ca** - [REQ] CA certificate as string. Required if `security_protocol` is set to `SSL`
- **#ssl_key** - [REQ] Client key as string. Required if `security_protocol` is set to `SSL`
- **#ssl_certificate** - [REQ] Client certificate as string. Required if `security_protocol` is set to `SSL`
- **begin_offsets** - [OPT] Optional argument allowing specification of starting offset for each partition.
It is an object with attribute key marking the partition number prefixed by `p` and offset number. 
e.g. `{"p2": 0, "p1": 1, "p4": 0, "p0": 1, "p3": 3}`
- **debug** - [OPT] Optional argument to enable debug mode with extensive logging. By default `false`
- **kafka_extra_params** - [OPT] Optional argument to specify extra parameters for Kafka consumer. By default `""`

## Configuration parameters - row

- **topic** - [REQ] list of Kafka topics to consume, can be obtained by "Load topics" button
- **deserialize** - [REQ] Deserialization method. Possible values: `no`, `avro`
- **flatten_message_value_columns** - [OPT] Optional argument to enable flattening of Avro deserialized message value columns. By default `false`
- **schema_source** - [OPT] Optional argument to specify source of Avro schema. Possible values: `user_defined`, `schema_registry`. By default `string`
- **schema_str** - [OPT] Optional argument to specify Avro schema as string. Required if `schema_source` is set to `user_defined`
- **schema_registry_url** - [OPT] Optional argument to specify URL of Schema Registry. Required if `schema_source` is set to `schema_registry`
- **schema_registry_extra_params** - [OPT] Optional argument to specify extra parameters for Schema Registry. By default `""`


### Example Application configuration JSON

```
{
  "parameters": {
    "kafka_extra_params": "{\"session.timeout.ms\": 6000 }",
    "servers": [
      "xxx01.srvs.test.com:9094",
      "xxxy-02.srvs.test.com:9094",
      "xxx-03.srvs.test.com:9094"
    ],
    "sasl_mechanisms": "PLAIN",
    "username": "user",
    "security_protocol": "SASL_PLAINTEXT",
    "#password": "KBC::ProjectSecure::...",
    "debug": true
  }
}
```

### Example row configuration JSON

```
{
  "parameters": {
    "topics": [
      "first",
      "second"
    ],
    "deserialize": "avro",
    "flatten_message_value_columns": true,
    "schema_source": "schema_registry",
    "schema_registry_url": "http://schema-registry:8081",
    "schema_registry_extra_params": ""
  }
}
```


================================================
File: components/ex-kafka/Dockerfile
================================================
FROM python:3.12-slim
ENV PYTHONIOENCODING=utf-8

ENV PYTHONPATH="/code:${PYTHONPATH}"

ARG COMPONENT_DIR="ex-kafka"

RUN pip install flake8


COPY /components/common/requirements-common.txt /code/
RUN pip install -r /code/requirements-common.txt

COPY /components/common /code/common/

COPY /components/${COMPONENT_DIR}/src /code/src/
COPY /components/${COMPONENT_DIR}/tests /code/tests/
COPY /components/${COMPONENT_DIR}/scripts /code/scripts/
COPY /components/${COMPONENT_DIR}/flake8.cfg /code/flake8.cfg

WORKDIR /code/

CMD ["python", "-u", "/code/src/component.py"]


================================================
File: components/ex-kafka/LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
File: components/ex-kafka/VERSION
================================================
0.0.4


================================================
File: components/ex-kafka/docker-compose.yml
================================================
services:
  # for development purposes
  dev:
    build:
      context: ../../
      dockerfile: components/ex-kafka/Dockerfile
    volumes:
        - ./:/code
        - ./data:/data
        - ../common:/code/common
    environment:
      - KBC_DATADIR=/data
  broker:
    image: apache/kafka:3.8.1
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:9092,EXTERNAL://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "19092:19092"
  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.0
    hostname: schema-registry
    depends_on:
      broker:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "--output", "/dev/null", "--silent", "--head", "--fail", "http://schema-registry:8081/subjects" ]
      interval: 3s
      timeout: 10s
      retries: 30
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:9092,EXTERNAL://localhost:19092
      SCHEMA_REGISTRY_DEBUG: 'true'
  test:
    # Use to run flake8 and unittests checks
    build:
      context: ../../
      dockerfile: components/ex-kafka/Dockerfile
    depends_on:
      schema-registry:
        condition: service_healthy
    volumes:
      - ./:/code
      - ./data:/data
      - ../common:/code/common
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
File: components/ex-kafka/flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
File: components/ex-kafka/requirements.txt
================================================



================================================
File: components/ex-kafka/.gitignore
================================================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]

# kbc datafolder
/data/


================================================
File: components/ex-kafka/component_config/component_long_description.md
================================================
The Kafka Extractor subscribes to selected topics and saves the messages to Keboola by creating one table per topic and appending each message as a new row.
It supports text, Avro, and JSON (schemaless) payloads.

More information about the functionality and how to configure component it can be found in the [documentation](https://github.com/keboola/component-kafka/blob/master/components/ex-kafka/README.md).


================================================
File: components/ex-kafka/component_config/component_short_description.md
================================================
Apache Kafka is an open-source log-based event streaming platform.


================================================
File: components/ex-kafka/component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Parameters",
  "required": [
  ],
  "properties": {
    "topics": {
      "type": "array",
      "items": {
        "enum": [],
        "type": "string"
      },
      "title": "Topics to subscribe",
      "format": "select",
      "options": {
        "tags": true,
        "async": {
          "label": "Load topics",
          "action": "list_topics"
        }
      },
      "uniqueItems": true,
      "propertyOrder": 1
    },
    "deserialize": {
      "enum": [
        "text",
        "avro",
        "json"
      ],
      "type": "string",
      "title": "Deserialize message value",
      "options": {
        "enum_titles": [
          "Text (UTF-8)",
          "Avro",
          "JSON"
        ]
      },
      "propertyOrder": 2
    },
    "flatten_message_value_columns": {
      "type": "boolean",
      "title": "Flatten message value",
      "format": "checkbox",
      "description": "Store message value columns to table columns",
      "propertyOrder": 3,
      "options": {
        "dependencies": {
          "deserialize": "avro"
        }
      }
    },
    "schema_source": {
      "enum": [
        "user_defined",
        "schema_registry"
      ],
      "type": "string",
      "title": "Schema source",
      "options": {
        "enum_titles": [
          "User defined",
          "From schema registry"
        ],
        "dependencies": {
          "deserialize": "avro"
        }
      },
      "propertyOrder": 4
    },
    "schema_str": {
      "type": "string",
      "title": "Avro schema string",
      "options": {
        "dependencies": {
          "schema_source": "user_defined"
        }
      },
      "propertyOrder": 5
    },
    "schema_registry_url": {
      "type": "string",
      "title": "Schema registry URL",
      "description": "Schema registry URL including protocol and port (e.g. http://schema-registry:8081)",
      "options": {
        "dependencies": {
          "schema_source": "schema_registry"
        }
      },
      "propertyOrder": 6
    },
    "schema_registry_extra_params": {
      "type": "string",
      "title": "Additional Schema Registry parameters",
      "description": "Dictionary of additional <a href='https://docs.confluent.io/platform/current/schema-registry/installation/config.html'>Schema Registry parameters</a> in the format {\"exporter.retries.wait.ms\": 2000, \"exporter.max.retries\n\": 5\n} ",
      "options": {
        "dependencies": {
          "schema_source": "schema_registry"
        }
      },
      "propertyOrder": 7
    },
    "table_preview": {
      "type": "button",
      "format": "sync-action",
      "options": {
        "async": {
          "label": "Message preview",
          "action": "message_preview"
        }
      },
      "propertyOrder": 8
    },
    "destination": {
      "type": "object",
      "title": "Destination",
      "required": [
        "load_type"
      ],
      "properties": {
        "load_type": {
          "enum": [
            "incremental_load",
            "full_load"
          ],
          "type": "string",
          "title": "Load Type",
          "default": "incremental_load",
          "options": {
            "enum_titles": [
              "Incremental Load",
              "Full Load"
            ]
          },
          "description": "If Full load is used, the destination table will be overwritten every run. If Incremental Load is used, data will be upserted into the destination table based on the primary key. Append modes do not contain any primary keys and are not deduplicated.",
          "propertyOrder": 91
        },
        "table_name": {
          "type": "string",
          "title": "Table name",
          "default": "",
          "description": "(Optional) Specify the table name. If left blank, the topic name will be used.",
          "propertyOrder": 92
        }
      },
      "propertyOrder": 9
    }
  }
}


================================================
File: components/ex-kafka/component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Application configuration",
  "required": [
    "bootstrap_servers"
  ],
  "properties": {
    "bootstrap_servers": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "enum": [],
        "type": "string"
      },
      "options": {
        "tags": true
      },
      "format": "select",
      "title": "Bootstrap servers",
      "description": "A list of one or more bootstrap servers in the Kafka cluster, specified in the format host:port.",
      "propertyOrder": 1
    },
    "security_protocol": {
      "enum": [
        "PLAINTEXT",
        "SSL",
        "SASL_PLAINTEXT",
        "SASL_SSL"
      ],
      "type": "string",
      "title": "Security protocol",
      "options": {
        "enum_titles": [
          "PLAINTEXT",
          "SSL",
          "SASL_PLAINTEXT",
          "SASL_SSL"
        ]
      },
      "propertyOrder": 2
    },
    "sasl_mechanism": {
      "enum": [
        "PLAIN",
        "SCRAM-SHA-512"
      ],
      "type": "string",
      "title": "SASL mechanism",
      "options": {
        "dependencies": {
          "security_protocol": [
            "SASL_PLAINTEXT",
            "SASL_SSL"
          ]
        },
        "enum_titles": [
          "PLAIN",
          "SCRAM-SHA-512"
        ]
      },
      "propertyOrder": 3
    },
    "username": {
      "type": "string",
      "title": "Username",
      "options": {
        "dependencies": {
          "security_protocol": [
            "SASL_PLAINTEXT",
            "SASL_SSL"
          ]
        }
      },
      "propertyOrder": 4
    },
    "#password": {
      "type": "string",
      "format": "password",
      "title": "Password",
      "options": {
        "dependencies": {
          "security_protocol": [
            "SASL_PLAINTEXT",
            "SASL_SSL"
          ]
        }
      },
      "propertyOrder": 5
    },
    "#ssl_ca": {
      "type": "string",
      "format": "textarea",
      "title": "SSL CA",
      "options": {
        "tooltip": "Insert the entire contents of the .pem file, including newlines. Once saved, the value will be encrypted.",
        "dependencies": {
          "security_protocol": [
            "SSL",
            "SASL_SSL"
          ]
        }
      },
      "propertyOrder": 6
    },
    "#ssl_key": {
      "type": "string",
      "format": "textarea",
      "title": "SSL Key",
      "options": {
        "tooltip": "Insert the entire contents of the .pem file, including newlines. Once saved, the value will be encrypted.",
        "dependencies": {
          "security_protocol": [
            "SSL",
            "SASL_SSL"
          ]
        }
      },
      "propertyOrder": 7
    },
    "#ssl_certificate": {
      "type": "string",
      "format": "textarea",
      "title": "SSL Certificate",
      "options": {
        "tooltip": "Insert the entire contents of the .pem file, including newlines. Once saved, the value will be encrypted.",
        "dependencies": {
          "security_protocol": [
            "SSL",
            "SASL_SSL"
          ]
        }
      },
      "propertyOrder": 8
    },
    "kafka_extra_params": {
      "type": "string",
      "title": "Additional Kafka parameters",
      "description": "Dictionary of additional <a href='https://kafka.apache.org/documentation/#configuration'>Kafka parameters</a> in the format {\"auto.offset.reset\": \"earliest\", \"session.timeout.ms\": 6000\n} ",
      "propertyOrder": 9
    }
  }
}


================================================
File: components/ex-kafka/component_config/configuration_description.md
================================================
For details on how to configure the component, please refer to the [documentation](https://github.com/keboola/component-kafka/blob/master/components/ex-kafka/README.md).


================================================
File: components/ex-kafka/component_config/stack_parameters.json
================================================
{}


================================================
File: components/ex-kafka/component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: components/ex-kafka/component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
File: components/ex-kafka/component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: components/ex-kafka/component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: components/ex-kafka/component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: components/ex-kafka/component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: components/ex-kafka/component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"




================================================
File: components/ex-kafka/scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
File: components/ex-kafka/scripts/build_n_test.sh
================================================
#!/bin/sh

set -e

find . -type f | sort

flake8 --config=flake8.cfg
echo "Running tests for main component..."
python -m unittest discover


================================================
File: components/ex-kafka/scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
File: components/ex-kafka/scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi


================================================
File: components/ex-kafka/scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"


================================================
File: components/ex-kafka/src/component.py
================================================
"""
Template Component main class.

"""

import csv
import io
import json
import logging
import os
import time
from collections import OrderedDict
from dataclasses import dataclass
from typing import TextIO

import fastavro
import polars
from confluent_kafka import KafkaException
from common.kafka_client import KafkaConsumer
from configuration import Configuration
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.avro import AvroDeserializer
from confluent_kafka.serialization import MessageField, SerializationContext
from keboola.component.base import ComponentBase, sync_action
from keboola.component.dao import BaseType, ColumnDefinition
from keboola.component.exceptions import UserException
from keboola.component.sync_actions import MessageType, SelectElement, ValidationResult

# global constants
RESULT_PK = ["key", "offset"]
RESULT_COLS = ["topic", "timestamp_type", "timestamp", "partition", "offset", "key", "value"]
RESULT_COLS_DTYPES = ["string", "string", "timestamp", "int", "int", "string", "string"]


@dataclass
class CachedWriter:
    file: TextIO
    writer: csv.DictWriter


class Component(ComponentBase):
    def __init__(self):
        self.params = None
        self.client = None
        self.topics = dict()
        self.columns = dict()
        self.latest_offsets = dict()
        self.writers: dict[str, CachedWriter] = {}
        self.schema = None
        self.registry_deserializer = None
        super().__init__()

    def run(self, debug=False):
        """
        Main execution code

        TODO - statistics when DEBUG in conf dict:
        stats_cb(json_str): Callback for statistics data. This callback is triggered by poll() or
        flush every statistics.interval.ms (needs to be configured separately).
         Function argument json_str is a str instance of a JSON document containing
         statistics data. This callback is served upon calling client.poll() or producer.flush().
         See https://github.com/edenhill/librdkafka/wiki/Statistics” for more information.
        """

        try:
            self.params = Configuration(**self.configuration.parameters)
            self._validate_stack_params()

            self.params.group_id = (f"kbc-proj-{self.environment_variables.project_id or 'local'}-"
                                    f"{self.environment_variables.config_row_id}")
            self.params.client_id = f"kbc-config-{self.environment_variables.config_row_id or 'local'}"

            # Generating a string out of the list
            bootstrap_servers = ",".join(self.params.bootstrap_servers)

            self.columns = self.get_state_file().get("columns", dict())
            self.latest_offsets = self.get_state_file().get("prev_offsets", dict())

            self.client = self._init_client(debug, self.params, self.latest_offsets, bootstrap_servers)

            logging.info("Extracting data from topics {0}".format(self.params.topics))
            start_time = time.time()

            for topic in self.params.topics:
                msg_cnt, res_file_folder, schema = self.consume_topic(topic)
                self.topics[topic] = {
                    "msg_cnt": msg_cnt,
                    "res_file_folder": res_file_folder,
                    "schema": schema,
                }

            self.close_all_writers()
            logging.info(f"Extraction finished in {time.time() - start_time:.2f} seconds")

            # Store previous offsets and columns
            state_dict = {"prev_offsets": self.latest_offsets, "columns": self.columns}
            self.write_state_file(state_dict)
            logging.info("Offset file stored.")

            self.produce_manifest()
            logging.info("Extraction finished.")
        except KafkaException as e:
            raise UserException(f"Kafka Exception: {str(e)}")
        finally:
            if self.client.consumer:
                self.client.consumer.close()
                logging.info("Kafka client closed.")

    def _validate_stack_params(self):
        image_parameters = self.configuration.image_parameters or {}
        allowed_hosts = [f"{host.get('host')}:{host.get('port')}" for host in image_parameters.get("allowed_hosts", [])]

        if allowed_hosts:
            for item in self.params.bootstrap_servers:
                if item not in allowed_hosts:
                    raise UserException(f"Host {item} is not allowed")

    def produce_manifest(self):
        for topic, consumed in self.topics.items():
            schema = OrderedDict()
            for col, dtype in zip(RESULT_COLS, RESULT_COLS_DTYPES):
                schema[col] = ColumnDefinition(data_types=self.convert_dtypes(dtype))

            if consumed.get("schema"):
                del schema["value"]

            for col in consumed.get("schema"):
                schema[col.get("name")] = ColumnDefinition(data_types=self.convert_dtypes(col.get("type")))

            # Produce final sliced table manifest
            if consumed["msg_cnt"] > 0:
                logging.info(f"Fetched {consumed['msg_cnt']} messages from topic - {topic}")
                out_table = self.create_out_table_definition(
                    consumed["res_file_folder"],
                    is_sliced=True,
                    primary_key=RESULT_PK,
                    schema=schema,
                    incremental=self.params.destination.incremental,
                )

                self.write_manifest(out_table)
            else:
                logging.info("No new messages found!")

    def consume_topic(self, topic):
        self.columns.setdefault(topic, RESULT_COLS)

        if self.params.deserialize == "avro" and self.params.schema_registry_url:
            self.registry_deserializer = self.get_schema_registry_deserializer()
        elif self.params.deserialize == "avro" and self.params.schema_str:
            self.schema = fastavro.schema.parse_schema(json.loads(self.params.schema_str))

        table_name = self.params.destination.table_name or topic
        res_file_folder = os.path.join(self.tables_out_path, table_name)
        msg_cnt = 0
        last_message = None
        dtypes = []
        for msg in self.client.consume_message_batch(topic):
            if msg is None:
                break
            if msg.error():
                logging.error("Consumer error: {}".format(msg.error()))
                continue

            extracted_data, last_message = self.get_message_data(last_message, msg, topic)

            filename = ("p{0}-{1}.csv").format(
                msg.partition(),
                msg.offset() // 10_000,
            )

            logging.debug(f"Received message: {extracted_data}")

            # Save data as a sliced table file in defined folder
            self.save_file(extracted_data, os.path.join(res_file_folder, filename), topic)
            msg_cnt += 1

            print(msg.partition())

            if msg.topic() not in self.latest_offsets:
                self.latest_offsets[msg.topic()] = {}

            self.latest_offsets[msg.topic()]["p" + str(msg.partition())] = msg.offset()

        if self.params.deserialize == "avro" and self.params.flatten_message_value_columns:
            dtypes = self.get_topic_dtypes(last_message)

        return msg_cnt, res_file_folder, dtypes

    def get_message_data(self, last_message, msg, topic):
        if self.params.deserialize == "avro" and self.params.schema_registry_url:
            value = self.registry_deserializer(msg.value(), SerializationContext(msg.topic(), MessageField.VALUE))
        elif self.params.deserialize == "avro" and self.params.schema_str:
            value = fastavro.schemaless_reader(io.BytesIO(msg.value()), self.schema)
        elif self.params.deserialize == "json":
            value = json.loads(msg.value())
        else:
            value = msg.value().decode("utf-8")
        if self.params.freeze_timestamp:  # freeze for datadir tests
            timestamp = 1732104020556
        else:
            timestamp = msg.timestamp()[1]
        extracted_data = {
            "topic": msg.topic(),
            "timestamp_type": msg.timestamp()[0],
            "timestamp": timestamp,
            "partition": msg.partition(),
            "offset": msg.offset(),
            "key": msg.key(),
        }
        if self.params.flatten_message_value_columns:
            self.safe_update(extracted_data, value)
            self.columns[topic] = list(extracted_data.keys())
            last_message = msg.value()  # to get dtypes
        else:
            extracted_data["value"] = value
        return extracted_data, last_message

    def get_schema_registry_deserializer(self):
        config = self.params.schema_registry_extra_params
        config["url"] = self.params.schema_registry_url
        schema_registry_client = SchemaRegistryClient(config)
        deserializer = AvroDeserializer(schema_registry_client)
        return deserializer

    def get_topic_dtypes(self, message_value: str):
        schema = None
        if self.params.deserialize == "avro":
            if self.params.schema_registry_url:
                config = self.params.schema_registry_extra_params
                config["url"] = self.params.schema_registry_url
                schema_registry_client = SchemaRegistryClient(config)
                schema_id = int.from_bytes(message_value[1:5])
                schema = json.loads(schema_registry_client.get_schema(schema_id).schema_str).get("fields")

            elif self.params.schema_str:
                schema = json.loads(self.params.schema_str).get("fields")

        return schema

    def convert_dtypes(self, dtype: str = "string"):
        match dtype:
            case "boolean":
                base_type = BaseType.boolean()
            case "int":
                base_type = BaseType.integer()
            case "float":
                base_type = BaseType.float()
            case "double":
                base_type = BaseType.float()
            case _:
                base_type = BaseType.string()

        return base_type

    def _init_client(self, debug, params, prev_offsets, bootstrap_servers):
        c = KafkaConsumer(
            bootstrap_servers=bootstrap_servers,
            group_id=params.group_id,
            client_id=params.client_id,
            security_protocol=params.security_protocol,
            sasl_mechanisms=params.sasl_mechanism,
            username=params.username,
            password=params.password,
            ssl_ca=params.ssl_ca,
            ssl_key=params.ssl_key,
            ssl_certificate=params.ssl_certificate,
            logger=logging.getLogger(),
            start_offset=prev_offsets,
            config_params=params.kafka_extra_params,
            debug=debug,
        )
        return c

    def safe_update(self, extracted_data, value):
        for key, val in value.items():
            if key in extracted_data:
                extracted_data[f"value_{key}"] = val
            else:
                extracted_data[key] = val

    def save_file(self, line, filename, topic):
        """
        Save text as file
        """
        logging.info(f"Writing file {filename}")

        if filename not in self.writers:
            if not os.path.exists(os.path.dirname(filename)):
                os.makedirs(os.path.dirname(filename))

            file = open(filename, "a")
            writer = csv.DictWriter(file, fieldnames=self.columns[topic])
            self.writers[filename] = CachedWriter(file=file, writer=writer)
            logging.info(f"Created new writer for {filename}")

        self.writers[filename].writer.writerow(line)

    def close_all_writers(self):
        for filename, cached_writer in self.writers.items():
            cached_writer.file.close()

    @sync_action("list_topics")
    def list_topics(self):
        params = Configuration(**self.configuration.parameters)
        bootstrap_servers = ",".join(params.bootstrap_servers)

        c = self._init_client(False, params, dict(), bootstrap_servers)
        topics = c.list_topics()
        topics_names = [SelectElement(topics.get(t).topic) for t in topics]

        return topics_names

    @sync_action("message_preview")
    def message_preview(self):
        self.params = Configuration(**self.configuration.parameters)
        bootstrap_servers = ",".join(self.params.bootstrap_servers)

        c = self._init_client(False, self.params, dict(), bootstrap_servers)
        last_message = None
        topic = self.params.topics[0]
        for msg in c.consume_message_batch(topic):
            if msg is None:
                break
            if msg.error():
                logging.error("Consumer error: {}".format(msg.error()))
                continue

            extracted_data, _ = self.get_message_data(last_message, msg, topic)

            polars.Config.set_tbl_formatting("ASCII_MARKDOWN")
            polars.Config.set_tbl_hide_dataframe_shape(True)
            df = polars.DataFrame(extracted_data.get("value"))
            md_table_output = str(df)

            return ValidationResult(md_table_output, MessageType.SUCCESS)


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
File: components/ex-kafka/src/configuration.py
================================================
import json
import logging
from enum import Enum

from keboola.component.exceptions import UserException
from pydantic import BaseModel, Field, ValidationError, field_validator, computed_field


class LoadType(str, Enum):
    full_load = "full_load"
    incremental_load = "incremental_load"


class Destination(BaseModel):
    load_type: LoadType = Field(default=LoadType.incremental_load)
    table_name: str | None = None

    @computed_field
    @property
    def incremental(self) -> bool:
        return self.load_type is LoadType.incremental_load


class Configuration(BaseModel):
    bootstrap_servers: list[str] = Field(default=None)
    group_id: str = Field(default=None)
    client_id: str = Field(default=None)

    topics: list[str] = Field(default=None)

    security_protocol: str = Field(default=None)
    sasl_mechanism: str = Field(default=None)

    username: str = Field(default=None)
    password: str = Field(alias="#password", default=None)

    ssl_ca: str = Field(alias="#ssl_ca", default=None)
    ssl_key: str = Field(alias="#ssl_key", default=None)
    ssl_certificate: str = Field(alias="ssl_certificate", default=None)

    begin_offsets: str = Field(default=None)

    kafka_extra_params: str = Field(default=None)

    deserialize: str = Field(default=None)
    flatten_message_value_columns: bool = False
    schema_str: str = Field(default=None)
    schema_registry_url: str = Field(default=None)
    schema_registry_extra_params: str = Field(default={})

    destination: Destination = Field(default_factory=Destination)

    debug: bool = False
    freeze_timestamp: bool = False

    def __init__(self, **data):
        try:
            super().__init__(**data)
        except ValidationError as e:
            error_messages = [f"{err['loc'][0]}: {err['msg']}" for err in e.errors()]
            raise UserException(f"Validation Error: {', '.join(error_messages)}")

        if self.debug:
            logging.debug("Component will run in Debug mode")

    @field_validator("kafka_extra_params", "schema_registry_extra_params")
    def parse_configuration(cls, value):
        if value and isinstance(value, str):
            try:
                return json.loads(value.replace("'", '"'))
            except json.JSONDecodeError as e:
                raise ValueError(f"Invalid JSON string for config_params: {e}")
        return value



================================================
File: components/ex-kafka/tests/__init__.py
================================================
import sys
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")



================================================
File: components/ex-kafka/tests/test_component.py
================================================
"""
Created on 12. 11. 2018

@author: esner
"""

import os
import unittest

import mock
from component import Component
from freezegun import freeze_time


class TestComponent(unittest.TestCase):
    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {"KBC_DATADIR": "./non-existing-dir"})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
File: components/ex-kafka/tests/test_functional.py
================================================
import unittest

from datadirtest import DataDirTester
from freezegun import freeze_time


class TestComponent(unittest.TestCase):
    @freeze_time("2023-04-02")
    def test_functional(self):
        functional_tests = DataDirTester()
        functional_tests.run()


if __name__ == "__main__":
    unittest.main()



================================================
File: components/ex-kafka/tests/functional/01_avro-value/expected/data/out/files/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/01_avro-value/expected/data/out/tables/avro-value.manifest
================================================
{"incremental": true, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "schema": [{"name": "topic", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "timestamp_type", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "timestamp", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "partition", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true}, {"name": "offset", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true, "primary_key": true}, {"name": "key", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "value", "data_type": {"base": {"type": "STRING"}}, "nullable": true}]}


================================================
File: components/ex-kafka/tests/functional/01_avro-value/expected/data/out/tables/avro-value/p0-0.csv
================================================
avro-value,1,1732104020556,0,0,b'key3',"{'id': 3, 'key': 'avro-value-111', 'text': 'Test message 3'}"
avro-value,1,1732104020556,0,1,b'key3',"{'id': 7, 'key': 'avro-value-111', 'text': 'Test message 7'}"
avro-value,1,1732104020556,0,2,b'key3',"{'id': 11, 'key': 'avro-value-111', 'text': 'Test message 11'}"



================================================
File: components/ex-kafka/tests/functional/01_avro-value/expected/data/out/tables/avro-value/p1-0.csv
================================================
avro-value,1,1732104020556,1,0,b'key1',"{'id': 1, 'key': 'avro-value-111', 'text': 'Test message 1'}"
avro-value,1,1732104020556,1,1,b'key2',"{'id': 2, 'key': 'avro-value-111', 'text': 'Test message 2'}"
avro-value,1,1732104020556,1,2,b'key1',"{'id': 5, 'key': 'avro-value-111', 'text': 'Test message 5'}"
avro-value,1,1732104020556,1,3,b'key2',"{'id': 6, 'key': 'avro-value-111', 'text': 'Test message 6'}"
avro-value,1,1732104020556,1,4,b'key1',"{'id': 9, 'key': 'avro-value-111', 'text': 'Test message 9'}"
avro-value,1,1732104020556,1,5,b'key2',"{'id': 10, 'key': 'avro-value-111', 'text': 'Test message 10'}"
avro-value,1,1732104020556,1,6,b'key1',"{'id': 13, 'key': 'avro-value-111', 'text': 'Test message 13'}"
avro-value,1,1732104020556,1,7,b'key2',"{'id': 14, 'key': 'avro-value-111', 'text': 'Test message 14'}"



================================================
File: components/ex-kafka/tests/functional/01_avro-value/expected/data/out/tables/avro-value/p2-0.csv
================================================
avro-value,1,1732104020556,2,0,b'key0',"{'id': 0, 'key': 'avro-value-111', 'text': 'Test message 0'}"
avro-value,1,1732104020556,2,1,b'key0',"{'id': 4, 'key': 'avro-value-111', 'text': 'Test message 4'}"
avro-value,1,1732104020556,2,2,b'key0',"{'id': 8, 'key': 'avro-value-111', 'text': 'Test message 8'}"
avro-value,1,1732104020556,2,3,b'key0',"{'id': 12, 'key': 'avro-value-111', 'text': 'Test message 12'}"



================================================
File: components/ex-kafka/tests/functional/01_avro-value/source/set_up.py
================================================
from datadirtest import TestDataDir
from confluent_kafka import Producer
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.avro import AvroSerializer
from confluent_kafka.serialization import SerializationContext, MessageField
from confluent_kafka.admin import AdminClient
import os


def run(context: TestDataDir):
    os.environ["KBC_PROJECTID"] = "00001"
    os.environ["KBC_CONFIGROWID"] = "00001"

    admin_client = AdminClient({"bootstrap.servers": "broker:9092", "security.protocol": "PLAINTEXT"})

    admin_client.delete_topics(topics=["avro-value"])

    schema_reg_client = SchemaRegistryClient({"url": "http://schema-registry:8081"})

    producer = Producer(
        {
            "bootstrap.servers": "broker:9092",
            "security.protocol": "PLAINTEXT",
            "acks": 0,
            "batch.size": 1000000,
            "linger.ms": 10000,
            "compression.type": "none",
            "enable.idempotence": "False",
        }
    )

    name = "avro-value"

    for i in range(15):
        schema_str = """{
                  "type": "record",
                  "name": "User",
                  "fields": [
                    {"name": "id", "type": "int"},
                    {"name": "key", "type": "string"},
                    {"name": "text", "type": "string"}
                  ]
                }"""

        avro_serializer = AvroSerializer(schema_reg_client, schema_str)

        value = avro_serializer(
            {"id": i, "key": f"{name}-111", "text": f"Test message {i}"}, SerializationContext(name, MessageField.VALUE)
        )

        producer.poll(0)
        producer.produce(topic=name, value=value, key=f"key{str(i % 4)}")  # key to distribute messages to partitions
        producer.flush()



================================================
File: components/ex-kafka/tests/functional/01_avro-value/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": []
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "bootstrap_servers": [
      "broker:9092"
    ],
    "group_id": "my-group2",
    "security_protocol": "PLAINTEXT",
    "topics": [
      "avro-value"
    ],
    "deserialize": "avro",
    "flatten_message_value_columns": false,
    "schema_registry_url": "http://schema-registry:8081",
    "debug": true,
    "freeze_timestamp": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  }
}


================================================
File: components/ex-kafka/tests/functional/01_avro-value/source/data/in/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/01_avro-value/source/data/in/files/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/01_avro-value/source/data/in/tables/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/01_avro-value/source/data/out/files/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/01_avro-value/source/data/out/tables/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/02_text-message/expected/data/out/files/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/02_text-message/expected/data/out/tables/text-message.manifest
================================================
{"incremental": true, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "schema": [{"name": "topic", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "timestamp_type", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "timestamp", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "partition", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true}, {"name": "offset", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true, "primary_key": true}, {"name": "key", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "value", "data_type": {"base": {"type": "STRING"}}, "nullable": true}]}


================================================
File: components/ex-kafka/tests/functional/02_text-message/expected/data/out/tables/text-message/p0-0.csv
================================================
text-message,1,1732104020556,0,0,b'key3',Test message 3
text-message,1,1732104020556,0,1,b'key3',Test message 7
text-message,1,1732104020556,0,2,b'key3',Test message 11



================================================
File: components/ex-kafka/tests/functional/02_text-message/expected/data/out/tables/text-message/p1-0.csv
================================================
text-message,1,1732104020556,1,0,b'key1',Test message 1
text-message,1,1732104020556,1,1,b'key2',Test message 2
text-message,1,1732104020556,1,2,b'key1',Test message 5
text-message,1,1732104020556,1,3,b'key2',Test message 6
text-message,1,1732104020556,1,4,b'key1',Test message 9
text-message,1,1732104020556,1,5,b'key2',Test message 10
text-message,1,1732104020556,1,6,b'key1',Test message 13
text-message,1,1732104020556,1,7,b'key2',Test message 14



================================================
File: components/ex-kafka/tests/functional/02_text-message/expected/data/out/tables/text-message/p2-0.csv
================================================
text-message,1,1732104020556,2,0,b'key0',Test message 0
text-message,1,1732104020556,2,1,b'key0',Test message 4
text-message,1,1732104020556,2,2,b'key0',Test message 8
text-message,1,1732104020556,2,3,b'key0',Test message 12



================================================
File: components/ex-kafka/tests/functional/02_text-message/source/set_up.py
================================================
from datadirtest import TestDataDir
from confluent_kafka import Producer
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.avro import AvroSerializer
from confluent_kafka.serialization import SerializationContext, MessageField
from confluent_kafka.admin import AdminClient
import os


def run(context: TestDataDir):
    os.environ["KBC_PROJECTID"] = "00002"
    os.environ["KBC_CONFIGROWID"] = "00002"

    admin_client = AdminClient({"bootstrap.servers": "broker:9092", "security.protocol": "PLAINTEXT"})

    admin_client.delete_topics(topics=["text-message"])

    producer = Producer(
        {
            "bootstrap.servers": "broker:9092",
            "security.protocol": "PLAINTEXT",
            "acks": 0,
            "batch.size": 1000000,
            "linger.ms": 10000,
            "compression.type": "none",
            "enable.idempotence": "False",
        }
    )

    name = "text-message"

    for i in range(15):
        producer.poll(0)
        text = f"Test message {i}"
        value = text.encode("utf-8")
        producer.produce(topic=name, value=value, key=f"key{str(i % 4)}")  # key to distribute messages to partitions
        producer.flush()



================================================
File: components/ex-kafka/tests/functional/02_text-message/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": []
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "bootstrap_servers": ["broker:9092"],
    "group_id": "my-group1",
    "security_protocol": "PLAINTEXT",
    "topics": ["text-message"],
    "deserialize": "none",
    "flatten_message_value_columns": false,
    "schema_registry_url": "http://schema-registry:8081",
    "debug": true,
    "freeze_timestamp": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  }
}



================================================
File: components/ex-kafka/tests/functional/02_text-message/source/data/in/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/02_text-message/source/data/in/files/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/02_text-message/source/data/in/tables/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/02_text-message/source/data/out/files/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/02_text-message/source/data/out/tables/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/03_avro-columns/expected/data/out/files/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/03_avro-columns/expected/data/out/tables/avro-columns.manifest
================================================
{"incremental": true, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "schema": [{"name": "topic", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "timestamp_type", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "timestamp", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "partition", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true}, {"name": "offset", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true, "primary_key": true}, {"name": "key", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "col_boolean", "data_type": {"base": {"type": "BOOLEAN"}}, "nullable": true}, {"name": "col_int", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true}, {"name": "col_long", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "col_float", "data_type": {"base": {"type": "FLOAT"}}, "nullable": true}, {"name": "col_double", "data_type": {"base": {"type": "FLOAT"}}, "nullable": true}, {"name": "col_bytes", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "col_string", "data_type": {"base": {"type": "STRING"}}, "nullable": true}]}


================================================
File: components/ex-kafka/tests/functional/03_avro-columns/expected/data/out/tables/avro-columns/p0-0.csv
================================================
avro-columns,1,1732104020556,0,0,b'key3',True,3,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,0,1,b'key3',True,7,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,0,2,b'key3',True,11,1234567890,123.44999694824219,123456.7891234568,b'test',Test message



================================================
File: components/ex-kafka/tests/functional/03_avro-columns/expected/data/out/tables/avro-columns/p1-0.csv
================================================
avro-columns,1,1732104020556,1,0,b'key1',True,1,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,1,b'key2',True,2,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,2,b'key1',True,5,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,3,b'key2',True,6,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,4,b'key1',True,9,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,5,b'key2',True,10,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,6,b'key1',True,13,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,7,b'key2',True,14,1234567890,123.44999694824219,123456.7891234568,b'test',Test message



================================================
File: components/ex-kafka/tests/functional/03_avro-columns/expected/data/out/tables/avro-columns/p2-0.csv
================================================
avro-columns,1,1732104020556,2,0,b'key0',True,0,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,2,1,b'key0',True,4,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,2,2,b'key0',True,8,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,2,3,b'key0',True,12,1234567890,123.44999694824219,123456.7891234568,b'test',Test message



================================================
File: components/ex-kafka/tests/functional/03_avro-columns/source/set_up.py
================================================
from datadirtest import TestDataDir
from confluent_kafka import Producer
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.avro import AvroSerializer
from confluent_kafka.serialization import SerializationContext, MessageField
from confluent_kafka.admin import AdminClient
import os


def run(context: TestDataDir):
    os.environ["KBC_PROJECTID"] = "00003"
    os.environ["KBC_CONFIGROWID"] = "00003"

    admin_client = AdminClient({"bootstrap.servers": "broker:9092", "security.protocol": "PLAINTEXT"})

    admin_client.delete_topics(topics=["avro-columns"])

    schema_reg_client = SchemaRegistryClient({"url": "http://schema-registry:8081"})

    producer = Producer(
        {
            "bootstrap.servers": "broker:9092",
            "security.protocol": "PLAINTEXT",
            "acks": 0,
            "batch.size": 1000000,
            "linger.ms": 10000,
            "compression.type": "none",
            "enable.idempotence": "False",
        }
    )

    name = "avro-columns"

    for i in range(15):
        schema_str = """{
                  "type": "record",
                  "name": "User",
                  "fields": [
                    {"name": "col_boolean", "type": "boolean"},
                    {"name": "col_int", "type": "int"},
                    {"name": "col_long", "type": "long"},
                    {"name": "col_float", "type": "float"},
                    {"name": "col_double", "type": "double"},
                    {"name": "col_bytes", "type": "bytes"},
                    {"name": "col_string", "type": "string"}
                  ]
                }"""

        avro_serializer = AvroSerializer(schema_reg_client, schema_str)

        value = avro_serializer(
            {
                "col_boolean": True,
                "col_int": i,
                "col_long": 1234567890,
                "col_float": 123.45,
                "col_double": 123456.7891234568,
                "col_bytes": b"test",
                "col_string": "Test message",
            },
            SerializationContext(name, MessageField.VALUE),
        )

        producer.poll(0)
        producer.produce(topic=name, value=value, key=f"key{str(i % 4)}")  # key to distribute messages to partitions
        producer.flush()



================================================
File: components/ex-kafka/tests/functional/03_avro-columns/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": []
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "bootstrap_servers": ["broker:9092"],
    "group_id": "my-group3",
    "security_protocol": "PLAINTEXT",
    "topics": ["avro-columns"],
    "deserialize": "avro",
    "flatten_message_value_columns": true,
    "schema_registry_url": "http://schema-registry:8081",
    "debug": true,
    "freeze_timestamp": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  }
}



================================================
File: components/ex-kafka/tests/functional/03_avro-columns/source/data/in/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/03_avro-columns/source/data/in/files/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/03_avro-columns/source/data/in/tables/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/03_avro-columns/source/data/out/files/.gitkeep
================================================



================================================
File: components/ex-kafka/tests/functional/03_avro-columns/source/data/out/tables/.gitkeep
================================================



================================================
File: components/wr-kafka/README.md
================================================
# KBC Kafka Writer

Simple Kafka producer for Keboola Connection.

## Functionality

Component supports following security protocols: PLAINTEXT, SASL_PLAINTEXT, SSL

The component supports the following value serializations in the message:
text, JSON, and Avro (either using the Confluent Schema Registry or with a provided Avro schema string if the schema_registry_url parameter is not defined)

Messages can be serialized using Avro serialization if configured. The schema for serialization can be provided as a
schema string, or obtained from the schema registry if configured.

The component reads data from input tables and produces messages to a Kafka topic. The message key can be set from a
specified column, and the message value can include selected columns from the input data.

## Configuration parameters - Application

- **servers** - [REQ] list of Kafka servers. Bootstrap Servers are a list of host/port pairs to use for establishing the
  initial connection to the Kafka cluster.
  These servers are just used for the initial connection to discover the full cluster membership.
- **client_id** - [OPT] Client ID of the producer.
- **topic** - [REQ] Kafka topic to produce messages to.
- **security_protocol** - [REQ] Security protocol. Possible values: `PLAINTEXT`, `SASL_PLAINTEXT`, `SSL`
- **sasl_mechanisms** - [OPT] SASL mechanism to use for authentication. Required if `security_protocol` is set to
  `SASL_PLAINTEXT`
- **username** - [REQ] Username required if `security_protocol` is set to `SASL_PLAINTEXT`
- **#password** - [REQ] Password required if `security_protocol` is set to `SASL_PLAINTEXT`
- **#ssl_ca** - [REQ] CA certificate as string. Required if `security_protocol` is set to `SSL`
- **#ssl_key** - [REQ] Client key as string. Required if `security_protocol` is set to `SSL`
- **#ssl_certificate** - [REQ] Client certificate as string. Required if `security_protocol` is set to `SSL`
- **kafka_extra_params** - [OPT] Optional argument to specify extra parameters for Kafka producer as JSON string.
- **key_column_name** - [OPT] Name of the column in input table to use as message key. Default is empty string.
- **value_column_names** - [OPT] List of column names in input table to include in the message value. Default is an
  empty list.
- **serialize** - [OPT] Serialization method. Possible values: `text`, `avro`, `json`,
- **schema_str** - [OPT] Argument to specify Avro schema as string. Required if `serialize` is set to `avro`.
- **schema_registry_url** - [OPT] Optional argument to specify URL of Schema Registry. Required if using schema registry
  for Avro serialization.
- **schema_registry_extra_params** - [OPT] Optional argument to specify extra parameters for Schema Registry as JSON
  string.
- **debug** - [OPT] Optional argument to enable debug mode with extensive logging. By default `false`

### Example Application configuration JSON

```
{
  "parameters": {
    "kafka_extra_params": "{\"session.timeout.ms\": 6000 }",
    "bootstrap_servers": [
      "xxx01.srvs.test.com:9094",
      "xxxy-02.srvs.test.com:9094",
      "xxx-03.srvs.test.com:9094"
    ],
    "sasl_mechanisms": "PLAIN",
    "username": "user",
    "security_protocol": "SASL_PLAINTEXT",
    "#password": "KBC::ProjectSecure::...",
    "debug": true
  }
}
```

### Example row configuration JSON

```
{
  "parameters": {
    "key_column_name": "order_id"
    "value_column_names": [
      "name",
      "address"
    ],
    "serialize": "json",
  }
}
```


================================================
File: components/wr-kafka/Dockerfile
================================================
FROM python:3.12-slim
ENV PYTHONIOENCODING=utf-8
ENV PYTHONPATH="/code:${PYTHONPATH}"

ARG COMPONENT_DIR="wr-kafka"

RUN pip install flake8


COPY /components/common/requirements-common.txt /code/
RUN pip install -r /code/requirements-common.txt
COPY /components/common /code/common/

COPY /components/${COMPONENT_DIR} /code/components/${COMPONENT_DIR}/

COPY /components/${COMPONENT_DIR}/src /code/src/
COPY /components/${COMPONENT_DIR}/tests /code/tests/
COPY /components/${COMPONENT_DIR}/scripts /code/scripts/
COPY /components/${COMPONENT_DIR}/flake8.cfg /code/flake8.cfg

WORKDIR /code/

CMD ["python", "-u", "/code/src/component.py"]


================================================
File: components/wr-kafka/LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
File: components/wr-kafka/VERSION
================================================
0.0.4


================================================
File: components/wr-kafka/docker-compose.yml
================================================
services:
  # for development purposes
  dev:
    build:
      context: ../../
      dockerfile: components/ex-kafka/Dockerfile
    volumes:
        - ./:/code
        - ./data:/data
        - ../common:/code/common
    environment:
      - KBC_DATADIR=/data
  broker:
    image: apache/kafka:3.8.1
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:9092,EXTERNAL://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "19092:19092"
  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.0
    hostname: schema-registry
    depends_on:
      broker:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "--output", "/dev/null", "--silent", "--head", "--fail", "http://schema-registry:8081/subjects" ]
      interval: 3s
      timeout: 10s
      retries: 30
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:9092,EXTERNAL://localhost:19092
      SCHEMA_REGISTRY_DEBUG: 'true'
  test:
    # Use to run flake8 and unittests checks
    build:
      context: ../../
      dockerfile: components/ex-kafka/Dockerfile
    depends_on:
      schema-registry:
        condition: service_healthy
    volumes:
      - ./:/code
      - ./data:/data
      - ../common:/code/common
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
File: components/wr-kafka/flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
File: components/wr-kafka/requirements.txt
================================================



================================================
File: components/wr-kafka/.gitignore
================================================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]

# kbc datafolder
/data/


================================================
File: components/wr-kafka/component_config/component_long_description.md
================================================
The Kafka Writer publishes messages from an input table to a specified topic.
It supports payloads in text, Avro, and JSON (schemaless) formats.

More information about the functionality and how to configure component it can be found in the [documentation](https://github.com/keboola/component-kafka/blob/master/components/wr-kafka/README.md).


================================================
File: components/wr-kafka/component_config/component_short_description.md
================================================
Apache Kafka is an open-source log-based event streaming platform.


================================================
File: components/wr-kafka/component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Parameters",
  "required": [
  ],
  "properties": {
    "topic": {
      "type": "string",
      "enum": [],
      "items": {
        "enum": [],
        "type": "string"
      },
      "title": "Topic to write",
      "options": {
        "async": {
          "cache": false,
          "label": "Load topics",
          "action": "list_topics",
          "autoload": []
        }
      },
      "propertyOrder": 1
    },
    "serialize": {
      "enum": [
        "text",
        "avro",
        "json"
      ],
      "type": "string",
      "title": "Serialize message value",
      "options": {
        "enum_titles": [
          "Text (UTF-8)",
          "Avro",
          "JSON"
        ]
      },
      "propertyOrder": 2
    },
    "schema_source": {
      "enum": [
        "user_defined",
        "schema_registry"
      ],
      "type": "string",
      "title": "Serialization schema source",
      "options": {
        "dependencies": {
          "serialize": "avro"
        },
        "enum_titles": [
          "User defined",
          "From schema registry"
        ]
      },
      "propertyOrder": 4
    },
    "schema_str": {
      "type": "string",
      "title": "Avro schema string",
      "options": {
        "dependencies": {
          "schema_source": "user_defined"
        }
      },
      "propertyOrder": 5
    },
    "schema_registry_url": {
      "type": "string",
      "title": "Schema registry URL",
      "description": "Schema registry URL including protocol and port (e.g. http://schema-registry:8081)",
      "options": {
        "dependencies": {
          "schema_source": "schema_registry"
        }
      },
      "propertyOrder": 6
    },
    "schema_registry_extra_params": {
      "type": "string",
      "title": "Additional Schema Registry parameters",
      "description": "Dictionary of additional <a href='https://docs.confluent.io/platform/current/schema-registry/installation/config.html'>Schema Registry parameters</a> in the format {\"exporter.retries.wait.ms\": 2000, \"exporter.max.retries\n\": 5\n} ",
      "options": {
        "dependencies": {
          "schema_source": "schema_registry"
        }
      },
      "propertyOrder": 7
    },
    "key_source": {
      "enum": [
        "input_table",
        "configuration"
      ],
      "type": "string",
      "title": "Messages Key Source",
      "default": "from_input_table",
      "options": {
        "enum_titles": [
          "Input Table",
          "Configuration"
        ]
      },
      "description": "Key of the messages can either be specified for each message in the input table, or defined once for the entire table.",
      "propertyOrder": 8
    },
    "key_column_name": {
      "type": "string",
      "title": "Key column name",
      "watch": {
        "columns": "_metadata_.table.columns"
      },
      "enumSource": "columns",
      "options": {
        "dependencies": {
          "key_source": "input_table"
        }
      },
      "propertyOrder": 9
    },
    "key_value": {
      "type": "string",
      "title": "Key",
      "options": {
        "dependencies": {
          "key_source": "configuration"
        }
      },
      "propertyOrder": 10
    },
    "value_column_names": {
      "type": "array",
      "items": {
        "watch": {
          "columns": "_metadata_.table.columns"
        },
        "enumSource": "columns",
        "type": "string"
      },
      "title": "Message value columns",
      "description": "Columns to be added to the message value payload, if empty all columns will be added.",
      "format": "select",
      "options": {
        "tags": true
      },
      "uniqueItems": true,
      "propertyOrder": 11
    }
  }
}


================================================
File: components/wr-kafka/component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Application configuration",
  "required": [
    "bootstrap_servers"
  ],
  "properties": {
    "bootstrap_servers": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "enum": [],
        "type": "string"
      },
      "options": {
        "tags": true
      },
      "format": "select",
      "title": "Bootstrap servers",
      "description": "A list of one or more bootstrap servers in the Kafka cluster, specified in the format host:port.",
      "propertyOrder": 1
    },
    "security_protocol": {
      "enum": [
        "PLAINTEXT",
        "SSL",
        "SASL_PLAINTEXT",
        "SASL_SSL"
      ],
      "type": "string",
      "title": "Security protocol",
      "options": {
        "enum_titles": [
          "PLAINTEXT",
          "SSL",
          "SASL_PLAINTEXT",
          "SASL_SSL"
        ]
      },
      "propertyOrder": 2
    },
    "sasl_mechanism": {
      "enum": [
        "PLAIN",
        "SCRAM-SHA-512"
      ],
      "type": "string",
      "title": "SASL mechanism",
      "options": {
        "dependencies": {
          "security_protocol": [
            "SASL_PLAINTEXT",
            "SASL_SSL"
          ]
        },
        "enum_titles": [
          "PLAIN",
          "SCRAM-SHA-512"
        ]
      },
      "propertyOrder": 3
    },
    "username": {
      "type": "string",
      "title": "Username",
      "options": {
        "dependencies": {
          "security_protocol": [
            "SASL_PLAINTEXT",
            "SASL_SSL"
          ]
        }
      },
      "propertyOrder": 4
    },
    "#password": {
      "type": "string",
      "format": "password",
      "title": "Password",
      "options": {
        "dependencies": {
          "security_protocol": [
            "SASL_PLAINTEXT",
            "SASL_SSL"
          ]
        }
      },
      "propertyOrder": 5
    },
    "#ssl_ca": {
      "type": "string",
      "format": "textarea",
      "title": "SSL CA",
      "options": {
        "tooltip": "Insert the entire contents of the .pem file, including newlines. Once saved, the value will be encrypted.",
        "dependencies": {
          "security_protocol": [
            "SSL",
            "SASL_SSL"
          ]
        }
      },
      "propertyOrder": 6
    },
    "#ssl_key": {
      "type": "string",
      "format": "textarea",
      "title": "SSL Key",
      "options": {
        "tooltip": "Insert the entire contents of the .pem file, including newlines. Once saved, the value will be encrypted.",
        "dependencies": {
          "security_protocol": [
            "SSL",
            "SASL_SSL"
          ]
        }
      },
      "propertyOrder": 7
    },
    "#ssl_certificate": {
      "type": "string",
      "format": "textarea",
      "title": "SSL Certificate",
      "options": {
        "tooltip": "Insert the entire contents of the .pem file, including newlines. Once saved, the value will be encrypted.",
        "dependencies": {
          "security_protocol": [
            "SSL",
            "SASL_SSL"
          ]
        }
      },
      "propertyOrder": 8
    },
    "kafka_extra_params": {
      "type": "string",
      "title": "Additional Kafka parameters",
      "description": "Dictionary of additional <a href='https://kafka.apache.org/documentation/#configuration'>Kafka parameters</a> in the format {\"auto.offset.reset\": \"earliest\", \"session.timeout.ms\": 6000\n} ",
      "propertyOrder": 9
    }
  }
}


================================================
File: components/wr-kafka/component_config/configuration_description.md
================================================
For details on how to configure the component, please refer to the [documentation](https://github.com/keboola/component-kafka/blob/master/components/wr-kafka/README.md).


================================================
File: components/wr-kafka/component_config/stack_parameters.json
================================================
{}


================================================
File: components/wr-kafka/component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: components/wr-kafka/component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
File: components/wr-kafka/component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: components/wr-kafka/component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: components/wr-kafka/component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: components/wr-kafka/component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: components/wr-kafka/component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"




================================================
File: components/wr-kafka/scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
File: components/wr-kafka/scripts/build_n_test.sh
================================================
#!/bin/sh

set -e

#find . -type f | sort

flake8 --config=flake8.cfg
echo "Running tests for main component..."
python -m unittest discover


================================================
File: components/wr-kafka/scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
File: components/wr-kafka/scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi


================================================
File: components/wr-kafka/scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"


================================================
File: components/wr-kafka/src/component.py
================================================
"""
Template Component main class.

"""

import csv
import io
import json
import logging
import time

import fastavro
from common.kafka_client import KafkaProducer
from configuration import Configuration, KeySource
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.avro import AvroSerializer
from confluent_kafka.serialization import MessageField, SerializationContext
from keboola.component.base import ComponentBase, sync_action
from keboola.component.exceptions import UserException
from keboola.component.sync_actions import SelectElement


class Component(ComponentBase):
    def __init__(self):
        self.params = None
        self.client = None
        self.serializer = None
        self.avro_schema = None
        self.schema_registry_client = None
        super().__init__()

    def run(self, debug=False):
        self.params = Configuration(**self.configuration.parameters)
        self._validate_stack_params()

        self.params.client_id = f"kbc-config-{self.environment_variables.config_row_id}" or "kbc-config-0"

        bootstrap_servers = ",".join(self.params.bootstrap_servers)
        self.client = self._init_client(debug, self.params, bootstrap_servers)

        if self.params.serialize == "avro":
            self._init_avro_serializer()

        input_tables = self.get_input_tables_definitions()

        if len(input_tables) != 1:
            raise UserException("Exactly one input table is expected.")

        input_table = input_tables[0]

        logging.info(f"Writing data from table: {input_table.name} to the topic: {self.params.topic}")

        start_time = time.time()

        with open(input_table.full_path, "r") as f:
            reader = csv.DictReader(f)
            for row in reader:
                self.write_line(row)

        logging.info(f"Writing finished in {time.time() - start_time:.2f} seconds")

    def _validate_stack_params(self):
        image_parameters = self.configuration.image_parameters or {}
        allowed_hosts = [f"{host.get('host')}:{host.get('port')}" for host in image_parameters.get("allowed_hosts", [])]

        if allowed_hosts:
            for item in self.params.bootstrap_servers:
                if item not in allowed_hosts:
                    raise UserException(f"Host {item} is not allowed")

    def _init_avro_serializer(self):
        if not self.params.schema_str:
            raise UserException("Schema string is required for Avro serialization.")

        # Convert the schema string to a fastavro schema
        self.avro_schema = fastavro.schema.parse_schema(json.loads(self.params.schema_str))

        if self.params.schema_registry_url:
            config = self.params.schema_registry_extra_params
            config["url"] = self.params.schema_registry_url
            self.schema_registry_client = SchemaRegistryClient(config)

            if self.params.schema_str:
                # Let AvroSerializer handle schema registration automatically
                self.serializer = AvroSerializer(self.schema_registry_client, self.params.schema_str)
            else:
                try:
                    subject_name = f"{self.params.topic}-value"
                    metadata = self.schema_registry_client.get_latest_version(subject_name)
                    schema_str = metadata.schema.schema_str
                    self.serializer = AvroSerializer(self.schema_registry_client, schema_str)
                except Exception as e:
                    raise UserException(f"No schema string provided and could not fetch from registry: {str(e)}")

    def write_line(self, row):
        topic = self.params.topic

        if self.params.key_source == KeySource.configuration:
            key = self.params.key
        else:
            key = row.get(self.params.key_column_name)

        if self.params.value_column_names:
            value = {col: row[col] for col in self.params.value_column_names}
        else:
            value = row

        serialized_value = self.serialize(value, topic)

        self.client.produce_message(topic, key, serialized_value)

    def serialize(self, value, topic):
        serialize_method = self.params.serialize.lower()

        if serialize_method == "avro":
            if self.params.schema_registry_url:
                converted_values = self._convert_types_for_avro(value, self.avro_schema)
                return self.serializer(converted_values, SerializationContext(topic, MessageField.VALUE))
            else:
                converted_values = self._convert_types_for_avro(value, self.avro_schema)
                out = io.BytesIO()
                fastavro.schemaless_writer(out, self.avro_schema, converted_values)
                return out.getvalue()
        elif serialize_method == "json":
            return json.dumps(value).encode("utf-8")
        else:
            return str(value).encode("utf-8")

    def _convert_types_for_avro(self, value: dict, schema: dict):
        converted_value = {}

        # For fastavro, we need to process the schema differently
        schema_fields = schema.get("fields", [])

        for field in schema_fields:
            field_name = field.get("name")

            # Skip fields not in the input data
            if field_name not in value:
                continue

            field_value = value[field_name]
            field_type = field.get("type")

            # Handle union types (represented as lists in fastavro schemas)
            if isinstance(field_type, list):
                # Use the first non-null type
                for type_option in field_type:
                    if type_option != "null":
                        field_type = type_option
                        break
                else:
                    field_type = "null"

            # Skip empty values
            if field_value is None or field_value == "":
                continue

            try:
                # Simple type casting based on Avro type
                if field_type == "string":
                    converted_value[field_name] = str(field_value)
                elif field_type == "int":
                    converted_value[field_name] = int(field_value)
                elif field_type == "long":
                    converted_value[field_name] = int(field_value)
                elif field_type == "boolean":
                    converted_value[field_name] = (
                        bool(int(field_value)) if field_value in ("0", "1") else field_value.lower() == "true"
                    )
                elif field_type == "float" or field_type == "double":
                    converted_value[field_name] = float(field_value)
                elif field_type == "bytes":
                    converted_value[field_name] = (
                        field_value.encode("utf-8") if isinstance(field_value, str) else field_value
                    )
                else:
                    # For unknown types, keep as string
                    converted_value[field_name] = str(field_value)
            except Exception as e:
                # If casting fails, just keep the original value
                logging.warning(f"Failed to cast {field_name}: {str(e)}")
                converted_value[field_name] = field_value

        return converted_value

    def _init_client(self, debug, params, bootstrap_servers):
        c = KafkaProducer(
            bootstrap_servers=bootstrap_servers,
            client_id=params.client_id,
            security_protocol=params.security_protocol,
            sasl_mechanisms=params.sasl_mechanism,
            username=params.username,
            password=params.password,
            ssl_ca=params.ssl_ca,
            ssl_key=params.ssl_key,
            ssl_certificate=params.ssl_certificate,
            logger=logging.getLogger(),
            config_params=params.kafka_extra_params,
            debug=debug,
        )
        return c

    @sync_action("list_topics")
    def list_topics(self):
        params = Configuration(**self.configuration.parameters)
        bootstrap_servers = ",".join(params.bootstrap_servers)

        c = self._init_client(False, params, bootstrap_servers)
        topics = c.list_topics()
        topics_names = [SelectElement(topics.get(t).topic) for t in topics]

        return topics_names


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
File: components/wr-kafka/src/configuration.py
================================================
import json
import logging
from enum import Enum

from keboola.component.exceptions import UserException
from pydantic import BaseModel, Field, ValidationError, field_validator


class KeySource(str, Enum):
    table = "input_table"
    configuration = "configuration"


class Configuration(BaseModel):
    bootstrap_servers: list[str] = Field(default=None)
    client_id: str = Field(default=None)

    topic: str = Field(default=None)

    security_protocol: str = Field(default=None)
    sasl_mechanism: str = Field(default=None)

    username: str = Field(default=None)
    password: str = Field(alias="#password", default=None)

    ssl_ca: str = Field(alias="#ssl_ca", default=None)
    ssl_key: str = Field(alias="#ssl_key", default=None)
    ssl_certificate: str = Field(alias="#ssl_certificate", default=None)

    kafka_extra_params: str = Field(default=None)

    key_source: KeySource = Field(default=KeySource.table)
    key: str = ""
    key_column_name: str = ""
    value_column_names: list[str] = []
    serialize: str = Field(default=None)
    schema_str: str = Field(default=None)
    schema_registry_url: str = Field(default=None)
    schema_registry_extra_params: str = Field(default={})

    debug: bool = False

    def __init__(self, **data):
        try:
            super().__init__(**data)
        except ValidationError as e:
            error_messages = [f"{err['loc'][0]}: {err['msg']}" for err in e.errors()]
            raise UserException(f"Validation Error: {', '.join(error_messages)}")

        if self.debug:
            logging.debug("Component will run in Debug mode")

    @field_validator("kafka_extra_params", "schema_registry_extra_params")
    def parse_configuration(cls, value):
        if value and isinstance(value, str):
            try:
                return json.loads(value.replace("'", '"'))
            except json.JSONDecodeError as e:
                raise ValueError(f"Invalid JSON string for config_params: {e}")
        return value



================================================
File: components/wr-kafka/tests/__init__.py
================================================
import sys
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")



================================================
File: components/wr-kafka/tests/test_component.py
================================================
"""
Created on 12. 11. 2018

@author: esner
"""

import os
import unittest

import mock
from component import Component
from freezegun import freeze_time


class TestComponent(unittest.TestCase):
    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {"KBC_DATADIR": "./non-existing-dir"})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
File: components/wr-kafka/tests/test_functional.py
================================================
import csv
import io
import json
import os
import time
import unittest

import fastavro
import polars
from component import Component
from confluent_kafka import Consumer, KafkaError
from confluent_kafka.admin import AdminClient
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.avro import AvroDeserializer
from confluent_kafka.serialization import MessageField, SerializationContext


class TestKafkaWriter(unittest.TestCase):
    @classmethod
    def setUpClass(cls) -> None:
        """
        Inti consumer and deletes all topics in the Kafka cluster that start with 'test-'.
        """
        cls.consumer = Consumer(
            {"bootstrap.servers": "broker:9092", "group.id": "test-consumer-group", "auto.offset.reset": "earliest"}
        )

        admin_client = AdminClient({"bootstrap.servers": "broker:9092"})

        # Get list of all topics
        cluster_metadata = admin_client.list_topics(timeout=10)
        all_topics = cluster_metadata.topics

        # Filter for topics starting with 'test-'
        test_topics = [topic for topic in all_topics if topic.startswith("test-")]

        if test_topics:
            try:
                admin_client.delete_topics(test_topics)
                time.sleep(2)  # Allow time for topic deletion to complete
                print(f"Deleted {len(test_topics)} test topics")
            except Exception as e:
                print(f"Error deleting test topics: {e}")

    def test_avro_with_registry(self):
        data_dir = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), "test-data", "avro-schema-registry", "source"
        )
        os.environ["KBC_DATADIR"] = data_dir

        topic = "test-avro-schema-registry"

        component = Component()
        component.execute_action()
        time.sleep(2)

        self.consumer.subscribe([topic])

        # Get schema for deserialization
        schema_registry_client = SchemaRegistryClient({"url": "http://schema-registry:8081"})
        subject_name = f"{topic}-value"
        schema_str = schema_registry_client.get_latest_version(subject_name).schema.schema_str
        deserializer = AvroDeserializer(schema_registry_client, schema_str)

        # Read expected output data for comparison
        expected_output_path = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), "test-data", "avro-schema-registry", "expected", "out.csv"
        )

        expected = polars.read_csv(expected_output_path).to_dicts()

        # Consume messages and verify
        consumed_messages = []
        for _ in range(len(expected)):
            msg = self.consumer.poll()
            if msg is None or msg.error():
                if msg and msg.error().code() != KafkaError._PARTITION_EOF:
                    print(f"Consumer error: {msg.error()}")
                break

            value = deserializer(msg.value(), SerializationContext(topic, MessageField.VALUE))
            consumed_messages.append(value)

        self.assertEqual(len(expected), len(consumed_messages))

        consumed_messages_sorted = sorted(consumed_messages, key=lambda x: x["row_number"])

        for i, expected in enumerate(expected):
            self.assertEqual(expected, consumed_messages_sorted[i])

    def test_avro_without_registry(self):
        data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "test-data", "avro", "source")
        os.environ["KBC_DATADIR"] = data_dir
        topic = "test-avro"

        component = Component()
        component.execute_action()
        time.sleep(2)

        self.consumer.subscribe([topic])

        # Load schema file for deserialization with fastavro
        schema_path = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), "test-data", "avro", "source", "config.json"
        )
        with open(schema_path, "r") as f:
            config = json.load(f).get("parameters")
            schema = json.loads(config.get("schema_str"))

        # Read expected output data for comparison
        expected_output_path = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), "test-data", "avro", "expected", "out.csv"
        )

        expected = polars.read_csv(expected_output_path).to_dicts()

        # Consume messages and verify
        consumed_messages = []
        for _ in range(len(expected)):
            msg = self.consumer.poll()
            if msg is None or msg.error():
                if msg and msg.error().code() != KafkaError._PARTITION_EOF:
                    print(f"Consumer error: {msg.error()}")
                break

            # Deserialize using fastavro
            bytes_io = io.BytesIO(msg.value())
            value = fastavro.schemaless_reader(bytes_io, schema)
            consumed_messages.append(value)

        self.assertEqual(len(expected), len(consumed_messages))

        consumed_messages_sorted = sorted(consumed_messages, key=lambda x: x["row_number"])

        for i, expected in enumerate(expected):
            self.assertEqual(expected, consumed_messages_sorted[i])

    def test_json(self):
        data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "test-data", "json", "source")
        os.environ["KBC_DATADIR"] = data_dir
        topic = "test-json"

        component = Component()
        component.execute_action()
        time.sleep(2)

        self.consumer.subscribe([topic])

        expected_output_path = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), "test-data", "json", "expected", "out.csv"
        )

        expected = polars.read_csv(expected_output_path, infer_schema=False).to_dicts()

        # Consume messages and verify
        consumed_messages = []
        for _ in range(len(expected)):
            msg = self.consumer.poll(timeout=5.0)
            if msg is None or msg.error():
                if msg and msg.error().code() != KafkaError._PARTITION_EOF:
                    print(f"Consumer error: {msg.error()}")
                break

            value = json.loads(msg.value().decode("utf-8"))

            consumed_messages.append(value)

        self.assertEqual(
            len(expected), len(consumed_messages), "Number of consumed messages doesn't match expected count"
        )

        consumed_messages_sorted = sorted(consumed_messages, key=lambda x: x["row_number"])

        for i, expected_item in enumerate(expected):
            self.assertEqual(
                expected_item, consumed_messages_sorted[i], f"Message at index {i} doesn't match expected data"
            )

    def test_text(self):
        data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "test-data", "text", "source")
        os.environ["KBC_DATADIR"] = data_dir
        topic = "test-text"

        component = Component()
        component.execute_action()
        time.sleep(2)

        self.consumer.subscribe([topic])

        # Read expected output data for comparison
        expected_output_path = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), "test-data", "text", "expected", "out.csv"
        )

        expected = polars.read_csv(expected_output_path, infer_schema=False).to_dicts()

        # Consume messages and verify
        consumed_messages = []
        for _ in range(len(expected)):
            msg = self.consumer.poll(timeout=5.0)
            if msg is None or msg.error():
                if msg and msg.error().code() != KafkaError._PARTITION_EOF:
                    print(f"Consumer error: {msg.error()}")
                break

            # Decode the text message - which is a string representation of a dictionary
            text_value = msg.value().decode("utf-8")

            json_str = text_value.replace("'", '"')
            dict_value = json.loads(json_str)
            consumed_messages.append(dict_value)

        self.assertEqual(
            len(expected), len(consumed_messages), "Number of consumed messages doesn't match expected count"
        )

        # Sort by row_number for comparison
        consumed_messages_sorted = sorted(consumed_messages, key=lambda x: x["row_number"])

        for i, expected_item in enumerate(expected):
            self.assertEqual(
                expected_item, consumed_messages_sorted[i], f"Message at index {i} doesn't match expected data"
            )

    def test_text_key_from_config(self):
        data_dir = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), "test-data", "text-key-from-config", "source"
        )
        os.environ["KBC_DATADIR"] = data_dir
        topic = "test-text-key-from-config"

        component = Component()
        component.execute_action()
        time.sleep(2)

        self.consumer.subscribe([topic])

        # Read expected output data for comparison
        expected_output_path = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), "test-data", "text-key-from-config", "expected", "out.csv"
        )

        expected = polars.read_csv(expected_output_path, infer_schema=False).to_dicts()

        # Consume messages and verify
        consumed_messages = []
        consumed_message_keys = []
        for _ in range(len(expected)):
            msg = self.consumer.poll(timeout=5.0)
            if msg is None or msg.error():
                if msg and msg.error().code() != KafkaError._PARTITION_EOF:
                    print(f"Consumer error: {msg.error()}")
                break

            # Decode the text message - which is a string representation of a dictionary
            text_value = msg.value().decode("utf-8")

            json_str = text_value.replace("'", '"')
            dict_value = json.loads(json_str)
            consumed_messages.append(dict_value)
            consumed_message_keys.append(msg.key().decode("utf-8"))

        time.sleep(1)

        self.assertEqual(
            len(expected), len(consumed_messages), "Number of consumed messages doesn't match expected count"
        )

        # Sort by row_number for comparison
        consumed_messages_sorted = sorted(consumed_messages, key=lambda x: x["row_number"])

        for i, expected_item in enumerate(expected):
            self.assertEqual(
                expected_item, consumed_messages_sorted[i], f"Message at index {i} doesn't match expected data"
            )

        for key in consumed_message_keys:
            self.assertEqual(key, "config")


if __name__ == "__main__":
    unittest.main()



================================================
File: components/wr-kafka/tests/test-data/avro/expected/out.csv
================================================
row_number,order_id,order_date,order_amount,discount,is_active,double,large_number,text
0,808506,2023-11-16 00:00:00,520.51,18.262887468686788,false,44.0,673.4837458553,How to become data driven startup
1,758947,2023-02-25 00:00:00,373.86,68.8059867307161,true,21.0,164.21723799795552,How to become data driven startup
2,60315,2023-07-10 00:00:00,716.22,64.2938330619118,false,248.0,700.8516405625297,How to become data driven startup
3,850246,2023-07-18 00:00:00,58.62,0.194284303705944,false,212.0,990.4052700964274,How to become data driven startup
4,508901,2023-04-23 00:00:00,707.71,9.52141773345853,true,12.0,639.231729595647,How to become data driven startup
5,102927,2023-11-18 00:00:00,555.48,11.092530453096563,false,147.0,47.10262779763779,How to become data driven startup
6,375233,2023-08-18 00:00:00,361.69,2.1320653388631685,false,145.0,201.7044334924421,How to become data driven startup
7,223395,2023-12-17 00:00:00,389.18,61.253579915811365,false,113.0,749.0221098337806,How to become data driven startup
8,759929,2023-04-27 00:00:00,786.86,82.92406137613816,true,179.0,137.3460257427445,How to become data driven startup
9,719033,2023-12-06 00:00:00,889.77,94.50768506025176,true,187.0,743.8016684636447,How to become data driven startup


================================================
File: components/wr-kafka/tests/test-data/avro/source/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "bootstrap_servers": ["broker:9092"],
    "topic": "test-avro",
    "key_column_name":"row_number",
    "value_column_names": ["row_number", "order_id", "order_date", "order_amount", "discount", "is_active", "double", "large_number", "text"],
    "serialize": "avro",
    "debug": true,
    "schema_str": "{\n  \"type\": \"record\",\n  \"name\": \"Message\",\n  \"fields\": [\n    {\"name\": \"row_number\", \"type\": \"int\"},\n    {\"name\": \"order_id\", \"type\": \"int\"},\n    {\"name\": \"order_date\", \"type\": \"string\"},\n    {\"name\": \"order_amount\", \"type\": \"double\"},\n    {\"name\": \"discount\", \"type\": \"double\"},\n    {\"name\": \"is_active\", \"type\": \"boolean\"},\n  {\"name\": \"double\", \"type\": \"double\"},\n    {\"name\": \"large_number\", \"type\": \"double\"},\n    {\"name\": \"text\", \"type\": \"string\"}\n  ]\n}"
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: components/wr-kafka/tests/test-data/avro/source/in/files/.gitkeep
================================================



================================================
File: components/wr-kafka/tests/test-data/avro/source/in/tables/test.csv
================================================
row_number,order_id,order_date,order_amount,discount,is_active,double,large_number,text
0,808506,2023-11-16 00:00:00,520.51,18.262887468686788,false,44.0,673.4837458553,How to become data driven startup
1,758947,2023-02-25 00:00:00,373.86,68.8059867307161,true,21.0,164.21723799795552,How to become data driven startup
2,60315,2023-07-10 00:00:00,716.22,64.2938330619118,false,248.0,700.8516405625297,How to become data driven startup
3,850246,2023-07-18 00:00:00,58.62,0.194284303705944,false,212.0,990.4052700964274,How to become data driven startup
4,508901,2023-04-23 00:00:00,707.71,9.52141773345853,true,12.0,639.231729595647,How to become data driven startup
5,102927,2023-11-18 00:00:00,555.48,11.092530453096563,false,147.0,47.10262779763779,How to become data driven startup
6,375233,2023-08-18 00:00:00,361.69,2.1320653388631685,false,145.0,201.7044334924421,How to become data driven startup
7,223395,2023-12-17 00:00:00,389.18,61.253579915811365,false,113.0,749.0221098337806,How to become data driven startup
8,759929,2023-04-27 00:00:00,786.86,82.92406137613816,true,179.0,137.3460257427445,How to become data driven startup
9,719033,2023-12-06 00:00:00,889.77,94.50768506025176,true,187.0,743.8016684636447,How to become data driven startup


================================================
File: components/wr-kafka/tests/test-data/avro/source/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: components/wr-kafka/tests/test-data/avro-schema-registry/expected/out.csv
================================================
row_number,order_id,order_date,order_amount,discount,is_active,double,large_number,text
0,808506,2023-11-16 00:00:00,520.51,18.262887468686788,false,44.0,673.4837458553,How to become data driven startup
1,758947,2023-02-25 00:00:00,373.86,68.8059867307161,true,21.0,164.21723799795552,How to become data driven startup
2,60315,2023-07-10 00:00:00,716.22,64.2938330619118,false,248.0,700.8516405625297,How to become data driven startup
3,850246,2023-07-18 00:00:00,58.62,0.194284303705944,false,212.0,990.4052700964274,How to become data driven startup
4,508901,2023-04-23 00:00:00,707.71,9.52141773345853,true,12.0,639.231729595647,How to become data driven startup
5,102927,2023-11-18 00:00:00,555.48,11.092530453096563,false,147.0,47.10262779763779,How to become data driven startup
6,375233,2023-08-18 00:00:00,361.69,2.1320653388631685,false,145.0,201.7044334924421,How to become data driven startup
7,223395,2023-12-17 00:00:00,389.18,61.253579915811365,false,113.0,749.0221098337806,How to become data driven startup
8,759929,2023-04-27 00:00:00,786.86,82.92406137613816,true,179.0,137.3460257427445,How to become data driven startup
9,719033,2023-12-06 00:00:00,889.77,94.50768506025176,true,187.0,743.8016684636447,How to become data driven startup


================================================
File: components/wr-kafka/tests/test-data/avro-schema-registry/source/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "bootstrap_servers": ["broker:9092"],
    "topic": "test-avro-schema-registry",
    "key_column_name":"row_number",
    "value_column_names": ["row_number", "order_id", "order_date", "order_amount", "discount", "is_active", "double", "large_number", "text"],
    "serialize": "avro",
    "schema_registry_url": "http://schema-registry:8081",
    "debug": true,
    "schema_str": "{\n  \"type\": \"record\",\n  \"name\": \"Message\",\n  \"fields\": [\n    {\"name\": \"row_number\", \"type\": \"int\"},\n    {\"name\": \"order_id\", \"type\": \"int\"},\n    {\"name\": \"order_date\", \"type\": \"string\"},\n    {\"name\": \"order_amount\", \"type\": \"double\"},\n    {\"name\": \"discount\", \"type\": \"double\"},\n    {\"name\": \"is_active\", \"type\": \"boolean\"},\n  {\"name\": \"double\", \"type\": \"double\"},\n    {\"name\": \"large_number\", \"type\": \"double\"},\n    {\"name\": \"text\", \"type\": \"string\"}\n  ]\n}"
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: components/wr-kafka/tests/test-data/avro-schema-registry/source/in/files/.gitkeep
================================================



================================================
File: components/wr-kafka/tests/test-data/avro-schema-registry/source/in/tables/test.csv
================================================
row_number,order_id,order_date,order_amount,discount,is_active,double,large_number,text
0,808506,2023-11-16 00:00:00,520.51,18.262887468686788,false,44.0,673.4837458553,How to become data driven startup
1,758947,2023-02-25 00:00:00,373.86,68.8059867307161,true,21.0,164.21723799795552,How to become data driven startup
2,60315,2023-07-10 00:00:00,716.22,64.2938330619118,false,248.0,700.8516405625297,How to become data driven startup
3,850246,2023-07-18 00:00:00,58.62,0.194284303705944,false,212.0,990.4052700964274,How to become data driven startup
4,508901,2023-04-23 00:00:00,707.71,9.52141773345853,true,12.0,639.231729595647,How to become data driven startup
5,102927,2023-11-18 00:00:00,555.48,11.092530453096563,false,147.0,47.10262779763779,How to become data driven startup
6,375233,2023-08-18 00:00:00,361.69,2.1320653388631685,false,145.0,201.7044334924421,How to become data driven startup
7,223395,2023-12-17 00:00:00,389.18,61.253579915811365,false,113.0,749.0221098337806,How to become data driven startup
8,759929,2023-04-27 00:00:00,786.86,82.92406137613816,true,179.0,137.3460257427445,How to become data driven startup
9,719033,2023-12-06 00:00:00,889.77,94.50768506025176,true,187.0,743.8016684636447,How to become data driven startup


================================================
File: components/wr-kafka/tests/test-data/avro-schema-registry/source/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: components/wr-kafka/tests/test-data/json/expected/out.csv
================================================
row_number,order_id,order_date,order_amount,discount,is_active,double,large_number,text
0,808506,2023-11-16 00:00:00,520.51,18.262887468686788,false,44.0,673.4837458553,How to become data driven startup
1,758947,2023-02-25 00:00:00,373.86,68.8059867307161,true,21.0,164.21723799795552,How to become data driven startup
2,60315,2023-07-10 00:00:00,716.22,64.2938330619118,false,248.0,700.8516405625297,How to become data driven startup
3,850246,2023-07-18 00:00:00,58.62,0.194284303705944,false,212.0,990.4052700964274,How to become data driven startup
4,508901,2023-04-23 00:00:00,707.71,9.52141773345853,true,12.0,639.231729595647,How to become data driven startup
5,102927,2023-11-18 00:00:00,555.48,11.092530453096563,false,147.0,47.10262779763779,How to become data driven startup
6,375233,2023-08-18 00:00:00,361.69,2.1320653388631685,false,145.0,201.7044334924421,How to become data driven startup
7,223395,2023-12-17 00:00:00,389.18,61.253579915811365,false,113.0,749.0221098337806,How to become data driven startup
8,759929,2023-04-27 00:00:00,786.86,82.92406137613816,true,179.0,137.3460257427445,How to become data driven startup
9,719033,2023-12-06 00:00:00,889.77,94.50768506025176,true,187.0,743.8016684636447,How to become data driven startup


================================================
File: components/wr-kafka/tests/test-data/json/source/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "bootstrap_servers": ["broker:9092"],
    "topic": "test-json",
    "key_column_name":"row_number",
    "value_column_names": ["row_number", "order_id", "order_date", "order_amount", "discount", "is_active", "double", "large_number", "text"],
    "serialize": "json",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: components/wr-kafka/tests/test-data/json/source/in/files/.gitkeep
================================================



================================================
File: components/wr-kafka/tests/test-data/json/source/in/tables/test.csv
================================================
row_number,order_id,order_date,order_amount,discount,is_active,double,large_number,text
0,808506,2023-11-16 00:00:00,520.51,18.262887468686788,false,44.0,673.4837458553,How to become data driven startup
1,758947,2023-02-25 00:00:00,373.86,68.8059867307161,true,21.0,164.21723799795552,How to become data driven startup
2,60315,2023-07-10 00:00:00,716.22,64.2938330619118,false,248.0,700.8516405625297,How to become data driven startup
3,850246,2023-07-18 00:00:00,58.62,0.194284303705944,false,212.0,990.4052700964274,How to become data driven startup
4,508901,2023-04-23 00:00:00,707.71,9.52141773345853,true,12.0,639.231729595647,How to become data driven startup
5,102927,2023-11-18 00:00:00,555.48,11.092530453096563,false,147.0,47.10262779763779,How to become data driven startup
6,375233,2023-08-18 00:00:00,361.69,2.1320653388631685,false,145.0,201.7044334924421,How to become data driven startup
7,223395,2023-12-17 00:00:00,389.18,61.253579915811365,false,113.0,749.0221098337806,How to become data driven startup
8,759929,2023-04-27 00:00:00,786.86,82.92406137613816,true,179.0,137.3460257427445,How to become data driven startup
9,719033,2023-12-06 00:00:00,889.77,94.50768506025176,true,187.0,743.8016684636447,How to become data driven startup


================================================
File: components/wr-kafka/tests/test-data/json/source/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: components/wr-kafka/tests/test-data/text/expected/out.csv
================================================
row_number,order_id,order_date,order_amount,discount,is_active,double,large_number,text
0,808506,2023-11-16 00:00:00,520.51,18.262887468686788,false,44.0,673.4837458553,How to become data driven startup
1,758947,2023-02-25 00:00:00,373.86,68.8059867307161,true,21.0,164.21723799795552,How to become data driven startup
2,60315,2023-07-10 00:00:00,716.22,64.2938330619118,false,248.0,700.8516405625297,How to become data driven startup
3,850246,2023-07-18 00:00:00,58.62,0.194284303705944,false,212.0,990.4052700964274,How to become data driven startup
4,508901,2023-04-23 00:00:00,707.71,9.52141773345853,true,12.0,639.231729595647,How to become data driven startup
5,102927,2023-11-18 00:00:00,555.48,11.092530453096563,false,147.0,47.10262779763779,How to become data driven startup
6,375233,2023-08-18 00:00:00,361.69,2.1320653388631685,false,145.0,201.7044334924421,How to become data driven startup
7,223395,2023-12-17 00:00:00,389.18,61.253579915811365,false,113.0,749.0221098337806,How to become data driven startup
8,759929,2023-04-27 00:00:00,786.86,82.92406137613816,true,179.0,137.3460257427445,How to become data driven startup
9,719033,2023-12-06 00:00:00,889.77,94.50768506025176,true,187.0,743.8016684636447,How to become data driven startup


================================================
File: components/wr-kafka/tests/test-data/text/source/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "bootstrap_servers": ["broker:9092"],
    "topic": "test-text",
    "key_column_name":"row_number",
    "value_column_names": ["row_number", "order_id", "order_date", "order_amount", "discount", "is_active", "double", "large_number", "text"],
    "serialize": "text",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: components/wr-kafka/tests/test-data/text/source/in/files/.gitkeep
================================================



================================================
File: components/wr-kafka/tests/test-data/text/source/in/tables/test.csv
================================================
row_number,order_id,order_date,order_amount,discount,is_active,double,large_number,text
0,808506,2023-11-16 00:00:00,520.51,18.262887468686788,false,44.0,673.4837458553,How to become data driven startup
1,758947,2023-02-25 00:00:00,373.86,68.8059867307161,true,21.0,164.21723799795552,How to become data driven startup
2,60315,2023-07-10 00:00:00,716.22,64.2938330619118,false,248.0,700.8516405625297,How to become data driven startup
3,850246,2023-07-18 00:00:00,58.62,0.194284303705944,false,212.0,990.4052700964274,How to become data driven startup
4,508901,2023-04-23 00:00:00,707.71,9.52141773345853,true,12.0,639.231729595647,How to become data driven startup
5,102927,2023-11-18 00:00:00,555.48,11.092530453096563,false,147.0,47.10262779763779,How to become data driven startup
6,375233,2023-08-18 00:00:00,361.69,2.1320653388631685,false,145.0,201.7044334924421,How to become data driven startup
7,223395,2023-12-17 00:00:00,389.18,61.253579915811365,false,113.0,749.0221098337806,How to become data driven startup
8,759929,2023-04-27 00:00:00,786.86,82.92406137613816,true,179.0,137.3460257427445,How to become data driven startup
9,719033,2023-12-06 00:00:00,889.77,94.50768506025176,true,187.0,743.8016684636447,How to become data driven startup


================================================
File: components/wr-kafka/tests/test-data/text/source/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: components/wr-kafka/tests/test-data/text-key-from-config/expected/out.csv
================================================
row_number,order_id,order_date,order_amount,discount,is_active,double,large_number,text
0,808506,2023-11-16 00:00:00,520.51,18.262887468686788,false,44.0,673.4837458553,How to become data driven startup
1,758947,2023-02-25 00:00:00,373.86,68.8059867307161,true,21.0,164.21723799795552,How to become data driven startup
2,60315,2023-07-10 00:00:00,716.22,64.2938330619118,false,248.0,700.8516405625297,How to become data driven startup
3,850246,2023-07-18 00:00:00,58.62,0.194284303705944,false,212.0,990.4052700964274,How to become data driven startup
4,508901,2023-04-23 00:00:00,707.71,9.52141773345853,true,12.0,639.231729595647,How to become data driven startup
5,102927,2023-11-18 00:00:00,555.48,11.092530453096563,false,147.0,47.10262779763779,How to become data driven startup
6,375233,2023-08-18 00:00:00,361.69,2.1320653388631685,false,145.0,201.7044334924421,How to become data driven startup
7,223395,2023-12-17 00:00:00,389.18,61.253579915811365,false,113.0,749.0221098337806,How to become data driven startup
8,759929,2023-04-27 00:00:00,786.86,82.92406137613816,true,179.0,137.3460257427445,How to become data driven startup
9,719033,2023-12-06 00:00:00,889.77,94.50768506025176,true,187.0,743.8016684636447,How to become data driven startup


================================================
File: components/wr-kafka/tests/test-data/text-key-from-config/source/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "bootstrap_servers": ["broker:9092"],
    "topic": "test-text-key-from-config",
    "key_source": "configuration",
    "key": "config",
    "value_column_names": ["row_number", "order_id", "order_date", "order_amount", "discount", "is_active", "double", "large_number", "text"],
    "serialize": "text",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: components/wr-kafka/tests/test-data/text-key-from-config/source/in/files/.gitkeep
================================================



================================================
File: components/wr-kafka/tests/test-data/text-key-from-config/source/in/tables/test.csv
================================================
row_number,order_id,order_date,order_amount,discount,is_active,double,large_number,text
0,808506,2023-11-16 00:00:00,520.51,18.262887468686788,false,44.0,673.4837458553,How to become data driven startup
1,758947,2023-02-25 00:00:00,373.86,68.8059867307161,true,21.0,164.21723799795552,How to become data driven startup
2,60315,2023-07-10 00:00:00,716.22,64.2938330619118,false,248.0,700.8516405625297,How to become data driven startup
3,850246,2023-07-18 00:00:00,58.62,0.194284303705944,false,212.0,990.4052700964274,How to become data driven startup
4,508901,2023-04-23 00:00:00,707.71,9.52141773345853,true,12.0,639.231729595647,How to become data driven startup
5,102927,2023-11-18 00:00:00,555.48,11.092530453096563,false,147.0,47.10262779763779,How to become data driven startup
6,375233,2023-08-18 00:00:00,361.69,2.1320653388631685,false,145.0,201.7044334924421,How to become data driven startup
7,223395,2023-12-17 00:00:00,389.18,61.253579915811365,false,113.0,749.0221098337806,How to become data driven startup
8,759929,2023-04-27 00:00:00,786.86,82.92406137613816,true,179.0,137.3460257427445,How to become data driven startup
9,719033,2023-12-06 00:00:00,889.77,94.50768506025176,true,187.0,743.8016684636447,How to become data driven startup


================================================
File: components/wr-kafka/tests/test-data/text-key-from-config/source/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: .github/actions/check-version-change/action.yml
================================================
name: 'Check Version Change'
description: 'Checks if VERSION file has changed compared to the last tag'

inputs:
  component:
    description: 'Component directory path'
    required: true

outputs:
  has_version_change:
    description: 'Whether the Version file has changed since last tag'
    value: ${{ steps.check.outputs.has_version_change }}
  version:
    description: 'Current version from Version file'
    value: ${{ steps.check.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Check version change
      id: check
      shell: bash
      run: |
        version_file="${{ inputs.component }}/VERSION"
        
        # Check if Version file exists
        if [ ! -f "$version_file" ]; then
          echo "Version file not found at $version_file"
          echo "has_version_change=false" >> $GITHUB_OUTPUT
          echo "version=" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Get current version
        current_version=$(cat "$version_file")
        echo "Current version: $current_version"
        echo "version=$current_version" >> $GITHUB_OUTPUT
        
        # Debug git info
        echo "Git remotes:"
        git remote -v
        
        # Ensure we have all tags
        echo "Fetching all tags..."
        git fetch --tags --force --unshallow || git fetch --tags --force
        
        # List all tags (without filter first)
        echo "All available tags:"
        git tag
        
        # Get all tags sorted by version (try both with and without v prefix)
        all_tags=$(git tag -l "*[0-9].[0-9]*.[0-9]*" --sort=-v:refname)
        echo "All matching tags found: $all_tags"
        
        # Get previous tag (second in the list)
        previous_tag=$(echo "$all_tags" | sed -n '2p')
        
        if [ -n "$previous_tag" ]; then
          echo "Previous tag: $previous_tag"
          # Get version from the previous tag
          git checkout $previous_tag 2>/dev/null
          if [ -f "$version_file" ]; then
            tag_version=$(cat "$version_file")
            echo "Version from previous tag: $tag_version"
            
            # Compare versions
            if [ "$current_version" != "$tag_version" ]; then
              echo "Version changed from $tag_version to $current_version"
              echo "has_version_change=true" >> $GITHUB_OUTPUT
            else
              echo "Version unchanged"
              echo "has_version_change=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "VERSION file not found in previous tag"
            echo "has_version_change=true" >> $GITHUB_OUTPUT
          fi
          # Return to original branch
          git checkout - 2>/dev/null
        else
          echo "No previous tag found - considering as version change"
          echo "has_version_change=true" >> $GITHUB_OUTPUT
        fi 


================================================
File: .github/workflows/common-component-workflow.yml
================================================
name: Component CI

on:
  workflow_call:
    inputs:
      component_dir:
        required: false
        type: string
        default: "."
        description: 'Component directory path (for monorepo)'
      kbc_developerportal_app:
        required: true
        type: string
        description: 'Component ID in Keboola'
      kbc_developerportal_vendor:
        required: true
        type: string
        description: 'Developer Portal vendor name'
      kbc_test_project_configs:
        required: false
        type: string
        default: ""
        description: 'Test project configurations'
    secrets:
      DOCKERHUB_USER:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      KBC_DEVELOPERPORTAL_USERNAME:
        required: true
      KBC_DEVELOPERPORTAL_PASSWORD:
        required: true
      KBC_STORAGE_TOKEN:
        required: true

jobs:
  check_version:
    name: Check Version and Branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check.outputs.version }}
      has_version_change: ${{ steps.check.outputs.has_version_change }}
      is_semantic_tag: ${{ steps.tag_check.outputs.is_semantic_tag }}
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
      should_deploy: ${{ steps.deploy_check.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version change
        id: check
        uses: ./.github/actions/check-version-change
        with:
          component: ${{ inputs.component_dir }}

      - name: Check if semantic tag
        id: tag_check
        run: |
          # Get current branch/tag name
          ref_name="${{ github.ref }}"
          name="${ref_name#refs/tags/}"
          name="${name#refs/heads/}"
          echo "Current ref name: $name"
          
          # Check if semantic version
          if echo "$name" | grep -qE '^([a-zA-Z0-9-]+-)?([0-9]+\.[0-9]+\.[0-9]+)$'; then
            echo "Valid semantic version detected"
            echo "is_semantic_tag=true" >> $GITHUB_OUTPUT
          else
            echo "Not a semantic version"
            echo "is_semantic_tag=false" >> $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: set_tag
        run: |
          if [ "${{ steps.tag_check.outputs.is_semantic_tag }}" = "true" ] && \
             [ "${{ steps.check.outputs.has_version_change }}" = "true" ]; then
            # Pro semantický tag s novou verzí použijeme verzi z VERSION
            echo "image_tag=${{ steps.check.outputs.version }}" >> $GITHUB_OUTPUT
          else
            # Pro ostatní případy použijeme název větve za posledním lomítkem
            branch_name="${GITHUB_REF#refs/heads/}"
            branch_name="${branch_name#refs/tags/}"
            image_tag="${branch_name##*/}"
            echo "image_tag=$image_tag" >> $GITHUB_OUTPUT
          fi

      - name: Check if should deploy
        id: deploy_check
        run: |
          if [ "${{ steps.tag_check.outputs.is_semantic_tag }}" = "true" ] && \
             [ "${{ steps.check.outputs.has_version_change }}" = "true" ]; then
            echo "Conditions met - will deploy"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "Conditions not met - will not deploy"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs: [ check_version ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.component_dir }}/Dockerfile
          tags: ${{ inputs.kbc_developerportal_app }}:latest
          outputs: type=docker,dest=/tmp/${{ inputs.kbc_developerportal_app }}.tar
          build-args: |
            KBC_DEVELOPERPORTAL_APP=${{ inputs.kbc_developerportal_app }}
            KBC_DEVELOPERPORTAL_VENDOR=${{ inputs.kbc_developerportal_vendor }}
            KBC_DEVELOPERPORTAL_USERNAME=${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
            KBC_DEVELOPERPORTAL_PASSWORD=${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

      - name: Load Image & Run Tests
        run: |
          cd ${{ inputs.component_dir }}
          ls
          docker load --input /tmp/${{ inputs.kbc_developerportal_app }}.tar
          docker image ls -a

          echo "Running unit-tests..."
          docker compose up test --exit-code-from test
          

      - name: Load Image
        run: |
          docker load --input /tmp/${{ inputs.kbc_developerportal_app }}.tar
          docker image ls -a

      - name: Docker login
        run: docker login --username "${{ secrets.DOCKERHUB_USER }}" --password "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ inputs.kbc_developerportal_vendor }}
          app_id: ${{ inputs.kbc_developerportal_app }}
          username: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.check_version.outputs.image_tag }}
          push_latest: ${{ needs.check_version.outputs.should_deploy }}
          source_image: ${{ inputs.kbc_developerportal_app }}

  tests-kbc:
    name: Run KBC Tests
    needs: [ check_version, build ]
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs

        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ inputs.kbc_developerportal_app }}
          tag: ${{ needs.check_version.outputs.image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    name: Deploy to KBC and update Developer Portal
    needs: [ check_version, build]
    if: needs.check_version.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ inputs.kbc_developerportal_vendor }}
          app_id: ${{ inputs.kbc_developerportal_app }}
          username: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.check_version.outputs.image_tag }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        env:
          KBC_DEVELOPERPORTAL_USERNAME: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
          KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          KBC_DEVELOPERPORTAL_VENDOR: ${{ inputs.kbc_developerportal_vendor }}
          KBC_DEVELOPERPORTAL_APP: ${{ inputs.kbc_developerportal_app }}
        run: |
          cd ${{ inputs.component_dir }}
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh 


================================================
File: .github/workflows/ex-kafka.yml
================================================
# This workflow is used to build and deploy the ex-kafka component
name: ex-kafka

on:
  push:
    branches:
     - 'feature/*'
     - 'fix/*'
     - '*' 
    tags:
      - '*' # Skip the workflow on the main branch without tag
    paths:
      - 'components/ex-kafka/**'
      - '../../components/common'
      - '.github/workflows/**'

concurrency: ci-${{ github.workflow }}-${{ github.ref }}

jobs:
  ci:
    uses: ./.github/workflows/common-component-workflow.yml
    with:
      component_dir: ./components/ex-kafka
      kbc_developerportal_app: keboola.ex-kafka
      kbc_developerportal_vendor: keboola
      kbc_test_project_configs: ""
    secrets:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      KBC_DEVELOPERPORTAL_USERNAME: ${{ vars.KBC_DEVELOPERPORTAL_USERNAME }}
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
      KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} 


================================================
File: .github/workflows/wr-kafka.yml
================================================
# This workflow is used to build and deploy the wr-kafka component
name: wr-kafka

on:
  push:
    branches:
     - 'feature/*'
     - 'fix/*'
     - '*' 
    tags:
      - '*' # Skip the workflow on the main branch without tag
    paths:
      - 'components/wr-kafka/**'
      - '../../components/common'
      - '.github/workflows/**'

concurrency: ci-${{ github.workflow }}-${{ github.ref }}

jobs:
  ci:
    uses: ./.github/workflows/common-component-workflow.yml
    with:
      component_dir: ./components/wr-kafka
      kbc_developerportal_app: keboola.wr-kafka
      kbc_developerportal_vendor: keboola
      kbc_test_project_configs: ""
    secrets:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      KBC_DEVELOPERPORTAL_USERNAME: ${{ vars.KBC_DEVELOPERPORTAL_USERNAME }}
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
      KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} 

