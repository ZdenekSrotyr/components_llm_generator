Directory structure:
└── keboola-component-kafka/
    ├── tests/
    │   ├── test_functional.py
    │   ├── __init__.py
    │   ├── test_component.py
    │   └── functional/
    │       ├── 01_avro-value/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── avro-value.manifest
    │       │   │           │   └── avro-value/
    │       │   │           │       ├── p0-0.csv
    │       │   │           │       ├── p2-0.csv
    │       │   │           │       └── p1-0.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       ├── set_up.py
    │       │       └── data/
    │       │           ├── in/
    │       │           │   ├── .gitkeep
    │       │           │   ├── tables/
    │       │           │   │   └── .gitkeep
    │       │           │   └── files/
    │       │           │       └── .gitkeep
    │       │           ├── out/
    │       │           │   ├── tables/
    │       │           │   │   └── .gitkeep
    │       │           │   └── files/
    │       │           │       └── .gitkeep
    │       │           └── config.json
    │       ├── 03_avro-columns/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── avro-columns/
    │       │   │           │   │   ├── p0-0.csv
    │       │   │           │   │   ├── p2-0.csv
    │       │   │           │   │   └── p1-0.csv
    │       │   │           │   └── avro-columns.manifest
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       ├── set_up.py
    │       │       └── data/
    │       │           ├── in/
    │       │           │   ├── .gitkeep
    │       │           │   ├── tables/
    │       │           │   │   └── .gitkeep
    │       │           │   └── files/
    │       │           │       └── .gitkeep
    │       │           ├── out/
    │       │           │   ├── tables/
    │       │           │   │   └── .gitkeep
    │       │           │   └── files/
    │       │           │       └── .gitkeep
    │       │           └── config.json
    │       └── 02_text-message/
    │           ├── expected/
    │           │   └── data/
    │           │       └── out/
    │           │           ├── tables/
    │           │           │   ├── text-message/
    │           │           │   │   ├── p0-0.csv
    │           │           │   │   ├── p2-0.csv
    │           │           │   │   └── p1-0.csv
    │           │           │   └── text-message.manifest
    │           │           └── files/
    │           │               └── .gitkeep
    │           └── source/
    │               ├── set_up.py
    │               └── data/
    │                   ├── in/
    │                   │   ├── .gitkeep
    │                   │   ├── tables/
    │                   │   │   └── .gitkeep
    │                   │   └── files/
    │                   │       └── .gitkeep
    │                   ├── out/
    │                   │   ├── tables/
    │                   │   │   └── .gitkeep
    │                   │   └── files/
    │                   │       └── .gitkeep
    │                   └── config.json
    ├── Dockerfile
    ├── flake8.cfg
    ├── src/
    │   ├── kafka/
    │   │   ├── __init__.py
    │   │   └── client.py
    │   ├── component.py
    │   └── configuration.py
    ├── LICENSE.md
    ├── docs/
    │   └── imgs/
    ├── requirements.txt
    ├── bitbucket-pipelines.yml
    ├── component_config/
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── stack_parameters.json
    │   ├── configuration_description.md
    │   ├── configRowSchema.json
    │   ├── component_long_description.md
    │   └── sample-config/
    │       ├── in/
    │       │   ├── tables/
    │       │   │   ├── test.csv
    │       │   │   └── test.csv.manifest
    │       │   ├── state.json
    │       │   └── files/
    │       │       └── order1.xml
    │       ├── out/
    │       │   ├── tables/
    │       │   │   └── test.csv
    │       │   └── files/
    │       │       └── order1.xml
    │       └── config.json
    ├── deploy.sh
    ├── docker-compose.yml
    ├── scripts/
    │   ├── build_n_test.sh
    │   ├── build_n_run.ps1
    │   ├── run_kbc_tests.ps1
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── README.md
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: /tests/test_functional.py
================================================
import unittest

from datadirtest import DataDirTester
from freezegun import freeze_time


class TestComponent(unittest.TestCase):

    @freeze_time("2023-04-02")
    def test_functional(self):
        functional_tests = DataDirTester()
        functional_tests.run()

if __name__ == "__main__":
    unittest.main()


================================================
File: /tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: /tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: /tests/functional/01_avro-value/expected/data/out/tables/avro-value.manifest
================================================
{"incremental": true, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "schema": [{"name": "topic", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "timestamp_type", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "timestamp", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "partition", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true, "primary_key": true}, {"name": "offset", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true, "primary_key": true}, {"name": "key", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "value", "data_type": {"base": {"type": "STRING"}}, "nullable": true}]}

================================================
File: /tests/functional/01_avro-value/expected/data/out/tables/avro-value/p0-0.csv
================================================
avro-value,1,1732104020556,0,0,b'key3',"{'id': 3, 'key': 'avro-value-111', 'text': 'Test message 3'}"
avro-value,1,1732104020556,0,1,b'key3',"{'id': 7, 'key': 'avro-value-111', 'text': 'Test message 7'}"
avro-value,1,1732104020556,0,2,b'key3',"{'id': 11, 'key': 'avro-value-111', 'text': 'Test message 11'}"


================================================
File: /tests/functional/01_avro-value/expected/data/out/tables/avro-value/p2-0.csv
================================================
avro-value,1,1732104020556,2,0,b'key0',"{'id': 0, 'key': 'avro-value-111', 'text': 'Test message 0'}"
avro-value,1,1732104020556,2,1,b'key0',"{'id': 4, 'key': 'avro-value-111', 'text': 'Test message 4'}"
avro-value,1,1732104020556,2,2,b'key0',"{'id': 8, 'key': 'avro-value-111', 'text': 'Test message 8'}"
avro-value,1,1732104020556,2,3,b'key0',"{'id': 12, 'key': 'avro-value-111', 'text': 'Test message 12'}"


================================================
File: /tests/functional/01_avro-value/expected/data/out/tables/avro-value/p1-0.csv
================================================
avro-value,1,1732104020556,1,0,b'key1',"{'id': 1, 'key': 'avro-value-111', 'text': 'Test message 1'}"
avro-value,1,1732104020556,1,1,b'key2',"{'id': 2, 'key': 'avro-value-111', 'text': 'Test message 2'}"
avro-value,1,1732104020556,1,2,b'key1',"{'id': 5, 'key': 'avro-value-111', 'text': 'Test message 5'}"
avro-value,1,1732104020556,1,3,b'key2',"{'id': 6, 'key': 'avro-value-111', 'text': 'Test message 6'}"
avro-value,1,1732104020556,1,4,b'key1',"{'id': 9, 'key': 'avro-value-111', 'text': 'Test message 9'}"
avro-value,1,1732104020556,1,5,b'key2',"{'id': 10, 'key': 'avro-value-111', 'text': 'Test message 10'}"
avro-value,1,1732104020556,1,6,b'key1',"{'id': 13, 'key': 'avro-value-111', 'text': 'Test message 13'}"
avro-value,1,1732104020556,1,7,b'key2',"{'id': 14, 'key': 'avro-value-111', 'text': 'Test message 14'}"


================================================
File: /tests/functional/01_avro-value/source/set_up.py
================================================

from datadirtest import TestDataDir
from confluent_kafka import Producer
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.avro import AvroSerializer
from confluent_kafka.serialization import SerializationContext, MessageField
from confluent_kafka.admin import AdminClient
import os

def run(context: TestDataDir):
    os.environ['KBC_PROJECTID'] = '00001'
    os.environ['KBC_CONFIGROWID'] = '00001'

    admin_client = AdminClient({
        'bootstrap.servers': 'broker:9092',
        'security.protocol': 'PLAINTEXT'})

    admin_client.delete_topics(topics=["avro-value"])

    schema_reg_client = SchemaRegistryClient({'url': 'http://schema-registry:8081'})

    producer = Producer({
        'bootstrap.servers': 'broker:9092',
        'security.protocol': 'PLAINTEXT',
        'acks': 0,
        'batch.size': 1000000,
        'linger.ms': 10000,
        'compression.type': 'none',
        'enable.idempotence': "False",
    })

    name = "avro-value"

    for i in range(15):
        schema_str = '''{
                  "type": "record",
                  "name": "User",
                  "fields": [
                    {"name": "id", "type": "int"},
                    {"name": "key", "type": "string"},
                    {"name": "text", "type": "string"}
                  ]
                }'''

        avro_serializer = AvroSerializer(schema_reg_client, schema_str)

        value = avro_serializer(
            {"id": i, "key": f"{name}-111", "text": f"Test message {i}"},
            SerializationContext(name, MessageField.VALUE)
        )

        producer.poll(0)
        producer.produce(topic=name, value=value, key=f"key{str(i % 4)}")  # key to distribute messages to partitions
        producer.flush()

================================================
File: /tests/functional/01_avro-value/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": []
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "servers": ["broker:9092"],
    "group_id": "my-group2",
    "security_protocol": "PLAINTEXT",
    "topics": ["avro-value"],
    "deserialize": "avro",
    "flatten_message_value_columns": false,
    "schema_registry_url": "http://schema-registry:8081",
    "debug": true,
    "freeze_timestamp": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  }
}


================================================
File: /tests/functional/03_avro-columns/expected/data/out/tables/avro-columns/p0-0.csv
================================================
avro-columns,1,1732104020556,0,0,b'key3',True,3,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,0,1,b'key3',True,7,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,0,2,b'key3',True,11,1234567890,123.44999694824219,123456.7891234568,b'test',Test message


================================================
File: /tests/functional/03_avro-columns/expected/data/out/tables/avro-columns/p2-0.csv
================================================
avro-columns,1,1732104020556,2,0,b'key0',True,0,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,2,1,b'key0',True,4,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,2,2,b'key0',True,8,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,2,3,b'key0',True,12,1234567890,123.44999694824219,123456.7891234568,b'test',Test message


================================================
File: /tests/functional/03_avro-columns/expected/data/out/tables/avro-columns/p1-0.csv
================================================
avro-columns,1,1732104020556,1,0,b'key1',True,1,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,1,b'key2',True,2,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,2,b'key1',True,5,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,3,b'key2',True,6,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,4,b'key1',True,9,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,5,b'key2',True,10,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,6,b'key1',True,13,1234567890,123.44999694824219,123456.7891234568,b'test',Test message
avro-columns,1,1732104020556,1,7,b'key2',True,14,1234567890,123.44999694824219,123456.7891234568,b'test',Test message


================================================
File: /tests/functional/03_avro-columns/expected/data/out/tables/avro-columns.manifest
================================================
{"incremental": true, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "schema": [{"name": "topic", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "timestamp_type", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "timestamp", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "partition", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true, "primary_key": true}, {"name": "offset", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true, "primary_key": true}, {"name": "key", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "col_boolean", "data_type": {"base": {"type": "BOOLEAN"}}, "nullable": true}, {"name": "col_int", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true}, {"name": "col_long", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "col_float", "data_type": {"base": {"type": "FLOAT"}}, "nullable": true}, {"name": "col_double", "data_type": {"base": {"type": "FLOAT"}}, "nullable": true}, {"name": "col_bytes", "data_type": {"base": {"type": "STRING"}}, "nullable": true}, {"name": "col_string", "data_type": {"base": {"type": "STRING"}}, "nullable": true}]}

================================================
File: /tests/functional/03_avro-columns/source/set_up.py
================================================

from datadirtest import TestDataDir
from confluent_kafka import Producer
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.avro import AvroSerializer
from confluent_kafka.serialization import SerializationContext, MessageField
from confluent_kafka.admin import AdminClient
import os

def run(context: TestDataDir):
    os.environ['KBC_PROJECTID'] = '00003'
    os.environ['KBC_CONFIGROWID'] = '00003'

    admin_client = AdminClient({
        'bootstrap.servers': 'broker:9092',
        'security.protocol': 'PLAINTEXT'})

    admin_client.delete_topics(topics=["avro-columns"])

    schema_reg_client = SchemaRegistryClient({'url': 'http://schema-registry:8081'})

    producer = Producer({
        'bootstrap.servers': 'broker:9092',
        'security.protocol': 'PLAINTEXT',
        'acks': 0,
        'batch.size': 1000000,
        'linger.ms': 10000,
        'compression.type': 'none',
        'enable.idempotence': "False",
    })

    name = "avro-columns"

    for i in range(15):
        schema_str = '''{
                  "type": "record",
                  "name": "User",
                  "fields": [
                    {"name": "col_boolean", "type": "boolean"},
                    {"name": "col_int", "type": "int"},
                    {"name": "col_long", "type": "long"},
                    {"name": "col_float", "type": "float"},
                    {"name": "col_double", "type": "double"},
                    {"name": "col_bytes", "type": "bytes"},
                    {"name": "col_string", "type": "string"}
                  ]
                }'''

        avro_serializer = AvroSerializer(schema_reg_client, schema_str)

        value = avro_serializer(
            {"col_boolean": True, "col_int": i, "col_long": 1234567890, "col_float": 123.45,
             "col_double": 123456.7891234568, "col_bytes": b"test", "col_string": "Test message"},
            SerializationContext(name, MessageField.VALUE)
        )

        producer.poll(0)
        producer.produce(topic=name, value=value, key=f"key{str(i % 4)}")  # key to distribute messages to partitions
        producer.flush()


================================================
File: /tests/functional/03_avro-columns/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": []
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "yaction": "list_topics",
  "parameters": {
    "servers": ["broker:9092"],
    "group_id": "my-group3",
    "security_protocol": "PLAINTEXT",
    "topics": ["avro-columns"],
    "deserialize": "avro",
    "flatten_message_value_columns": true,
    "schema_registry_url": "http://schema-registry:8081",
    "debug": true,
    "freeze_timestamp": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  }
}


================================================
File: /tests/functional/02_text-message/expected/data/out/tables/text-message/p0-0.csv
================================================
text-message,1,1732104020556,0,0,b'key3',Test message 3
text-message,1,1732104020556,0,1,b'key3',Test message 7
text-message,1,1732104020556,0,2,b'key3',Test message 11


================================================
File: /tests/functional/02_text-message/expected/data/out/tables/text-message/p2-0.csv
================================================
text-message,1,1732104020556,2,0,b'key0',Test message 0
text-message,1,1732104020556,2,1,b'key0',Test message 4
text-message,1,1732104020556,2,2,b'key0',Test message 8
text-message,1,1732104020556,2,3,b'key0',Test message 12


================================================
File: /tests/functional/02_text-message/expected/data/out/tables/text-message/p1-0.csv
================================================
text-message,1,1732104020556,1,0,b'key1',Test message 1
text-message,1,1732104020556,1,1,b'key2',Test message 2
text-message,1,1732104020556,1,2,b'key1',Test message 5
text-message,1,1732104020556,1,3,b'key2',Test message 6
text-message,1,1732104020556,1,4,b'key1',Test message 9
text-message,1,1732104020556,1,5,b'key2',Test message 10
text-message,1,1732104020556,1,6,b'key1',Test message 13
text-message,1,1732104020556,1,7,b'key2',Test message 14


================================================
File: /tests/functional/02_text-message/expected/data/out/tables/text-message.manifest
================================================
{"incremental": true, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "schema": [{"name": "topic", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "timestamp_type", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "timestamp", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "partition", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true, "primary_key": true}, {"name": "offset", "data_type": {"base": {"type": "INTEGER"}}, "nullable": true, "primary_key": true}, {"name": "key", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "value", "data_type": {"base": {"type": "STRING"}}, "nullable": true}]}

================================================
File: /tests/functional/02_text-message/source/set_up.py
================================================

from datadirtest import TestDataDir
from confluent_kafka import Producer
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.avro import AvroSerializer
from confluent_kafka.serialization import SerializationContext, MessageField
from confluent_kafka.admin import AdminClient
import os

def run(context: TestDataDir):
    os.environ['KBC_PROJECTID'] = '00002'
    os.environ['KBC_CONFIGROWID'] = '00002'

    admin_client = AdminClient({
        'bootstrap.servers': 'broker:9092',
        'security.protocol': 'PLAINTEXT'})

    admin_client.delete_topics(topics=["text-message"])

    producer = Producer({
        'bootstrap.servers': 'broker:9092',
        'security.protocol': 'PLAINTEXT',
        'acks': 0,
        'batch.size': 1000000,
        'linger.ms': 10000,
        'compression.type': 'none',
        'enable.idempotence': "False",
    })

    name = "text-message"

    for i in range(15):
        producer.poll(0)
        text = f"Test message {i}"
        value = text.encode('utf-8')
        producer.produce(topic=name, value=value, key=f"key{str(i % 4)}")  # key to distribute messages to partitions
        producer.flush()


================================================
File: /tests/functional/02_text-message/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": []
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "yaction": "list_topics",
  "parameters": {
    "servers": ["broker:9092"],
    "group_id": "my-group1",
    "security_protocol": "PLAINTEXT",
    "topics": ["text-message"],
    "deserialize": "none",
    "flatten_message_value_columns": false,
    "schema_registry_url": "http://schema-registry:8081",
    "debug": true,
    "freeze_timestamp": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  }
}


================================================
File: /Dockerfile
================================================
FROM python:3.12-slim
ENV PYTHONIOENCODING=utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: /flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /src/kafka/client.py
================================================
import logging
import tempfile

from confluent_kafka import Consumer, TopicPartition

# maximum time (s) the consumer is waiting for next message
NEXT_MSG_TIMEOUT = 60


class KafkaConsumer():

    def __init__(self, servers, group_id, client_id, logger, security_protocol, sasl_mechanisms,
                 username=None, password=None, ssl_ca=None, ssl_key=None, ssl_certificate=None,
                 start_offset=None, config_params=None,
                 debug=False):

        configuration = {
            "bootstrap.servers": servers,
            "group.id": group_id,
            "client.id": client_id,
            "session.timeout.ms": 6000,
            "security.protocol": security_protocol,
            "sasl.mechanisms": sasl_mechanisms,
            "sasl.username": username,
            "sasl.password": password,
            'ssl.ca.location': self._create_temp_file(ssl_ca),
            'ssl.key.location': self._create_temp_file(ssl_key),
            'ssl.certificate.location': self._create_temp_file(ssl_certificate),
            # we are controlling offset ourselves, by default start from start
            "auto.offset.reset": "smallest",
            "enable.auto.commit": True,
            "logger": logger
        }
        if debug:
            configuration['debug'] = 'consumer, broker'

        if config_params:
            configuration.update(config_params)

        # kafka config can't handle None or "" values
        configuration = {key: value for key, value in configuration.items() if value is not None}

        if not start_offset:
            logging.info("No start offset specified, smallest offset will be used.")
        else:
            logging.info("Start offset specified, continue from previous state: {0}".format(start_offset))

        self.start_offsets = start_offset
        self.consumer = Consumer(**configuration)
        logging.debug(self.consumer.assignment(servers))

    @staticmethod
    def _create_temp_file(content, suffix=".pem"):
        if content:
            temp_file = tempfile.NamedTemporaryFile(suffix=suffix, delete=False)
            temp_file.write(content.encode())
            temp_file.close()
            return temp_file.name

    def _set_start_offsets(self, consumer, partitions):
        topic = partitions[0].topic

        if self.start_offsets.get(topic):
            logging.info(f"Extracting data from previous offsets: {self.start_offsets.get(topic)} - topic: {topic}")
            for p in partitions:
                p.offset = self.start_offsets.get(topic).get(f"p{p.partition}", -1) + 1
        else:
            logging.info("Extracting data from the beginning")
            for p in partitions:
                p.offset = 0

        consumer.assign(partitions)

    def consume_message_batch(self, topic):

        self.consumer.subscribe([topic], on_assign=self._set_start_offsets)

        # get highest offset for current topic
        max_offsets = self._get_max_offsets(topic)

        logging.info(F"Subscribed to the topic {topic}")
        # Data extraction
        do_poll = True
        # poll until timeout is reached or the max offset is received
        while do_poll:
            logging.info("Reading...")
            consume_pars = dict()
            consume_pars['timeout'] = NEXT_MSG_TIMEOUT

            msgs = self.consumer.consume(**consume_pars)
            if not msgs:
                # polling timeouted, stop
                logging.info(F'Polling timeouted, there was no message received for more than {NEXT_MSG_TIMEOUT}s')
                do_poll = False

            for msg in msgs:
                if msg is None:
                    continue

                if max_offsets.get(msg.partition()) == msg.offset():
                    max_offsets.pop(msg.partition())

                # if all partitions max offset was reached, end
                if not max_offsets:
                    do_poll = False

                yield msg

    def _get_max_offsets(self, topic):
        logging.debug('Getting offset boundaries for all partitions.')
        offsets = dict()
        curr_topics = self.consumer.list_topics(timeout=60).topics
        if not curr_topics.get(topic):
            raise ValueError(F'The topic: "{topic}" does not exist. Available topics are: {curr_topics}')
        for p in curr_topics[topic].partitions:
            boundaries = self.consumer.get_watermark_offsets(TopicPartition(topic, p))
            # store only if there are some new messages
            if boundaries[1] > 0:
                # decrement to get max existing offset
                offsets[p] = boundaries[1] - 1
        logging.debug(F'Offset boundaries listed successfully. {offsets}')
        return offsets

    def list_topics(self):
        return self.consumer.list_topics(timeout=60).topics


================================================
File: /src/component.py
================================================
"""
Template Component main class.

"""

import logging
import os
import csv
import json
from collections import OrderedDict
import polars

from keboola.component.base import ComponentBase, sync_action
from keboola.component.sync_actions import SelectElement, ValidationResult, MessageType
from keboola.component.exceptions import UserException
from keboola.component.dao import ColumnDefinition, BaseType

from configuration import Configuration

from kafka.client import KafkaConsumer

from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.avro import AvroDeserializer
from confluent_kafka.serialization import SerializationContext, MessageField

# global constants
RESULT_PK = ['topic', 'timestamp_type', 'timestamp', 'partition', 'offset', 'key']
RESULT_COLS = ['topic', 'timestamp_type', 'timestamp', 'partition', 'offset', 'key', 'value']
RESULT_COLS_DTYPES = ['string', 'string', 'timestamp', 'int', 'int', 'string', 'string']


class Component(ComponentBase):

    def __init__(self):
        self.params = None
        self.client = None
        self.topics = dict()
        self.columns = dict()
        self.latest_offsets = dict()
        super().__init__()

    def run(self, debug=False):
        """
        Main execution code

        TODO - statistics when DEBUG in conf dict:
        stats_cb(json_str): Callback for statistics data. This callback is triggered by poll() or
        flush every statistics.interval.ms (needs to be configured separately).
         Function argument json_str is a str instance of a JSON document containing
         statistics data. This callback is served upon calling client.poll() or producer.flush().
         See https://github.com/edenhill/librdkafka/wiki/Statistics” for more information.
        """

        self.params = Configuration(**self.configuration.parameters)
        self._validate_stack_params()

        self.params.group_id = f"kbc-proj-{self.environment_variables.project_id}" or "kbc-proj-0"
        self.params.client_id = f"kbc-config-{self.environment_variables.config_row_id}" or "kbc-config-0"

        # Generating a string out of the list
        servers = ",".join(self.params.servers)

        self.columns = self.get_state_file().get("columns", dict())
        self.latest_offsets = self.get_state_file().get("prev_offsets", dict())

        self.client = self._init_client(debug, self.params, self.latest_offsets, servers)

        logging.info("Extracting data from topics {0}".format(self.params.topics))

        for topic in self.params.topics:
            msg_cnt, res_file_folder, schema = self.consume_topic(topic)
            self.topics[topic] = {'msg_cnt': msg_cnt, 'res_file_folder': res_file_folder, 'schema': schema}

        # Store previous offsets and columns
        state_dict = {"prev_offsets": self.latest_offsets, "columns": self.columns}
        self.write_state_file(state_dict)
        logging.info("Offset file stored.")

        self.produce_manifest()
        logging.info("Extraction finished.")

    def _validate_stack_params(self):
        image_parameters = self.configuration.image_parameters or {}
        allowed_hosts = [f"{host.get('host')}:{host.get('port')}" for host in image_parameters.get('allowed_hosts', [])]

        if allowed_hosts:
            for item in self.params.servers:
                if item not in allowed_hosts:
                    raise UserException(f"Host {item} is not allowed")

    def produce_manifest(self):
        for topic, consumed in self.topics.items():

            schema = OrderedDict()
            for col, dtype in zip(RESULT_COLS, RESULT_COLS_DTYPES):
                schema[col] = ColumnDefinition(data_types=self.convert_dtypes(dtype))

            if consumed.get('schema'):
                del schema['value']

            for col in consumed.get('schema'):
                schema[col.get('name')] = ColumnDefinition(data_types=self.convert_dtypes(col.get('type')))

            # Produce final sliced table manifest
            if consumed['msg_cnt'] > 0:
                logging.info(F'Fetched {consumed['msg_cnt']} messages from topic - {topic}')
                out_table = self.create_out_table_definition(consumed['res_file_folder'], is_sliced=True,
                                                             primary_key=RESULT_PK, schema=schema,
                                                             incremental=True)

                self.write_manifest(out_table)
            else:
                logging.info('No new messages found!')

    def consume_topic(self, topic):

        self.columns.setdefault(topic, RESULT_COLS)

        deserializer = self.get_deserializer()

        res_file_folder = os.path.join(self.tables_out_path, topic)
        msg_cnt = 0
        last_message = None
        dtypes = []
        for msg in self.client.consume_message_batch(topic):
            if msg is None:
                break
            if msg.error():
                logging.error("Consumer error: {}".format(msg.error()))
                continue

            extracted_data, last_message = self.get_message_data(deserializer, last_message, msg, topic)

            filename = (("p{0}-{1}.csv").format(
                msg.partition(),
                msg.offset() // 10_000,
            ))

            logging.debug(F'Received message: {extracted_data}')

            # Save data as a sliced table file in defined folder
            self.save_file(extracted_data, os.path.join(res_file_folder, filename), topic)
            msg_cnt += 1

            print(msg.partition())

            if msg.topic() not in self.latest_offsets:
                self.latest_offsets[msg.topic()] = {}

            self.latest_offsets[msg.topic()]['p' + str(msg.partition())] = msg.offset()

        if self.params.deserialize == 'avro' and self.params.flatten_message_value_columns:
            dtypes = self.get_topic_dtypes(last_message)

        return msg_cnt, res_file_folder, dtypes

    def get_message_data(self, deserializer, last_message, msg, topic):
        if self.params.deserialize == 'avro':
            value = deserializer(msg.value(), SerializationContext(msg.topic(), MessageField.VALUE))
        else:
            value = msg.value().decode('utf-8')
        if self.params.freeze_timestamp:  # freeze for datadir tests
            timestamp = 1732104020556
        else:
            timestamp = msg.timestamp()[1]
        extracted_data = {
            'topic': msg.topic(),
            'timestamp_type': msg.timestamp()[0],
            'timestamp': timestamp,
            'partition': msg.partition(),
            'offset': msg.offset(),
            'key': msg.key()}
        if self.params.flatten_message_value_columns:
            self.safe_update(extracted_data, value)
            self.columns[topic] = list(extracted_data.keys())
            last_message = msg.value()  # to get dtypes
        else:
            extracted_data['value'] = value
        return extracted_data, last_message

    def get_deserializer(self):
        deserializer = None
        if self.params.deserialize == 'avro':
            if self.params.schema_registry_url:
                config = self.params.schema_registry_extra_params
                config['url'] = self.params.schema_registry_url
                schema_registry_client = SchemaRegistryClient(config)
                deserializer = AvroDeserializer(schema_registry_client)
            elif self.params.schema_str:
                deserializer = AvroDeserializer(self.params.schema_str)
            else:
                raise ValueError("Schema Registry URL or schema string must be provided for Avro deserialization.")
        return deserializer

    def get_topic_dtypes(self, message_value: str):
        schema = None
        if self.params.deserialize == 'avro':
            if self.params.schema_registry_url:
                config = self.params.schema_registry_extra_params
                config['url'] = self.params.schema_registry_url
                schema_registry_client = SchemaRegistryClient(config)
                schema_id = int.from_bytes(message_value[1:5])
                schema = json.loads(schema_registry_client.get_schema(schema_id).schema_str).get('fields')

            elif self.params.schema_str:
                schema = json.loads(self.params.schema_str).get('fields')

        return schema

    def convert_dtypes(self, dtype: str = 'string'):
        match dtype:
            case 'boolean':
                base_type = BaseType.boolean()
            case 'int':
                base_type = BaseType.integer()
            case 'float':
                base_type = BaseType.float()
            case 'double':
                base_type = BaseType.float()
            case _:
                base_type = BaseType.string()

        return base_type

    def _init_client(self, debug, params, prev_offsets, servers):
        c = KafkaConsumer(servers=servers,
                          group_id=params.group_id,
                          client_id=params.client_id,
                          security_protocol=params.security_protocol,
                          sasl_mechanisms=params.sasl_mechanisms,
                          username=params.username,
                          password=params.password,
                          ssl_ca=params.ssl_ca,
                          ssl_key=params.ssl_key,
                          ssl_certificate=params.ssl_certificate,
                          logger=logging.getLogger(),
                          start_offset=prev_offsets,
                          config_params=params.kafka_extra_params,
                          debug=debug)
        return c

    def safe_update(self, extracted_data, value):
        for key, val in value.items():
            if key in extracted_data:
                extracted_data[f"value_{key}"] = val
            else:
                extracted_data[key] = val

    def save_file(self, line, filename, topic):
        """
        Save text as file
        """
        logging.info(F'Writing file {filename}')

        if not os.path.exists(os.path.dirname(filename)):
            os.makedirs(os.path.dirname(filename))
        try:
            with open(filename, 'a') as file:
                writer = csv.DictWriter(file, fieldnames=self.columns[topic])
                writer.writerow(line)
            logging.info("File saved.")
        except Exception as e:
            logging.error("Could not save file! exit.", e)

    @sync_action("list_topics")
    def list_topics(self):
        params = Configuration(**self.configuration.parameters)
        servers = ",".join(params.servers)

        c = self._init_client(False, params, dict(), servers)
        topics = c.list_topics()
        topics_names = [SelectElement(topics.get(t).topic) for t in topics]

        return topics_names

    @sync_action("message_preview")
    def message_preview(self):
        self.params = Configuration(**self.configuration.parameters)
        servers = ",".join(self.params.servers)

        c = self._init_client(False, self.params, dict(), servers)
        deserializer = self.get_deserializer()
        last_message = None
        topic = self.params.topics[0]
        for msg in c.consume_message_batch(topic):
            if msg is None:
                break
            if msg.error():
                logging.error("Consumer error: {}".format(msg.error()))
                continue

            extracted_data, _ = self.get_message_data(deserializer, last_message, msg, topic)

            polars.Config.set_tbl_formatting("ASCII_MARKDOWN")
            polars.Config.set_tbl_hide_dataframe_shape(True)
            df = polars.DataFrame(extracted_data.get('value'))
            md_table_output = str(df)

            return ValidationResult(md_table_output, MessageType.SUCCESS)



"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: /src/configuration.py
================================================
import logging
from pydantic import BaseModel, Field, ValidationError, field_validator
from keboola.component.exceptions import UserException
from enum import Enum
import json


class Units(str, Enum):
    metric = "metric"
    imperial = "imperial"


class Configuration(BaseModel):
    servers: list[str] = Field(default=None)
    group_id: str = Field(default=None)
    client_id: str = Field(default=None)

    topics: list[str] = Field(default=None)

    security_protocol: str = Field(default=None)
    sasl_mechanisms: str = Field(default=None)

    username: str = Field(default=None)
    password: str = Field(alias="#password", default=None)

    ssl_ca: str = Field(default=None)
    ssl_key: str = Field(default=None)
    ssl_certificate: str = Field(default=None)

    begin_offsets: str = Field(default=None)

    kafka_extra_params: str = Field(default=None)

    deserialize: str = Field(default=None)
    flatten_message_value_columns: bool = True
    schema_str: str = Field(default=None)
    schema_registry_url: str = Field(default=None)
    schema_registry_extra_params: str = Field(default={})

    debug: bool = False
    freeze_timestamp: bool = False

    def __init__(self, **data):
        try:
            super().__init__(**data)
        except ValidationError as e:
            error_messages = [f"{err['loc'][0]}: {err['msg']}" for err in e.errors()]
            raise UserException(f"Validation Error: {', '.join(error_messages)}")

        if self.debug:
            logging.debug("Component will run in Debug mode")

    @field_validator("kafka_extra_params", "schema_registry_extra_params")
    def parse_configuration(cls, value):
        if isinstance(value, str):
            try:
                return json.loads(value.replace("'", '"'))
            except json.JSONDecodeError as e:
                raise ValueError(f"Invalid JSON string for config_params: {e}")
        return value


================================================
File: /LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: /requirements.txt
================================================
keboola.component==1.6.8
mock
freezegun
confluent_kafka==2.6.1
pydantic==2.10.4
fastavro==1.9.7
requests==2.32.3
https://bitbucket.org/kds_consulting_team/datadirtest/get/1.8.3.zip#egg=datadirtest
polars==1.21.0

================================================
File: /bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        script:
          - export APP_IMAGE=$APP_IMAGE
          - docker build . --tag=$APP_IMAGE
          - docker images
          - docker -v
          - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
          - echo "Running unit-tests..."
          - docker run $APP_IMAGE python -m unittest discover
          # push test image to ecr - uncomment for testing before deployment
#          - echo 'Pushing test image to repo. [tag=test]'
#          - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#          - docker tag $APP_IMAGE:latest $REPOSITORY:test
#          - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#          - docker push $REPOSITORY:test

  branches:
    master:
      - step:
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker -v
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
            - ./scripts/update_dev_portal_properties.sh
  tags:
    '*':
      - step:
          deployment: production
          script:
            - export APP_IMAGE=$APP_IMAGE
            - docker build . --tag=$APP_IMAGE
            - docker images
            - docker run $APP_IMAGE flake8 /code/ --config=/code/flake8.cfg
            - echo "Running unit-tests..."
            - docker run $APP_IMAGE python -m unittest discover
            - echo "Preparing KBC test image"
            - docker pull quay.io/keboola/developer-portal-cli-v2:latest
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh

================================================
File: /component_config/component_short_description.md
================================================
TBD

================================================
File: /component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Application configuration",
  "required": [
    "servers"
  ],
  "properties": {
    "servers": {
        "type": "array",
        "uniqueItems": true,
        "items": {
          "enum": [],
          "type": "string"
        },
        "options": {
          "tags": true
        },
        "format": "select",
        "title": "Brokers addresses",
        "description": "List of all brokers in the Kafka cluster in the format host:port",
        "propertyOrder": 1
      },
    "security_protocol": {
      "enum": [
        "PLAINTEXT",
        "SASL_PLAINTEXT",
        "SSL"
      ],
      "type": "string",
      "title": "Security protocol",
      "options": {
        "enum_titles": [
          "PLAINTEXT",
          "SASL_PLAINTEXT",
          "SSL"
        ]
      },
      "propertyOrder": 2
    },
    "sasl_mechanisms": {
      "enum": [
        "PLAIN"
      ],
      "type": "string",
      "title": "SASL mechanism",
      "options": {
        "dependencies": {
          "security_protocol": "SASL_PLAINTEXT"
        },
        "enum_titles": [
          "PLAIN"
        ]
      },
      "propertyOrder": 3
    },
    "username": {
      "type": "string",
      "title": "Username",
      "options": {
        "dependencies": {
          "security_protocol": "SASL_PLAINTEXT"
        }
      },
      "propertyOrder": 4
    },
    "#password": {
      "type": "string",
      "format": "password",
      "title": "Password",
      "options": {
        "dependencies": {
          "security_protocol": "SASL_PLAINTEXT"
        }
      },
      "propertyOrder": 5
    },
    "#ssl_ca": {
      "type": "string",
      "format": "password",
      "title": "SSL CA",
      "options": {
        "dependencies": {
          "security_protocol": "SSL"
        }
      },
      "propertyOrder": 6
    },
    "#ssl_key": {
      "type": "string",
      "format": "password",
      "title": "SSL Key",
      "options": {
        "dependencies": {
          "security_protocol": "SSL"
        }
      },
      "propertyOrder": 7
    },
    "#ssl_certificate": {
      "type": "string",
      "format": "password",
      "title": "SSL Certificate",
      "options": {
        "dependencies": {
          "security_protocol": "SSL"
        }
      },
      "propertyOrder": 8
    },
    "kafka_extra_params": {
      "type": "string",
      "title": "Additional Kafka parameters",
        "description": "Dictionary of additional <a href='https://kafka.apache.org/documentation/#configuration'>Kafka parameters</a> in the format {\"auto.offset.reset\": \"smallest\", \"session.timeout.ms\": 6000\n} ",
      "propertyOrder": 9
    },
    "group_id": {
      "type": "string",
      "title": "Group ID",
        "description": "Group ID for the consumer",
      "propertyOrder": 10
    }
  }
}

================================================
File: /component_config/stack_parameters.json
================================================
{}

================================================
File: /component_config/configuration_description.md
================================================
Testing configuration description.

================================================
File: /component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Parameters",
  "required": [
  ],
  "properties": {
    "topics": {
      "type": "array",
      "items": {
        "enum": [],
        "type": "string"
      },
      "title": "Topics to subscribe",
      "format": "select",
      "options": {
        "tags": true,
        "async": {
          "label": "Load topics",
          "action": "list_topics"
        }
      },
      "uniqueItems": true,
      "propertyOrder": 1
    },
    "deserialize": {
      "enum": [
        "no",
        "avro"
      ],
      "type": "string",
      "title": "Deserialize message value",
      "options": {
        "enum_titles": [
          "No",
          "Avro"
        ]
      },
      "propertyOrder": 2
    },
    "flatten_message_value_columns": {
      "type": "boolean",
      "title": "Flatten message value",
      "format": "checkbox",
      "description": "Store message value columns to table columns",
      "propertyOrder": 3,
      "options": {
        "dependencies": {
          "deserialize": "avro"
        }
      }
    },
    "schema_source": {
      "enum": [
        "user_defined",
        "schema_registry"
      ],
      "type": "string",
      "title": "Deserialize message value",
      "options": {
        "enum_titles": [
          "User defined",
          "From schema registry"
        ]
      },
      "propertyOrder": 4
    },
    "schema_str": {
      "type": "string",
      "title": "Avro schema string",
      "options": {
        "dependencies": {
          "schema_source": "user_defined"
        }
      },
      "propertyOrder": 5
    },
    "schema_registry_url": {
      "type": "string",
      "title": "Schema registry URL",
      "description": "Schema registry URL including protocol and port (e.g. http://schema-registry:8081)",
      "options": {
        "dependencies": {
          "schema_source": "schema_registry"
        }
      },
      "propertyOrder": 6
    },
    "schema_registry_extra_params": {
      "type": "string",
      "title": "Additional Schema Registry parameters",
      "description": "Dictionary of additional <a href='https://docs.confluent.io/platform/current/schema-registry/installation/config.html'>Schema Registry parameters</a> in the format {\"exporter.retries.wait.ms\": 2000, \"exporter.max.retries\n\": 5\n} ",
      "options": {
        "dependencies": {
          "schema_source": "schema_registry"
        }
      },
      "propertyOrder": 7
    },
    "table_preview": {
      "type": "button",
      "format": "sync-action",
      "options": {
        "async": {
          "label": "Message preview",
          "action": "message_preview"
        }
      },
      "propertyOrder": 8
    }
  }
}

================================================
File: /component_config/component_long_description.md
================================================
TBD

================================================
File: /component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: /component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: /component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: /component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: /component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: /deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi


================================================
File: /docker-compose.yml
================================================
version: "3"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  broker:
    image: apache/kafka:3.8.1
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:9092,EXTERNAL://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "19092:19092"
  schema-registry:
    image: confluentinc/cp-schema-registry:7.7.2
    hostname: schema-registry
    depends_on:
      broker:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "--output", "/dev/null", "--silent", "--head", "--fail", "http://schema-registry:8081/subjects" ]
      interval: 3s
      timeout: 10s
      retries: 30
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:9092,EXTERNAL://localhost:19092
      SCHEMA_REGISTRY_DEBUG: 'true'
  test:
    # Use to run flake8 and unittests checks
    build: .
    depends_on:
      schema-registry:
        condition: service_healthy
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: /scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

#flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: /scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: /scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: /scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi

================================================
File: /scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"

================================================
File: /README.md
================================================
# KBC Kafka Consumer

Simple Kafka consumer for Keboola Connection.


## Functionality

Component supports following security protocols: PLAINTEXT, SASL_PLAINTEXT, SSL

Message payload can be either stored raw in the single column of output table or deserialized by Avro deserializer.
The schema for deserialization can be provided as schema string, or obtained from the schema registry if configured.
If the payload is deserialized, it can be stored either as json in column, or all values flattend to columns.

The consumer persists its "commited" offsets in its own state so it is completely independent of commit states 
at Kafka and reading by other consumers in a same group won't affect it's setup. The last commited offset is used as 
a starting offset each consecutive run.

It is possible to override the starting offsets manually using `begin_offsets` parameter.

The extractor pulls only messages that haven't been downloaded yet until the last message that is present in 
each partition at the time of execution. Any messages produced at the time of extraction will be collected next run. 
If there is no new message, the extractor will finish without writing any results.


## Configuration parameters - Application

- **servers** - [REQ] list of Kafka servers. Bootstrap Servers are a list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
 These servers are just used for the initial connection to discover the full cluster membership.
- **group_id** - [REQ] Group ID of the consumer. Resulting in `[GROUP_ID]-consumer` ID. The consumer group is used for coordination between consumer. 
 Since the app contains a single consumer and maintains the offset itself, it can be an arbitrary value.
- **security_protocol** - [REQ] Security protocol. Possible values: `PLAINTEXT`, `SASL_PLAINTEXT`, `SSL`
- **username** - [REQ] Username required if `security_protocol` is set to `SASL_PLAINTEXT`
- **#password** - [REQ] Password required if `security_protocol` is set to `SASL_PLAINTEXT`
- **#ssl_ca** - [REQ] CA certificate as string. Required if `security_protocol` is set to `SSL`
- **#ssl_key** - [REQ] Client key as string. Required if `security_protocol` is set to `SSL`
- **#ssl_certificate** - [REQ] Client certificate as string. Required if `security_protocol` is set to `SSL`
- **begin_offsets** - [OPT] Optional argument allowing specification of starting offset for each partition.
It is an object with attribute key marking the partition number prefixed by `p` and offset number. 
e.g. `{"p2": 0, "p1": 1, "p4": 0, "p0": 1, "p3": 3}`
- **debug** - [OPT] Optional argument to enable debug mode with extensive logging. By default `false`
- **kafka_extra_params** - [OPT] Optional argument to specify extra parameters for Kafka consumer. By default `""`

## Configuration parameters - row

- **topic** - [REQ] list of Kafka topics to consume, can be obtained by "Load topics" button
- **deserialize** - [REQ] Deserialization method. Possible values: `no`, `avro`
- **flatten_message_value_columns** - [OPT] Optional argument to enable flattening of Avro deserialized message value columns. By default `false`
- **schema_source** - [OPT] Optional argument to specify source of Avro schema. Possible values: `user_defined`, `schema_registry`. By default `string`
- **schema_str** - [OPT] Optional argument to specify Avro schema as string. Required if `schema_source` is set to `user_defined`
- **schema_registry_url** - [OPT] Optional argument to specify URL of Schema Registry. Required if `schema_source` is set to `schema_registry`
- **schema_registry_extra_params** - [OPT] Optional argument to specify extra parameters for Schema Registry. By default `""`


### Example Application configuration JSON

```
{
  "parameters": {
    "kafka_extra_params": "{\"session.timeout.ms\": 6000 }",
    "servers": [
      "xxx01.srvs.test.com:9094",
      "xxxy-02.srvs.test.com:9094",
      "xxx-03.srvs.test.com:9094"
    ],
    "sasl_mechanisms": "PLAIN",
    "username": "user",
    "security_protocol": "SASL_PLAINTEXT",
    "#password": "KBC::ProjectSecure::...",
    "debug": true
  }
}
```

### Example row configuration JSON

```
{
  "parameters": {
    "topics": [
      "first",
      "second"
    ],
    "deserialize": "avro",
    "flatten_message_value_columns": true,
    "schema_source": "schema_registry",
    "schema_registry_url": "http://schema-registry:8081",
    "schema_registry_extra_params": ""
  }
}
```

================================================
File: /.github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-kafka-consumer" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: ${{ vars.KBC_DEVELOPERPORTAL_USERNAME }}

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Tests
        run: |
          docker compose build test
          docker compose run test

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh


