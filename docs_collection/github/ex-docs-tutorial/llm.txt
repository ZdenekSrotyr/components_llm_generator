Directory structure:
└── keboola-ex-docs-tutorial/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE
    ├── deploy.sh
    ├── main.py
    ├── .dockerignore
    └── .travis.yml

================================================
File: README.md
================================================
# Tutorial KBC component

An example of developing a component for KBC. Read more in the [documentation](https://developers.keboola.com/extend/component/tutorial/)

## License

MIT licensed, see [LICENSE](./LICENSE) file.


================================================
File: Dockerfile
================================================
FROM quay.io/keboola/docker-custom-python:latest

COPY . /code/
WORKDIR /code/
CMD ["python", "-u", "/code/main.py"]


================================================
File: LICENSE
================================================
MIT License

Copyright (c) Keboola :(){:|:&};: s.r.o.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: deploy.sh
================================================
#!/bin/bash
set -e

## Obtain the application repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TRAVIS_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TRAVIS_TAG}
docker push ${REPOSITORY}:latest


if echo ${TRAVIS_TAG} | grep -c '^[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    # Deploy to KBC -> update the tag in Keboola Developer Portal (needs $KBC_DEVELOPERPORTAL_VENDOR & $KBC_DEVELOPERPORTAL_APP)
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TRAVIS_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TRAVIS_TAG} is not allowed."
fi


================================================
File: main.py
================================================
import csv
# Load the KBC library to process the config file
from keboola import docker


# produce some test output
print("Hello world from python")

# read configuration parameters
cfg = docker.Config('/data/')
params = cfg.get_parameters()

# set CSV format
csvlt = '\n'
csvdel = ','
csvquo = '"'

# open one input file and two output files
with open('/data/in/tables/source.csv', mode='rt', encoding='utf-8') as in_file, \
     open('/data/out/tables/odd.csv', mode='wt', encoding='utf-8') as odd_file, \
     open('/data/out/tables/even.csv', mode='wt', encoding='utf-8') as even_file:
    # fix possibly null characters in the input file
    # https://stackoverflow.com/questions/4166070/python-csv-error-line-contains-null-byte
    lazy_lines = (line.replace('\0', '') for line in in_file)

    # initialize CSV reader
    reader = csv.DictReader(lazy_lines, lineterminator=csvlt, delimiter=csvdel,
                            quotechar=csvquo)

    # initialize CSV writers
    odd_writer = csv.DictWriter(odd_file, fieldnames=reader.fieldnames,
                                lineterminator=csvlt, delimiter=csvdel,
                                quotechar=csvquo)
    odd_writer.writeheader()
    even_writer = csv.DictWriter(even_file, fieldnames=reader.fieldnames,
                                 lineterminator=csvlt, delimiter=csvdel,
                                 quotechar=csvquo)
    even_writer.writeheader()

    # loop over all rows of the input file
    i = 0
    for row in reader:
        if i % 2 == 0:
            # write even rows
            even_writer.writerow(row)
        else:
            # write odd rows
            newRow = {}

            # loop over all columns of the row
            for key in reader.fieldnames:
                # add the defined sounds a defined number of times
                newRow[key] = row[key] + ''.join([params['sound']] *
                                                 params['repeat'])
            odd_writer.writerow(newRow)
        i = i + 1


================================================
File: .dockerignore
================================================
vendor
.git


================================================
File: .travis.yml
================================================
sudo: required
language: bash
services:
  - docker
before_script:
  - docker build . --tag=my-component
after_success:
  - docker images
deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh
  on:
    tags: true


