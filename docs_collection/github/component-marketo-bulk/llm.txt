Directory structure:
└── keboola-component-marketo-bulk/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── archive/
    │   └── main.py
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── data/
    │   ├── config.json
    │   ├── in/
    │   │   ├── state.json
    │   │   ├── files/
    │   │   │   └── order1.xml
    │   │   └── tables/
    │   │       ├── test.csv
    │   │       └── test.csv.manifest
    │   └── out/
    │       ├── files/
    │       │   └── order1.xml
    │       └── tables/
    │           └── test.csv
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   └── component.py
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
# ex-marketo-bulk

Keboola Connection docker app for fetching responses from  [Marketo REST API](http://developers.marketo.com/rest-api/bulk-extract/). Available under `kds-team.ex-marketo-bulk`

## Functionality
This component allows KBC to bulk fetch data from either Leads or Activity endpoint.

## Parameters
- Munchkin ID token - The first part of Identity. Can be found in Admin > Web Services menu in the REST API section
- Client ID token
- Client Secret token
- Endpoint - Use either `Activities` or `Leads`
- Desired Activities - Valid only for `Activities` endpoint. The `Delete Lead` activity is not supported.
- Month/Year for Created - used for backfill. Required format is MMM YYYY (e.g. Jan 2019).
- How many days back you want to go with 'Created'? - alternative to 'Month/Year for Created'. Basically if you specify e.g. '7', then the time range specified is from (Today - 7 days) to Today. If both this and 'Month/Year for Created' are used, the 'Month/Year for Created' is disregarded.
- Month/Year for Updated - used for backfill. Required format is MMM YYYY (e.g. Jan 2019).
- How many days back you want to go with 'Updated'? - alternative to 'Month/Year for Updated'. Basically if you specify e.g. '7', then the time range specified is from (Today - 7 days) to Today. If both this and 'Month/Year for Updated' are used, the 'Month/Year for Updated' is disregarded. Valid only for `Leads` endpoint.

## Outcome
For `Leads` endpoint the resulting table contains all possible columns. This is hardcoded and cannot be changed. The PK is `id`, loads are incremental.

For `Activities` endpoint the PK is `MarketoGUID`, the loads are incremental as well.


================================================
File: Dockerfile
================================================
FROM python:3.7.2-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/
RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
Copyright (c) 2018 Keboola DS

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog


================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi

================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data

================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
https://github.com/keboola/python-docker-application/zipball/master#egg=keboola
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.0.4.zip#egg=kbc
pytz
python-dateutil
logging_gelf==0.0.18

================================================
File: archive/main.py
================================================
import sys
import requests
import time
import logging
import os
from keboola import docker
from datetime import datetime, timedelta
import subprocess
import json
import csv
import logging_gelf.handlers
import logging_gelf.formatters  # noqa

# Environment setup
abspath = os.path.abspath(__file__)
script_path = os.path.dirname(abspath)
os.chdir(script_path)

sys.tracebacklimit = 0

# Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt="%Y-%m-%d %H:%M:%S")
'''
logger = logging.getLogger()
logging_gelf_handler = logging_gelf.handlers.GELFTCPSocketHandler(
    host=os.getenv('KBC_LOGGER_ADDR'),
    port=int(os.getenv('KBC_LOGGER_PORT'))
)
logging_gelf_handler.setFormatter(
    logging_gelf.formatters.GELFFormatter(null_character=True))
logger.addHandler(logging_gelf_handler)

# removes the initial stdout logging
logger.removeHandler(logger.handlers[0])
'''

# Destination to fetch and output files and tables
DEFAULT_TABLE_INPUT = "/data/in/tables/"
DEFAULT_FILE_INPUT = "/data/in/files/"

DEFAULT_FILE_DESTINATION = "/data/out/files/"
DEFAULT_TABLE_DESTINATION = "/data/out/tables/"

COMPONENT_VERSION = '1.3.5'

# Access the supplied rules
cfg = docker.Config('/data/')
params = cfg.get_parameters()

# Read the parameters
client_id = cfg.get_parameters()["#client_id"]
munchkin_id = cfg.get_parameters()["munchkinid"]
client_secret = cfg.get_parameters()["#client_secret"]
dayspan_updated = cfg.get_parameters()["dayspan_updated"]
dayspan_created = cfg.get_parameters()["dayspan_created"]
endpoint = cfg.get_parameters()["endpoint"]
desired_activities_tmp = cfg.get_parameters()["desired_activities"]
desired_activities = [i.strip() for i in desired_activities_tmp.split(",")]
month_year_created = cfg.get_parameters()["month/year_created"]
month_year_updated = cfg.get_parameters()["month/year_updated"]
fields_str_tmp = cfg.get_parameters()["desired_fields"]
fields_str = [i.strip() for i in fields_str_tmp.split(",")]

# Outputing log if parameters are configured
logging.info("Endpoint: %s" % endpoint)
logging.info("Dayspan updated: %s" % dayspan_updated) if dayspan_updated else ''
logging.info("Dayspan created: %s" % dayspan_created) if dayspan_created else ''
logging.info("Desired activities: %s" % str(desired_activities)) if desired_activities_tmp else ''
logging.info("Month/Year updated: %s" % month_year_updated) if month_year_updated else ''
logging.info("Month/Year created: %s" % month_year_created) if month_year_created else ''
logging.info("Desired fields: %s" % str(fields_str)) if fields_str_tmp else ''

# Created filter
# Determine whether we want to get data from past X days or from a specific month/year.
if dayspan_created == '' and month_year_created != '':
    CREATED_DATE = True
    month = month_year_created[:3]
    year = int(month_year_created[4:])
    if year % 4 == 0 and year % 400 != 0:
        feb_length = '29'
    else:
        feb_length = '28'
    year = str(year)
    months = {
        'Jan': [year + "-01-01T00:00:00Z", year + "-01-31T23:59:59Z"],
        'Feb': [year + "-02-01T00:00:00Z", year + "-02-" + feb_length + "T23:59:59Z"],
        'Mar': [year + "-03-01T00:00:00Z", year + "-03-31T23:59:59Z"],
        'Apr': [year + "-04-01T00:00:00Z", year + "-04-30T23:59:59Z"],
        'May': [year + "-05-01T00:00:00Z", year + "-05-31T23:59:59Z"],
        'Jun': [year + "-06-01T00:00:00Z", year + "-06-30T23:59:59Z"],
        'Jul': [year + "-07-01T00:00:00Z", year + "-07-31T23:59:59Z"],
        'Aug': [year + "-08-01T00:00:00Z", year + "-08-31T23:59:59Z"],
        'Sep': [year + "-09-01T00:00:00Z", year + "-09-30T23:59:59Z"],
        'Oct': [year + "-10-01T00:00:00Z", year + "-10-31T23:59:59Z"],
        'Nov': [year + "-11-01T00:00:00Z", year + "-11-30T23:59:59Z"],
        'Dec': [year + "-12-01T00:00:00Z", year + "-12-31T23:59:59Z"]
    }
    start_created = months[month][0][:10]
    end_created = months[month][1][:10]
elif dayspan_created != '' and month_year_created != '':
    CREATED_DATE = True
    logging.info('Disregarding the <Month/Year for \'Created\'> parameter, taking into consideration only the \
    <How many days back you want to go with \'Created\'?> parameter')
    start_created = str((datetime.utcnow() - timedelta(days=int(dayspan_created)))
                        .date())
    end_created = str(datetime.utcnow().date())
elif dayspan_created == '' and month_year_created == '':
    CREATED_DATE = False
    logging.info('Created Date not provided')
elif dayspan_created != '' and month_year_created == '':
    CREATED_DATE = True
    start_created = str((datetime.utcnow() - timedelta(days=int(dayspan_created)))
                        .date())
    end_created = str(datetime.utcnow().date())

# Updated filter
# Determine whether we want to get data from past X days or from a specific month/year.
if dayspan_updated == '' and month_year_updated != '':
    UPDATED_DATE = True
    month = month_year_updated[:3]
    year = int(month_year_updated[4:])
    if year % 4 == 0 and year % 400 != 0:
        feb_length = '29'
    else:
        feb_length = '28'
    year = str(year)
    months = {
        'Jan': [year + "-01-01T00:00:00Z", year + "-01-31T23:59:59Z"],
        'Feb': [year + "-02-01T00:00:00Z", year + "-02-" + feb_length + "T23:59:59Z"],
        'Mar': [year + "-03-01T00:00:00Z", year + "-03-31T23:59:59Z"],
        'Apr': [year + "-04-01T00:00:00Z", year + "-04-30T23:59:59Z"],
        'May': [year + "-05-01T00:00:00Z", year + "-05-31T23:59:59Z"],
        'Jun': [year + "-06-01T00:00:00Z", year + "-06-30T23:59:59Z"],
        'Jul': [year + "-07-01T00:00:00Z", year + "-07-31T23:59:59Z"],
        'Aug': [year + "-08-01T00:00:00Z", year + "-08-31T23:59:59Z"],
        'Sep': [year + "-09-01T00:00:00Z", year + "-09-30T23:59:59Z"],
        'Oct': [year + "-10-01T00:00:00Z", year + "-10-31T23:59:59Z"],
        'Nov': [year + "-11-01T00:00:00Z", year + "-11-30T23:59:59Z"],
        'Dec': [year + "-12-01T00:00:00Z", year + "-12-31T23:59:59Z"]
    }
    start_updated = months[month][0][:10]
    end_updated = months[month][1][:10]
elif dayspan_updated != '' and month_year_updated != '':
    UPDATED_DATE = True
    logging.info('Disregarding the <Month/Year for \'Updated\'> parameter, taking into consideration only the \
<How many days back you want to go with \'Updated\'?> parameter')
    start_updated = str((datetime.utcnow() - timedelta(days=int(dayspan_updated)))
                        .date())
    end_updated = str(datetime.utcnow().date())
elif dayspan_updated == '' and month_year_updated == '':
    UPDATED_DATE = False
    logging.info('Updated Date not provided')
elif dayspan_updated != '' and month_year_updated == '':
    UPDATED_DATE = True
    start_updated = str((datetime.utcnow() - timedelta(days=int(dayspan_updated)))
                        .date())
    end_updated = str(datetime.utcnow().date())

logging.info("params read")

# Destination to fetch and output files and tables
DEFAULT_TABLE_INPUT = "/data/in/tables/"
DEFAULT_FILE_INPUT = "/data/in/files/"

DEFAULT_FILE_DESTINATION = "/data/out/files/"
DEFAULT_TABLE_DESTINATION = "/data/out/tables/"


def save_manifest(file_name, primary_keys):
    """
    Dummy function for returning manifest
    """

    file = '/data/out/tables/' + file_name + ".manifest"

    logging.info("Manifest output: {0}".format(file))

    manifest = {
        'destination': '',
        'incremental': True,
        'primary_key': primary_keys
    }

    try:
        with open(file, 'w') as file_out:
            json.dump(manifest, file_out)
            logging.info("Output manifest file ({0}) produced.".format(file))
    except Exception as e:
        logging.error("Could not produce output file manifest.")
        logging.error(e)

    return

# check response


def check_response(response, stage):
    if response.status_code != 200:
        print(stage + ' failed.')
        print('The response code is: ' + str(response.status_code))
        sys.exit(1)
    else:
        print(stage + ' passed.')


parameters_1 = {'client_id': client_id,
                'client_secret': client_secret,
                'grant_type': 'client_credentials'}

BASE_URL = f'https://{munchkin_id}.mktorest.com'

# get the token
resp = requests.get(
    url=BASE_URL + '/identity/oauth/token', params=parameters_1)
check_response(resp, 'Obtaining access token')

access_token = resp.json()['access_token']

parameters_2 = {'access_token': access_token}

# endpoint Activities
if endpoint == 'Activities':
    body = {
        "format": "CSV"
    }
    if not CREATED_DATE:
        logging.info('The Activities endpoint requires Created Date interval!')
        sys.exit(1)
    else:
        body['filter'] = {}
        body['filter']['createdAt'] = {"startAt": start_created,
                                       "endAt": end_created}

    if not UPDATED_DATE:
        pass
    else:
        body['filter']['updatedAt'] = {"startAt": start_updated,
                                       "endAt": end_updated}
    if len(desired_activities) > 0:
        try:
            body['filter']['activityTypeIds'] = desired_activities
        except KeyError:
            body['filter'] = {}
            body['filter']['activityTypeIds'] = desired_activities
    else:
        pass

    # Create the export
    create_export = requests.post(url=BASE_URL + '/bulk/v1/activities/export/create.json',
                                  params=parameters_2, json=body)

    check_response(create_export, 'Creating export')
    if not create_export.json()['success']:
        logging.info('Creating export was not successfull.')
        logging.info('Errors:')
        logging.info(create_export.json()['errors'])
        sys.exit(1)

    export_id = create_export.json()['result'][0]['exportId']
    print(f"The export id is {export_id}.")

    # Enqueue export
    enqueue_export = requests.post(url=BASE_URL + '/bulk/v1/activities/export/' +
                                   export_id + '/enqueue.json',
                                   params=parameters_2)

    check_response(enqueue_export, 'Enqueuing export')

    time.sleep(60)
    status_export = requests.get(url=BASE_URL + '/bulk/v1/activities/export/' +
                                 export_id + '/status.json',
                                 params=parameters_2)

    check_response(status_export, 'Getting status of the export')

    # Wait for them to prepare the export
    try:
        while status_export.json()['result'][0]['status'] != 'Completed':
            print('Export not ready, next check in 60 seconds.')
            time.sleep(60)
            status_export = requests.get(url=BASE_URL + '/bulk/v1/activities/export/' +
                                         export_id + '/status.json',
                                         params=parameters_2)
            check_response(status_export, 'Getting status of the export')
    except KeyError:
        logging.info("There was a problem when obtaining the status of the export.\
             Please try rerunning the configuration as the API sometimes behaves unpredictably.")
        logging.error("The response.json() is:")
        logging.error(status_export.json())
        sys.exit(1)
    except Exception as e:
        logging.error(e)
        sys.exit(1)

    # set up the name of the output file
    output_file = DEFAULT_TABLE_DESTINATION + endpoint + "_bulk.csv"

    # assemble the curl command and running it
    args = f"curl \"{BASE_URL}/bulk/v1/activities/export/" + export_id + \
        "/file.json?access_token=" + access_token + "\"" + " > \"" + output_file + "\""
    print(args)
    subprocess.call(args, shell=True)

    # save the appropriate manifest
    file_name = endpoint + "_bulk.csv"
    save_manifest(file_name=file_name, primary_keys=['marketoGUID'])
    logging.info('Success!')
    sys.exit(0)

# endpoint
elif endpoint == 'Leads':
    body = {
        "fields": fields_str,
        "format": "CSV"
    }

    if CREATED_DATE and UPDATED_DATE:
        body['filter'] = {}
        body['filter']['createdAt'] = {"startAt": start_created,
                                       "endAt": end_created}
        body['filter']['updatedAt'] = {"startAt": start_updated,
                                       "endAt": end_updated}
    elif CREATED_DATE and (not UPDATED_DATE):
        body['filter'] = {}
        body['filter']['createdAt'] = {"startAt": start_created,
                                       "endAt": end_created}
    elif (not CREATED_DATE) and UPDATED_DATE:
        body['filter'] = {}
        body['filter']['updatedAt'] = {"startAt": start_updated,
                                       "endAt": end_updated}
    elif CREATED_DATE or UPDATED_DATE:
        logging.info(
            'The Leads endpoint requires either Created or Updated parameter!')
        sys.exit(1)

    # Create the export
    create_export = requests.post(url=BASE_URL + '/bulk/v1/leads/export/create.json',
                                  params=parameters_2, json=body)

    check_response(create_export, 'Creating export')

    if not create_export.json()['success']:
        logging.info('Creating export was not successfull.')
        logging.info('Errors:')
        logging.info(create_export.json()['errors'])

    export_id = create_export.json()['result'][0]['exportId']
    logging.info(f"The export id is {export_id}.")

    enqueue_export = requests.post(url=BASE_URL + '/bulk/v1/leads/export/' +
                                   export_id + '/enqueue.json',
                                   params=parameters_2)

    check_response(enqueue_export, 'Enqueuing export')

    time.sleep(60)
    status_export = requests.get(url=BASE_URL + '/bulk/v1/leads/export/' +
                                 export_id + '/status.json',
                                 params=parameters_2)

    check_response(status_export, 'Getting status of the export')

    # Wait for them to prepare the export
    try:
        while status_export.json()['result'][0]['status'] != 'Completed':
            print('Export not ready, next check in 60 seconds.')
            time.sleep(60)
            status_export = requests.get(url=BASE_URL + '/bulk/v1/leads/export/' +
                                         export_id + '/status.json',
                                         params=parameters_2)
            check_response(status_export, 'Getting status of the export')
    except KeyError:
        logging.info("There was a problem when obtaining the status of the export.\
             Please try rerunning the configuration as the API sometimes behaves unpredictably.")
        logging.error("The response.json() is:")
        logging.error(status_export.json())
        sys.exit(1)
    except Exception as e:
        logging.error("Could not produce output file manifest.")
        logging.error(e)
        sys.exit(1)

    output_file = DEFAULT_TABLE_DESTINATION + endpoint + "_bulk.csv"

    # assemble the curl command and run it
    args = f"curl \"{BASE_URL}/bulk/v1/leads/export/" + export_id + \
        "/file.json?access_token=" + access_token + "\"" + " > \"" + output_file + "\""
    subprocess.call(args, shell=True)
    file_name = endpoint + "_bulk.csv"

    rows = list(csv.reader(open(output_file)))
    row_count = len(rows)

    if row_count == 0:
        logging.info(
            'The export from the API reached state Completed, but no data were transferred from the API.')
        os.remove(output_file)
        sys.exit(0)

    # save the manifest
    save_manifest(file_name=file_name, primary_keys=['id'])
    logging.info('Success!')
    sys.exit(0)
else:
    logging.info('The endpoint is incorrectly specified.')


================================================
File: component_config/component_long_description.md
================================================
This component allows for bulk exports from the [Marketo REST API](http://developers.marketo.com/rest-api/bulk-extract/). You can choose to export data from either Leads or Activity endpoint.

You can either choose to export data from specified month/year (utilizing parameter Month/Year) or relatively (from *(Today- n_days)* to * Today*, utilizing the parameter *How many days back you want to go?*). Bear in mind that the maximum length of time range specified is 31 (limit coming from the API).

================================================
File: component_config/component_short_description.md
================================================
Marketo's powerful marketing automation software helps marketers master the art & science of digital marketing to engage customers and prospects.

================================================
File: component_config/configSchema.json
================================================
{
	"type": "object",
	"title": "Marketo Database",
	"required": [
		"munchkinid",
		"#client_id",
		"#client_secret",
		"desired_activities",
		"dayspan_created",
		"dayspan_updated",
		"endpoint",
		"month/year_created",
		"month/year_updated",
		"desired_fields"
	],
	"properties": {
		"munchkinid": {
			"type": "string",
			"title": "Munchkin ID token",
			"description": "Can be found in [Admin] > [Web Services] menu in the REST API section",
			"propertyOrder": 1
		},
		"#client_id": {
			"type": "string",
			"title": "Client ID token",
			"format": "password",
			"propertyOrder": 2
		},
		"#client_secret": {
			"type": "string",
			"title": "Client Secret token",
			"format": "password",
			"propertyOrder": 3
		},
		"endpoint": {
			"type": "string",
			"title": "Endpoint",
			"enum": [
				"Leads",
				"Activities"
			],
			"propertyOrder": 4
		},
		"month/year_created": {
			"type": "string",
			"title": "Month/Year for 'Created'",
			"description": "Alternative to the following field (if both are filled, the following field is used). You can specify a month/year in format MMM YYYY, e.g. Oct 2018.",
			"propertyOrder": 5
		},
		"dayspan_created": {
			"type": "string",
			"title": "How many days back you want to go with 'Created'?",
			"propertyOrder": 6
		},
		"month/year_updated": {
			"type": "string",
			"title": "Month/Year for 'Updated'",
			"description": "Relevant to [Leads] endpoint only. Alternative to the following field (if both are filled, the following field is used). You can specify a month/year in format MMM YYYY, e.g. Oct 2018.",
			"propertyOrder": 7
		},
		"dayspan_updated": {
			"type": "string",
			"title": "How many days back you want to go with 'Updated'?",
			"description": "Relevant to [Leads] endpoint only.",
			"propertyOrder": 8
		},
		"desired_activities": {
			"type": "string",
			"title": "Desired Activities",
			"description": "Relevant to [Activities] endpoint only. Write down the IDs of activities you want to extract and separate them by comma. Note: The “Delete Lead” activity is not supported.",
			"propertyOrder": 9
		},
		"desired_fields": {
			"type": "string",
			"title": "Desired Fields",
			"description": "Relevant to [Leads] endpoint only. Specifying the columns you want to extractor and id column needs to be include as it is the primary key. Comma separated.",
			"propertyOrder": 10
		}
	}
}

================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/stack_parameters.json
================================================
{}

================================================
File: component_config/sample-config/config.json
================================================
{
	"storage": {
		"input": {
			"files": [],
			"tables": [{
					"source": "in.c-test.test",
					"destination": "test.csv",
					"limit": 50,
					"columns": [],
					"where_values": [],
					"where_operator": "eq"
				}
			]
		},
		"output": {
			"files": [],
			"tables": []
		}
	},
	"parameters": {
		"project_id": "1234",
		"#api_token": "123456",
		"period_from": "2018-12-01",
		"period_to": "2018-12-06",
		"relative_period": "",
		"backfill_mode": 0,
		"metrics": [{
				"metric": "NoVt",
				"modificator": "change"
			}
		]
	},
	"image_parameters": {
		"syrup_url": "https://syrup.keboola.com/"
	},
	"authorization": {
		"oauth_api": {
			"id": "OAUTH_API_ID",
			"credentials": {
				"id": "main",
				"authorizedFor": "Myself",
				"creator": {
					"id": "1234",
					"description": "me@keboola.com"
				},
				"created": "2016-01-31 00:13:30",
				"#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
				"oauthVersion": "2.0",
				"appKey": "000000004C184A49",
				"#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
			}
		}
	}
}


================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: data/config.json
================================================
{
	"storage": {
		"input": {
			"files": [],
			"tables": [{
					"source": "in.c-test.test",
					"destination": "test.csv",
					"limit": 50,
					"columns": [],
					"where_values": [],
					"where_operator": "eq"
				}
			]
		},
		"output": {
			"files": [],
			"tables": []
		}
	},
	"parameters": {
		"project_id": "1234",
		"#api_token": "123456",
		"period_from": "2018-12-01",
		"period_to": "2018-12-06",
		"relative_period": "",
		"backfill_mode": 0,
		"metrics": [{
				"metric": "NoVt",
				"modificator": "change"
			}
		]
	},
	"image_parameters": {
		"syrup_url": "https://syrup.keboola.com/"
	},
	"authorization": {
		"oauth_api": {
			"id": "OAUTH_API_ID",
			"credentials": {
				"id": "main",
				"authorizedFor": "Myself",
				"creator": {
					"id": "1234",
					"description": "me@keboola.com"
				},
				"created": "2016-01-31 00:13:30",
				"#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
				"oauthVersion": "2.0",
				"appKey": "000000004C184A49",
				"#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
			}
		}
	}
}


================================================
File: data/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: data/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: data/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: data/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: data/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: data/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi

================================================
File: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi

================================================
File: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"

================================================
File: src/component.py
================================================
import sys
import requests
import time
import logging
import os
from keboola import docker
from datetime import datetime, timedelta
import json
import logging_gelf.handlers
import logging_gelf.formatters  # noqa


sys.tracebacklimit = 0

# Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt="%Y-%m-%d %H:%M:%S")

logger = logging.getLogger()
logging_gelf_handler = logging_gelf.handlers.GELFTCPSocketHandler(
    host=os.getenv('KBC_LOGGER_ADDR'),
    port=int(os.getenv('KBC_LOGGER_PORT'))
)
logging_gelf_handler.setFormatter(
    logging_gelf.formatters.GELFFormatter(null_character=True))
logger.addHandler(logging_gelf_handler)

# removes the initial stdout logging
logger.removeHandler(logger.handlers[0])


# Disabling list of libraries you want to output in the logger
disable_libraries = [
    'urllib3',
    'requests'
]
for library in disable_libraries:
    logging.getLogger(library).disabled = True

# Destination to fetch and output files and tables
DEFAULT_TABLE_INPUT = "/data/in/tables/"
DEFAULT_FILE_INPUT = "/data/in/files/"

DEFAULT_FILE_DESTINATION = "/data/out/files/"
DEFAULT_TABLE_DESTINATION = "/data/out/tables/"

APP_VERSION = '1.3.6'
KEY_DEBUG = 'debug'


class Component():
    def __init__(self, debug=False):

        # override debug from config
        if debug:
            logging.getLogger().setLevel(logging.DEBUG)
            logging.info('Running version %s', APP_VERSION)
            logging.info('Loading configuration...')

    def run(self):
        '''
        Main execution code
        '''

        # Access the supplied rules
        cfg = docker.Config('/data/')
        params = cfg.get_parameters()

        # Validating user inputs
        self.validate_user_parameters(params)

        # Read the parameters
        # Credentials parameters
        client_id = params.get("#client_id")
        munchkin_id = params.get("munchkinid")
        client_secret = params.get("#client_secret")

        # Endpoint parameters
        endpoint = params.get("endpoint")
        dayspan_created = params.get("dayspan_created")
        month_year_created = params.get("month/year_created")
        month_year_updated = params.get("month/year_updated")
        dayspan_updated = params.get("dayspan_updated")
        self.desired_activities_tmp = params.get("desired_activities")
        self.desired_activities = [i.strip()
                                   for i in self.desired_activities_tmp.split(",")]
        self.fields_str_tmp = params.get("desired_fields")
        self.fields_str = [i.strip() for i in self.fields_str_tmp.split(",")]

        # Outputing log if parameters are configured
        logging.info("Endpoint: %s" % endpoint)
        logging.info("Dayspan updated: %s" %
                     dayspan_updated) if dayspan_updated else ''
        logging.info("Dayspan created: %s" %
                     dayspan_created) if dayspan_created else ''
        logging.info("Desired activities: %s" %
                     str(self.desired_activities)) if self.desired_activities_tmp else ''
        logging.info("Month/Year updated: %s" %
                     month_year_updated) if month_year_updated else ''
        logging.info("Month/Year created: %s" %
                     month_year_created) if month_year_created else ''
        logging.info("Desired fields: %s" %
                     str(self.fields_str)) if self.fields_str_tmp else ''

        # Request base Url & Authenticating
        self.BASE_URL = f'https://{munchkin_id}.mktorest.com'
        self.access_token = self.authenticate(client_id, client_secret)

        # Request parameters based on user inputs
        CREATED_DATE, start_created, end_created = self.create_date_ranges(
            dayspan_created, month_year_created, 'Created')
        UPDATED_DATE, start_updated, end_updated = self.create_date_ranges(
            dayspan_updated, month_year_updated, 'Updated')

        date_obj = {
            'created_date_bool': CREATED_DATE,
            'start_created_date': start_created,
            'end_created_date': end_created,
            'updated_date_bool': UPDATED_DATE,
            'start_updated_date': start_updated,
            'end_updated_date': end_updated
        }

        # Endpoint Request
        self.fetch_endpoint(endpoint.lower(), date_obj)

    def validate_user_parameters(self, params):
        # 1 - check if the configuration is empty
        if not params or params == {}:
            logging.error('Please configure your component.')
            sys.exit(1)

        # 2 - Check if all the credentials are entered
        if not params.get('#client_id') or not params.get('munchkinid') or not params.get('#client_secret'):
            logging.error(
                "Credentials are missing: [Client ID], [Munchkin ID], [Client Secret]")
            sys.exit(1)

        # 3 - ensure the endpoints are supported
        if params.get('endpoint') not in ('Activities', 'Leads'):
            logging.error('Specified endpoint is not supported.')
            sys.exit(1)

        # 4 - when endpoint leads is selected, desired fields cannot be empty
        fields_str_tmp = params.get('desired_fields')
        fields_str = [i.strip() for i in fields_str_tmp.split(",")
                      ] if fields_str_tmp else ''
        if params.get('endpoint') == 'Leads' and len(fields_str) == 0:
            logging.error(
                "Please specify [Desired Fields] when endpoint [Leads] is selected.")
            sys.exit(1)

    def check_response(self, response, stage):
        if response.status_code != 200:
            logging.error(f'[{response.status_code}] - {stage} failed.')
            sys.exit(1)
        else:
            logging.info(stage)

    def authenticate(self, client_id, client_secret):

        auth_url = f'{self.BASE_URL}/identity/oauth/token'
        params = {
            'client_id': client_id,
            'client_secret': client_secret,
            'grant_type': 'client_credentials'
        }

        response = requests.get(url=auth_url, params=params)
        self.check_response(response, 'Fetching access token')

        return response.json()['access_token']

    def get_request(self, url, params=None):

        try:
            response = requests.get(url, params=params)
        except Exception as err:
            logging.error(f'Error occured: {err}')
            sys.exit(1)

        return response

    def post_request(self, url, params=None, body=None):

        try:
            response = requests.post(url, params=params, json=body)
        except Exception as err:
            logging.error(f'Error occured: {err}')
            sys.exit(1)

        return response

    def create_date_ranges(self, dayspan, month_year, date_type):
        '''
        Created Filter
        Determine whether we want to get data from apst X days or from a specific month/year
        '''
        # Return parameters
        CREATED_DATE = False
        start_date = ''
        end_date = ''

        if dayspan != '':
            # Using the dayspan value regardless if the created value is empty or not
            CREATED_DATE = True
            start_date = str(
                (datetime.utcnow() - timedelta(days=int(dayspan))).date())
            end_date = str(datetime.utcnow().date())

            # Disregarding Created value is not empty
            if month_year != '':
                logging.info(f'Disregarding the <Month/Year for      \'{date_type}\'> parameter, taking into consideration only \
                     the <How many days back you want to go with \'{date_type}\'?> parameter''Disregrading the <Month/\
                    Year ')

        # when dayspan variable is not specified
        else:
            if month_year != '':
                CREATED_DATE = True
                month = month_year[:3].lower()
                year = int(month_year[4:])
                if year % 4 == 0 and year % 400 != 0:
                    feb_length = '29'
                else:
                    feb_length = '28'
                year = str(year)
                months = {
                    'jan': [year + "-01-01T00:00:00Z", year + "-01-31T23:59:59Z"],
                    'feb': [year + "-02-01T00:00:00Z", year + "-02-" + feb_length + "T23:59:59Z"],
                    'mar': [year + "-03-01T00:00:00Z", year + "-03-31T23:59:59Z"],
                    'apr': [year + "-04-01T00:00:00Z", year + "-04-30T23:59:59Z"],
                    'may': [year + "-05-01T00:00:00Z", year + "-05-31T23:59:59Z"],
                    'jun': [year + "-06-01T00:00:00Z", year + "-06-30T23:59:59Z"],
                    'jul': [year + "-07-01T00:00:00Z", year + "-07-31T23:59:59Z"],
                    'aug': [year + "-08-01T00:00:00Z", year + "-08-31T23:59:59Z"],
                    'sep': [year + "-09-01T00:00:00Z", year + "-09-30T23:59:59Z"],
                    'oct': [year + "-10-01T00:00:00Z", year + "-10-31T23:59:59Z"],
                    'nov': [year + "-11-01T00:00:00Z", year + "-11-30T23:59:59Z"],
                    'dec': [year + "-12-01T00:00:00Z", year + "-12-31T23:59:59Z"]
                }
                start_date = months[month][0][:10]
                end_date = months[month][1][:10]

            else:
                CREATED_DATE = False
                logging.info(f'{date_type} date is not provided.')

        return CREATED_DATE, start_date, end_date

    def fetch_endpoint(self, endpoint, date_obj):
        '''
        Endpoint: Activities
        '''

        # Request parameters
        request_url = f'{self.BASE_URL}/bulk/v1/{endpoint}/export'
        request_param = {
            'access_token': self.access_token
        }
        request_body = {
            'format': 'CSV'
        }

        # setting up request parameters depending on endpoint
        if endpoint == 'activities':
            # Create date parameters
            if not date_obj['created_date_bool']:
                logging.error(
                    'The Activities endpoint requires Created Date interval.')
                sys.exit(1)
            else:
                request_body['filter'] = {}
                created_at = {
                    'startAt': date_obj['start_created_date'],
                    'endAt': date_obj['end_created_date']
                }
                request_body['filter']['createdAt'] = created_at

            # Update date parameters
            if date_obj['updated_date_bool']:
                updated_at = {
                    'startAt': date_obj['start_updated_date'],
                    'endAt': date_obj['end_updated_date']
                }
                request_body['filter']['updatedAt'] = updated_at

            # activities specificiations
            if len(self.desired_activities) > 0:
                request_body['filter']['activityTypeIds'] = self.desired_activities

        elif endpoint == 'leads':
            request_body['fields'] = self.fields_str

            # Filter parameters
            if not date_obj['updated_date_bool'] and not date_obj['created_date_bool']:
                logging.error(
                    'The Leads endpoint requries either Created or Updated parameter.')
                sys.exit(1)

            else:
                request_body['filter'] = {}

            # Update paramaters
            if date_obj['updated_date_bool']:
                updated_at = {
                    'startAt': date_obj['start_updated_date'],
                    'endAt': date_obj['end_updated_date']
                }
                request_body['filter']['updatedAt'] = updated_at

            # Create parameters
            if date_obj['created_date_bool']:
                created_at = {
                    'startAt': date_obj['start_created_date'],
                    'endAt': date_obj['end_created_date']
                }
                request_body['filter']['createdAt'] = created_at

        # 1 - Create exports
        export_id = self.create_mkto_export(
            request_url, request_param, request_body)

        # 2 - Enqueue export
        self.enqueue_mkto_export(request_url, request_param, export_id)

        # 3 - loop while waiting for the report to be ready
        ready_bool = False
        while not ready_bool:
            ready_bool = self.check_mkto_export_status(
                request_url, request_param, export_id)

        # 4 - Outputing the file
        self.output_mkt_export(request_url, request_param, export_id, endpoint)

    def create_mkto_export(self, request_url, request_param, request_body):

        export_url = f'{request_url}/create.json'
        '''create_export = requests.post(
            url=export_url, params=request_param, json=request_body)'''
        create_export = self.post_request(
            export_url, request_param, request_body)
        self.check_response(create_export, 'Creating export')

        if not create_export.json()['success']:
            logging.error(
                f'Creating export was not successful; Errors: {create_export.json()["errors"]}')
            sys.exit(1)

        export_id = create_export.json()['result'][0]['exportId']
        logging.info(f'Export ID: [{export_id}]')

        return export_id

    def enqueue_mkto_export(self, request_url, request_param, export_id):

        enqueue_url = f'{request_url}/{export_id}/enqueue.json'
        '''enqueue_export = requests.post(url=enqueue_url, params=request_param)'''
        enqueue_export = self.post_request(
            enqueue_url, request_param, body=None)
        self.check_response(enqueue_export, 'Enqueuing export')

    def check_mkto_export_status(self, request_url, request_param, export_id):

        time.sleep(60)

        ready_bool = False
        status_url = f'{request_url}/{export_id}/status.json'
        '''status_export = requests.get(url=status_url, params=request_param)'''
        status_export = self.get_request(status_url, params=request_param)
        self.check_response(status_export, 'Standing by for export status')

        try:
            if status_export.json()['result'][0]['status'] == 'Completed':
                ready_bool = True
        except KeyError:
            logging.error("There was a problem when obtaining the status of the export.\
            Please try rerunning the configuration as the API sometimes behaves unpredictably.")
            logging.error(f'Response: {status_export.json()}')
            sys.exit(1)
        except Exception as e:
            logging.error(e)
            sys.exit(1)

        return ready_bool

    def output_mkt_export(self, request_url, request_param, export_id, endpoint):

        # Output file destination
        output_file_name = endpoint.capitalize() + '_bulk.csv'
        output_file_destination = DEFAULT_TABLE_DESTINATION + output_file_name

        # Output file request parameter
        output_url = f'{request_url}/{export_id}/file.json'

        '''response = requests.get(request_url, params=request_param)'''
        response = self.get_request(output_url, request_param)

        # Output file
        csv_file = open(output_file_destination, 'wb')
        csv_file.write(response.content)
        csv_file.close()

        # Outputting manifest if there is data
        if len(list(response.content)) == 0:
            logging.info(
                'The export from the API reached state Completed, but no data were transferred from the API.')
            os.remove(output_file_destination)

        else:
            pk = ['marketoGUID'] if endpoint == 'activities' else ['id']
            self.save_manifest(
                file_name=output_file_name, primary_keys=pk)

            logging.info(f'{endpoint} exported.')

    def save_manifest(self, file_name, primary_keys):
        """
        Dummy function for returning manifest
        """

        file = '/data/out/tables/' + file_name + ".manifest"

        logging.info("Manifest output: {0}".format(file))

        manifest = {
            'destination': '',
            'incremental': True,
            'primary_key': primary_keys
        }

        try:
            with open(file, 'w') as file_out:
                json.dump(manifest, file_out)
                logging.info(
                    "Output manifest file ({0}) produced.".format(file))
        except Exception as e:
            logging.error("Could not produce output file manifest.")
            logging.error(e)


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        comp.run()
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-marketo-bulk" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

