Directory structure:
└── keboola-component-zendesk-wr/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── endpoint_docu_generator.py
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   ├── endpoint_parameters.md
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   └── endpoint_mapping.json
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
# Keboola Zendesk Writer

Zendesk Writer enables users to create/update Zendesk Support API properties with the flexibility of defining their own parameters.

To configure the writer, you need:

- provide Zendesk credentials and domain
- Have the Zendesk Support API endpoints you want to create/update, please visit [Zendesk](https://developer.zendesk.com/rest_api/docs/support/introduction) for more details
- Understand the format required for the parameters you wish to create/update for your endpoints

## Configuration Parameters
1. Login Email
    - Zendesk account login email
2. API Token
    - Zendesk account API token
    - You can obtain API tokens from the Zendesk Support admin interface at Admin > Channels > API
3. Zendesk Domain
    - The domain of the Zendesk instance
4. Zendesk URL
    - This configuration is generated automatically from the input of `Zendesk Domain`
5. Function
    - Defines the type of request user wants to perform for all the endpoints define in the input mapping
    - CREATE
        - performing `POST` request to the endpoints defined
    - UPDATE
        - Performing `PUT` request to the endpoints defined

## Endpoint Specifications
The table names from the input mapping will be used to define the Zendesk endpoint the users wish to perform the specified `Function` (CREATE/UPDATE).
Example: users.csv will be creating/updating Zendesk's User endpoint.

## Supported Endpoints
1. [users](https://developer.zendesk.com/rest_api/docs/support/users)
2. [tickets](https://developer.zendesk.com/rest_api/docs/support/tickets)
    - Account inputted in the configuration will be used as the requester_id. If user wants to alter the request_id, please perform such action via `UPDATE` request.
3. [organizations](https://developer.zendesk.com/rest_api/docs/support/organizations)
4. [groups](https://developer.zendesk.com/rest_api/docs/support/groups)
5. [ticket_fields](https://developer.zendesk.com/rest_api/docs/support/ticket_fields)
6. [organization_fields](https://developer.zendesk.com/rest_api/docs/support/organization_fields)
7. [user_fields](https://developer.zendesk.com/rest_api/docs/support/user_fields)

*Please visit [Endpoint Parameters](https://bitbucket.org/kds_consulting_team/kds-team.wr-zendesk/src/master/docs/endpoint_parameters.md) for list of supported parameters and required parameters*

All columns from the input mappings will be converted as a request parameter object for the API request and they need to be valid for the supported endpoint. Each combinatino of function and endpoint contains required parameters for the API request. <br>
For `CREATE` requests, the input tables need to contain columns defined in the `CREATE_required` fields. <br>
For `UPDATE` requests, the input tables need to contain columsn defined in the `UPDATE_required` fields.

### Supported Endpoints DataType
The value of the Input table's column need to match with the DataType for the respective parameters defined in [Endpoint Parameters](https://bitbucket.org/kds_consulting_team/kds-team.wr-zendesk/src/master/docs/endpoint_parameters.md). The writer will not perform API requests for rows having misaligned Datatypes. All parameters that have a `ReadOnly` configured as True are not available as one of the request parameters. If `ReadOnly` parameter is configured within the input, it will be omitted from the API requests.

| DataType | Descriptions |
|-|-|
| string | Values will be sent as a `STR`. |
| integer | Values will be converted to `INT` in the request parameters. |
| boolean | Values will be converted to `BOOL`  in the request parameters. |
| date | Values will be send as a `STR`.|
| array | Values need to be a valid `LIST`. Values will be sent as a `JSON LIST` object. |
| object | Values need to be a valid `JSON` object. |
| attachment | `Not supported` |
| via | `Not supported` |

## Log Outputs
Unless users have the invalid account information in the configurations or invalid endpoints specified in the input mappings, the component will not fail even when a API request failed. 
A log will contain wether or not an API request went through. If not, a description from the API response will be available in one of the columns of the log. 


================================================
File: Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install --upgrade pip

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
Copyright (c) 2018 Keboola DS

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog


================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: endpoint_docu_generator.py
================================================
import json

'''
A endpoint parameter template generator
If you have any changes for the endpoints, please apply it into
src/endpoint_mapping.json
Running this component will update the docs/endpoint_parameters.md
'''

with open('src/endpoint_mapping.json') as f:
    endpoints = json.load(f)

with open('docs/endpoint_parameters.md', 'w') as f:
    for endpoint in endpoints:
        line = '## {} \n'.format(endpoint)
        f.write(line)

        header_line = '| Parameter | CREATE required | UPDATE required | ReadOnly |DataType | Description |\n'
        f.write(header_line)
        sub_header_line = '|-|-|-|-|-|-|\n'
        f.write(sub_header_line)

        for i in endpoints[endpoint]['attributes']:
            line = '| {} | {} | {} | {} | {} | {} |\n'.format(
                i,
                True if i in endpoints[endpoint]['create_required'] else '',
                True if i in endpoints[endpoint]['update_required'] else '',
                True if 'read_only' in endpoints[endpoint]['attributes'][i] else '',
                endpoints[endpoint]['attributes'][i]['type'],
                endpoints[endpoint]['attributes'][i]['description']
            )
            f.write(line)

        f.write('\n\n')


================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.0.zip#egg=kbc
logging_gelf==0.0.18
mock
freezegun
pandas
requests
backoff

================================================
File: component_config/component_long_description.md
================================================
Zendesk Writer enables users to create/update Zendesk Support API properties with the flexibility of defining their own parameters.

To configure the writer, you need:

- provide Zendesk credentials and domain
- Have the Zendesk Support API endpoints you want to create/update, please visit [Zendesk](https://developer.zendesk.com/rest_api/docs/support/introduction) for more details
- Understand the format required for the parameters you wish to create/update for your endpoints

================================================
File: component_config/component_short_description.md
================================================
Creating or updating the relative endpoint objects in the Zendesk API with users' defined input parameters

================================================
File: component_config/configSchema.json
================================================
{
    "type": "object",
    "title": "Configuration",
    "required": [
        "email",
        "#api_token",
        "domain",
        "full_url",
        "function"
    ],
    "properties": {
        "email": {
            "type": "string",
            "title": "Login Email",
            "propertyOrder": 100,
            "minLength": 1
        },
        "#api_token": {
            "type": "string",
            "title": "API token",
            "format": "password",
            "propertyOrder": 200,
            "minLength": 1
        },
        "domain": {
            "type": "string",
            "title": "Zendesk Domain",
            "default": "DOMAIN",
            "propertyOrder": 300,
            "minLength": 1
        },
        "full_url": {
            "type": "string",
            "title": "Zendesk URL",
            "template": "https://{{domain}}.zendesk.com",
            "watch": {
                "domain": "domain"
            },
            "description": "This is generated automatically from 'Zendesk Domain'.",
            "propertyOrder": 400
        },
        "function": {
            "type": "string",
            "title": "Function",
            "propertyOrder": 500,
            "enum": [
                "CREATE",
                "UPDATE"
            ],
            "options": {
                "enum_titles": [
                    "CREATE",
                    "UPDATE"
                ]
            },
            "default": "CREATE"
        }
    }
}

================================================
File: component_config/configuration_description.md
================================================
The component takes tables from the input mapping and create/updates records in Zendesk API. The table names from the input mapping will be used to define the Zendesk object the users wish to create/update. Example: users.csv will be creating/updating Zendesk's User endpoint.

## Configuration Parameters
1. Login Email
    - Zendesk account login email
2. API Token
    - Zendesk account API token
    - You can obtain API tokens from the Zendesk Support admin interface at Admin > Channels > API 
3. Zendesk Domain
    - The domain of the Zendesk instance
4. Zendesk URL
    - This configuration is generated automatically from the input of `Zendesk Domain`
5. Function
    - Defines the type of request user wants to perform for all the endpoints define in the input mapping
    - CREATE
        - performing `POST` request to the endpoints defined
    - UPDATE
        - Performing `PUT` request to the endpoints defined

## Endpoint Specifications
The table names from the input mapping will be used to define the Zendesk endpoint the users wish to perform the specified `Function` (CREATE/UPDATE).
Example: users.csv will be creating/updating Zendesk's User endpoint.

## Supported Endpoints
1. [users](https://developer.zendesk.com/rest_api/docs/support/users)
2. [tickets](https://developer.zendesk.com/rest_api/docs/support/tickets)
    - Account inputted in the configuration will be used as the requester_id. If user wants to alter the request_id, please perform such action via `UPDATE` request.
3. [organizations](https://developer.zendesk.com/rest_api/docs/support/organizations)
4. [groups](https://developer.zendesk.com/rest_api/docs/support/groups)
5. [ticket_fields](https://developer.zendesk.com/rest_api/docs/support/ticket_fields)
6. [organization_fields](https://developer.zendesk.com/rest_api/docs/support/organization_fields)
7. [user_fields](https://developer.zendesk.com/rest_api/docs/support/user_fields)

*Please visit [Endpoint Parameters](https://bitbucket.org/kds_consulting_team/kds-team.wr-zendesk/src/master/docs/endpoint_parameters.md) for list of supported parameters and required parameters*

All columns from the input mappings will be converted as a request parameter object for the API request and they need to be valid for the supported endpoint. Each combinatino of function and endpoint contains required parameters for the API request. <br>
For `CREATE` requests, the input tables need to contain columns defined in the `CREATE_required` fields. <br>
For `UPDATE` requests, the input tables need to contain columsn defined in the `UPDATE_required` fields.

### Supported Endpoints DataType
The value of the Input table's column need to match with the DataType for the respective parameters defined in [Endpoint Parameters](https://bitbucket.org/kds_consulting_team/kds-team.wr-zendesk/src/master/docs/endpoint_parameters.md). The writer will not perform API requests for rows having misaligned Datatypes. All parameters that have a `ReadOnly` configured as True are not available as one of the request parameters. If `ReadOnly` parameter is configured within the input, it will be omitted from the API requests.

| DataType | Descriptions |
|-|-|
| string | Values will be sent as a `STR`. |
| integer | Values will be converted to `INT` in the request parameters. |
| boolean | Values will be converted to `BOOL`  in the request parameters. |
| date | Values will be send as a `STR`.|
| array | Values need to be a valid `LIST`. Values will be sent as a `JSON LIST` object. |
| object | Values need to be a valid `JSON` object. |
| attachment | `Not supported` |
| via | `Not supported` |

## Log Outputs
Unless users have the invalid account information in the configurations or invalid endpoints specified in the input mappings, the component will not fail even when a API request failed. 
A log will contain wether or not an API request went through. If not, a description from the API response will be available in one of the columns of the log. 


================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/stack_parameters.json
================================================
{}

================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: docs/endpoint_parameters.md
================================================
## users 
| Parameter | CREATE required | UPDATE required | ReadOnly |DataType | Description |
|-|-|-|-|-|-|
| id |  | True | True | integer | Automatically assigned when the user is created |
| email |  |  |  | string | The user's primary email address. Writeable on create only. On update, a secondary email is added. |
| name | True |  |  | string | The user's name |
| active |  |  | True | boolean | false if the user has been deleted |
| alias |  |  |  | string | An alias displayed to end users |
| chat_only |  |  | True | boolean | Whether or not the user is a chat-only agent |
| created_at |  |  | True | date | The time the user was created |
| custom_role_id |  |  |  | integer | A custom role if the user is an agent on the Enterprise plan |
| role_type |  |  | True | integer | The user's role id. 0 for custom agents, 1 for light agent, 2 for chat agent, and 3 for chat agent added to the Support account as a contributor |
| details |  |  |  | string | Any details you want to store about the user, such as an address |
| external_id |  |  |  | string | A unique identifier from another system. The API treats the id as case insensitive. Example: ian1 and Ian1 are the same user |
| last_login_at |  |  | True | date | The last time the user signed in to Zendesk Support |
| locale |  |  |  | string | The user's locale. A BCP-47 compliant tag for the locale. If both "locale" and "locale_id" are present on create or update, "locale_id" is ignored and only "locale" is used. |
| locale_id |  |  |  | integer | The user's language identifier |
| moderator |  |  |  | boolean | Designates whether the user has forum moderation capabilities |
| notes |  |  |  | string | Any notes you want to store about the user |
| only_private_comments |  |  |  | boolean | true if the user can only create private comments |
| organization_id |  |  |  | integer | The id of the user's organization. If the user has more than one organization memberships, the id of the user's default organization |
| default_group_id |  |  |  | integer | The id of the user's default group. *Can only be set on create, not on update |
| phone |  |  |  | string | The user's primary phone number. See Phone Number below |
| shared_phone_number |  |  | True | boolean | Whether the phone number is shared or not |
| photo |  |  |  | attachment | NOT SUPPORTED. The user's profile picture represented as an Attachment object |
| restricted_agent |  |  |  | boolean | If the agent has any restrictions; false for admins and unrestricted agents, true for other agents |
| role |  |  |  | string | The user's role. Possible values are "end-user", "agent", or "admin" |
| shared |  |  | True | boolean | If the user is shared from a different Zendesk Support instance. Ticket sharing accounts only |
| shared_agent |  |  | True | boolean | If the user is a shared agent from a different Zendesk Support instance. Ticket sharing accounts only |
| signature |  |  |  | string | The user's signature. Only agents and admins can have signatures |
| suspended |  |  |  | boolean | If the agent is suspended. Tickets from suspended users are also suspended, and these users cannot sign in to the end user portal |
| tags |  |  |  | array | The user's tags. Only present if your account has user tagging enabled |
| ticket_restriction |  |  |  | string | Specifies which tickets the user has access to. Possible values are: "organization", "groups", "assigned", "requested", null |
| time_zone |  |  |  | string | The user's time zone |
| two_factor_auth_enabled |  |  | True | boolean | If two factor authentication is enabled |
| updated_at |  |  | True | date | The time the user was last updated |
| url |  |  | True | string | The user's API url |
| user_fields |  |  |  | object | Values of custom fields in the user's profile. See [User Fields](https://developer.zendesk.com/rest_api/docs/support/users#user-fields) |
| verified |  |  |  | boolean | The user's primary identity is verified or not. For secondary identities, see [User Identities](https://developer.zendesk.com/rest_api/docs/support/user_identities) |
| report_csv |  |  | True | boolean | Whether or not the user can access the CSV report on the Search tab of the Reporting page in the Support admin interface |


## groups 
| Parameter | CREATE required | UPDATE required | ReadOnly |DataType | Description |
|-|-|-|-|-|-|
| id |  | True | True | integer | Automatically assigned when creating groups |
| url |  |  | True | string | The API url of this group |
| name | True |  |  | string | The name of the group |
| description |  |  |  | string | The description of the group |
| default |  |  | True | boolean | If group is default for the account |
| deleted |  |  | True | boolean | Deleted groups get marked as such |
| created_at |  |  | True | date | The time the group was created |
| updated_at |  |  | True | date | The time of the last update of the group |


## organizations 
| Parameter | CREATE required | UPDATE required | ReadOnly |DataType | Description |
|-|-|-|-|-|-|
| id |  | True | True | integer | Automatically assigned when the organization is created |
| url |  |  | True | string | The API url of this organization |
| external_id |  |  |  | string | A unique external id to associate organizations to an external record |
| name | True |  |  | string | A unique name for the organization |
| created_at |  |  | True | date | The time the organization was created |
| updated_at |  |  | True | date | The time of the last update of the organization |
| domain_names |  |  |  | array | An array of domain names associated with this organization |
| details |  |  |  | string | Any details obout the organization, such as the address |
| notes |  |  |  | string | Any notes you have about the organization |
| group_id |  |  |  | integer | New tickets from users in this organization are automatically put in this group |
| shared_tickets |  |  |  | boolean | End users in this organization are able to see each other's tickets |
| shared_comments |  |  |  | boolean | End users in this organization are able to see each other's comments on tickets |
| tags |  |  |  | array | The tags of the organization |
| organization_fields |  |  |  | object | Custom fields for this organization |


## tickets 
| Parameter | CREATE required | UPDATE required | ReadOnly |DataType | Description |
|-|-|-|-|-|-|
| id |  | True | True | integer | Automatically assigned when the ticket is created |
| url |  |  | True | string | The API url of this ticket |
| external_id |  |  |  | string | An id you can use to link Zendesk Support tickets to local records |
| type |  |  |  | string | The type of this ticket. Possible values: "problem", "incident", "question" or "task" |
| subject |  |  |  | string | The value of the subject field for this ticket |
| raw_subject |  |  |  | string | The dynamic content placeholder |
| description |  |  | True | string | Read-only first comment on the ticket |
| comment | True |  |  | object | Description required when creating a ticket. Please refer to [Description and first comment](https://developer.zendesk.com/rest_api/docs/support/tickets#description-and-first-comment) |
| priority |  |  |  | string | The urgency with which the ticket should be addressed. Possible values: "urgent", "high", "normal", "low" |
| status |  |  |  | string | The state of the ticket. Possible values: "new", "open", "pending", "hold", "solved", "closed" |
| recipient |  |  |  | string | The original recipient e-mail address of the ticket |
| requester_id |  |  |  | integer | The user who requested this ticket |
| submitter_id |  |  |  | integer | The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket |
| assignee_id |  |  |  | integer | The agent currently assigned to the ticket |
| organization_id |  |  |  | integer | The organization of the requester. You can only specify the ID of an organization associated with the requester |
| group_id |  |  |  | integer | The group this ticket is assigned to |
| collaborator_ids |  |  |  | array | The ids of users currently CC'ed on the ticket |
| collaborators |  |  |  | array | POST requests only. Users to add as cc's when creating a ticket. See [Setting Collaborators](https://developer.zendesk.com/rest_api/docs/support/tickets#setting-collaborators) |
| email_cc_ids |  |  |  | array | The ids of agents or end users currently CC'ed on the ticket. See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233) in the Support Help Center |
| follower_ids |  |  |  | array | The ids of agents currently following the ticket. See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233) |
| forum_topic_id |  |  | True | integer | The topic in the Zendesk Web portal this ticket originated from, if any. The Web portal is deprecated |
| problem_id |  |  |  | integer | For tickets of type "incident", the ID of the problem the incident is linked to |
| has_incidents |  |  | True | boolean | Is true if a ticket is a problem type and has one or more incidents linked to it. Otherwise, the value is false |
| due_at |  |  |  | date | If this is a ticket of type "task" it has a due date. Due date format uses ISO 8601 format. |
| tags |  |  |  | array | The array of tags applied to this ticket |
| via |  |  | True | via | This object explains how the ticket was created |
| custom_fields |  |  |  | array | Custom fields for the ticket. See [Setting custom field values](https://developer.zendesk.com/rest_api/docs/support/tickets#setting-custom-field-values) |
| satisfaction_rating |  |  | True | object | The satisfaction rating of the ticket, if it exists, or the state of satisfaction, 'offered' or 'unoffered' |
| sharing_agreement_ids |  |  | True | array | The ids of the sharing agreements used for this ticket |
| followup_ids |  |  | True | array | The ids of the followups created from this ticket. Ids are only visible once the ticket is closed |
| via_followup_source_id |  |  |  | integer | POST requests only. The id of a closed ticket when creating a follow-up ticket. See [Creating Follow-up Tickets](https://developer.zendesk.com/rest_api/docs/support/tickets#creating-follow-up-tickets) |
| macro_ids |  |  |  | array | CREATE requests only. List of macro IDs to be recorded in the ticket audit |
| ticket_form_id |  |  |  | integer | Enterprise only. The id of the ticket form to render for the ticket |
| brand_id |  |  |  | integer | Enterprise only. The id of the brand this ticket is associated with |
| allow_channelback |  |  | True | boolean | Is false if channelback is disabled, true otherwise. Only applicable for channels framework ticket |
| allow_attachments |  |  | True | boolean | When an agent responds, are they allowed to add attachments? Defaults to true |
| is_public |  |  | True | boolean | Is true if any comments are public, false otherwise |
| created_at |  |  | True | date | When this record was created |
| updated_at |  |  | True | date | When this record last got updated |


## ticket_fields 
| Parameter | CREATE required | UPDATE required | ReadOnly |DataType | Description |
|-|-|-|-|-|-|
| id |  | True | True | integer | Automatically assigned when created |
| url |  |  | True | string | The URL for this resource |
| type | True |  |  | string | System or custom field type. *Editable for custom field types and only on creation. Please visit [Create Ticket Field](https://developer.zendesk.com/rest_api/docs/support/ticket_fields#create-ticket-field) for list of supported field types. |
| title | True |  |  | string | The title of the ticket field |
| raw_title |  |  |  | string | The dynamic content placeholder if present, or the "title" value if not |
| description |  |  |  | string | Describes the purpose of the ticket field to users |
| raw_description |  |  |  | string | The dynamic content placeholder if present, or the "description" value if not |
| position |  |  |  | integer | The relative position of the ticket field on a ticket. Note that for accounts with ticket forms, positions are controlled by the different forms |
| active |  |  |  | boolean | Whether this field is available |
| required |  |  |  | boolean | If true, agents must enter a value in the field to change the ticket status to solved |
| collapsed_for_agents |  |  |  | boolean | If true, the field is shown to agents by default. If false, the field is hidden alongside infrequently used fields. Classic interface only |
| regexp_for_validation |  |  |  | string | For "regexp" fields only. The validation pattern for a field value to be deemed valid |
| title_in_portal |  |  |  | string | The title of the ticket field is mandatory when the field is visible to end users in Help Center |
| raw_title_in_portal |  |  |  | string | The dynamic content placeholder if present, or the "title_in_portal" value if not. |
| visible_in_portal |  |  |  | boolean | Whether this field is visible to end users in Help Center |
| editable_in_portal |  |  |  | boolean | Whether this field is editable by end users in Help Center |
| required_in_portal |  |  |  | boolean | If true, end users must enter a value in the field to create the request |
| tag |  |  |  | string | For "checkbox" fields only. A tag added to tickets when the checkbox field is selected |
| created_at |  |  | True | date | The time the custom ticket field was created |
| updated_at |  |  | True | date | The time the custom ticket field was last updated |
| system_field_options |  |  | True | array | Presented for a system ticket field of type "tickettype", "priority" or "status" |
| custom_field_options |  |  |  | array | Required and presented for a custom ticket field of type "multiselect" or "tagger" |
| sub_type_id |  |  |  | integer | For system ticket fields of type "priority" and "status". Defaults to 0. A "priority" sub type of 1 removes the "Low" and "Urgent" options. A "status" sub type of 1 adds the "On-Hold" option |
| removable |  |  | True | boolean | If false, this field is a system field that must be present on all tickets |
| agent_description |  |  | True | string | A description of the ticket field that only agents can see |


## organization_fields 
| Parameter | CREATE required | UPDATE required | ReadOnly |DataType | Description |
|-|-|-|-|-|-|
| id |  | True | True | integer | Automatically assigned upon creation |
| url |  |  | True | string | The URL for this resource |
| key | True |  |  | string | A unique key that identifies this custom field. This is used for updating the field and referencing in placeholders |
| type | True |  |  | string | Type of the custom field: "checkbox", "date", "decimal", "dropdown", "integer", "regexp", "text", or "textarea" |
| title | True |  |  | string | The title of the custom field |
| raw_title |  |  |  | string | The dynamic content placeholder, if present, or the "title" value, if not.  |
| description |  |  |  | string | User-defined description of this field's purpose |
| raw_description |  |  |  | string | The dynamic content placeholder, if present, or the "description" value, if not.  |
| position |  |  |  | integer | Ordering of the field relative to other fields |
| active |  |  |  | boolean | If true, this field is available for use |
| system |  |  | True | boolean | If true, only active and position values of this field can be changed |
| regexp_for_validation |  |  |  | string | Regular expression field only. The validation pattern for a field value to be deemed valid |
| created_at |  |  | True | date | The time the ticket field was created |
| updated_at |  |  | True | date | The time of the last update of the ticket field |
| tag |  |  |  | string | Optional for custom field of type "checkbox"; not presented otherwise |
| custom_field_options |  |  |  | array | Required and presented for a custom field of type "dropdown" |


## user_fields 
| Parameter | CREATE required | UPDATE required | ReadOnly |DataType | Description |
|-|-|-|-|-|-|
| id |  | True | True | integer | Automatically assigned upon creation |
| url |  |  | True | string | The URL for this resource |
| key | True |  |  | string | A unique key that identifies this custom field. This is used for updating the field and referencing in placeholders. |
| type | True |  |  | string | Type of the custom field: "checkbox", "date", "decimal", "dropdown", "integer", "regexp", "text", or "textarea" |
| title | True |  |  | string | The title of the custom field |
| raw_title |  |  |  | string | The dynamic content placeholder, if present, or the "title" value, if not.  |
| description |  |  |  | string | User-defined description of this field's purpose |
| raw_description |  |  |  | string | The dynamic content placeholder, if present, or the "description" value, if not.  |
| position |  |  |  | integer | Ordering of the field relative to other fields |
| active |  |  |  | boolean | If true, this field is available for use |
| system |  |  | True | boolean | If true, only active and position values of this field can be changed |
| regexp_for_validation |  |  |  | string | Regular expression field only. The validation pattern for a field value to be deemed valid. |
| created_at |  |  | True | date | The time the ticket field was created |
| updated_at |  |  | True | date | The time of the last update of the ticket field |
| tag |  |  |  | string | Optional for custom field of type "checkbox"; not presented otherwise |
| custom_field_options |  |  |  | array | Required and presented for a custom field of type "dropdown" |




================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi

================================================
File: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi

================================================
File: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"

================================================
File: src/component.py
================================================
'''
kds-team.wr-zendesk main class.

'''

import logging
import logging_gelf.handlers
import logging_gelf.formatters
import sys
import os
import requests
import base64
import json
import pandas as pd
import backoff

from datetime import datetime  # noqa

from kbc.env_handler import KBCEnvHandler
from kbc.result import KBCTableDef  # noqa
from kbc.result import ResultWriter  # noqa


# configuration variables
KEY_EMAIL = 'email'
KEY_API_TOKEN = '#api_token'
KEY_DOMAIN = 'domain'
KEY_FULL_URL = 'full_url'
KEY_FUNCTION = 'function'

MANDATORY_PARS = [
    KEY_EMAIL,
    KEY_API_TOKEN,
    KEY_DOMAIN,
    KEY_FULL_URL,
    KEY_FUNCTION
]
MANDATORY_IMAGE_PARS = []

# Default Table Output Destination
DEFAULT_TABLE_SOURCE = "/data/in/tables/"
DEFAULT_TABLE_DESTINATION = "/data/out/tables/"
DEFAULT_FILE_DESTINATION = "/data/out/files/"
DEFAULT_FILE_SOURCE = "/data/in/files/"

NOW = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)-8s : [line:%(lineno)3s] %(message)s',
    datefmt="%Y-%m-%d %H:%M:%S")

if 'KBC_LOGGER_ADDR' in os.environ and 'KBC_LOGGER_PORT' in os.environ:

    logger = logging.getLogger()
    logging_gelf_handler = logging_gelf.handlers.GELFTCPSocketHandler(
        host=os.getenv('KBC_LOGGER_ADDR'), port=int(os.getenv('KBC_LOGGER_PORT')))
    logging_gelf_handler.setFormatter(
        logging_gelf.formatters.GELFFormatter(null_character=True))
    logger.addHandler(logging_gelf_handler)

    # remove default logging to stdout
    logger.removeHandler(logger.handlers[0])

APP_VERSION = '0.0.2'


class Component(KBCEnvHandler):

    def __init__(self, debug=False):
        KBCEnvHandler.__init__(self, MANDATORY_PARS)
        """
        # override debug from config
        if self.cfg_params.get('debug'):
            debug = True
        else:
            debug = False

        self.set_default_logger('DEBUG' if debug else 'INFO')
        """
        logging.info('Running version %s', APP_VERSION)
        logging.info('Loading configuration...')

        try:
            # self.validate_config(MANDATORY_PARS)
            self.validate_image_parameters(MANDATORY_IMAGE_PARS)
        except ValueError as e:
            logging.error(e)
            exit(1)

    def run(self):
        '''
        Main execution code
        '''

        # Get proper list of tables
        in_tables = self.configuration.get_input_tables()
        in_table_names = self.get_tables(in_tables, 'input_mapping')
        logging.info("IN tables mapped: "+str(in_table_names))

        params = self.cfg_params  # noqa
        # Validating and assigning input parameters
        self.validate_config_params(
            params_obj=params, in_tables=in_table_names)
        # Constructing request header
        self.request_header = self.get_basic_auth(self.email, self.api_token)

        # Testing input credentials
        self.test_credentials()

        logging.info('Selected function: {}'.format(self.function))
        # Looping through the endpoints (input files)
        for table in in_table_names:
            logging.info('Parsing {}...'.format(table))

            endpoint = table.split('.csv')[0].lower()
            endpoint_mapping = self.endpoint_mapping[endpoint]
            endpoint_url = '{}/api/v2/{}.json'.format(self.full_url, endpoint)

            # Parsing requests in chunks to converse memory capacity
            for chunks in pd.read_csv(DEFAULT_TABLE_SOURCE+table, chunksize=100):
                # Break for loop if input file is empty
                if len(chunks) == 0:
                    logging.info(f'[{table}] is empty. Passing...')
                    break
                log = []
                input_headers = list(chunks.columns)
                # Validate Input files headers
                input_valid_bool, err_msg = self._validate_endpoint_headers(
                    endpoint=endpoint,
                    input_headers=input_headers,
                    endpoint_mapping=endpoint_mapping)

                # Break for loop if input file is not valid
                if not input_valid_bool:
                    tmp_log = self._construct_log(
                        endpoint=endpoint,
                        request_bool=False,
                        request_body=err_msg
                    )
                    log.append(tmp_log)
                    # Breaking current's endpoint for loop
                    # and Output the log for the current table
                    self.output_log(log, endpoint)
                    break

                else:
                    for index, row in chunks.iterrows():
                        if self.function == 'CREATE':
                            request_url = endpoint_url
                        elif self.function == 'UPDATE':
                            request_url = endpoint_url.replace(
                                '.json', '/{}.json'.format(row['id']))

                        # Construct request body
                        body_construct_bool, request_body = self._construct_request_body(
                            df=row,
                            df_headers=input_headers,
                            endpoint=endpoint,
                            endpoint_mapping=endpoint_mapping)

                        # Validate if request body is constructed
                        if body_construct_bool:
                            # Zendesk request
                            request_status, request_response = self.request(
                                url=request_url, payload=request_body)

                            # Outputting log
                            tmp_log = self._construct_log(
                                endpoint=endpoint,
                                request_bool=True,
                                request_status=request_status,
                                request_body=request_body[endpoint[:-1]],
                                request_response=request_response,
                                row_df=row
                            )
                        else:
                            tmp_log = self._construct_log(
                                endpoint=endpoint,
                                request_bool=False,
                                request_body=request_body[endpoint[:-1]],
                                row_df=row
                            )

                        log.append(tmp_log)

                self.output_log(log, endpoint)

        logging.info("Zendesk Writer finished")

    def test_credentials(self):
        '''
        Testing input credentials
        '''

        endpoint_url = '{}/api/v2/{}.json'.format(self.full_url, 'users')
        r = requests.get(url=endpoint_url, headers=self.request_header)

        if r.status_code not in [200, 201]:
            logging.error(r.json()['error'])
            logging.error('Please validate your credentials')
            sys.exit(1)

    def validate_config_params(self, params_obj, in_tables):
        """
        Injecting input parameter into Component's class
        Validating if the input parameters are in the right format.
        Lower chances of faulty user's configuration
        1. Validate parameters below:
            1. KEY_EMAIL
            2. KEY_API_TOKEN
            3. KEY_DOMAIN
        2. Validate if there are any input mappings
        """

        # Validate if config is blank
        # Happens when the configuration is not saved in the UI
        error_message = ''
        if params_obj == {}:
            error_message = 'Configurations are missing. Please configure your component.'
        elif params_obj[KEY_EMAIL] == '' and (params_obj[KEY_DOMAIN] == '' or params_obj[KEY_DOMAIN] == 'DOMAIN'):
            error_message = 'Configurations are missing. Please configure your component.'
        elif params_obj[KEY_API_TOKEN] == '' and params_obj[KEY_EMAIL] == '':
            error_message = 'Credentials are missing. Please enter your credentials.'
        elif params_obj[KEY_DOMAIN] == 'DOMAIN' or params_obj[KEY_DOMAIN] == '':
            error_message = 'Zendesk domain is missing. Please enter your domain'
        elif len(in_tables) == 0:
            error_message = 'No input tables are found. Please configure your input files.'
        elif params_obj[KEY_FUNCTION] not in ['CREATE', 'UPDATE']:
            error_message = '{} is not an available function. Please validate your inputs.'.format(
                params_obj[KEY_FUNCTION])

        # Importing Endpoint Mapping
        with open('src/endpoint_mapping.json', 'r') as f:
            self.endpoint_mapping = json.load(f)

        # Validate Input files
        if len(in_tables) > 0 and error_message == '':
            non_exist_endpoint = []
            for table in in_tables:
                table_name = table.split('.csv')[0]
                if table_name not in self.endpoint_mapping:
                    non_exist_endpoint.append(table_name)
            if len(non_exist_endpoint) > 0:
                error_message = 'Input endpoints are not supported: {}'.format(
                    non_exist_endpoint)

        # If error message exists, terminate the component with error
        if error_message != '':
            logging.error(error_message)
            sys.exit(1)

        # Creating input parameters as Component class parameters
        self.email = params_obj[KEY_EMAIL]
        self.api_token = params_obj[KEY_API_TOKEN]
        self.domain = params_obj[KEY_DOMAIN]
        self.full_url = params_obj[KEY_FULL_URL]
        self.function = params_obj[KEY_FUNCTION]

    def _convert_datatype(self, datatype, row_name, row_value, required):
        '''
        Converting a value to its desired datatype
        '''

        tmp_obj = {}
        err_msg = ''
        datatype_type = datatype['type']
        read_only = bool(datatype['read_only']
                         ) if 'read_only' in datatype else False
        if not read_only or required:
            try:
                if datatype_type in ('string', 'date'):
                    tmp_obj[row_name] = "" if pd.isnull(row_value) else str(row_value)
                elif datatype_type == 'array':
                    tmp_obj[row_name] = json.loads(row_value)
                elif datatype_type == 'integer':
                    tmp_obj[row_name] = int(row_value)
                elif datatype_type == 'object':
                    tmp_obj[row_name] = json.loads(row_value)
                elif datatype_type == 'boolean':
                    tmp_obj[row_name] = bool(row_value)
            except Exception as err:
                err_msg = err
                logging.error(err_msg)

        return tmp_obj, err_msg

    def _construct_request_body(self, df, df_headers, endpoint, endpoint_mapping):
        '''
        Constructing the request body for the relative endpoint
        '''

        required_cols = endpoint_mapping[self.function.lower()+'_required']
        construct_bool = True
        request_body = {
            endpoint[:-1]: {}
        }

        for obj in df_headers:
            required = True if obj in required_cols and self.function == 'CREATE' else False
            tmp_obj, err_msg = self._convert_datatype(
                datatype=endpoint_mapping['attributes'][obj],
                row_name=obj,
                row_value=df[obj],
                required=required)
            if err_msg != '':
                construct_bool = False
                return construct_bool, err_msg
            request_body[endpoint[:-1]].update(tmp_obj)

        return construct_bool, request_body

    def _validate_endpoint_headers(self, endpoint, input_headers, endpoint_mapping):
        '''
        Validate if the columns of the input files are supported for that endpoint
        '''

        # Check if required columns are included
        required_cols = endpoint_mapping[self.function.lower()+'_required']

        # Check parameters
        validate_bool = True
        err_msg = ''

        required_cols_check = all(
            col in input_headers for col in required_cols)
        logging.info('[{}] required columns check: {}'.format(
            endpoint, required_cols_check))
        if not required_cols_check:
            err_msg = '[{}] missing required columns: {}'.format(
                endpoint, required_cols)
            logging.error(err_msg)
            validate_bool = False

        # Check if input columns exist as an available attribute
        if validate_bool:
            endpoint_attributes = endpoint_mapping['attributes']
            endpoint_attributes_check = True
            non_exist_attributes = []
            for col in input_headers:
                if col not in endpoint_attributes:
                    non_exist_attributes.append(col)
                    endpoint_attributes_check = False

            if not endpoint_attributes_check:
                err_msg = 'Input columns not supported [{}]: {}'.format(
                    endpoint, non_exist_attributes)
                logging.error(err_msg)
                validate_bool = False

        return validate_bool, err_msg

    def _construct_log(self,
                       endpoint,
                       request_bool,
                       request_status=None,
                       request_body=None,
                       request_response=None,
                       row_df=None):
        '''
        Constructing Log messages
        '''

        tmp_log = {
            'request_date': NOW,
            'request_bool': request_bool,
            'request_status': request_status,
            'request_body': json.dumps(request_body)
        }
        if request_status in [200, 201]:
            tmp_log['request_response'] = json.dumps(
                request_response[endpoint[:-1]])
        else:
            tmp_log['request_response'] = json.dumps(
                request_response)

        # Adding ID field if its a UPDATE function
        if self.function == 'UPDATE':
            tmp_log['id'] = row_df['id'] if row_df is not None else ''

        return tmp_log

    def get_basic_auth(self, email, api_token):
        '''
        Generating Base64 authentication header
        '''

        auth_string = '{}/token:{}'.format(email, api_token)
        auth_string_encode = base64.b64encode(auth_string.encode()).decode()

        header = {
            'Content-Type': 'application/json',
            'Authorization': 'Basic %s' % auth_string_encode
        }

        return header

    def request(self, url, payload):
        try:
            status_code, response = self._try_request(url, payload)
        except requests.exceptions.RequestException as e:
            logging.error(f"Request error for url {url} with payload {payload}: {e}")
            exit(1)

        return status_code, response

    @backoff.on_exception(backoff.expo, requests.exceptions.RequestException, max_tries=5)
    def _try_request(self, url, payload) -> tuple:
        """
        Generic Zendesk Post request
        """
        if self.function == 'CREATE':
            r = requests.post(url, headers=self.request_header,
                              data=json.dumps(payload))
        elif self.function == 'UPDATE':
            r = requests.put(url, headers=self.request_header,
                             data=json.dumps(payload))

        r.raise_for_status()

        return r.status_code, r.json()

    def get_tables(self, tables, mapping):
        """
        Evaluate input and output table names.
        Only taking the first one into consideration!
        mapping: input_mapping, output_mappings
        """
        # input file
        table_list = []
        for table in tables:
            name = table["full_path"]  # noqa
            if mapping == "input_mapping":
                destination = table["destination"]
            elif mapping == "output_mapping":
                destination = table["source"]
            table_list.append(destination)

        return table_list

    def output_log(self, log, endpoint):
        '''
        Outputting the log of the requested endpoint
        '''

        log_df = pd.DataFrame(log)
        output_filename = '{0}{1}_{2}_log.csv'.format(
            DEFAULT_TABLE_DESTINATION, endpoint, self.function.lower())

        if self.function == 'CREATE':
            primary_key = [
                'request_date',
                'request_body'
            ]
            columns = [
                'request_date',
                'request_bool',
                'request_body',
                'request_status',
                'request_response'
            ]
        elif self.function == 'UPDATE':
            primary_key = [
                'request_date',
                'id',
                'request_body'
            ]
            columns = [
                'request_date',
                'id',
                'request_bool',
                'request_body',
                'request_status',
                'request_response'
            ]

        if not os.path.isfile(output_filename):
            with open(output_filename, 'w') as f:
                log_df.to_csv(f, index=False, columns=columns)
            f.close()
            self.product_manifest(
                file_name=output_filename, primary_key=primary_key)
        else:
            with open(output_filename, 'a') as f:
                log_df.to_csv(f, index=False, header=False, columns=columns)
            f.close()

    def product_manifest(self, file_name, primary_key):
        '''
        Producing manifest files
        '''

        output_manifest = file_name+'.manifest'
        manifest_template = {
            'incremental': True,
            'primary_key': primary_key
        }

        with open(output_manifest, 'w') as file_out:
            json.dump(manifest_template, file_out)
            logging.info(
                "Output manifest file [{}] produced.".format(output_manifest))


"""
        Main entrypoint
"""
if __name__ == "__main__":
    if len(sys.argv) > 1:
        debug = sys.argv[1]
    else:
        debug = True
    comp = Component(debug)
    comp.run()


================================================
File: src/endpoint_mapping.json
================================================
{
    "users": {
        "create_required": [
            "name"
        ],
        "update_required": [
            "id"
        ],
        "attributes": {
            "id": {"type": "integer", "read_only": true, "description": "Automatically assigned when the user is created"},
            "email": {"type": "string","description": "The user's primary email address. Writeable on create only. On update, a secondary email is added."},
            "name": {"type": "string", "description": "The user's name"},
            "active": {"type": "boolean", "read_only": true, "description": "false if the user has been deleted"},
            "alias": {"type": "string", "description": "An alias displayed to end users"},
            "chat_only": {"type": "boolean", "read_only": true, "description": "Whether or not the user is a chat-only agent"},
            "created_at": {"type": "date", "read_only": true, "description": "The time the user was created"},
            "custom_role_id": {"type": "integer", "description": "A custom role if the user is an agent on the Enterprise plan"},
            "role_type": {"type": "integer", "read_only": true, "description": "The user's role id. 0 for custom agents, 1 for light agent, 2 for chat agent, and 3 for chat agent added to the Support account as a contributor"},
            "details": {"type": "string", "description": "Any details you want to store about the user, such as an address"},
            "external_id": {"type": "string" , "description": "A unique identifier from another system. The API treats the id as case insensitive. Example: ian1 and Ian1 are the same user"},
            "last_login_at": {"type": "date", "read_only": true, "description": "The last time the user signed in to Zendesk Support"},
            "locale": {"type": "string", "description": "The user's locale. A BCP-47 compliant tag for the locale. If both \"locale\" and \"locale_id\" are present on create or update, \"locale_id\" is ignored and only \"locale\" is used."},
            "locale_id": {"type": "integer", "description": "The user's language identifier"},
            "moderator": {"type": "boolean", "description": "Designates whether the user has forum moderation capabilities"},
            "notes": {"type": "string", "description": "Any notes you want to store about the user"},
            "only_private_comments": {"type": "boolean", "description": "true if the user can only create private comments"},
            "organization_id": {"type": "integer" , "description": "The id of the user's organization. If the user has more than one organization memberships, the id of the user's default organization"},
            "default_group_id": {"type": "integer", "description": "The id of the user's default group. *Can only be set on create, not on update"},
            "phone": {"type": "string", "description": "The user's primary phone number. See Phone Number below"},
            "shared_phone_number": {"type": "boolean", "read_only": true, "description": "Whether the phone number is shared or not"},
            "photo": {"type": "attachment", "description": "NOT SUPPORTED. The user's profile picture represented as an Attachment object"},
            "restricted_agent": {"type": "boolean", "description": "If the agent has any restrictions; false for admins and unrestricted agents, true for other agents"},
            "role": {"type": "string", "description": "The user's role. Possible values are \"end-user\", \"agent\", or \"admin\""},
            "shared": {"type": "boolean", "read_only": true, "description": "If the user is shared from a different Zendesk Support instance. Ticket sharing accounts only"},
            "shared_agent": {"type": "boolean", "read_only": true, "description": "If the user is a shared agent from a different Zendesk Support instance. Ticket sharing accounts only"},
            "signature": {"type": "string", "description": "The user's signature. Only agents and admins can have signatures"},
            "suspended": {"type": "boolean", "description": "If the agent is suspended. Tickets from suspended users are also suspended, and these users cannot sign in to the end user portal"},
            "tags": {"type": "array", "description": "The user's tags. Only present if your account has user tagging enabled"},
            "ticket_restriction": {"type": "string", "description": "Specifies which tickets the user has access to. Possible values are: \"organization\", \"groups\", \"assigned\", \"requested\", null"},
            "time_zone": {"type": "string", "description": "The user's time zone"},
            "two_factor_auth_enabled": {"type": "boolean", "read_only": true, "description": "If two factor authentication is enabled"},
            "updated_at": {"type": "date", "read_only": true, "description": "The time the user was last updated"},
            "url": {"type": "string", "read_only": true, "description": "The user's API url"},
            "user_fields": {"type": "object", "description": "Values of custom fields in the user's profile. See [User Fields](https://developer.zendesk.com/rest_api/docs/support/users#user-fields)"},
            "verified": {"type": "boolean", "description": "The user's primary identity is verified or not. For secondary identities, see [User Identities](https://developer.zendesk.com/rest_api/docs/support/user_identities)"},
            "report_csv": {"type": "boolean", "read_only": true, "description": "Whether or not the user can access the CSV report on the Search tab of the Reporting page in the Support admin interface"}
        }
    },
    "groups": {
        "create_required": [
            "name"
        ],
        "update_required": [
            "id"
        ],
        "attributes": {
            "id": {"type": "integer", "read_only": true, "description": "Automatically assigned when creating groups"},
            "url": {"type": "string", "read_only": true, "description": "The API url of this group"},
            "name": {"type": "string", "description": "The name of the group"},
            "description": {"type": "string", "description": "The description of the group"},
            "default": {"type": "boolean", "read_only": true, "description": "If group is default for the account"},
            "deleted": {"type": "boolean", "read_only": true, "description": "Deleted groups get marked as such"},
            "created_at": {"type": "date", "read_only": true, "description": "The time the group was created"},
            "updated_at": {"type": "date", "read_only": true, "description": "The time of the last update of the group"}
        }
    },
    "organizations": {
        "create_required": [
            "name"
        ],
        "update_required": [
            "id"
        ],
        "attributes": {
            "id": {"type": "integer", "read_only": true, "description": "Automatically assigned when the organization is created"},
            "url": {"type": "string", "read_only": true, "description": "The API url of this organization"},
            "external_id": {"type": "string", "description": "A unique external id to associate organizations to an external record"},
            "name": {"type": "string", "description": "A unique name for the organization"},
            "created_at": {"type": "date", "read_only": true, "description": "The time the organization was created"},
            "updated_at": {"type": "date", "read_only": true, "description": "The time of the last update of the organization"},
            "domain_names": {"type": "array", "description": "An array of domain names associated with this organization"},
            "details": {"type": "string", "description": "Any details obout the organization, such as the address"},
            "notes": {"type": "string", "description": "Any notes you have about the organization"},
            "group_id": {"type": "integer", "description": "New tickets from users in this organization are automatically put in this group"},
            "shared_tickets": {"type": "boolean", "description": "End users in this organization are able to see each other's tickets"},
            "shared_comments": {"type": "boolean", "description": "End users in this organization are able to see each other's comments on tickets"},
            "tags": {"type": "array", "description": "The tags of the organization"},
            "organization_fields": {"type": "object", "description": "Custom fields for this organization"}
        }
    },
    "tickets": {
        "create_required": [
            "comment"
        ],
        "update_required": [
            "id"
        ],
        "attributes": {
            "id": {"type": "integer", "read_only": true, "description": "Automatically assigned when the ticket is created"},
            "url": {"type": "string", "read_only": true, "description": "The API url of this ticket"},
            "external_id": {"type": "string", "description": "An id you can use to link Zendesk Support tickets to local records"},
            "type": {"type": "string", "description": "The type of this ticket. Possible values: \"problem\", \"incident\", \"question\" or \"task\""},
            "subject": {"type": "string", "description": "The value of the subject field for this ticket"},
            "raw_subject": {"type": "string", "description": "The dynamic content placeholder"},
            "description": {"type": "string", "read_only": true, "description": "Read-only first comment on the ticket"},
            "comment": {"type": "object", "description": "Description required when creating a ticket. Please refer to [Description and first comment](https://developer.zendesk.com/rest_api/docs/support/tickets#description-and-first-comment)"},
            "priority": {"type": "string", "description": "The urgency with which the ticket should be addressed. Possible values: \"urgent\", \"high\", \"normal\", \"low\""},
            "status": {"type": "string", "description": "The state of the ticket. Possible values: \"new\", \"open\", \"pending\", \"hold\", \"solved\", \"closed\""},
            "recipient": {"type": "string", "description": "The original recipient e-mail address of the ticket"},
            "requester_id": {"type": "integer", "description": "The user who requested this ticket"},
            "submitter_id": {"type": "integer", "description": "The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket"},
            "assignee_id": {"type": "integer", "description": "The agent currently assigned to the ticket"},
            "organization_id": {"type": "integer", "description": "The organization of the requester. You can only specify the ID of an organization associated with the requester"},
            "group_id": {"type": "integer", "description": "The group this ticket is assigned to"},
            "collaborator_ids": {"type": "array", "description": "The ids of users currently CC'ed on the ticket"},
            "collaborators": {"type": "array", "description": "POST requests only. Users to add as cc's when creating a ticket. See [Setting Collaborators](https://developer.zendesk.com/rest_api/docs/support/tickets#setting-collaborators)"},
            "email_cc_ids": {"type": "array", "description": "The ids of agents or end users currently CC'ed on the ticket. See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233) in the Support Help Center"},
            "follower_ids": {"type": "array", "description": "The ids of agents currently following the ticket. See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233)"},
            "forum_topic_id": {"type": "integer", "read_only": true, "description": "The topic in the Zendesk Web portal this ticket originated from, if any. The Web portal is deprecated"},
            "problem_id": {"type": "integer", "description": "For tickets of type \"incident\", the ID of the problem the incident is linked to"},
            "has_incidents": {"type": "boolean", "read_only": true, "description": "Is true if a ticket is a problem type and has one or more incidents linked to it. Otherwise, the value is false"},
            "due_at": {"type": "date", "description": "If this is a ticket of type \"task\" it has a due date. Due date format uses ISO 8601 format."},
            "tags": {"type": "array", "description": "The array of tags applied to this ticket"},
            "via": {"type": "via", "read_only": true, "description": "This object explains how the ticket was created"},
            "custom_fields": {"type": "array", "description": "Custom fields for the ticket. See [Setting custom field values](https://developer.zendesk.com/rest_api/docs/support/tickets#setting-custom-field-values)"},
            "satisfaction_rating": {"type": "object", "read_only": true, "description": "The satisfaction rating of the ticket, if it exists, or the state of satisfaction, 'offered' or 'unoffered'"},
            "sharing_agreement_ids": {"type": "array", "read_only": true, "description": "The ids of the sharing agreements used for this ticket"},
            "followup_ids": {"type": "array", "read_only": true, "description": "The ids of the followups created from this ticket. Ids are only visible once the ticket is closed"},
            "via_followup_source_id": {"type": "integer", "description": "POST requests only. The id of a closed ticket when creating a follow-up ticket. See [Creating Follow-up Tickets](https://developer.zendesk.com/rest_api/docs/support/tickets#creating-follow-up-tickets)"},
            "macro_ids": {"type": "array", "description": "CREATE requests only. List of macro IDs to be recorded in the ticket audit"},
            "ticket_form_id": {"type": "integer", "description": "Enterprise only. The id of the ticket form to render for the ticket"},
            "brand_id": {"type": "integer", "description": "Enterprise only. The id of the brand this ticket is associated with"},
            "allow_channelback": {"type": "boolean", "read_only": true, "description": "Is false if channelback is disabled, true otherwise. Only applicable for channels framework ticket"},
            "allow_attachments": {"type": "boolean", "read_only": true, "description": "When an agent responds, are they allowed to add attachments? Defaults to true"},
            "is_public": {"type": "boolean", "read_only": true, "description": "Is true if any comments are public, false otherwise"},
            "created_at": {"type": "date", "read_only": true, "description": "When this record was created"},
            "updated_at": {"type": "date", "read_only": true, "description": "When this record last got updated"}
        }
    },
    "ticket_fields": {
        "create_required": [
            "title",
            "type"
        ],
        "update_required": [
            "id"
        ],
        "attributes": {
            "id": {"type": "integer", "read_only": true, "description": "Automatically assigned when created"},
            "url": {"type": "string", "read_only": true, "description": "The URL for this resource"},
            "type": {"type": "string", "description": "System or custom field type. *Editable for custom field types and only on creation. Please visit [Create Ticket Field](https://developer.zendesk.com/rest_api/docs/support/ticket_fields#create-ticket-field) for list of supported field types."},
            "title": {"type": "string", "description": "The title of the ticket field"},
            "raw_title": {"type": "string", "description": "The dynamic content placeholder if present, or the \"title\" value if not"},
            "description": {"type": "string", "description": "Describes the purpose of the ticket field to users"},
            "raw_description": {"type": "string", "description": "The dynamic content placeholder if present, or the \"description\" value if not"},
            "position": {"type": "integer", "description": "The relative position of the ticket field on a ticket. Note that for accounts with ticket forms, positions are controlled by the different forms"},
            "active": {"type": "boolean", "description": "Whether this field is available"},
            "required": {"type": "boolean", "description": "If true, agents must enter a value in the field to change the ticket status to solved"},
            "collapsed_for_agents": {"type": "boolean", "description": "If true, the field is shown to agents by default. If false, the field is hidden alongside infrequently used fields. Classic interface only"},
            "regexp_for_validation": {"type": "string", "description": "For \"regexp\" fields only. The validation pattern for a field value to be deemed valid"},
            "title_in_portal": {"type": "string", "description": "The title of the ticket field is mandatory when the field is visible to end users in Help Center"},
            "raw_title_in_portal": {"type": "string", "description": "The dynamic content placeholder if present, or the \"title_in_portal\" value if not."},
            "visible_in_portal": {"type": "boolean", "description": "Whether this field is visible to end users in Help Center"},
            "editable_in_portal": {"type": "boolean", "description": "Whether this field is editable by end users in Help Center"},
            "required_in_portal": {"type": "boolean", "description": "If true, end users must enter a value in the field to create the request"},
            "tag": {"type": "string", "description": "For \"checkbox\" fields only. A tag added to tickets when the checkbox field is selected"},
            "created_at": {"type": "date", "read_only": true, "description": "The time the custom ticket field was created"},
            "updated_at": {"type": "date", "read_only": true, "description": "The time the custom ticket field was last updated"},
            "system_field_options": {"type": "array", "read_only": true, "description": "Presented for a system ticket field of type \"tickettype\", \"priority\" or \"status\""},
            "custom_field_options": {"type": "array", "description": "Required and presented for a custom ticket field of type \"multiselect\" or \"tagger\""},
            "sub_type_id": {"type": "integer", "description": "For system ticket fields of type \"priority\" and \"status\". Defaults to 0. A \"priority\" sub type of 1 removes the \"Low\" and \"Urgent\" options. A \"status\" sub type of 1 adds the \"On-Hold\" option"},
            "removable": {"type": "boolean", "read_only": true, "description": "If false, this field is a system field that must be present on all tickets"},
            "agent_description": {"type": "string", "read_only": true, "description": "A description of the ticket field that only agents can see"}
        }
    },
    "organization_fields": {
        "create_required": [
            "key",
            "type",
            "title"
        ],
        "update_required": [
            "id"
        ],
        "attributes": {
            "id": {"type": "integer", "read_only": true, "description": "Automatically assigned upon creation"},
            "url": {"type": "string", "read_only": true, "description": "The URL for this resource"},
            "key": {"type": "string", "description": "A unique key that identifies this custom field. This is used for updating the field and referencing in placeholders"},
            "type": {"type": "string", "description": "Type of the custom field: \"checkbox\", \"date\", \"decimal\", \"dropdown\", \"integer\", \"regexp\", \"text\", or \"textarea\""},
            "title": {"type": "string", "description": "The title of the custom field"},
            "raw_title": {"type": "string", "description": "The dynamic content placeholder, if present, or the \"title\" value, if not. "},
            "description": {"type": "string", "description": "User-defined description of this field's purpose"},
            "raw_description": {"type": "string", "description": "The dynamic content placeholder, if present, or the \"description\" value, if not. "},
            "position": {"type": "integer", "description": "Ordering of the field relative to other fields"},
            "active": {"type": "boolean", "description": "If true, this field is available for use"},
            "system": {"type": "boolean", "read_only": true, "description": "If true, only active and position values of this field can be changed"},
            "regexp_for_validation": {"type": "string", "description": "Regular expression field only. The validation pattern for a field value to be deemed valid"},
            "created_at": {"type": "date", "read_only": true, "description": "The time the ticket field was created"},
            "updated_at": {"type": "date", "read_only": true, "description": "The time of the last update of the ticket field"},
            "tag": {"type": "string", "description": "Optional for custom field of type \"checkbox\"; not presented otherwise"},
            "custom_field_options": {"type": "array", "description": "Required and presented for a custom field of type \"dropdown\""}
        }
    },
    "user_fields": {
        "create_required": [
            "key",
            "type",
            "title"
        ],
        "update_required": [
            "id"
        ],
        "attributes": {
            "id": {"type": "integer", "read_only": true, "description": "Automatically assigned upon creation"},
            "url": {"type": "string", "read_only": true, "description": "The URL for this resource"},
            "key": {"type": "string", "description": "A unique key that identifies this custom field. This is used for updating the field and referencing in placeholders."},
            "type": {"type": "string", "description": "Type of the custom field: \"checkbox\", \"date\", \"decimal\", \"dropdown\", \"integer\", \"regexp\", \"text\", or \"textarea\""},
            "title": {"type": "string", "description": "The title of the custom field"},
            "raw_title": {"type": "string", "description": "The dynamic content placeholder, if present, or the \"title\" value, if not. "},
            "description": {"type": "string", "description": "User-defined description of this field's purpose"},
            "raw_description": {"type": "string", "description": "The dynamic content placeholder, if present, or the \"description\" value, if not. "},
            "position": {"type": "integer", "description": "Ordering of the field relative to other fields"},
            "active": {"type": "boolean", "description": "If true, this field is available for use"},
            "system": {"type": "boolean", "read_only": true, "description": "If true, only active and position values of this field can be changed"},
            "regexp_for_validation": {"type": "string", "description": "Regular expression field only. The validation pattern for a field value to be deemed valid."},
            "created_at": {"type": "date", "read_only": true, "description": "The time the ticket field was created"},
            "updated_at": {"type": "date", "read_only": true, "description": "The time of the last update of the ticket field"},
            "tag": {"type": "string", "description": "Optional for custom field of type \"checkbox\"; not presented otherwise"},
            "custom_field_options": {"type": "array", "description": "Required and presented for a custom field of type \"dropdown\""}
        }
    }
}

================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.wr-zendesk" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: ${{ vars.KBC_DEVELOPERPORTAL_USERNAME }}

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

