Directory structure:
└── keboola-component-csob-ceb/
    ├── README.md
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── cebbc-wsdl/
    │   ├── CEBBCError_v2.xsd
    │   ├── CEBBCWS.wsdl
    │   ├── FinishUploadFileListRequest_v1.xsd
    │   ├── FinishUploadFileListResponse_v1.xsd
    │   ├── GetDownloadFileListRequest_v2.xsd
    │   ├── GetDownloadFileListRequest_v3.xsd
    │   ├── GetDownloadFileListResponse_v2.xsd
    │   ├── GetDownloadFileListResponse_v3.xsd
    │   ├── StartUploadFileListRequest_v1.xsd
    │   └── StartUploadFileListResponse_v1.xsd
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── deployment/
    │   ├── deploy.sh
    │   └── flake8.cfg
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   └── ceb/
    │       ├── __init__.py
    │       ├── client.py
    │       └── parser.py
    ├── tests/
    │   ├── __init__.py
    │   ├── test_component.py
    │   └── ceb/
    │       ├── __init__.py
    │       ├── test_client.py
    │       └── resources/
    │           └── cert.pem
    ├── util-scripts/
    │   ├── build_n_run.ps1
    │   ├── run.bat
    │   └── run_kbc_tests.ps1
    └── .github/
        └── workflows/
            └── push.yml

================================================
FILE: README.md
================================================
# CSOB CEB extractor

Component allowing automated extraction of bank statements (VYPIS) using the [CEB Business Connector API](https://www.csob.cz/portal/firmy/prehled-on-line-kanalu-a-aplikaci/csob-ceb)

**Table of contents:**  
  
[TOC]


# Prerequisites

In order to make this connector work you need to follow the instructions 
described in section `2` in the [CEB Connector implementation guide](https://www.csob.cz/portal/documents/10710/15532355/csob-business-connector-implementacni-prirucka.pdf) 

Namely you need to:

- enable the CSOB CEB service
- get the authentication certificate
- register the certificate in the portal
- configure the CSOB service - enable bank statements via API in the `TXT (BB-TXT)` [format](https://www.csob.cz/portal/documents/10710/1927786/ceb-vypisy-format-txt.pdf).

# Configuration

## CEB Certificate

Retrieve your certificate and private key and paste it here in the `.pem` format.

The certificate should look similarly like this:

```
-----BEGIN CERTIFICATE-----
asdasdasdasd
-----END CERTIFICATE-----
-----BEGIN PRIVATE KEY-----
pkeyssssss
-----END PRIVATE KEY-----
```

## CSOB contract number

Your CSOB contract number.

## Period from date

Start date.

## Relative period from now

Relative period in format: '5 hours ago', 'yesterday','3 days ago', '4 months ago', '2 years ago', 'today'.
 
**Overrides** the `from` parameter.


## Development

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in the docker-compose file:

```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
FILE: change_log.md
================================================
**0.0.7**

- FIX wsdl path, dockerfile command path
  
**0.0.6**

- Update folder structure
- Update pipelines from template


================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.7.2-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.7.zip#egg=kbc
mock
freezegun
zeep


================================================
FILE: cebbc-wsdl/CEBBCError_v2.xsd
================================================
<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:tns="http://ceb-bc.csob.cz/CEBBCWS/CEBBCError_v2" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://ceb-bc.csob.cz/CEBBCWS/CEBBCError_v2" elementFormDefault="qualified">
	<xs:element name="CEBBCError" type="tns:CEBBCError_v2"/>
	<xs:complexType name="CEBBCError_v2">
		<xs:sequence>
			<xs:element name="Code" type="xs:string">
				<xs:annotation>
					<xs:documentation>Error code</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Text" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Error message</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="TicketId" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Unique identification of request</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>



================================================
FILE: cebbc-wsdl/CEBBCWS.wsdl
================================================
<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
	xmlns:tns="http://ceb-bc.csob.cz/CEBBCWS" targetNamespace="http://ceb-bc.csob.cz/CEBBCWS"
	xmlns:msg_getdownloadfilelist_v2="http://ceb-bc.csob.cz/CEBBCWS/GetDownloadFileList_v2"
	xmlns:msg_startuploadfilelist_v1="http://ceb-bc.csob.cz/CEBBCWS/StartUploadFileList_v1"
	xmlns:msg_finishuploadfilelist_v1="http://ceb-bc.csob.cz/CEBBCWS/FinishUploadFileList_v1"
	xmlns:error_v2="http://ceb-bc.csob.cz/CEBBCWS/CEBBCError_v2">
	<wsp:Policy wsu:Id="BasicHttpBinding_CEBBCWS_policy">
		<wsp:ExactlyOne>
			<wsp:All>
				<sp:TransportBinding xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
					<wsp:Policy>
						<sp:TransportToken>
							<wsp:Policy>
								<sp:HttpsToken RequireClientCertificate="true"/>
							</wsp:Policy>
						</sp:TransportToken>
						<sp:AlgorithmSuite>
							<wsp:Policy>
								<sp:Basic256/>
							</wsp:Policy>
						</sp:AlgorithmSuite>
						<sp:Layout>
							<wsp:Policy>
								<sp:Strict/>
							</wsp:Policy>
						</sp:Layout>
					</wsp:Policy>
				</sp:TransportBinding>
			</wsp:All>
		</wsp:ExactlyOne>
	</wsp:Policy>
	<wsdl:types>
		<xs:schema targetNamespace="http://ceb-bc.csob.cz/CEBBCWS" elementFormDefault="qualified">
			<xs:import schemaLocation="./GetDownloadFileListRequest_v2.xsd" namespace="http://ceb-bc.csob.cz/CEBBCWS/GetDownloadFileList_v2"/>
			<xs:import schemaLocation="./GetDownloadFileListResponse_v2.xsd" namespace="http://ceb-bc.csob.cz/CEBBCWS/GetDownloadFileList_v2"/>
			<xs:import schemaLocation="./StartUploadFileListRequest_v1.xsd" namespace="http://ceb-bc.csob.cz/CEBBCWS/StartUploadFileList_v1"/>
			<xs:import schemaLocation="./StartUploadFileListResponse_v1.xsd" namespace="http://ceb-bc.csob.cz/CEBBCWS/StartUploadFileList_v1"/>
			<xs:import schemaLocation="./FinishUploadFileListRequest_v1.xsd" namespace="http://ceb-bc.csob.cz/CEBBCWS/FinishUploadFileList_v1"/>
			<xs:import schemaLocation="./FinishUploadFileListResponse_v1.xsd" namespace="http://ceb-bc.csob.cz/CEBBCWS/FinishUploadFileList_v1"/>
			<xs:import schemaLocation="./CEBBCError_v2.xsd" namespace="http://ceb-bc.csob.cz/CEBBCWS/CEBBCError_v2"/>
		</xs:schema>
	</wsdl:types>
	<wsdl:message name="GetDownloadFileListRequest_v2">
		<wsdl:part name="parameter" element="msg_getdownloadfilelist_v2:GetDownloadFileListRequest_v2"/>
	</wsdl:message>
	<wsdl:message name="GetDownloadFileListResponse_v2">
		<wsdl:part name="parameter" element="msg_getdownloadfilelist_v2:GetDownloadFileListResponse_v2"/>
	</wsdl:message>
	<wsdl:message name="StartUploadFileListRequest_v1">
		<wsdl:part name="parameter" element="msg_startuploadfilelist_v1:StartUploadFileListRequest_v1"/>
	</wsdl:message>
	<wsdl:message name="StartUploadFileListResponse_v1">
		<wsdl:part name="parameter" element="msg_startuploadfilelist_v1:StartUploadFileListResponse_v1"/>
	</wsdl:message>
	<wsdl:message name="FinishUploadFileListRequest_v1">
		<wsdl:part name="parameter" element="msg_finishuploadfilelist_v1:FinishUploadFileListRequest_v1"/>
	</wsdl:message>
	<wsdl:message name="FinishUploadFileListResponse_v1">
		<wsdl:part name="parameter" element="msg_finishuploadfilelist_v1:FinishUploadFileListResponse_v1"/>
	</wsdl:message>
	<wsdl:message name="CEBBCError_v2">
		<wsdl:part name="CEBBCError_v2" element="error_v2:CEBBCError"/>
	</wsdl:message>
	<wsdl:portType name="CEBBCWSPortType">
		<wsdl:operation name="GetDownloadFileList_v2">
			<wsdl:input message="tns:GetDownloadFileListRequest_v2"/>
			<wsdl:output message="tns:GetDownloadFileListResponse_v2"/>
			<wsdl:fault message="tns:CEBBCError_v2" name="CEBBCError_v2"/>
		</wsdl:operation>
		<wsdl:operation name="StartUploadFileList_v1">
			<wsdl:input message="tns:StartUploadFileListRequest_v1"/>
			<wsdl:output message="tns:StartUploadFileListResponse_v1"/>
			<wsdl:fault message="tns:CEBBCError_v2" name="CEBBCError_v2"/>
		</wsdl:operation>
		<wsdl:operation name="FinishUploadFileList_v1">
			<wsdl:input message="tns:FinishUploadFileListRequest_v1"/>
			<wsdl:output message="tns:FinishUploadFileListResponse_v1"/>
			<wsdl:fault message="tns:CEBBCError_v2" name="CEBBCError_v2"/>
		</wsdl:operation>
	</wsdl:portType>
	<wsdl:binding name="CEBBCWSBinding" type="tns:CEBBCWSPortType">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<wsdl:operation name="GetDownloadFileList_v2">
			<soap:operation soapAction="GetDownloadFileList_v2"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="CEBBCError_v2">
				<soap:fault use="literal" name="CEBBCError_v2"/>
			</wsdl:fault>
		</wsdl:operation>
		<wsdl:operation name="StartUploadFileList_v1">
			<soap:operation soapAction="StartUploadFileList"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="CEBBCError_v2">
				<soap:fault use="literal" name="CEBBCError_v2"/>
			</wsdl:fault>
		</wsdl:operation>
		<wsdl:operation name="FinishUploadFileList_v1">
			<soap:operation soapAction="FinishUploadFileList"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="CEBBCError_v2">
				<soap:fault use="literal" name="CEBBCError_v2"/>
			</wsdl:fault>
		</wsdl:operation>
	</wsdl:binding>
	<wsdl:service name="CEBBCWS">
		<wsdl:port name="CEBBCWSPort" binding="tns:CEBBCWSBinding">
			<soap:address location="https://${BankAdress}/cebbc/api"/>
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>



================================================
FILE: cebbc-wsdl/FinishUploadFileListRequest_v1.xsd
================================================
<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSpy v2016 rel. 2 (x64) (http://www.altova.com) by KBC Group NV (KBC Group NV) -->
<xs:schema xmlns:tns="http://ceb-bc.csob.cz/CEBBCWS/FinishUploadFileList_v1" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://ceb-bc.csob.cz/CEBBCWS/FinishUploadFileList_v1" elementFormDefault="qualified">
	<xs:element name="FinishUploadFileListRequest_v1">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="ContractNumber" type="xs:long">
					<xs:annotation>
						<xs:documentation>Identification of the Contract.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ClientAppGuid">
					<xs:annotation>
						<xs:documentation>Globally unique identification of application instance which is performing request.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:length value="36"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:element>
				<xs:element name="FileList">
					<xs:annotation>
						<xs:documentation>List of files successfully uploaded.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="FileId" type="tns:FileId_v1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="FileId_v1">
		<xs:sequence>
			<xs:element name="Filename">
				<xs:annotation>
					<xs:documentation>Filename of the file.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="250"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Hash">
				<xs:annotation>
					<xs:documentation>"MD5 hash computed from the file contents.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:length value="32"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="NewFileId">
				<xs:annotation>
					<xs:documentation>"Encoded id returned from POST upload operation.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="2048"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>



================================================
FILE: cebbc-wsdl/FinishUploadFileListResponse_v1.xsd
================================================
<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSpy v2016 rel. 2 (x64) (http://www.altova.com) by KBC Group NV (KBC Group NV) -->
<xs:schema xmlns:tns="http://ceb-bc.csob.cz/CEBBCWS/FinishUploadFileList_v1" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://ceb-bc.csob.cz/CEBBCWS/FinishUploadFileList_v1" elementFormDefault="qualified">
	<xs:element name="FinishUploadFileListResponse_v1">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="FileList">
					<xs:annotation>
						<xs:documentation>List of files with processing status.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="FileStatus" type="tns:FileStatus_v1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="TicketId" type="xs:string">
					<xs:annotation>
						<xs:documentation>Unique identification of request</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="FileStatus_v1">
		<xs:sequence>
			<xs:element name="Filename">
				<xs:annotation>
					<xs:documentation>Filename of the file. Echoed back from request to identify the record.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="50"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Hash">
				<xs:annotation>
					<xs:documentation>"MD5 hash computed from the file contents. Echoed back from request to identify the record.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:length value="32"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Status">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="I">
							<xs:annotation>
								<xs:documentation>Import started.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="R">
							<xs:annotation>
								<xs:documentation>Rejected. e.g. the file is already processed.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>



================================================
FILE: cebbc-wsdl/GetDownloadFileListRequest_v2.xsd
================================================
<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSpy v2016 rel. 2 (x64) (http://www.altova.com) by KBC Group NV (KBC Group NV) -->
<xs:schema xmlns:tns="http://ceb-bc.csob.cz/CEBBCWS/GetDownloadFileList_v2" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://ceb-bc.csob.cz/CEBBCWS/GetDownloadFileList_v2" elementFormDefault="qualified">
	<xs:element name="GetDownloadFileListRequest_v2">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="ContractNumber" type="xs:long">
					<xs:annotation>
						<xs:documentation>Identification of the Contract.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="PrevQueryTimestamp" type="xs:dateTime" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Timestamp of request returned by previous call of this service or given by client.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="Filter" type="tns:FileCriteria_v1" minOccurs="0">
					<xs:annotation>
						<xs:documentation>List of conditions constraining the list of files returned. All conditions must match.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="FileCriteria_v1">
		<xs:sequence>
			<xs:element name="FileTypes" minOccurs="0">
				<xs:annotation>
					<xs:documentation>List of types of download file.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="FileType" type="xs:token" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>Type of file (AVIZO, VYPIS, KURZY)</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
				<xs:unique name="Unique_FileType">
					<xs:selector xpath="tns:FileType"/>
					<xs:field xpath="."/>
				</xs:unique>
			</xs:element>
			<xs:element name="FileName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Filename incl. extension.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="CreatedAfter" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Only files created on or after the given date and time.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="CreatedBefore" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Only files created before the given date and time.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ClientAppGuid" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Also files created for specified client application instance (e.g. import protocols).</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:length value="36"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>



================================================
FILE: cebbc-wsdl/GetDownloadFileListRequest_v3.xsd
================================================
<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSpy v2016 rel. 2 (x64) (http://www.altova.com) by KBC Group NV (KBC Group NV) -->
<xs:schema xmlns:tns="http://ceb-bc.csob.cz/CEBBCWS/GetDownloadFileList_v3" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://ceb-bc.csob.cz/CEBBCWS/GetDownloadFileList_v3" elementFormDefault="qualified">
	<xs:element name="GetDownloadFileListRequest_v3">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="ContractNumber" type="xs:long">
					<xs:annotation>
						<xs:documentation>Identification of the Contract.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="PrevQueryTimestamp" type="xs:dateTime" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Timestamp of request returned by previous call of this service or given by client.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="Filter" type="tns:FileCriteria_v2" minOccurs="0">
					<xs:annotation>
						<xs:documentation>List of conditions constraining the list of files returned. All conditions must match.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="FileCriteria_v2">
		<xs:sequence>
			<xs:element name="FileTypes" minOccurs="0">
				<xs:annotation>
					<xs:documentation>List of types of file to return.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="FileType" type="xs:token" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>Type of file (AVIZO, VYPIS, KURZY)</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
				<xs:unique name="Unique_FileType">
					<xs:selector xpath="tns:FileType"/>
					<xs:field xpath="."/>
				</xs:unique>
			</xs:element>
			<xs:element name="FileFormats" minOccurs="0">
				<xs:annotation>
					<xs:documentation>List of formats of file to return.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="FileFormat" type="xs:token" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>Format of file (PDF, TXT, XML, BBMT940, ...)</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
				<xs:unique name="Unique_FileFormat">
					<xs:selector xpath="tns:FileFormat"/>
					<xs:field xpath="."/>
				</xs:unique>
			</xs:element>
			<xs:element name="FileName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Filename (including extension, no path) of file to return.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="CreatedAfter" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Only files created on or after the given date and time (see PrevQueryTimestamp instead).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="CreatedBefore" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Only files created before the given date and time (see PrevQueryTimestamp instead).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ClientAppGuid" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Also files created for specified client application instance (e.g. import protocols).</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:length value="36"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>



================================================
FILE: cebbc-wsdl/GetDownloadFileListResponse_v2.xsd
================================================
<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSpy v2016 rel. 2 (x64) (http://www.altova.com) by KBC Group NV (KBC Group NV) -->
<xs:schema xmlns:tns="http://ceb-bc.csob.cz/CEBBCWS/GetDownloadFileList_v2" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://ceb-bc.csob.cz/CEBBCWS/GetDownloadFileList_v2" elementFormDefault="qualified">
	<xs:element name="GetDownloadFileListResponse_v2">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="QueryTimestamp" type="xs:dateTime">
					<xs:annotation>
						<xs:documentation>Timestamp of the request as recognized by the server.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="FileList" minOccurs="0">
					<xs:annotation>
						<xs:documentation>List of files matching the given criteria.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="FileDetail" type="tns:FileDetail_v1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="TicketId" type="xs:string">
					<xs:annotation>
						<xs:documentation>Unique identification of request</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="FileDetail_v1">
		<xs:sequence>
			<xs:element name="Url" type="xs:anyURI" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Download URL of the file, when file is ready to be downloaded.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Filename">
				<xs:annotation>
					<xs:documentation>Filename of the file.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="250"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Type" type="xs:token">
				<xs:annotation>
					<xs:documentation>Type of the file (AVIZO, VYPIS, KURZY).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="CreationDateTime" type="xs:dateTime">
				<xs:annotation>
					<xs:documentation>Date and time when the file was created.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Size">
				<xs:annotation>
					<xs:documentation>Size of the file in bytes.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:long">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="9999999999"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="UploadFileHash" minOccurs="0">
				<xs:annotation>
					<xs:documentation>"Only for IMPPROT file type. MD5 hash computed from uploaded file contents to pair protocol file with the uploaded file.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:length value="32"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Status">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="R">
							<xs:annotation>
								<xs:documentation>The file is not ready for download yet, try again later.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="D">
							<xs:annotation>
								<xs:documentation>The file is ready, proceed to download</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="F">
							<xs:annotation>
								<xs:documentation>File preparation failed permanently, the file cannot be retrieved, contact support.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>



================================================
FILE: cebbc-wsdl/GetDownloadFileListResponse_v3.xsd
================================================
<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSpy v2016 rel. 2 (x64) (http://www.altova.com) by KBC Group NV (KBC Group NV) -->
<xs:schema xmlns:tns="http://ceb-bc.csob.cz/CEBBCWS/GetDownloadFileList_v3" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://ceb-bc.csob.cz/CEBBCWS/GetDownloadFileList_v3" elementFormDefault="qualified">
	<xs:element name="GetDownloadFileListResponse_v3">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="QueryTimestamp" type="xs:dateTime">
					<xs:annotation>
						<xs:documentation>Timestamp of the request as recognized by the server.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="FileList" minOccurs="0">
					<xs:annotation>
						<xs:documentation>List of files matching the given criteria.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="FileDetail" type="tns:FileDetail_v2" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="TicketId" type="xs:string">
					<xs:annotation>
						<xs:documentation>Unique identification of request</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="FileDetail_v2">
		<xs:sequence>
			<xs:element name="Url" type="xs:anyURI" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Download URL of the file, when file is ready to be downloaded.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Filename">
				<xs:annotation>
					<xs:documentation>Filename of the file.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="250"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Type" type="xs:token">
				<xs:annotation>
					<xs:documentation>Type of the file (AVIZO, VYPIS, KURZY).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Format" type="xs:token" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Format of file (PDF, TXT, XML, BBMT940, ...), only for Types AVIZO and VYPIS.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="CreationDateTime" type="xs:dateTime">
				<xs:annotation>
					<xs:documentation>Date and time when the file was created.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Size">
				<xs:annotation>
					<xs:documentation>Size of the file in bytes.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:long">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="9999999999"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="UploadFileHash" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Only for IMPPROT file type. MD5 hash computed from uploaded file contents to pair protocol file with the uploaded file.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:length value="32"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Status">
				<xs:annotation>
					<xs:documentation>Processing result for particular file.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="R">
							<xs:annotation>
								<xs:documentation>The file is not ready for download yet, try again later.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="D">
							<xs:annotation>
								<xs:documentation>The file is ready, proceed to download</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="F">
							<xs:annotation>
								<xs:documentation>File preparation failed permanently, the file cannot be retrieved, contact support.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>



================================================
FILE: cebbc-wsdl/StartUploadFileListRequest_v1.xsd
================================================
<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSpy v2016 rel. 2 (x64) (http://www.altova.com) by KBC Group NV (KBC Group NV) -->
<xs:schema xmlns:tns="http://ceb-bc.csob.cz/CEBBCWS/StartUploadFileList_v1" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://ceb-bc.csob.cz/CEBBCWS/StartUploadFileList_v1" elementFormDefault="qualified">
	<xs:element name="StartUploadFileListRequest_v1">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="ContractNumber" type="xs:long">
					<xs:annotation>
						<xs:documentation>Identification of the Contract.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ClientAppGuid">
					<xs:annotation>
						<xs:documentation>Globally unique identification of application instance which is performing request.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:length value="36"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:element>
				<xs:element name="FileList">
					<xs:annotation>
						<xs:documentation>List of files prepared for upload.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ImportFileDetail" type="tns:ImportFileDetail_v1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="ImportFileDetail_v1">
		<xs:sequence>
			<xs:element name="Filename">
				<xs:annotation>
					<xs:documentation>Filename of the file.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="250"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Hash">
				<xs:annotation>
					<xs:documentation>"MD5 hash computed from the file contents.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:length value="32"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Size">
				<xs:annotation>
					<xs:documentation>Size of the file in bytes.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:long">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="9999999999"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Format">
				<xs:annotation>
					<xs:documentation>Type of the file (ABO, TXT, CSV,...).</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="35"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Separator" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Field separator used. Left out when fixed format used.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="3"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Mode">
				<xs:annotation>
					<xs:documentation>How to process errors (IncludeIncorrect, OnlyCorrect, AllOrNothing, SignedAllOrNothing).</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="35"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>



================================================
FILE: cebbc-wsdl/StartUploadFileListResponse_v1.xsd
================================================
<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSpy v2016 rel. 2 (x64) (http://www.altova.com) by KBC Group NV (KBC Group NV) -->
<xs:schema xmlns:tns="http://ceb-bc.csob.cz/CEBBCWS/StartUploadFileList_v1" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://ceb-bc.csob.cz/CEBBCWS/StartUploadFileList_v1" elementFormDefault="qualified">
	<xs:element name="StartUploadFileListResponse_v1">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="FileList" minOccurs="0">
					<xs:annotation>
						<xs:documentation>List of files with URLs for upload.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="FileUrl" type="tns:FileUrl_v1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="TicketId" type="xs:string">
					<xs:annotation>
						<xs:documentation>Unique identification of request</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="FileUrl_v1">
		<xs:sequence>
			<xs:element name="Filename">
				<xs:annotation>
					<xs:documentation>Filename of the file. Echoed back from request to identify the record.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="50"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Hash">
				<xs:annotation>
					<xs:documentation>"MD5 hash computed from the file contents. Echoed back from request to identify the record.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:length value="32"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Status">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="U">
							<xs:annotation>
								<xs:documentation>Proceed to upload the file using URL above.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="R">
							<xs:annotation>
								<xs:documentation>Rejected. e.g. the file is already processed.</xs:documentation>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="Url" type="xs:anyURI" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Download URL of the file, when file is ready to be downloaded.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>



================================================
FILE: component_config/component_long_description.md
================================================
Download bank statements from CSOB CEB  Business Connector service. Supports [TXT format](https://www.csob.cz/portal/documents/10710/1927786/ceb-vypisy-format-txt.pdf) bank statements. These need to be enabled in the CEB UI.

**Prerequisites:**

- enable the CSOB CEB service
- get the authentication certificate
- register the certificate in the portal
- configure the CSOB service - enable bank statements via API in the `TXT (BB-TXT)` [format](https://www.csob.cz/portal/documents/10710/1927786/ceb-vypisy-format-txt.pdf).



================================================
FILE: component_config/component_short_description.md
================================================
Download bank statements from CSOB CEB Business Connector service.


================================================
FILE: component_config/configSchema.json
================================================
{
	"type": "object",
	"title": "CEB Connector configuration",
	"required": [
		"#cert",
		"contract_nr",
		"period_from",
		"relative_period"
	],
	"properties": {
		"#cert": {
			"type": "string",
			"title": "CEB certificate",
			"format": "textarea",
			"description":"Client certificate enabled in CEB portal. It has to be in pem format and contain both private and public key. Json escaped",
			"propertyOrder": 200
		},
		"contract_nr": {
			"type": "string",
			"title": "CSOB contract number",
			"propertyOrder": 300
		},
		"period_from": {
			"type": "string",
			"format": "date",
			"title": "Period from date",
			"propertyOrder": 600
		},
		"relative_period": {
			"type": "string",
			"title": "Relative period from now (utc)",
			"description": "Relative period in format: '5 hours ago', 'yesterday','3 days ago', '4 months ago', '2 years ago', 'today'. Overrides `from` parameter.",
			"propertyOrder": 710
		}
	}
}



================================================
FILE: component_config/configuration_description.md
================================================
In order to make this connector work you need to follow the instructions 
described in section `2` in the [CEB Connector implementation guide](https://www.csob.cz/portal/documents/10710/15532355/csob-business-connector-implementacni-prirucka.pdf) 

Namely you need to:

- enable the CSOB CEB service
- get the authentication certificate
- register the certificate in the portal
- configure the CSOB service - enable bank statements via API in the `TXT (BB-TXT)` [format](https://www.csob.cz/portal/documents/10710/1927786/ceb-vypisy-format-txt.pdf).



================================================
FILE: component_config/documentationUrl.md
================================================



================================================
FILE: component_config/licenseUrl.md
================================================



================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sourceCodeUrl.md
================================================



================================================
FILE: component_config/stack_parameters.json
================================================
{}


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: deployment/deploy.sh
================================================
#!/bin/sh
set -e

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi


================================================
FILE: deployment/flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 119


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi


================================================
FILE: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi


================================================
FILE: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"


================================================
FILE: src/component.py
================================================
import logging
import os
from datetime import datetime
import sys
import pytz
from kbc.env_handler import KBCEnvHandler

from ceb.client import Client
from ceb.parser import CEB_txt_parser

DEFAULT_TZ = 'Europe/Prague'

DEFAULT_CERT_FILE_NAME = 'cag.pem'
DEFAULT_FORMAT = 'TXT'
# default interval to wait between requests (s)
DEFAULT_RATELIMIT_INTERVAL = 0

PAR_CONTRACTNR = 'contract_nr'
PAR_SINCE_DATE = 'period_from'
PAR_CERT = '#cert'
PAR_TEST_SRV = 'test_service'
PAR_FORMAT = 'format'
KEY_RELATIVE_PERIOD = 'relative_period'
KEY_DEBUG = "debug"

DATE_FORMAT = '%Y-%m-%dT%H:%M:%S'

PAR_FILE_TYPES = 'filetypes'
# [VYPIS, AVIZO, KURZY, IMPPROT]

MANDATORY_PARS = [PAR_CERT, PAR_CONTRACTNR]

APP_VERSION = '0.0.7'


class Component(KBCEnvHandler):

    def __init__(self, debug=False):
        KBCEnvHandler.__init__(self, MANDATORY_PARS, log_level=logging.DEBUG if debug else logging.INFO)
        # override debug from config
        if self.cfg_params.get(KEY_DEBUG):
            debug = True
        if debug:
            logging.getLogger().setLevel(logging.DEBUG)
        logging.info('Loading configuration...')
        self._debug = debug

        try:
            self.validate_config(MANDATORY_PARS)
        except ValueError as e:
            logging.exception(e)
            exit(1)

    def run(self, debug=True):
        '''
        Main execution code
        '''
        params = self.cfg_params

        state_file = self.get_state_file()
        if state_file and state_file.get('prev_run') and params.get('since_last'):
            since_date = state_file.get('prev_run')
        elif self.cfg_params.get(KEY_RELATIVE_PERIOD):
            since_date, to_dt = self.get_date_period_converted(params.get(KEY_RELATIVE_PERIOD),
                                                               params.get(KEY_RELATIVE_PERIOD))
        elif params.get(PAR_SINCE_DATE):
            since_date = datetime.strptime(params[PAR_SINCE_DATE], '%Y-%m-%d')
        else:
            since_date = None

        cert_path = os.path.join(self.data_path, 'crt', DEFAULT_CERT_FILE_NAME)
        # write cert to file
        if not os.path.exists(os.path.dirname(cert_path)):
            os.makedirs(os.path.dirname(cert_path))
        with open(cert_path, "w+", encoding="utf-8") as cert_file:
            cert_file.write(params[PAR_CERT])

        service_url = Client.TEST_SERVICE_URL if params.get(
            PAR_TEST_SRV) else Client.PRODUCTION_SERVICE_URL

        ceb_client = Client(params.get(
            PAR_CONTRACTNR), cert_path, base_url=service_url, debug=self._debug)

        now_dt = datetime.now(pytz.timezone(DEFAULT_TZ))

        # support only vypis
        file_types = ['VYPIS']  # params.get(PAR_FILE_TYPES)

        res_files = ceb_client.download_all_files(since_date, now_dt, os.path.join(self.data_path, 'tmp'), file_types,
                                                  DEFAULT_FORMAT)

        if not res_files:
            logging.info('No files downloaded!')

        # parse results
        res_folders = {}
        for res in res_files:
            parsed_res = CEB_txt_parser.parse(
                res['file_path'], self.tables_out_path, res['type'])

            for f in parsed_res:
                res_folders[f['type']] = f['id']

        for folder in res_folders:
            self.create_sliced_tables(
                folder_name=folder, pkey=res_folders[folder], incremental=True, src_delimiter=",", src_enclosure='"')

        # delete cert
        os.remove(cert_path)
        logging.info('Extraction finished!')


"""
        Main entrypoint
"""
if __name__ == "__main__":
    if len(sys.argv) > 1:
        debug_arg = sys.argv[1]
    else:
        debug_arg = False
    try:
        comp = Component(debug_arg)
        comp.run()
    except Exception as exc:
        logging.exception(exc)
        exit(1)



================================================
FILE: src/ceb/__init__.py
================================================



================================================
FILE: src/ceb/client.py
================================================
'''
Created on 28. 9. 2018

@author: esner
'''

import logging.config
import os
import time
from os.path import dirname
from timeit import default_timer as timer

import requests
import zeep
from requests import Session
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
from zeep import helpers
from zeep.transports import Transport


class ClientException(Exception):
    '''
    Exc
    '''


class Client:
    MAX_RETRIES = 10
    _CEB_SERVICE_WSDL = os.path.join(dirname(dirname(dirname(os.path.realpath(__file__)))), 'cebbc-wsdl',
                                     'CEBBCWS.wsdl')

    PRODUCTION_SERVICE_URL = 'ceb-bc.csob.cz'
    TEST_SERVICE_URL = 'testceb-bc.csob.cz'
    # Constants, keys
    _KEY_FILENAME = 'Filename'
    _KEY_FILELIST = 'FileList'
    _KEY_STATUS = 'Status'
    _KEY_FILEDETAIL = 'FileDetail'
    _KEY_TYPE = 'Type'

    def __init__(self, contract_number, cert_path, base_url=PRODUCTION_SERVICE_URL,
                 rate_limit_interval=60, operation_timeout=3600, debug=False, max_retries=MAX_RETRIES,
                 backoff_factor=0.3):

        # final variables setup
        self._rate_limit_interval = rate_limit_interval
        self._operation_timeout = operation_timeout

        self.contract_number = contract_number
        self.cert = cert_path
        self._auth_header = {'User-Agent': 'GD wr api client'}

        self._set_logger(debug)

        session = Session()
        retry = Retry(
            total=max_retries,
            read=max_retries,
            connect=max_retries,
            backoff_factor=backoff_factor,
            status_forcelist=(500, 501, 502, 503, 504),
            method_whitelist=('GET', 'POST', 'PATCH', 'UPDATE')
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        session.cert = cert_path
        transport = Transport(session=session)

        # # create SOAP client
        self.client = zeep.Client(self._CEB_SERVICE_WSDL, transport=transport)
        # # setup service using base url
        self.client_service = self._get_service(self.client, base_url)

    def _set_logger(self, debug):
        if debug:
            log_level = "DEBUG"
        else:
            log_level = "INFO"

        logging.config.dictConfig({
            'version': 1,
            'formatters': {
                'verbose': {
                    'format': '%(name)s: %(message)s'
                }
            },
            'handlers': {
                'console': {
                    'level': log_level,
                    'class': 'logging.StreamHandler',
                    'formatter': 'verbose',
                },
            },
            'loggers': {
                'zeep.transports': {
                    'level': log_level,
                    'propagate': True,
                    'handlers': ['console'],
                },
            }
        })

    def _http_get(self, url, params=None, **kwargs):
        """
        Construct a requests GET call with args and kwargs and process the
        results.


        Args:
            url (str): requested url
            params (dict): additional url params to be passed to the underlying
                requests.get
            **kwargs: Key word arguments to pass to the get requests.get

        Returns:
            r (requests.Response): object

        Raises:
            requests.HTTPError: If the API request fails.
        """
        headers = kwargs.pop('headers', {})
        headers.update(self._auth_header)
        r = requests.get(url, params, headers=headers,
                         cert=self.cert, **kwargs)
        try:
            r.raise_for_status()
        except requests.HTTPError:
            # Handle different error codes
            raise
        else:
            return r

    def _get_service(self, client, base_url):
        service_binding = client.service._binding.name
        service_address = client.service._binding_options['address']
        return client.create_service(service_binding, service_address.replace('${BankAdress}', base_url))

    def _try_request(self, client_call, retries, **args):
        """
        Wrapper function that should be called for all client requests. Ensures the rate-limit is not exceeded.
        Handles retries on exception.

        client_call -- function to execute (Lambda)
        retries -- number of retries on failure
        """
        success = False
        attempts = 0
        # wait to make sure ratelimit is not exceeded
        while not success:
            time.sleep(self._rate_limit_interval)
            try:
                attempts += 1
                res = client_call()
                success = True
            except zeep.exceptions.Error as ex:
                if attempts <= retries:
                    success = False
                else:
                    raise ClientException(ex.message) from ex
            except requests.exceptions.SSLError as ser:
                raise ClientException("SSL connection failed, check your certificate / pkey!") from ser

        return res

    def get_download_file_list(self, prev_query_timestamp=None, created_after=None,
                               created_before=None, file_types=None):
        """
        prev_query_timestamp -- datetime specifying moment since to search
                                for new files (max 45 days back) [datetime.date]
        created_after -- just files created afer datetime.date
        file_types -- file type [VYPIS, AVIZO, KURZY, IMPPROT]

        """
        # build filetypes list
        file_type_list = None
        if file_types:
            file_type_list = []
            for type_ in file_types:
                file_type_list.append({"FileType": type_})

        filter_ = {"FileTypes": file_type_list,
                   "CreatedAfter": created_after,
                   "CreatedBefore": created_before}
        res = self._try_request(lambda: self.client_service.
                                GetDownloadFileList_v2(ContractNumber=self.contract_number,
                                                       PrevQueryTimestamp=prev_query_timestamp,
                                                       Filter=filter_), retries=self.MAX_RETRIES)

        file_list = helpers.serialize_object(res)
        return file_list

    def _all_files_ready(self, files):
        return all(file.get(self._KEY_STATUS) == "D" for file in files)

    def _get_unfinished_files_strings(self, files):
        return [str(file) for file in files if file.get(self._KEY_STATUS) != "D"]

    def _filter_file_types(self, file_list, file_types, format_):
        if not file_list or not file_list.get(self._KEY_FILEDETAIL):
            return []

        file_details = []
        details_dict = file_list.get(self._KEY_FILEDETAIL)
        file_details.extend([detail for detail in details_dict
                             if detail.get(self._KEY_TYPE) in file_types
                             and detail.get(self._KEY_FILENAME).endswith('.' + format_)])
        return file_details

    def _download_files_by_type(self, files, destination_folder):
        """
        Downloads files into new directiories in destination_folder based on their type.
        e.g. destination_folder/VYPIS/vypis.txt

        files -- OrderedDictionary object containing FileDetail object from response

        returns list of dicts {'file_path':f.name,
                                 'type' : type}

        """
        result_files = []
        for file in files:
            f = self.download_file(file.get('Url'), os.path.join(
                destination_folder, file.get(self._KEY_FILENAME).replace(":", "_")))
            result_files.extend([{'file_path': f.name,
                                  'type': file.get(self._KEY_TYPE)}])

        return result_files

    def download_all_files(self, created_date, until_date, result_folder_path, file_types, format_='TXT'):
        """
        Download all statement files into result_folder_path/TYPE/FILE_NAME.

        created_date -- files created after
        until_date -- files created before
        file_types -- ['VYPIS', 'AVIZO' ...]

        Returns list of downloaded files
        """

        start = timer()
        continue_ = True
        while continue_ and timer() - start < self._operation_timeout:
            files = self.get_download_file_list(
                created_after=created_date, created_before=until_date, file_types=file_types)

            files = self._filter_file_types(
                files.get(self._KEY_FILELIST), file_types, format_)

            files_ready = self._all_files_ready(files)
            if files_ready:
                continue_ = False

        if not files_ready:
            raise TimeoutError('Some of the files: [{}] failed to be prepared for download in time.'.format(
                ''.join(self._get_unfinished_files_strings(files))))

        result_files = self._download_files_by_type(files, result_folder_path)

        return result_files

    def download_file(self, url, destination_path):
        cleaned_path = destination_path.replace(" ", "")
        print(cleaned_path)
        r = self._http_get(url)
        os.makedirs(os.path.dirname(cleaned_path), exist_ok=True)
        with open(cleaned_path, 'wb+') as f:
            f.write(r.content)
            f.close()
        return f



================================================
FILE: src/ceb/parser.py
================================================
'''
Created on 6. 11. 2018

@author: esner
'''
import csv
import hashlib
import logging
import os

KEY_HEADER_ROW = 'HLAVA'
KEY_DATA_ROW = 'UC_POLOZKA'
KEY_NEUC_DATA_ROW = 'NEUC_POLOZKA'

KEY_VYPIS = 'VYPIS'

SEPA_STATS_PK = ['PK']
SEPA_DATA_PK = ['STATS_PK', 'DATUM_START', 'DATUM_END', 'TYP_TRANSAKCE', 'TRACE_ID']
SEPA_NEUC_DATA_PK = ['STATS_PK', 'DATUM_START', 'DATUM_END', 'UROK_SAZBA', 'DATUM_ZMENY']

SEPA_NEUC_DATA_HEADER = ['UROK_SAZBA', 'DATUM_ZMENY']
SEPA_STATS_HEADER = ['CISLO_UCTU',
                     'MENA',
                     'NAZEV_UCTU',
                     'CISLO_VYPISU',
                     'ROK_VYPISU',
                     'DATUM_START',
                     'ZUSTATEK_START',
                     'DATUM_END',
                     'ZUSTATEK_END',
                     'OBRAT_DR',
                     'OBRAT_CR',
                     'UROK_SAZBA_START',
                     'UROK_SAZBA_END',
                     'FREKVENCE',
                     'PK']

SEPA_DATA_ADD_COLS = ['STATS_PK', 'DATUM_START', 'DATUM_END']

SEPA_DATA_HEADER = [
    'TYP_TRANSAKCE',
    'TRACE_ID',
    'REF_KLIENT',
    'REF_BANKA',
    'DATUM_ODUCT',
    'CASTKA_PLATBY',
    'MENA_PLATBY',
    'KURZ',
    'ZUSTATEK',
    'POPIS_POLOZKY',
    'POZNAMKA',
    'POR_CISLO',
    'OPER_KOD',
    'DATUM_SPLAT',
    'DATUM_ZAUCT',
    'ZNAMENKO',
    'CASTKA',
    'MENA',
    'CISLO_SEKU',
    'DOM_ZAHR',
    'KOD_BANKY',
    'SS',
    'VS',
    'KS',
    'CISLO_PROTIUCTU',
    'NAZEV_PROTIUCTU',
    'SS_PLATCE',
    'VS_PLATCE',
    'ZPRAVA_PRIJEMCI1',
    'ZPRAVA_PRIJEMCI2',
    'ZPRAVA_PRIJEMCI3',
    'ZPRAVA_PRIJEMCI4',
    'ADRESA1',
    'ADRESA2',
    'ADRESA3',
    'ADRESA4',
    'ZPRAVA_PLATCI1',
    'ZPRAVA_PLATCI2',
    'ZPRAVA_PLATCI3',
    'ZPRAVA_PLATCI4',
    'KANAL']


class CEB_txt_parser:

    @staticmethod
    def parse(file_path, output_path, type):
        """

        Returns list {'file_path': data_output_file.name,
                         'id': SEPA_DATA_PK,
                         'type': 'data'}
        """
        if type == KEY_VYPIS:
            return CEB_txt_parser.parse_sepa(file_path, output_path)
        else:
            raise ValueError('Unsupported filetype {}'.format(type))

    @staticmethod
    def parse_sepa(file_path, output_path):
        """

        Returns list {'file_path': data_output_file.name,
                         'id': SEPA_DATA_PK,
                         'type': 'data'}
        """

        file_name = os.path.basename(file_path)

        stats_output_path = os.path.join(
            output_path, KEY_VYPIS.lower() + '-stats', file_name + '-stats.csv')
        if not os.path.exists(os.path.dirname(stats_output_path)):
            os.makedirs(os.path.dirname(stats_output_path))

        data_output_path = os.path.join(
            output_path, KEY_VYPIS.lower() + '-data', file_name + '-data.csv')
        if not os.path.exists(os.path.dirname(data_output_path)):
            os.makedirs(os.path.dirname(data_output_path))

        neuc_data_output_path = os.path.join(
            output_path, KEY_VYPIS.lower() + '-neuc-data', file_name + '-data.csv')
        if not os.path.exists(os.path.dirname(neuc_data_output_path)):
            os.makedirs(os.path.dirname(neuc_data_output_path))

        # write stats
        with open(file_path, encoding='windows-1250') as input_file:
            with open(stats_output_path, 'w+', newline='', encoding='utf-8') as stats_out:
                writer = csv.writer(stats_out)
                row = input_file.readline()
                line = row.split('|')
                if (line[0] != KEY_HEADER_ROW):
                    raise ValueError(
                        "First line of file [{}] does not contain header".format(file_name))
                # clean line (remove first(type) and last(extra sep) col
                del line[-1]
                del line[0]
                # write header
                writer.writerow(SEPA_STATS_HEADER)

                # set stat variables
                c_ucet = line[0]
                mena = line[1]
                nr_vypis = line[3]
                date_start = line[5]
                date_end = line[7]
                stats_pk = hashlib.md5('|'.join(
                    [c_ucet, mena, nr_vypis, date_start, date_end]).encode(encoding='utf_8')).hexdigest()
                line += [stats_pk]
                # write data
                writer.writerow(line)

            # write data
            with open(data_output_path, 'w+', newline='', encoding='utf-8') as data_output_file, open(
                    neuc_data_output_path, 'w+', newline='', encoding='utf-8') as neuc_data_output_file:
                writer = csv.writer(data_output_file)
                neuc_writer = csv.writer(neuc_data_output_file)
                line = []
                # write header
                writer.writerow(SEPA_DATA_HEADER + SEPA_DATA_ADD_COLS)
                neuc_writer.writerow(SEPA_NEUC_DATA_HEADER + SEPA_DATA_ADD_COLS)

                for row in input_file:
                    values = row.split('|')
                    if (values[0] == KEY_HEADER_ROW):
                        # skip
                        continue
                    if (values[0] == KEY_DATA_ROW):
                        # clean line (remove first(type) and last(extra sep)
                        # col
                        del values[-1]
                        del values[0]

                        # add additional values
                        if len(values) != len(SEPA_DATA_HEADER):
                            missing_cols = len(SEPA_DATA_HEADER) - len(values)
                            logging.error(
                                'Statement %s contains incorrect number of columns at record %s. %s cols are missing',
                                file_path, stats_pk, missing_cols)
                            # HOTFIX: fix values len
                            values = values + [''] * missing_cols

                        values = values + [stats_pk, date_start, date_end]
                        writer.writerow(values)
                    elif values[0] == KEY_NEUC_DATA_ROW:
                        # clean line (remove first(type) and last(extra sep)
                        # col
                        del values[-1]
                        del values[0]
                        # add additional values
                        if len(values) != len(SEPA_NEUC_DATA_HEADER):
                            missing_cols = len(SEPA_NEUC_DATA_HEADER) - len(values)
                            logging.error(
                                'Statement %s contains incorrect number of columns at record %s. %s cols are missing',
                                file_path, stats_pk, missing_cols)
                            # HOTFIX: fix values len
                            values = values + [''] * missing_cols

                        values = values + [stats_pk, date_start, date_end]
                        neuc_writer.writerow(values)
                    else:
                        raise ValueError(
                            'Unsupported type: {}'.format(values[0]))

            stats_res = {'file_path': stats_out.name,
                         'id': SEPA_STATS_PK,
                         'type': KEY_VYPIS.lower() + '-stats'}
            data_res = {'file_path': data_output_file.name,
                        'id': SEPA_DATA_PK,
                        'type': KEY_VYPIS.lower() + '-data'}
            neuc_data_res = {'file_path': neuc_data_output_file.name,
                             'id': SEPA_NEUC_DATA_PK,
                             'type': KEY_VYPIS.lower() + '-neuc-data'}

            return [stats_res, data_res, neuc_data_res]



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest

from component import Component


class TestComponent(unittest.TestCase):


    def testRunEmptyFails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: tests/ceb/__init__.py
================================================



================================================
FILE: tests/ceb/test_client.py
================================================
import os
import unittest
from os.path import dirname
from unittest.mock import patch

from requests import Session, Response

from ceb.client import Client, ClientException


class TestClient(unittest.TestCase):

    @patch.object(Session, 'post')
    @patch("ceb.client.Client._CEB_SERVICE_WSDL",
           os.path.join(dirname(dirname(dirname(os.path.realpath(__file__)))), 'cebbc-wsdl',
                        'CEBBCWS.wsdl'))
    @patch("ceb.client.Client.MAX_RETRIES", 0)
    def test_503_response_invalid_xml_raises_client_exception(self, mock_post):
        mock_resp = Response()
        # set mock response
        mock_resp.status_code = 503
        mock_resp._content = 'TextResp'
        mock_resp.headers = {'Content-Type': 'text/xml'}
        mock_post.return_value = mock_resp

        cl = Client(1234, os.path.join(dirname(os.path.realpath(__file__)),
                                       'resources', 'cert.pem'), base_url='https://example.com', debug=True,
                    max_retries=0, rate_limit_interval=0)

        with self.assertRaises(ClientException) as er:
            cl.get_download_file_list()
        print(er.exception)


if __name__ == "__main__":
    unittest.main()



================================================
FILE: tests/ceb/resources/cert.pem
================================================
-----BEGIN CERTIFICATE-----
MIIC2jCCAkMCAg38MA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG
A1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE
MRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl
YiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw
ODIyMDUyNzQxWhcNMTcwODIxMDUyNzQxWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE
CAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs
ZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC0z9FeMynsC8+u
dvX+LciZxnh5uRj4C9S6tNeeAlIGCfQYk0zUcNFCoCkTknNQd/YEiawDLNbxBqut
bMDZ1aarys1a0lYmUeVLCIqvzBkPJTSQsCopQQ9V8WuT252zzNzs68dVGNdCJd5J
NRQykpwexmnjPPv0mvj7i8XgG379TyW6P+WWV5okeUkXJ9eJS2ouDYdR2SM9BoVW
+FgxDu6BmXhozW5EfsnajFp7HL8kQClI0QOc79yuKl3492rH6bzFsFn2lfwWy9ic
7cP8EpCTeFp1tFaD+vxBhPZkeTQ1HKx6hQ5zeHIB5ySJJZ7af2W8r4eTGYzbdRW2
4DDHCPhZAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAQMv+BFvGdMVzkQaQ3/+2noVz
/uAKbzpEL8xTcxYyP3lkOeh4FoxiSWqy5pGFALdPONoDuYFpLhjJSZaEwuvjI/Tr
rGhLV1pRG9frwDFshqD2Vaj4ENBCBh6UpeBop5+285zQ4SI7q4U9oSebUDJiuOx6
+tZ9KynmrbJpTSi0+BM=
-----END CERTIFICATE-----



================================================
FILE: util-scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -t $COMP_TAG ../

echo Running component...
$DATA_PATH = Read-Host -Prompt 'Input data folder path:'
Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: util-scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
FILE: util-scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-csob-ceb" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: ${{ vars.KBC_DEVELOPERPORTAL_USERNAME }}

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

