Directory structure:
└── keboola-component-custom-python/
    ├── README.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── pyproject.toml
    ├── uv.lock
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   └── sourceCodeUrl.md
    ├── scripts/
    │   ├── build_n_test.sh
    │   ├── build_n_test_docker.py
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   ├── package_installer.py
    │   ├── source_file.py
    │   ├── source_git.py
    │   ├── subprocess_runner.py
    │   └── venv_manager.py
    ├── tests/
    │   ├── __init__.py
    │   ├── config-1_git-example-1-base.json
    │   ├── config-2_git-example-1-3.13.json
    │   ├── config-3_git-example-2-base.json
    │   ├── config-4_git-example-2-3.13.json
    │   ├── config-5_code-base-pandas.json
    │   ├── config-6_code-3.13-pandas.json
    │   ├── config-7_code-base-no-packages.json
    │   ├── config-8_code-3.13-no-packages.json
    │   └── test_component.py
    ├── .github/
    │   └── workflows/
    │       └── push.yml
    └── .ssh/
        └── known_hosts

================================================
FILE: README.md
================================================
- [Custom Python Component](#custom-python-component)
  - [Configuration](#configuration)
    - [Git configuration](#git-configuration)
    - [SSH configuration](#ssh-configuration)
    - [Example: Running code saved in custom repository + template 🧩](#example-running-code-saved-in-custom-repository--template-)
    - [Example: Listing preinstalled packages](#example-listing-preinstalled-packages)
    - [Example: Accessing custom configuration parameters](#example-accessing-custom-configuration-parameters)
  - [Development](#development)
  - [Integration](#integration)


# Custom Python Component

This component lets you run your own Python code directly within Keboola, with support for custom dependencies configured via the UI.


## Configuration

- `source`: Source of the code to run.
  - `code`: Custom code entered in a text field (default).
  - `git`: Custom repository.
- `user_properties`: Object containing custom configuration parameters. The key names prefixed with `#` will be encrypted upon saving.
- `venv`: String with one of the following values:
  - `3.12`, `3.13` (default), `3.14` – Run your code in an isolated environment containing just the packages of your choice and the respective Python version.
  - `base` – Run your code in a shared environment (contains many pre-installed packages in legacy versions)
- `git`: Object containing configuration of the git repository, which shall be cloned and run (`"source": "git"` only).
- `code`: JSON encoded Python code to run (`"source": "code"` only).
- `packages`: Array of extra packages to be installed (`"source": "code"` only). *If you're not sure whether you need to install certain package or not, you can run the command `uv pip list` via subprocess (see the example below).*


### Git configuration

The git configuration object supports the following parameters:

- `url`: Repository URL – supports both HTTPS and SSH formats.
- `branch`: Branch name to checkout – UI provides branch selection.
- `filename`: Python script filename to execute – UI lists available files.
- `auth`: Repository visibility & authentication method.
  - `none`: Public repository, no authentication (default).
  - `pat`: Private repository, Personal Access Token.
  - `ssh`: Private repository, SSH key.
- `#token`: Personal Access Token (`"auth": "pat"` only). This value will be encrypted in Keboola Storage.
- `ssh_keys`: SSH keys configuration object (`"auth": "ssh"` only).


### SSH configuration

- `keys`: Object containing both public and private keys.
  - `public`: Public key saved in your Git project. This value is not passed by the component and is saved just for future reference.
  - `#private`: Private key used for authentication. This value will be encrypted in Keboola Storage.


### Example: Running code saved in custom repository + template 🧩

As this might become a preferred way of running custom Python code in Keboola for many, we prepared a [simple example project](https://github.com/keboola/component-custom-python-example-repo-1), which help you with your first steps (and can also server you as a template for any of your future projects).


Contents of the `config.json` file:

```json
{
  "parameters": {
    "source": "git",
    "venv": "3.13",
    "git": {
      "url": "https://github.com/keboola/component-custom-python-example-repo-1.git",
      "branch": "main",
      "filename": "main.py",
      "auth": "none",
    },
    "user_properties": {
      "debug": true
    }
  }
}
```



### Example: Listing preinstalled packages

```py
import datetime
import subprocess

print("Hello world!")
print("Current date and time:", datetime.datetime.now())
print("See the full list of preinstalled packages:")

subprocess.check_call(["uv", "pip", "list"])
```

The above code in the `config.json` file format for local testing:

```json
{
  "parameters": {
    "source": "code",
    "venv": "base",
    "code": "import datetime\nimport subprocess\n\nprint(\"Hello world!\")\nprint(\"Current date and time:\", datetime.datetime.now())\nprint(\"See the full list of preinstalled packages:\")\n\nsubprocess.check_call([\"uv\", \"pip\", \"list\"])\n",
    "packages": []
  }
}
```


### Example: Accessing custom configuration parameters

*Note: The code to access user parameters is pre-populated in every new configuration.*

```py
from keboola.component import CommonInterface

ci = CommonInterface()
# access user parameters
print(ci.configuration.parameters)
```

The above code in the `config.json` file format for local testing:

```json
{
  "parameters": {
    "source": "code",
    "venv": "3.13",
    "code": "from keboola.component import CommonInterface\n\nci = CommonInterface()\n# access user parameters\nprint(ci.configuration.parameters)",
    "packages": [],
    "user_properties": {
      "debug": false
      "#secretCredentials": "theStrongestPasswordEver"
    }
  }
}
```


## Development

If needed, update the local data folder path by replacing the `CUSTOM_FOLDER` placeholder in the `docker-compose.yml` file:

```
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone the repository, initialize the workspace, and run the component using the following commands:

```
git clone git@github.com:keboola/component-custom-python.git
cd component-custom-python
docker compose build
docker compose up dev
```

To run the test suite and perform a lint check, use:

```
docker compose up test
```


## Integration

For details on deployment and integration with Keboola, refer to the
[deployment section of the developer
documentation](https://developers.keboola.com/extend/component/deployment/).



================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
services:
  # for development purposes
  dev:
    build: .
    volumes:
      - ./data:/data
    environment:
      - KBC_DATADIR=/data

  # use to run flake8 and unittests checks
  test:
    build: .
    user: 1000:1000
    volumes:
      - ./data:/data
    environment:
      - KBC_DATADIR=/data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh



================================================
FILE: Dockerfile
================================================
FROM quay.io/keboola/docker-custom-python:latest
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# RUN apt-get update && apt-get install -y build-essential

# Create user to correctly set the $HOME env variable (used by certain packages, eg. stanza, for caching data)
ARG USERNAME=keboola
RUN adduser --uid 1000 --disabled-password ${USERNAME}

# Set UV_CACHE_DIR to override XDG_CACHE_HOME from the base image
# See https://docs.astral.sh/uv/concepts/cache/#cache-directory
RUN mkdir -p /.cache/uv
RUN chown -R 1000:1000 /.cache
ENV UV_CACHE_DIR="/.cache/uv"

# Using the same path as venv defined in the base image so we can use all the preinstalled packages
ENV UV_PROJECT_ENVIRONMENT="/home/default/"

# Preinstall other Python versions for creating isolated virtual environments
USER 1000:1000
RUN uv python install 3.12
RUN uv python install 3.13
RUN uv python install 3.14

# Add Github SSH host key to known_hosts file & create .bash_aliases for convenience when debugging
USER 1000:1000
RUN mkdir /home/${USERNAME}/.ssh
COPY .ssh/known_hosts /home/${USERNAME}/.ssh/known_hosts
RUN echo "alias l='ls -Al --group-directories-first'" >> /home/${USERNAME}/.bash_aliases

# Create root's .ssh directory for storing SSH keys when running sync actions
USER root
RUN mkdir /root/.ssh
COPY .ssh/known_hosts /root/.ssh/known_hosts

# Run uv sync as uid/gid 1000 so we don't have to chown the /home/default directory with 100k files =-O
USER 1000:1000
WORKDIR /code/
COPY pyproject.toml .
COPY uv.lock .

# The --inexact flag prevents uv from uninstalling the preinstalled packages
RUN uv sync --all-groups --frozen --inexact

# Keboola running containers with "-u 1000:1000" causes permission issues when installing user defined packages
# so we need to chown the files to 1000:1000
USER root
RUN chown 1000:1000 pyproject.toml
RUN chown 1000:1000 uv.lock

COPY src/ src/
COPY tests/ tests/
COPY scripts/ scripts/
COPY flake8.cfg .
COPY deploy.sh .

RUN chown -R 1000:1000 *

CMD ["uv", "run", "python", "src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    .venv,
    __pycache__,
    tests,
    example
    venv
ignore = E203,W503
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: pyproject.toml
================================================
[project]
name = "custom-python"
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "dacite>=1.9.2",
    "keboola-component>=1.6.10",
]

[dependency-groups]
dev = [
    "flake8>=7.1.2",
    "freezegun>=1.5.1",
    "mock>=5.2.0",
]



================================================
FILE: uv.lock
================================================
version = 1
revision = 2
requires-python = ">=3.10"

[[package]]
name = "custom-python"
source = { virtual = "." }
dependencies = [
    { name = "dacite" },
    { name = "keboola-component" },
]

[package.dev-dependencies]
dev = [
    { name = "flake8" },
    { name = "freezegun" },
    { name = "mock" },
]

[package.metadata]
requires-dist = [
    { name = "dacite", specifier = ">=1.9.2" },
    { name = "keboola-component", specifier = ">=1.6.10" },
]

[package.metadata.requires-dev]
dev = [
    { name = "flake8", specifier = ">=7.1.2" },
    { name = "freezegun", specifier = ">=1.5.1" },
    { name = "mock", specifier = ">=5.2.0" },
]

[[package]]
name = "dacite"
version = "1.9.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/55/a0/7ca79796e799a3e782045d29bf052b5cde7439a2bbb17f15ff44f7aacc63/dacite-1.9.2.tar.gz", hash = "sha256:6ccc3b299727c7aa17582f0021f6ae14d5de47c7227932c47fec4cdfefd26f09", size = 22420, upload-time = "2025-02-05T09:27:29.757Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/94/35/386550fd60316d1e37eccdda609b074113298f23cef5bddb2049823fe666/dacite-1.9.2-py3-none-any.whl", hash = "sha256:053f7c3f5128ca2e9aceb66892b1a3c8936d02c686e707bee96e19deef4bc4a0", size = 16600, upload-time = "2025-02-05T09:27:24.345Z" },
]

[[package]]
name = "deprecated"
version = "1.2.18"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "wrapt" },
]
sdist = { url = "https://files.pythonhosted.org/packages/98/97/06afe62762c9a8a86af0cfb7bfdab22a43ad17138b07af5b1a58442690a2/deprecated-1.2.18.tar.gz", hash = "sha256:422b6f6d859da6f2ef57857761bfb392480502a64c3028ca9bbe86085d72115d", size = 2928744, upload-time = "2025-01-27T10:46:25.7Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6e/c6/ac0b6c1e2d138f1002bcf799d330bd6d85084fece321e662a14223794041/Deprecated-1.2.18-py2.py3-none-any.whl", hash = "sha256:bd5011788200372a32418f888e326a09ff80d0214bd961147cfed01b5c018eec", size = 9998, upload-time = "2025-01-27T10:46:09.186Z" },
]

[[package]]
name = "flake8"
version = "7.3.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "mccabe" },
    { name = "pycodestyle" },
    { name = "pyflakes" },
]
sdist = { url = "https://files.pythonhosted.org/packages/9b/af/fbfe3c4b5a657d79e5c47a2827a362f9e1b763336a52f926126aa6dc7123/flake8-7.3.0.tar.gz", hash = "sha256:fe044858146b9fc69b551a4b490d69cf960fcb78ad1edcb84e7fbb1b4a8e3872", size = 48326, upload-time = "2025-06-20T19:31:35.838Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9f/56/13ab06b4f93ca7cac71078fbe37fcea175d3216f31f85c3168a6bbd0bb9a/flake8-7.3.0-py2.py3-none-any.whl", hash = "sha256:b9696257b9ce8beb888cdbe31cf885c90d31928fe202be0889a7cdafad32f01e", size = 57922, upload-time = "2025-06-20T19:31:34.425Z" },
]

[[package]]
name = "freezegun"
version = "1.5.5"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "python-dateutil" },
]
sdist = { url = "https://files.pythonhosted.org/packages/95/dd/23e2f4e357f8fd3bdff613c1fe4466d21bfb00a6177f238079b17f7b1c84/freezegun-1.5.5.tar.gz", hash = "sha256:ac7742a6cc6c25a2c35e9292dfd554b897b517d2dec26891a2e8debf205cb94a", size = 35914, upload-time = "2025-08-09T10:39:08.338Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/5e/2e/b41d8a1a917d6581fc27a35d05561037b048e47df50f27f8ac9c7e27a710/freezegun-1.5.5-py3-none-any.whl", hash = "sha256:cd557f4a75cf074e84bc374249b9dd491eaeacd61376b9eb3c423282211619d2", size = 19266, upload-time = "2025-08-09T10:39:06.636Z" },
]

[[package]]
name = "keboola-component"
version = "1.6.12"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "deprecated" },
    { name = "pygelf" },
    { name = "pytz" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a1/f0/6328f9e401c81a8a142fd8268dccf1c6e7ca9706d81549d865033c55f7e1/keboola.component-1.6.12.tar.gz", hash = "sha256:2856edf352992fde2612b51f6024a94ccec6391636f4fe13e38a784f21db9c34", size = 59576, upload-time = "2025-08-25T10:30:44.95Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d5/75/81cb26facfe282a9239454369154be6713b647de132ee405869e1dad44d5/keboola.component-1.6.12-py3-none-any.whl", hash = "sha256:0c9c01e3b687a204b39318068f0a82f4c8dd08d8a8f3ce4b6e0da8a64ebe7d82", size = 44140, upload-time = "2025-08-25T10:30:43.881Z" },
]

[[package]]
name = "mccabe"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e7/ff/0ffefdcac38932a54d2b5eed4e0ba8a408f215002cd178ad1df0f2806ff8/mccabe-0.7.0.tar.gz", hash = "sha256:348e0240c33b60bbdf4e523192ef919f28cb2c3d7d5c7794f74009290f236325", size = 9658, upload-time = "2022-01-24T01:14:51.113Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/27/1a/1f68f9ba0c207934b35b86a8ca3aad8395a3d6dd7921c0686e23853ff5a9/mccabe-0.7.0-py2.py3-none-any.whl", hash = "sha256:6c2d30ab6be0e4a46919781807b4f0d834ebdd6c6e3dca0bda5a15f863427b6e", size = 7350, upload-time = "2022-01-24T01:14:49.62Z" },
]

[[package]]
name = "mock"
version = "5.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/07/8c/14c2ae915e5f9dca5a22edd68b35be94400719ccfa068a03e0fb63d0f6f6/mock-5.2.0.tar.gz", hash = "sha256:4e460e818629b4b173f32d08bf30d3af8123afbb8e04bb5707a1fd4799e503f0", size = 92796, upload-time = "2025-03-03T12:31:42.911Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/bd/d9/617e6af809bf3a1d468e0d58c3997b1dc219a9a9202e650d30c2fc85d481/mock-5.2.0-py3-none-any.whl", hash = "sha256:7ba87f72ca0e915175596069dbbcc7c75af7b5e9b9bc107ad6349ede0819982f", size = 31617, upload-time = "2025-03-03T12:31:41.518Z" },
]

[[package]]
name = "pycodestyle"
version = "2.14.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/11/e0/abfd2a0d2efe47670df87f3e3a0e2edda42f055053c85361f19c0e2c1ca8/pycodestyle-2.14.0.tar.gz", hash = "sha256:c4b5b517d278089ff9d0abdec919cd97262a3367449ea1c8b49b91529167b783", size = 39472, upload-time = "2025-06-20T18:49:48.75Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d7/27/a58ddaf8c588a3ef080db9d0b7e0b97215cee3a45df74f3a94dbbf5c893a/pycodestyle-2.14.0-py2.py3-none-any.whl", hash = "sha256:dd6bf7cb4ee77f8e016f9c8e74a35ddd9f67e1d5fd4184d86c3b98e07099f42d", size = 31594, upload-time = "2025-06-20T18:49:47.491Z" },
]

[[package]]
name = "pyflakes"
version = "3.4.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/45/dc/fd034dc20b4b264b3d015808458391acbf9df40b1e54750ef175d39180b1/pyflakes-3.4.0.tar.gz", hash = "sha256:b24f96fafb7d2ab0ec5075b7350b3d2d2218eab42003821c06344973d3ea2f58", size = 64669, upload-time = "2025-06-20T18:45:27.834Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c2/2f/81d580a0fb83baeb066698975cb14a618bdbed7720678566f1b046a95fe8/pyflakes-3.4.0-py2.py3-none-any.whl", hash = "sha256:f742a7dbd0d9cb9ea41e9a24a918996e8170c799fa528688d40dd582c8265f4f", size = 63551, upload-time = "2025-06-20T18:45:26.937Z" },
]

[[package]]
name = "pygelf"
version = "0.4.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/49/91/ac1605bb40092ae41fbb833ee55447f72e19ce5459efa6bd3beecc67e971/pygelf-0.4.3.tar.gz", hash = "sha256:8ed972563be3c8f168483f01dbf522b6bc697959c97a3f4881324b3f79638911", size = 11017, upload-time = "2025-06-14T19:21:19.832Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d4/ee/ebac3de919431912e0be380fafd01059a091a489f6b5d7896c2a04548895/pygelf-0.4.3-py3-none-any.whl", hash = "sha256:0876c99a77f9f021834982c9808205b3239fabf5886788d701f31b495b65c8ae", size = 8750, upload-time = "2025-06-14T19:21:16.953Z" },
]

[[package]]
name = "python-dateutil"
version = "2.9.0.post0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "six" },
]
sdist = { url = "https://files.pythonhosted.org/packages/66/c0/0c8b6ad9f17a802ee498c46e004a0eb49bc148f2fd230864601a86dcf6db/python-dateutil-2.9.0.post0.tar.gz", hash = "sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3", size = 342432, upload-time = "2024-03-01T18:36:20.211Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/57/56b9bcc3c9c6a792fcbaf139543cee77261f3651ca9da0c93f5c1221264b/python_dateutil-2.9.0.post0-py2.py3-none-any.whl", hash = "sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427", size = 229892, upload-time = "2024-03-01T18:36:18.57Z" },
]

[[package]]
name = "pytz"
version = "2025.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f8/bf/abbd3cdfb8fbc7fb3d4d38d320f2441b1e7cbe29be4f23797b4a2b5d8aac/pytz-2025.2.tar.gz", hash = "sha256:360b9e3dbb49a209c21ad61809c7fb453643e048b38924c765813546746e81c3", size = 320884, upload-time = "2025-03-25T02:25:00.538Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/81/c4/34e93fe5f5429d7570ec1fa436f1986fb1f00c3e0f43a589fe2bbcd22c3f/pytz-2025.2-py2.py3-none-any.whl", hash = "sha256:5ddf76296dd8c44c26eb8f4b6f35488f3ccbf6fbbd7adee0b7262d43f0ec2f00", size = 509225, upload-time = "2025-03-25T02:24:58.468Z" },
]

[[package]]
name = "six"
version = "1.17.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/94/e7/b2c673351809dca68a0e064b6af791aa332cf192da575fd474ed7d6f16a2/six-1.17.0.tar.gz", hash = "sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81", size = 34031, upload-time = "2024-12-04T17:35:28.174Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b7/ce/149a00dd41f10bc29e5921b496af8b574d8413afcd5e30dfa0ed46c2cc5e/six-1.17.0-py2.py3-none-any.whl", hash = "sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274", size = 11050, upload-time = "2024-12-04T17:35:26.475Z" },
]

[[package]]
name = "wrapt"
version = "1.17.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/95/8f/aeb76c5b46e273670962298c23e7ddde79916cb74db802131d49a85e4b7d/wrapt-1.17.3.tar.gz", hash = "sha256:f66eb08feaa410fe4eebd17f2a2c8e2e46d3476e9f8c783daa8e09e0faa666d0", size = 55547, upload-time = "2025-08-12T05:53:21.714Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/3f/23/bb82321b86411eb51e5a5db3fb8f8032fd30bd7c2d74bfe936136b2fa1d6/wrapt-1.17.3-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:88bbae4d40d5a46142e70d58bf664a89b6b4befaea7b2ecc14e03cedb8e06c04", size = 53482, upload-time = "2025-08-12T05:51:44.467Z" },
    { url = "https://files.pythonhosted.org/packages/45/69/f3c47642b79485a30a59c63f6d739ed779fb4cc8323205d047d741d55220/wrapt-1.17.3-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:e6b13af258d6a9ad602d57d889f83b9d5543acd471eee12eb51f5b01f8eb1bc2", size = 38676, upload-time = "2025-08-12T05:51:32.636Z" },
    { url = "https://files.pythonhosted.org/packages/d1/71/e7e7f5670c1eafd9e990438e69d8fb46fa91a50785332e06b560c869454f/wrapt-1.17.3-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:fd341868a4b6714a5962c1af0bd44f7c404ef78720c7de4892901e540417111c", size = 38957, upload-time = "2025-08-12T05:51:54.655Z" },
    { url = "https://files.pythonhosted.org/packages/de/17/9f8f86755c191d6779d7ddead1a53c7a8aa18bccb7cea8e7e72dfa6a8a09/wrapt-1.17.3-cp310-cp310-manylinux1_x86_64.manylinux_2_28_x86_64.manylinux_2_5_x86_64.whl", hash = "sha256:f9b2601381be482f70e5d1051a5965c25fb3625455a2bf520b5a077b22afb775", size = 81975, upload-time = "2025-08-12T05:52:30.109Z" },
    { url = "https://files.pythonhosted.org/packages/f2/15/dd576273491f9f43dd09fce517f6c2ce6eb4fe21681726068db0d0467096/wrapt-1.17.3-cp310-cp310-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:343e44b2a8e60e06a7e0d29c1671a0d9951f59174f3709962b5143f60a2a98bd", size = 83149, upload-time = "2025-08-12T05:52:09.316Z" },
    { url = "https://files.pythonhosted.org/packages/0c/c4/5eb4ce0d4814521fee7aa806264bf7a114e748ad05110441cd5b8a5c744b/wrapt-1.17.3-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:33486899acd2d7d3066156b03465b949da3fd41a5da6e394ec49d271baefcf05", size = 82209, upload-time = "2025-08-12T05:52:10.331Z" },
    { url = "https://files.pythonhosted.org/packages/31/4b/819e9e0eb5c8dc86f60dfc42aa4e2c0d6c3db8732bce93cc752e604bb5f5/wrapt-1.17.3-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:e6f40a8aa5a92f150bdb3e1c44b7e98fb7113955b2e5394122fa5532fec4b418", size = 81551, upload-time = "2025-08-12T05:52:31.137Z" },
    { url = "https://files.pythonhosted.org/packages/f8/83/ed6baf89ba3a56694700139698cf703aac9f0f9eb03dab92f57551bd5385/wrapt-1.17.3-cp310-cp310-win32.whl", hash = "sha256:a36692b8491d30a8c75f1dfee65bef119d6f39ea84ee04d9f9311f83c5ad9390", size = 36464, upload-time = "2025-08-12T05:53:01.204Z" },
    { url = "https://files.pythonhosted.org/packages/2f/90/ee61d36862340ad7e9d15a02529df6b948676b9a5829fd5e16640156627d/wrapt-1.17.3-cp310-cp310-win_amd64.whl", hash = "sha256:afd964fd43b10c12213574db492cb8f73b2f0826c8df07a68288f8f19af2ebe6", size = 38748, upload-time = "2025-08-12T05:53:00.209Z" },
    { url = "https://files.pythonhosted.org/packages/bd/c3/cefe0bd330d389c9983ced15d326f45373f4073c9f4a8c2f99b50bfea329/wrapt-1.17.3-cp310-cp310-win_arm64.whl", hash = "sha256:af338aa93554be859173c39c85243970dc6a289fa907402289eeae7543e1ae18", size = 36810, upload-time = "2025-08-12T05:52:51.906Z" },
    { url = "https://files.pythonhosted.org/packages/52/db/00e2a219213856074a213503fdac0511203dceefff26e1daa15250cc01a0/wrapt-1.17.3-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:273a736c4645e63ac582c60a56b0acb529ef07f78e08dc6bfadf6a46b19c0da7", size = 53482, upload-time = "2025-08-12T05:51:45.79Z" },
    { url = "https://files.pythonhosted.org/packages/5e/30/ca3c4a5eba478408572096fe9ce36e6e915994dd26a4e9e98b4f729c06d9/wrapt-1.17.3-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:5531d911795e3f935a9c23eb1c8c03c211661a5060aab167065896bbf62a5f85", size = 38674, upload-time = "2025-08-12T05:51:34.629Z" },
    { url = "https://files.pythonhosted.org/packages/31/25/3e8cc2c46b5329c5957cec959cb76a10718e1a513309c31399a4dad07eb3/wrapt-1.17.3-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:0610b46293c59a3adbae3dee552b648b984176f8562ee0dba099a56cfbe4df1f", size = 38959, upload-time = "2025-08-12T05:51:56.074Z" },
    { url = "https://files.pythonhosted.org/packages/5d/8f/a32a99fc03e4b37e31b57cb9cefc65050ea08147a8ce12f288616b05ef54/wrapt-1.17.3-cp311-cp311-manylinux1_x86_64.manylinux_2_28_x86_64.manylinux_2_5_x86_64.whl", hash = "sha256:b32888aad8b6e68f83a8fdccbf3165f5469702a7544472bdf41f582970ed3311", size = 82376, upload-time = "2025-08-12T05:52:32.134Z" },
    { url = "https://files.pythonhosted.org/packages/31/57/4930cb8d9d70d59c27ee1332a318c20291749b4fba31f113c2f8ac49a72e/wrapt-1.17.3-cp311-cp311-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:8cccf4f81371f257440c88faed6b74f1053eef90807b77e31ca057b2db74edb1", size = 83604, upload-time = "2025-08-12T05:52:11.663Z" },
    { url = "https://files.pythonhosted.org/packages/a8/f3/1afd48de81d63dd66e01b263a6fbb86e1b5053b419b9b33d13e1f6d0f7d0/wrapt-1.17.3-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:d8a210b158a34164de8bb68b0e7780041a903d7b00c87e906fb69928bf7890d5", size = 82782, upload-time = "2025-08-12T05:52:12.626Z" },
    { url = "https://files.pythonhosted.org/packages/1e/d7/4ad5327612173b144998232f98a85bb24b60c352afb73bc48e3e0d2bdc4e/wrapt-1.17.3-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:79573c24a46ce11aab457b472efd8d125e5a51da2d1d24387666cd85f54c05b2", size = 82076, upload-time = "2025-08-12T05:52:33.168Z" },
    { url = "https://files.pythonhosted.org/packages/bb/59/e0adfc831674a65694f18ea6dc821f9fcb9ec82c2ce7e3d73a88ba2e8718/wrapt-1.17.3-cp311-cp311-win32.whl", hash = "sha256:c31eebe420a9a5d2887b13000b043ff6ca27c452a9a22fa71f35f118e8d4bf89", size = 36457, upload-time = "2025-08-12T05:53:03.936Z" },
    { url = "https://files.pythonhosted.org/packages/83/88/16b7231ba49861b6f75fc309b11012ede4d6b0a9c90969d9e0db8d991aeb/wrapt-1.17.3-cp311-cp311-win_amd64.whl", hash = "sha256:0b1831115c97f0663cb77aa27d381237e73ad4f721391a9bfb2fe8bc25fa6e77", size = 38745, upload-time = "2025-08-12T05:53:02.885Z" },
    { url = "https://files.pythonhosted.org/packages/9a/1e/c4d4f3398ec073012c51d1c8d87f715f56765444e1a4b11e5180577b7e6e/wrapt-1.17.3-cp311-cp311-win_arm64.whl", hash = "sha256:5a7b3c1ee8265eb4c8f1b7d29943f195c00673f5ab60c192eba2d4a7eae5f46a", size = 36806, upload-time = "2025-08-12T05:52:53.368Z" },
    { url = "https://files.pythonhosted.org/packages/9f/41/cad1aba93e752f1f9268c77270da3c469883d56e2798e7df6240dcb2287b/wrapt-1.17.3-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:ab232e7fdb44cdfbf55fc3afa31bcdb0d8980b9b95c38b6405df2acb672af0e0", size = 53998, upload-time = "2025-08-12T05:51:47.138Z" },
    { url = "https://files.pythonhosted.org/packages/60/f8/096a7cc13097a1869fe44efe68dace40d2a16ecb853141394047f0780b96/wrapt-1.17.3-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:9baa544e6acc91130e926e8c802a17f3b16fbea0fd441b5a60f5cf2cc5c3deba", size = 39020, upload-time = "2025-08-12T05:51:35.906Z" },
    { url = "https://files.pythonhosted.org/packages/33/df/bdf864b8997aab4febb96a9ae5c124f700a5abd9b5e13d2a3214ec4be705/wrapt-1.17.3-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:6b538e31eca1a7ea4605e44f81a48aa24c4632a277431a6ed3f328835901f4fd", size = 39098, upload-time = "2025-08-12T05:51:57.474Z" },
    { url = "https://files.pythonhosted.org/packages/9f/81/5d931d78d0eb732b95dc3ddaeeb71c8bb572fb01356e9133916cd729ecdd/wrapt-1.17.3-cp312-cp312-manylinux1_x86_64.manylinux_2_28_x86_64.manylinux_2_5_x86_64.whl", hash = "sha256:042ec3bb8f319c147b1301f2393bc19dba6e176b7da446853406d041c36c7828", size = 88036, upload-time = "2025-08-12T05:52:34.784Z" },
    { url = "https://files.pythonhosted.org/packages/ca/38/2e1785df03b3d72d34fc6252d91d9d12dc27a5c89caef3335a1bbb8908ca/wrapt-1.17.3-cp312-cp312-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:3af60380ba0b7b5aeb329bc4e402acd25bd877e98b3727b0135cb5c2efdaefe9", size = 88156, upload-time = "2025-08-12T05:52:13.599Z" },
    { url = "https://files.pythonhosted.org/packages/b3/8b/48cdb60fe0603e34e05cffda0b2a4adab81fd43718e11111a4b0100fd7c1/wrapt-1.17.3-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:0b02e424deef65c9f7326d8c19220a2c9040c51dc165cddb732f16198c168396", size = 87102, upload-time = "2025-08-12T05:52:14.56Z" },
    { url = "https://files.pythonhosted.org/packages/3c/51/d81abca783b58f40a154f1b2c56db1d2d9e0d04fa2d4224e357529f57a57/wrapt-1.17.3-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:74afa28374a3c3a11b3b5e5fca0ae03bef8450d6aa3ab3a1e2c30e3a75d023dc", size = 87732, upload-time = "2025-08-12T05:52:36.165Z" },
    { url = "https://files.pythonhosted.org/packages/9e/b1/43b286ca1392a006d5336412d41663eeef1ad57485f3e52c767376ba7e5a/wrapt-1.17.3-cp312-cp312-win32.whl", hash = "sha256:4da9f45279fff3543c371d5ababc57a0384f70be244de7759c85a7f989cb4ebe", size = 36705, upload-time = "2025-08-12T05:53:07.123Z" },
    { url = "https://files.pythonhosted.org/packages/28/de/49493f962bd3c586ab4b88066e967aa2e0703d6ef2c43aa28cb83bf7b507/wrapt-1.17.3-cp312-cp312-win_amd64.whl", hash = "sha256:e71d5c6ebac14875668a1e90baf2ea0ef5b7ac7918355850c0908ae82bcb297c", size = 38877, upload-time = "2025-08-12T05:53:05.436Z" },
    { url = "https://files.pythonhosted.org/packages/f1/48/0f7102fe9cb1e8a5a77f80d4f0956d62d97034bbe88d33e94699f99d181d/wrapt-1.17.3-cp312-cp312-win_arm64.whl", hash = "sha256:604d076c55e2fdd4c1c03d06dc1a31b95130010517b5019db15365ec4a405fc6", size = 36885, upload-time = "2025-08-12T05:52:54.367Z" },
    { url = "https://files.pythonhosted.org/packages/fc/f6/759ece88472157acb55fc195e5b116e06730f1b651b5b314c66291729193/wrapt-1.17.3-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:a47681378a0439215912ef542c45a783484d4dd82bac412b71e59cf9c0e1cea0", size = 54003, upload-time = "2025-08-12T05:51:48.627Z" },
    { url = "https://files.pythonhosted.org/packages/4f/a9/49940b9dc6d47027dc850c116d79b4155f15c08547d04db0f07121499347/wrapt-1.17.3-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:54a30837587c6ee3cd1a4d1c2ec5d24e77984d44e2f34547e2323ddb4e22eb77", size = 39025, upload-time = "2025-08-12T05:51:37.156Z" },
    { url = "https://files.pythonhosted.org/packages/45/35/6a08de0f2c96dcdd7fe464d7420ddb9a7655a6561150e5fc4da9356aeaab/wrapt-1.17.3-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:16ecf15d6af39246fe33e507105d67e4b81d8f8d2c6598ff7e3ca1b8a37213f7", size = 39108, upload-time = "2025-08-12T05:51:58.425Z" },
    { url = "https://files.pythonhosted.org/packages/0c/37/6faf15cfa41bf1f3dba80cd3f5ccc6622dfccb660ab26ed79f0178c7497f/wrapt-1.17.3-cp313-cp313-manylinux1_x86_64.manylinux_2_28_x86_64.manylinux_2_5_x86_64.whl", hash = "sha256:6fd1ad24dc235e4ab88cda009e19bf347aabb975e44fd5c2fb22a3f6e4141277", size = 88072, upload-time = "2025-08-12T05:52:37.53Z" },
    { url = "https://files.pythonhosted.org/packages/78/f2/efe19ada4a38e4e15b6dff39c3e3f3f73f5decf901f66e6f72fe79623a06/wrapt-1.17.3-cp313-cp313-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:0ed61b7c2d49cee3c027372df5809a59d60cf1b6c2f81ee980a091f3afed6a2d", size = 88214, upload-time = "2025-08-12T05:52:15.886Z" },
    { url = "https://files.pythonhosted.org/packages/40/90/ca86701e9de1622b16e09689fc24b76f69b06bb0150990f6f4e8b0eeb576/wrapt-1.17.3-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:423ed5420ad5f5529db9ce89eac09c8a2f97da18eb1c870237e84c5a5c2d60aa", size = 87105, upload-time = "2025-08-12T05:52:17.914Z" },
    { url = "https://files.pythonhosted.org/packages/fd/e0/d10bd257c9a3e15cbf5523025252cc14d77468e8ed644aafb2d6f54cb95d/wrapt-1.17.3-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:e01375f275f010fcbf7f643b4279896d04e571889b8a5b3f848423d91bf07050", size = 87766, upload-time = "2025-08-12T05:52:39.243Z" },
    { url = "https://files.pythonhosted.org/packages/e8/cf/7d848740203c7b4b27eb55dbfede11aca974a51c3d894f6cc4b865f42f58/wrapt-1.17.3-cp313-cp313-win32.whl", hash = "sha256:53e5e39ff71b3fc484df8a522c933ea2b7cdd0d5d15ae82e5b23fde87d44cbd8", size = 36711, upload-time = "2025-08-12T05:53:10.074Z" },
    { url = "https://files.pythonhosted.org/packages/57/54/35a84d0a4d23ea675994104e667ceff49227ce473ba6a59ba2c84f250b74/wrapt-1.17.3-cp313-cp313-win_amd64.whl", hash = "sha256:1f0b2f40cf341ee8cc1a97d51ff50dddb9fcc73241b9143ec74b30fc4f44f6cb", size = 38885, upload-time = "2025-08-12T05:53:08.695Z" },
    { url = "https://files.pythonhosted.org/packages/01/77/66e54407c59d7b02a3c4e0af3783168fff8e5d61def52cda8728439d86bc/wrapt-1.17.3-cp313-cp313-win_arm64.whl", hash = "sha256:7425ac3c54430f5fc5e7b6f41d41e704db073309acfc09305816bc6a0b26bb16", size = 36896, upload-time = "2025-08-12T05:52:55.34Z" },
    { url = "https://files.pythonhosted.org/packages/02/a2/cd864b2a14f20d14f4c496fab97802001560f9f41554eef6df201cd7f76c/wrapt-1.17.3-cp314-cp314-macosx_10_13_universal2.whl", hash = "sha256:cf30f6e3c077c8e6a9a7809c94551203c8843e74ba0c960f4a98cd80d4665d39", size = 54132, upload-time = "2025-08-12T05:51:49.864Z" },
    { url = "https://files.pythonhosted.org/packages/d5/46/d011725b0c89e853dc44cceb738a307cde5d240d023d6d40a82d1b4e1182/wrapt-1.17.3-cp314-cp314-macosx_10_13_x86_64.whl", hash = "sha256:e228514a06843cae89621384cfe3a80418f3c04aadf8a3b14e46a7be704e4235", size = 39091, upload-time = "2025-08-12T05:51:38.935Z" },
    { url = "https://files.pythonhosted.org/packages/2e/9e/3ad852d77c35aae7ddebdbc3b6d35ec8013af7d7dddad0ad911f3d891dae/wrapt-1.17.3-cp314-cp314-macosx_11_0_arm64.whl", hash = "sha256:5ea5eb3c0c071862997d6f3e02af1d055f381b1d25b286b9d6644b79db77657c", size = 39172, upload-time = "2025-08-12T05:51:59.365Z" },
    { url = "https://files.pythonhosted.org/packages/c3/f7/c983d2762bcce2326c317c26a6a1e7016f7eb039c27cdf5c4e30f4160f31/wrapt-1.17.3-cp314-cp314-manylinux1_x86_64.manylinux_2_28_x86_64.manylinux_2_5_x86_64.whl", hash = "sha256:281262213373b6d5e4bb4353bc36d1ba4084e6d6b5d242863721ef2bf2c2930b", size = 87163, upload-time = "2025-08-12T05:52:40.965Z" },
    { url = "https://files.pythonhosted.org/packages/e4/0f/f673f75d489c7f22d17fe0193e84b41540d962f75fce579cf6873167c29b/wrapt-1.17.3-cp314-cp314-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:dc4a8d2b25efb6681ecacad42fca8859f88092d8732b170de6a5dddd80a1c8fa", size = 87963, upload-time = "2025-08-12T05:52:20.326Z" },
    { url = "https://files.pythonhosted.org/packages/df/61/515ad6caca68995da2fac7a6af97faab8f78ebe3bf4f761e1b77efbc47b5/wrapt-1.17.3-cp314-cp314-musllinux_1_2_aarch64.whl", hash = "sha256:373342dd05b1d07d752cecbec0c41817231f29f3a89aa8b8843f7b95992ed0c7", size = 86945, upload-time = "2025-08-12T05:52:21.581Z" },
    { url = "https://files.pythonhosted.org/packages/d3/bd/4e70162ce398462a467bc09e768bee112f1412e563620adc353de9055d33/wrapt-1.17.3-cp314-cp314-musllinux_1_2_x86_64.whl", hash = "sha256:d40770d7c0fd5cbed9d84b2c3f2e156431a12c9a37dc6284060fb4bec0b7ffd4", size = 86857, upload-time = "2025-08-12T05:52:43.043Z" },
    { url = "https://files.pythonhosted.org/packages/2b/b8/da8560695e9284810b8d3df8a19396a6e40e7518059584a1a394a2b35e0a/wrapt-1.17.3-cp314-cp314-win32.whl", hash = "sha256:fbd3c8319de8e1dc79d346929cd71d523622da527cca14e0c1d257e31c2b8b10", size = 37178, upload-time = "2025-08-12T05:53:12.605Z" },
    { url = "https://files.pythonhosted.org/packages/db/c8/b71eeb192c440d67a5a0449aaee2310a1a1e8eca41676046f99ed2487e9f/wrapt-1.17.3-cp314-cp314-win_amd64.whl", hash = "sha256:e1a4120ae5705f673727d3253de3ed0e016f7cd78dc463db1b31e2463e1f3cf6", size = 39310, upload-time = "2025-08-12T05:53:11.106Z" },
    { url = "https://files.pythonhosted.org/packages/45/20/2cda20fd4865fa40f86f6c46ed37a2a8356a7a2fde0773269311f2af56c7/wrapt-1.17.3-cp314-cp314-win_arm64.whl", hash = "sha256:507553480670cab08a800b9463bdb881b2edeed77dc677b0a5915e6106e91a58", size = 37266, upload-time = "2025-08-12T05:52:56.531Z" },
    { url = "https://files.pythonhosted.org/packages/77/ed/dd5cf21aec36c80443c6f900449260b80e2a65cf963668eaef3b9accce36/wrapt-1.17.3-cp314-cp314t-macosx_10_13_universal2.whl", hash = "sha256:ed7c635ae45cfbc1a7371f708727bf74690daedc49b4dba310590ca0bd28aa8a", size = 56544, upload-time = "2025-08-12T05:51:51.109Z" },
    { url = "https://files.pythonhosted.org/packages/8d/96/450c651cc753877ad100c7949ab4d2e2ecc4d97157e00fa8f45df682456a/wrapt-1.17.3-cp314-cp314t-macosx_10_13_x86_64.whl", hash = "sha256:249f88ed15503f6492a71f01442abddd73856a0032ae860de6d75ca62eed8067", size = 40283, upload-time = "2025-08-12T05:51:39.912Z" },
    { url = "https://files.pythonhosted.org/packages/d1/86/2fcad95994d9b572db57632acb6f900695a648c3e063f2cd344b3f5c5a37/wrapt-1.17.3-cp314-cp314t-macosx_11_0_arm64.whl", hash = "sha256:5a03a38adec8066d5a37bea22f2ba6bbf39fcdefbe2d91419ab864c3fb515454", size = 40366, upload-time = "2025-08-12T05:52:00.693Z" },
    { url = "https://files.pythonhosted.org/packages/64/0e/f4472f2fdde2d4617975144311f8800ef73677a159be7fe61fa50997d6c0/wrapt-1.17.3-cp314-cp314t-manylinux1_x86_64.manylinux_2_28_x86_64.manylinux_2_5_x86_64.whl", hash = "sha256:5d4478d72eb61c36e5b446e375bbc49ed002430d17cdec3cecb36993398e1a9e", size = 108571, upload-time = "2025-08-12T05:52:44.521Z" },
    { url = "https://files.pythonhosted.org/packages/cc/01/9b85a99996b0a97c8a17484684f206cbb6ba73c1ce6890ac668bcf3838fb/wrapt-1.17.3-cp314-cp314t-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:223db574bb38637e8230eb14b185565023ab624474df94d2af18f1cdb625216f", size = 113094, upload-time = "2025-08-12T05:52:22.618Z" },
    { url = "https://files.pythonhosted.org/packages/25/02/78926c1efddcc7b3aa0bc3d6b33a822f7d898059f7cd9ace8c8318e559ef/wrapt-1.17.3-cp314-cp314t-musllinux_1_2_aarch64.whl", hash = "sha256:e405adefb53a435f01efa7ccdec012c016b5a1d3f35459990afc39b6be4d5056", size = 110659, upload-time = "2025-08-12T05:52:24.057Z" },
    { url = "https://files.pythonhosted.org/packages/dc/ee/c414501ad518ac3e6fe184753632fe5e5ecacdcf0effc23f31c1e4f7bfcf/wrapt-1.17.3-cp314-cp314t-musllinux_1_2_x86_64.whl", hash = "sha256:88547535b787a6c9ce4086917b6e1d291aa8ed914fdd3a838b3539dc95c12804", size = 106946, upload-time = "2025-08-12T05:52:45.976Z" },
    { url = "https://files.pythonhosted.org/packages/be/44/a1bd64b723d13bb151d6cc91b986146a1952385e0392a78567e12149c7b4/wrapt-1.17.3-cp314-cp314t-win32.whl", hash = "sha256:41b1d2bc74c2cac6f9074df52b2efbef2b30bdfe5f40cb78f8ca22963bc62977", size = 38717, upload-time = "2025-08-12T05:53:15.214Z" },
    { url = "https://files.pythonhosted.org/packages/79/d9/7cfd5a312760ac4dd8bf0184a6ee9e43c33e47f3dadc303032ce012b8fa3/wrapt-1.17.3-cp314-cp314t-win_amd64.whl", hash = "sha256:73d496de46cd2cdbdbcce4ae4bcdb4afb6a11234a1df9c085249d55166b95116", size = 41334, upload-time = "2025-08-12T05:53:14.178Z" },
    { url = "https://files.pythonhosted.org/packages/46/78/10ad9781128ed2f99dbc474f43283b13fea8ba58723e98844367531c18e9/wrapt-1.17.3-cp314-cp314t-win_arm64.whl", hash = "sha256:f38e60678850c42461d4202739f9bf1e3a737c7ad283638251e79cc49effb6b6", size = 38471, upload-time = "2025-08-12T05:52:57.784Z" },
    { url = "https://files.pythonhosted.org/packages/1f/f6/a933bd70f98e9cf3e08167fc5cd7aaaca49147e48411c0bd5ae701bb2194/wrapt-1.17.3-py3-none-any.whl", hash = "sha256:7171ae35d2c33d326ac19dd8facb1e82e5fd04ef8c6c0e394d7af55a55051c22", size = 23591, upload-time = "2025-08-12T05:53:20.674Z" },
]



================================================
FILE: component_config/component_long_description.md
================================================
Custom Python Application 



================================================
FILE: component_config/component_short_description.md
================================================
Custom Python Application 



================================================
FILE: component_config/configRowSchema.json
================================================
{}


================================================
FILE: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Configuration",
  "required": [
    "venv",
    "user_properties",
    "source"
  ],
  "properties": {
    "venv": {
      "enum": [
        "3.14",
        "3.13",
        "3.12",
        "base"
      ],
      "type": "string",
      "format": "radio",
      "title": "Python Version & Environment Isolation",
      "default": "",
      "options": {
        "tooltip": "- **Isolated environment** takes a couple of seconds to start, but gives you the opportuninty to pick one of the latest versions of Python. It's also a safer choice as it prevents package collisions.\n- Non-isolated environment (used to be the default choice) might start a bit faster, but can lead to issues mentioned above. It will also become a subject to deprecation in the future.\n- We recommmend you **update the code regularly** to make sure it runs with the latest versions of all packages. This will help you avoid issues with abandoned packages and **security vulnerabilities**.",
        "enum_titles": [
          "Python 3.14 RC – Isolated environment (just the packages of your choice)",
          "Python 3.13 – Isolated environment (just the packages of your choice) – This is the recommended choice 🐙",
          "Python 3.12 – Isolated environment (just the packages of your choice)",
          "Python 3.10 – Shared environment (contains many pre-installed packages in legacy versions) – This used to be the default choice"
        ]
      },
      "propertyOrder": 10
    },
    "user_properties": {
      "type": "object",
      "title": "User Parameters",
      "format": "editor",
      "propertyOrder": 20,
      "default": {
        "debug": false
      },
      "options": {
        "tooltip": "User parameters will be inserted in the `/data/config.json` file. They can be accessed in the code via `keboola.component.CommonInterface`, see an example in the documentation or when creating a new configuration.",
        "editor": {
          "lint": true,
          "mode": "application/json",
          "lineNumbers": true,
          "input_height": "100px"
        }
      }
    },
    "source": {
      "type": "string",
      "format": "radio",
      "title": "Source Code & Dependencies",
      "propertyOrder": 30,
      "enum": [
        "code",
        "git"
      ],
      "options": {
        "tooltip": "If you choose to provide the code to be ran via Git repository, any custom packages to be installed have to be specified:\n\n- in a **pyproject.toml** file accompanied with its corresponding **uv.lock file** (the modern way), or\n- in a **requirements.txt** file (the old way).\n\nThese files need to be present in the root folder of your repository. When all the aforementioned files are present, the modern way takes precedence.",
        "enum_titles": [
          "Enter manually into text areas below",
          "Get from Git repository"
        ]
      },
      "default": "code"
    },
    "packages": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "title": "Python Packages",
      "format": "select",
      "propertyOrder": 40,
      "options": {
        "dependencies": {
          "source": "code"
        },
        "tags": true
      },
      "description": "Learn more about package installation, usage, and the list of pre-installed packages in our <a href=\"https://help.keboola.com/transformations/\">documentation</a>.",
      "uniqueItems": true
    },
    "code": {
      "type": "string",
      "title": "Python Code",
      "format": "editor",
      "propertyOrder": 50,
      "default": "from keboola.component import CommonInterface\n\nci = CommonInterface()\n# access user parameters\nprint(ci.configuration.parameters)",
      "options": {
        "dependencies": {
          "source": "code"
        },
        "editor": {
          "mode": "text/x-python",
          "lineNumbers": true,
          "input_height": "100px"
        }
      }
    },
    "git": {
      "type": "object",
      "title": "Git Repository Source Settings",
      "propertyOrder": 60,
      "options": {
        "dependencies": {
          "source": "git"
        }
      },
      "required": [
        "url",
        "auth"
      ],
      "properties": {
        "url": {
          "type": "string",
          "title": "Repository URL",
          "propertyOrder": 70
        },
        "auth": {
          "type": "string",
          "format": "radio",
          "title": "Repository Visibility & Authentication",
          "propertyOrder": 80,
          "enum": [
            "none",
            "pat",
            "ssh"
          ],
          "options": {
            "enum_titles": [
              "Public – None",
              "Private – Personal Access Token",
              "Private – SSH Key"
            ]
          },
          "default": "none"
        },
        "#token": {
          "type": "string",
          "title": "Personal Access Token",
          "propertyOrder": 90,
          "options": {
            "dependencies": {
              "auth": "pat"
            }
          }
        },
        "ssh_keys": {
          "type": "object",
          "format": "ssh-editor",
          "propertyOrder": 100,
          "options": {
            "only_keys": true,
            "dependencies": {
              "auth": "ssh"
            }
          }
        },
        "branch": {
          "type": "string",
          "enum": [],
          "title": "Branch Name",
          "propertyOrder": 110,
          "options": {
            "tooltip": "If left empty, the default value `main` will be used.",
            "async": {
              "label": "List Branches",
              "action": "listBranches",
              "autoload": [
                "git.url"
              ],
              "cache": false
            }
          }
        },
        "filename": {
          "type": "string",
          "enum": [],
          "title": "Script Filename",
          "propertyOrder": 120,
          "options": {
            "tooltip": "If left empty, the default value `main.py` will be used.",
            "async": {
              "label": "List Files",
              "action": "listFiles",
              "autoload": [
                "git.branch"
              ],
              "cache": false
            }
          }
        }
      }
    }
  }
}


================================================
FILE: component_config/configuration_description.md
================================================
This component uses the latest version of our [Python Transformation backend](https://help.keboola.com/transformations/python/#environment).
It includes the same packages, and the code runs in the same environment. Any code runing in a Python transformation will work here and vice versa.


================================================
FILE: component_config/documentationUrl.md
================================================
[Empty file]


================================================
FILE: component_config/licenseUrl.md
================================================
[Empty file]


================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "verbose",
    "200": "verbose",
    "250": "verbose",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sourceCodeUrl.md
================================================
[Empty file]


================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

uv run flake8 --config=flake8.cfg
uv run python -m unittest discover


================================================
FILE: scripts/build_n_test_docker.py
================================================
import logging
import shutil
import subprocess
import sys
import time
from glob import glob

logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s - %(filename)s:%(lineno)d - %(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)


if len(sys.argv) > 1:
    data_dir = sys.argv[1]
else:
    data_dir = "./data"


subprocess.run("docker build -t cp .", shell=True, check=True)

all_passed = True
results = []

for i in range(1, 9):
    config_files = glob(f"tests/config-{i}*.json")
    if not config_files:
        continue

    filename = config_files[0]
    logging.info(f"👉 Testing {filename}...")

    shutil.copy(filename, f"{data_dir}/config.json")

    start_time = time.time()
    result = subprocess.run(["docker", "run", "-v", f"{data_dir}:/data", "-u", "1000:1000", "-it", "--rm", "cp:latest"])
    elapsed_ms = round((time.time() - start_time) * 1000)

    if result.returncode == 0:
        results.append(f"✅ {filename}: PASSED ({elapsed_ms} ms)")
    else:
        all_passed = False
        msg = f"❌ {filename}: FAILED ({elapsed_ms} ms)"
        results.append(msg)
        logging.info(msg)

    shutil.rmtree("data/.venv", ignore_errors=True)

logging.info("Results:\n" + "\n".join(f"- {r}" for r in results))

if all_passed:
    logging.info("✅ All tests passed! 🎉")
else:
    sys.exit(1)



================================================
FILE: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi


================================================
FILE: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"


================================================
FILE: src/component.py
================================================
"""
Template Component main class.
"""

import json
import logging
import os
import sys
import traceback
from pathlib import Path
from traceback import TracebackException

import dacite
from keboola.component.base import ComponentBase, sync_action
from keboola.component.exceptions import UserException

from configuration import AuthEnum, Configuration, SourceEnum, VenvEnum, encrypted_keys
from package_installer import PackageInstaller
from source_file import FileHandler
from source_git import GitHandler
from subprocess_runner import SubprocessRunner
from venv_manager import VenvManager


class Component(ComponentBase):
    """
    Extends base class for general Python components. Initializes the CommonInterface
    and performs configuration validation.

    For easier debugging the data folder is picked up by default from `../data` path,
    relative to working directory.

    If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()
        self._set_init_logging_handler()
        self.parameters = dacite.from_dict(
            Configuration,
            self.configuration.parameters,
            config=dacite.Config(
                cast=[AuthEnum, SourceEnum, VenvEnum],
                convert_key=encrypted_keys,
            ),
        )

    def run(self):
        if self.parameters.source == SourceEnum.CODE:
            base_path = Path(self.data_folder_path)
            script_filename = FileHandler.prepare_script_file(self.data_folder_path, self.parameters.code)
        else:
            base_path = Path(GitHandler.REPO_PATH).absolute()
            git_handler = GitHandler(self.parameters.git)
            script_filename = git_handler.clone_repository()

        if self.parameters.venv == VenvEnum.BASE:
            logging.info("Using base image environment")
        else:
            logging.info("Creating new Python %s virtual environment", self.parameters.venv.value)
            venv_path = VenvManager.prepare_venv(self.parameters.venv.value, base_path)
            logging.info("Virtual environment created at %s", venv_path)
            os.environ["UV_PROJECT_ENVIRONMENT"] = str(venv_path)
            os.environ["VIRTUAL_ENV"] = str(venv_path)

        if self.parameters.source == SourceEnum.CODE:
            if "keboola.component" not in self.parameters.packages:
                self.parameters.packages.insert(0, "keboola.component")
            PackageInstaller.install_packages(self.parameters.packages)
        else:
            PackageInstaller.install_packages_for_repository(base_path)

        self._merge_user_parameters()

        self.execute_script_file(script_filename)

    def execute_script_file(self, file_path: Path):
        # Change current working directory so that relative paths work
        os.chdir(self.data_folder_path)
        sys.path.append(self.data_folder_path)

        try:
            with open(file_path) as file:
                script = file.read()
            logging.info("Executing script:\n%s", self.script_excerpt(script))
            args = ["uv", "run", str(file_path)]
            SubprocessRunner.run(args, "Script executed successfully.", "Script execution failed.")
        except Exception as err:
            _, _, tb = sys.exc_info()
            stack_len = len(traceback.extract_tb(tb)[4:])
            stack_trace_records = self._get_stack_trace_records(*sys.exc_info(), -stack_len, chain=True)
            stack_cropped = "\n".join(stack_trace_records)

            raise UserException(f"Script failed. {err}. Detail: {stack_cropped}") from err

    @staticmethod
    def _get_stack_trace_records(etype, value, tb, limit=None, chain=True):
        stack_trace_records = []
        for line in TracebackException(type(value), value, tb, limit=limit).format(chain=chain):
            stack_trace_records.append(line)
        return stack_trace_records

    @staticmethod
    def script_excerpt(script):
        if len(script) > 640:
            return script[:256] + "\n...\n" + script[-256:]
        else:
            return script

    def _set_init_logging_handler(self):
        for h in logging.getLogger().handlers:
            h.setFormatter(
                logging.Formatter(
                    fmt="[%(asctime)s - %(filename)s:%(lineno)d - %(levelname)s] %(message)s",
                    datefmt="%Y-%m-%d %H:%M:%S",
                )
            )

    def _merge_user_parameters(self):
        """
        INPLACE Merges user parameters into config.json->parameters property. Rebuilds the physical config.json file
        Returns:

        """
        # remove code
        config_data = self.configuration.config_data.copy()

        # build config data and overwrite for the user script
        config_data["parameters"] = self.parameters.user_properties
        with open(Path(self.data_folder_path) / "config.json", "w+") as inp:
            json.dump(config_data, inp)

    @sync_action("listBranches")
    def get_repository_branches(self):
        """
        Returns a list of branches in the git repository.
        This method is used to populate the branches dropdown in the UI.
        """
        git_handler = GitHandler(self.parameters.git)
        return git_handler.get_repository_branches()

    @sync_action("listFiles")
    def get_repository_files(self):
        """
        Returns a list of branches in the git repository.
        This method is used to populate the branches dropdown in the UI.
        """
        git_handler = GitHandler(self.parameters.git)
        return git_handler.get_repository_files()


"""
Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        detail = ""
        if len(exc.args) > 1:
            detail = exc.args[1]
        logging.exception(exc, extra={"full_message": detail})
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
FILE: src/configuration.py
================================================
from dataclasses import dataclass, field
from enum import Enum


# the encrypted keys (prefixed with # in Keboola) have to be prefixed with "encrypted_" here
def encrypted_keys(key: str) -> str:
    return key.replace("encrypted_", "#") if key.startswith("encrypted_") else key


class SourceEnum(Enum):
    CODE = "code"
    GIT = "git"


class VenvEnum(Enum):
    BASE = "base"
    PY_3_12 = "3.12"
    PY_3_13 = "3.13"
    PY_3_14 = "3.14"


class AuthEnum(Enum):
    NONE = "none"
    PAT = "pat"
    SSH = "ssh"


# the ssh_keys.keys.[#private,public] structure is based on Keboola's standard SSH keys UI element output structure
@dataclass
class KeysConfiguration:
    public: str | None = None
    encrypted_private: str | None = None


@dataclass
class SSHKeysConfiguration:
    keys: KeysConfiguration = field(default_factory=KeysConfiguration)


@dataclass
class GitConfiguration:
    url: str = ""
    branch: str = "main"
    filename: str = "main.py"
    auth: AuthEnum = AuthEnum.NONE
    encrypted_token: str | None = None
    ssh_keys: SSHKeysConfiguration = field(default_factory=SSHKeysConfiguration)


@dataclass
class Configuration:
    source: SourceEnum = SourceEnum.CODE
    user_properties: dict[str, object] = field(default_factory=dict)
    venv: VenvEnum = VenvEnum.BASE
    packages: list[str] = field(default_factory=list)
    code: str = ""
    git: GitConfiguration = field(default_factory=GitConfiguration)



================================================
FILE: src/package_installer.py
================================================
import logging
import os
from pathlib import Path

from subprocess_runner import SubprocessRunner

MSG_OK = "Installation successful."
MSG_ERR = "Installation failed."


class PackageInstaller:
    @staticmethod
    def install_packages(packages: list[str]):
        for package in packages:
            logging.info("Installing package: %s...", package)
            args = ["uv", "pip", "install", package]
            SubprocessRunner.run(args, MSG_OK, MSG_ERR)

    @staticmethod
    def install_packages_for_repository(repository_path: Path):
        """
        Install packages based on the given repository path.
        - If there is a pyproject.toml and a uv.lock file, run uv sync.
        - If there is a requirements.txt file, install packages from it using uv.

        Args:
            repository_path (str): Path to the repository containing requirements.txt.
        """
        pyproject_file = repository_path / "pyproject.toml"
        uv_lock_file = repository_path / "uv.lock"
        requirements_file = repository_path / "requirements.txt"

        # Explicitly install keboola.component in case user didn't include in their dependencies file
        PackageInstaller.install_packages(["keboola.component"])

        args = None
        if pyproject_file.exists() and uv_lock_file.exists():
            logging.info("Running uv sync...")
            os.chdir(repository_path)  # it is currently impossible to pass custom uv.lock path
            args = ["uv", "sync", "--inexact"]
        elif requirements_file.exists():
            logging.info("Installing packages from requirements.txt...")
            args = ["uv", "pip", "install", "-r", str(requirements_file)]

        if not args:
            logging.info("No dependencies file found")
            return

        SubprocessRunner.run(args, MSG_OK, MSG_ERR)



================================================
FILE: src/source_file.py
================================================
from pathlib import Path


class FileHandler:
    @staticmethod
    def prepare_script_file(destination_path: str, script: str) -> Path:
        script_filename = Path(destination_path) / "script.py"

        with open(script_filename, "w") as file:
            file.write(script)

        return script_filename



================================================
FILE: src/source_git.py
================================================
import logging
import os
import subprocess
import sys
from pathlib import Path

from keboola.component.exceptions import UserException

from configuration import AuthEnum, GitConfiguration


class GitHandler:
    REPO_PATH = "repo_clone"

    def __init__(self, git_cfg: GitConfiguration):
        # add path for absolute imports to start at the cloned repository root level
        sys.path.append(str(Path(__file__).parent.parent / GitHandler.REPO_PATH))

        self.env = os.environ.copy()
        self.git_cfg = git_cfg
        self.repo_auth_url = None  # ‼️ NEVER EVER INCLUDE THIS VARIABLE IN LOGGING OUTPUT ‼️

        if not self.git_cfg.url:
            raise UserException("Git repository URL is required")

        if self.git_cfg.auth == AuthEnum.PAT:
            self._set_up_token_auth()

        repo_url = self.git_cfg.url
        if repo_url.startswith("git@") or repo_url.startswith("ssh://"):
            self._set_up_ssh_command()

        # do not ask for credentials when git authentication fails
        self.env["GIT_TERMINAL_PROMPT"] = "0"

    def _set_up_token_auth(self) -> None:
        if not self.git_cfg.encrypted_token:
            raise UserException("No personal access token provided")

        if not self.git_cfg.url.startswith("https://"):
            raise UserException("PAT authentication is only supported for HTTPS URLs")

        self.repo_auth_url = self.git_cfg.url.replace(
            "https://", f"https://x-token-auth:{self.git_cfg.encrypted_token}@"
        )
        logging.info("Git token authentication set up for HTTPS URL.")

    def _set_up_ssh_command(self) -> None:
        if not self.git_cfg.ssh_keys.keys.encrypted_private:
            if self.git_cfg.auth == AuthEnum.SSH:
                raise UserException("SSH key is required for SSH authentication")
            elif self.git_cfg.auth == AuthEnum.NONE:
                logging.warning("SSH URL detected but no SSH private key provided. Trying default SSH configuration.")

        ssh_command = [
            "ssh",
            # the following lines could be used to disable strict host key checking, but it is better
            # for security reasons to use the known_hosts file prepared in Dockerfile
            # "-o",
            # "StrictHostKeyChecking=no",
            "-o",
            "BatchMode=yes",  # do not ask for credentials when SSH auth fails
            "-o",
            "ConnectTimeout=30",
            "-o",
            "ServerAliveInterval=60",
        ]

        if self.git_cfg.ssh_keys.keys.encrypted_private:
            ssh_key_path = Path("~/.ssh/github_private_key").expanduser()
            with open(ssh_key_path, "wb") as f:
                for line in self.git_cfg.ssh_keys.keys.encrypted_private.splitlines():
                    f.write(line.encode() + b"\n")
            # ensure SSH key has correct permissions
            os.chmod(ssh_key_path, 0o600)
            ssh_command.extend(["-i", str(ssh_key_path)])

        self.env["GIT_SSH_COMMAND"] = " ".join(ssh_command)

    def clone_repository(self, sync_action=False) -> Path:
        """
        Clone a git repository and return the path to the cloned code.

        Returns:
            Path to the main script file to execute
        """

        branch = self.git_cfg.branch or "main"
        logging.info("Cloning git repository: %s", self.git_cfg.url)

        try:
            clone_args = ["git", "clone"]

            if branch:
                clone_args.extend(["--branch", branch])

            clone_args.extend([self.repo_auth_url or self.git_cfg.url, GitHandler.REPO_PATH])

            process = subprocess.Popen(
                clone_args,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                env=self.env,
            )
            _, stderr = process.communicate()

            if process.returncode != 0:
                error_msg = stderr.decode() if stderr else "Unknown git clone error"
                if "Permission denied" in error_msg or "publickey" in error_msg:
                    error_msg += ". Please check SSH key configuration or use HTTPS URL."
                raise UserException(f"Failed to clone git repository: {error_msg}")

            logging.info("Successfully cloned repository")

            # when cloning for the "list files" sync action, checking for the script file presence doesn't make sense
            # and could cause problems in cases the repository changed for any reason
            if sync_action:
                return Path()

            source_dir = Path.cwd() / GitHandler.REPO_PATH
            main_script_path = Path(source_dir) / self.git_cfg.filename
            if not main_script_path.is_file():
                raise UserException(f"Main script file '{self.git_cfg.filename}' not found in repository")

            return main_script_path

        except Exception as e:
            raise UserException(f"Error processing git repository: {str(e)}") from e

    def get_repository_branches(self):
        """
        Get a list of branches in the git repository.

        Returns:
            List of branch names
        """
        try:
            branches_args = ["git", "ls-remote", "--heads"]

            branches_args.append(self.repo_auth_url or self.git_cfg.url)

            process = subprocess.Popen(
                branches_args,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                env=self.env,
            )
            stdout, stderr = process.communicate()

            if process.returncode != 0:
                raise UserException(f"Failed to get branches: {stderr.decode()}")

            branches = [line.strip().split("refs/heads/")[-1] for line in stdout.decode().splitlines() if line.strip()]
            return [{"value": b, "label": b} for b in branches]

        except Exception as e:
            raise UserException(f"Error getting repository branches: {str(e)}") from e

    def get_repository_files(self):
        _ = self.clone_repository(sync_action=True)

        files = []
        for dirpath, _, filenames in os.walk(GitHandler.REPO_PATH):
            if dirpath.startswith(f"{GitHandler.REPO_PATH}/.git"):
                continue
            for filename in filenames:
                if not filename.endswith(".py"):
                    continue
                path = str(Path(dirpath) / filename)
                # strip the repository path prefix
                files.append(path[len(GitHandler.REPO_PATH) + 1 :])

        return [{"value": f, "label": f} for f in files]



================================================
FILE: src/subprocess_runner.py
================================================
import logging
import subprocess
import threading

from keboola.component.exceptions import UserException


class SubprocessRunner:
    @staticmethod
    def run(
        args: list[str],
        ok_message: str = "Command finished sucessfully.",
        err_message: str = "Command failed.",
    ):
        logging.debug("Running command: %s", " ".join(args))
        process = subprocess.Popen(
            args,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )

        stderr_output = []

        def read_stderr():
            if process.stderr:
                for line in iter(process.stderr.readline, ""):
                    stderr_output.append(line.strip())
                    logging.info("Command stderr: %s", line.strip())
                process.stderr.close()

        # Start stderr reader thread
        stderr_thread = threading.Thread(target=read_stderr)
        stderr_thread.start()

        # Read stdout in main thread
        stdout_lines = []
        if process.stdout:
            for line in iter(process.stdout.readline, ""):
                stdout_lines.append(line.strip())
                logging.info("Command output: %s", line.strip())
            process.stdout.close()
        stderr_thread.join()

        process.wait()
        stderr_str = "\n".join(stderr_output) if stderr_output else "Unknown error."
        if process.returncode != 0:
            raise UserException(f"{err_message} Log in event detail.", stderr_str)
        elif stderr_str:
            logging.info("%s Full log in detail.", ok_message, extra={"full_message": stderr_str})
        else:
            logging.info(ok_message)



================================================
FILE: src/venv_manager.py
================================================
from pathlib import Path

from subprocess_runner import SubprocessRunner


class VenvManager:
    @staticmethod
    def prepare_venv(py_version: str, base_path: Path) -> Path:
        """
        Prepare venv for the main script file given. The venv is always created in the same directory
        as the main script file.

        Args:
            main_script_file (str): Path to the main script file.
        """
        venv_path = base_path / ".venv"
        args = ["uv", "venv", "-p", py_version, str(venv_path)]

        SubprocessRunner.run(args, "Environment created successfully.", "Environment creation failed.")

        return venv_path



================================================
FILE: tests/__init__.py
================================================
import os
import sys

sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")



================================================
FILE: tests/config-1_git-example-1-base.json
================================================
{
  "parameters": {
    "source": "git",
    "git": {
      "url": "https://github.com/keboola/component-custom-python-example-repo-1.git",
      "auth": "none",
      "branch": "main",
      "filename": "main.py"
    },
    "user_properties": {
      "debug": true,
      "rectangle_a": 3.0,
      "rectangle_b": 4.0,
      "endpoint": "https://www.example.com"
    },
    "venv": "base"
  }
}



================================================
FILE: tests/config-2_git-example-1-3.13.json
================================================
{
  "parameters": {
    "source": "git",
    "git": {
      "url": "https://github.com/keboola/component-custom-python-example-repo-1.git",
      "auth": "none",
      "branch": "main",
      "filename": "main.py"
    },
    "user_properties": {
      "debug": true,
      "rectangle_a": 3.0,
      "rectangle_b": 4.0,
      "endpoint": "https://www.example.com"
    },
    "venv": "3.13"
  }
}



================================================
FILE: tests/config-3_git-example-2-base.json
================================================
{
  "parameters": {
    "source": "git",
    "git": {
      "url": "https://github.com/keboola/component-custom-python-example-repo-2.git",
      "auth": "none",
      "branch": "main",
      "filename": "src/main.py"
    },
    "user_properties": {
      "debug": true,
      "rectangle_a": 3.0,
      "rectangle_b": 4.0,
      "endpoint": "https://www.example.com"
    },
    "venv": "base"
  }
}



================================================
FILE: tests/config-4_git-example-2-3.13.json
================================================
{
  "parameters": {
    "source": "git",
    "git": {
      "url": "https://github.com/keboola/component-custom-python-example-repo-2.git",
      "auth": "none",
      "branch": "main",
      "filename": "src/main.py"
    },
    "user_properties": {
      "debug": true,
      "rectangle_a": 3.0,
      "rectangle_b": 4.0,
      "endpoint": "https://www.example.com"
    },
    "venv": "3.13"
  }
}



================================================
FILE: tests/config-5_code-base-pandas.json
================================================
{
  "parameters": {
    "source": "code",
    "packages": [
      "httpx",
      "pandas"
    ],
    "user_properties": {
      "debug": true,
      "rectangle_a": 3.0,
      "rectangle_b": 4.0,
      "endpoint": "https://www.example.com"
    },
    "venv": "base",
    "code": "import sys\n\nprint(sys.executable, sys.version)\n\nimport httpx\nimport pandas\nfrom keboola.component import CommonInterface\n\n\nci = CommonInterface()\nprint(ci.configuration.parameters)\n\nurl = \"https://api.nationalize.io/?name=john\"\n\n\ndef get_json_from_url(url):\n    try:\n        response = httpx.get(url)\n        response.raise_for_status()\n        return response.json()\n    except httpx.HTTPError as e:\n        print(f\"Error fetching data from {url}: {e}\")\n        return None\n\n\ndata = get_json_from_url(url)\nif data:\n    print(data)\n"
  }
}



================================================
FILE: tests/config-6_code-3.13-pandas.json
================================================
{
  "parameters": {
    "source": "code",
    "packages": [
      "httpx",
      "pandas"
    ],
    "user_properties": {
      "debug": true,
      "rectangle_a": 3.0,
      "rectangle_b": 4.0,
      "endpoint": "https://www.example.com"
    },
    "venv": "3.13",
    "code": "import sys\n\nprint(sys.executable, sys.version)\n\nimport httpx\nimport pandas\nfrom keboola.component import CommonInterface\n\n\nci = CommonInterface()\nprint(ci.configuration.parameters)\n\nurl = \"https://api.nationalize.io/?name=john\"\n\n\ndef get_json_from_url(url):\n    try:\n        response = httpx.get(url)\n        response.raise_for_status()\n        return response.json()\n    except httpx.HTTPError as e:\n        print(f\"Error fetching data from {url}: {e}\")\n        return None\n\n\ndata = get_json_from_url(url)\nif data:\n    print(data)\n"
  }
}


================================================
FILE: tests/config-7_code-base-no-packages.json
================================================
{
  "parameters": {
    "source": "code",
    "packages": [],
    "user_properties": {
      "debug": true,
      "rectangle_a": 3.0,
      "rectangle_b": 4.0,
      "endpoint": "https://www.example.com"
    },
    "venv": "base",
    "code": "import sys\n\nprint(sys.executable, sys.version)\n\nfrom keboola.component import CommonInterface\n\n\nci = CommonInterface()\nprint(ci.configuration.parameters)\n"
  }
}


================================================
FILE: tests/config-8_code-3.13-no-packages.json
================================================
{
  "parameters": {
    "source": "code",
    "packages": [],
    "user_properties": {
      "debug": true,
      "rectangle_a": 3.0,
      "rectangle_b": 4.0,
      "endpoint": "https://www.example.com"
    },
    "venv": "3.13",
    "code": "import sys\n\nprint(sys.executable, sys.version)\n\nfrom keboola.component import CommonInterface\n\n\nci = CommonInterface()\nprint(ci.configuration.parameters)\n"
  }
}


================================================
FILE: tests/test_component.py
================================================
import os
import unittest

import mock
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches-ignore:
      - main
    tags:
      - "*"  # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.app-custom-python"
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team"
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw/*origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Unit Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest uv run --active flake8 . --config=flake8.cfg
          echo "Running unit tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest uv run --active python -m unittest discover

  tests-integration:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Integration Tests
        run: |
          echo "Running integration tests..."
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

          cd ${{ github.workspace }}
          mkdir data
          chmod 777 data

          for i in {1..8}; do
            FILENAME=$(ls tests/config-${i}*.json)
            echo "Running integration test with ${FILENAME}..."

            cp "${FILENAME}" data/config.json
            chmod 666 data/config.json
            docker run -v ./data:/data -u 1000:1000 --rm ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          done

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-integration
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh



================================================
FILE: .ssh/known_hosts
================================================
# In case public repositories update their keys, the component will start failing with:
# Host key verification failed.
# fatal: Could not read from remote repository.
#
# In such case, retrieve the new keys using the following command:
# ssh-keyscan -t ed25519 github.com

# github.com:22 SSH-2.0-f892a94b
github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl

# bitbucket.org:22 SSH-2.0-conker_74c0242eb7-dirty 787a0a0e3e79
bitbucket.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu+UUO


