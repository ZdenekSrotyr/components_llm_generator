Directory structure:
└── keboola-component-linkedin-pages/
    ├── README.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── TEMPLATE_README.md
    ├── .style.yapf
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   ├── uiOptions.json
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── csv_table.py
    │   ├── data_processing.py
    │   └── linkedin/
    │       ├── __init__.py
    │       ├── client.py
    │       └── models.py
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
FILE: README.md
================================================
# LinkedIn Pages Extractor

This extractor downloads data about organizations, their posts, and statistics about performance of their pages, as well as tables of enumerated types used therein.

**Table of contents:**

[TOC]

<!-- ## Functionality notes -->

## Prerequisites

You must authorize the component configuration using the Keboola Connection OAuth interface in the global configuration part.
![OAuth GUI](docs/imgs/oauth_gui.png)

<!-- ## Features

| **Feature**             | **Note**                                      |
|-------------------------|-----------------------------------------------|
| Generic UI form         | Dynamic UI form                               |
| Row Based configuration | Allows structuring the configuration in rows. |
| oAuth                   | oAuth authentication enabled                  |
| Incremental loading     | Allows fetching data in new increments.       |
| Backfill mode           | Support for seamless backfill setup.          |
| Date range filter       | Specify date range.                           |

## Supported endpoints

If you need more endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/) -->

## Configuration

### Global configuraiton
 - Organizaton IDs (organizations) - [OPT] Comma separated list of organization ids you wish to fetch data from e.g. 123, 234. If left empty, data from all organizations will be fetched.

### Row configuration
 - Endpoints (endpoints) - [REQ] Select the data you wish to download. Lifetime statistics provide current totals. Time Bound statistics retrieve data about the specified time range with daily granularity. This must be either of these:
    - Page Statistics (Time Bound) to download time bound [Organization Page Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/page-statistics?view=li-lms-2022-08&tabs=http). The time range is determined by Sync Options (see below).
    - Page Statistics (Lifetime) to download lifetime [Organization Page Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/page-statistics?view=li-lms-2022-08&tabs=http).
    - Follower Statistics (Time Bound) to download time bound [Organization Follower Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics?view=li-lms-2022-08&tabs=http). The time range is determined by Sync Options (see below).
    - Follower Statistics (Lifetime) to download lifetime [Organization Follower Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics?view=li-lms-2022-08&tabs=http).
    - Share Statistics (Time Bound) to download time bound [Organization Share Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics?view=li-lms-2022-08&tabs=http). The time range is determined by Sync Options (see below).
    - Share Statistics (Lifetime) to download lifetime [Organization Share Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics?view=li-lms-2022-08&tabs=http).
    - Posts to download data about posts, their comments, and their likes.
    - Enumerated Types to download tables of enumerated types used in other data tables.
    - Organizations to download data about organizations themselves.
 - Sync Options (sync_options) [REQ] - Options pertaining only to time bound data extraction:
    - Date From (date_from) - [REQ] Date from which data is downloaded. Either date in `YYYY-MM-DD` format or dateparser string i.e. `5 days ago`, `1 month ago`, `yesterday`, etc. You can also set this as `last run`, which will fetch data from the last run of the component; if no previous successful run exists, all data since LinkedIn launch (2003-05-05) get downloaded. Values always get rounded down to the beginning of the day.
    - Date To (date_to) - [REQ] Date to which data is downloaded. Either date in `YYYY-MM-DD` format or dateparser string i.e. `5 days ago`, `1 week ago`, `now`, etc. Values always get rounded down to the beginning of the day.
 - Destination (destination) - [REQ] Options specifying how to save extracted data into Keboola Storage:
    - Load Type (load_type) - [REQ] If Full load is used, the destination table will be overwritten every run. If Incremental load is used, data will be upserted into the destination table.

### Sample Configuration
This sample configuration will download daily time bound Organization Follower Statistics about organizations with IDs equal to 69746054 and 76989094 from the day of the last component run up to today (excluded, i. e. today's possibly incomplete data will **not** be included), and upsert the resultant data into the Keboola Storage table called `time_bound_follower_statistics`.
```json
{
   "organizations": "69746054, 76989094",
   "endpoints": "follower_statistics_time_bound",
   "sync_options": {
      "date_from": "last run",
      "date_to": "today"
   },
   "destination": {
      "load_type": "incremental_load"
   }
}
```

## Output
The output of each configuration row is 1 to N tables with hardcoded name(s) as specified below for each case of the Endpoints row configuration option. Where present, time range columns' values are converted from [Unix time](https://en.wikipedia.org/wiki/Unix_time) into [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) encoded date and time strings. Tables are **not** created if they would end up empty.

<!-- List of tables, foreign keys, schema. -->
### Page Statistics (Time Bound)
Time Bound Organization Page Statistics are extracted as a table called `time_bound_page_statistics` that contains all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/page-statistics?view=li-lms-2022-08&tabs=http#sample-response-1) unwrapped and flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of these these columns: `organization`, `timeRange_start`, `timeRange_end`.

### Page Statistics (Lifetime)
Lifetime Organization Page Statistics are extracted as a table called `total_page_statistics` that contains grand totals, and a set of tables called `page_statistics_by_{enumerated_type}` for each available enumerated type that contain metrics sliced by the given enumerated type dimension. All tables contain all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/page-statistics?view=li-lms-2022-08&tabs=http#sample-response) unwrapped and flattened as columns (with the underscore `_` used as a separator). 

The primary key is composed of these columns: `organization`, and, where the data is sliced by an enumerated type, `{enumerated_type}`.

### Follower Statistics (Time Bound)
Time Bound Organization Follower Statistics are extracted as a table called `time_bound_follower_statistics` that contains all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics?view=li-lms-2022-08&tabs=http#sample-response-1) unwrapped and flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of these these columns: `organizationalEntity`, `timeRange_start`, `timeRange_end`.

### Follower Statistics (Lifetime)
Lifetime Organization Follower Statistics are extracted as a set of tables called `follower_counts_by_{enumerated_type}` for each [available enumerated type](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics?view=li-lms-2022-08&tabs=http#demographic-facets) that contain metrics sliced by the given enumerated type dimension. All tables contain all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics?view=li-lms-2022-08&tabs=http#sample-response) unwrapped and flattened as columns (with the underscore `_` used as a separator). 

The primary key is composed of these these columns: `organizationalEntity`, and, where the data is sliced by an enumerated type, `{enumerated_type}`.

### Share Statistics (Time Bound)
Time Bound Organization Share Statistics are extracted as a table called `time_bound_share_statistics` that contains all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics?view=li-lms-2022-08&tabs=http#share-statistics-data-schema) unwrapped and flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of these these columns: `organizationalEntity`, `timeRange_start`, `timeRange_end`.

### Page Statistics (Lifetime)
Lifetime Organization Share Statistics are extracted as a table called `total_share_statistics` that contains all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics?view=li-lms-2022-08&tabs=http#share-statistics-data-schema) unwrapped and flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of only the column `organizationalEntity`.

### Posts
Data about posts, their comments, and their likes are extracted as tables called `posts`, `comments`, and `likes`. These tables contain all the fields the API provides for each case: [Posts](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/posts-api?view=li-lms-2022-08&tabs=http#post-schema), [Comments](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/comments-api?view=li-lms-2022-08&tabs=http), [Likes](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions?view=li-lms-2022-08&tabs=http#retrieve-likes-on-shares). In each case the fields are flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of only the column `URN` in case of `likes`, or the column `id` in case of `posts` and `comments`.

### Enumerated types
All Enumerated types' values for Countries, Functions, Industries, Regions and Seniorities are extracted as a tables called `countries`, `functions`, `industries`, `regions` and `seniorities` that contain fields needed to make sense of the pertinent dimension slicing in Lifetime Statistics tables. See the [appropriate documentation pages](https://learn.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data?context=linkedin%2Fmarketing%2Fcontext&view=li-lms-2022-08) for more info.

The primary key is composed of only the column `id`.

### Organizations
Data about each available or specified Organization are extracted as a table called `organizations` that contains all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-lookup-api?view=li-lms-2022-08&tabs=http#sample-response) unwrapped and flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of only the column `id`.

## Development

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in
the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## Integration

For information about deployment and integration with KBC, please refer to the
[deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)



================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.10-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install --upgrade pip

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
keboola.component==1.4.2
keboola.utils
keboola.http-client
keboola.csvwriter
mock
freezegun
dateparser
inflection


================================================
FILE: TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
FILE: .style.yapf
================================================
[style]
based_on_style = google
spaces_before_comment = 4
indent_width = 4
split_before_logical_operator = false
column_limit = 120
BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF = false
SPLIT_BEFORE_EXPRESSION_AFTER_OPENING_PAREN = false


================================================
FILE: component_config/component_long_description.md
================================================
This extractor downloads data about organizations, their posts, and statistics about performance of their pages, as well as tables of enumerated types used therein.


================================================
FILE: component_config/component_short_description.md
================================================
LinkedIn Pages is a platform for organizations to post industry updates, job opportunities, information about life at their organization, and much more. Pages can be used by admins and followers when signed in to LinkedIn.com on desktop and mobile devices.


================================================
FILE: component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Configuration Parameters",
  "required": [
    "endpoints",
    "destination"
  ],
  "properties": {
    "endpoints": {
      "title": "Endpoints",
      "description": "Select the data you wish to download. Lifetime statistics provide current totals. Time-bound statistics retrieve data about the specified time range with daily granularity.",
      "type": "string",
      "enum": [
        "page_statistics_time_bound",
        "page_statistics_lifetime",
        "follower_statistics_time_bound",
        "follower_statistics_lifetime",
        "share_statistics_time_bound",
        "share_statistics_lifetime",
        "posts",
        "enumerated_types",
        "organizations"
      ],
      "options": {
        "enum_titles": [
          "Page Statistics (Time-Bound)",
          "Page Statistics (Lifetime)",
          "Follower Statistics (Time-Bound)",
          "Follower Statistics (Lifetime)",
          "Share Statistics (Time-Bound)",
          "Share Statistics (Lifetime)",
          "Posts",
          "Enumerated Types",
          "Organizations"
        ]
      },
      "propertyOrder": 10
    },
    "sync_options": {
      "options": {
        "dependencies": {
          "endpoints": [
            "page_statistics_time_bound",
            "follower_statistics_time_bound",
            "share_statistics_time_bound"
          ]
        }
      },
      "type": "object",
      "title": "Sync Options",
      "propertyOrder": 20,
      "required": [
        "date_from",
        "date_to"
      ],
      "properties": {
        "date_from": {
          "type": "string",
          "title": "Date From",
          "default": "last run",
          "description": "Date from which data is downloaded. Either date in YYYY-MM-DD format or dateparser string; i.e., 5 days ago, 1 month ago, yesterday, etc. You can also set this as 'last run', which will fetch data from the last run of the component; if no previous successful run exists, all data since LinkedIn launch (2003-05-05) are downloaded. Values always get rounded down to the beginning of the day.",
          "propertyOrder": 20
        },
        "date_to": {
          "type": "string",
          "title": "Date To",
          "default": "now",
          "description": "Date to which data is downloaded. Either date in YYYY-MM-DD format or dateparser string; i.e., 5 days ago, 1 month ago, now, etc. Values always get rounded down to the beginning of the day.",
          "propertyOrder": 30
        }
      }
    },
    "destination": {
      "title": "Destination",
      "type": "object",
      "propertyOrder": 400,
      "required": [
        "load_type"
      ],
      "properties": {
        "load_type": {
          "type": "string",
          "enum": [
            "full_load",
            "incremental_load"
          ],
          "options": {
            "enum_titles": [
              "full load",
              "incremental load"
            ]
          },
          "default": "incremental_load",
          "title": "Load Type",
          "description": "If full load is used, the destination table will be overwritten every run. If incremental load is used, data will be upserted into the destination table.",
          "propertyOrder": 20
        }
      }
    }
  }
}


================================================
FILE: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "LinkedIn Organization Configuration",
  "properties": {
    "organizations_array": {
      "title": "Organization IDs",
      "type": "array",
      "propertyOrder": 10,
      "description": "Organisations to include in export; if empty, all are downloaded.",
      "items": {
        "enum": [],
        "type": "string"
      },
      "format": "select",
      "options": {
        "async": {
          "label": "Load organizations",
          "action": "get_organizations"
        }
      },
      "uniqueItems": true
    }


  }
}


================================================
FILE: component_config/configuration_description.md
================================================
## Configuration

### Global configuraiton
 - Organizaton IDs (organizations) - [OPT] Comma separated list of organization ids you wish to fetch data from e.g. 123, 234. If left empty, data from all organizations will be fetched.

### Row configuration
 - Endpoints (endpoints) - [REQ] Select the data you wish to download. Lifetime statistics provide current totals. Time Bound statistics retrieve data about the specified time range with daily granularity. This must be either of these:
    - Page Statistics (Time Bound) to download time bound [Organization Page Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/page-statistics?view=li-lms-2022-08&tabs=http). The time range is determined by Sync Options (see below).
    - Page Statistics (Lifetime) to download lifetime [Organization Page Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/page-statistics?view=li-lms-2022-08&tabs=http).
    - Follower Statistics (Time Bound) to download time bound [Organization Follower Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics?view=li-lms-2022-08&tabs=http). The time range is determined by Sync Options (see below).
    - Follower Statistics (Lifetime) to download lifetime [Organization Follower Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics?view=li-lms-2022-08&tabs=http).
    - Share Statistics (Time Bound) to download time bound [Organization Share Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics?view=li-lms-2022-08&tabs=http). The time range is determined by Sync Options (see below).
    - Share Statistics (Lifetime) to download lifetime [Organization Share Statistics](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics?view=li-lms-2022-08&tabs=http).
    - Posts to download data about posts, their comments, and their likes.
    - Enumerated Types to download tables of enumerated types used in other data tables.
    - Organizations to download data about organizations themselves.
 - Sync Options (sync_options) [OPT] - Options pertaining only to time bound data extraction:
    - Date From (date_from) - [REQ] Date from which data is downloaded. Either date in `YYYY-MM-DD` format or dateparser string i.e. `5 days ago`, `1 month ago`, `yesterday`, etc. You can also set this as `last run`, which will fetch data from the last run of the component; if no previous successful run exists, all data since LinkedIn launch (2003-05-05) get downloaded. Values always get rounded down to the beginning of the day.
    - Date To (date_to) - [REQ] Date to which data is downloaded. Either date in `YYYY-MM-DD` format or dateparser string i.e. `5 days ago`, `1 week ago`, `now`, etc. Values always get rounded down to the beginning of the day.
 - Destination (destination) - [REQ] Options specifying how to save extracted data into Keboola Storage:
    - Load Type (load_type) - [REQ] If Full load is used, the destination table will be overwritten every run. If Incremental load is used, data will be upserted into the destination table.

### Sample Configuration
This sample configuration will download daily time bound Organization Follower Statistics about organizations with IDs equal to 69746054 and 76989094 from the day of the last component run up to today (excluded, i. e. today's possibly incomplete data will **not** be included), and upsert the resultant data into the Keboola Storage table called `time_bound_follower_statistics`.
```json
{
    "organizations": "69746054, 76989094",
    "endpoints": "follower_statistics_time_bound",
    "sync_options": {
        "date_from": "last run",
        "date_to": "today"
    },
    "destination": {
        "load_type": "incremental_load"
    }
}
```

## Output
The output of each configuration row is 1 to N tables with hardcoded name(s) as specified below for each case of the Endpoints row configuration option. Where present, time range columns' values are converted from [Unix time](https://en.wikipedia.org/wiki/Unix_time) into [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) encoded date and time strings. Tables are **not** created if they would end up empty.

<!-- List of tables, foreign keys, schema. -->
### Page Statistics (Time-Bound)
Time Bound Organization Page Statistics are extracted as a table called `time_bound_page_statistics` that contains all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/page-statistics?view=li-lms-2022-08&tabs=http#sample-response-1) unwrapped and flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of these these columns: `organization`, `timeRange_start`, `timeRange_end`.

### Page Statistics (Lifetime)
Lifetime Organization Page Statistics are extracted as a table called `total_page_statistics` that contains grand totals, and a set of tables called `page_statistics_by_{enumerated_type}` for each available enumerated type that contain metrics sliced by the given enumerated type dimension. All tables contain all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/page-statistics?view=li-lms-2022-08&tabs=http#sample-response) unwrapped and flattened as columns (with the underscore `_` used as a separator). 

The primary key is composed of these columns: `organization`, and, where the data is sliced by an enumerated type, `{enumerated_type}`.

### Follower Statistics (Time-Bound)
Time Bound Organization Follower Statistics are extracted as a table called `time_bound_follower_statistics` that contains all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics?view=li-lms-2022-08&tabs=http#sample-response-1) unwrapped and flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of these these columns: `organizationalEntity`, `timeRange_start`, `timeRange_end`.

### Follower Statistics (Lifetime)
Lifetime Organization Follower Statistics are extracted as a set of tables called `follower_counts_by_{enumerated_type}` for each [available enumerated type](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics?view=li-lms-2022-08&tabs=http#demographic-facets) that contain metrics sliced by the given enumerated type dimension. All tables contain all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/follower-statistics?view=li-lms-2022-08&tabs=http#sample-response) unwrapped and flattened as columns (with the underscore `_` used as a separator). 

The primary key is composed of these these columns: `organizationalEntity`, and, where the data is sliced by an enumerated type, `{enumerated_type}`.

### Share Statistics (Time-Bound)
Time Bound Organization Share Statistics are extracted as a table called `time_bound_share_statistics` that contains all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics?view=li-lms-2022-08&tabs=http#share-statistics-data-schema) unwrapped and flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of these these columns: `organizationalEntity`, `timeRange_start`, `timeRange_end`.

### Page Statistics (Lifetime)
Lifetime Organization Share Statistics are extracted as a table called `total_share_statistics` that contains all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/share-statistics?view=li-lms-2022-08&tabs=http#share-statistics-data-schema) unwrapped and flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of only the column `organizationalEntity`.

### Posts
Data about posts, their comments, and their likes are extracted as tables called `posts`, `comments`, and `likes`. These tables contain all the fields the API provides for each case: [Posts](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/posts-api?view=li-lms-2022-08&tabs=http#post-schema), [Comments](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/comments-api?view=li-lms-2022-08&tabs=http), [Likes](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/shares/network-update-social-actions?view=li-lms-2022-08&tabs=http#retrieve-likes-on-shares). In each case the fields are flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of only the column `URN` in case of `likes`, or the column `id` in case of `posts` and `comments`.

### Enumerated types
All Enumerated types' values for Countries, Functions, Industries, Regions and Seniorities are extracted as a tables called `countries`, `functions`, `industries`, `regions` and `seniorities` that contain fields needed to make sense of the pertinent dimension slicing in Lifetime Statistics tables. See the [appropriate documentation pages](https://learn.microsoft.com/en-us/linkedin/shared/references/v2/standardized-data?context=linkedin%2Fmarketing%2Fcontext&view=li-lms-2022-08) for more info.

The primary key is composed of only the column `id`.

### Organizations
Data about each available or specified Organization are extracted as a table called `organizations` that contains all [the fields the API provides](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/community-management/organizations/organization-lookup-api?view=li-lms-2022-08&tabs=http#sample-response) unwrapped and flattened as columns (with the underscore `_` used as a separator).

The primary key is composed of only the column `id`.


================================================
FILE: component_config/documentationUrl.md
================================================
[Empty file]


================================================
FILE: component_config/licenseUrl.md
================================================
[Empty file]


================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sourceCodeUrl.md
================================================
[Empty file]


================================================
FILE: component_config/uiOptions.json
================================================
[
    "genericDockerUI",
    "genericDockerUI-rows",
    "genericDockerUI-authorization"
]


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

echo "Updating UI helpers to use"
value=`cat component_config/uiOptions.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} uiOptions --value="$value"
else
    echo "uiOptions is empty!"
fi


================================================
FILE: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi


================================================
FILE: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"


================================================
FILE: src/component.py
================================================
import logging
from datetime import datetime, timezone
from enum import Enum, unique
from itertools import chain
from typing import Iterable, Iterator, Optional, Set

from inflection import titleize
from keboola.component.base import ComponentBase, sync_action
from keboola.component.exceptions import UserException
from keboola.component.sync_actions import SelectElement

from csv_table import Table
from data_processing import (FollowerStatisticsProcessor, PageStatisticsProcessor, ShareStatisticsProcessor,
                             create_standardized_data_enum_table, create_posts_subobject_table, create_table)
from linkedin import (LinkedInClient, LinkedInClientException, URN, TimeIntervals, TimeGranularityType, TimeRange,
                      StandardizedDataType)

# Global config keys:
KEY_DEBUG = "debug"
KEY_ORGANIZATION_IDS = "organizations"
KEY_ORGANIZATIONS_ARRAY = "organizations_array"

# Row config keys:
KEY_EXTRACTION_TARGET = "endpoints"
KEY_SYNC_OPTIONS = "sync_options"
KEY_DESTINATION = "destination"
KEY_LOAD_TYPE = "load_type"

REQUIRED_PARAMETERS = [KEY_EXTRACTION_TARGET, KEY_DESTINATION]
REQUIRED_IMAGE_PARS = []

# State keys:
KEY_LAST_RUN_DATETIME = "last_run_downloaded_data_up_to_datetime"


# Row config enums:
@unique
class LoadType(Enum):
    FULL = "full_load"
    INCREMENTAL = "incremental_load"


@unique
class ExtractionTarget(Enum):
    PAGE_STATS_TIME_BOUND = "page_statistics_time_bound"
    PAGE_STATS_LIFETIME = "page_statistics_lifetime"
    FOLLOWER_STATS_TIME_BOUND = "follower_statistics_time_bound"
    FOLLOWER_STATS_LIFETIME = "follower_statistics_lifetime"
    SHARE_STATS_TIME_BOUND = "share_statistics_time_bound"
    SHARE_STATS_LIFETIME = "share_statistics_lifetime"
    POSTS = "posts"
    ENUMS = "enumerated_types"
    ORGANIZATIONS = "organizations"


PAGE_STATS_EXTRACTION_TARGETS = (ExtractionTarget.PAGE_STATS_TIME_BOUND, ExtractionTarget.PAGE_STATS_LIFETIME)
FOLLOWER_STATS_EXTRACTION_TARGETS = (ExtractionTarget.FOLLOWER_STATS_TIME_BOUND,
                                     ExtractionTarget.FOLLOWER_STATS_LIFETIME)
SHARE_STATS_EXTRACTION_TARGETS = (ExtractionTarget.SHARE_STATS_TIME_BOUND, ExtractionTarget.SHARE_STATS_LIFETIME)

STATS_EXTRACTION_TARGETS = (PAGE_STATS_EXTRACTION_TARGETS + FOLLOWER_STATS_EXTRACTION_TARGETS +
                            SHARE_STATS_EXTRACTION_TARGETS)

TIME_BOUND_STATS_EXTRACTION_TARGETS = (ExtractionTarget.PAGE_STATS_TIME_BOUND,
                                       ExtractionTarget.FOLLOWER_STATS_TIME_BOUND,
                                       ExtractionTarget.SHARE_STATS_TIME_BOUND)
LIFETIME_STATS_EXTRACTION_TARGETS = (ExtractionTarget.PAGE_STATS_LIFETIME, ExtractionTarget.FOLLOWER_STATS_LIFETIME,
                                     ExtractionTarget.SHARE_STATS_LIFETIME)

# Other hardcoded constants:
STATISTICS_REPORT_GRANULARITY = TimeGranularityType.DAY


class LinkedInPagesExtractor(ComponentBase):

    def run(self) -> None:

        self.tmp_state = self.get_state_file()
        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        self.validate_image_parameters(REQUIRED_IMAGE_PARS)

        params: dict = self.configuration.parameters
        self.extraction_target = ExtractionTarget(params[KEY_EXTRACTION_TARGET])

        organization_ids = set()

        # Legacy UI element for BC compatibility
        if organization_ids_str := params.get(KEY_ORGANIZATION_IDS):
            organization_ids.update(organization_ids_str.split(","))

        if organization_array_str := params.get(KEY_ORGANIZATIONS_ARRAY):
            organization_ids.update(organization_array_str)

        time_range: Optional[dict] = params.get(KEY_SYNC_OPTIONS)
        self.incremental = LoadType(params[KEY_DESTINATION][KEY_LOAD_TYPE]) is LoadType.INCREMENTAL
        self.debug = bool(params.get(KEY_DEBUG))

        access_token = self.get_access_token()
        self.client = LinkedInClient(access_token)

        organization_urns = self.get_organization_urns(organization_ids)

        if self.extraction_target in STATS_EXTRACTION_TARGETS:
            self.set_time_intervals(time_range=time_range)
            if self.time_intervals and self.time_intervals.time_range.length_in_days == 0:
                logging.warning("Empty resultant time range for time bound statistics (start is the same as end),"
                                " exiting without data output.")
                return
            logging.info(f"Downloading {titleize(self.extraction_target.value)}" +
                         (f" over the time range: {self.time_intervals.time_range}" if self.time_intervals else "."))

            if self.extraction_target in PAGE_STATS_EXTRACTION_TARGETS:
                self.linked_in_client_method = self.client.get_organization_page_statistics
                self.statistics_processor_class = PageStatisticsProcessor
            elif self.extraction_target in FOLLOWER_STATS_EXTRACTION_TARGETS:
                self.linked_in_client_method = self.client.get_organization_follower_statistics
                self.statistics_processor_class = FollowerStatisticsProcessor
            elif self.extraction_target in SHARE_STATS_EXTRACTION_TARGETS:
                self.linked_in_client_method = self.client.get_organization_share_statistics
                self.statistics_processor_class = ShareStatisticsProcessor
            else:
                raise ValueError(f"Invalid extraction target: {self.extraction_target}")
            output_tables = self.get_all_statistics_tables(organization_urns=organization_urns)

        elif self.extraction_target is ExtractionTarget.POSTS:
            output_tables = self.get_all_posts_based_tables(organization_urns=organization_urns)
        elif self.extraction_target is ExtractionTarget.ENUMS:
            output_tables = self.get_all_standardized_data_enum_tables()
        elif self.extraction_target is ExtractionTarget.ORGANIZATIONS:
            output_tables = self.get_organizations_table(organization_urns=organization_urns)
        else:
            raise ValueError(f"Invalid extraction target: {self.extraction_target}")

        for table in output_tables:
            table.save_as_csv_with_manifest(component=self, incremental=self.incremental, include_csv_header=self.debug)
        if self.tmp_state:
            self.write_state_file(self.tmp_state)

    def get_organization_urns(self, organization_ids: Set[str]):
        if organization_ids:
            organization_urns = [URN(entity_type="organization", id=int(id)) for id in organization_ids]
        else:
            try:
                organization_acls = list(self.client.get_organization_acls(query="roleAssignee",
                                                                           role="ADMINISTRATOR",
                                                                           state="APPROVED"))
            except LinkedInClientException as client_exc:
                raise UserException(client_exc) from client_exc
            organization_urns = [URN.from_str(org_acl["organization"]) for org_acl in organization_acls]
        return organization_urns

    def set_time_intervals(self, time_range: dict):
        if self.extraction_target in TIME_BOUND_STATS_EXTRACTION_TARGETS and not time_range:
            raise UserException("When downloading time bound statistics, Sync Options must be properly specified.")
        if self.extraction_target in LIFETIME_STATS_EXTRACTION_TARGETS:
            self.time_intervals = None
            return
        try:
            self.time_intervals = TimeIntervals(time_granularity_type=STATISTICS_REPORT_GRANULARITY,
                                                time_range=TimeRange.from_config_dict(
                                                    time_range,
                                                    last_run_datetime_str=self.tmp_state.get(KEY_LAST_RUN_DATETIME)))
        except ValueError as ve:
            raise UserException(f"Invalid time range provided. {ve.args[0]}") from ve
        self.tmp_state[KEY_LAST_RUN_DATETIME] = min(
            datetime.now(tz=timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0, fold=0),
            self.time_intervals.time_range.end).isoformat(timespec="seconds")

    def get_all_statistics_tables(self, organization_urns: Iterable[URN]) -> list[Table]:
        assert hasattr(self, "statistics_processor_class") and hasattr(self, "time_intervals")
        records = chain.from_iterable(
            self.get_statistics_data_for_organization(organization_urn=organization_urn)
            for organization_urn in organization_urns)
        try:
            return self.statistics_processor_class(records=records,
                                                   time_intervals=self.time_intervals).get_result_tables()
        except LinkedInClientException as client_exc:
            raise UserException(client_exc) from client_exc

    def get_statistics_data_for_organization(self, organization_urn: URN) -> Iterator[dict]:
        assert hasattr(self, "linked_in_client_method") and hasattr(self, "time_intervals")
        try:
            if self.time_intervals:
                time_intervals_chunked = self.time_intervals.to_downloadable_chunks()
                return chain.from_iterable(
                    self.linked_in_client_method(organization_urn, time_intervals=time_intervals_chunk)
                    for time_intervals_chunk in time_intervals_chunked)
            else:
                return self.linked_in_client_method(organization_urn)
        except LinkedInClientException as client_exc:
            raise UserException(client_exc) from client_exc

    def get_all_standardized_data_enum_tables(self):
        return [
            create_standardized_data_enum_table(standardized_data_type,
                                                records=self.client.get_all_standardized_data_type_enum_values(
                                                    standardized_data_type=standardized_data_type))
            for standardized_data_type in StandardizedDataType
        ]

    def get_all_posts_based_tables(self, organization_urns: Iterable[URN]) -> list[Table]:
        posts_records = (chain.from_iterable(
            chain(self.client.get_posts_by_author(urn, is_dsc=True), self.client.get_posts_by_author(urn, is_dsc=False))
            for urn in organization_urns))
        posts_table = create_table(records=posts_records, table_name="posts", primary_key=["id"])
        if posts_table.is_empty:
            logging.warning("No posts found for any available/specified organization.")
        posts_table.save_as_csv_with_manifest(self, incremental=self.incremental, include_csv_header=self.debug)
        posts_urns = list(  # Keeping the posts URNs in memory here - may cause problems if number of posts is high
            URN.from_str(processed_record["id"]) for processed_record in posts_table.get_refreshed_records_iterator())

        comments_urn_to_records = {urn: self.client.get_comments_on_post(urn) for urn in posts_urns}
        comments_table = create_posts_subobject_table(urn_to_records_dict=comments_urn_to_records,
                                                      table_name="comments",
                                                      primary_key=["id"])

        likes_urn_to_records = {urn: self.client.get_likes_on_post(urn) for urn in posts_urns}
        likes_table = create_posts_subobject_table(urn_to_records_dict=likes_urn_to_records,
                                                   table_name="likes",
                                                   primary_key=["URN"])

        return [posts_table, comments_table, likes_table]

    def get_organizations_table(self, organization_urns: Iterable[URN]) -> list[Table]:
        organization_records = (
            self.client.get_administered_organization(organization_urn) for organization_urn in organization_urns)
        return [create_table(records=organization_records, table_name="organizations", primary_key=["id"])]

    def get_access_token(self) -> str:
        if not self.configuration.oauth_credentials:
            raise UserException("The configuration is not authorized. Please authorize the configuration first.")

        if "access_token" not in self.configuration.oauth_credentials["data"]:
            raise UserException("Access token not available. Retry Authorization process")
        return self.configuration.oauth_credentials["data"]["access_token"]

    @sync_action('get_organizations')
    def get_organizations(self):

        access_token = self.get_access_token()
        client = LinkedInClient(access_token)

        try:
            organization_acls = list(client.get_organization_acls(
                query="roleAssignee",
                role="ADMINISTRATOR",
                state="APPROVED",
                projection="(*,elements*(*,organization~(vanityName)))"))

        except LinkedInClientException as client_exc:
            raise UserException(client_exc) from client_exc

        return [SelectElement(
            value=(org_id := str(org_acl["organization"].split(':')[-1])),
            label=f'{org_acl["organization~"]["vanityName"]} ({org_id})')
                for org_acl in organization_acls]


if __name__ == "__main__":
    try:
        comp = LinkedInPagesExtractor()
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
FILE: src/csv_table.py
================================================
from dataclasses import dataclass
from itertools import chain
import logging
from typing import Collection, Iterable, Iterator, Optional, Sequence
import os
import csv

from keboola.component.base import ComponentBase
from keboola.component.dao import TableMetadata
from keboola.csvwriter import ElasticDictWriter


@dataclass(slots=True)
class Table:
    name: str
    columns: Optional[list[str]]
    primary_key: list[str]
    records: Iterable[dict]
    metadata: Optional[TableMetadata] = None
    delete_where_spec: Optional[dict] = None
    file_path: Optional[str] = None
    _saved: bool = False
    _header_included: bool = False
    _is_empty: Optional[bool] = None

    def _is_empty_internal(self):
        if self._saved:    # Empty tables will never be saved.
            return False
        invalid_columns = not self.columns
        if invalid_columns:
            return True
        if isinstance(self.records, Collection):
            return len(self.records) > 0
        records_iterator = iter(self.records)
        test_record = next(records_iterator, None)
        if test_record is None:
            return True
        else:
            self.records = chain((test_record,), records_iterator)
            return False

    @property
    def is_empty(self):
        if self._is_empty is None:
            self._is_empty = self._is_empty_internal()
        return self._is_empty

    def save_as_csv_with_manifest(self,
                                  component: ComponentBase,
                                  incremental: bool,
                                  include_csv_header: bool = False,
                                  overwrite=False):
        if self._saved and not overwrite:
            logging.debug(f"Table already saved, not overwriting. Table: {self}")
            return
        if self.is_empty:
            logging.warning(f"Attempting to save an empty table{' increment' if incremental else ''},"
                            f" nothing will be loaded into table '{self.name}'.")
            return

        table_def = component.create_out_table_definition(name=f"{self.name}.csv",
                                                          is_sliced=False,
                                                          primary_key=self.primary_key,
                                                          columns=self.columns,
                                                          incremental=incremental,
                                                          table_metadata=self.metadata,
                                                          delete_where=self.delete_where_spec)
        os.makedirs(component.tables_out_path, exist_ok=True)
        self.file_path = table_def.full_path
        with ElasticDictWriter(self.file_path, dialect='kbc', fieldnames=table_def.columns.copy()) as csv_writer:
            if include_csv_header:
                csv_writer.writeheader()
                self._header_included = True
            csv_writer.writerows(self.records)
        self.columns = table_def.columns = csv_writer.fieldnames
        component.write_manifest(table_def)
        self._saved = True

    def get_refreshed_records_iterator(self) -> Iterator[dict]:
        if isinstance(self.records, Sequence) or self.is_empty:
            return iter(self.records)    # No need to do anything, we can just iterate over records again
        # Records are not directly recoverable, we need to read them from the created CSV:
        assert self._saved

        def generator():
            with open(self.file_path, "r") as f:
                csv_reader = csv.DictReader(f, fieldnames=self.columns, dialect='kbc')
                if self._header_included:
                    next(csv_reader)    # skipping CSV header
                yield from csv_reader

        self.records: Iterable[dict] = generator()
        return iter(self.records)



================================================
FILE: src/data_processing.py
================================================
from abc import ABC, abstractmethod
import logging
from typing import Iterable, Mapping, MutableMapping, Optional
from copy import deepcopy
from itertools import chain
import re

from inflection import underscore, camelize
from keboola.utils.header_normalizer import DefaultHeaderNormalizer

from csv_table import Table
from linkedin.models import URN, StandardizedDataType, TimeIntervals, TimeRange

HEADER_NORMALIZER = DefaultHeaderNormalizer()

X_BY_Y_RE = re.compile(r"(\w+)By(\w+)")


def flatten_dict(d: Mapping, parent_key: str = '', sep: str = '_'):
    items = []
    for k, v in d.items():
        new_key = parent_key + sep + k if parent_key else k
        if isinstance(v, MutableMapping):
            items.extend(flatten_dict(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)


def rename_dict_keys(d: MutableMapping, key_name_mapping: Mapping):
    return {key_name_mapping.get(key, key): value for key, value in d.items()}


def create_table(records: Iterable[dict],
                 table_name: str,
                 primary_key: list[str],
                 flatten_records: bool = True,
                 normalize_header: bool = True):
    records = iter(records)
    if flatten_records:
        records_processed = (flatten_dict(d) for d in records)
    else:
        records_processed = records
    record_processed: dict = next(records_processed, None)
    if record_processed is None:
        logging.warning(f"API returned no records for output table '{table_name}'.")
        return Table(name=table_name, columns=None, primary_key=primary_key, records=records_processed)
    records_processed = chain((record_processed,), records_processed)
    columns = list(record_processed.keys())
    if normalize_header:
        denormalized_columns = columns
        columns = HEADER_NORMALIZER.normalize_header(columns)
        column_name_mapping = {
            denorm_name: norm_name
            for denorm_name, norm_name in zip(denormalized_columns, columns)
            if denorm_name != norm_name
        }
        records_processed = (rename_dict_keys(d, column_name_mapping) for d in records_processed)
    for pk in primary_key:
        if pk not in columns:
            raise ValueError(f"Invalid primary key. Primary key element '{pk}' not found in columns: {columns}.")
    return Table(name=table_name, columns=columns, primary_key=primary_key, records=records_processed)


class OrganizationStatisticsProcessor(ABC):
    def __init__(self, records: Iterable[dict], time_intervals: Optional[TimeIntervals]):
        self.records_iterator = iter(records)
        self.time_intervals = time_intervals
        self.set_processing_parameters()
        super().__init__()

    @abstractmethod
    def set_processing_parameters(self,
                                  statistics_type_name: str,
                                  organization_urn_fieldname: str,
                                  total_statistics_fieldname: Optional[str] = None):
        self.time_bound_statistics_table_name: str = f"time_bound_{statistics_type_name}_statistics"
        self.organization_urn_fieldname: str = organization_urn_fieldname
        self.time_bound_statistics_table_name_primary_key: list[str] = [
            self.organization_urn_fieldname, "timeRange_start", "timeRange_end"
        ]
        self.total_statistics_fieldname: str = (total_statistics_fieldname if total_statistics_fieldname else camelize(
            f"total_{statistics_type_name}_statistics", uppercase_first_letter=False))

    def get_result_tables(self) -> list[Table]:
        if self.time_intervals is None:
            return self.get_total_statistics_tables()
        else:
            return [self.get_time_bound_statistics_table()]

    def get_time_bound_statistics_table(self) -> Table:
        records_processed = (self.process_time_bound_element(element) for element in self.records_iterator)
        return create_table(records=records_processed,
                            table_name=self.time_bound_statistics_table_name,
                            primary_key=self.time_bound_statistics_table_name_primary_key)

    def process_time_bound_element(self, element: dict):
        processed_element = deepcopy(element)
        processed_element.update(processed_element.pop(self.total_statistics_fieldname))
        if processed_element.get("timeRange"):
            processed_element["timeRange"] = TimeRange.from_api_dict(
                processed_element["timeRange"]).to_serializable_dict()
        return processed_element

    def get_total_statistics_tables(self) -> list[Table]:
        records_processed = [self.process_organization_record(record) for record in self.records_iterator]
        record_processed = records_processed[0]
        table_name_to_table_records_dict = {
            table_name: list(chain.from_iterable(record[table_name] for record in records_processed))
            for table_name in record_processed.keys()
        }
        return [
            create_table(records=records,
                         table_name=underscore(table_name),
                         primary_key=[
                             self.organization_urn_fieldname,
                             camelize(X_BY_Y_RE.match(table_name).group(2), uppercase_first_letter=False)
                         ] if X_BY_Y_RE.match(table_name) else [self.organization_urn_fieldname],
                         flatten_records=True) for table_name, records in table_name_to_table_records_dict.items()
        ]

    def process_organization_record(self, record: dict) -> dict:
        record_processed = deepcopy(record)
        organization_urn: str = record_processed.pop(self.organization_urn_fieldname)
        for table_name, table_records in record_processed.items():
            if isinstance(table_records, list):
                data_key = X_BY_Y_RE.match(table_name).group(1)
                for table_record in table_records:
                    table_record: dict
                    table_record[self.organization_urn_fieldname] = organization_urn
                    table_record.update(table_record.pop(data_key))
            elif isinstance(table_records, dict):
                table_records[self.organization_urn_fieldname] = organization_urn
                record_processed[table_name] = [table_records]
            else:
                raise ValueError("Organization records cannot contain values that are neither lists or dicts.")
        return record_processed


class ShareStatisticsProcessor(OrganizationStatisticsProcessor):
    def set_processing_parameters(self):
        super().set_processing_parameters(statistics_type_name="share",
                                          organization_urn_fieldname="organizationalEntity")


class FollowerStatisticsProcessor(OrganizationStatisticsProcessor):
    def set_processing_parameters(self):
        super().set_processing_parameters(statistics_type_name="follower",
                                          organization_urn_fieldname="organizationalEntity",
                                          total_statistics_fieldname="followerGains")


class PageStatisticsProcessor(OrganizationStatisticsProcessor):
    def set_processing_parameters(self):
        super().set_processing_parameters(statistics_type_name="page", organization_urn_fieldname="organization")


def create_standardized_data_enum_table(standardized_data_type: StandardizedDataType,
                                        records: Iterable[dict]) -> Optional[Table]:
    def process_enum_element(el: dict) -> dict:
        # if standardized_data_type is StandardizedDataType.SKILLS:
        #     processed_element = {"standardizedName": el["standardizedName"], "id": el["id"]}
        # elif standardized_data_type is StandardizedDataType.IAB_CATEGORIES:
        #     processed_element = {"displayName": el["displayName"], "iabName": el["iabName"], "id": el["id"]}
        if standardized_data_type is StandardizedDataType.COUNTRIES:
            processed_element = {
                "name": el["name"]["value"],
                "id": el["countryCode"],
                "urn": el["$URN"],
                "countryCode": el["countryCode"]
            }
        # elif standardized_data_type is StandardizedDataType.STATES:
        #     processed_element = {
        #         "name": el["name"]["value"],
        #         "id": el["stateCode"],
        #         "urn": el["$URN"],
        #         "stateCode": el["stateCode"],
        #         "country": el["country"]
        #     }
        elif standardized_data_type is StandardizedDataType.REGIONS:
            processed_element = {
                "name": el["name"]["value"],
                "id": el["id"],
                "urn": el["$URN"],
                "country": el["country"]
            }
        else:
            processed_element = {"name": el["name"]["localized"]["en_US"], "id": el["id"], "urn": el["$URN"]}
            for field_name in ("rollup", "rollupIds", "parentId"):
                if el.get(field_name):
                    processed_element[field_name] = el[field_name]
        return processed_element

    records_processed = (process_enum_element(d) for d in records)
    return create_table(records=records_processed,
                        table_name=standardized_data_type.normalized_name,
                        primary_key=["id"],
                        flatten_records=False)


def create_posts_subobject_table(urn_to_records_dict: dict[URN, Iterable[dict]], table_name: str,
                                 primary_key: list[str]):
    def process_record(record: dict, post_urn: URN):
        processed_rec = record.copy()
        processed_rec["post_urn"] = str(post_urn)
        return processed_rec

    records_processed = chain.from_iterable(
        (process_record(d, post_urn=urn) for d in records) for urn, records in urn_to_records_dict.items())
    return create_table(records=records_processed, table_name=table_name, primary_key=primary_key)



================================================
FILE: src/linkedin/__init__.py
================================================
from .client import LinkedInClient, LinkedInClientException    # noqa
from .models import TimeIntervals, TimeGranularityType, TimeRange, URN, StandardizedDataType    # noqa



================================================
FILE: src/linkedin/client.py
================================================
from functools import wraps
import logging
from typing import Callable, Dict, Iterator, List, Optional, ParamSpec

import requests
from urllib.parse import quote

from keboola.http_client.http import HttpClient, Cookie

from .models import URN, TimeIntervals, StandardizedDataType

BASE_URL = "https://api.linkedin.com"
API_VERSION = "v2"

DEFAULT_HTTP_HEADER = {"X-Restli-Protocol-Version": "2.0.0", "LinkedIn-Version": "202208"}

ENDPOINT_ORG = "organizations"
ENDPOINT_ORG_ACL = "organizationAcls"
ENDPOINT_ORG_PAGE_STATS = "organizationPageStatistics"
ENDPOINT_ORG_FOLLOWER_STATS = "organizationalEntityFollowerStatistics"
ENDPOINT_ORG_SHARE_STATS = "organizationalEntityShareStatistics"

ENDPOINT_POSTS = "posts"
ENDPOINT_SOCIAL_ACTIONS = "socialActions"
ENDPOINT_REACTIONS = "reactions"

# Enum endpoints:
ENDPOINT_DEGREES = "degrees"

# Other constants:
DEFAULT_PAGE_SIZE = 1000
POST_PAGE_SIZE = 100


def auth_header(access_token: str):
    return {'Authorization': 'Bearer ' + access_token}


def bool_to_param_string(val: bool):
    return "true" if val else "false"


class LinkedInClientException(Exception):
    pass


P = ParamSpec('P')


def response_error_handling(api_call: Callable[P, requests.Response]) -> Callable[P, dict]:
    """
    Function, that handles response handling of HTTP requests. The one from the library doesn't output all info.
    """

    @wraps(api_call)
    def wrapper(*args, **kwargs):
        try:
            r = api_call(*args, **kwargs)
            r.raise_for_status()
        except requests.HTTPError as e:
            response: requests.Response = e.response
            if response.status_code in (400, 401, 402, 403):
                error_message = response.json().get('message')
                raise LinkedInClientException(error_message) from e
            else:
                raise
        else:
            return r.json()

    return wrapper


class LinkedInClient(HttpClient):
    def __init__(self, access_token: str) -> None:
        self.access_token = access_token
        base_url = f"{BASE_URL}/{API_VERSION}"
        super().__init__(base_url, auth_header=auth_header(self.access_token), default_http_header=DEFAULT_HTTP_HEADER)

    @response_error_handling
    def get(self,
            endpoint_path: Optional[str] = None,
            params: dict = None,
            headers: dict = None,
            is_absolute_path: bool = False,
            cookies: Cookie = None,
            ignore_auth: bool = False,
            **kwargs):
        return self.get_raw(endpoint_path,
                            params=params,
                            headers=headers,
                            cookies=cookies,
                            is_absolute_path=is_absolute_path,
                            ignore_auth=ignore_auth,
                            **kwargs)

    def _handle_pagination(self,
                           endpoint_path: str,
                           count: int,
                           start: Optional[int] = None,
                           params: dict = None,
                           **kwargs) -> Iterator[Dict] | Dict:
        """
        If start is set (not None), returns the raw response JSON as Dict,
        otherwise returns iterator over all elements.
        """
        if params is None:
            params = dict()
        assert count > 0
        logging.info(f"Downloading data from API endpoint: {endpoint_path.split('?')[0]}")
        params["count"] = count
        if isinstance(start, int):
            assert start >= 0
            params["start"] = start
            return self.get(params=params, **kwargs)
        params["start"] = 0

        def generator():
            total_elements_downloaded = 0
            all_pages_handled = False
            while not all_pages_handled:
                next_page = self.get(endpoint_path=endpoint_path, params=params, **kwargs)
                elements: List[Dict] = next_page["elements"]
                paging_info: Dict[str, int | List[Dict[str, str]]] = next_page["paging"]
                total_elements = paging_info.get("total")
                yield from elements
                actual_page_size = len(elements)
                logging.info(
                    f"Downloaded elements {total_elements_downloaded} to "
                    f"{total_elements_downloaded + actual_page_size}."
                )
                total_elements_downloaded += actual_page_size
                if total_elements:
                    remaining_elements = total_elements - total_elements_downloaded
                    if remaining_elements:
                        logging.info(f"{remaining_elements} remaining.")
                all_pages_handled = actual_page_size == 0 or actual_page_size < count
                params["start"] += count

        return generator()

    def get_administered_organization(self, organization_id: str | int | URN):
        if isinstance(organization_id, URN):
            assert organization_id.entity_type == "organization"
            organization_id = organization_id.id
        url = f"{ENDPOINT_ORG}/{organization_id}"
        return self.get(endpoint_path=url)

    def get_organization_by_vanity_name(self,
                                        vanity_name: str,
                                        start: Optional[int] = None,
                                        count: int = DEFAULT_PAGE_SIZE):
        params = {"q": "vanityName", "vanityName": vanity_name}
        return self._handle_pagination(endpoint_path=ENDPOINT_ORG, params=params, count=count, start=start)

    def get_organization_acls(self,
                              query: Optional[str] = None,
                              role: Optional[str] = None,
                              start: Optional[int] = None,
                              count: int = DEFAULT_PAGE_SIZE,
                              projection: Optional[str] = None,
                              state: Optional[str] = None):
        params = {}
        if role:
            params["role"] = role
        if projection:
            params["projection"] = projection
        if query:
            params["q"] = query
        if state:
            params["state"] = state

        return self._handle_pagination(endpoint_path=ENDPOINT_ORG_ACL, count=count, start=start, params=params)

    def get_organization_page_statistics(self,
                                         organization_urn: URN,
                                         time_intervals: Optional[TimeIntervals] = None,
                                         start: Optional[int] = None,
                                         count: int = DEFAULT_PAGE_SIZE):
        assert organization_urn.entity_type == "organization"
        params = {"q": "organization", "organization": str(organization_urn)}
        # Cannot do this commented out sensible thing:
        # if time_intervals is not None:
        #     params["timeIntervals"] = time_intervals.to_url_string()
        # I must do this to prevent URL encoding instead:
        if time_intervals:
            url = f"{ENDPOINT_ORG_PAGE_STATS}?timeIntervals={time_intervals.to_url_string()}"
        else:
            url = ENDPOINT_ORG_PAGE_STATS
        return self._handle_pagination(endpoint_path=url, count=count, start=start, params=params)

    def get_organization_follower_statistics(self,
                                             organization_urn: URN,
                                             time_intervals: Optional[TimeIntervals] = None,
                                             start: Optional[int] = None,
                                             count: int = DEFAULT_PAGE_SIZE):
        assert organization_urn.entity_type == "organization"
        params = {"q": "organizationalEntity", "organizationalEntity": str(organization_urn)}
        # Cannot do this commented out sensible thing:
        # if time_intervals is not None:
        #     params["timeIntervals"] = time_intervals.to_url_string()
        # I must do this to prevent URL encoding instead:
        if time_intervals:
            url = f"{ENDPOINT_ORG_FOLLOWER_STATS}?timeIntervals={time_intervals.to_url_string()}"
        else:
            url = ENDPOINT_ORG_FOLLOWER_STATS
        return self._handle_pagination(endpoint_path=url, count=count, start=start, params=params)

    def get_organization_share_statistics(self,
                                          organization_urn: URN,
                                          time_intervals: Optional[TimeIntervals] = None,
                                          start: Optional[int] = None,
                                          count: int = DEFAULT_PAGE_SIZE):
        assert organization_urn.entity_type == "organization"
        params = {"q": "organizationalEntity", "organizationalEntity": str(organization_urn)}
        # Cannot do this commented out sensible thing:
        # if time_intervals is not None:
        #     params["timeIntervals"] = time_intervals.to_url_string()
        # I must do this to prevent URL encoding instead:
        if time_intervals:
            url = f"{ENDPOINT_ORG_SHARE_STATS}?timeIntervals={time_intervals.to_url_string()}"
        else:
            url = ENDPOINT_ORG_SHARE_STATS
        return self._handle_pagination(endpoint_path=url, count=count, start=start, params=params)

    def get_post_by_urn(self, post_urn: URN):
        url = f"{ENDPOINT_POSTS}/{quote(str(post_urn))}"
        return self.get(endpoint_path=url)

    def get_posts_by_author(self,
                            author_urn: URN,
                            is_dsc: bool,
                            start: Optional[int] = None,
                            count: int = POST_PAGE_SIZE):
        params = {"q": "author", "author": author_urn, "isDsc": bool_to_param_string(is_dsc)}
        return self._handle_pagination(endpoint_path=ENDPOINT_POSTS, count=count, start=start, params=params)

    def get_comments_on_post(self, post_urn: URN, start: Optional[int] = None, count: int = DEFAULT_PAGE_SIZE):
        url = f"{ENDPOINT_SOCIAL_ACTIONS}/{quote(str(post_urn))}/comments"
        return self._handle_pagination(endpoint_path=url, count=count, start=start)

    def get_likes_on_post(self, post_urn: URN, start: Optional[int] = None, count: int = DEFAULT_PAGE_SIZE):
        url = f"{ENDPOINT_SOCIAL_ACTIONS}/{quote(str(post_urn))}/likes"
        return self._handle_pagination(endpoint_path=url, count=count, start=start)

    def get_social_action_summary_on_post(self, post_urn: URN):
        url = f"{ENDPOINT_SOCIAL_ACTIONS}/{quote(str(post_urn))}"
        return self.get(endpoint_path=url)

    def get_all_standardized_data_type_enum_values(self,
                                                   standardized_data_type: StandardizedDataType,
                                                   start: Optional[int] = None,
                                                   count: int = DEFAULT_PAGE_SIZE):
        url = standardized_data_type.value
        # url = ("skills?locale=(language:en,country:US)"
        #        if standardized_data_type is StandardizedDataType.SKILLS else standardized_data_type.value)
        return self._handle_pagination(endpoint_path=url, count=count, start=start)



================================================
FILE: src/linkedin/models.py
================================================
from dataclasses import dataclass
import logging
import re
from datetime import datetime, timedelta, timezone
from enum import Enum, unique
import math
from typing import Iterator, Optional

from dateparser import parse
from inflection import underscore

from keboola.utils.date import split_dates_to_chunks

# Time range config dict params:
KEY_START = "date_from"
KEY_END = "date_to"

# Config dict constants:
VAL_LAST_RUN = "last run"

# Other constants:
MAXIMUM_TIME_RANGE_SIZE = timedelta(days=30 * 14)    # i.e. 14 months
LAST_RUN_MISSING_DEFAULT = datetime(year=2003, month=5, day=5, tzinfo=timezone.utc)    # LinkedIn launched

URN_RE = re.compile(r"urn:li:(\w+):(\d+)")


@dataclass(slots=True, frozen=True)
class URN:
    entity_type: str
    id: int

    def __str__(self):
        return f"urn:li:{self.entity_type}:{self.id}"

    @classmethod
    def from_str(cls, s: str):
        matches = URN_RE.match(s)
        if matches:
            return cls(entity_type=matches.group(1), id=int(matches.group(2)))
        else:
            raise ValueError(f"URN string invalid: {s}")


@unique
class StandardizedDataType(Enum):
    # DEGREES = "degrees"  # Not needed
    # FIELDS_OF_STUDY = "fieldsOfStudy"  # Not needed
    FUNCTONS = "functions"
    INDUSTRIES = "industries"
    SENIORITIES = "seniorities"
    # SKILLS = "skills"  # Not needed
    # SUPER_TITLES = "superTitles"  # Does not work due to 403 API error   # Not needed
    # TITLES = "titles"  # Not needed
    # IAB_CATEGORIES = "iabCategories"  # Not needed
    # Locations:
    COUNTRIES = "countries"
    # STATES = "states"  # Not needed
    REGIONS = "regions"

    @property
    def normalized_name(self) -> str:
        return underscore(self.value)


def datetime_to_milliseconds_since_epoch(dt: datetime) -> int:
    return round(dt.timestamp() * 1000)


def milliseconds_since_epoch_to_datetime(milliseconds_since_epoch: int, tz: timezone = timezone.utc) -> datetime:
    return datetime.fromtimestamp(milliseconds_since_epoch / 1000.0, tz=tz)


def parse_date_from_string(s: str):
    dt = parse(s)
    if dt is None:
        raise ValueError(f'Could not parse the string "{s}" into a valid datetime object.'
                         f' Please either use a fixed date such as "1982-09-13" or'
                         f' relative expression such as "7 days ago", "today", etc.')
    tz = dt.tzinfo or timezone.utc
    return dt.replace(hour=0, minute=0, second=0, microsecond=0, fold=0, tzinfo=tz)


@unique
class TimeGranularityType(Enum):
    DAY = "DAY"
    MONTH = "MONTH"


@dataclass(slots=True, frozen=True)
class TimeRange:
    start: datetime
    end: datetime

    def __post_init__(self):
        if self.start > self.end:
            raise ValueError(f"Start value must be earlier than or concurrent with end value."
                             f" Resultant datetimes: {self.to_serializable_dict()}")

    def to_url_string(self) -> str:
        return (f"(start:{datetime_to_milliseconds_since_epoch(self.start)},"
                f"end:{datetime_to_milliseconds_since_epoch(self.end)})")

    @classmethod
    def from_api_dict(cls, d: dict):
        return cls(start=milliseconds_since_epoch_to_datetime(d["start"]),
                   end=milliseconds_since_epoch_to_datetime(d["end"]))

    @classmethod
    def from_config_dict(cls, d: dict, last_run_datetime_str: Optional[str] = None):
        end = parse_date_from_string(d[KEY_END])
        if d[KEY_START] == VAL_LAST_RUN:
            if last_run_datetime_str:
                start = datetime.fromisoformat(last_run_datetime_str)
            else:
                logging.warning("Last run datetime is not specified (in component state)"
                                " despite 'last run' being used as the start of a time range."
                                " Downloading data since LinkedIn launch (2003-05-05).")
                start = LAST_RUN_MISSING_DEFAULT
        else:
            start = parse_date_from_string(d[KEY_START])
        return cls(start=start, end=end)

    def to_serializable_dict(self):
        return {"start": self.start.isoformat(timespec="seconds"), "end": self.end.isoformat(timespec="seconds")}

    def __str__(self):
        return str(self.to_serializable_dict())

    @property
    def timedelta(self):
        return self.end - self.start

    @property
    def length_in_days(self):
        return self.timedelta / timedelta(days=1)

    @classmethod
    def from_chunk_dict(cls, d: dict):
        start = datetime.fromisoformat(d["start_date"])
        end = datetime.fromisoformat(d["end_date"])
        return cls(start=start, end=end)


@dataclass(slots=True, frozen=True)
class TimeIntervals:
    time_granularity_type: TimeGranularityType
    time_range: TimeRange

    def to_url_string(self) -> str:
        return (f"(timeRange:{self.time_range.to_url_string()},"
                f"timeGranularityType:{self.time_granularity_type.value})")

    @property
    def amount(self):
        if self.time_granularity_type is TimeGranularityType.DAY:
            return math.ceil(self.time_range.length_in_days)
        elif self.time_granularity_type is TimeGranularityType.MONTH:
            return math.ceil(self.time_range.length_in_days / 30)
        else:
            raise ValueError(f"Impossible TimeGranularityType: {self.time_granularity_type}")

    def to_downloadable_chunks(self) -> Iterator["TimeIntervals"]:
        if self.time_range.timedelta <= MAXIMUM_TIME_RANGE_SIZE:
            return [self]
        else:
            datetime_chunks = split_dates_to_chunks(start_date=self.time_range.start,
                                                    end_date=self.time_range.end,
                                                    intv=MAXIMUM_TIME_RANGE_SIZE.days,
                                                    generator=True)
            return (self.__class__(time_granularity_type=self.time_granularity_type,
                                   time_range=TimeRange.from_chunk_dict(chunk_dict)) for chunk_dict in datetime_chunks)



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import LinkedInPagesExtractor


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = LinkedInPagesExtractor()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-linkedin-pages" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

