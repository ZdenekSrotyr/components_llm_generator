Directory structure:
└── keboola-component-google-nlp/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── categories.csv
    │               ├── categories.csv.manifest
    │               ├── documents.csv
    │               ├── documents.csv.manifest
    │               ├── entities.csv
    │               ├── entities.csv.manifest
    │               ├── errors.csv
    │               ├── errors.csv.manifest
    │               ├── mentions.csv
    │               ├── mentions.csv.manifest
    │               ├── sentences.csv
    │               ├── sentences.csv.manifest
    │               ├── test.csv
    │               ├── tokens.csv
    │               └── tokens.csv.manifest
    ├── example/
    │   └── sample-response.json
    ├── logos/
    ├── scripts/
    │   ├── build_n_test.sh
    │   ├── run.sh
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── client.py
    │   ├── component.py
    │   └── result.py
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
# Google NLP

## Overview

The Google Natual Language API allows users to utilize powerful pre-trained NLP models to understand various language features such as sentiment, entities and mentions, content and syntax. The component utilizes the API to send text features and retrieves desired analysis.

The Cloud Natural Language API is a paid service maintained by Google and is subject to [Google Cloud's Terms & Conditions](https://cloud.google.com/terms/). 

The information about pricing can be found on [Google's support forums](https://cloud.google.com/natural-language/pricing). The API currently supports [these methods and languages](https://cloud.google.com/natural-language/docs/languages).

#### Useful links

If you are new to the natural language processing or are unsure about the meaning of outputted values, the following guides might clear up some of the confusion:

- [Natual Language API Basics](https://cloud.google.com/natural-language/docs/basics)
- [Morphology & Dependency Trees](https://cloud.google.com/natural-language/docs/morphology)
- [HTTP status and error codes for JSON](https://cloud.google.com/storage/docs/json_api/v1/status-codes)

## Requirements

The component requires valid Google Cloud API token with Natural Language API allowed. The API token is subject to [limits](https://cloud.google.com/natural-language/quotas) thus it is important to set the correct daily limits. To overcome the 100 second limits, the application uses exponential backoff with 10 retries. In case, the retries are unsuccessful (i.e. daily limit is reached), the component fails.

## Supported languages & methods

The component supports all of the [languages supported by the API](https://cloud.google.com/natural-language/docs/languages). If the (detected) language isn't supported, the request will be cancelled, the document is skipped and no output is produced for it. All of the language errors are outputted to `errors` table.

The component currently supports following methods:

- `analyzeEntities` - entity analysis,
- `analyzeEntitySentiment` - entity sentiment analysis,
- `analyzeSentiment` - sentiment analysis,
- `analyzeSyntax` - syntactic analysis,
- `classifyText` - content classification.

Note: The component uses API v1. The list of all methods supported by the version is listed in [API reference](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents). Mind that, `annotateText` method is a wrapper for all other methods listed above and does not provide any new information. It is used in the component to bundle [all feature requests into a single API call](https://cloud.google.com/natural-language/docs/basics/#text-annotations).

If a new method is available and you'd like to see it, contact us at [support@keboola.com](mailto:support@keboola.com) or via support ticket.

---

#### Entity analysis (`analyzeEntities`)

The method inspects the document for known entities and returns [information about the entities](https://cloud.google.com/natural-language/docs/basics/#entity_analysis), such as their type, salience and mentions in the text. Moreover, if any metadata (e.g. address, phone number, famous person) is identified, the information on the subject is returned as well (e.g. full address, country code for the phone number, wikipedia article about the person). For more information about metadata, see the [`Entity` type documentation](https://cloud.google.com/natural-language/docs/reference/rest/v1/Entity#type).

For each entity, a list of mentions is returned. The mentions list is always of length at least 1, i.e. each entity has at least one mention.

###### reference: [analyzeEntities](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeEntities), [entity](https://cloud.google.com/natural-language/docs/reference/rest/v1/Entity)

---

#### Entity sentiment analysis (`analyzeEntitySentiment`)

The method returns the same analysis type as `analyzeEntities` method but adds sentiment analysis for each entity and mention in the text, thus [combining both entity and sentiment analysis](https://cloud.google.com/natural-language/docs/basics/#entity-sentiment-analysis). Note that, if both `analyzeEntities` and `analyzeEntitySentiment` methods are used, you will not be charged for both methods; only `analyzeEntitySentiment` will be utilized and billed.

###### reference: [analyzeEntitySentiment](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeEntitySentiment), [entity](https://cloud.google.com/natural-language/docs/reference/rest/v1/Entity)

---

#### Sentiment analysis (`analyzeSentiment`)

The `analyzeSentiment` method inspects the document for [emotional opinion present within the text](https://cloud.google.com/natural-language/docs/basics/#sentiment_analysis) and magnitude of the opinion. The result is the overall attitude of the document (positive, neutral or negative) and of each sentence present within the document. Score and magnitude of the document and sentences can be interpreted according to [this guide](https://cloud.google.com/natural-language/docs/basics/#interpreting_sentiment_analysis_values).

###### reference: [analyzeSentiment](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeSentiment), [sentiment](https://cloud.google.com/natural-language/docs/reference/rest/v1/Sentiment)

---

#### Syntactic analysis (`analyzeSyntax`)

The syntactic analysis breaks up the documents into [sentences and extracts tokens (words)](https://cloud.google.com/natural-language/docs/basics/#syntactic_analysis) from the document. For each token, information about lemma, [part of the speech](https://cloud.google.com/natural-language/docs/reference/rest/v1/Token/#PartOfSpeech) and [depencency index](https://cloud.google.com/natural-language/docs/reference/rest/v1/Token/#DependencyEdge) is added using Cloud Natural Language API. For more information about how to interpret the values, refer to [Syntacting analysis](https://cloud.google.com/natural-language/docs/basics/#syntactic_analysis) guide and [Morphology & Dependency Trees](https://cloud.google.com/natural-language/docs/morphology) guide.

###### reference: [analyzeSyntax](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeSyntax), [token](https://cloud.google.com/natural-language/docs/reference/rest/v1/Token)

---

#### Content classification (`classifyText`)

The `classifyText` method analyzes the document and returns a list of [categories that apply to the text](https://cloud.google.com/natural-language/docs/basics/#content-classification) found in the document. For each category, a confidence level is provided as well as the name of the category. A complete list of all available categories can be found in [Categories section](https://cloud.google.com/natural-language/docs/categories) of API documentation. 

For successful content classification, the document needs to be of certain length (~ 20 words) and must not be too abstract. If the two conditions are not met, no categories are returned.

###### reference: [classifyText](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/classifyText), [ClassificationCategory](https://cloud.google.com/natural-language/docs/reference/rest/v1/ClassificationCategory)

---

## Input and Output

The sample of the configuration, including input & output tables, can be found in the [component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-google-nlp/src/master/component_config/sample-config/). In general, an input table and 3 parameters are required to configure the component.

### Parameters

All of the parameters listed in the section are required. If any of the parameters are not provided or an invalid value is provided, the component will fail. The API key is verified against Cloud API. The sample of the configuration file can be found [here](https://bitbucket.org/kds_consulting_team/kds-team.ex-google-nlp/src/master/component_config/sample-config/config.json).

#### API Key (`#API_key`)

The API key can be obtained in the credentials section of the [Google Cloud Console](https://console.cloud.google.com/apis/credentials). The API key must have Cloud Natural Language API allowed, otherwise, requests will not be authorized. The [limits](https://cloud.google.com/natural-language/quotas) for the token must be specified according to your needs.

#### Analysis Type (`analysis_type`)

A list of methods to be used in the analysis. Supported methods are:

- `analyzeEntities`
- `analyzeEntitySentiment`
- `analyzeSentiment`
- `analyzeSyntax`
- `classifyText`

#### Input Type (`input_type`)

A string represing the type of text inputted into `text` column in the input table. Must be one of the two:

- `PLAIN_TEXT` - a plain text; consumes less characters,
- `HTML` - a html text; consumes more characters as all html tags counted in as well.

### Input table

The input table must contain two required columns `id` and `text` and might contain an optional column `sourceLanguage`. All extra columns are ignored; an exception is raised if any of the required columns is missing. The sample of the table can be found in the [repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-google-nlp/src/master/component_config/sample-config/in/tables/test.csv).

The column descriptions are:

- `id` (required) - ID of a document; make sure the ID is unique as the output data is loaded incrementally,
- `text` (required) - document to be analyzed; might contain html tags if `input_type=HTML` is specified
- `sourceLanguage` (optional) - an [ISO-639-1 language identifier](https://cloud.google.com/translate/docs/languages) of the source language; see section *Supported languages & methods*; if left empty, the API automatically detects the language.

The input table, therefore, might take the following form:

| id 	| text 	| sourceLanguage 	| otherColumn 	|
|----	|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	|----------------	|-------------	|
| 1 	| Keboola brings data engineering and data analytics together on one single platform that anyone can use. One click managed infrastructure, data hub, user provisioning, process automation - all rolled into one platform. Call us at +420 739 632 821 or visit us at Křižíkova 488/115 Prague 8 186 00 	| en 	| foo 	|
| 2 	| Google, headquartered in Mountain View (1600 Amphitheatre Pkwy,  Mountain View, CA 940430), unveiled the new Android phone for  $799 at the Consumer Electronic Show. Sundar Pichai said in his  keynote that users love their new Android phones. 	|  	| bar 	|
| 3 	| This text is too short to use classifyContent method. 	|  	| foobar 	|

### Data splitting

The output of the API is, usually, a quite complicated object, that needs to be parsed and split into multiple tables. For example, the full response body, with all methods used, for the sentence

```
Keboola brings data engineering and data analytics together on one single platform that anyone can use. One click managed infrastructure, data hub, user provisioning, process automation - all rolled into one platform. Call us at +420 739 632 821 or visit us at Křižíkova 488/115 Prague 8 186 00
```

is over 2000 lines long; it can be viewed in [sample examples](https://bitbucket.org/kds_consulting_team/kds-team.ex-google-nlp/src/master/example/sample-response.json). If all methods are used, the result is split into 7 tables:

- `documents`,
- `errors`,
- `sentences`,
- `entities`,
- `mentions`,
- `tokens`,
- `categories`.

All of the tables, except `errors` are loaded incrementally and contain a unique identifier, which is based mainly on document's `id`.

#### Primary keys and relationships

In the following sections, each output table will be discussed, its PK creation process explained and relationship to other tables touched on.

##### `documents`

Contains information about documents, their language and if applicable, sentiment values of the whole document. The table is considered to be a root table, i.e. all other tables are referencing to this table. 

As the primary key, the provided identifier of each document is used. If the NLP analysis fails, for whatever reason, the failed document is not recorded in the table; instead it appears in the `errors` table. If method `analyzeSentiment` is not used, the columns containing information about sentiment values are left empty.

###### Result of: `analyzeEntities`, `analyzeEntitySentiment`, `analyzeSentiment`, `analyzeSyntax`, `classifyText`

##### `errors`

Contains information about warnings and errors sustained during the run of the component. All messages are referencing to `documents` table via column `documentId`.

All of the records contain category of the error, possible value are:

- `categoryError` - error when no category could be identified,
- `nlpError` - error related to Cloud Natural Language API,
- `emptyDocumentError` - error related to document being empty.

If `categoryError` occurs, the process for the document will be retried without the `classifyText` method, unless there are no other methods to be processed. The `nlpError` marks language errors, i.e. unsupported languages for some or all entities, no retry is tried. `emptyDocumentError` causes the process to skip over the document. Additionally, each row contains the message returned by the API for better understanding.

The table is **not** loaded incrementally.

###### Result of: `analyzeEntities`, `analyzeEntitySentiment`, `analyzeSentiment`, `analyzeSyntax`, `classifyText`

##### `sentences`

A child table to `documents`; each child is referenced back via `documentId` column and has a unique identifier, which is created as

```
sentenceId = md5(documentId + '|' + sentence.content + '|' + sentence.beginOffset)
```

where `md5()` is a hashing function, `sentence.content` is a textual representation of the sentence (API output) and `sentence.beginOffset` is a character offset to the start of the sentence (API output).

The table contains information about sentences present in the document. If `analyzeSentiment` is used, the table also contains sentiment value for each of the sentences. In addition to standard API output, column `index` is added manually and marks position of sentence in the document. The indexing columns starts at 0.

###### Result of: `analyzeSentiment`, `analyzeSyntax`

##### `entities`

The table `entities` contains information about proper entities present in the document. Each entity is a child of a document (referenced via `documentId`) and has a unique `entityId` created as

```
entityId = md5(`documentId` + '|' + entity.name)
```

where `entity.name` is the textual representation of the entity. If `analyzeEntitySentiment` method is used, also contains information about sentiment values, otherwise the columns are left empty. 

The table is a parent table to `mentions`.

###### Result of: `analyzeEntities`, `analyzeEntitySentiment`

##### `mentions`

A child table to `entities`, related via `entityId` column. Each entity has one or more mentions, words, which are referencing said entity. Textual representations of mentions for an entity might be duplicate if the same word is used to reference back to the entity, though they are different mentions. 

The column `mentionId`, a primary key, is created as a combination of

```
mentionId = md5(entityId + '|' + mention.content + '|' + mention.beginOffset)
```

where `entityId` is a parent entity, `mention.content` is a word representation of the mention (API output) and `mention.beginOffset` is a character offset of the mention. 

The effect of using `analyzeEntitySentiment` is the same as for `entities` table.

###### Result of: `analyzeEntities`, `analyzeEntitySentiment`

##### `tokens`

A child table to `documents` (foreign key `documentId`), which captures information about tokens in a document. The unique identifier is created by

```
tokenId = md5(documentId + '|' + token.content + '|' + token.beginOffset + '|' + index)
```

where `token.content` is a token name (word), `token.beginOffset` is the character offset of the token in the document and `index` is a tokens position in the document. The index starts at 0 and is useful for creating dependency trees with `token.dependencyEdge` parameters.

###### Result of: `analyzeSyntax`

##### `categories`

Referencing back to `documents` via `documentId` column, the `categories` table contains information about catefories identified using `classifyText` method. The `categoryDocumentId` is a concatenation of category's name and `documentId`, i.e.

```
categoryDocumentId = md5(documentId + '|' + category.name)
```

where `category.name` is the name of the identified category (API output). Each document can have 0 or more categories.

###### Result of: `classifyText`

#### Column descriptions

Due to high number of columns and tables returned by the component, the column descriptions will not be a part of this documentation. However, a great in-depth description is available in [Natual Language API Basics](https://cloud.google.com/natural-language/docs/basics) guide.

## Development

For development purposed the following `docker-compose` commands should be used:

```
docker-compose build dev
docker-compose run --rm dev
```

or 

```
docker-compose up
```

================================================
File: Dockerfile
================================================
FROM python:3.11-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: change_log.md
================================================
**0.3.3**
Pushed the component to ECR, tested out.
Small changes to documentation.

**0.3.2**
Fixed wrong links in documentation.
Added row logging after 500 requests.

**0.3.1**
Removed feature, which would write documents to `documents` table event when error occured. Fine-tuned category classification and added skip mechanism for category to prevent duplicate messages in `errors` table.
Added error category to `errors` to be able to better identify source of errors.
Added sample configuration to the component, as well as descriptions and README.
Small changes to overall code structure.

**0.3.0**
Completely reworked source code that now utilizes KBC library.
All of the requests are sent as one batch request with features and all is returned as a single call. Added retry mechanism for 403 errors (`rateLimitExceeded` or `dailyLimitExceeded`) and added retry for 400 error when using `classifyText` endpoint.

================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command: 
      - /bin/sh
      - /code/scripts/run.sh
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
bs4
logging_gelf
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.4.zip#egg=kbc
keboola.component
keboola.http-client


================================================
File: component_config/component_long_description.md
================================================
# Google NLP

Full documentation is available [here](https://bitbucket.org/kds_consulting_team/kds-team.ex-google-nlp/src/master/README.md)!

## Overview

The Google Natual Language API allows users to utilize powerful pre-trained NLP models to understand various language features such as sentiment, entities and mentions, content and syntax. The component utilizes the API to send text features and retrieves desired analysis.

The Cloud Natural Language API is a paid service maintained by Google and is subject to [Google Cloud's Terms & Conditions](https://cloud.google.com/terms/). 

The information about pricing can be found on [Google's support forums](https://cloud.google.com/natural-language/pricing). The API currently supports [these methods and languages](https://cloud.google.com/natural-language/docs/languages).

#### Useful links

If you are new to the natural language processing or are unsure about the meaning of outputted values, the following guides might clear up some of the confusion:

- [Natual Language API Basics](https://cloud.google.com/natural-language/docs/basics)
- [Morphology & Dependency Trees](https://cloud.google.com/natural-language/docs/morphology)
- [HTTP status and error codes for JSON](https://cloud.google.com/storage/docs/json_api/v1/status-codes)

## Requirements

The component requires valid Google Cloud API token with Natural Language API allowed. The API token is subject to [limits](https://cloud.google.com/natural-language/quotas) thus it is important to set the correct daily limits. To overcome the 100 second limits, the application uses exponential backoff with 10 retries. In case, the retries are unsuccessful (i.e. daily limit is reached), the component fails.

## Supported languages & methods

The component supports all of the [languages supported by the API](https://cloud.google.com/natural-language/docs/languages). If the (detected) language isn't supported, the request will be cancelled, the document is skipped and no output is produced for it. All of the language errors are outputted to `errors` table.

The component currently supports following methods:

- `analyzeEntities` - entity analysis,
- `analyzeEntitySentiment` - entity sentiment analysis,
- `analyzeSentiment` - sentiment analysis,
- `analyzeSyntax` - syntactic analysis,
- `classifyText` - content classification.

Note: The component uses API v1. The list of all methods supported by the version is listed in [API reference](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents). Mind that, `annotateText` method is a wrapper for all other methods listed above and does not provide any new information. It is used in the component to bundle [all feature requests into a single API call](https://cloud.google.com/natural-language/docs/basics/#text-annotations).

If a new method is available and you'd like to see it, contact us at [support@keboola.com](mailto:support@keboola.com) or via support ticket.

---

#### Entity analysis (`analyzeEntities`)

The method inspects the document for known entities and returns [information about the entities](https://cloud.google.com/natural-language/docs/basics/#entity_analysis), such as their type, salience and mentions in the text. Moreover, if any metadata (e.g. address, phone number, famous person) is identified, the information on the subject is returned as well (e.g. full address, country code for the phone number, wikipedia article about the person). For more information about metadata, see the [`Entity` type documentation](https://cloud.google.com/natural-language/docs/reference/rest/v1/Entity#type).

For each entity, a list of mentions is returned. The mentions list is always of length at least 1, i.e. each entity has at least one mention.

###### reference: [analyzeEntities](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeEntities), [entity](https://cloud.google.com/natural-language/docs/reference/rest/v1/Entity)

---

#### Entity sentiment analysis (`analyzeEntitySentiment`)

The method returns the same analysis type as `analyzeEntities` method but adds sentiment analysis for each entity and mention in the text, thus [combining both entity and sentiment analysis](https://cloud.google.com/natural-language/docs/basics/#entity-sentiment-analysis). Note that, if both `analyzeEntities` and `analyzeEntitySentiment` methods are used, you will not be charged for both methods; only `analyzeEntitySentiment` will be utilized and billed.

###### reference: [analyzeEntitySentiment](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeEntitySentiment), [entity](https://cloud.google.com/natural-language/docs/reference/rest/v1/Entity)

---

#### Sentiment analysis (`analyzeSentiment`)

The `analyzeSentiment` method inspects the document for [emotional opinion present within the text](https://cloud.google.com/natural-language/docs/basics/#sentiment_analysis) and magnitude of the opinion. The result is the overall attitude of the document (positive, neutral or negative) and of each sentence present within the document. Score and magnitude of the document and sentences can be interpreted according to [this guide](https://cloud.google.com/natural-language/docs/basics/#interpreting_sentiment_analysis_values).

###### reference: [analyzeSentiment](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeSentiment), [sentiment](https://cloud.google.com/natural-language/docs/reference/rest/v1/Sentiment)

---

#### Syntactic analysis (`analyzeSyntax`)

The syntactic analysis breaks up the documents into [sentences and extracts tokens (words)](https://cloud.google.com/natural-language/docs/basics/#syntactic_analysis) from the document. For each token, information about lemma, [part of the speech](https://cloud.google.com/natural-language/docs/reference/rest/v1/Token/#PartOfSpeech) and [depencency index](https://cloud.google.com/natural-language/docs/reference/rest/v1/Token/#DependencyEdge) is added using Cloud Natural Language API. For more information about how to interpret the values, refer to [Syntacting analysis](https://cloud.google.com/natural-language/docs/basics/#syntactic_analysis) guide and [Morphology & Dependency Trees](https://cloud.google.com/natural-language/docs/morphology) guide.

###### reference: [analyzeSyntax](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeSyntax), [token](https://cloud.google.com/natural-language/docs/reference/rest/v1/Token)

---

#### Content classification (`classifyText`)

The `classifyText` method analyzes the document and returns a list of [categories that apply to the text](https://cloud.google.com/natural-language/docs/basics/#content-classification) found in the document. For each category, a confidence level is provided as well as the name of the category. A complete list of all available categories can be found in [Categories section](https://cloud.google.com/natural-language/docs/categories) of API documentation. 

For successful content classification, the document needs to be of certain length (~ 20 words) and must not be too abstract. If the two conditions are not met, no categories are returned.

###### reference: [classifyText](https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/classifyText), [ClassificationCategory](https://cloud.google.com/natural-language/docs/reference/rest/v1/ClassificationCategory)

================================================
File: component_config/component_short_description.md
================================================
Google Cloud Natural Language API allows to extract text features such as sentiment, entities and mentions, sentences, syntax and category classification, using pre-trained machine learning models.

================================================
File: component_config/configRowSchema.json
================================================
{}

================================================
File: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Configuration",
  "required": [
    "#API_key",
    "analysis_type",
    "input_type"
  ],
  "properties": {
    "#API_key": {
      "type": "string",
      "title": "Google API Key",
      "format": "password",
      "minLength": 4,
      "default": "",
      "description": "For API key, please visit <a href='https://console.cloud.google.com/apis/credentials'>Google Cloud Console</a><ol><li>Create a new API key by clicking: Create credentials -> API Keys</li><li>Use your existing API key and add Natural Language API to API restrictions</li></ol><br>Please, refer to GCP <a href='https://cloud.google.com/natural-language/pricing'>pricing guide</a> for detailed information about the costs of API requests.",
      "propertyOrder": 100
    },
    "analysis_type": {
      "type": "array",
      "title": "Analysis Type",
      "description": "Choose the methods for NLP analysis.</br>Refer to <a href='https://bitbucket.org/kds_consulting_team/kds-team.ex-google-nlp/src/master/README.md'>component documentation</a> for more information.",
      "items": {
        "type": "string",
        "enum": [
          "extractEntitySentiment",
          "extractEntities",
          "extractDocumentSentiment",
          "extractSyntax",
          "classifyText"
        ],
        "options": {
          "enum_titles": [
            "Entities Sentiment",
            "Entities",
            "Document Sentiment",
            "Syntax",
            "Categories"
          ]
        }
      },
      "uniqueItems": true,
      "propertyOrder": 200,
      "format": "checkbox"
    },
    "input_type": {
      "type": "string",
      "title": "Input Type",
      "description": "Choose, whether text input is a plain text or html.",
      "enum": [
        "PLAIN_TEXT",
        "HTML"
      ],
      "uniqueItems": true,
      "propertyOrder": 300,
      "default": "PLAIN_TEXT"
    }
  }
}

================================================
File: component_config/configuration_description.md
================================================
The sample of the configuration, including input & output tables, can be found in the [component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-google-nlp/src/master/component_config/sample-config/). In general, an input table and 3 parameters are required to configure the component.

All of the parameters listed in the section are required. If any of the parameters are not provided or an invalid value is provided, the component will fail. The API key is verified against Cloud API. The sample of the configuration file can be found [here](https://bitbucket.org/kds_consulting_team/kds-team.ex-google-nlp/src/master/component_config/sample-config/config.json).

#### API Key (`#API_key`)

The API key can be obtained in the credentials section of the [Google Cloud Console](https://console.cloud.google.com/apis/credentials). The API key must have Cloud Natural Language API allowed, otherwise, requests will not be authorized. The [limits](https://cloud.google.com/natural-language/quotas) for the token must be specified according to your needs.

#### Analysis Type (`analysis_type`)

A list of methods to be used in the analysis. Supported methods are:

- `analyzeEntities`
- `analyzeEntitySentiment`
- `analyzeSentiment`
- `analyzeSyntax`
- `classifyText`

#### Input Type (`input_type`)

A string represing the type of text inputted into `text` column in the input table. Must be one of the two:

- `PLAIN_TEXT` - a plain text; consumes less characters,
- `HTML` - a html text; consumes more characters as all html tags counted in as well.

### Input table

The input table must contain two required columns `id` and `text` and might contain an optional column `sourceLanguage`. All extra columns are ignored; an exception is raised if any of the required columns is missing. The sample of the table can be found in the [repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-google-nlp/src/master/component_config/sample-config/in/tables/test.csv).

The column descriptions are:

- `id` (required) - ID of a document; make sure the ID is unique as the output data is loaded incrementally,
- `text` (required) - document to be analyzed; might contain html tags if `input_type=HTML` is specified
- `sourceLanguage` (optional) - an [ISO-639-1 language identifier](https://cloud.google.com/translate/docs/languages) of the source language; see section *Supported languages & methods*; if left empty, the API automatically detects the language.

The input table, therefore, might take the following form:

| id 	| text 	| sourceLanguage 	| otherColumn 	|
|----	|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	|----------------	|-------------	|
| 1 	| Keboola brings data engineering and data analytics together on one single platform that anyone can use. One click managed infrastructure, data hub, user provisioning, process automation - all rolled into one platform. Call us at +420 739 632 821 or visit us at Křižíkova 488/115 Prague 8 186 00 	| en 	| foo 	|
| 2 	| Google, headquartered in Mountain View (1600 Amphitheatre Pkwy,  Mountain View, CA 940430), unveiled the new Android phone for  $799 at the Consumer Electronic Show. Sundar Pichai said in his  keynote that users love their new Android phones. 	|  	| bar 	|
| 3 	| This text is too short to use classifyContent method. 	|  	| foobar 	|

================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#API_key": "AIzaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    "analysis_type": ["classifyText", "extractEntitySentiment", "extractDocumentSentiment", "extractSyntax"],
    "input_type": "PLAIN_TEXT"
  },
  "image_parameters": {}
}


================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"id","text","sourceLanguage"
"VERIFY_ALL_METHODS_SUCCESS","Pavol Demitra was a Slovak pebrofessional ice hockey player. He played nineteen seasons of professional hockey, for teams in the Czechoslovak First Ice Hockey League, National Hockey League, Slovak Extraliga, and Kontinental Hockey League. Pavol Demitra scored 211 goals in NHL in his carrer. He died in 2011 in a plane crash near Jaroslavl. Pavol Demitra has died aged 39. The hocker player was considered one of the best in the country.","en"
"FAIL_CATEGORY_RETRY_SUCCESS","Pavol Demitra was a hockey player.","en"
"FAIL_LANGUAGE","Pavol Demitra bol slovensky hokejovy hrac.","sk"
"AUTO_DETECT_LANGUAGE_SUCCESS","Pavol Demitra was a hockey player.",""
"AUTO_DETECT_LANGUAGE_FAIL","Pavol Demitra bol slovensky hokejovy hrac.",""
"EMPTY_STRING","","en"
"AUTO_DETECT_FAIL_LANGUAGE_FR","Je n'ai pas fait mon devoir.",""
"FAIL_LANGUAGE_FR","Je n'ai pas fait mon devoir.","fr"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "id",
        "text",
        "sourceLanguage"
    ],
    "metadata": [],
    "column_metadata": {}
}

================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/out/tables/categories.csv
================================================
"categoryDocumentId","documentId","categoryName","confidence"
"caaf700f35c73e8557db741997728619","VERIFY_ALL_METHODS_SUCCESS","/Sports/Team Sports/Hockey","0.97"


================================================
File: component_config/sample-config/out/tables/categories.csv.manifest
================================================
{"primary_key": ["categoryDocumentId"], "incremental": true}

================================================
File: component_config/sample-config/out/tables/documents.csv
================================================
"documentId","language","sentimentMagnitude","sentimentScore"
"VERIFY_ALL_METHODS_SUCCESS","en","1.9","0.1"
"AUTO_DETECT_LANGUAGE_SUCCESS","en","0","0"


================================================
File: component_config/sample-config/out/tables/documents.csv.manifest
================================================
{"primary_key": ["documentId"], "incremental": true}

================================================
File: component_config/sample-config/out/tables/entities.csv
================================================
"entityId","documentId","name","type","salience","metadata","sentimentMagnitude","sentimentScore"
"5d1a8876252477b10844739565eb3b9a","VERIFY_ALL_METHODS_SUCCESS","Pavol Demitra","PERSON","0.72309697","{""mid"": ""/m/037gq2"", ""wikipedia_url"": ""https://en.wikipedia.org/wiki/Pavol_Demitra""}","1.3","-0.1"
"1598ceb9d61615757396b4d0bf57bb7c","VERIFY_ALL_METHODS_SUCCESS","Slovak","LOCATION","0.07527902","","0","0"
"13d4f681f8ed7fa3273979bab0e82497","VERIFY_ALL_METHODS_SUCCESS","hockey","OTHER","0.035294246","","0.9","0.9"
"a6ddd9ecdd42ed60a4effa718ba2c4f4","VERIFY_ALL_METHODS_SUCCESS","teams","ORGANIZATION","0.02378612","","0","0"
"33e94158a42c2f85f2403af4e8781997","VERIFY_ALL_METHODS_SUCCESS","National Hockey League","ORGANIZATION","0.018687313","{""mid"": ""/m/05gwr"", ""wikipedia_url"": ""https://en.wikipedia.org/wiki/National_Hockey_League""}","0.4","0.1"
"1479ccf04e0c4d5ab44462047e5c9b30","VERIFY_ALL_METHODS_SUCCESS","hocker player","PERSON","0.017425364","","0.2","0.2"
"e955fb5921b7676ca559955b9ad9f306","VERIFY_ALL_METHODS_SUCCESS","carrer","OTHER","0.014896005","","0","0"
"a82ee0a436b676f3c0eed94a18275b6e","VERIFY_ALL_METHODS_SUCCESS","goals","OTHER","0.014896005","","0","0"
"79a8804323001c19ed95f9719a243463","VERIFY_ALL_METHODS_SUCCESS","Kontinental Hockey League","ORGANIZATION","0.01205511","{""mid"": ""/m/03ykpkx"", ""wikipedia_url"": ""https://en.wikipedia.org/wiki/Kontinental_Hockey_League""}","0.3","0.3"
"007e8762116e3a37322ddd1ca66449d1","VERIFY_ALL_METHODS_SUCCESS","Czechoslovak First Ice Hockey League","ORGANIZATION","0.011908517","{""mid"": ""/m/0dh_k_"", ""wikipedia_url"": ""https://en.wikipedia.org/wiki/Czechoslovak_First_Ice_Hockey_League""}","0","0"
"9c2fef6ea7287a29ac19a95c21772b69","VERIFY_ALL_METHODS_SUCCESS","seasons","EVENT","0.011722738","","0.8","0.8"
"fa44160d33b51611a728139e33614203","VERIFY_ALL_METHODS_SUCCESS","Slovak Extraliga","ORGANIZATION","0.009668272","{""mid"": ""/m/06pyy_"", ""wikipedia_url"": ""https://en.wikipedia.org/wiki/Tipsport_liga_(hockey)""}","0","0"
"d475c6aa5001427abb35db1e41fe1f4b","VERIFY_ALL_METHODS_SUCCESS","one","PERSON","0.007814933","","0.5","0.5"
"7c87d5215bc5c7a2e87488f263efd6d4","VERIFY_ALL_METHODS_SUCCESS","best","OTHER","0.007814933","","0.9","0.9"
"f70f42d36158bb7ef8dcef45c6c7f3fa","VERIFY_ALL_METHODS_SUCCESS","country","LOCATION","0.007814933","","0.3","0.3"
"1bf99f03131c79ee0798d1984801ec9a","VERIFY_ALL_METHODS_SUCCESS","plane crash","EVENT","0.004926258","","0.7","-0.7"
"46aaabc4e99cd0b17b2eb8a1b41a0c8a","VERIFY_ALL_METHODS_SUCCESS","Jaroslavl","LOCATION","0.0029132888","{""mid"": ""/m/0196_0"", ""wikipedia_url"": ""https://en.wikipedia.org/wiki/Yaroslavl""}","0","0"
"962c829748f8435d5ec466cad738d4d6","AUTO_DETECT_LANGUAGE_SUCCESS","Pavol Demitra","PERSON","1","{""mid"": ""/m/037gq2"", ""wikipedia_url"": ""https://en.wikipedia.org/wiki/Pavol_Demitra""}","0","0"


================================================
File: component_config/sample-config/out/tables/entities.csv.manifest
================================================
{"primary_key": ["entityId"], "incremental": true}

================================================
File: component_config/sample-config/out/tables/errors.csv
================================================
"documentId","category","severity","message"
"FAIL_CATEGORY_RETRY_SUCCESS","categoryError","WARNING","Invalid text content: too few tokens (words) to process. Retrying without classifyText method."
"FAIL_LANGUAGE","nlpError","ERROR","The language sk is not supported for syntax analysis."
"AUTO_DETECT_LANGUAGE_SUCCESS","categoryError","WARNING","No category detected for document AUTO_DETECT_LANGUAGE_SUCCESS."
"AUTO_DETECT_LANGUAGE_FAIL","nlpError","ERROR","The language sk is not supported for syntax analysis."
"EMPTY_STRING","emptyDocumentError","WARNING","The document EMPTY_STRING is empty and was skipped."
"AUTO_DETECT_FAIL_LANGUAGE_FR","nlpError","ERROR","The language fr is not supported for entity_sentiment analysis."
"FAIL_LANGUAGE_FR","nlpError","ERROR","The language fr is not supported for entity_sentiment analysis."


================================================
File: component_config/sample-config/out/tables/errors.csv.manifest
================================================
{"primary_key": [], "incremental": false}

================================================
File: component_config/sample-config/out/tables/mentions.csv
================================================
"mentionId","entityId","textContent","textOffset","type","sentimentMagnitude","sentimentScore"
"dcb0db7ac707bb1e0b2d8790b5eea331","5d1a8876252477b10844739565eb3b9a","Pavol Demitra","0","PROPER","0","0"
"2618d38b89f8923ab4dd62607493b711","5d1a8876252477b10844739565eb3b9a","ice hockey player","42","COMMON","0","0"
"5354a6339377c8cec21b4278e8176542","5d1a8876252477b10844739565eb3b9a","Pavol Demitra","241","PROPER","0.1","-0.1"
"c2744812d96b7c1f17a51c2c906ac50f","5d1a8876252477b10844739565eb3b9a","Pavol Demitra","343","PROPER","0.7","-0.7"
"90ff0e27dc7929d32a6be6b4f4a16111","1598ceb9d61615757396b4d0bf57bb7c","Slovak","20","PROPER","0","0"
"8aea1aaec2d8941282610787f9a963ff","13d4f681f8ed7fa3273979bab0e82497","hockey","104","COMMON","0.9","0.9"
"555d3b77d0e4ac5e354104a6bc41856a","a6ddd9ecdd42ed60a4effa718ba2c4f4","teams","116","COMMON","0","0"
"4996f8c91a36df167199eda349c6a0d9","33e94158a42c2f85f2403af4e8781997","National Hockey League","167","PROPER","0.3","0.3"
"d86936306b7297436608a99b2986e732","33e94158a42c2f85f2403af4e8781997","NHL","275","PROPER","0","0"
"0d49f1adc20b5d2b85f7aa36f746b935","1479ccf04e0c4d5ab44462047e5c9b30","hocker player","379","COMMON","0.2","0.2"
"c6777d8cbe6972ad71e3542c5b031d10","e955fb5921b7676ca559955b9ad9f306","carrer","286","COMMON","0","0"
"e07d01b91034c36ce482355757000d34","a82ee0a436b676f3c0eed94a18275b6e","goals","266","COMMON","0","0"
"f217479eab57560fa7175bbe4bfafd12","79a8804323001c19ed95f9719a243463","Kontinental Hockey League","213","PROPER","0.3","0.3"
"86562224037bfb73d3aec63a80ffe506","007e8762116e3a37322ddd1ca66449d1","Czechoslovak First Ice Hockey League","129","PROPER","0","0"
"ab8c6554ced49a4eedca1b1cae697d4b","9c2fef6ea7287a29ac19a95c21772b69","seasons","80","COMMON","0.8","0.8"
"da5453280b1f2f0dbebefcfde31ab624","fa44160d33b51611a728139e33614203","Slovak Extraliga","191","PROPER","0","0"
"022505a7fd40f84b2347c2112ddd3020","d475c6aa5001427abb35db1e41fe1f4b","one","408","COMMON","0.5","0.5"
"db79add31ec380c380abbe3597c17461","7c87d5215bc5c7a2e87488f263efd6d4","best","419","COMMON","0.9","0.9"
"80f7b547ada87ea449d11c3b7132aa62","f70f42d36158bb7ef8dcef45c6c7f3fa","country","431","COMMON","0.3","0.3"
"110f51cdb7307632d9db25442944dd32","1bf99f03131c79ee0798d1984801ec9a","plane crash","315","COMMON","0.7","-0.7"
"265d62353b20cecc16684063fcb24bb8","46aaabc4e99cd0b17b2eb8a1b41a0c8a","Jaroslavl","332","PROPER","0","0"
"ad28daacc59ff280bb6677045f3934f5","962c829748f8435d5ec466cad738d4d6","Pavol Demitra","0","PROPER","0","0"
"15c758675251b067006c45153660a005","962c829748f8435d5ec466cad738d4d6","hockey player","20","COMMON","0","0"


================================================
File: component_config/sample-config/out/tables/mentions.csv.manifest
================================================
{"primary_key": ["mentionId"], "incremental": true}

================================================
File: component_config/sample-config/out/tables/sentences.csv
================================================
"sentenceId","documentId","index","textContent","textOffset","sentimentMagnitude","sentimentScore"
"02a1b8b9ee6a8cba3117da7b7d4b7a29","VERIFY_ALL_METHODS_SUCCESS","0","Pavol Demitra was a Slovak pebrofessional ice hockey player.","0","0","0"
"ef1a0130ee591131103c96d5654808c6","VERIFY_ALL_METHODS_SUCCESS","1","He played nineteen seasons of professional hockey, for teams in the Czechoslovak First Ice Hockey League, National Hockey League, Slovak Extraliga, and Kontinental Hockey League.","61","0.8","0.8"
"dc9aa8a565c58b6c4a7545259b1f0e71","VERIFY_ALL_METHODS_SUCCESS","2","Pavol Demitra scored 211 goals in NHL in his carrer.","241","0","0"
"33e16b63d1a5c3337bf521c41722bf45","VERIFY_ALL_METHODS_SUCCESS","3","He died in 2011 in a plane crash near Jaroslavl.","294","0.3","-0.3"
"d51d901cbff2b3d9401cd37ff6190d83","VERIFY_ALL_METHODS_SUCCESS","4","Pavol Demitra has died aged 39.","343","0","0"
"9e2435be82dabfb4206836a8f17a3615","VERIFY_ALL_METHODS_SUCCESS","5","The hocker player was considered one of the best in the country.","375","0.7","0.7"
"50c5d54107f8ff62ca075af37bfb8a90","AUTO_DETECT_LANGUAGE_SUCCESS","0","Pavol Demitra was a hockey player.","0","0","0"


================================================
File: component_config/sample-config/out/tables/sentences.csv.manifest
================================================
{"primary_key": ["sentenceId"], "incremental": true}

================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/out/tables/tokens.csv
================================================
"tokenId","documentId","textContent","textOffset","lemma","index","partOfSpeech_tag","partOfSpeech_aspect","partOfSpeech_case","partOfSpeech_form","partOfSpeech_gender","partOfSpeech_mood","partOfSpeech_number","partOfSpeech_person","partOfSpeech_proper","partOfSpeech_reciprocity","partOfSpeech_tense","partOfSpeech_voice","dependencyEdge_headTokenIndex","dependencyEdge_label"
"2b798965ca6d69a7a9f05d778950ba30","VERIFY_ALL_METHODS_SUCCESS","Pavol","0","Pavol","0","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","1","NN"
"0be8b2eba35c6c794a42aa56dd55f2ef","VERIFY_ALL_METHODS_SUCCESS","Demitra","6","Demitra","1","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","2","NSUBJ"
"691970c40423997a549cefee32cb7d53","VERIFY_ALL_METHODS_SUCCESS","was","14","be","2","VERB","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","INDICATIVE","SINGULAR","THIRD","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","PAST","VOICE_UNKNOWN","2","ROOT"
"422d07bd4ef2554fa907f396be8095aa","VERIFY_ALL_METHODS_SUCCESS","a","18","a","3","DET","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","8","DET"
"caeea2244612fc69e8fbcfc290d19630","VERIFY_ALL_METHODS_SUCCESS","Slovak","20","Slovak","4","ADJ","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","8","AMOD"
"1d81f9ba9b2f838ea90ab2ea93a69d23","VERIFY_ALL_METHODS_SUCCESS","pebrofessional","27","pebrofessional","5","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","6","NN"
"c27a8b9599e97452b29e91c2a0d33756","VERIFY_ALL_METHODS_SUCCESS","ice","42","ice","6","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","8","NN"
"1567ae92644df80cd93a143362e6879b","VERIFY_ALL_METHODS_SUCCESS","hockey","46","hockey","7","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","8","NN"
"896c8778e70a56461433e24d92bd7823","VERIFY_ALL_METHODS_SUCCESS","player","53","player","8","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","2","ATTR"
"0c7dd92457b83c3d7d35553ed2fa4f2d","VERIFY_ALL_METHODS_SUCCESS",".","59",".","9","PUNCT","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","2","P"
"15f48933da152f24c65aab3846fbff56","VERIFY_ALL_METHODS_SUCCESS","He","61","He","10","PRON","ASPECT_UNKNOWN","NOMINATIVE","FORM_UNKNOWN","MASCULINE","MOOD_UNKNOWN","SINGULAR","THIRD","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","11","NSUBJ"
"ebdfccf20dd6bd3cd5645cb97d0c9bba","VERIFY_ALL_METHODS_SUCCESS","played","64","play","11","VERB","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","INDICATIVE","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","PAST","VOICE_UNKNOWN","11","ROOT"
"2aa924e79620c566f77fd56f6cda09cf","VERIFY_ALL_METHODS_SUCCESS","nineteen","71","nineteen","12","NUM","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","13","NUM"
"801f1ae7275f6795d472d899994dc96c","VERIFY_ALL_METHODS_SUCCESS","seasons","80","season","13","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","PLURAL","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","11","DOBJ"
"29d6fe8f9f16ec7512e005eb2dbc51ff","VERIFY_ALL_METHODS_SUCCESS","of","88","of","14","ADP","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","13","PREP"
"85835affad5c7da0a3d3ef952139a0b2","VERIFY_ALL_METHODS_SUCCESS","professional","91","professional","15","ADJ","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","16","AMOD"
"b038ae88e71516121f84f050650f7415","VERIFY_ALL_METHODS_SUCCESS","hockey","104","hockey","16","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","14","POBJ"
"46a7f2aa292e7cda3741814654a67194","VERIFY_ALL_METHODS_SUCCESS",",","110",",","17","PUNCT","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","11","P"
"a48752b9cd8e220b99a79584ca8c4678","VERIFY_ALL_METHODS_SUCCESS","for","112","for","18","ADP","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","11","PREP"
"0ca9765aeede69b01c9e9a05654fda13","VERIFY_ALL_METHODS_SUCCESS","teams","116","team","19","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","PLURAL","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","18","POBJ"
"6700b9bb7c2d60fad7a07355cb8a324a","VERIFY_ALL_METHODS_SUCCESS","in","122","in","20","ADP","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","19","PREP"
"1fc2960cebb3fd37542219a6d3a5c5a0","VERIFY_ALL_METHODS_SUCCESS","the","125","the","21","DET","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","DET"
"5411a7a025fd8786f40f8163b2dc0de6","VERIFY_ALL_METHODS_SUCCESS","Czechoslovak","129","Czechoslovak","22","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","NN"
"ac4423d79b8e9e22148b4328fcf3f93b","VERIFY_ALL_METHODS_SUCCESS","First","142","First","23","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","NN"
"f43a19f08a1226a6bce7297e51b20e2a","VERIFY_ALL_METHODS_SUCCESS","Ice","148","Ice","24","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","NN"
"fd04425cdfcc13e8cf87ea943d613f8a","VERIFY_ALL_METHODS_SUCCESS","Hockey","152","Hockey","25","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","NN"
"3727b5c47422c4d6697b54e9f3a5785b","VERIFY_ALL_METHODS_SUCCESS","League","159","League","26","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","20","POBJ"
"2ca12bf2d7463c199fb47cb7a8822b39","VERIFY_ALL_METHODS_SUCCESS",",","165",",","27","PUNCT","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","P"
"ac97d1bb710b2c37d08a264ce2d8822c","VERIFY_ALL_METHODS_SUCCESS","National","167","National","28","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","30","NN"
"c3ed470fce85955d56d3d2da5991469c","VERIFY_ALL_METHODS_SUCCESS","Hockey","176","Hockey","29","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","30","NN"
"1c8c919eec2039be2b409c9f0991c36b","VERIFY_ALL_METHODS_SUCCESS","League","183","League","30","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","CONJ"
"8d68fb74a1863edc0e5f519656ccad9f","VERIFY_ALL_METHODS_SUCCESS",",","189",",","31","PUNCT","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","P"
"31fbcba79eac1b8415435cb30265daef","VERIFY_ALL_METHODS_SUCCESS","Slovak","191","Slovak","32","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","33","NN"
"063e3d6947a7a24bc5139782c7bed773","VERIFY_ALL_METHODS_SUCCESS","Extraliga","198","Extraliga","33","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","CONJ"
"8788da4e4809c173e127702d5371160c","VERIFY_ALL_METHODS_SUCCESS",",","207",",","34","PUNCT","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","P"
"6b91e9b195b98d37fd1d938c269b8b5e","VERIFY_ALL_METHODS_SUCCESS","and","209","and","35","CONJ","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","CC"
"e8d0239361feeb842494474808d8f72b","VERIFY_ALL_METHODS_SUCCESS","Kontinental","213","Kontinental","36","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","38","NN"
"c7d819aa6f034bfea7e6025ef9ab378e","VERIFY_ALL_METHODS_SUCCESS","Hockey","225","Hockey","37","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","38","NN"
"6a17631ceb6ed2df8cd1a84408be1e23","VERIFY_ALL_METHODS_SUCCESS","League","232","League","38","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","26","CONJ"
"132f840b913fa3ab3bf0832051082e5f","VERIFY_ALL_METHODS_SUCCESS",".","238",".","39","PUNCT","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","11","P"
"8d1b600d90488f825ade44aaead1fd09","VERIFY_ALL_METHODS_SUCCESS","Pavol","241","Pavol","40","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","41","NN"
"597f23c143154658956c89a5de8ae828","VERIFY_ALL_METHODS_SUCCESS","Demitra","247","Demitra","41","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","42","NSUBJ"
"2354f0592ff329e4f8db729aeddaa6a5","VERIFY_ALL_METHODS_SUCCESS","scored","255","score","42","VERB","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","INDICATIVE","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","PAST","VOICE_UNKNOWN","42","ROOT"
"723f0bef7c5ec08203d06b23958703fc","VERIFY_ALL_METHODS_SUCCESS","211","262","211","43","NUM","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","44","NUM"
"0fc47b50cf9969977d61bb78bd601e2b","VERIFY_ALL_METHODS_SUCCESS","goals","266","goal","44","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","PLURAL","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","42","DOBJ"
"427284d7d330c1bb3169c000cff12adb","VERIFY_ALL_METHODS_SUCCESS","in","272","in","45","ADP","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","44","PREP"
"8e1e50d4e86fd8cbce5aa890fd670478","VERIFY_ALL_METHODS_SUCCESS","NHL","275","NHL","46","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","45","POBJ"
"e08a363f381b5eec33b08ee664ba1e89","VERIFY_ALL_METHODS_SUCCESS","in","279","in","47","ADP","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","42","PREP"
"dda99f2b85d26e45c68ef8903b0a43a8","VERIFY_ALL_METHODS_SUCCESS","his","282","his","48","PRON","ASPECT_UNKNOWN","GENITIVE","FORM_UNKNOWN","MASCULINE","MOOD_UNKNOWN","SINGULAR","THIRD","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","49","POSS"
"bee8b4e2df546543ce71bb1dca188471","VERIFY_ALL_METHODS_SUCCESS","carrer","286","carrer","49","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","47","POBJ"
"077a82b486c067501edbce07ed630c6c","VERIFY_ALL_METHODS_SUCCESS",".","292",".","50","PUNCT","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","42","P"
"9a14b8d9840272962af2f76220d251e6","VERIFY_ALL_METHODS_SUCCESS","He","294","He","51","PRON","ASPECT_UNKNOWN","NOMINATIVE","FORM_UNKNOWN","MASCULINE","MOOD_UNKNOWN","SINGULAR","THIRD","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","52","NSUBJ"
"ccae00fd8bc2b8d7f2dcdc0aff59dc0b","VERIFY_ALL_METHODS_SUCCESS","died","297","die","52","VERB","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","INDICATIVE","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","PAST","VOICE_UNKNOWN","52","ROOT"
"005c91dbdd4e48d715461f5fa56fa6ee","VERIFY_ALL_METHODS_SUCCESS","in","302","in","53","ADP","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","52","PREP"
"846e7404ef634f97db4d659363b936bb","VERIFY_ALL_METHODS_SUCCESS","2011","305","2011","54","NUM","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","53","POBJ"
"3673212dd314e04bc8f9b1d81b144379","VERIFY_ALL_METHODS_SUCCESS","in","310","in","55","ADP","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","52","PREP"
"7c7d1e5ea488eca3ab49a1186b82e96b","VERIFY_ALL_METHODS_SUCCESS","a","313","a","56","DET","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","58","DET"
"2f4a48837043085264048ea45bf8169f","VERIFY_ALL_METHODS_SUCCESS","plane","315","plane","57","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","58","NN"
"ba3f94af1063d73c3c60f93a4e2f56fd","VERIFY_ALL_METHODS_SUCCESS","crash","321","crash","58","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","55","POBJ"
"276290b820ef11230a8168106b67f3c2","VERIFY_ALL_METHODS_SUCCESS","near","327","near","59","ADP","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","58","PREP"
"7baf9f899af67f312b265a48bcddaf93","VERIFY_ALL_METHODS_SUCCESS","Jaroslavl","332","Jaroslavl","60","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","59","POBJ"
"ba743774fb9ccaf4ccd6ec23f89edcfe","VERIFY_ALL_METHODS_SUCCESS",".","341",".","61","PUNCT","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","52","P"
"1f4f72d80999e7d513d7efc5eebba249","VERIFY_ALL_METHODS_SUCCESS","Pavol","343","Pavol","62","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","63","NN"
"9f436b40db04ea530643814f90e3618e","VERIFY_ALL_METHODS_SUCCESS","Demitra","349","Demitra","63","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","65","NSUBJ"
"d9a6a3e40e807aaa8914b184ea7a131b","VERIFY_ALL_METHODS_SUCCESS","has","357","have","64","VERB","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","INDICATIVE","SINGULAR","THIRD","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","PRESENT","VOICE_UNKNOWN","65","AUX"
"3a7c818567f9b4a872a0e90e31e0dd9f","VERIFY_ALL_METHODS_SUCCESS","died","361","die","65","VERB","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","PAST","VOICE_UNKNOWN","65","ROOT"
"14037227a9db8010e0a59d3c3dbcf386","VERIFY_ALL_METHODS_SUCCESS","aged","366","aged","66","ADJ","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","65","ACOMP"
"c6e7c763101398ffc2d5a2454867486e","VERIFY_ALL_METHODS_SUCCESS","39","371","39","67","NUM","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","66","DEP"
"11c08962e081940c10e5ce01f59d710c","VERIFY_ALL_METHODS_SUCCESS",".","373",".","68","PUNCT","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","65","P"
"2c303d2d1f509b0327bf77b105c70529","VERIFY_ALL_METHODS_SUCCESS","The","375","The","69","DET","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","71","DET"
"73fed98d0fa758d12ccd204bce079756","VERIFY_ALL_METHODS_SUCCESS","hocker","379","hocker","70","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","71","NN"
"31b266fb1853f793f7104f97bf0e8f26","VERIFY_ALL_METHODS_SUCCESS","player","386","player","71","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","73","NSUBJPASS"
"cccfa9b0ce55696218417381b5a46a26","VERIFY_ALL_METHODS_SUCCESS","was","393","be","72","VERB","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","INDICATIVE","SINGULAR","THIRD","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","PAST","VOICE_UNKNOWN","73","AUXPASS"
"27b8c71f841cdc2d69212b68530cd6ea","VERIFY_ALL_METHODS_SUCCESS","considered","397","consider","73","VERB","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","PAST","PASSIVE","73","ROOT"
"1adb23c14a14f6aa4a53fc934fe89492","VERIFY_ALL_METHODS_SUCCESS","one","408","one","74","NUM","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","73","ATTR"
"4fbd4355747697ac2d96d8ca79701cfa","VERIFY_ALL_METHODS_SUCCESS","of","412","of","75","ADP","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","74","PREP"
"1a0f5a0c459ff4d488f3ab7ec1aaa234","VERIFY_ALL_METHODS_SUCCESS","the","415","the","76","DET","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","77","DET"
"e1412872967e9702a9f9f64e0c481325","VERIFY_ALL_METHODS_SUCCESS","best","419","good","77","ADJ","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","75","POBJ"
"1ec47c2ae2c3c86bc51709f573beead1","VERIFY_ALL_METHODS_SUCCESS","in","424","in","78","ADP","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","77","PREP"
"f42c8f4550cb8b4b03248fb49787e68f","VERIFY_ALL_METHODS_SUCCESS","the","427","the","79","DET","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","80","DET"
"43a9eaedf12c9953ca03ea0c31fe4b55","VERIFY_ALL_METHODS_SUCCESS","country","431","country","80","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","78","POBJ"
"abf83183a383402c472597907e6aa64e","VERIFY_ALL_METHODS_SUCCESS",".","438",".","81","PUNCT","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","73","P"
"575ae6748e2c58f1c49e44f1c4977540","AUTO_DETECT_LANGUAGE_SUCCESS","Pavol","0","Pavol","0","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","1","NN"
"fb5d0ac4e75d432c24db812bd0a310a5","AUTO_DETECT_LANGUAGE_SUCCESS","Demitra","6","Demitra","1","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","2","NSUBJ"
"882f8a33cf27a6ff10f41bdc3d45e13e","AUTO_DETECT_LANGUAGE_SUCCESS","was","14","be","2","VERB","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","INDICATIVE","SINGULAR","THIRD","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","PAST","VOICE_UNKNOWN","2","ROOT"
"1fee3332daaaab68716c801e9c764307","AUTO_DETECT_LANGUAGE_SUCCESS","a","18","a","3","DET","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","5","DET"
"12716749e1d0fe64dc26e65627c975e5","AUTO_DETECT_LANGUAGE_SUCCESS","hockey","20","hockey","4","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","5","NN"
"94578027fa46ed2c5b91cf2b0b14350b","AUTO_DETECT_LANGUAGE_SUCCESS","player","27","player","5","NOUN","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","SINGULAR","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","2","ATTR"
"4f0262ddc0f2a7be54b42dba773a98fb","AUTO_DETECT_LANGUAGE_SUCCESS",".","33",".","6","PUNCT","ASPECT_UNKNOWN","CASE_UNKNOWN","FORM_UNKNOWN","GENDER_UNKNOWN","MOOD_UNKNOWN","NUMBER_UNKNOWN","PERSON_UNKNOWN","PROPER_UNKNOWN","RECIPROCITY_UNKNOWN","TENSE_UNKNOWN","VOICE_UNKNOWN","2","P"


================================================
File: component_config/sample-config/out/tables/tokens.csv.manifest
================================================
{"primary_key": ["tokenId"], "incremental": true}

================================================
File: example/sample-response.json
================================================
{
  "sentences": [
    {
      "text": {
        "content": "Keboola brings data engineering and data analytics together on one single platform that anyone can use.",
        "beginOffset": 0
      },
      "sentiment": {
        "magnitude": 0.4,
        "score": 0.4
      }
    },
    {
      "text": {
        "content": "One click managed infrastructure, data hub, user provisioning, process automation - all rolled into one platform.",
        "beginOffset": 104
      },
      "sentiment": {
        "magnitude": 0.4,
        "score": 0.4
      }
    },
    {
      "text": {
        "content": "Call us at +420 739 632 821 or visit us at Křižíkova 488/115 Prague 8 186 00",
        "beginOffset": 218
      },
      "sentiment": {
        "magnitude": 0.2,
        "score": 0.2
      }
    }
  ],
  "tokens": [
    {
      "text": {
        "content": "Keboola",
        "beginOffset": 0
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 1,
        "label": "NSUBJ"
      },
      "lemma": "Keboola"
    },
    {
      "text": {
        "content": "brings",
        "beginOffset": 8
      },
      "partOfSpeech": {
        "tag": "VERB",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "INDICATIVE",
        "number": "SINGULAR",
        "person": "THIRD",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "PRESENT",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 1,
        "label": "ROOT"
      },
      "lemma": "bring"
    },
    {
      "text": {
        "content": "data",
        "beginOffset": 15
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 3,
        "label": "NN"
      },
      "lemma": "data"
    },
    {
      "text": {
        "content": "engineering",
        "beginOffset": 20
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 1,
        "label": "DOBJ"
      },
      "lemma": "engineering"
    },
    {
      "text": {
        "content": "and",
        "beginOffset": 32
      },
      "partOfSpeech": {
        "tag": "CONJ",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 3,
        "label": "CC"
      },
      "lemma": "and"
    },
    {
      "text": {
        "content": "data",
        "beginOffset": 36
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 6,
        "label": "NN"
      },
      "lemma": "data"
    },
    {
      "text": {
        "content": "analytics",
        "beginOffset": 41
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 3,
        "label": "CONJ"
      },
      "lemma": "analytic"
    },
    {
      "text": {
        "content": "together",
        "beginOffset": 51
      },
      "partOfSpeech": {
        "tag": "ADV",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 1,
        "label": "ADVMOD"
      },
      "lemma": "together"
    },
    {
      "text": {
        "content": "on",
        "beginOffset": 60
      },
      "partOfSpeech": {
        "tag": "ADP",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 1,
        "label": "PREP"
      },
      "lemma": "on"
    },
    {
      "text": {
        "content": "one",
        "beginOffset": 63
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 11,
        "label": "NUM"
      },
      "lemma": "one"
    },
    {
      "text": {
        "content": "single",
        "beginOffset": 67
      },
      "partOfSpeech": {
        "tag": "ADJ",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 11,
        "label": "AMOD"
      },
      "lemma": "single"
    },
    {
      "text": {
        "content": "platform",
        "beginOffset": 74
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 8,
        "label": "POBJ"
      },
      "lemma": "platform"
    },
    {
      "text": {
        "content": "that",
        "beginOffset": 83
      },
      "partOfSpeech": {
        "tag": "DET",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 15,
        "label": "DOBJ"
      },
      "lemma": "that"
    },
    {
      "text": {
        "content": "anyone",
        "beginOffset": 88
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 15,
        "label": "NSUBJ"
      },
      "lemma": "anyone"
    },
    {
      "text": {
        "content": "can",
        "beginOffset": 95
      },
      "partOfSpeech": {
        "tag": "VERB",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 15,
        "label": "AUX"
      },
      "lemma": "can"
    },
    {
      "text": {
        "content": "use",
        "beginOffset": 99
      },
      "partOfSpeech": {
        "tag": "VERB",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 11,
        "label": "RCMOD"
      },
      "lemma": "use"
    },
    {
      "text": {
        "content": ".",
        "beginOffset": 102
      },
      "partOfSpeech": {
        "tag": "PUNCT",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 1,
        "label": "P"
      },
      "lemma": "."
    },
    {
      "text": {
        "content": "One",
        "beginOffset": 104
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 18,
        "label": "NUM"
      },
      "lemma": "One"
    },
    {
      "text": {
        "content": "click",
        "beginOffset": 108
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "IMPERATIVE",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 19,
        "label": "NSUBJ"
      },
      "lemma": "click"
    },
    {
      "text": {
        "content": "managed",
        "beginOffset": 114
      },
      "partOfSpeech": {
        "tag": "VERB",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "INDICATIVE",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "PAST",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 19,
        "label": "ROOT"
      },
      "lemma": "manage"
    },
    {
      "text": {
        "content": "infrastructure",
        "beginOffset": 122
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 32,
        "label": "NSUBJ"
      },
      "lemma": "infrastructure"
    },
    {
      "text": {
        "content": ",",
        "beginOffset": 136
      },
      "partOfSpeech": {
        "tag": "PUNCT",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 20,
        "label": "P"
      },
      "lemma": ","
    },
    {
      "text": {
        "content": "data",
        "beginOffset": 138
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 23,
        "label": "NN"
      },
      "lemma": "data"
    },
    {
      "text": {
        "content": "hub",
        "beginOffset": 143
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 20,
        "label": "CONJ"
      },
      "lemma": "hub"
    },
    {
      "text": {
        "content": ",",
        "beginOffset": 146
      },
      "partOfSpeech": {
        "tag": "PUNCT",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 20,
        "label": "P"
      },
      "lemma": ","
    },
    {
      "text": {
        "content": "user",
        "beginOffset": 148
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 26,
        "label": "NN"
      },
      "lemma": "user"
    },
    {
      "text": {
        "content": "provisioning",
        "beginOffset": 153
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 20,
        "label": "APPOS"
      },
      "lemma": "provisioning"
    },
    {
      "text": {
        "content": ",",
        "beginOffset": 165
      },
      "partOfSpeech": {
        "tag": "PUNCT",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 20,
        "label": "P"
      },
      "lemma": ","
    },
    {
      "text": {
        "content": "process",
        "beginOffset": 167
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 29,
        "label": "NN"
      },
      "lemma": "process"
    },
    {
      "text": {
        "content": "automation",
        "beginOffset": 175
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 20,
        "label": "APPOS"
      },
      "lemma": "automation"
    },
    {
      "text": {
        "content": "-",
        "beginOffset": 186
      },
      "partOfSpeech": {
        "tag": "PUNCT",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 20,
        "label": "P"
      },
      "lemma": "-"
    },
    {
      "text": {
        "content": "all",
        "beginOffset": 188
      },
      "partOfSpeech": {
        "tag": "DET",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 20,
        "label": "DEP"
      },
      "lemma": "all"
    },
    {
      "text": {
        "content": "rolled",
        "beginOffset": 192
      },
      "partOfSpeech": {
        "tag": "VERB",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "INDICATIVE",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "PAST",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 19,
        "label": "CCOMP"
      },
      "lemma": "roll"
    },
    {
      "text": {
        "content": "into",
        "beginOffset": 199
      },
      "partOfSpeech": {
        "tag": "ADP",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 32,
        "label": "PREP"
      },
      "lemma": "into"
    },
    {
      "text": {
        "content": "one",
        "beginOffset": 204
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 35,
        "label": "NUM"
      },
      "lemma": "one"
    },
    {
      "text": {
        "content": "platform",
        "beginOffset": 208
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 33,
        "label": "POBJ"
      },
      "lemma": "platform"
    },
    {
      "text": {
        "content": ".",
        "beginOffset": 216
      },
      "partOfSpeech": {
        "tag": "PUNCT",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 19,
        "label": "P"
      },
      "lemma": "."
    },
    {
      "text": {
        "content": "Call",
        "beginOffset": 218
      },
      "partOfSpeech": {
        "tag": "VERB",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "IMPERATIVE",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 37,
        "label": "ROOT"
      },
      "lemma": "Call"
    },
    {
      "text": {
        "content": "us",
        "beginOffset": 223
      },
      "partOfSpeech": {
        "tag": "PRON",
        "aspect": "ASPECT_UNKNOWN",
        "case": "ACCUSATIVE",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "PLURAL",
        "person": "FIRST",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 37,
        "label": "DOBJ"
      },
      "lemma": "us"
    },
    {
      "text": {
        "content": "at",
        "beginOffset": 226
      },
      "partOfSpeech": {
        "tag": "ADP",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 37,
        "label": "PREP"
      },
      "lemma": "at"
    },
    {
      "text": {
        "content": "+",
        "beginOffset": 229
      },
      "partOfSpeech": {
        "tag": "X",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 39,
        "label": "P"
      },
      "lemma": "+"
    },
    {
      "text": {
        "content": "420",
        "beginOffset": 230
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 43,
        "label": "NUMBER"
      },
      "lemma": "420"
    },
    {
      "text": {
        "content": "739",
        "beginOffset": 234
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 43,
        "label": "NUMBER"
      },
      "lemma": "739"
    },
    {
      "text": {
        "content": "632",
        "beginOffset": 238
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 44,
        "label": "NUM"
      },
      "lemma": "632"
    },
    {
      "text": {
        "content": "821",
        "beginOffset": 242
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 39,
        "label": "POBJ"
      },
      "lemma": "821"
    },
    {
      "text": {
        "content": "or",
        "beginOffset": 246
      },
      "partOfSpeech": {
        "tag": "CONJ",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 37,
        "label": "CC"
      },
      "lemma": "or"
    },
    {
      "text": {
        "content": "visit",
        "beginOffset": 249
      },
      "partOfSpeech": {
        "tag": "VERB",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 37,
        "label": "CONJ"
      },
      "lemma": "visit"
    },
    {
      "text": {
        "content": "us",
        "beginOffset": 255
      },
      "partOfSpeech": {
        "tag": "PRON",
        "aspect": "ASPECT_UNKNOWN",
        "case": "ACCUSATIVE",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "PLURAL",
        "person": "FIRST",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 46,
        "label": "DOBJ"
      },
      "lemma": "us"
    },
    {
      "text": {
        "content": "at",
        "beginOffset": 258
      },
      "partOfSpeech": {
        "tag": "ADP",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 46,
        "label": "PREP"
      },
      "lemma": "at"
    },
    {
      "text": {
        "content": "Křižíkova",
        "beginOffset": 261
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 48,
        "label": "POBJ"
      },
      "lemma": "Křižíkova"
    },
    {
      "text": {
        "content": "488",
        "beginOffset": 274
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 53,
        "label": "NUM"
      },
      "lemma": "488"
    },
    {
      "text": {
        "content": "/",
        "beginOffset": 277
      },
      "partOfSpeech": {
        "tag": "X",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 53,
        "label": "P"
      },
      "lemma": "/"
    },
    {
      "text": {
        "content": "115",
        "beginOffset": 278
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 53,
        "label": "NUM"
      },
      "lemma": "115"
    },
    {
      "text": {
        "content": "Prague",
        "beginOffset": 282
      },
      "partOfSpeech": {
        "tag": "NOUN",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "SINGULAR",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 37,
        "label": "DOBJ"
      },
      "lemma": "Prague"
    },
    {
      "text": {
        "content": "8",
        "beginOffset": 289
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 53,
        "label": "NUM"
      },
      "lemma": "8"
    },
    {
      "text": {
        "content": "186",
        "beginOffset": 291
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 56,
        "label": "NUM"
      },
      "lemma": "186"
    },
    {
      "text": {
        "content": "00",
        "beginOffset": 295
      },
      "partOfSpeech": {
        "tag": "NUM",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      },
      "dependencyEdge": {
        "headTokenIndex": 53,
        "label": "DEP"
      },
      "lemma": "00"
    }
  ],
  "entities": [
    {
      "name": "platform",
      "type": "OTHER",
      "metadata": {},
      "salience": 0.22810584,
      "mentions": [
        {
          "text": {
            "content": "platform",
            "beginOffset": 74
          },
          "type": "COMMON",
          "sentiment": {
            "magnitude": 0.2,
            "score": 0.2
          }
        }
      ],
      "sentiment": {
        "magnitude": 0.5,
        "score": 0.2
      }
    },
    {
      "name": "data analytics",
      "type": "OTHER",
      "metadata": {},
      "salience": 0.20965189,
      "mentions": [
        {
          "text": {
            "content": "data analytics",
            "beginOffset": 36
          },
          "type": "COMMON",
          "sentiment": {
            "magnitude": 0.4,
            "score": 0.4
          }
        }
      ],
      "sentiment": {
        "magnitude": 0.4,
        "score": 0.4
      }
    },
    {
      "name": "data engineering",
      "type": "OTHER",
      "metadata": {},
      "salience": 0.18361077,
      "mentions": [
        {
          "text": {
            "content": "data engineering",
            "beginOffset": 15
          },
          "type": "COMMON",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    },
    {
      "name": "Keboola",
      "type": "PERSON",
      "metadata": {},
      "salience": 0.1373092,
      "mentions": [
        {
          "text": {
            "content": "Keboola",
            "beginOffset": 0
          },
          "type": "PROPER",
          "sentiment": {
            "magnitude": 0.1,
            "score": 0.1
          }
        }
      ],
      "sentiment": {
        "magnitude": 0.1,
        "score": 0.1
      }
    },
    {
      "name": "anyone",
      "type": "PERSON",
      "metadata": {},
      "salience": 0.06476169,
      "mentions": [
        {
          "text": {
            "content": "anyone",
            "beginOffset": 88
          },
          "type": "COMMON",
          "sentiment": {
            "magnitude": 0.2,
            "score": 0.2
          }
        }
      ],
      "sentiment": {
        "magnitude": 0.2,
        "score": 0.2
      }
    },
    {
      "name": "platform",
      "type": "OTHER",
      "metadata": {},
      "salience": 0.029939458,
      "mentions": [
        {
          "text": {
            "content": "platform",
            "beginOffset": 208
          },
          "type": "COMMON",
          "sentiment": {
            "magnitude": 0.1,
            "score": 0.1
          }
        }
      ],
      "sentiment": {
        "magnitude": 0.1,
        "score": 0.1
      }
    },
    {
      "name": "data hub",
      "type": "ORGANIZATION",
      "metadata": {},
      "salience": 0.028680414,
      "mentions": [
        {
          "text": {
            "content": "data hub",
            "beginOffset": 138
          },
          "type": "COMMON",
          "sentiment": {
            "magnitude": 0.2,
            "score": 0.2
          }
        }
      ],
      "sentiment": {
        "magnitude": 0.2,
        "score": 0.2
      }
    },
    {
      "name": "user provisioning",
      "type": "OTHER",
      "metadata": {},
      "salience": 0.028680414,
      "mentions": [
        {
          "text": {
            "content": "user provisioning",
            "beginOffset": 148
          },
          "type": "COMMON",
          "sentiment": {
            "magnitude": 0.3,
            "score": 0.3
          }
        }
      ],
      "sentiment": {
        "magnitude": 0.3,
        "score": 0.3
      }
    },
    {
      "name": "infrastructure",
      "type": "OTHER",
      "metadata": {},
      "salience": 0.028334498,
      "mentions": [
        {
          "text": {
            "content": "infrastructure",
            "beginOffset": 122
          },
          "type": "COMMON",
          "sentiment": {
            "magnitude": 0.6,
            "score": 0.6
          }
        }
      ],
      "sentiment": {
        "magnitude": 0.6,
        "score": 0.6
      }
    },
    {
      "name": "process automation",
      "type": "OTHER",
      "metadata": {},
      "salience": 0.026343675,
      "mentions": [
        {
          "text": {
            "content": "process automation",
            "beginOffset": 167
          },
          "type": "COMMON",
          "sentiment": {
            "magnitude": 0.3,
            "score": 0.3
          }
        }
      ],
      "sentiment": {
        "magnitude": 0.3,
        "score": 0.3
      }
    },
    {
      "name": "all",
      "type": "PERSON",
      "metadata": {},
      "salience": 0.026343675,
      "mentions": [
        {
          "text": {
            "content": "all",
            "beginOffset": 188
          },
          "type": "COMMON",
          "sentiment": {
            "magnitude": 0.1,
            "score": 0.1
          }
        }
      ],
      "sentiment": {
        "magnitude": 0.1,
        "score": 0.1
      }
    },
    {
      "name": "Křižíkova 488",
      "type": "OTHER",
      "metadata": {},
      "salience": 0.008238481,
      "mentions": [
        {
          "text": {
            "content": "Křižíkova 488",
            "beginOffset": 261
          },
          "type": "PROPER",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    },
    {
      "name": "+420 739 632 821",
      "type": "PHONE_NUMBER",
      "metadata": {
        "number": "739632821"
      },
      "salience": 0,
      "mentions": [
        {
          "text": {
            "content": "+420 739 632 821",
            "beginOffset": 229
          },
          "type": "TYPE_UNKNOWN",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    },
    {
      "name": "Křižíkova 488/115 Prague 8 186 00",
      "type": "ADDRESS",
      "metadata": {
        "locality": "Praha",
        "broad_region": "Hlavní město Praha",
        "street_name": "Křižíkova",
        "narrow_region": "Hlavní město Praha",
        "street_number": "488/115",
        "country": "CZ",
        "postal_code": "186 00",
        "sublocality": "Praha 8"
      },
      "salience": 0,
      "mentions": [
        {
          "text": {
            "content": "Křižíkova 488/115 Prague 8 186 00",
            "beginOffset": 261
          },
          "type": "TYPE_UNKNOWN",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    },
    {
      "name": "+420 739 632 821",
      "type": "NUMBER",
      "metadata": {
        "value": "420739632821"
      },
      "salience": 0,
      "mentions": [
        {
          "text": {
            "content": "+420 739 632 821",
            "beginOffset": 229
          },
          "type": "TYPE_UNKNOWN",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    },
    {
      "name": "488/115",
      "type": "NUMBER",
      "metadata": {
        "value": "4.243478"
      },
      "salience": 0,
      "mentions": [
        {
          "text": {
            "content": "488/115",
            "beginOffset": 274
          },
          "type": "TYPE_UNKNOWN",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    },
    {
      "name": "00",
      "type": "NUMBER",
      "metadata": {
        "value": "0"
      },
      "salience": 0,
      "mentions": [
        {
          "text": {
            "content": "00",
            "beginOffset": 295
          },
          "type": "TYPE_UNKNOWN",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    },
    {
      "name": "8",
      "type": "NUMBER",
      "metadata": {
        "value": "8"
      },
      "salience": 0,
      "mentions": [
        {
          "text": {
            "content": "8",
            "beginOffset": 289
          },
          "type": "TYPE_UNKNOWN",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    },
    {
      "name": "One",
      "type": "NUMBER",
      "metadata": {
        "value": "1"
      },
      "salience": 0,
      "mentions": [
        {
          "text": {
            "content": "One",
            "beginOffset": 104
          },
          "type": "TYPE_UNKNOWN",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    },
    {
      "name": "one",
      "type": "NUMBER",
      "metadata": {
        "value": "1"
      },
      "salience": 0,
      "mentions": [
        {
          "text": {
            "content": "one",
            "beginOffset": 204
          },
          "type": "TYPE_UNKNOWN",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    },
    {
      "name": "one",
      "type": "NUMBER",
      "metadata": {
        "value": "1"
      },
      "salience": 0,
      "mentions": [
        {
          "text": {
            "content": "one",
            "beginOffset": 63
          },
          "type": "TYPE_UNKNOWN",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    },
    {
      "name": "186",
      "type": "NUMBER",
      "metadata": {
        "value": "186"
      },
      "salience": 0,
      "mentions": [
        {
          "text": {
            "content": "186",
            "beginOffset": 291
          },
          "type": "TYPE_UNKNOWN",
          "sentiment": {
            "magnitude": 0,
            "score": 0
          }
        }
      ],
      "sentiment": {
        "magnitude": 0,
        "score": 0
      }
    }
  ],
  "documentSentiment": {
    "magnitude": 1.1,
    "score": 0.3
  },
  "language": "en",
  "categories": [
    {
      "name": "/Computers & Electronics/Enterprise Technology/Data Management",
      "confidence": 0.8
    },
    {
      "name": "/Business & Industrial",
      "confidence": 0.79
    },
    {
      "name": "/Internet & Telecom/Web Services",
      "confidence": 0.64
    }
  ]
}

================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: scripts/run.sh
================================================
#!/bin/sh
set -e

TABLES_PATH=$KBC_DATADIR/out/tables

if [ "$(ls -A $TABLES_PATH)" ]; then
    TABLES_PATH=$TABLES_PATH/*
     rm -r $TABLES_PATH
fi

python /code/src/component.py

================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi

================================================
File: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"

================================================
File: src/client.py
================================================
from bs4 import BeautifulSoup
import json
import logging
import requests
import sys
from keboola.http_client import HttpClient

BASE_URL = 'https://language.googleapis.com/v1/documents:annotateText'


class GoogleNLPClientException(Exception):
    pass


class GoogleNLPClient(HttpClient):

    def __init__(self, token):

        _def_params = {'key': token}
        _def_header = {"Content-Type": "application/json",
                       "Accept": "application/json"}
        self.token = token

        super().__init__(base_url=BASE_URL, max_retries=10,
                         backoff_factor=0.3, default_params=_def_params,
                         status_forcelist=(500, 502), default_http_header=_def_header)

        self._check_token()

    def _check_token(self):

        _body = self._create_body('', '', {})

        # Will produce a 400 error due to invalid payload.
        # Depending on message, the token can be verified
        _rsp = self.post_raw(data=_body)
        _sc = _rsp.status_code
        _msg = _rsp.json()['error'].get('message')

        if 'API key not valid' in _msg:
            logging.error("Please check the API token.")
            logging.error("The API token could not be verified. The response received was %s: %s" % (_sc, _msg))
            sys.exit(1)
        else:
            logging.info("Verified API token.")

    def _get_supported_languages(self):

        # No API call to obtain supported languages in Google NLP.
        # Will perform a scrape once in a while to ensure languages are supported.

        _map = {'content_classification': 'classifyText',
                'syntactic_analysis': 'analyzeSyntax',
                'entity_analysis': 'analyzeEntities',
                'sentiment_analysis': 'analyzeSentiment',
                'entity_sentiment_analysis': 'analyzeEntitySentiment'}

        _page = self.get_raw(endpoint_path='https://cloud.google.com/natural-language/docs/languages',
                             is_absolute_path=True)
        soup = BeautifulSoup(_page.text, "html.parser")

        table_headers = soup.findAll('h2')
        table_contents = soup.findAll('table')

        if len(table_contents) != len(table_headers):
            logging.info("Skipping obtaining languages due to not matching website inputs.")
            return

        supported_languages = {}
        try:
            for t in range(len(table_headers)):
                _name = table_headers[t]['id']
                _name_mapped = _map.get(_name)

                _table = table_contents[t].select('tbody > tr > td > code')

                supported_languages[_name_mapped] = [lang.text for lang in _table]

            return supported_languages

        except (KeyError, AttributeError) as e:

            logging.warning("Could not obtain languages.")
            logging.warning(e)

    def _create_body(self, content, language, features, inputType='PLAIN_TEXT') -> str:

        if language is None:
            language = ''

        _template = {"document": {"type": inputType,
                                  "content": content,
                                  "language": language},
                     "encodingType": "UTF8",
                     "features": features}

        logging.debug(f"Body template: {_template}")

        return json.dumps(_template)

    def analyze_text(self, content, language, features, inputType='PLAIN_TEXT'):

        _body = self._create_body(content, language, features, inputType)
        logging.debug(f"Body: {_body}")

        try:
            _rsp = self.post_raw(data=_body)
            return _rsp

        except requests.exceptions.RetryError as e:
            raise GoogleNLPClientException(f"There was a problem calling documents:annotateText endpoint. "
                                           f"Retry 10x failed. Reason: {e} "
                                           f"Following features were used: {str(features)} "
                                           f"The issue might be caused by daily limits reached. "
                                           f"Please, raise the limits if necessary.") from e


================================================
File: src/component.py
================================================
import csv
from hashlib import md5
import json
import logging
import sys
from client import GoogleNLPClient, GoogleNLPClientException
from result import resultWriter
from keboola.component.base import ComponentBase
from keboola.component.exceptions import UserException


API_KEY = '#API_key'
ANALYSIS_TYPE_KEY = 'analysis_type'
INPUT_TYPE_KEY = 'input_type'

SUPPORTED_ANALYSIS = ['extractEntities', 'extractEntitySentiment', 'classifyText',
                      'extractDocumentSentiment', 'extractSyntax']

SUPPORTED_INPUT = ['PLAIN_TEXT', 'HTML']
MANDATORY_PARS = [API_KEY, ANALYSIS_TYPE_KEY, INPUT_TYPE_KEY]


class Component(ComponentBase):

    def __init__(self):
        super().__init__()
        self.validate_configuration_parameters(MANDATORY_PARS)

        # Parameter fetching
        self.paramToken = self.configuration.parameters[API_KEY]
        self.paramAnalysisType = self.configuration.parameters[ANALYSIS_TYPE_KEY]
        self.paramInputType = self.configuration.parameters[INPUT_TYPE_KEY]

        # Check inputs and create necessary variables for making requests
        self._check_input_tables()
        self._check_parameter_values()
        self._create_request_features()
        self._identify_sentiment()

        self.client = GoogleNLPClient(token=self.paramToken)
        self.writer = resultWriter(
            methodList=self.paramAnalysisType, dataPath=self.tables_out_path)

    def run(self):

        _path = self.input_table.full_path
        logging.info(f"Processing data from table {self.input_table.name}")

        with open(_path) as fileInput:
            _reader = csv.DictReader(fileInput)
            logging.debug(f"Defined columns: {self.input_table.columns}, found columns: {_reader.fieldnames}")

            for row in _reader:

                try:
                    self.process_document(documentDict=row, retry=True)
                except GoogleNLPClientException as e:
                    raise e

                if _reader.line_num % 250 == 0:
                    logging.info("Made %s call to API so far." % _reader.line_num)

    def _create_request_features(self):

        _template = {}

        for _analysis in self.paramAnalysisType:
            _template[_analysis] = True

        self.requestFeatures = _template

    def _identify_sentiment(self):

        _mappingSentiment = {'extractDocumentSentiment': ['documents', 'sentences'],
                             'extractEntitySentiment': ['entities', 'mentions']}

        _includedSentiment = []

        for key in _mappingSentiment:
            if key in self.paramAnalysisType:
                _includedSentiment += _mappingSentiment[key]
            else:
                pass

        logging.debug(f"Sentiment is present in the following tables: {_includedSentiment}")
        self.resultSentimentTables = _includedSentiment

    def _check_input_tables(self):

        _input_tables = self.get_input_tables_definitions()

        logging.debug("Input tables:")
        logging.debug(_input_tables)

        if len(_input_tables) == 0:

            logging.error("No input table was provided. Please provide an input table, with mandatory columns \"id\"," +
                          " \"text\" and optional column \"sourceLanguage\". See documentation for more information.")
            sys.exit(1)

        else:

            _input = _input_tables[0]
            _path = _input.full_path
            _mnfst_path = _path + '.manifest'

            with open(_mnfst_path) as _mnfst_file:
                _mnfst = json.load(_mnfst_file)
                _columns = _mnfst['columns']

                if 'id' in _columns and 'text' in _columns:
                    pass
                else:
                    logging.error("Missing required column \"id\" or \"text\" in table %s." % _input.name)
                    logging.error("Please, make sure all of the required columns are inputted.")
                    sys.exit(1)

        self.input_table = _input

    def _check_parameter_values(self):

        _setAnalysis = list(set(self.paramAnalysisType) -
                            set(SUPPORTED_ANALYSIS))

        if len(_setAnalysis) != 0:

            logging.error("Unsupported analysis type: %s. Supported types are %s." % (
                _setAnalysis, SUPPORTED_ANALYSIS))

            sys.exit(1)

        if self.paramInputType not in SUPPORTED_INPUT:

            logging.error("Unsupported input type %s. Input type must be one of %s." % (
                self.paramInputType, SUPPORTED_INPUT))

            sys.exit(1)

    def process_document(self, documentDict: dict, retry):

        logging.debug(f"Processing document: {documentDict}")
        documentId = documentDict['id']
        documentText = documentDict['text']
        documentLanguage = documentDict.get('sourceLanguage')
        skipCategories = False

        if documentText.strip() == '':

            _message = "The document %s is empty and was skipped." % documentId

            logging.warning(_message)

            self.writer.writerErrors.writerow({'documentId': documentId,
                                               'category': 'emptyDocumentError',
                                               'severity': 'WARNING',
                                               'message': _message})

            return

        _features = self.requestFeatures
        if retry is False:

            _features['classifyText'] = False
            skipCategories = True

        _nlpResponse = self.client.analyze_text(content=documentText, features=_features,
                                                language=documentLanguage, inputType=self.paramInputType)

        _sc = _nlpResponse.status_code
        _js = _nlpResponse.json()

        logging.debug(f"Received response and status code: {_sc} {_js}")

        if _sc == 200:
            logging.debug(f"Received response: {_js}")
            self.split_and_write_data(documentId, _js, skipCategories)
            # write results

        elif _sc == 400:

            _message = _js['error']['message']

            if (retry is True and 'Invalid text content: too few tokens' in _message
                    and 'classifyText' in self.paramAnalysisType):

                logging.warning(
                    "Could not use method classifyText for document %s." % documentId)

                if len(self.paramAnalysisType) > 1:

                    _additionalMessage = 'Retrying without classifyText method.'
                    _message = ' '.join([_message, _additionalMessage])

                    self.writer.writerErrors.writerow({'documentId': documentId,
                                                       'category': 'categoryError',
                                                       'severity': 'WARNING',
                                                       'message': _message})

                    logging.info(
                        "Retrying request for document %s without classifyText method." % documentId)

                    self.process_document(documentDict, retry=False)

                    return

                elif len(self.paramAnalysisType) == 1:

                    '''

                    self.writer.writerDocuments.writerow({'documentId': documentId,
                                                          'language': documentLanguage,
                                                          'sentimentMagnitude': '',
                                                          'sentimentScore': ''})

                    '''

                    _additionalMessage = 'Request could not be retried because no other method was specified.'
                    _message = ' '.join([_message, _additionalMessage])

                    logging.warning(_additionalMessage)

                    self.writer.writerErrors.writerow({'documentId': documentId,
                                                       'category': 'categoryError',
                                                       'severity': 'ERROR',
                                                       'message': _message})

                    return

            else:

                _additionalMessage = "Document %s could not be processed. Received:" % documentId
                _logMessage = ' '.join([_additionalMessage, _message])

                logging.warning(_logMessage)

                self.writer.writerErrors.writerow({'documentId': documentId,
                                                   'category': 'nlpError',
                                                   'severity': 'ERROR',
                                                   'message': _message})

                return

        elif _sc > 400:
            _message = _js.get('error', {}).get('message', "")
            raise UserException(f"Received status code {str(_sc)} and message: {_message}")

    @staticmethod
    def _hash_string(hashList, delim='|'):

        _toHash = '|'.join([str(i) for i in hashList])

        return md5(_toHash.encode()).hexdigest()

    def write_documents(self, documentId, nlpResult):

        if 'documents' in self.resultSentimentTables:

            docSentiment = nlpResult['documentSentiment']['score']
            docMagnitude = nlpResult['documentSentiment']['magnitude']

        else:

            docSentiment, docMagnitude = '', ''

        language = nlpResult['language']

        _writeRowDocuments = {'documentId': documentId,
                              'language': language,
                              'sentimentScore': docSentiment,
                              'sentimentMagnitude': docMagnitude}

        self.writer.writerDocuments.writerow(_writeRowDocuments)

    def write_sentences(self, documentId, nlpResult):

        nlpSentences = nlpResult['sentences']

        idx = -1

        for sentence in nlpSentences:

            idx += 1
            textContent = sentence['text']['content']
            textOffset = sentence['text']['beginOffset']

            if 'sentences' in self.resultSentimentTables:

                senSentiment = sentence['sentiment']['score']
                senMagnitude = sentence['sentiment']['magnitude']

            else:

                senSentiment, senMagnitude = '', ''

            sentenceId = self._hash_string([documentId,
                                            textContent,
                                            textOffset])

            _writerRowSentences = {'sentenceId': sentenceId,
                                   'documentId': documentId,
                                   'index': idx,
                                   'textContent': textContent,
                                   'textOffset': textOffset,
                                   'sentimentScore': senSentiment,
                                   'sentimentMagnitude': senMagnitude}

            self.writer.writerSentences.writerow(_writerRowSentences)

    def write_categories(self, documentId, nlpResult):

        nlpCategories = nlpResult['categories']

        if len(nlpCategories) != 0:

            for category in nlpCategories:

                categoryName = category['name']
                confidence = category['confidence']

                categoryDocumentId = self._hash_string([documentId,
                                                        categoryName])

                _writerRowCategories = {'categoryDocumentId': categoryDocumentId,
                                        'documentId': documentId,
                                        'categoryName': categoryName,
                                        'confidence': confidence}

                self.writer.writerCategories.writerow(_writerRowCategories)

        else:

            _message = "No category detected for document %s." % documentId

            logging.warning(_message)

            self.writer.writerErrors.writerow({'documentId': documentId,
                                               'category': 'categoryError',
                                               'severity': 'WARNING',
                                               'message': _message})

    def write_entities(self, documentId, nlpResult):

        nlpEntities = nlpResult['entities']

        for entity in nlpEntities:

            if 'entities' in self.resultSentimentTables:

                entSentiment = entity['sentiment']['score']
                entMagnitude = entity['sentiment']['magnitude']

            else:

                entSentiment, entMagnitude = '', ''

            name = entity['name']
            entType = entity['type']
            salience = entity['salience']
            metadata = json.dumps(
                entity['metadata']) if entity['metadata'] != {} else ''

            entityId = self._hash_string([documentId, name])

            _writerRowEntities = {'entityId': entityId,
                                  'documentId': documentId,
                                  'name': name,
                                  'type': entType,
                                  'salience': salience,
                                  'metadata': metadata,
                                  'sentimentScore': entSentiment,
                                  'sentimentMagnitude': entMagnitude}

            self.writer.writerEntities.writerow(_writerRowEntities)
            self.write_mentions(entityId, entity)

    def write_mentions(self, entityId, nlpEntity):

        nlpMentions = nlpEntity['mentions']

        for mention in nlpMentions:

            if 'mentions' in self.resultSentimentTables:

                mentSentiment = mention['sentiment']['score']
                mentMagnitude = mention['sentiment']['magnitude']

            else:

                mentSentiment, mentMagnitude = '', ''

            textContent = mention['text']['content']
            textOffset = mention['text']['beginOffset']
            mentType = mention['type']

            mentionId = self._hash_string([entityId, textContent, textOffset])

            _writerRowMentions = {'mentionId': mentionId,
                                  'entityId': entityId,
                                  'textContent': textContent,
                                  'textOffset': textOffset,
                                  'type': mentType,
                                  'sentimentScore': mentSentiment,
                                  'sentimentMagnitude': mentMagnitude}

            self.writer.writerMentions.writerow(_writerRowMentions)

    @staticmethod
    def flatten_json(js, out={}, name='', delim='_'):
        if type(js) is dict:
            for a in js:
                Component.flatten_json(js[a], out, name + a + delim)
        else:
            out[name[:-1]] = js

        return out

    def write_tokens(self, documentId, nlpResult):

        nlpTokens = nlpResult['tokens']

        idx = -1

        for token in nlpTokens:

            idx += 1

            textContent = token['text']['content']
            textOffset = token['text']['beginOffset']

            _flatToken = self.flatten_json(js=token)

            tokenId = self._hash_string([documentId,
                                         textContent,
                                         textOffset,
                                         idx])

            _writerRowTokens = {**{'tokenId': tokenId,
                                   'documentId': documentId,
                                   'textContent': textContent,
                                   'textOffset': textOffset,
                                   'index': idx},
                                **_flatToken}

            self.writer.writerTokens.writerow(_writerRowTokens)

    def split_and_write_data(self, documentId, nlpResult, skipCategories=False):

        for table in self.writer.resultTableNames:

            # Mentions are automatically created with entities and are its child
            # Errors are logged separately
            if table in ['mentions', 'errors']:
                continue

            elif skipCategories is True:
                continue

            else:
                f = eval('self.write_' + table)
                f(documentId, nlpResult)


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: src/result.py
================================================
import csv
import json
import logging
import os
from kbc.result import KBCResult, KBCTableDef

# First column used as ID
FIELDS_ENTITIES = ['entityId', 'documentId', 'name', 'type',
                   'salience', 'metadata', 'sentimentMagnitude',
                   'sentimentScore']

FIELDS_MENTIONS = ['mentionId', 'entityId', 'textContent', 'textOffset',
                   'type', 'sentimentMagnitude', 'sentimentScore']

FIELDS_DOCUMENTS = ['documentId', 'language', 'sentimentMagnitude', 'sentimentScore']

FIELDS_SENTENCES = ['sentenceId', 'documentId', 'index', 'textContent', 'textOffset',
                    'sentimentMagnitude', 'sentimentScore']

FIELDS_CATEGORIES = ['categoryDocumentId', 'documentId', 'categoryName', 'confidence']

FIELDS_TOKENS = ['tokenId', 'documentId', 'textContent', 'textOffset', 'lemma', 'index',
                 'partOfSpeech_tag', 'partOfSpeech_aspect', 'partOfSpeech_case',
                 'partOfSpeech_form', 'partOfSpeech_gender', 'partOfSpeech_mood',
                 'partOfSpeech_number', 'partOfSpeech_person', 'partOfSpeech_proper',
                 'partOfSpeech_reciprocity', 'partOfSpeech_tense', 'partOfSpeech_voice',
                 'dependencyEdge_headTokenIndex', 'dependencyEdge_label']

FIELDS_ERRORS = ['documentId', 'category', 'severity', 'message']


class resultWriter:

    def __init__(self, methodList, dataPath):

        self.paramMethods = methodList
        self.paramDataPath = dataPath

        self.create_writers()
        self.create_manifests()

    def _create_table_definition(self, tableName, tableColumns):

        _pk = tableColumns[0]
        _fileName = tableName + '.csv'
        _full_path = os.path.join(self.paramDataPath, _fileName)

        _tbl_def = KBCTableDef(name=tableName, columns=tableColumns, pk=[_pk])
        _result_def = KBCResult(file_name=_fileName, full_path=_full_path, table_def=_tbl_def)

        return _result_def

    @staticmethod
    def _create_csv_writer(tableDefinition):

        _writer = csv.DictWriter(open(tableDefinition.full_path, 'w'),
                                 fieldnames=tableDefinition.table_def.columns,
                                 restval='', extrasaction='ignore',
                                 quotechar='"', quoting=csv.QUOTE_ALL)

        return _writer

    def create_writers(self):

        _resultTableMap = {'classifyText': ['documents', 'categories', 'errors'],
                           'extractDocumentSentiment': ['documents', 'sentences', 'errors'],
                           'extractEntities': ['documents', 'entities', 'mentions', 'errors'],
                           'extractEntitySentiment': ['documents', 'entities', 'mentions', 'errors'],
                           'extractSyntax': ['documents', 'sentences', 'tokens', 'errors']}

        _resultsTableColumn = {'documents': FIELDS_DOCUMENTS,
                               'sentences': FIELDS_SENTENCES,
                               'categories': FIELDS_CATEGORIES,
                               'tokens': FIELDS_TOKENS,
                               'entities': FIELDS_ENTITIES,
                               'mentions': FIELDS_MENTIONS,
                               'errors': FIELDS_ERRORS}

        _createdTables = []
        _createdTablesDef = []

        for method in self.paramMethods:

            _tables = _resultTableMap[method]

            for t in _tables:

                if t not in _createdTables:

                    logging.debug("Creating writer for %s." % t)

                    _tableDef = self._create_table_definition(t, _resultsTableColumn[t])
                    _writer = self._create_csv_writer(_tableDef)

                    if t == 'documents':

                        self.writerDocuments = _writer
                        self.writerDocuments.writeheader()

                    elif t == 'sentences':

                        self.writerSentences = _writer
                        self.writerSentences.writeheader()

                    elif t == 'categories':

                        self.writerCategories = _writer
                        self.writerCategories.writeheader()

                    elif t == 'tokens':

                        self.writerTokens = _writer
                        self.writerTokens.writeheader()

                    elif t == 'entities':

                        self.writerEntities = _writer
                        self.writerEntities.writeheader()

                    elif t == 'mentions':

                        self.writerMentions = _writer
                        self.writerMentions.writeheader()

                    elif t == 'errors':

                        self.writerErrors = _writer
                        self.writerErrors.writeheader()

                    _writer = None
                    _createdTables += [t]
                    _createdTablesDef += [_tableDef]

                else:

                    continue

        self.resultTableDefinitions = _createdTablesDef
        self.resultTableNames = _createdTables

    @staticmethod
    def _create_manifest_template(pk=[], incremental=True):

        return {'primary_key': pk, 'incremental': incremental}

    def create_manifests(self):

        for tableDef in self.resultTableDefinitions:

            if tableDef.table_def.name == 'errors':

                _manifest = self._create_manifest_template(pk=[], incremental=False)

            else:

                _manifest = self._create_manifest_template(pk=tableDef.table_def.pk)

            _path = tableDef.full_path + '.manifest'
            with open(_path, 'w') as file:

                json.dump(_manifest, file)


================================================
File: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-google-nlp" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: ${{ vars.KBC_DEVELOPERPORTAL_USERNAME }}

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

