Directory structure:
└── keboola-component-generic/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── README_LEGACY.md
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── tests-requirements.txt
    ├── component_config/
    │   ├── cfgSchemaAlt.json
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   ├── examples/
    │   │   ├── docker-compose.yml
    │   │   ├── run_examples.py
    │   │   ├── 001-simple-json/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 002-simple-json-chunked-single/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   ├── orders1.request
    │   │   │   ├── orders1.requestHeaders
    │   │   │   ├── orders2.request
    │   │   │   ├── orders2.response
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 003-simple-json-chunked-multi/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── orders1.request
    │   │   │   ├── orders1.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 004-empty-request-iterations/
    │   │   │   ├── config.json
    │   │   │   ├── orders123.request
    │   │   │   ├── orders123.requestHeaders
    │   │   │   ├── orders234.request
    │   │   │   ├── orders234.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 005-json-iterations/
    │   │   │   ├── config.json
    │   │   │   ├── orders123.request
    │   │   │   ├── orders123.requestHeaders
    │   │   │   ├── orders234.request
    │   │   │   ├── orders234.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 006-simple-json-custom-headers/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 007-simple-json-force-datatype/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 008-simple-json-nested-object-delimiter/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 009-simple-json-request-parameters/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 010-simple-json-user-parameters-various/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 011-simple-json-user-parameters-from-iterations/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── orders1.request
    │   │   │   ├── orders1.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 012-simple-json-request-data-wrapper/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 013-simple-json-function-concat/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 014-simple-json-function-user-param-reference/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 015-simple-json-function-string-to-date/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 016-simple-json-function-base64-encode/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 017-simple-json-function-base64-encode-basic-auth/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 018-simple-json-function-md5-encode/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 019-simple-json-function-nesting-basic-auth/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 020-simple-json-column-name-override/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 021-simple-json-url-encoded-form/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── orders1.request
    │   │   │   ├── orders1.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 022-empty-request-iterations-delete/
    │   │   │   ├── config.json
    │   │   │   ├── orders123.request
    │   │   │   ├── orders123.requestHeaders
    │   │   │   ├── orders234.request
    │   │   │   ├── orders234.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 023-simple-json-nested-object-rename-column/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 024-simple-json-basic-http-auth/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 025-simple-json-basic-http-auth-from-user-params/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 026-json-iterations-query-params-in-path/
    │   │   │   ├── config.json
    │   │   │   ├── orders123.request
    │   │   │   ├── orders123.requestHeaders
    │   │   │   ├── orders234.request
    │   │   │   ├── orders234.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 027-retry/
    │   │   │   ├── config.json
    │   │   │   ├── exit_code
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   ├── orders.responseCode
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 028-simple-json-user-parameters-api-section/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 029-simple-json-object-fields/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── test.csv
    │   │   ├── 030-bearer-token-auth/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 031-auth-token-query/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 032-auth-token-header/
    │   │   │   ├── config.json
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 033-auth-login-query/
    │   │   │   ├── config.json
    │   │   │   ├── login.request
    │   │   │   ├── login.requestHeaders
    │   │   │   ├── login.response
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 034-auth-login/
    │   │   │   ├── config.json
    │   │   │   ├── login.request
    │   │   │   ├── login.requestHeaders
    │   │   │   ├── login.response
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 035-oauth_basic/
    │   │   │   ├── config.json
    │   │   │   ├── login.request
    │   │   │   ├── login.requestHeaders
    │   │   │   ├── login.response
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── 036-oauth_post_json/
    │   │   │   ├── config.json
    │   │   │   ├── login.request
    │   │   │   ├── login.requestHeaders
    │   │   │   ├── login.response
    │   │   │   ├── orders.request
    │   │   │   ├── orders.requestHeaders
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   └── 037-oauth_post_form/
    │   │       ├── config.json
    │   │       ├── login.request
    │   │       ├── login.requestHeaders
    │   │       ├── login.response
    │   │       ├── orders.request
    │   │       ├── orders.requestHeaders
    │   │       └── in/
    │   │           └── tables/
    │   │               └── orders.csv
    │   ├── imgs/
    │   └── legacy_v1_examples/
    │       ├── convert_tov2.py
    │       ├── 001-simple-json/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   ├── orders.response
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 002-simple-json-chunked-single/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   ├── orders.response
    │       │   ├── orders1.request
    │       │   ├── orders1.requestHeaders
    │       │   ├── orders2.request
    │       │   ├── orders2.response
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 003-simple-json-chunked-multi/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   ├── orders1.request
    │       │   ├── orders1.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 004-empty-request-iterations/
    │       │   ├── config.json
    │       │   ├── orders123.request
    │       │   ├── orders123.requestHeaders
    │       │   ├── orders234.request
    │       │   ├── orders234.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 005-json-iterations/
    │       │   ├── config.json
    │       │   ├── orders123.request
    │       │   ├── orders123.requestHeaders
    │       │   ├── orders234.request
    │       │   ├── orders234.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 006-simple-json-custom-headers/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 007-simple-json-force-datatype/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 008-simple-json-nested-object-delimiter/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 009-simple-json-request-parameters/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 010-simple-json-user-parameters-various/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 011-simple-json-user-parameters-from-iterations/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   ├── orders1.request
    │       │   ├── orders1.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 012-simple-json-request-data-wrapper/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 013-simple-json-function-concat/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 014-simple-json-function-user-param-reference/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 015-simple-json-function-string-to-date/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 016-simple-json-function-base64-encode/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 017-simple-json-function-base64-encode-basic-auth/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 018-simple-json-function-md5-encode/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 019-simple-json-function-nesting-basic-auth/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       ├── 020-simple-json-column-name-override/
    │       │   ├── config.json
    │       │   ├── orders.request
    │       │   ├── orders.requestHeaders
    │       │   └── in/
    │       │       └── tables/
    │       │           └── orders.csv
    │       └── 021-simple-json-url-encoded-form/
    │           ├── config.json
    │           ├── orders.request
    │           ├── orders.requestHeaders
    │           ├── orders1.request
    │           ├── orders1.requestHeaders
    │           └── in/
    │               └── tables/
    │                   └── orders.csv
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   ├── json_converter.py
    │   ├── placeholders_utils.py
    │   ├── user_functions.py
    │   └── http_generic/
    │       ├── __init__.py
    │       ├── auth.py
    │       └── client.py
    ├── tests/
    │   ├── __init__.py
    │   ├── test_auth.py
    │   ├── test_component.py
    │   ├── test_configuration.py
    │   ├── test_functional.py
    │   ├── functional/
    │   │   ├── custom_matchers.py
    │   │   ├── binary_gz/
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── binary_iterations/
    │   │   │   ├── config.json
    │   │   │   ├── content1.request
    │   │   │   ├── content2.request
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── binary_simple/
    │   │   │   ├── config.json
    │   │   │   ├── content1.request
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   ├── invalid_config/
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       └── tables/
    │   │   │           └── orders.csv
    │   │   └── simple_retry/
    │   │       ├── config.json
    │   │       └── in/
    │   │           └── tables/
    │   │               └── orders.csv
    │   └── resources/
    │       ├── config_invalid.json
    │       ├── configv2.json
    │       └── configv2_minimal.json
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
# Keboola Generic Writer

Description

**Table of Contents:**

[TOC]

The Keboola Generic Writer component allows you to write data to a specified endpoint in a specified format. It currently supports a single
table and a single endpoint per configuration.

The data can be sent in two ways:

1. **Send all content at once:** Data is sent either as BINARY or JSON in chunks.
2. **[Iterate](/extend/generic-writer/configuration/#iterate-by-columns) through each row:** Data is sent iteratively, as specified in the input data. By default, 1 row = 1 iteration. This mode allows dynamic changes to the endpoint
   based on input using placeholders (e.g., `www.example.com/api/user/{{id}}`). It can also send data with different user parameters present in the input table.

### Configuration Parameters

*Click on the section names for more details.*

- [**api**](/extend/generic-writer/configuration/#api/) --- [REQUIRED] Specifies the basic properties of the API.
    - [**base_url**](/extend/generic-writer/configuration/#base-url) ---  [REQUIRED] Defines the URL to which the API
      requests are sent.
    - [**authentication**](/extend/generic-writer/configuration/#authentication) --- Configuration for APIs that are not public.
    - [**retry_config**](/extend/generic-writer/configuration/#retry-config) --- Automatically retries failed HTTP requests.
    - [**default_query_parameters**](/extend/generic-writer/configuration/#default-query-parameters) --- Default query parameters sent with each API call.
    - [**default_headers**](/extend/generic-writer/configuration/#default-headers) --- Default query headers sent with each API call.
    - [**ssl_verification**](/extend/generic-writer/configuration/#ssl-verification) --- Option to disable SSL certificate verification (use with caution).
    - [**timeout**](/extend/generic-writer/configuration/#timeout) --- Maximum time (in seconds) the component waits after each request (defaults to None if not set).
- [**user_parameters**](/extend/generic-writer/configuration/#user-parameters) --- User-defined parameters used in various contexts, such as passwords. Supports dynamic functions.
- [**request_parameters**](/extend/generic-writer/configuration/#request-parameters) -- [REQUIRED] HTTP parameters of the request:
    - [**method**](/extend/generic-writer/configuration/#method) --- [REQUIRED] Specifies the HTTP method of the requests.
    - [**endpoint_path**](/extend/generic-writer/configuration/#enpoint-path) --- [REQUIRED] Defines the relative path of the endpoint.
    - [**query_parameters**](/extend/generic-writer/configuration/#query-parameters) --- Query parameters sent with each request.
    - [**headers**](/extend/generic-writer/configuration/#headers) --- Headers sent with each request.
- [**request_content**](/extend/generic-writer/configuration/#request-content) --- [REQUIRED] Defines how the data is sent:
    - [**content_type**](/extend/generic-writer/configuration/#content-type) --- [REQUIRED] Specifies the data transfer format (e.g., JSON, binary file, empty, etc.)
    - [**json_mapping**](/extend/generic-writer/configuration/#json-mapping) --- Defines the CSV2-to-JSON conversion for JSON content type.
    - [**iterate_by_columns**](/extend/generic-writer/configuration/#iterate-by-columns) --- Specifies a set of columns in the input data excluded from the content. These columns may be used as placeholders
      in request_options. The input table is iterated row by row (1 row = 1 request).

Additionally, there are pre-defined [**dynamic functions**](/extend/generic-writer/configuration/#dynamic-functions) available,
providing extra flexibility when needed.

### Configuration Map

The following sample configuration shows various configuration options and their nesting. Use the map to
navigate between them.

```json
{
  "parameters": {
    "debug": false,
    "api": {
      "base_url": "https://example.com/api",
      "default_query_parameters": {
        "content_type": "json"
      },
      "default_headers": {
        "Authorization": {
          "attr": "#token"
        }
      },
      "retry_config": {
        "max_retries": 5,
        "codes": [
          500,
          429
        ]
      },
      "ssl_verification": true,
      "timeout": 5
    },
    "user_parameters": {
      "#token": "Bearer 123456",
      "date": {
        "function": "concat",
        "args": [
          {
            "function": "string_to_date",
            "args": [
              "yesterday",
              "%Y-%m-%d"
            ]
          },
          "T"
        ]
      }
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/customer/[[id]]",
      "headers": {
        "Content-Type": "application/json"
      },
      "query_parameters": {
        "date": {
          "attr": "date"
        }
      }
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 100,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": [
            {
              "column": "phone",
              "type": "string"
            },
            {
              "column": "rank",
              "type": "number"
            },
            {
              "column": "is_active",
              "type": "bool"
            }
          ]
        },
        "request_data_wrapper": "{ \"data\": [[data]]}",
        "column_names_override": {
          "full_name": "FULL|NAME"
        }
      },
      "iterate_by_columns": [
        "id"
      ]
    }
  }
}
```

## API

Defines the basic properties of the API that may be shared for multiple endpoints, such as authentication, base URL,
etc.

### Base URL

The URL of the endpoint where the payload is being sent, e.g., `www.example.com/api/v1`.

**Note:** The URL may contain placeholders for iterations wrapped in `[[]]`, e.g., ``www.example.com/api/v[[api_version]]``.  
However, in most cases, this should be set at the `endpoint_path` level.

The parameter `api_version` must be specified in the `user_parameters` section or in the source data itself if the column is
set as an iteration parameter column.

### Retry Config

Configure parameters for retrying requests in case of failure.

- `max_retries` --- Maximum number of retries before failing (default `1`).
- `codes` --- List of HTTP codes to retry on, e.g., [503, 429] (default `(500, 502, 504)`).
- `backoff_factor` --- Exponential backoff factor (default `0.3`).

```json
"api": {
"base_url": "https://example.com/api",
"retry_config": {
"max_retries": 5,
"backoff_factor": 0.3
"codes": [
500,
429
]
}
}
```

### Default Query Parameters

Define parameters to be sent with each request. This is useful for authentication or when creating templates for the Generic Writer.

**Note:** You can reference parameters defined in `user_parameters` using the syntax `{"attr":"SOME_KEY"}`.

```json
        "api": {
"base_url": "https://example.com/api",
"default_query_parameters": {
"content
_type":"json",
"token": {
"attr": "#token"
}
}
```

### Default Headers

Define default headers sent with each request.

**Note:** Parameters in `user_parameters` can also be referenced using the syntax `{"attr":"SOME_KEY"}`.

```json
        "api": {
"base_url": "https://example.com/api",
"default_headers": {
"Authorization": {"attr": "#token"}
}
```

### Authentication

Some APIs require authenticated requests. This section allows you to select from predefined authentication methods.

The authentication object is always in the following format:

```json

{
  "type": "{SUPPORTED_TYPE}",
  "parameters": {
    "some_parameter": "test_user"
  }
}
```

**Note:** Parameters may be referenced from the `user_parameters` section using the syntax `{"attr":""}`.

See [example 025](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/025-simple-json-basic-http-auth-from-user-params).

#### Basic HTTP authentication

Use a username and password for authentication.

**Example**:

```json
"api": {
"base_url": "http://localhost:8000",
"authentication": {
"type": "BasicHttp",
"parameters": {
"username": "test_user",
"#password": "pass"
}
}
}
```

See [example 024](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/024-simple-json-basic-http-auth).

#### Bearer Token

Use a `Bearer token` in the header (e.g., `"authorization": "Bearer XXXX""`).

**Example**:

```json
{
  "api": {
    "base_url": "http://localhost:8000",
    "authentication": {
      "type": "BearerToken",
      "parameters": {
        "#token": "XXXX"
      }
    }
  }
}
```

See [example 030](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/030-bearer-token-auth).

#### API key in a query

**Example**:

```json
{
  "api": {
    "base_url": "http://mock-server:80",
    "authentication": {
      "type": "ApiKey",
      "parameters": {
        "#token": {
          "attr": "#__password"
        },
        "key": "token",
        "position": "query"
      }
    }
  },
  "user_parameters": {
    "#__password": "XXXX"
  }
}
```

See [example 031](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/031-auth-token-query).

#### API key in a header

**Example**:

```json
{
  "api": {
    "base_url": "http://mock-server:80",
    "authentication": {
      "type": "ApiKey",
      "parameters": {
        "#token": {
          "attr": "#__password"
        },
        "key": "token",
        "position": "headers"
      }
    }
  },
  "user_parameters": {
    "#__password": "XXXX"
  }
}
```

See [example 032](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/032-auth-token-header).

#### Login — token in a query

**Example**:

```json
{
  "api": {
    "base_url": "http://mock-server:80",
    "authentication": {
      "type": "Login",
      "parameters": {
        "loginRequest": {
          "endpoint": "/033-auth-login-query/login",
          "method": "GET",
          "headers": {
            "X-Login": "JohnDoe",
            "X-Password": {
              "attr": "#__password"
            }
          }
        },
        "apiRequest": {
          "query": {
            "token": {
              "response": "authorization.token"
            }
          }
        }
      }
    }
  },
  "user_parameters": {
    "#__password": "TopSecret"
  }
}
```

See [example 033](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/033-auth-login-query).

#### Login — token in a header

**Example**:

```json
{
  "api": {
    "base_url": "http://mock-server:80",
    "authentication": {
      "type": "Login",
      "parameters": {
        "loginRequest": {
          "endpoint": "/034-auth-login/login",
          "method": "GET",
          "headers": {
            "X-Login": "JohnDoe",
            "X-Password": {
              "attr": "#__password"
            }
          }
        },
        "apiRequest": {
          "headers": {
            "X-ApiToken": {
              "response": "authorization.token"
            }
          }
        }
      }
    }
  },
  "user_parameters": {
    "#__password": "TopSecret"
  }
}
```

See [example 034](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/034-auth-login).

#### OAuth 2.0 client credentials — GET

**Example**:

```json
{
  "api": {
    "base_url": "http://mock-server:80",
    "authentication": {
      "type": "OAuth20ClientCredentials",
      "format": "json",
      "parameters": {
        "loginRequest": {
          "endpoint": "/035-oauth_basic/login",
          "method": "GET",
          "type": "client_secret_basic",
          "headers": {}
        },
        "apiRequest": {
          "headers": {
            "X-ApiToken": {
              "response": "access_token"
            }
          }
        }
      }
    }
  },
  "user_parameters": {
    "#__password": "TopSecret"
  }
}
```

See [example 035](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/035-oauth_basic).

#### OAuth 2.0 client credentials — POST JSON

**Example**:

```json
{
  "api": {
    "base_url": "http://mock-server:80",
    "authentication": {
      "type": "OAuth20ClientCredentials",
      "format": "json",
      "parameters": {
        "loginRequest": {
          "endpoint": "/036-oauth_post_json/login",
          "method": "POST",
          "type": "client_secret_post_json",
          "headers": {}
        },
        "apiRequest": {
          "headers": {
            "X-ApiToken": {
              "response": "access_token"
            }
          }
        }
      }
    }
  },
  "user_parameters": {
    "#__password": "TopSecret"
  }
}
```

See [example 036](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/036-oauth_post_json).

#### OAuth 2.0 client credentials — POST form

**Example**:

```json
{
  "api": {
    "base_url": "http://mock-server:80",
    "authentication": {
      "type": "OAuth20ClientCredentials",
      "format": "json",
      "parameters": {
        "loginRequest": {
          "endpoint": "/037-oauth_post_form/login",
          "method": "GET",
          "type": "client_secret_post_form",
          "headers": {}
        },
        "apiRequest": {
          "headers": {
            "X-ApiToken": {
              "response": "access_token"
            }
          }
        }
      }
    }
  },
  "user_parameters": {
    "#__password": "TopSecret"
  }
}
```

See [example 037](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/037-oauth_post_form).

### SSL Verification

Allows turning off SSL certificate verification. **Use with caution.** When set to `false`, SSL verification is disabled.

```json

{
  "api": {
    "base_url": "http://localhost:8000",
    "ssl_verification": false
  }
}
```

### Timeout

Defines the maximum timeout for each request. If not set, the default value (`None`) is used:

Possible values: int, float

For more information, refer to the [requests documentation](https://requests.readthedocs.io/en/stable/user/advanced/#timeouts).

## User Parameters

User parameters can be defined for use in various contexts, such as passwords. This section also supports [dynamic functions](https://developers.keboola.com/extend/generic-writer/configuration/#dynamic-functions).

It allows referencing other values from `user_parameters` referenced by the notation `{"attr":"par"}`.

**Note:** Parameters prefixed with `#` are encrypted in the Keboola platform upon saving the configuration.

```json
        "user_parameters": {
"#token": "Bearer 123456",
"date": {
"function": "concat",
"args": [
{
"function": "string_to_date",
"args": [
"yesterday",
"%Y-%m-%d"
]
},
"T"
]
}
}
```

### Referencing Parameters

Parameters defined in this section can be referenced using the `{"attr":"PARAMETER_KEY"}` syntax in:

- `user_parameters` section itself.
- [`api.default_query_parameters`](/extend/generic-writer/configuration/#default-query-parameters)
- [`api.default_headers`](/extend/generic-writer/configuration/#default-headers)
- [`request_parameters.headers`](/extend/generic-writer/configuration/#headers)
- [`request_parameters.query parameters`](/extend/generic-writer/configuration/#query-parameters)

See example [010](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/010-simple-json-user-parameters-various) for more details.

## Request Parameters

Define parameters for HTTP requests.

### Method

Request method: POST, PUT, UPDATE, DELETE, etc.

Supported methods: `['GET', 'POST', 'PATCH', 'UPDATE', 'PUT', 'DELETE']`

```json
"request_parameters": {
"method": "POST",
...
```

### Endpoint Path

The relative path of the endpoint. The final request URL combines `base_url` and `endpoint_path`.

**Example:**
If `base_url` is `https://example.com/api` and `endpoint_path` is `/customer`, the resulting URL
is: `https://example.com/api/customer`.

**Note:** The `enpoint_path` can be dynamically changed using [iteration columns](/extend/generic-writer/configuration/#iterate-by-columns); e.g., `/orders/[[id]]` as seen
in [example 005](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/005-json-iterations/).

```json

"request_parameters": {
"method": "POST",
"endpoint_path": "/customer",
...
```

### Headers

Define default headers sent with each request.

**Note:** You can reference `user_parameters` using the `{"attr":"SOME_KEY"}` syntax.

```json
"request_parameters": {
"method": "POST",
"endpoint_path": "/customer",
"headers": {
"Last-updated": 123343534
},
...
```

See [example 006](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/006-simple-json-custom-headers/).

### Query Parameters

Define default query parameters sent with each request.

**Note:** Parameters can reference `user_parameters` with the `{"attr":"SOME_KEY"}` syntax.

```json
"request_parameters": {
"method": "POST",
"endpoint_path": "/customer/[[id]]",
"query_parameters": {
"dryRun": true,
"date": {
"attr": "date"
}
}
}
```

See [example 009](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/009-simple-json-request-parameters/).

## Request Content

Defines how to process the input data and how the sent content should look.

### Content Type

Specifies how the input table is translated into a request:

- `JSON`: The input table is converted into JSON (see `json_mapping`) and sent as `application/json`.
  See [example 001](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/001-simple-json/).
- `JSON_URL_ENCODED`: The input table is converted into JSON and sent as `application/x-www-form-urlencoded`.
  See [example 021](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/021-simple-json-url-encoded-form/).
- `BINARY`: The input table is sent as binary data, similar to `curl --data-binary`.
  See [example](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/tests/functional/binary_simple/).
- `BINARY-GZ`: The input is sent as gzipped binary data.
  See [example](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/tests/functional/binary_gz/).
- `EMPTY_REQUEST`: Sends empty requests. Useful for triggerring webhooks, DELETE calls, etc. As many requests as
  there are rows in the input are sent. Useful with `iterate_by_columns` enabled to trigger multiple endpoints.
  See [example 022](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/022-empty-request-iterations-delete/).

```json

"request_content": {
"content_type": "JSON",
....
```

### JSON Mapping

[REQUIRED for JSON based content type] 
This section defines the CSV-to-JSON conversion.

#### Nesting delimiter

Defines the string used for nesting JSON objects. You can define nested objects based on column names.

For example, if set to `__`, a column named `address__streed` will be converted to `{"address"{"street":"COLUMN_VALUE"}}`.

```json
"request_content": {
"content_type": "JSON",
"json_mapping": {
"nesting_delimiter": "_",
...
```

See
example [008](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/008-simple-json-nested-object-delimiter/).

#### Chunk size

Defines the number of rows sent in a single request. 
- `1`: Sends each row as a single object, e.g., `{}` (
see [example 002](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/002-simple-json-chunked-single/)).
- `>1`: Sends rows as an array of objects, e.g., `[{}, {}]` (
see [example 003](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/003-simple-json-chunked-multi/)).

```json
"request_content": {
"content_type": "JSON",
"json_mapping": {
"nesting_delimiter": "_",
"chunk_size": 1,
...
```

#### Column datatypes

Optional configuration for column types. This version supports three levels of nesting and three datatypes:

- `bool`: Boolean values. Case-insensitive conversions: 
    - `t`, `true`, `yes`, `1`,`"1"` -> `True` 
    - `f`, `false`, `no` -> `False`
- `string`: String values.
- `number`: Numeric values.
- `object`: Valid JSON arrays or JSON objects (e.g., ["1","2"], {"key":"val"}).

##### Autodetect

Set to `true` by default. Automatically detects column types unless overriden by `datatype_override`.

##### Column datatype override

[OPTIONAL]

In most cases, the `autodetect` option handles datatype conversion correctly. However, there are scenarios where
you may need to force the datatype conversion. For example, to ensure that the `phone_number` column is treated as a string, you can specify
`"phone_number":"string"`.

**Available datatype options:*

- `string`: Always interpret the value as a string.
- `number`: Interpret the value as numeric.
- `bool`: Interpret the value as a Boolean.
  - Case-insensitive conversions: 
    - `t`, `true`, `yes` -> `True` 
    - `f`, `false`, `no` -> `False`
- `object`: Interpret the value as a valid JSON array or object (e.g., ["1","2"], {"key":"val"}).

**Note:** If the `autodetect` option is turned off, all unspecified columns will default to `string`.

```json
"request_content": {
"content_type": "JSON",
"json_mapping": {
"nesting_delimiter": "_",
"chunk_size": 1,
"column_data_types": {
"autodetect": true,
"datatype_override": [
{
"column": "phone",
"type": "string"
}, {
"column": "rank",
"type": "number"
}, {
"column": "is_active",
"type": "bool"
}
]
}
}
}
```

See [example 007](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/007-simple-json-force-datatype/).

#### Request Data Wrapper

[OPTIONAL]

A wrapper or mask can be applied to the parsed data, encoded as JSON. For example:

```json
"request_content": {
"content_type": "JSON",
"json_mapping": {
"nesting_delimiter": "__",
"chunk_size": 1,
"request_data_wrapper": "{ \"data\": [[data]]}",
...
```

Given a single column `user__id` and `chunksize` = 2, the above will send requests like this:

```json
{
  "data": [
    {
      "user": {
        "id": 1
      }
    },
    {
      "user": {
        "id": 2
      }
    }
  ]
}
```

See
example [012](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/012-simple-json-request-data-wrapper/).

#### Column names override

You can override specific column names using the `column_names_override` parameter, allowing you to generate fields with
characters not supported in Storage column names.

**Notes:** 
- This is applied **after** column type definitions, so refer to the original name in the `column_types`
configuration.
- Nested objects renaming is supported. The rename applies to the leaf node.

Example: 
Given the configuration `"address___city":"city.address"`, with a delimiter set to `___`, the result would be: `{"address":{"city.address":"SOME_VALUE"}}`.

See [example 23](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/023-simple-json-nested-object-rename-column/).

**Example:**

```json
"request_content": {
"content_type": "JSON",
"json_mapping": {
"nesting_delimiter": "_",
"chunk_size": 1,
"column_names_override": {
"field_id": "field-id",
"full_name": "FULL.NAME"
}
...
```

For more examples, see:
[example 20](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/020-simple-json-column-name-override/)
and [example 23](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/023-simple-json-nested-object-rename-column/).

### Iterate By Columns

This parameter allows requests to be performed iteratively based on data from specific columns in the source table. These column values can be used as
placeholders within `request_options`. The input table is processed row by row (1 row = 1 request).

```json
"request_content": {
"content_type": "JSON",
"iterate_by_columns": [
"id", "date"
]
}

```

These values will be injected into:

- `request_parameters.endpoint_path` (if a placeholder like `/user/[[id]]` is used).
- `user_parameters` (replacing parameters with matching names). This
  allows for dynamically changing request parameters, such as `www.example.com/api/user?date=xx`, where the `date`
  value is specified as follows:

```json

"request_parameters": {
"method": "POST",
"endpoint_path": "/customer/[[id]]",
"query_parameters": {
"date": {
"attr": "date"
}
}
}



```

**Note:** When `iterate_by_columns` is enabled, the `chunk_size` in JSON mapping is overridden to `1`.

**Example configurations:**

- [Example 005](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/005-json-iterations/)
- Empty request with iterations [example 004](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/004-empty-request-iterations/),
  [example 22](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/022-empty-request-iterations-delete/)
- [Example 011: placeholders in query parameters](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/011-simple-json-user-parameters-from-iterations/)

##### Example Input Table

| id | date       | name  | email      | address |
|----|------------|-------|------------|---------|
| 1  | 01.01.2020 | David | d@test.com | asd     |
| 2  | 01.02.2020 | Tom   | t@test.com | asd     |

Consider the following request options:

```json
"request_parameters": {
"method": "POST",
"endpoint_path": "/user/[[id]]",
"query_parameters": {
"date": {
"attr": "date"
}
}
},
"request_content": {
"content_type": "JSON",
"iterate_by_columns": [
"id", "date"
]
}
}

```

The writer will run in two iterations:

**First request:**

| name  | email      | address |
|-------|------------|---------|
| David | d@test.com | asd     |

Sent to `www.example.com/api/user/1?date=01.01.2020`.

**Second request:** 

| name  | email      | address |
|-------|------------|---------|
| Tom   | t@test.com | asd     |

Sent to `www.example.com/api/user/2?date=01.02.2020`.

## Dynamic Functions

This application supports dynamic functions that can be applied to parameters in the configuration for generating values dynamically.

Currently, functions only work within the `user_parameters` scope. Place the required function object instead of the
user parameter value.

Function values can refer to other user parameters using the syntax: `{"attr": "custom_par"}`.

**Note:** If you require additional functions, let us know or submit a pull request to
our [repository](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/). It's as simple as adding an
arbitrary method to the [UserFunctions class](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/src/user_functions.py#lines-7).

**Function object**

```json
{
  "function": "string_to_date",
  "args": [
    "yesterday",
    "%Y-%m-%d"
  ]
}
```

#### Function Nesting

Nesting of functions is supported:

```json
{
  "user_parameters": {
    "url": {
      "function": "concat",
      "args": [
        "http://example.com",
        "/test?date=",
        {
          "function": "string_to_date",
          "args": [
            "yesterday",
            "%Y-%m-%d"
          ]
        }
      ]
    }
  }
}

```

#### string_to_date

This function converts a string into a formatted date string. The input can be:
- A specific date in the `YYYY-MM-DD` format (e.g., `2024-01-01`). 
- A relative period (e.g., `5 hours ago`, `yesterday`,`3 days ago`, `4 months ago`, `2 years ago`, `today`).

The result is returned as a date string in the specified format (default: `%Y-%m-%d`).

The function takes two arguments:

1. [REQUIRED] Date string
2. [OPTIONAL] Desired date format (defined as in http://strftime.org/)

**Example:**

```json
{
  "user_parameters": {
    "yesterday_date": {
      "function": "string_to_date",
      "args": [
        "yesterday",
        "%Y-%m-%d"
      ]
    }
  }
}
```

The above value is then available in [supported contexts](/extend/generic-writer/configuration/#referencing-parameters)
as follows:

```json
"to_date": {"attr": "yesterday_date"}
```

#### concat

The function accepts an array of strings as its argument and concatenates them into one.

**Example:**

```json
{
  "user_parameters": {
    "url": {
      "function": "concat",
      "args": [
        "http://example.com",
        "/test"
      ]
    }
  }
}
```

The resulting value is then available in supported contexts as follows:

```json
"url": {"attr": "url"}
```

#### base64_encode

Encodes a string in BASE64 format.

**Example:**

```json
{
  "user_parameters": {
    "token": {
      "function": "base64_encode",
      "args": [
        "user:pass"
      ]
    }
  }
}
```

The resulting value is then available in contexts as follows:

```json
"token": {"attr": "token"}
```

## Development

To customize the local data folder path, replace the `CUSTOM_FOLDER` placeholder with your desired path in the docker-compose.yml file:

```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, initialize the workspace, and run the component using the following commands:

```
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and perform lint checks using this command:

```
docker-compose run --rm test
```

# Integration

For details about deployment and integration with Keboola, refer to
the [deployment section of the developer documentation](https://developers.keboola.com/extend/component/deployment/). 

================================================
File: Dockerfile
================================================
FROM python:3.10-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt
RUN pip install -r /code/tests-requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: README_LEGACY.md
================================================
# KBC Generic Writer

Description

**Table of contents:**  
  
[TOC]


# Functionality notes

Writes data to a specified endpoint in a specified format. Supports single table and single endpoint per configuration.

Works in two modes:

1. Basic mode - where the input data is sent to the endpoint in a specified format
2. Iteration mode - where the data is sent in iterations specified in the input data. By default 1 row = 1 iteration. 
This allows to change the endpoint dynamically based on the input using placeholders: `www.example.com/api/user/{{id}}`.
Or sending data with different user parameters that are present in the input table.

# Configuration

**Parameters**

## Path

An URL of the endpoint where the payload is being sent. 

May contain placeholders for iterations wrapped in `[[}}`,e.g. `www.example.com/api/user/[[id}}`. 
The parameter `id` needs to be specified in the `user_parameters` or in the source data itself if the column is set 
as an iteration parameter column.

## Method

Request method - POST, PUT, etc.

`"method": "POST"`

## Mode

Mode in what the data is transferred:

- `JSON` - input table is converted into a JSON (see json_data_config)
- `JSON_URL_ENCODED` - input table is converted into a JSON and sent as `application/x-www-form-urlencoded` (see json_data_config)
- `BINARY` - input table is sent as binary data (just like `curl --data-binary`)
- `BINARY`-GZ - input is sent as gzipped binary data
- `EMPTY_REQUEST` - sends just empty requests. Usefull for triggerring webhooks, DELETE calls, etc. 
As many requests as there are rows on the input are sent. Useful with `iteration_mode` enabled to trigger multiple endpoints.

**NOTE** that you need to also setup the proper request headers manually.

## json_data_config

Configuration of how the input is translated into a JSON. Supports nested structures.

The nesting is done via delimiter character, e.g.

`user_id` column will be converted to `"user":{"id": val}` object

### chunk_size

If specified, the input is being sent in chunks. When set to `1` a single object is sent `{}`, when set to >1
 an array of objects is sent `[{}, {}]`
 
 **NOTE** that in `JSON_URL_ENCODED` mode this value is always overridden to 1

### delimiter

A character that is used for nesting. e.g. `_`

**NOTE** that in `JSON_URL_ENCODED` you must note have nested objects.

### request_data_wrapper

A wrapper/mask of the parsed data. It needs to be json-encoded json. E.g

`"request_data_wrapper": "{ \"data\": [[data]]}"`

This will cause each request being sent as:

```json
{
  "data": [
  {"user": 
     {"id": 1}
   },
  {"user": 
     {"id": 2}
   }
  ]

}
```

 **NOTE** that in `JSON_URL_ENCODED` mode this value is ignored

### column_types

Optional configuration of column types. This version supports nesting (three levels) and three datatypes:

- `bool` -  Boolean value  case-insensitive conversion: `t`, `true`, `yes`, `1`,`"1"` to `True` and `f`, `false`, `no` to `False`
- `string` - String
- `number` - Number
- `object` - Object - valid JSON array or JSON object, e.g. ["1","2"], {"key":"val"}

You need to specify all columns and datatypes you want them to have in the JSON file - 
if you want the value to be enclosed in double quotes, use `string`, 
if you want the value to be numeric, use `number`. 
If you want it to be Boolean, use `bool` 
(case-insensitive conversion: `t`, `true`, `yes` to `True` and `f`, `false`, `no` to `False`)

Columns **that do not have explicitly defined datatypes** will be converted to:

- String if `infer_types_for_unknown` is set to `false` or omitted
- Datatype will be inferred from the value itself if `infer_types_for_unknown` is set to `true`

### infer_types_for_unknown

Flag whether to infer datatypes automatically from data or not.

### Column names

You may override specific column names using the `column_names_override` parameter 
to be able to generate fields with characters not supported in Storage column names.

NOTE that this is applied **after** the column type definition, so refer to original name in the `column_types` config. 

**Example:**

```json
"column_names_override": {
          "field_id": "field-id",
          "parent__test_dot": "test.dot"     
      }
```


### Example


INPUT DATA:
 
|time_reviewed_r1_r2|time_reviewed_r1_r1|time_reviewed_r2|id                                                    |field.id|ansconcat|time_submitted      |
|-------------------|-------------------|----------------|------------------------------------------------------|--------|---------|--------------------|
|True               |True               |True            |https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx|123456  |Jan Palek|2019-08-13T19:05:45Z|
|True               |True               |True            |https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx|123456  |Jan Palek|2019-08-13T19:05:45Z|
|True               |True               |True            |https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx|123456  |Jan Palek|2019-08-13T19:05:45Z|

SETUP:

```json
"json_data_config": {
      "chunk_size": 5,
      "delimiter": "__",
      "request_data_wrapper": "{ \"data\": [[data]]}",
      "infer_types_for_unknown": true,
      "column_types": [
        {
          "column": "id",
          "type": "string"
        },
        {
          "column": "field_id",
          "type": "string"
        },
        {
          "column": "ansconcat",
          "type": "string"
        },
        {
          "column": "time__submitted",
          "type": "string"
        },
        {
          "column": "time__reviewed__r2",
          "type": "bool"
        },
        {
          "column": "time__reviewed__r1__r1",
          "type": "bool"
        },
        {
          "column": "time__reviewed__r1__r2",
          "type": "bool"
        }
      ],
     "column_names_override" : {
          "field_id": "field-id"     
      }
    }
```

RESULT:

```json
{
    "data": [{
            "time": {
                "submitted": "2019-08-13T19:05:45Z",
                "reviewed": {
                    "r2": true,
                    "r1": {
                        "r1": true,
                        "r2": true
                    }
                }
            },
            "ansconcat": "Jan Palek",
            "field_id": "123456",
            "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx"
        }, {
            "time": {
                "submitted": "2019-08-13T19:05:45Z",
                "reviewed": {
                    "r2": true,
                    "r1": {
                        "r1": true,
                        "r2": true
                    }
                }
            },
            "ansconcat": "Jan Palek",
            "field_id": "123456",
            "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx"
        }, {
            "time": {
                "submitted": "2019-08-13T19:05:45Z",
                "reviewed": {
                    "r2": true,
                    "r1": {
                        "r1": true,
                        "r2": true
                    }
                }
            },
            "ansconcat": "Jan Palek",
            "field_id": "123456",
            "id": "https://keboolavancouver.typeform.com/to/XXXX?id=xxxxx"
        }
    ]
}
```

##  user_parameters 

A list of user parameters that is are accessible from within headers and additional parameters. This is useful for storing
for example user credentials that are to be filled in a login form. Appending `#` sign before the attribute name will hash the value and store it securely
within the configuration (recommended for passwords). The value may be scalar, supported function or another scalar user parameter 
referenced by `{"attr":"par"}` object. 

Example:

```json
"user_parameters": {
      "#token": "Bearer 123456"
      "param1": 1,
      "param2" { 
         "function":"concat",
         "args":[
            "http://example.com/",
            {"attr":"param1"}
          ]
      }
}
```

You can access user parameters as:

```json
"value": {
          "attr": "#token"
        }
```

## headers
 
An array of HTTP headers to send. You may include User parameters as a value:

```json
"headers": [
      {
        "key": "Authorization",
        "value": {
          "attr": "#token"
        }
      },
      {
        "key": "Content-Type",
        "value": "application/json"
      }
    ]
```

## additional_requests_pars
 
(OPT) additional kwarg parameters that are accepted by the 
Python [Requests library](https://2.python-requests.org/en/master/user/quickstart/#make-a-request), get method. 
**NOTE** the `'false','true'` string values are converted to boolean, objects will be treated as python dictionaries

Example:

```json
"additional_requests_pars": [
      {
        "key": "verify",
        "value": "false"
      },
      {
        "key": "params",
        "value": {
          "date": {
            "attr": "date"
          }
        }
      }
    ]
```
### Request parameters

The most common usage is defining request parameters here. To send request with `?date=somedate&dryrun=true` 
use this setup:

```json
"additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "date": {
            "attr": "date"
          },
          "dryrun": True
          
        }
      }
    ]
```

### Other supported parameters

- **params:** (optional) Dictionary to be sent in the query string for the `Request`.
- **cookies:** (optional) Dict object to send with the `Request`.
- **timeout:** (optional) How long to wait for the server to send
    data before giving up, as a float
- **allow_redirects:** (optional) Set to `true` by default.
- **proxies:** (optional) Dictionary mapping protocol or protocol and hostname to the URL of the proxy.
- **verify:** (optional) Either a boolean, in which case it controls whether we verify
    the server's TLS certificate, or a string, in which case it must be a path
    to a CA bundle to use. Defaults to `true`.

Note that the `date` value is taken from the `user_parameters`, which may be possibly dynamic function.


## Dynamic Functions

The application support functions that may be applied on parameters in the configuration to get dynamic values.

Currently these functions work only in the `user_parameters` scope. 
Place the required function object instead of the user parameter value.

The function values may refer to another user params using `{"attr": "custom_par"}`

**Function object**
    
```json
{ "function": "string_to_date",
                "args": [
                  "yesterday",
                  "%Y-%m-%d"
                ]
              }
```

### Function Nesting

Nesting of functions is supported:

```json
{
   "user_parameters":{
      "url":{ 
         "function":"concat",
         "args":[
            "http://example.com",
            "/test?date=",
            { "function": "string_to_date",
                "args": [
                  "yesterday",
                  "%Y-%m-%d"
                ]
              }
         ]
      }
   }
}

```

### string_to_date

Function converting string value into a datestring in specified format. The value may be either date in `YYYY-MM-DD` format,
or a relative period e.g. `5 hours ago`, `yesterday`,`3 days ago`, `4 months ago`, `2 years ago`, `today`.

The result is returned as a date string in the specified format, by default `%Y-%m-%d`

The function takes two arguments:

1. [REQ] Date string
2. [OPT] result date format. The format should be defined as in http://strftime.org/



**Example**

```json
{
   "user_parameters":{
      "yesterday_date":{
         "function":"string_to_date",
         "args":[
            "yesterday",
            "%Y-%m-%d"
         ]
      }
   }
}
```

The above value is then available in step contexts as:

```json
"to_date": {"attr": "yesterday_date"}
```

### concat

Concat an array of strings.

The function takes an array of strings to concat as an argument



**Example**

```json
{
   "user_parameters":{
      "url":{
         "function":"concat",
         "args":[
            "http://example.com",
            "/test"
         ]
      }
   }
}
```

The above value is then available in step contexts as:

```json
"endpoint_path": {"attr": "endpoint_path"}
```

### base64_encode

Encodes string in BASE64



**Example**

```json
{
   "user_parameters":{
      "token":{
         "function":"base64_encode",
         "args":[
            "user:pass"
         ]
      }
   }
}
```

The above value is then available in contexts as:

```json
"token": {"attr": "token"}
```

### md5_encode

Encodes string in MD5



**Example**

```json
{
   "user_parameters":{
      "token":{
         "function":"md5_encode",
         "args":[
            "user:pass"
         ]
      }
   }
}
```

The above value is then available in contexts as:

```json
"token": {"attr": "token"}
```


## iteration_mode

This object allows performing the requests in iterations based on provided parameters within data. The user specifies 
columns in the source table that will be used as parameters for each request. 

These will be injected in:

- Url if placeholder is specified, e.g.  `www.example.com/api/user/[[id]]`
    - NOTE that `{{}}` notation is supported as well but incompatible with KBC configuration variables
- `user_parameters` section, any existing parameters with a same name will be replaced by the value from the data. This 
allows for example for changing request parameters dynamically `www.example.com/api/user?date=xx` where the `date` value is specified 
like:

```json
"additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "date": {
            "attr": "date"
          }
        }
      }
    ]
```

### iteration_par_columns

An array of columns in the source data that will be used as parameters. Note that these columns will be excluded from the data 
payload itself.

### Example

Let's have this table on the input:

| id | date       | name  | email      | address |
|----|------------|-------|------------|---------|
| 1  | 01.01.2020 | David | d@test.com | asd     |
| 2  | 01.02.2020 | Tom   | t@test.com | asd     |

When setting iteration mode like this:

```json
"iteration_mode": {
      "iteration_par_columns": [
        "id", "date"
      ]
    }
```

**url**: `www.example.com/api/user/[[id]]`

**request params:**

```json
"additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "date": {
            "attr": "date"
          }
        }
      }
    ]
```

The writer will run in two iterations:

**FIRST** With data

| name  | email      | address |
|-------|------------|---------|
| David | d@test.com | asd     |

Sent to `www.example.com/api/user/1?date=01.01.2020`




**SECOND** with data

| name  | email      | address |
|-------|------------|---------|
| Tom   | t@test.com | asd     |

Sent to `www.example.com/api/user/2?date=01.02.2020`


# Configuration example

```json
{
    "path": "https://example.com/test/[[id]]",
    "mode": "JSON",
    "method": "POST",
    "iteration_mode": {
      "iteration_par_columns": [
        "id"
      ]
    },
    "user_parameters": {
      "#token": "Bearer 123456",
    "token_encoded": {
      "function": "concat",
      "args": [
        "Basic ",
        {
          "function": "base64_encode",
          "args": [
            {
              "attr": "#token"
            }
          ]
        }
      ]
    },
      "date": {
        "function": "concat",
        "args": [
          {
            "function": "string_to_date",
            "args": [
              "yesterday",
              "%Y-%m-%d"
            ]
          },
          "T"
        ]
      }
    },
    "headers": [
      {
        "key": "Authorization",
        "value": {
          "attr": "token_encoded"
        }
      },
      {
        "key": "Content-Type",
        "value": "application/json"
      }
    ],
    "additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "date": {
            "attr": "date"
          }
        }
      }
    ],
    "json_data_config": {
      "chunk_size": 1,
      "delimiter": "_",
      "request_data_wrapper": "{ \"data\": [[data]]}",
      "infer_types_for_unknown": true,
      "column_types": [
        {
          "column": "bool_bool2",
          "type": "number"
        },
        {
          "column": "bool_bool1",
          "type": "bool"
        },
        {
          "column": "id",
          "type": "string"
        },
        {
          "column": "field.id",
          "type": "string"
        },
        {
          "column": "ansconcat",
          "type": "string"
        },
        {
          "column": "time_submitted",
          "type": "string"
        },
        {
          "column": "id2",
          "type": "string"
        },
        {
          "column": "time_11",
          "type": "bool"
        },
        {
          "column": "time_reviewed_r2",
          "type": "bool"
        },
        {
          "column": "time_reviewed_r1_r1",
          "type": "bool"
        }
      ]
    },
    "debug": true
  }
```



## Development

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in the docker-compose file:

```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone repo_path my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

================================================
File: change_log.md
================================================
**0.1.1**

- fix requirements
- add src folder to path for tests

**0.1.0**

- src folder structure
- remove dependency on handler lib - import the code directly to enable modifications until its released

**0.0.2**

- add dependency to base lib
- basic tests

**0.0.1**

- add utils scripts
- move kbc tests directly to pipelines file
- use uptodate base docker image
- add changelog


================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2.4"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh
    links:
      - mock-server
    depends_on:
      - mock-server
  functional-tests:
    # Run examples against mock server
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    command: python /code/docs/examples/run_examples.py
    links:
      - mock-server
  mock-server:
    container_name: mock-server
    image: quay.io/keboola/ex-generic-mock-server
    tty: true
    stdin_open: true
    ports:
      - "8888:80"
    volumes:
      - ./docs/examples:/examples/
      - ./docs/legacy_v1_examples:/legacy_examples/
    environment:
      - KBC_EXAMPLES_DIR=/examples/

================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
keboola.component==1.4.2
keboola.http_client
keboola.utils
requests
https://bitbucket.org/kds_consulting_team/kds-team.processor-csv-to-json/get/0.5.7.zip#egg=csv2json
nested-lookup

================================================
File: tests-requirements.txt
================================================
responses
mock
freezegun

================================================
File: component_config/cfgSchemaAlt.json
================================================
{
  "type": "object",
  "title": "Parameters",
  "format": "grid",
  "required": [
    "url",
    "request_type",
    "mode",
    "headers",
    "request_params",
    "auth_method",
    "json_data_mapping"
  ],
  "properties": {
    "url": {
      "type": "string",
      "title": "Environment",
      "format": "url",
      "default": "https://myapi.com",
      "minLength": 8,
      "description": "Request URL",
      "propertyOrder": 300
    },
    "mode": {
      "enum": [
        "JSON",
        "Binary",
        "Binary/Gz"
      ],
      "type": "string",
      "title": "Mode",
      "default": "POST",
      "options": {
        "grid_columns": 2
      },
      "description": "Data transfer mode.",
      "propertyOrder": 410
    },
    "headers": {
      "type": "array",
      "items": {
        "type": "object",
        "title": "Variable",
        "properties": {
          "Key": {
            "type": "string",
            "title": "Name"
          },
          "val": {
            "type": "string",
            "title": "Value",
            "format": "json",
            "options": {
              "input_width": "400px",
              "input_height": "150px"
            }
          }
        }
      },
      "title": "Headers",
      "format": "table",
      "minLength": 1,
      "uniqueItems": true,
      "descriptions": "Variables required for the GraphQL Query",
      "propertyOrder": 800
    },
    "user_params": {
      "type": "object",
      "title": "User Parameters",
      "properties": {
        "standard": {
          "type": "array",
          "items": {
            "type": "object",
            "title": "Variable",
            "properties": {
              "name": {
                "type": "string",
                "title": "Name"
              },
              "value": {
                "type": "string",
                "title": "Value",
                "format": "json",
                "options": {
                  "input_width": "400px",
                  "input_height": "150px"
                }
              }
            }
          },
          "title": "Standard",
          "format": "table",
          "minLength": 1,
          "uniqueItems": true,
          "descriptions": "Standard params",
          "propertyOrder": 2
        },
        "encrypted": {
          "type": "array",
          "items": {
            "type": "object",
            "title": "Variable",
            "properties": {
              "name": {
                "type": "string",
                "title": "Name"
              },
              "#value": {
                "type": "string",
                "title": "value",
                "options": {
                  "input_width": "400px"
                }
              }
            }
          },
          "title": "Encrypted",
          "format": "table",
          "minLength": 1,
          "uniqueItems": true,
          "descriptions": "Encrypted params",
          "propertyOrder": 1
        }
      },
      "propertyOrder": 500
    },
    "request_type": {
      "enum": [
        "POST",
        "PUT",
        "PATCH"
      ],
      "type": "string",
      "title": "Request Method",
      "default": "POST",
      "propertyOrder": 400
    },
    "request_params": {
      "type": "array",
      "items": {
        "type": "object",
        "title": "Variable",
        "properties": {
          "Key": {
            "type": "string",
            "title": "Name"
          },
          "val": {
            "type": "string",
            "title": "Value",
            "format": "json",
            "options": {
              "input_width": "400px",
              "input_height": "150px"
            }
          }
        }
      },
      "title": "Request Parameters",
      "format": "table",
      "minLength": 1,
      "uniqueItems": true,
      "descriptions": "Additional requests parameters.",
      "propertyOrder": 900
    },
    "json_data_mapping": {
      "type": "array",
      "items": {
        "type": "object",
        "title": "Variable",
        "properties": {
          "val": {
            "type": "string",
            "title": "VAl",
            "format": "json",
            "options": {
              "input_width": "400px",
              "input_height": "150px"
            }
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "datatype": {
            "enum": [
              "STRING",
              "INTEGER",
              "FLOAT"
            ],
            "type": "string",
            "title": "DataType",
            "default": "STRING"
          }
        }
      },
      "title": "Json DATA mapping",
      "format": "table",
      "minLength": 1,
      "uniqueItems": true,
      "descriptions": "Data mapping to JSON variables",
      "propertyOrder": 1000
    }
  }
}

================================================
File: component_config/component_long_description.md
================================================
Generic writer allowing to send data to REST like APIs either as JSON or a BINARY payload. Choose HTTP method,
 custom parameters, headers and use dynamic functions. Supports automatic conversion from CSV to JSON structures and 
 request throttling.

================================================
File: component_config/component_short_description.md
================================================
Send data to REST like APIs either as JSON or a BINARY payload.

================================================
File: component_config/configSchema.json
================================================
{}

================================================
File: component_config/configuration_description.md
================================================
The data can be sent in two ways:

1. Send all content at once - either BINARY or JSON in chunks
2. [Iterate](/extend/generic-writer/configuration/#iterate-by-columns) through each row - where the data is sent in
   iterations specified in the input data. By default 1 row = 1 iteration. This allows to change the endpoint
   dynamically based on the input using placeholders: `www.example.com/api/user/{{id}}`. Or sending data with different
   user parameters that are present in the input table.

Data can be sent in different content types:
- `JSON` - input table is converted into a JSON (see `json_mapping`) sent as `application/json` type.
  See [example 001](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/001-simple-json/)
- `JSON_URL_ENCODED` - input table is converted into a JSON and sent as `application/x-www-form-urlencoded`.
  See [example 021](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/021-simple-json-url-encoded-form/)
- `BINARY` - input table is sent as binary data (just like `curl --data-binary`).
  See [example](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/tests/functional/binary_simple/)
- `BINARY-GZ` - input is sent as gzipped binary data.
  See [example](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/tests/functional/binary_gz/)
- `EMPTY_REQUEST` - sends just empty requests. Usefull for triggerring webhooks, DELETE calls, etc. As many requests as
  there are rows on the input are sent. Useful with `iterate_by_columns` enabled to trigger multiple endpoints.
  See [example 022](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/docs/examples/022-empty-request-iterations-delete/)

### Example configuration

- imitating basic authorization, JSON posts, auto data type inference

```json
{
  "api": {
    "base_url": "https://api-demo.com"
  },
  "user_parameters": {
    "#token": "XXXXXX"
  },
  "request_parameters": {
    "method": "POST",
    "endpoint_path": "/v1/customers/events",
    "headers": {
      "Authorization": {
        "attr": "#token"
      },
      "Content-type": "application/csv"
    },
    "query_parameters": {}
  },
  "request_content": {
    "content_type": "JSON",
    "json_mapping": {
      "nesting_delimiter": "__",
      "chunk_size": 1,
      "column_data_types": {
        "autodetect": true,
        "datatype_override": []
      },
      "request_data_wrapper": "",
      "column_names_override": {}
    },
    "iterate_by_columns": []
  }
}
```


** Example with Iterations:**

```json
{
  "api": {
    "base_url": "https://api-demolcom"
  },
  "user_parameters": {},
  "request_parameters": {
    "method": "POST",
    "endpoint_path": "/v1/customers/{{user_id}}/events",
    "headers": {},
    "query_parameters": {}
  },
  "request_content": {
    "content_type": "JSON",
    "json_mapping": {
      "nesting_delimiter": "_",
      "chunk_size": 1,
      "column_data_types": {
        "autodetect": true,
        "datatype_override": []
      },
      "request_data_wrapper": "",
      "column_names_override": {}
    },
    "iterate_by_columns": [
      "user_id"
    ]
  }
}
```

================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/stack_parameters.json
================================================
{}

================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: docs/examples/docker-compose.yml
================================================
version: "2.4"
services:
  # for development purposes
  functional-tests:
    # Run examples against mock server
    build: ../..
    volumes:
      - ../..:/code
      - ../../data:/data
    command: python /code/docs/examples/run_examples.py
    links:
      - mock-server
  mock-server:
    container_name: mock-server
    image: quay.io/keboola/ex-generic-mock-server
    tty: true
    stdin_open: true
    ports:
      - "8888:80"
    volumes:
      - ./docs/examples:/examples/
    environment:
      - KBC_EXAMPLES_DIR=/examples/

================================================
File: docs/examples/run_examples.py
================================================
import os
import sys
from pathlib import Path
from runpy import run_path
from typing import List


def _get_testing_dirs(data_dir: str) -> List:
    """
    Gets directories within a directory that do not start with an underscore

    Args:
        data_dir: directory which holds directories

    Returns:
        list of paths inside directory
    """
    return [os.path.join(data_dir, o) for o in os.listdir(data_dir) if
            os.path.isdir(os.path.join(data_dir, o)) and not o.startswith('_') and not o == 'legacy_v1']


def run_component(component_script, data_folder):
    """
    Runs a component script with a specified parameters
    """
    os.environ["KBC_DATADIR"] = data_folder
    if Path(data_folder).joinpath('exit_code').exists():
        expected_exitcode = int(open(Path(data_folder).joinpath('exit_code')).readline())
    else:
        expected_exitcode = 0
    try:
        run_path(component_script, run_name='__main__')
    except SystemExit as exeption:
        exitcode = exeption.code
    else:
        exitcode = 0

    if exitcode != expected_exitcode:
        raise AssertionError(f'Process failed with unexpected exit code {exitcode}, instead of {expected_exitcode}')


test_dirs = _get_testing_dirs(Path(__file__).parent.absolute().as_posix())
test_dirs_legacy = _get_testing_dirs(Path(__file__).parent.parent.joinpath('legacy_v1_examples').absolute().as_posix())

component_script = Path(__file__).absolute().parent.parent.parent.joinpath('src/component.py').as_posix()

print("Running legacy configurations")
os.environ['KBC_EXAMPLES_DIR'] = '/legacy_examples/'
for dir_path in test_dirs_legacy:
    print(f'\n\nRunning example {Path(dir_path).name}\n')
    sys.path.append(Path(component_script).parent.as_posix())

    run_component(component_script, dir_path)

print("\n\n\n\nRunning v2 configurations")
os.environ['KBC_EXAMPLES_DIR'] = '/examples/'
for dir_path in test_dirs:
    print(f'\n\nRunning example {Path(dir_path).name}\n')
    sys.path.append(Path(component_script).parent.as_posix())
    run_component(component_script, dir_path)

print('All tests finished successfully!')


================================================
File: docs/examples/001-simple-json/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/001-simple-json/orders"
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      }
    }
  }
}

================================================
File: docs/examples/001-simple-json/orders.request
================================================
POST /001-simple-json/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/001-simple-json/orders.requestHeaders
================================================
accept: */*
content-length: 248
content-type: application/json


================================================
File: docs/examples/001-simple-json/orders.response
================================================
{"status":"success"}

================================================
File: docs/examples/001-simple-json/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/002-simple-json-chunked-single/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/009-simple-json-request-parameters/orders",
      "query_parameters": {
        "date": "2020-01-01",
        "dryrun": true
      }
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true
        },
        "request_data_wrapper": ""
      }
    }
  }
}

================================================
File: docs/examples/002-simple-json-chunked-single/orders.request
================================================
POST /002-simple-json-chunked/orders

{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}

================================================
File: docs/examples/002-simple-json-chunked-single/orders.requestHeaders
================================================
accept: */*
content-length: 123
content-type: application/json


================================================
File: docs/examples/002-simple-json-chunked-single/orders.response
================================================
{"status":"success"}

================================================
File: docs/examples/002-simple-json-chunked-single/orders1.request
================================================
POST /002-simple-json-chunked/orders

{"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}

================================================
File: docs/examples/002-simple-json-chunked-single/orders1.requestHeaders
================================================
accept: */*
content-length: 121
content-type: application/json


================================================
File: docs/examples/002-simple-json-chunked-single/orders2.request
================================================
POST /002-simple-json-chunked/orders

{"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}

================================================
File: docs/examples/002-simple-json-chunked-single/orders2.response
================================================
{"status":"success"}

================================================
File: docs/examples/002-simple-json-chunked-single/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/003-simple-json-chunked-multi/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/003-simple-json-chunked/orders",
      "headers": {},
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/003-simple-json-chunked-multi/orders.request
================================================
POST /003-simple-json-chunked/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/003-simple-json-chunked-multi/orders.requestHeaders
================================================
accept: */*
content-length: 248
content-type: application/json


================================================
File: docs/examples/003-simple-json-chunked-multi/orders1.request
================================================
POST /003-simple-json-chunked/orders

[{"id": 567, "name": "Tom Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "Low Street"}]

================================================
File: docs/examples/003-simple-json-chunked-multi/orders1.requestHeaders
================================================
accept: */*
content-length: 121
content-type: application/json


================================================
File: docs/examples/003-simple-json-chunked-multi/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"
"567","Tom Doe","St Mary Mead","UK","Low Street"

================================================
File: docs/examples/004-empty-request-iterations/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/004-empty-request-iteration/orders/[[id]]",
      "headers": {},
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "EMPTY_REQUEST",
      "json_mapping": null,
      "iterate_by_columns": [
        "id"
      ]
    }
  }
}

================================================
File: docs/examples/004-empty-request-iterations/orders123.request
================================================
POST /004-empty-request-iteration/orders/123

================================================
File: docs/examples/004-empty-request-iterations/orders123.requestHeaders
================================================
accept: */*
content-length: 0


================================================
File: docs/examples/004-empty-request-iterations/orders234.request
================================================
POST /004-empty-request-iteration/orders/234

================================================
File: docs/examples/004-empty-request-iterations/orders234.requestHeaders
================================================
accept: */*
content-length: 0


================================================
File: docs/examples/004-empty-request-iterations/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/005-json-iterations/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/005-json-iteration/orders/[[id]]",
      "headers": {},
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": [
        "id"
      ]
    }
  }
}

================================================
File: docs/examples/005-json-iterations/orders123.request
================================================
POST /005-json-iteration/orders/123

[{"name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}]

================================================
File: docs/examples/005-json-iterations/orders123.requestHeaders
================================================
accept: */*
content-length: 114
content-type: application/json


================================================
File: docs/examples/005-json-iterations/orders234.request
================================================
POST /005-json-iteration/orders/234

[{"name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/005-json-iterations/orders234.requestHeaders
================================================
accept: */*
content-length: 112
content-type: application/json


================================================
File: docs/examples/005-json-iterations/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/006-simple-json-custom-headers/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/006-simple-json-custom-headers/orders",
      "headers": {
        "Content-Type": "application/json",
        "token": "12345"
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/006-simple-json-custom-headers/orders.request
================================================
POST /006-simple-json-custom-headers/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/006-simple-json-custom-headers/orders.requestHeaders
================================================
accept: */*
content-type: application/json
token: 12345
content-length: 248


================================================
File: docs/examples/006-simple-json-custom-headers/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/007-simple-json-force-datatype/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/007-simple-json-force-datatype/orders",
      "headers": {},
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": [
            {
              "column": "phone",
              "type": "string"
            }
          ]
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/007-simple-json-force-datatype/orders.request
================================================
POST /007-simple-json-force-datatype/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions", "phone": "755123456"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street", "phone": "766123456"}]

================================================
File: docs/examples/007-simple-json-force-datatype/orders.requestHeaders
================================================
accept: */*
content-length: 292
content-type: application/json


================================================
File: docs/examples/007-simple-json-force-datatype/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street","phone"
"123","John Doe","London","UK","Whitehaven Mansions","755123456"
"234","Jane Doe","St Mary Mead","UK","High Street","766123456"

================================================
File: docs/examples/008-simple-json-nested-object-delimiter/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/008-simple-json-nested-object-delimiter/orders",
      "headers": {},
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "___",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/008-simple-json-nested-object-delimiter/orders.request
================================================
POST /008-simple-json-nested-object-delimiter/orders

[{"id": 123, "name": "John Doe", "address": {"city": "London", "country": "UK", "street": "Whitehaven Mansions"}, "phone": 755123456}, {"id": 234, "name": "Jane Doe", "address": {"city": "St Mary Mead", "country": "UK", "street": "High Street"}, "phone": 766123456}]

================================================
File: docs/examples/008-simple-json-nested-object-delimiter/orders.requestHeaders
================================================
accept: */*
content-length: 266
content-type: application/json


================================================
File: docs/examples/008-simple-json-nested-object-delimiter/in/tables/orders.csv
================================================
"id","name","address___city","address___country","address___street","phone"
"123","John Doe","London","UK","Whitehaven Mansions","755123456"
"234","Jane Doe","St Mary Mead","UK","High Street","766123456"

================================================
File: docs/examples/009-simple-json-request-parameters/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/009-simple-json-request-parameters/orders",
      "headers": {},
      "query_parameters": {
        "date": "2020-01-01",
        "dryrun": true
      }
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/009-simple-json-request-parameters/orders.request
================================================
POST /009-simple-json-request-parameters/orders?date=2020-01-01&dryrun=True

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/009-simple-json-request-parameters/orders.requestHeaders
================================================
accept: */*
content-length: 248
content-type: application/json


================================================
File: docs/examples/009-simple-json-request-parameters/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/010-simple-json-user-parameters-various/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {
      "#token": "123456",
      "date": "2021-01-01"
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/010-simple-json-user-parameters-various/orders",
      "headers": {
        "api-token": {
          "attr": "#token"
        }
      },
      "query_parameters": {
        "date": {
          "attr": "date"
        }
      }
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/010-simple-json-user-parameters-various/orders.request
================================================
POST /010-simple-json-user-parameters-various/orders?date=2021-01-01

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/010-simple-json-user-parameters-various/orders.requestHeaders
================================================
accept: */*
api-token: 123456
content-length: 248
content-type: application/json


================================================
File: docs/examples/010-simple-json-user-parameters-various/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/011-simple-json-user-parameters-from-iterations/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {
      "#token": "123456"
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/011-simple-json-user-parameters-from-iterations/orders",
      "headers": {
        "api-token": {
          "attr": "#token"
        }
      },
      "query_parameters": {
        "order_id": {
          "attr": "id"
        },
        "user_name": {
          "attr": "name"
        }
      }
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": [
        "id",
        "name"
      ]
    }
  }
}

================================================
File: docs/examples/011-simple-json-user-parameters-from-iterations/orders.request
================================================
POST /011-simple-json-user-parameters-from-iterations/orders?order_id=123&user_name=John+Doe

[{"address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}]

================================================
File: docs/examples/011-simple-json-user-parameters-from-iterations/orders.requestHeaders
================================================
accept: */*
api-token: 123456
content-length: 94
content-type: application/json


================================================
File: docs/examples/011-simple-json-user-parameters-from-iterations/orders1.request
================================================
POST /011-simple-json-user-parameters-from-iterations/orders?order_id=234&user_name=Jane+Doe

[{"address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/011-simple-json-user-parameters-from-iterations/orders1.requestHeaders
================================================
accept: */*
api-token: 123456
content-length: 92
content-type: application/json


================================================
File: docs/examples/011-simple-json-user-parameters-from-iterations/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/012-simple-json-request-data-wrapper/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/012-simple-json-request-data-wrapper/orders",
      "headers": {},
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "{ \"wrapped_data\":{\"mode\":\"update\", \"data_payload\": [[data]]}}",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/012-simple-json-request-data-wrapper/orders.request
================================================
POST /012-simple-json-request-data-wrapper/orders

{"wrapped_data": {"mode": "update", "data_payload": [{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]}}

================================================
File: docs/examples/012-simple-json-request-data-wrapper/orders.requestHeaders
================================================
accept: */*
content-length: 302
content-type: application/json


================================================
File: docs/examples/012-simple-json-request-data-wrapper/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/013-simple-json-function-concat/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {
      "api_token": {
        "function": "concat",
        "args": [
          "Bearer ",
          "SOME_SECRET_TOKEN"
        ]
      }
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/013-simple-json-function-concat/orders",
      "headers": {
        "tokenkey": {
          "attr": "api_token"
        }
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/013-simple-json-function-concat/orders.request
================================================
POST /013-simple-json-function-concat/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/013-simple-json-function-concat/orders.requestHeaders
================================================
accept: */*
tokenkey: Bearer SOME_SECRET_TOKEN
content-length: 248
content-type: application/json


================================================
File: docs/examples/013-simple-json-function-concat/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/014-simple-json-function-user-param-reference/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {
      "#user_provided_token": "SOME_SECRET_TOKEN",
      "token_header_value": {
        "function": "concat",
        "args": [
          "Bearer ",
          {
            "attr": "#user_provided_token"
          }
        ]
      }
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/014-simple-json-function-user-param-reference/orders",
      "headers": {
        "tokenkey": {
          "attr": "token_header_value"
        }
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/014-simple-json-function-user-param-reference/orders.request
================================================
POST /014-simple-json-function-user-param-reference/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/014-simple-json-function-user-param-reference/orders.requestHeaders
================================================
accept: */*
tokenkey: Bearer SOME_SECRET_TOKEN
content-length: 248
content-type: application/json


================================================
File: docs/examples/014-simple-json-function-user-param-reference/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/015-simple-json-function-string-to-date/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {
      "start_date": {
        "function": "string_to_date",
        "args": [
          "2021-01-01",
          "%d-%m-%Y"
        ]
      }
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/015-simple-json-function-string-to-date/orders",
      "headers": {},
      "query_parameters": {
        "date": {
          "attr": "start_date"
        }
      }
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/015-simple-json-function-string-to-date/orders.request
================================================
POST /015-simple-json-function-string-to-date/orders?date=01-01-2021

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/015-simple-json-function-string-to-date/orders.requestHeaders
================================================
accept: */*
content-length: 248
content-type: application/json


================================================
File: docs/examples/015-simple-json-function-string-to-date/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/016-simple-json-function-base64-encode/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {
      "encoded_value": {
        "function": "base64_encode",
        "args": [
          "SOME_VALUE_TO_ENCODE"
        ]
      }
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/016-simple-json-function-base64-encode/orders",
      "headers": {
        "sign-hash": {
          "attr": "encoded_value"
        }
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/016-simple-json-function-base64-encode/orders.request
================================================
POST /016-simple-json-function-base64-encode/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/016-simple-json-function-base64-encode/orders.requestHeaders
================================================
accept: */*
sign-hash: U09NRV9WQUxVRV9UT19FTkNPREU=
content-length: 248
content-type: application/json


================================================
File: docs/examples/016-simple-json-function-base64-encode/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/017-simple-json-function-base64-encode-basic-auth/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {
      "#token": "user:password",
      "encoded_token": {
        "function": "base64_encode",
        "args": [
          {
            "attr": "#token"
          }
        ]
      },
      "header_value": {
        "function": "concat",
        "args": [
          "Basic ",
          {
            "attr": "encoded_token"
          }
        ]
      }
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/017-simple-json-function-base64-encode-basic-auth/orders",
      "headers": {
        "Authorization": {
          "attr": "header_value"
        }
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/017-simple-json-function-base64-encode-basic-auth/orders.request
================================================
POST /017-simple-json-function-base64-encode-basic-auth/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/017-simple-json-function-base64-encode-basic-auth/orders.requestHeaders
================================================
accept: */*
authorization: Basic dXNlcjpwYXNzd29yZA==
content-length: 248
content-type: application/json


================================================
File: docs/examples/017-simple-json-function-base64-encode-basic-auth/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/018-simple-json-function-md5-encode/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {
      "encoded_value": {
        "function": "md5_encode",
        "args": [
          "SOME_VALUE_TO_ENCODE"
        ]
      }
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/018-simple-json-function-md5-encode/orders",
      "headers": {
        "sign-hash": {
          "attr": "encoded_value"
        }
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/018-simple-json-function-md5-encode/orders.request
================================================
POST /018-simple-json-function-md5-encode/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/018-simple-json-function-md5-encode/orders.requestHeaders
================================================
accept: */*
sign-hash: 6b9262f0cbf7d8380eb2603f6f05d2ea
content-length: 248
content-type: application/json


================================================
File: docs/examples/018-simple-json-function-md5-encode/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/019-simple-json-function-nesting-basic-auth/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {
      "#token": "user:password",
      "header_value": {
        "function": "concat",
        "args": [
          "Basic ",
          {
            "function": "base64_encode",
            "args": [
              {
                "attr": "#token"
              }
            ]
          }
        ]
      }
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/019-simple-json-function-nesting-basic-auth/orders",
      "headers": {
        "Authorization": {
          "attr": "header_value"
        }
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/019-simple-json-function-nesting-basic-auth/orders.request
================================================
POST /019-simple-json-function-nesting-basic-auth/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/019-simple-json-function-nesting-basic-auth/orders.requestHeaders
================================================
accept: */*
authorization: Basic dXNlcjpwYXNzd29yZA==
content-length: 248
content-type: application/json


================================================
File: docs/examples/019-simple-json-function-nesting-basic-auth/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/020-simple-json-column-name-override/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/020-simple-json-column-name-override/orders",
      "headers": {
        "Content-Type": "application/json",
        "token": "12345"
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {
          "address_city": "address[city]",
          "address_country": "address[country]",
          "address_street": "address[street]"
        }
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/020-simple-json-column-name-override/orders.request
================================================
POST /020-simple-json-column-name-override/orders

[{"id": 123, "name": "John Doe", "address[city]": "London", "address[country]": "UK", "address[street]": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address[city]": "St Mary Mead", "address[country]": "UK", "address[street]": "High Street"}]

================================================
File: docs/examples/020-simple-json-column-name-override/orders.requestHeaders
================================================
accept: */*
content-type: application/json
token: 12345
content-length: 254


================================================
File: docs/examples/020-simple-json-column-name-override/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/021-simple-json-url-encoded-form/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/021-simple-json-url-encoded-form/orders",
      "headers": {
        "token": "12345"
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON_URL_ENCODED",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 1,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/021-simple-json-url-encoded-form/orders.request
================================================
POST /021-simple-json-url-encoded-form/orders

id=123&name=John+Doe&address_city=London&address_country=UK&address_street=Whitehaven+Mansions

================================================
File: docs/examples/021-simple-json-url-encoded-form/orders.requestHeaders
================================================
accept: */*
token: 12345
content-length: 94
content-type: application/x-www-form-urlencoded


================================================
File: docs/examples/021-simple-json-url-encoded-form/orders1.request
================================================
POST /021-simple-json-url-encoded-form/orders

id=234&name=Jane+Doe&address_city=St+Mary+Mead&address_country=UK&address_street=High+Street

================================================
File: docs/examples/021-simple-json-url-encoded-form/orders1.requestHeaders
================================================
accept: */*
token: 12345
content-length: 92
content-type: application/x-www-form-urlencoded


================================================
File: docs/examples/021-simple-json-url-encoded-form/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/022-empty-request-iterations-delete/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "DELETE",
      "endpoint_path": "/022-empty-request-iterations-delete/orders/[[id]]",
      "headers": {},
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "EMPTY_REQUEST",
      "json_mapping": null,
      "iterate_by_columns": [
        "id"
      ]
    }
  }
}

================================================
File: docs/examples/022-empty-request-iterations-delete/orders123.request
================================================
DELETE /022-empty-request-iterations-delete/orders/123

================================================
File: docs/examples/022-empty-request-iterations-delete/orders123.requestHeaders
================================================
accept: */*
content-length: 0


================================================
File: docs/examples/022-empty-request-iterations-delete/orders234.request
================================================
DELETE /022-empty-request-iterations-delete/orders/234

================================================
File: docs/examples/022-empty-request-iterations-delete/orders234.requestHeaders
================================================
accept: */*
content-length: 0


================================================
File: docs/examples/022-empty-request-iterations-delete/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/023-simple-json-nested-object-rename-column/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/023-simple-json-nested-object-rename-column/orders"
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "___",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true
        },
        "column_names_override": {
          "address___city": "city.address"
        }
      }
    }
  }
}

================================================
File: docs/examples/023-simple-json-nested-object-rename-column/orders.request
================================================
POST /023-simple-json-nested-object-rename-column/orders

[{"id": 123, "name": "John Doe", "address": {"country": "UK", "street": "Whitehaven Mansions", "city.address": "London"}, "phone": 755123456}, {"id": 234, "name": "Jane Doe", "address": {"country": "UK", "street": "High Street", "city.address": "St Mary Mead"}, "phone": 766123456}]

================================================
File: docs/examples/023-simple-json-nested-object-rename-column/orders.requestHeaders
================================================
accept: */*
content-length: 282
content-type: application/json


================================================
File: docs/examples/023-simple-json-nested-object-rename-column/in/tables/orders.csv
================================================
"id","name","address___city","address___country","address___street","phone"
"123","John Doe","London","UK","Whitehaven Mansions","755123456"
"234","Jane Doe","St Mary Mead","UK","High Street","766123456"

================================================
File: docs/examples/024-simple-json-basic-http-auth/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "authentication": {
        "type": "BasicHttp",
        "parameters": {
          "username": "test_user",
          "#password": "pass"
        }
      }
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/024-simple-json-basic-http-auth/orders"
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true
        }
      }
    }
  }
}

================================================
File: docs/examples/024-simple-json-basic-http-auth/orders.request
================================================
POST /024-simple-json-basic-http-auth/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/024-simple-json-basic-http-auth/orders.requestHeaders
================================================
accept: */*
content-length: 248
content-type: application/json
authorization: Basic dGVzdF91c2VyOnBhc3M=


================================================
File: docs/examples/024-simple-json-basic-http-auth/orders.response
================================================
{"status":"success"}

================================================
File: docs/examples/024-simple-json-basic-http-auth/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/025-simple-json-basic-http-auth-from-user-params/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "authentication": {
        "type": "BasicHttp",
        "parameters": {
          "username": {
            "attr": "user"
          },
          "#password": "pass"
        }
      }
    },
    "user_parameters": {
      "user": "test_user"
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/025-simple-json-basic-http-auth-from-user-params/orders"
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true
        }
      }
    }
  }
}

================================================
File: docs/examples/025-simple-json-basic-http-auth-from-user-params/orders.request
================================================
POST /025-simple-json-basic-http-auth-from-user-params/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/025-simple-json-basic-http-auth-from-user-params/orders.requestHeaders
================================================
accept: */*
content-length: 248
content-type: application/json
authorization: Basic dGVzdF91c2VyOnBhc3M=


================================================
File: docs/examples/025-simple-json-basic-http-auth-from-user-params/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/026-json-iterations-query-params-in-path/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80"
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/026-json-iterations-query-params-in-path/orders/[[id]]?name=[[name]]&address_city=[[address_city]]",
      "headers": {},
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": [
        "id",
        "name",
        "address_city"
      ]
    }
  }
}

================================================
File: docs/examples/026-json-iterations-query-params-in-path/orders123.request
================================================
POST /026-json-iterations-query-params-in-path/orders/123?name=John%20Doe&address_city=London

[{"address_country": "UK", "address_street": "Whitehaven Mansions"}]

================================================
File: docs/examples/026-json-iterations-query-params-in-path/orders123.requestHeaders
================================================
accept: */*
content-length: 68
content-type: application/json


================================================
File: docs/examples/026-json-iterations-query-params-in-path/orders234.request
================================================
POST /026-json-iterations-query-params-in-path/orders/234?name=Jane%20Doe&address_city=St%20Mary%20Mead

[{"address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/026-json-iterations-query-params-in-path/orders234.requestHeaders
================================================
accept: */*
content-length: 60
content-type: application/json


================================================
File: docs/examples/026-json-iterations-query-params-in-path/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/027-retry/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "retry_config": {
        "max_retries": 2,
        "codes": [
          500
        ]
      }
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/027-retry/orders"
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      }
    },
    "debug": true
  }
}

================================================
File: docs/examples/027-retry/exit_code
================================================
1

================================================
File: docs/examples/027-retry/orders.request
================================================
POST /027-retry/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/027-retry/orders.requestHeaders
================================================
accept: */*
content-length: 248
content-type: application/json


================================================
File: docs/examples/027-retry/orders.response
================================================
{"status":"error"}

================================================
File: docs/examples/027-retry/orders.responseCode
================================================
500

================================================
File: docs/examples/027-retry/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/028-simple-json-user-parameters-api-section/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "default_headers": {
        "api-token": {
          "attr": "#token"
        }
      },
      "default_query_parameters": {
        "date": {
          "attr": "date"
        }
      }
    },
    "user_parameters": {
      "#token": "123456",
      "date": "2021-01-01"
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/028-simple-json-user-parameters-api-section/orders"
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/028-simple-json-user-parameters-api-section/orders.request
================================================
POST /028-simple-json-user-parameters-api-section/orders?date=2021-01-01

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/028-simple-json-user-parameters-api-section/orders.requestHeaders
================================================
accept: */*
api-token: 123456
content-length: 248
content-type: application/json


================================================
File: docs/examples/028-simple-json-user-parameters-api-section/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/029-simple-json-object-fields/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "default_headers": []
    },
    "debug": true,
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/029-simple-json-object-fields/orders",
      "headers": [],
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "_",
        "chunk_size": 1,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": [
            {
              "column": "json",
              "type": "object"
            }
          ]
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": [
        "symbol"
      ]
    }
  }
}

================================================
File: docs/examples/029-simple-json-object-fields/orders.request
================================================
POST /029-simple-json-object-fields/orders

{"symbol": {"name": "Test"}, "compan": {"name": {"code": "TEST Inc."}}, "change": {"alert": "NaN"}, "json": {"content": "Ttest push", "defaultTranslation": true, "langs": ["en"]}}

================================================
File: docs/examples/029-simple-json-object-fields/orders.requestHeaders
================================================
accept: */*
content-length: 179
content-type: application/json


================================================
File: docs/examples/029-simple-json-object-fields/in/tables/test.csv
================================================
symbol,symbol_name,compan_name_code,change_alert,json
TTT,Test,TEST Inc.,NaN,"{""content"":""Ttest push"",""defaultTranslation"":true,""langs"":[""en""]}"

================================================
File: docs/examples/030-bearer-token-auth/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "authentication": {
        "type": "BearerToken",
        "parameters": {
          "#token": "XXXX"
        }
      }
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/030-bearer-token-auth/orders",
      "headers": {
        "Content-Type": "application/json",
        "token": "12345"
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/030-bearer-token-auth/orders.request
================================================
POST /030-bearer-token-auth/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/030-bearer-token-auth/orders.requestHeaders
================================================
accept: */*
content-type: application/json
token: 12345
content-length: 248
authorization: Bearer XXXX


================================================
File: docs/examples/030-bearer-token-auth/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/031-auth-token-query/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "authentication": {
        "type": "ApiKey",
        "parameters": {
          "#token": {"attr":"#__password"},
          "key": "token",
          "position": "query"
        }
      }
    },
    "user_parameters": {
      "#__password": "XXXX"
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/031-auth-token-query/orders",
      "headers": {
        "Content-Type": "application/json"
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/031-auth-token-query/orders.request
================================================
POST /031-auth-token-query/orders?token=XXXX

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/031-auth-token-query/orders.requestHeaders
================================================
accept: */*
content-type: application/json
content-length: 248


================================================
File: docs/examples/031-auth-token-query/orders.response
================================================
{"status":"success"}

================================================
File: docs/examples/031-auth-token-query/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/032-auth-token-header/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "authentication": {
        "type": "ApiKey",
        "parameters": {
          "#token": {"attr":"#__password"},
          "key": "token",
          "position": "headers"
        }
      }
    },
    "user_parameters": {
      "#__password": "XXXX"
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/032-auth-token-header/orders",
      "headers": {
        "Content-Type": "application/json"
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/032-auth-token-header/orders.request
================================================
POST /032-auth-token-header/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/032-auth-token-header/orders.requestHeaders
================================================
accept: */*
content-type: application/json
token: XXXX
content-length: 248


================================================
File: docs/examples/032-auth-token-header/orders.response
================================================
{"status":"success"}

================================================
File: docs/examples/032-auth-token-header/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/033-auth-login-query/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "authentication": {
        "type": "Login",
        "parameters": {
          "loginRequest": {
            "endpoint": "/033-auth-login-query/login",
            "method": "GET",
            "headers": {
              "X-Login": "JohnDoe",
              "X-Password": {"attr":"#__password"}
          }
        },
        "apiRequest": {
          "query": {
            "token": {
              "response": "authorization.token"
            }
          }
        }
        }
      }
    },
    "user_parameters": {
      "#__password": "TopSecret"
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/033-auth-login-query/orders",
      "headers": {
        "Content-Type": "application/json"
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/033-auth-login-query/login.request
================================================
GET /033-auth-login-query/login

================================================
File: docs/examples/033-auth-login-query/login.requestHeaders
================================================
accept: */*
x-login: JohnDoe
x-password: TopSecret


================================================
File: docs/examples/033-auth-login-query/login.response
================================================
{
	"authorization": {
		"token": "a1b2c3d435f6"
	}
}

================================================
File: docs/examples/033-auth-login-query/orders.request
================================================
POST /033-auth-login-query/orders?token=a1b2c3d435f6

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/033-auth-login-query/orders.requestHeaders
================================================
accept: */*
content-type: application/json
content-length: 248


================================================
File: docs/examples/033-auth-login-query/orders.response
================================================
{"status":"success"}

================================================
File: docs/examples/033-auth-login-query/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/034-auth-login/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "authentication": {
        "type": "Login",
        "parameters": {
          "loginRequest": {
            "endpoint": "/034-auth-login/login",
            "method": "GET",
            "headers": {
              "X-Login": "JohnDoe",
              "X-Password": {"attr":"#__password"}
          }
        },
        "apiRequest": {
          "headers": {
            "X-ApiToken": {
              "response": "authorization.token"
            }
          }
        }
        }
      }
    },
    "user_parameters": {
      "#__password": "TopSecret"
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/034-auth-login/orders",
      "headers": {
        "Content-Type": "application/json"
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  }
}

================================================
File: docs/examples/034-auth-login/login.request
================================================
GET /034-auth-login/login

================================================
File: docs/examples/034-auth-login/login.requestHeaders
================================================
accept: */*
x-login: JohnDoe
x-password: TopSecret


================================================
File: docs/examples/034-auth-login/login.response
================================================
{
	"authorization": {
		"token": "a1b2c3d435f6"
	}
}

================================================
File: docs/examples/034-auth-login/orders.request
================================================
POST /034-auth-login/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/034-auth-login/orders.requestHeaders
================================================
accept: */*
content-type: application/json
content-length: 248
x-apitoken: a1b2c3d435f6


================================================
File: docs/examples/034-auth-login/orders.response
================================================
{"status":"success"}

================================================
File: docs/examples/034-auth-login/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/035-oauth_basic/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "authentication": {
        "type": "OAuth20ClientCredentials",
        "format": "json",
        "parameters": {
          "loginRequest": {
            "endpoint": "/035-oauth_basic/login",
            "method": "GET",
            "type": "client_secret_basic",
            "headers": {}
        },
        "apiRequest": {
          "headers": {
            "X-ApiToken": {"response": "access_token" }
          }
        }
        }
      }
    },
    "user_parameters": {
      "#__password": "TopSecret"
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/035-oauth_basic/orders",
      "headers": {
        "Content-Type": "application/json"
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  },"authorization": {
        "oauth_api": {
            "credentials": {
                "#data": "{\"status\": \"ok\",\"access_token\": \"testToken\", \"mac_secret\": \"iAreSoSecret123\"}",
                "appKey": "clientId",
                "#appSecret": "clientSecret"
            }
        }
    }
}

================================================
File: docs/examples/035-oauth_basic/login.request
================================================
GET /035-oauth_basic/login

================================================
File: docs/examples/035-oauth_basic/login.requestHeaders
================================================
accept: */*
authorization: Basic Y2xpZW50SWQ6Y2xpZW50U2VjcmV0
content-type: application/x-www-form-urlencoded


================================================
File: docs/examples/035-oauth_basic/login.response
================================================
{
    "access_token": "mkoijn098uhbygv"
}

================================================
File: docs/examples/035-oauth_basic/orders.request
================================================
POST /035-oauth_basic/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/035-oauth_basic/orders.requestHeaders
================================================
accept: */*
content-type: application/json
content-length: 248
x-apitoken: mkoijn098uhbygv


================================================
File: docs/examples/035-oauth_basic/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/036-oauth_post_json/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "authentication": {
        "type": "OAuth20ClientCredentials",
        "format": "json",
        "parameters": {
          "loginRequest": {
            "endpoint": "/036-oauth_post_json/login",
            "method": "POST",
            "type": "client_secret_post_json",
            "headers": {}
        },
        "apiRequest": {
          "headers": {
            "X-ApiToken": {"response": "access_token"}
          }
        }
        }
      }
    },
    "user_parameters": {
      "#__password": "TopSecret"
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/036-oauth_post_json/orders",
      "headers": {
        "Content-Type": "application/json"
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  },"authorization": {
        "oauth_api": {
            "credentials": {
                "#data": "{\"status\": \"ok\",\"access_token\": \"testToken\", \"mac_secret\": \"iAreSoSecret123\"}",
                "appKey": "clientId",
                "#appSecret": "clientSecret"
            }
        }
    }
}

================================================
File: docs/examples/036-oauth_post_json/login.request
================================================
POST /036-oauth_post_json/login

{"grant_type": "client_credentials", "client_id": "clientId", "client_secret": "clientSecret"}

================================================
File: docs/examples/036-oauth_post_json/login.requestHeaders
================================================
accept: */*
content-length: 94
content-type: application/json


================================================
File: docs/examples/036-oauth_post_json/login.response
================================================
{
    "access_token": "mkoijn098uhbygv"
}

================================================
File: docs/examples/036-oauth_post_json/orders.request
================================================
POST /036-oauth_post_json/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/036-oauth_post_json/orders.requestHeaders
================================================
accept: */*
content-type: application/json
content-length: 248
x-apitoken: mkoijn098uhbygv


================================================
File: docs/examples/036-oauth_post_json/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/examples/037-oauth_post_form/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "http://mock-server:80",
      "authentication": {
        "type": "OAuth20ClientCredentials",
        "format": "json",
        "parameters": {
          "loginRequest": {
            "endpoint": "/037-oauth_post_form/login",
            "method": "GET",
            "type": "client_secret_post_form",
            "headers": {}
        },
        "apiRequest": {
          "headers": {
            "X-ApiToken": {"response": "access_token"}
          }
        }
        }
      }
    },
    "user_parameters": {
      "#__password": "TopSecret"
    },
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/037-oauth_post_form/orders",
      "headers": {
        "Content-Type": "application/json"
      },
      "query_parameters": {}
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true,
          "datatype_override": []
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      },
      "iterate_by_columns": []
    }
  },"authorization": {
        "oauth_api": {
            "credentials": {
                "#data": "{\"status\": \"ok\",\"access_token\": \"testToken\", \"mac_secret\": \"iAreSoSecret123\"}",
                "appKey": "id",
                "#appSecret": "sec"
            }
        }
    }
}

================================================
File: docs/examples/037-oauth_post_form/login.request
================================================
GET /037-oauth_post_form/login?grant_type=client_credentials&client_id=id&client_secret=sec

================================================
File: docs/examples/037-oauth_post_form/login.requestHeaders
================================================
accept: */*
content-type: application/x-www-form-urlencoded


================================================
File: docs/examples/037-oauth_post_form/login.response
================================================
{
    "access_token": "mkoijn098uhbygv"
}

================================================
File: docs/examples/037-oauth_post_form/orders.request
================================================
POST /037-oauth_post_form/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/examples/037-oauth_post_form/orders.requestHeaders
================================================
accept: */*
content-type: application/json
content-length: 248
x-apitoken: mkoijn098uhbygv


================================================
File: docs/examples/037-oauth_post_form/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/convert_tov2.py
================================================
import json
import os
import shutil
import sys
from pathlib import Path
from runpy import run_path
from typing import List

from configuration import convert_to_v2


def _get_testing_dirs(data_dir: str) -> List:
    """
    Gets directories within a directory that do not start with an underscore

    Args:
        data_dir: directory which holds directories

    Returns:
        list of paths inside directory
    """
    return [os.path.join(data_dir, o) for o in os.listdir(data_dir) if
            os.path.isdir(os.path.join(data_dir, o)) and not o.startswith('_')]


def run_component(component_script, data_folder):
    """
    Runs a component script with a specified parameters
    """
    os.environ["KBC_DATADIR"] = data_folder
    run_path(component_script, run_name='__main__')


test_dirs = _get_testing_dirs(Path(__file__).parent.absolute().as_posix())

v2_dir = Path(__file__).parent.joinpath('v2').absolute()

component_script = Path(__file__).absolute().parent.parent.parent.joinpath('src/component.py').as_posix()

for dir_path in test_dirs:
    if Path(dir_path).name == 'v2':
        continue
    print(f'Converting example {Path(dir_path).name}/n')
    sys.path.append(Path(component_script).parent.as_posix())
    result_dir = v2_dir.joinpath(Path(dir_path).name)
    shutil.copytree(dir_path, result_dir.as_posix(), dirs_exist_ok=True)
    # convert config
    with open(Path(dir_path).joinpath('config.json').absolute().as_posix()) as inp:
        old_cfg = json.load(inp)
        new_params = convert_to_v2(old_cfg['parameters'])
    with open(result_dir.joinpath('config.json').absolute().as_posix(), 'w+') as outp:
        old_cfg['parameters'] = new_params
        json.dump(old_cfg, outp)

print('All conversions finished successfully!')


================================================
File: docs/legacy_v1_examples/001-simple-json/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/001-simple-json/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {},
    "headers": [],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/001-simple-json/orders.request
================================================
POST /001-simple-json/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/001-simple-json/orders.requestHeaders
================================================
accept: */*
content-length: 248
content-type: application/json


================================================
File: docs/legacy_v1_examples/001-simple-json/orders.response
================================================
{"status":"success"}

================================================
File: docs/legacy_v1_examples/001-simple-json/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/002-simple-json-chunked-single/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/009-simple-json-request-parameters/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {},
    "headers": [],
    "additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "date": "2020-01-01",
          "dryrun": true
        }
      }
    ],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/002-simple-json-chunked-single/orders.request
================================================
POST /002-simple-json-chunked/orders

{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}

================================================
File: docs/legacy_v1_examples/002-simple-json-chunked-single/orders.requestHeaders
================================================
accept: */*
content-length: 123
content-type: application/json


================================================
File: docs/legacy_v1_examples/002-simple-json-chunked-single/orders.response
================================================
{"status":"success"}

================================================
File: docs/legacy_v1_examples/002-simple-json-chunked-single/orders1.request
================================================
POST /002-simple-json-chunked/orders

{"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}

================================================
File: docs/legacy_v1_examples/002-simple-json-chunked-single/orders1.requestHeaders
================================================
accept: */*
content-length: 121
content-type: application/json


================================================
File: docs/legacy_v1_examples/002-simple-json-chunked-single/orders2.request
================================================
POST /002-simple-json-chunked/orders

{"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}

================================================
File: docs/legacy_v1_examples/002-simple-json-chunked-single/orders2.response
================================================
{"status":"success"}

================================================
File: docs/legacy_v1_examples/002-simple-json-chunked-single/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/003-simple-json-chunked-multi/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/003-simple-json-chunked/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {},
    "headers": [],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/003-simple-json-chunked-multi/orders.request
================================================
POST /003-simple-json-chunked/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/003-simple-json-chunked-multi/orders.requestHeaders
================================================
accept: */*
content-length: 248
content-type: application/json


================================================
File: docs/legacy_v1_examples/003-simple-json-chunked-multi/orders1.request
================================================
POST /003-simple-json-chunked/orders

[{"id": 567, "name": "Tom Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "Low Street"}]

================================================
File: docs/legacy_v1_examples/003-simple-json-chunked-multi/orders1.requestHeaders
================================================
accept: */*
content-length: 121
content-type: application/json


================================================
File: docs/legacy_v1_examples/003-simple-json-chunked-multi/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"
"567","Tom Doe","St Mary Mead","UK","Low Street"

================================================
File: docs/legacy_v1_examples/004-empty-request-iterations/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/004-empty-request-iteration/orders/[[id]]",
    "mode": "EMPTY_REQUEST",
    "method": "POST",
    "user_parameters": {},
    "headers": [],
    "additional_requests_pars": [],
    "iteration_mode": {
      "iteration_par_columns": [
        "id"
      ]},
    "json_data_config": {},
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/004-empty-request-iterations/orders123.request
================================================
POST /004-empty-request-iteration/orders/123

================================================
File: docs/legacy_v1_examples/004-empty-request-iterations/orders123.requestHeaders
================================================
accept: */*
content-length: 0


================================================
File: docs/legacy_v1_examples/004-empty-request-iterations/orders234.request
================================================
POST /004-empty-request-iteration/orders/234

================================================
File: docs/legacy_v1_examples/004-empty-request-iterations/orders234.requestHeaders
================================================
accept: */*
content-length: 0


================================================
File: docs/legacy_v1_examples/004-empty-request-iterations/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/005-json-iterations/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/005-json-iteration/orders/[[id]]",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {},
    "headers": [],
    "additional_requests_pars": [],
    "iteration_mode": {
      "iteration_par_columns": [
        "id"
      ]},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/005-json-iterations/orders123.request
================================================
POST /005-json-iteration/orders/123

[{"name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}]

================================================
File: docs/legacy_v1_examples/005-json-iterations/orders123.requestHeaders
================================================
accept: */*
content-length: 114
content-type: application/json


================================================
File: docs/legacy_v1_examples/005-json-iterations/orders234.request
================================================
POST /005-json-iteration/orders/234

[{"name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/005-json-iterations/orders234.requestHeaders
================================================
accept: */*
content-length: 112
content-type: application/json


================================================
File: docs/legacy_v1_examples/005-json-iterations/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/006-simple-json-custom-headers/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/006-simple-json-custom-headers/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {},
    "headers": [
      {
        "key": "Content-Type",
        "value": "application/json"
      },
      {
        "key": "token",
        "value": "12345"
      }
    ],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/006-simple-json-custom-headers/orders.request
================================================
POST /006-simple-json-custom-headers/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/006-simple-json-custom-headers/orders.requestHeaders
================================================
accept: */*
content-type: application/json
token: 12345
content-length: 248


================================================
File: docs/legacy_v1_examples/006-simple-json-custom-headers/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/007-simple-json-force-datatype/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/007-simple-json-force-datatype/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {},
    "headers": [],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true,
      "column_types": [
        {
          "column": "phone",
          "type": "string"
        }
      ]
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/007-simple-json-force-datatype/orders.request
================================================
POST /007-simple-json-force-datatype/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions", "phone": "755123456"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street", "phone": "766123456"}]

================================================
File: docs/legacy_v1_examples/007-simple-json-force-datatype/orders.requestHeaders
================================================
accept: */*
content-length: 292
content-type: application/json


================================================
File: docs/legacy_v1_examples/007-simple-json-force-datatype/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street","phone"
"123","John Doe","London","UK","Whitehaven Mansions","755123456"
"234","Jane Doe","St Mary Mead","UK","High Street","766123456"

================================================
File: docs/legacy_v1_examples/008-simple-json-nested-object-delimiter/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/008-simple-json-nested-object-delimiter/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {},
    "headers": [],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "___",
      "infer_types_for_unknown": true,
      "column_types": []
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/008-simple-json-nested-object-delimiter/orders.request
================================================
POST /008-simple-json-nested-object-delimiter/orders

[{"id": 123, "name": "John Doe", "address": {"city": "London", "country": "UK", "street": "Whitehaven Mansions"}, "phone": 755123456}, {"id": 234, "name": "Jane Doe", "address": {"city": "St Mary Mead", "country": "UK", "street": "High Street"}, "phone": 766123456}]

================================================
File: docs/legacy_v1_examples/008-simple-json-nested-object-delimiter/orders.requestHeaders
================================================
accept: */*
content-length: 266
content-type: application/json


================================================
File: docs/legacy_v1_examples/008-simple-json-nested-object-delimiter/in/tables/orders.csv
================================================
"id","name","address___city","address___country","address___street","phone"
"123","John Doe","London","UK","Whitehaven Mansions","755123456"
"234","Jane Doe","St Mary Mead","UK","High Street","766123456"

================================================
File: docs/legacy_v1_examples/009-simple-json-request-parameters/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/009-simple-json-request-parameters/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {},
    "headers": [],
    "additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "date": "2020-01-01",
          "dryrun": true
        }
      }
    ],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/009-simple-json-request-parameters/orders.request
================================================
POST /009-simple-json-request-parameters/orders?date=2020-01-01&dryrun=True

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/009-simple-json-request-parameters/orders.requestHeaders
================================================
accept: */*
content-length: 248
content-type: application/json


================================================
File: docs/legacy_v1_examples/009-simple-json-request-parameters/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/010-simple-json-user-parameters-various/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/010-simple-json-user-parameters-various/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {
      "#token": "123456",
      "date": "2021-01-01"
    },
    "headers": [
      {
        "key": "api-token",
        "value": {
          "attr": "#token"
        }
      }
    ],
    "additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "date": {
            "attr": "date"
          }
        }
      }
    ],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true,
      "column_types": []
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/010-simple-json-user-parameters-various/orders.request
================================================
POST /010-simple-json-user-parameters-various/orders?date=2021-01-01

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/010-simple-json-user-parameters-various/orders.requestHeaders
================================================
accept: */*
api-token: 123456
content-length: 248
content-type: application/json


================================================
File: docs/legacy_v1_examples/010-simple-json-user-parameters-various/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/011-simple-json-user-parameters-from-iterations/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/011-simple-json-user-parameters-from-iterations/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {
      "#token": "123456"
    },
    "headers": [
      {
        "key": "api-token",
        "value": {
          "attr": "#token"
        }
      }
    ],
    "additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "order_id": {
            "attr": "id"
          },
          "user_name": {
            "attr": "name"
          }
        }
      }
    ],
    "iteration_mode": {
      "iteration_par_columns": [
        "id",
        "name"
      ]
    },
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true,
      "column_types": []
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/011-simple-json-user-parameters-from-iterations/orders.request
================================================
POST /011-simple-json-user-parameters-from-iterations/orders?order_id=123&user_name=John+Doe

[{"address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}]

================================================
File: docs/legacy_v1_examples/011-simple-json-user-parameters-from-iterations/orders.requestHeaders
================================================
accept: */*
api-token: 123456
content-length: 94
content-type: application/json


================================================
File: docs/legacy_v1_examples/011-simple-json-user-parameters-from-iterations/orders1.request
================================================
POST /011-simple-json-user-parameters-from-iterations/orders?order_id=234&user_name=Jane+Doe

[{"address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/011-simple-json-user-parameters-from-iterations/orders1.requestHeaders
================================================
accept: */*
api-token: 123456
content-length: 92
content-type: application/json


================================================
File: docs/legacy_v1_examples/011-simple-json-user-parameters-from-iterations/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/012-simple-json-request-data-wrapper/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/012-simple-json-request-data-wrapper/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {},
    "headers": [],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "request_data_wrapper": "{ \"wrapped_data\":{\"mode\":\"update\", \"data_payload\": [[data]]}}",
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/012-simple-json-request-data-wrapper/orders.request
================================================
POST /012-simple-json-request-data-wrapper/orders

{"wrapped_data": {"mode": "update", "data_payload": [{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]}}

================================================
File: docs/legacy_v1_examples/012-simple-json-request-data-wrapper/orders.requestHeaders
================================================
accept: */*
content-length: 302
content-type: application/json


================================================
File: docs/legacy_v1_examples/012-simple-json-request-data-wrapper/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/013-simple-json-function-concat/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/013-simple-json-function-concat/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {
      "api_token": {
        "function": "concat",
        "args": [
          "Bearer ",
          "SOME_SECRET_TOKEN"
        ]
      }
    },
    "headers": [
      {
        "key": "tokenkey",
        "value": {
          "attr": "api_token"
        }
      }
    ],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/013-simple-json-function-concat/orders.request
================================================
POST /013-simple-json-function-concat/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/013-simple-json-function-concat/orders.requestHeaders
================================================
accept: */*
tokenkey: Bearer SOME_SECRET_TOKEN
content-length: 248
content-type: application/json


================================================
File: docs/legacy_v1_examples/013-simple-json-function-concat/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/014-simple-json-function-user-param-reference/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/014-simple-json-function-user-param-reference/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {
      "#user_provided_token": "SOME_SECRET_TOKEN",
      "token_header_value": {
        "function": "concat",
        "args": [
          "Bearer ",
          {
            "attr": "#user_provided_token"
          }
        ]
      }
    },
    "headers": [
      {
        "key": "tokenkey",
        "value": {
          "attr": "token_header_value"
        }
      }
    ],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/014-simple-json-function-user-param-reference/orders.request
================================================
POST /014-simple-json-function-user-param-reference/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/014-simple-json-function-user-param-reference/orders.requestHeaders
================================================
accept: */*
tokenkey: Bearer SOME_SECRET_TOKEN
content-length: 248
content-type: application/json


================================================
File: docs/legacy_v1_examples/014-simple-json-function-user-param-reference/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/015-simple-json-function-string-to-date/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/015-simple-json-function-string-to-date/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {
      "start_date": {
        "function": "string_to_date",
        "args": [
          "2021-01-01",
          "%d-%m-%Y"
        ]
      }
    },
    "headers": [],
    "additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "date": {
            "attr": "start_date"
          }
        }
      }
    ],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/015-simple-json-function-string-to-date/orders.request
================================================
POST /015-simple-json-function-string-to-date/orders?date=01-01-2021

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/015-simple-json-function-string-to-date/orders.requestHeaders
================================================
accept: */*
content-length: 248
content-type: application/json


================================================
File: docs/legacy_v1_examples/015-simple-json-function-string-to-date/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/016-simple-json-function-base64-encode/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/016-simple-json-function-base64-encode/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {
      "encoded_value": {
        "function": "base64_encode",
        "args": [
          "SOME_VALUE_TO_ENCODE"
        ]
      }
    },
    "headers": [
      {
        "key": "sign-hash",
        "value": {
          "attr": "encoded_value"
        }
      }
    ],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {
  }
}


================================================
File: docs/legacy_v1_examples/016-simple-json-function-base64-encode/orders.request
================================================
POST /016-simple-json-function-base64-encode/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/016-simple-json-function-base64-encode/orders.requestHeaders
================================================
accept: */*
sign-hash: U09NRV9WQUxVRV9UT19FTkNPREU=
content-length: 248
content-type: application/json


================================================
File: docs/legacy_v1_examples/016-simple-json-function-base64-encode/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/017-simple-json-function-base64-encode-basic-auth/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/017-simple-json-function-base64-encode-basic-auth/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {
      "#token": "user:password",
      "encoded_token": {
        "function": "base64_encode",
        "args": [
          {
            "attr": "#token"
          }
        ]
      },
      "header_value": {
        "function": "concat",
        "args": [
          "Basic ",
          {
            "attr": "encoded_token"
          }
        ]
      }
    },
    "headers": [
      {
        "key": "Authorization",
        "value": {
          "attr": "header_value"
        }
      }
    ],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {
  }
}


================================================
File: docs/legacy_v1_examples/017-simple-json-function-base64-encode-basic-auth/orders.request
================================================
POST /017-simple-json-function-base64-encode-basic-auth/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/017-simple-json-function-base64-encode-basic-auth/orders.requestHeaders
================================================
accept: */*
authorization: Basic dXNlcjpwYXNzd29yZA==
content-length: 248
content-type: application/json


================================================
File: docs/legacy_v1_examples/017-simple-json-function-base64-encode-basic-auth/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/018-simple-json-function-md5-encode/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/018-simple-json-function-md5-encode/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {
      "encoded_value": {
        "function": "md5_encode",
        "args": [
          "SOME_VALUE_TO_ENCODE"
        ]
      }
    },
    "headers": [
      {
        "key": "sign-hash",
        "value": {
          "attr": "encoded_value"
        }
      }
    ],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {
  }
}


================================================
File: docs/legacy_v1_examples/018-simple-json-function-md5-encode/orders.request
================================================
POST /018-simple-json-function-md5-encode/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/018-simple-json-function-md5-encode/orders.requestHeaders
================================================
accept: */*
sign-hash: 6b9262f0cbf7d8380eb2603f6f05d2ea
content-length: 248
content-type: application/json


================================================
File: docs/legacy_v1_examples/018-simple-json-function-md5-encode/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/019-simple-json-function-nesting-basic-auth/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/019-simple-json-function-nesting-basic-auth/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {
      "#token": "user:password",
      "header_value": {
        "function": "concat",
        "args": [
          "Basic ",
          {
            "function": "base64_encode",
            "args": [
              {
                "attr": "#token"
              }
            ]
          }
        ]
      }
    },
    "headers": [
      {
        "key": "Authorization",
        "value": {
          "attr": "header_value"
        }
      }
    ],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {
  }
}


================================================
File: docs/legacy_v1_examples/019-simple-json-function-nesting-basic-auth/orders.request
================================================
POST /019-simple-json-function-nesting-basic-auth/orders

[{"id": 123, "name": "John Doe", "address_city": "London", "address_country": "UK", "address_street": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address_city": "St Mary Mead", "address_country": "UK", "address_street": "High Street"}]

================================================
File: docs/legacy_v1_examples/019-simple-json-function-nesting-basic-auth/orders.requestHeaders
================================================
accept: */*
authorization: Basic dXNlcjpwYXNzd29yZA==
content-length: 248
content-type: application/json


================================================
File: docs/legacy_v1_examples/019-simple-json-function-nesting-basic-auth/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/020-simple-json-column-name-override/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/020-simple-json-column-name-override/orders",
    "mode": "JSON",
    "method": "POST",
    "user_parameters": {},
    "headers": [
      {
        "key": "Content-Type",
        "value": "application/json"
      },
      {
        "key": "token",
        "value": "12345"
      }
    ],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 2,
      "delimiter": "__",
      "infer_types_for_unknown": true,
      "column_names_override": {
        "address_city": "address[city]",
        "address_country": "address[country]",
        "address_street": "address[street]"
      }
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/020-simple-json-column-name-override/orders.request
================================================
POST /020-simple-json-column-name-override/orders

[{"id": 123, "name": "John Doe", "address[city]": "London", "address[country]": "UK", "address[street]": "Whitehaven Mansions"}, {"id": 234, "name": "Jane Doe", "address[city]": "St Mary Mead", "address[country]": "UK", "address[street]": "High Street"}]

================================================
File: docs/legacy_v1_examples/020-simple-json-column-name-override/orders.requestHeaders
================================================
accept: */*
content-type: application/json
token: 12345
content-length: 254


================================================
File: docs/legacy_v1_examples/020-simple-json-column-name-override/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: docs/legacy_v1_examples/021-simple-json-url-encoded-form/config.json
================================================
{
  "parameters": {
    "path": "http://mock-server:80/021-simple-json-url-encoded-form/orders",
    "mode": "JSON_URL_ENCODED",
    "method": "POST",
    "user_parameters": {},
    "headers": [
      {
        "key": "token",
        "value": "12345"
      }
    ],
    "additional_requests_pars": [],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 1,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: docs/legacy_v1_examples/021-simple-json-url-encoded-form/orders.request
================================================
POST /021-simple-json-url-encoded-form/orders

"id=123&name=John+Doe&address_city=London&address_country=UK&address_street=Whitehaven+Mansions"

================================================
File: docs/legacy_v1_examples/021-simple-json-url-encoded-form/orders.requestHeaders
================================================
accept: */*
token: 12345
content-length: 94
content-type: application/x-www-form-urlencoded


================================================
File: docs/legacy_v1_examples/021-simple-json-url-encoded-form/orders1.request
================================================
POST /021-simple-json-url-encoded-form/orders

"id=234&name=Jane+Doe&address_city=St+Mary+Mead&address_country=UK&address_street=High+Street"

================================================
File: docs/legacy_v1_examples/021-simple-json-url-encoded-form/orders1.requestHeaders
================================================
accept: */*
token: 12345
content-length: 92
content-type: application/x-www-form-urlencoded


================================================
File: docs/legacy_v1_examples/021-simple-json-url-encoded-form/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi

================================================
File: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi

================================================
File: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"

================================================
File: src/component.py
================================================
'''
Template Component main class.

'''

import csv
import gzip
import io
import logging
import os
import shutil
import sys
import tempfile

from keboola.component import UserException
from keboola.component.base import ComponentBase

# parameters variables
from configuration import WriterConfiguration, build_configuration, ValidationError, ConfigHelpers
from http_generic.auth import AuthMethodBuilder, AuthBuilderError
from http_generic.client import GenericHttpClient
from json_converter import JsonConverter
from user_functions import UserFunctions


KEY_USER_PARS = 'user_parameters'

KEY_PATH = 'path'
KEY_MODE = 'mode'
KEY_METHOD = 'method'
# JSON config params
KEY_JSON_DATA_CFG = 'json_data_config'
KEY_DELIMITER = 'delimiter'
KEY_COLUMN_TYPES = 'column_types'
KEY_REQUEST_DATA_WRAPPER = "request_data_wrapper"
KEY_INFER_TYPES = "infer_types_for_unknown"
KEY_NAMES_OVERRIDE = 'column_names_override'

# additional request params
KEY_HEADERS = 'headers'
KEY_ADDITIONAL_PARS = 'additional_requests_pars'
KEY_CHUNK_SIZE = 'chunk_size'
STATUS_FORCELIST = (500, 501, 502, 503)
MAX_RETRIES = 10

KEY_ITERATION_MODE = 'iteration_mode'
KEY_ITERATION_PAR_COLUMNS = 'iteration_par_columns'
# #### Keep for debug
KEY_DEBUG = 'debug'

MANDATORY_PARS = [KEY_PATH]
MANDATORY_IMAGE_PARS = []

SUPPORTED_MODES = ['JSON', 'BINARY', 'BINARY-GZ']

APP_VERSION = '0.0.1'


class Component(ComponentBase):

    def __init__(self):
        super().__init__()

        # initialize instance parameters
        self.user_functions = UserFunctions()

        self._configuration: WriterConfiguration = None
        self._client: GenericHttpClient = None

    def init_component(self):
        try:
            self._configuration = build_configuration(self.configuration.parameters)
        except ValidationError as e:
            raise UserException(e) from e

        # build authentication method
        auth_method = None
        authentication = self._configuration.api.authentication

        try:
            if authentication:
                # evaluate user_params inside the user params itself
                user_params = self._configuration.user_parameters
                user_params = ConfigHelpers().fill_in_user_parameters(user_params, user_params)
                # apply user parameters
                auth_method_params = ConfigHelpers().fill_in_user_parameters(authentication.parameters, user_params)
                auth_method = AuthMethodBuilder.build(self.configuration, **auth_method_params)
        except AuthBuilderError as e:
            raise UserException(e) from e

        # init client
        self._client = GenericHttpClient(base_url=self._configuration.api.base_url,
                                         max_retries=self._configuration.api.retry_config.max_retries,
                                         backoff_factor=self._configuration.api.retry_config.backoff_factor,
                                         status_forcelist=self._configuration.api.retry_config.codes,
                                         auth_method=auth_method
                                         )
        # to prevent field larger than field limit (131072) Errors
        # https://stackoverflow.com/questions/15063936/csv-error-field-larger-than-field-limit-131072
        csv.field_size_limit(sys.maxsize)

    def run(self):
        '''
        Main execution code
        '''
        self.init_component()
        # login if auth method specified
        self._client.login()

        logging.info('Processing input mapping.')

        in_tables = self.get_input_tables_definitions()

        if len(in_tables) == 0:
            logging.exception('There is no table specified on the input mapping! You must provide one input table!')
            exit(1)
        elif len(in_tables) > 1:
            logging.warning(
                'There is more than one table specified on the input mapping! You must provide one input table!')

        in_table = in_tables[0]

        api_cfg = self._configuration.api
        content_cfg = self._configuration.request_content
        request_cfg = self._configuration.request_parameters
        # iteration mode
        iteration_mode = content_cfg.iterate_by_columns
        iteration_data = [{}]
        has_iterations = False

        # TODO: add support for "chunked" iteration mode, sending requests in bulk grouped by iteration parameters
        if iteration_mode:
            has_iterations = True
            iteration_data = self._get_iter_data(in_table.full_path)
            logging.warning('Iteration parameters mode found, running multiple iterations.')
        logging.info(f'Sending data in content type: {content_cfg.content_type}, using {request_cfg.method} method')
        # running iterations
        for index, iter_data_row in enumerate(iteration_data):
            iter_params = {}
            log_output = (index % 50) == 0
            in_stream = None
            if has_iterations:
                iter_params = self._cut_out_iteration_params(iter_data_row)
                # change source table with iteration data row
                in_stream = self._create_iteration_data_table(iter_data_row)

            # merge iter params
            # fix KBC bug
            user_params = self._configuration.user_parameters
            user_params = {**user_params.copy(), **iter_params}
            # evaluate user_params inside the user params itself
            user_params = ConfigHelpers().fill_in_user_parameters(user_params, user_params)

            # build headers
            headers = {**api_cfg.default_headers.copy(), **request_cfg.headers.copy()}
            new_headers = ConfigHelpers().fill_in_user_parameters(headers, user_params)

            # build additional parameters
            query_parameters = {**api_cfg.default_query_parameters.copy(), **request_cfg.query_parameters.copy()}
            query_parameters = ConfigHelpers().fill_in_user_parameters(query_parameters, user_params)
            ssl_verify = api_cfg.ssl_verification
            timeout = api_cfg.timeout
            # additional_params = self._build_request_parameters(additional_params_cfg)
            request_parameters = {'params': query_parameters,
                                  'headers': new_headers,
                                  'verify': ssl_verify,
                                  'timeout': timeout}

            endpoint_path = request_cfg.endpoint_path
            endpoint_path = self._apply_iteration_params(endpoint_path, iter_params)
            self._client.base_url = self._apply_iteration_params(self._client.base_url, iter_params)

            if has_iterations and log_output:
                logging.info(f'Running iteration nr. {index}')
            if log_output:
                logging.info("Building parameters..")

            if content_cfg.content_type in ['JSON', 'JSON_URL_ENCODED']:
                if not in_stream:
                    # if no iterations
                    in_stream = open(in_table.full_path, mode='rt', encoding='utf-8')
                self.send_json_data(in_stream, endpoint_path, request_parameters, log=not has_iterations)

            elif content_cfg.content_type == 'EMPTY_REQUEST':
                # send empty request
                self._client.send_request(method=request_cfg.method, endpoint_path=endpoint_path, **request_parameters)

            elif content_cfg.content_type in ['BINARY', 'BINARY_GZ']:
                if not in_stream:
                    in_stream = open(in_table.full_path, mode='rb')
                else:
                    # in case of iteration mode
                    in_stream = io.BytesIO(bytes(in_stream.getvalue(), 'utf-8'))
                self.send_binary_data(endpoint_path, request_parameters, in_stream)

        logging.info("Writer finished")

    def _get_iter_data(self, iteration_pars_path):
        with open(iteration_pars_path, mode='rt', encoding='utf-8') as in_file:
            reader = csv.DictReader(in_file, lineterminator='\n')
            for r in reader:
                yield r

    def _cut_out_iteration_params(self, iter_data_row):
        '''
        Cuts out iteration columns from data row and returns current iteration parameters values
        :param iter_data_row:
        :return:
        '''
        params = {}
        for c in self._configuration.request_content.iterate_by_columns:
            try:
                params[c] = iter_data_row.pop(c)
            except KeyError:
                raise UserException(f'The key: "{c}" specified in the iterate_by_columns parameter '
                                    f'does not exist in the data, please check for typos / case.')
        return params

    def _apply_iteration_params(self, path, iter_params):
        for p in iter_params:
            # backward compatibility with {{}} syntax
            path = path.replace('{{' + p + '}}', iter_params[p])
            path = path.replace('[[' + p + ']]', iter_params[p])
        return path

    def _create_iteration_data_table(self, iter_data_row):
        # out_file_path = os.path.join(self.tables_in_path, 'iterationdata.csv')
        output_stream = io.StringIO()
        writer = csv.DictWriter(output_stream, fieldnames=iter_data_row.keys(), lineterminator='\n')
        writer.writeheader()
        writer.writerow(iter_data_row)
        output_stream.seek(0)
        return output_stream

    def _build_request_parameters(self, request_configuration):
        request_parameters = {}
        for h in request_configuration:
            # convert boolean
            val = h["value"]
            if isinstance(val, str) and val.lower() in ['false', 'true']:
                val = val.lower() in ['true']
            request_parameters[h["key"]] = val
        return request_parameters

    def send_json_data(self, in_stream, url, additional_request_params, log=True):
        # returns nested JSON schema for input.csv
        request_parameters = self._configuration.request_parameters
        request_content = self._configuration.request_content
        json_params = request_content.json_mapping

        if request_content.content_type == 'JSON_URL_ENCODED':
            logging.warning('Running in JSON_URL_ENCODED mode, overriding chunk size to 1')
            json_params.chunk_size = 1
            json_params.request_data_wrapper = None

        converter = JsonConverter(nesting_delimiter=json_params.nesting_delimiter,
                                  chunk_size=json_params.chunk_size,
                                  infer_data_types=json_params.column_data_types.autodetect,
                                  column_data_types=json_params.column_data_types.datatype_override,
                                  column_name_override=json_params.column_names_override,
                                  data_wrapper=json_params.request_data_wrapper)

        reader = csv.reader(in_stream, lineterminator='\n')

        # convert rows
        i = 1
        for json_payload in converter.convert_stream(reader):
            if log:
                logging.info(f'Sending JSON data chunk {i}')
            logging.debug(f'Sending  Payload: {json_payload} ')

            if request_content.content_type == 'JSON':
                additional_request_params['json'] = json_payload
            elif request_content.content_type == 'JSON_URL_ENCODED':
                additional_request_params['data'] = json_payload
            else:
                raise ValueError(f"Invalid JSON content type: {request_content.content_type}")

            self._client.send_request(method=request_parameters.method, endpoint_path=url,
                                      **additional_request_params)
            i += 1
        in_stream.close()

    def send_binary_data(self, url, additional_request_params, in_stream):
        request_parameters = self._configuration.request_parameters
        request_content = self._configuration.request_content
        file = tempfile.mktemp()
        if request_content.content_type == 'BINARY_GZ':
            with gzip.open(file, 'wb') as f_out:
                shutil.copyfileobj(in_stream, f_out)

            in_stream = open(file, mode='rb')

        additional_request_params['data'] = in_stream
        self._client.send_request(method=request_parameters.method, endpoint_path=url,
                                  **additional_request_params)
        in_stream.close()
        if os.path.exists(file):
            os.remove(file)

    def _perform_custom_function(self, key, function_cfg, user_params):
        if function_cfg.get('attr'):
            return user_params[function_cfg['attr']]
        if not function_cfg.get('function'):
            raise ValueError(
                F'The user parameter {key} value is object and is not a valid function object: {function_cfg}')
        new_args = []
        for arg in function_cfg.get('args'):
            if isinstance(arg, dict):
                arg = self._perform_custom_function(key, arg, user_params)
            new_args.append(arg)
        function_cfg['args'] = new_args

        return self.user_functions.execute_function(function_cfg['function'], *function_cfg.get('args'))


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the parameters.action paramter
        comp.execute_action()
    except UserException as exc:
        detail = ''
        if len(exc.args) > 1:
            detail = exc.args[1]

        logging.exception(exc, extra={"full_message": detail})
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: src/configuration.py
================================================
import dataclasses
from dataclasses import dataclass, field
from enum import Enum
from typing import List, Dict, Tuple, Optional, Literal
from urllib.parse import urlparse, urljoin

from keboola.component.dao import build_dataclass_from_dict
import json
import time
from nested_lookup import nested_lookup
from user_functions import UserFunctions


@dataclass
class SubscriptableDataclass:
    """
    Helper class to make dataclasses subscriptable
    """

    def __getitem__(self, index):
        return getattr(self, index)

    def __setitem__(self, key, value):
        return setattr(self, key, value)


# CONFIGURATION OBJECT
class ContentType(str, Enum):
    none = "none"
    json = "json"
    form = "form"

# #### SUPPORTING DATACLASSES


@dataclass
class RetryConfig(SubscriptableDataclass):
    max_retries: int = 1
    backoff_factor: float = 0.3
    codes: Tuple[int, ...] = (500, 502, 504)


@dataclass
class Authentication(SubscriptableDataclass):
    type: str
    parameters: dict = field(default_factory=dict)


@dataclass
class ApiConfig(SubscriptableDataclass):
    base_url: str
    default_query_parameters: dict = field(default_factory=dict)
    default_headers: dict = field(default_factory=dict)
    authentication: Authentication = None
    retry_config: RetryConfig = field(default_factory=RetryConfig)
    ssl_verification: bool = True
    timeout: float = None


@dataclass
class ApiRequest(SubscriptableDataclass):
    method: str
    endpoint_path: str
    headers: dict = field(default_factory=dict)
    query_parameters: dict = field(default_factory=dict)
    continue_on_failure: bool = False


class DataType(Enum):
    bool = 'bool'
    string = 'string'
    number = 'number'
    object = 'object'


@dataclass
class ColumnDataTypes(SubscriptableDataclass):
    autodetect: bool = False
    datatype_override: List[Dict[str, str]] = field(default_factory=list)


@dataclass
class JsonMapping(SubscriptableDataclass):
    nesting_delimiter: str
    chunk_size: int
    column_data_types: ColumnDataTypes
    request_data_wrapper: str = ''
    column_names_override: dict = field(default_factory=dict)


@dataclass
class RequestContent(SubscriptableDataclass):
    content_type: str
    json_mapping: JsonMapping = None
    iterate_by_columns: List[str] = None
    query_parameters: dict = field(default_factory=dict)
    body: Optional[dict] = None


# CONFIGURATION OBJECT

@dataclass
class WriterConfiguration(SubscriptableDataclass):
    api: ApiConfig
    request_parameters: ApiRequest
    request_content: RequestContent
    user_parameters: dict = field(default_factory=dict)


class ConfigurationKeysV2(Enum):
    api = 'api'
    user_parameters = 'user_parameters'
    request_options = 'request_options'

    @classmethod
    def list(cls):
        return list(map(lambda c: c.value, cls))


class ConfigurationKeysV1(Enum):
    KEY_USER_PARS = 'user_parameters'
    KEY_PATH = 'path'
    KEY_MODE = 'mode'
    KEY_METHOD = 'method'
    # JSON config params
    KEY_JSON_DATA_CFG = 'json_data_config'
    KEY_DELIMITER = 'delimiter'
    KEY_COLUMN_TYPES = 'column_types'
    KEY_REQUEST_DATA_WRAPPER = "request_data_wrapper"
    KEY_INFER_TYPES = "infer_types_for_unknown"
    KEY_NAMES_OVERRIDE = 'column_names_override'
    # additional request params
    KEY_HEADERS = 'headers'
    KEY_ADDITIONAL_PARS = 'additional_requests_pars'
    KEY_CHUNK_SIZE = 'chunk_size'
    KEY_ITERATION_MODE = 'iteration_mode'
    KEY_ITERATION_PAR_COLUMNS = 'iteration_par_columns'

    @classmethod
    def list(cls):
        return list(map(lambda c: c.value, cls))


def get_dataclass_required_params(data_class):
    return [f.name for f in dataclasses.fields(data_class)
            if f.default == dataclasses.MISSING
            and f.default_factory == dataclasses.MISSING]


def _is_v2_config(configuration: dict):
    return 'path' in list(configuration.keys())


def convert_to_v2(parameters: dict) -> dict:
    root_errors = _validate_root_parameters(parameters,
                                            [ConfigurationKeysV1.KEY_PATH.value,
                                             ConfigurationKeysV1.KEY_MODE.value,
                                             ConfigurationKeysV1.KEY_METHOD.value])
    if root_errors:
        raise ValidationError(root_errors)

    path = parameters[ConfigurationKeysV1.KEY_PATH.value]
    base_url = f"{urlparse(path).scheme}://{urlparse(path).netloc}"
    parsed_url = urlparse(path)
    endpoint_path = f"{parsed_url.path}?{parsed_url.query}"
    api_config_obj = {"base_url": base_url}

    headers = {}
    for h in parameters.get(ConfigurationKeysV1.KEY_HEADERS.value, []):
        headers[h['key']] = h['value']

    query_parameters = {}
    for p in parameters.get(ConfigurationKeysV1.KEY_ADDITIONAL_PARS.value, []):
        if p['key'] == 'params':
            query_parameters = p['value']

        if p['key'] == 'verify':
            api_config_obj['ssl_verify'] = p['value']

    api_request_obj = {"method": parameters[ConfigurationKeysV1.KEY_METHOD.value],
                       "endpoint_path": endpoint_path,
                       "headers": headers,
                       "query_parameters": query_parameters}

    mode = parameters[ConfigurationKeysV1.KEY_MODE.value]
    json_cfg = parameters.get(ConfigurationKeysV1.KEY_JSON_DATA_CFG.value)
    json_mapping_obj = None
    if json_cfg:
        delimiter = json_cfg.get(ConfigurationKeysV1.KEY_DELIMITER.value, '_')
        infer_types = json_cfg.get(ConfigurationKeysV1.KEY_INFER_TYPES.value, False)
        chunksize = json_cfg.get(ConfigurationKeysV1.KEY_CHUNK_SIZE.value, 100)
        data_wrapper = json_cfg.get(ConfigurationKeysV1.KEY_REQUEST_DATA_WRAPPER.value, '')
        column_names = json_cfg.get(ConfigurationKeysV1.KEY_NAMES_OVERRIDE.value, {})
        column_types = json_cfg.get(ConfigurationKeysV1.KEY_COLUMN_TYPES.value, [])

        json_mapping_obj = {"nesting_delimiter": delimiter,
                            "chunk_size": chunksize,
                            "column_data_types": {"autodetect": infer_types,
                                                  "datatype_override": column_types},
                            "request_data_wrapper": data_wrapper,
                            "column_names_override": column_names}

    iteration_columns = parameters.get(ConfigurationKeysV1.KEY_ITERATION_MODE.value, {}).get(
        ConfigurationKeysV1.KEY_ITERATION_PAR_COLUMNS.value, [])
    req_content_obj = {"content_type": mode,
                       "json_mapping": json_mapping_obj,
                       "iterate_by_columns": iteration_columns}

    user_parameters = parameters.get(ConfigurationKeysV1.KEY_USER_PARS.value) or {}

    new_configuration = {"api": api_config_obj,
                         "user_parameters": user_parameters,
                         "request_parameters": api_request_obj,
                         "request_content": req_content_obj}

    return new_configuration


def validate_required_parameters(config_object, name: str, config_fields: dict) -> str:
    required_fields = get_dataclass_required_params(config_object)
    missing_fields = []
    for key in required_fields:
        if key not in config_fields:
            missing_fields.append(key)
    error = ''
    if missing_fields:
        error = f'Object "{name}" is missing following required fields: {missing_fields}'
    return error


class ValidationError(Exception):
    pass


def _validate_root_parameters(parameters: dict, required_parameters: List[str]):
    missing_fields = []
    for key in required_parameters:
        if key not in parameters:
            missing_fields.append(key)
    error = ''
    if missing_fields:
        error = f'Configuration is missing following required fields: {missing_fields}'
    return error


def validate_configuration_v2(configuration_parameters: dict):
    """
    Validate configuration parameters
    Args:
        configuration_parameters: dict: configuration parameters

    Raises: ValidationError

    """
    root_errors = _validate_root_parameters(configuration_parameters, ['api', 'request_content', 'request_parameters'])
    if root_errors:
        raise ValidationError(root_errors)

    api_config = configuration_parameters['api']
    request_parameters = configuration_parameters['request_parameters']
    request_content = configuration_parameters['request_content']

    # validate
    validation_errors = [validate_required_parameters(ApiConfig, 'api', api_config),
                         validate_required_parameters(ApiRequest, 'request_parameters', request_parameters),
                         validate_required_parameters(RequestContent, 'request_content', request_content)]
    # TODO: validate authentication

    json_mapping = request_content.get('json_mapping')
    if request_content['content_type'] in ['JSON', 'JSON_URL_ENCODED'] and not json_mapping:
        validation_errors.append(
            f"The 'json_mapping' configuration is required in mode {request_content['content_type']}")

    if request_content.get('json_mapping'):
        validation_errors.append(
            validate_required_parameters(JsonMapping, 'json_mapping', request_content['json_mapping']))

    # remove empty
    validation_errors = [e for e in validation_errors if e]
    if validation_errors:
        errors_string = '\n'.join(validation_errors)
        raise ValidationError(
            f"Some required parameters fields are missing: {errors_string}")


def _handle_kbc_error_converting_objects(configuration: WriterConfiguration):
    """
    INPLACE Fixes internal KBC bug old as time itself.
    Args:
        configuration:

    Returns:

    """
    if isinstance(configuration.user_parameters, list):
        configuration.user_parameters = {}

    if configuration.request_parameters and isinstance(configuration.request_parameters.query_parameters, list):
        configuration.request_parameters.query_parameters = {}

    if configuration.request_parameters and isinstance(configuration.request_parameters.headers, list):
        configuration.request_parameters.headers = {}

    if configuration.api and isinstance(configuration.api.default_headers, list):
        configuration.api.default_headers = {}

    if configuration.request_content.json_mapping and isinstance(
            configuration.request_content.json_mapping.column_names_override, list):
        configuration.request_content.json_mapping.column_names_override = {}


def build_configuration(configuration_parameters: dict) -> WriterConfiguration:
    if _is_v2_config(configuration_parameters):
        configuration_parameters = convert_to_v2(configuration_parameters)

    validate_configuration_v2(configuration_parameters)

    api_config_pars = configuration_parameters['api']
    user_parameters = configuration_parameters['user_parameters'] or {}
    request_parameters = configuration_parameters['request_parameters']
    request_content = configuration_parameters['request_content']

    api_config: ApiConfig = build_dataclass_from_dict(ApiConfig, api_config_pars)
    if api_config_pars.get('authentication'):
        api_config.authentication = build_dataclass_from_dict(Authentication, api_config_pars['authentication'])

    retry_config = build_dataclass_from_dict(RetryConfig, api_config_pars.get('retry_config', {}))
    api_config.retry_config = retry_config
    # Request options
    api_request = build_dataclass_from_dict(ApiRequest, request_parameters)

    json_mapping_pars = request_content.get('json_mapping')
    if json_mapping_pars:
        json_mapping_pars['column_data_types'] = build_dataclass_from_dict(ColumnDataTypes,
                                                                           json_mapping_pars['column_data_types'])
        request_content['json_mapping'] = build_dataclass_from_dict(JsonMapping, json_mapping_pars)

    content = build_dataclass_from_dict(RequestContent, request_content)

    result_config = WriterConfiguration(api=api_config, request_parameters=api_request, request_content=content,
                                        user_parameters=user_parameters)
    _handle_kbc_error_converting_objects(result_config)

    return result_config


class ConfigHelpers:

    def __init__(self):
        self.user_functions = UserFunctions()

    def fill_in_user_parameters(self, conf_objects: dict, user_param: dict,
                                evaluate_conf_objects_functions: bool = True):
        """
        This method replaces user parameter references via attr + parses functions inside user parameters,
        evaluates them and fills in the resulting values

        Args:
            conf_objects: Configuration that contains the references via {"attr": "key"} to user parameters or function
                            definitions
            user_param: User parameters that are used to fill in the values

        Returns:

        """
        # time references
        conf_objects = self.fill_in_time_references(conf_objects)
        user_param = self.fill_in_time_references(user_param)
        # convert to string minified
        steps_string = json.dumps(conf_objects, separators=(',', ':'))
        # dirty and ugly replace
        for key in user_param:
            if isinstance(user_param[key], dict):
                # in case the parameter is function, validate, execute and replace value with result
                res = self.perform_custom_function(key, user_param[key], user_param)
                user_param[key] = res

            lookup_str = '{"attr":"' + key + '"}'
            steps_string = steps_string.replace(lookup_str, '"' + str(user_param[key]) + '"')
        new_steps = json.loads(steps_string)
        non_matched = nested_lookup('attr', new_steps)

        if evaluate_conf_objects_functions:
            for key in new_steps:
                if isinstance(new_steps[key], dict):
                    # in case the parameter is function, validate, execute and replace value with result
                    res = self.perform_custom_function(key, new_steps[key], user_param)
                    new_steps[key] = res

        if non_matched:
            raise ValueError(
                'Some user attributes [{}] specified in parameters '
                'are not present in "user_parameters" json_path.'.format(non_matched))
        return new_steps

    @staticmethod
    def fill_in_time_references(conf_objects: dict):
        """
        This method replaces user parameter references via attr + parses functions inside user parameters,
        evaluates them and fills in the resulting values

        Args:
            conf_objects: Configuration that contains the references via {"attr": "key"} to user parameters or function
                            definitions

        Returns:

        """
        # convert to string minified
        steps_string = json.dumps(conf_objects, separators=(',', ':'))
        # dirty and ugly replace

        new_cfg_str = steps_string.replace('{"time":"currentStart"}', f'{int(time.time())}')
        new_cfg_str = new_cfg_str.replace('{"time":"previousStart"}', f'{int(time.time())}')
        new_config = json.loads(new_cfg_str)
        return new_config

    def perform_custom_function(self, key: str, function_cfg: dict, user_params: dict):
        """
        Perform custom function recursively (may be nested)
        Args:
            key: key of the user parameter wher the function is
            function_cfg: conf of the function
            user_params:

        Returns:

        """
        function_cfg = self.fill_in_time_references(function_cfg)
        if not isinstance(function_cfg, dict):
            # in case the function was evaluated as time
            return function_cfg

        elif function_cfg.get('attr'):
            return user_params[function_cfg['attr']]

        if not function_cfg.get('function'):
            for key in function_cfg:
                function_cfg[key] = self.perform_custom_function(key, function_cfg[key], user_params)

        new_args = []
        if function_cfg.get('args'):
            for arg in function_cfg.get('args'):
                if isinstance(arg, dict):
                    arg = self.perform_custom_function(key, arg, user_params)
                new_args.append(arg)
            function_cfg['args'] = new_args
        if isinstance(function_cfg, dict) and not function_cfg.get('function'):
            return function_cfg
        return self.user_functions.execute_function(function_cfg['function'], *function_cfg.get('args', []))


class AuthMethodConverter:
    @classmethod
    def convert_login(cls, config_parameters) -> dict:
        method_mapping = {'GET': 'GET', 'POST': 'POST', 'FORM': 'POST'}
        helpers = ConfigHelpers()
        login_request: dict = config_parameters.api.authentication.parameters.get("loginRequest", {})
        api_request: dict = config_parameters.api.authentication.parameters.get("apiRequest", {})
        # evaluate functions and user parameters
        user_parameters = build_user_parameters(config_parameters)
        user_parameters = helpers.fill_in_user_parameters(user_parameters, user_parameters)
        login_request_eval = helpers.fill_in_user_parameters(login_request, user_parameters)
        # the function evaluation is left for the Auth method because of the response placeholder
        api_request_eval = helpers.fill_in_user_parameters(api_request, user_parameters, False)

        if not login_request:
            raise ValueError('loginRequest configuration not found in the Login Authentication configuration')

        login_endpoint: str = login_request_eval.get('endpoint')
        login_url = urljoin(config_parameters.api.base_url, login_endpoint)

        method = login_request_eval.get('method', 'GET')

        auth_type = login_request_eval.get('type')

        login_request_content: RequestContent = build_request_content(method, login_request_eval.get('params', {}))

        try:
            result_method: str = method_mapping[login_request_eval.get('method', 'GET').upper()]
        except KeyError:
            raise ValueError(f'Unsupported method: {login_request_eval.get("method")}')

        login_query_parameters: dict = login_request_content.query_parameters
        login_headers: dict = login_request_eval.get('headers', {})
        api_request_headers: dict = api_request_eval.get('headers', {})
        api_request_query_parameters: dict = api_request_eval.get('query', {})

        parameters = {'login_endpoint': login_url,
                      'method': result_method,
                      'login_query_parameters': login_query_parameters,
                      'login_headers': login_headers,
                      'login_query_body': login_request_content.body,
                      'login_content_type': login_request_content.content_type.value,
                      'api_request_headers': api_request_headers,
                      'api_request_query_parameters': api_request_query_parameters}

        if auth_type:
            parameters['auth_type'] = auth_type

        return parameters


def build_user_parameters(configuration: dict) -> dict:
    """
    Build user parameters from configuration
    Args:
        configuration: Configuration in v2 format

    Returns: User parameters

    """
    config_excluded_keys = ['__AUTH_METHOD', '__NAME', '#__BEARER_TOKEN', 'jobs', 'outputBucket', 'incrementalOutput',
                            'http', 'debug', 'mappings', ' #username', '#password', 'userData']
    user_parameters = {}
    for key, value in configuration.user_parameters.items():
        if key not in config_excluded_keys:
            user_parameters[key] = value
    return user_parameters


def build_request_content(method: Literal['GET', 'POST', 'FORM'], params: dict) -> RequestContent:
    match method:
        case 'GET':
            request_content = RequestContent(ContentType.none, query_parameters=params)
        case 'POST':
            request_content = RequestContent(ContentType.json,
                                             body=params)
        case 'FORM':
            request_content = RequestContent(ContentType.form,
                                             body=params)
        case _:
            raise ValueError(f'Unsupported method: {method}')
    return request_content


================================================
File: src/json_converter.py
================================================
import json
import logging
import sys
from typing import List, Dict, Optional, Generator

from csv2json.hone_csv2json import Csv2JsonConverter


class JsonConverter:

    def __init__(self, nesting_delimiter: str = '__',
                 chunk_size: Optional[int] = None,
                 infer_data_types=True,
                 column_data_types: Optional[List[Dict[str, str]]] = None,
                 column_name_override: Optional[dict] = None,
                 data_wrapper: Optional[str] = None):

        self.nesting_delimiter = nesting_delimiter
        self.chunk_size = chunk_size or sys.maxsize
        self.infer_data_types = infer_data_types
        self.column_data_types = column_data_types or []
        self.data_wrapper = data_wrapper
        self.column_name_override = column_name_override or {}

    def convert_stream(self, reader) -> Generator[dict, None, None]:
        header = next(reader, None)
        converter = Csv2JsonConverter(header, delimiter=self.nesting_delimiter)
        # fetch first row
        row = next(reader, None)

        if not row:
            logging.warning('The file is empty!')

        while row:  # outer loop, create chunks
            continue_it = True
            i = 0
            json_string = '[' if self.chunk_size > 1 else ''
            while continue_it:
                i += 1
                result = converter.convert_row(row=row,
                                               coltypes=self.column_data_types,
                                               delimit=self.nesting_delimiter,
                                               colname_override=self.column_name_override,
                                               infer_undefined=self.infer_data_types)

                json_string += json.dumps(result[0])
                row = next(reader, None)

                if not row or (self.chunk_size and i >= self.chunk_size):
                    continue_it = False

                if continue_it:
                    json_string += ','

            json_string += ']' if self.chunk_size > 1 else ''
            data = json.loads(json_string)
            data = self._wrap_json_payload(data)
            yield data

    def _wrap_json_payload(self, data: dict):
        if not self.data_wrapper:
            return data
        # backward compatibility
        res = self.data_wrapper.replace('{{data}}', json.dumps(data))
        res = res.replace('[[data]]', json.dumps(data))
        return json.loads(res)


================================================
File: src/placeholders_utils.py
================================================
from typing import Dict, Any


class NoDataFoundException(Exception):
    pass


def get_data_from_path(json_path: str, data: Dict[str, Any], separator: str = '.', strict: bool = True) -> Any:
    """Mock function to fetch data using a dot-separated path notation. Replace with actual implementation."""
    keys = json_path.split(separator)
    for key in keys:
        if key not in data:
            if strict:
                raise NoDataFoundException(f"Key '{key}' not found in login data.")
            return ''
        data = data[key]
    return data


================================================
File: src/user_functions.py
================================================
import base64
import hashlib

import keboola.utils as kbcutils


class UserFunctions:
    """
    Custom function to be used in configruation
    """

    def validate_function_name(self, function_name):
        supp_functions = self.get_supported_functions()
        if function_name not in self.get_supported_functions():
            raise ValueError(
                F"Specified user function [{function_name}] is not supported! "
                F"Supported functions are {supp_functions}")

    @classmethod
    def get_supported_functions(cls):
        return [method_name for method_name in dir(cls)
                if callable(getattr(cls, method_name)) and not method_name.startswith('__')
                and method_name not in ['validate_function_name', 'get_supported_functions', 'execute_function']]

    def execute_function(self, function_name, *pars):
        self.validate_function_name(function_name)
        return getattr(UserFunctions, function_name)(self, *pars)

    # ############## USER FUNCTIONS
    def string_to_date(self, date_string, date_format='%Y-%m-%d'):
        start_date, end_date = kbcutils.parse_datetime_interval(date_string, date_string)
        return start_date.strftime(date_format)

    def concat(self, *args):
        return ''.join(args)

    def base64_encode(self, s):
        return base64.b64encode(s.encode('utf-8')).decode('utf-8')

    def md5_encode(self, s):
        return hashlib.md5(s.encode('utf-8')).hexdigest()


================================================
File: src/http_generic/auth.py
================================================
import inspect
from abc import ABC, abstractmethod

from requests.auth import AuthBase, HTTPBasicAuth
from typing import Callable, Union, Dict, Literal
from urllib.parse import urlencode
import requests
import json
from placeholders_utils import get_data_from_path
import re
import base64

from configuration import ContentType, ConfigHelpers, AuthMethodConverter, WriterConfiguration, build_configuration


class AuthBuilderError(Exception):
    pass


class AuthMethodBase(ABC):
    """
    Base class to implement the authentication method. To mark secret constructor parameters prefix them with __
    e.g. __init__(self, username, __password)
    """

    @abstractmethod
    def login(self):
        """
        Perform steps to login and returns requests.aut.AuthBase callable that modifies the request.

        """
        pass


class AuthMethodBuilder:

    @classmethod
    def build(cls, raw_config, **parameters):
        """

        Args:
            config:
            **parameters: dictionary of named parameters. Note that parameters prefixed # will be converted to __

        Returns:

        """
        if not isinstance(raw_config, WriterConfiguration):
            config = build_configuration(raw_config.parameters)
        else:
            config = raw_config

        supported_actions = cls.get_methods()

        auth_type = config.api.authentication.type

        if auth_type not in list(supported_actions.keys()):
            raise AuthBuilderError(f'{config} is not supported auth method, '
                                   f'supported values are: [{list(supported_actions.keys())}]')

        if auth_type == 'Login':
            parameters = AuthMethodConverter.convert_login(config)
        elif auth_type == 'OAuth20ClientCredentials':
            parameters = AuthMethodConverter.convert_login(config)

            oauth = raw_config.oauth_credentials
            parameters['client_id'] = oauth.appKey
            parameters['client_secret'] = oauth.appSecret
            parameters['scopes'] = oauth.data.get('scopes', [])

        parameters = cls._convert_secret_parameters(supported_actions[auth_type], **parameters)

        cls._validate_method_arguments(supported_actions[auth_type], **parameters)

        return supported_actions[auth_type](**parameters)

    @staticmethod
    def _validate_method_arguments(method_obj: object, **args):
        class_prefix = f"_{method_obj.__name__}__"
        arguments = [p for p in inspect.signature(method_obj.__init__).parameters if p not in {'self', 'kwargs'}]

        missing_arguments = []
        for p in arguments:
            if p not in args:
                missing_arguments.append(p.replace(class_prefix, '#'))
        if missing_arguments:
            raise AuthBuilderError(f'Some arguments of method {method_obj.__name__} are missing: {missing_arguments}')

    @staticmethod
    def _convert_secret_parameters(method_obj: object, **parameters):
        new_parameters = {}
        for p in parameters:
            new_parameters[p.replace('#', f'_{method_obj.__name__}__')] = parameters[p]
        return new_parameters

    @staticmethod
    def get_methods() -> Dict[str, Callable]:
        supported_actions = {"OAuth20ClientCredentials": OAuth20ClientCredentials}
        for c in AuthMethodBase.__subclasses__():
            supported_actions[c.__name__] = c
        return supported_actions

    @classmethod
    def get_supported_methods(cls):
        return list(cls.get_methods().keys())


# ########### SUPPORTED AUTHENTICATION METHODS

class BasicHttp(AuthMethodBase):

    def __init__(self, username, __password):
        self.username = username
        self.password = __password

    def login(self) -> Union[AuthBase, Callable]:
        return HTTPBasicAuth(username=self.username, password=self.password)

    def __eq__(self, other):
        return all([
            self.username == getattr(other, 'username', None),
            self.password == getattr(other, 'password', None)
        ])


class BearerToken(AuthMethodBase, AuthBase):

    def __init__(self, __token):
        self.token = __token

    def login(self) -> Union[AuthBase, Callable]:
        return self

    def __eq__(self, other):
        return all([
            self.token == getattr(other, 'token', None)
        ])

    def __ne__(self, other):
        return not self == other

    def __call__(self, r):
        r.headers['authorization'] = f"Bearer {self.token}"
        return r


class ApiKey(AuthMethodBase, AuthBase):
    def get_secrets(self) -> list[str]:
        return [self.token]

    def __init__(self, key: str, __token: str, position: str):
        self.token = __token
        self.key = key
        self.position = position

    def login(self) -> Union[AuthBase, Callable]:
        return self

    def __eq__(self, other):
        return all([
            self.token == getattr(other, 'token', None)
        ])

    def __ne__(self, other):
        return not self == other

    def __call__(self, r):
        if self.position == 'headers':
            r.headers[self.key] = f"{self.token}"

        elif self.position == 'query':
            r.url = f"{r.url}?{urlencode({self.key: self.token})}"
        else:
            raise AuthBuilderError(f"Unsupported position {self.position} for API Key auth method")
        return r


class Login(AuthMethodBase, AuthBase):

    def __init__(self, login_endpoint: str,
                 method: str = 'GET',
                 login_query_parameters: dict = None,
                 login_query_body=None,
                 login_content_type: str = ContentType.json.value,
                 login_headers: dict = None,
                 api_request_headers: dict = None, api_request_query_parameters: dict = None):
        """

        Args:
            login_endpoint:
            method:
            login_query_parameters:
            login_headers:
            api_request_headers:
            api_request_query_parameters:
        """
        self.login_endpoint = login_endpoint
        self.method = method
        self.login_query_parameters = login_query_parameters or {}
        self.login_query_body = login_query_body
        self.login_content_type = ContentType(login_content_type)
        self.login_headers = login_headers or {}
        self.api_request_headers = api_request_headers or {}
        self.api_request_query_parameters = api_request_query_parameters or {}

    @classmethod
    def _retrieve_response_placeholders(cls, request_object: dict, separator: str = '.', current_path: str = '') -> \
            list[str]:
        """
        Recursively retreive all values that contain object with key `response` and return it's value and json path
        Args:
            request_object:

        Returns:

        """
        request_object_str = json.dumps(request_object, separators=(',', ':'))
        lookup_str_func = r'"response":"([^"]*)"'
        # Use re.search to find the pattern in your_string
        matches = re.findall(lookup_str_func, request_object_str)

        return matches

    def _replace_placeholders_with_response(self, response_data: dict, source_object_params: dict) -> dict:
        """
        Replace placeholders in source_object_params with values from response_data
        Args:
            response_data:
            source_object_params:

        Returns:

        """
        response_placeholders = self._retrieve_response_placeholders(source_object_params)
        source_object_params_str = json.dumps(source_object_params, separators=(',', ':'))
        for placeholder in response_placeholders:
            lookup_str = '{"response":"' + placeholder + '"}'
            value_to_replace = get_data_from_path(placeholder, response_data, separator='.', strict=False)
            source_object_params_str = source_object_params_str.replace(lookup_str, '"' + value_to_replace + '"')
        return json.loads(source_object_params_str)

    def login(self) -> Union[AuthBase, Callable]:
        request_parameters = {}

        if self.login_content_type == ContentType.json:
            request_parameters['json'] = self.login_query_body
        elif self.login_content_type == ContentType.form:
            request_parameters['data'] = self.login_query_body

        response = requests.request(self.method, self.login_endpoint, params=self.login_query_parameters,
                                    headers=self.login_headers,
                                    **request_parameters)

        response.raise_for_status()

        self.api_request_headers = self._replace_placeholders_with_response(response.json(), self.api_request_headers)
        self.api_request_query_parameters = self._replace_placeholders_with_response(response.json(),
                                                                                     self.api_request_query_parameters)
        cfg_helpers = ConfigHelpers()
        self.api_request_headers = cfg_helpers.fill_in_user_parameters(self.api_request_headers, {},
                                                                       True)
        self.api_request_query_parameters = cfg_helpers.fill_in_user_parameters(self.api_request_query_parameters,
                                                                                {},
                                                                                True)
        return self

    def get_secrets(self) -> list[str]:
        secrets = []
        for key, value in self.api_request_query_parameters.items():
            secrets.append(value)

        for key, value in self.api_request_headers.items():
            secrets.append(value)

        return secrets

    def __call__(self, r):

        r.url = f"{r.url}"
        if self.api_request_query_parameters:
            r.url = f"{r.url}?{urlencode(self.api_request_query_parameters)}"
        r.headers.update(self.api_request_headers)
        return r


class OAuth20ClientCredentials(Login):

    def __init__(self, login_endpoint: str, method: str = 'GET',
                 login_query_parameters: dict = None,
                 login_query_body=None,
                 login_content_type: str = ContentType.json.value,
                 login_headers: dict = None,
                 api_request_headers: dict = None, api_request_query_parameters: dict = None,
                 client_secret: str = None,
                 client_id: str = None,
                 auth_type: Literal['client_secret_post', 'client_secret_basic'] = 'client_secret_basic',
                 scopes: list[str] = None,
                 ):

        """

        Args:
            login_endpoint:
            client_secret:
            client_id:
            method: 'client_secret_post' or 'client_secret_basic'
            scopes:
        """

        data = {"grant_type": "client_credentials"}

        if scopes:
            data['scope'] = ' '.join(scopes)

        if auth_type == 'client_secret_post_json':
            data['client_id'] = client_id
            data['client_secret'] = client_secret
            login_query_body = data
        elif auth_type == 'client_secret_post_form':
            data['client_id'] = client_id
            data['client_secret'] = client_secret
            login_query_parameters = data
            login_headers = {"Content-Type": "application/x-www-form-urlencoded"}
        elif auth_type == 'client_secret_basic':
            credentials = f"{client_id}:{client_secret}"
            base64_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')
            login_headers = {"Authorization": f"Basic {base64_credentials}",
                             "Content-Type": "application/x-www-form-urlencoded"}

        super().__init__(
            login_endpoint=login_endpoint,
            method=method,
            login_query_parameters=login_query_parameters,
            login_query_body=login_query_body,
            login_content_type=login_content_type,
            login_headers=login_headers,
            api_request_headers=api_request_headers,
            api_request_query_parameters=api_request_query_parameters
        )


================================================
File: src/http_generic/client.py
================================================
from typing import Tuple, Dict

import requests
from keboola.component import UserException
from keboola.http_client import HttpClient
from requests.adapters import HTTPAdapter
from requests.exceptions import HTTPError, InvalidJSONError, ConnectionError
from urllib3 import Retry

from http_generic.auth import AuthMethodBase


class GenericHttpClient(HttpClient):

    def __init__(self, base_url: str,
                 default_http_header: Dict = None,
                 default_params: Dict = None,
                 auth_method: AuthMethodBase = None,
                 max_retries: int = 10,
                 backoff_factor: float = 0.3,
                 status_forcelist: Tuple[int, ...] = (500, 502, 504)
                 ):
        super().__init__(base_url=base_url, max_retries=max_retries, backoff_factor=backoff_factor,
                         status_forcelist=status_forcelist,
                         default_http_header=default_http_header, default_params=default_params)

        self._auth_method = auth_method

    def login(self):
        """
        Perform login based on auth method

        """
        # perform login
        if self._auth_method:
            self._auth = self._auth_method.login()

    def send_request(self, method, endpoint_path, **kwargs):
        try:
            resp = self._request_raw(method=method, endpoint_path=endpoint_path, is_absolute_path=False, **kwargs)
            resp.raise_for_status()
        except HTTPError as e:
            if e.response.status_code in self.status_forcelist:
                message = f'Request "{method}: {endpoint_path}" failed, too many retries. ' \
                          f'Status Code: {e.response.status_code}. Response: {e.response.text}'
            else:
                message = f'Request "{method}: {endpoint_path}" failed with non-retryable error. ' \
                          f'Status Code: {e.response.status_code}. Response: {e.response.text}'
            raise UserException(message) from e
        except InvalidJSONError:
            message = f'Request "{method}: {endpoint_path}" failed. The JSON payload is invalid (more in detail). ' \
                      f'Verify the datatype conversion.'
            data = kwargs.get('data') or kwargs.get('json')
            raise UserException(message, data)
        except ConnectionError as e:
            message = f'Request "{method}: {endpoint_path}" failed with the following error: {e}'
            raise UserException(message) from e

    def build_url(self, base_url, endpoint_path):
        self.base_url = base_url
        return self._build_url(endpoint_path)

    # override to continue on retry error
    def _requests_retry_session(self, session=None):
        session = session or requests.Session()
        retry = Retry(
            total=self.max_retries,
            read=self.max_retries,
            connect=self.max_retries,
            backoff_factor=self.backoff_factor,
            status_forcelist=self.status_forcelist,
            allowed_methods=self.allowed_methods,
            raise_on_status=False
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        return session


================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: tests/test_auth.py
================================================
import unittest
from pathlib import Path

from http_generic.auth import AuthMethodBuilder, AuthBuilderError, BasicHttp, OAuth20ClientCredentials
from configuration import WriterConfiguration, ApiConfig, Authentication, ApiRequest, RequestContent


class TestConfiguration(unittest.TestCase):

    def setUp(self) -> None:
        self.resource_dir = Path(__file__).absolute().parent.joinpath('resources').as_posix()

    def test_convert_private(self):
        params = {'#password': 'test'}
        new_args = AuthMethodBuilder._convert_secret_parameters(BasicHttp, **params)
        self.assertDictEqual(new_args, {'_BasicHttp__password': 'test'})

    def test_invalid_method_params_fail(self):
        params = {'#password': 'test'}

        writer_conf = WriterConfiguration(
            api=ApiConfig(authentication=Authentication(type='Login'), base_url=''),
            request_parameters=ApiRequest(method='GET', endpoint_path=''),
            request_content=RequestContent(content_type='json')
        )

        with self.assertRaises(ValueError):
            AuthMethodBuilder.build(writer_conf, **params)

    def test_invalid_method_fail(self):
        writer_conf = WriterConfiguration(
            api=ApiConfig(authentication=Authentication(type='INVALID'), base_url=''),
            request_parameters=ApiRequest(method='GET', endpoint_path=''),
            request_content=RequestContent(content_type='json')
        )

        with self.assertRaises(AuthBuilderError):
            AuthMethodBuilder.build(writer_conf, **{})

    def test_valid_method_params_pass(self):
        params = {'username': "usr", '#password': 'test'}
        expected = BasicHttp(username='usr', _BasicHttp__password='test')

        writer_conf = WriterConfiguration(
            api=ApiConfig(authentication=Authentication(type='BasicHttp'), base_url=''),
            request_parameters=ApiRequest(method='GET', endpoint_path=''),
            request_content=RequestContent(content_type='json')
        )

        auth_method = AuthMethodBuilder.build(writer_conf, **params)
        self.assertEqual(expected, auth_method)

    def test_client_credentials_basic(self):
        auth = OAuth20ClientCredentials(login_endpoint='http://mock-server:80/035-oauth_basic/login',
                                            client_id='clientId',
                                            client_secret='clientSecret',
                                        api_request_headers={'X-ApiToken': {'response': 'access_token'}})
        auth.login()
        self.assertEqual(auth.api_request_headers, {'X-ApiToken': 'mkoijn098uhbygv'})

    def test_client_credentials_json(self):
        auth = OAuth20ClientCredentials(method='POST',
                                        auth_type='client_secret_post_json',
                                        login_endpoint='http://mock-server:80/036-oauth_post_json/login',
                                        client_id='clientId',
                                        client_secret='clientSecret',
                                        api_request_headers={'X-ApiToken': {'response': 'access_token'}})
        auth.login()
        self.assertEqual(auth.api_request_headers, {'X-ApiToken': 'mkoijn098uhbygv'})

    def test_client_credentials_form(self):
        auth = OAuth20ClientCredentials(method='GET',
                                        auth_type='client_secret_post_form',
                                        login_endpoint='http://mock-server:80/037-oauth_post_form/login',
                                        client_id='id',
                                        client_secret='sec',
                                        api_request_headers={'X-ApiToken': {'response': 'access_token'}})
        auth.login()
        self.assertEqual(auth.api_request_headers, {'X-ApiToken': 'mkoijn098uhbygv'})


================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import os
import unittest

import mock
from freezegun import freeze_time

from component import Component
from user_functions import UserFunctions


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


class TestUserFunctions(unittest.TestCase):

    def setUp(self) -> None:
        self.uf = UserFunctions()

    def test_md5_hash(self):
        expected = '99aa06adaa9fdd8f506569e43c29ed25'
        hashed = self.uf.execute_function('md5_encode', 'keboola_is_awesome')
        self.assertEqual(expected, hashed)


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: tests/test_configuration.py
================================================
import json
import os
import unittest
from pathlib import Path

import configuration
from configuration import ApiRequest, ApiConfig, JsonMapping, WriterConfiguration, RequestContent, ColumnDataTypes


class TestConfiguration(unittest.TestCase):

    def setUp(self) -> None:
        self.resource_dir = Path(__file__).absolute().parent.joinpath('resources').as_posix()

    def test_validation_passes(self):
        with open(os.path.join(self.resource_dir, 'configv2.json')) as inp:
            config = json.load(inp)
            configuration.validate_configuration_v2(config)

    def test_build_configuration_full(self):
        api = ApiConfig(base_url="http://test.com/api/",
                        authentication=configuration.Authentication(type='SomeType', parameters={"test": "val"}),
                        default_query_parameters={
                            "test": "test"
                        },
                        default_headers=
                        {"Authorization": {
                            "attr": "token_encoded"
                        }
                        },
                        retry_config=configuration.RetryConfig(max_retries=10))
        user_parameters = {
            "debug": True,
            "#token": "Bearer 123456",
            "token_encoded": {
                "function": "concat",
                "args": [
                    "Basic ", {
                        "function": "base64_encode",
                        "args": [{
                            "attr": "#token"
                        }
                        ]
                    }
                ]
            }
        }

        api_request = ApiRequest(method='POST',
                                 endpoint_path="users/[[id]]",
                                 headers={"endpoint_header": "eh"},
                                 query_parameters={
                                     "date": "[[date]]"
                                 },
                                 continue_on_failure=False)
        content = RequestContent(content_type="JSON",
                                 iterate_by_columns=["id", "date"],
                                 json_mapping=JsonMapping(chunk_size=1,
                                                          nesting_delimiter="__",
                                                          request_data_wrapper="{ \"data\": [[data]]}",
                                                          column_names_override={
                                                              "column_a": "COLUMN|A"
                                                          },
                                                          column_data_types=ColumnDataTypes(
                                                              autodetect=True,
                                                              datatype_override=[
                                                                  {
                                                                      "column_a": "number"
                                                                  }
                                                              ])))

        expected_cfg = WriterConfiguration(api=api, request_parameters=api_request, request_content=content,
                                           user_parameters=user_parameters)
        with open(os.path.join(self.resource_dir, 'configv2.json')) as inp:
            config = json.load(inp)
            cfg_object = configuration.build_configuration(config)
            self.assertEqual(expected_cfg, cfg_object)

    def test_build_configuration_minimal(self):
        api = ApiConfig(base_url="http://test.com/api/")
        user_parameters = {
            "debug": True,
            "#token": "Bearer 123456",
            "token_encoded": {
                "function": "concat",
                "args": [
                    "Basic ", {
                        "function": "base64_encode",
                        "args": [{
                            "attr": "#token"
                        }
                        ]
                    }
                ]
            }
        }

        api_request = ApiRequest(method='POST',
                                 endpoint_path="users/[[id]]",
                                 continue_on_failure=False)
        content = RequestContent(content_type="JSON",
                                 iterate_by_columns=["id", "date"],
                                 json_mapping=JsonMapping(chunk_size=1,
                                                          nesting_delimiter="__",
                                                          column_data_types=ColumnDataTypes(
                                                              autodetect=True)))

        expected_cfg = WriterConfiguration(api=api, request_parameters=api_request, request_content=content,
                                           user_parameters=user_parameters)

        with open(os.path.join(self.resource_dir, 'configv2_minimal.json')) as inp:
            config = json.load(inp)
        cfg_object = configuration.build_configuration(config)
        self.assertEqual(expected_cfg, cfg_object)


================================================
File: tests/test_functional.py
================================================
import os
import re
import unittest
from pathlib import Path
from unittest.mock import patch

import responses
from keboola.component import UserException

from component import Component
from tests.functional.custom_matchers import binary_payload_matcher, binary_gz_payload_matcher, \
    binary_payload_multi_matcher_to_string


class TestComponent(unittest.TestCase):

    def setUp(self) -> None:
        self.tests_dir = Path(__file__).absolute().parent.joinpath('functional').as_posix()
        self.sample_data_dir = Path(__file__).absolute().parent.joinpath('functional', 'sample_data').as_posix()

    def _get_test_component(self, test_name):
        test_dir = os.path.join(self.tests_dir, test_name)
        os.environ['KBC_DATADIR'] = test_dir
        return Component()

    @responses.activate
    def test_binary_payload_iterations(self):
        test_name = 'binary_iterations'
        comp = self._get_test_component(test_name)

        # expected
        expected_parameters = {"dryrun": "True", "date": "2021-01-01"}
        params_matcher = responses.matchers.query_param_matcher(expected_parameters)

        with open(os.path.join(self.tests_dir, test_name, 'content1.request')) as c1:
            content1 = c1.read()
        with open(os.path.join(self.tests_dir, test_name, 'content2.request')) as c2:
            content2 = c2.read()

        expected_payloads = {
            'http://functional/test/123': content1,
            'http://functional/test/234': content2
        }

        responses.add(
            responses.POST,
            re.compile('http://functional/test/(123|234)'),
            match=[
                binary_payload_multi_matcher_to_string(expected_payloads),
                params_matcher
            ]
        )
        comp.run()

    @responses.activate
    def test_binary_payload_full_table(self):
        test_name = 'binary_simple'
        comp = self._get_test_component(test_name)

        # expected
        expected_data_path = os.path.join(comp.tables_in_path, 'orders.csv')
        expected_parameters = {"dryrun": "True", "date": "2021-01-01"}
        data_matcher = binary_payload_matcher(expected_data_path)
        params_matcher = responses.matchers.query_param_matcher(expected_parameters)

        responses.add(
            responses.POST,
            url="http://functional/test",
            match=[
                data_matcher,
                params_matcher
            ]
        )

        comp.run()

    @patch('http_generic.client.GenericHttpClient.send_request')
    def test_binary_payload_full_request_sent(self, mock_post):
        test_name = 'binary_simple'
        comp = self._get_test_component(test_name)
        comp.run()
        mock_post.assert_called()

    @responses.activate
    def test_binary_payload_gz(self):
        test_name = 'binary_gz'
        comp = self._get_test_component(test_name)

        # expected
        expected_data_path = os.path.join(comp.tables_in_path, 'orders.csv')
        expected_parameters = {"dryrun": "True", "date": "2021-01-01"}
        data_matcher = binary_gz_payload_matcher(expected_data_path)
        params_matcher = responses.matchers.query_param_matcher(expected_parameters)

        responses.add(
            responses.POST,
            url="http://functional/test",
            match=[
                data_matcher,
                params_matcher
            ]
        )
        comp.run()

    @patch('http_generic.client.GenericHttpClient.send_request')
    def test_binary_payload_gz_request_sent(self, mock_post):
        test_name = 'binary_gz'
        comp = self._get_test_component(test_name)
        comp.run()
        mock_post.assert_called()

    def test_invalid_config_ue(self):
        test_name = 'invalid_config'
        comp = self._get_test_component(test_name)
        try:
            comp.run()
        except UserException as e:
            self.assertIn('Configuration is missing following required fields:', str(e))

    @responses.activate
    def test_log_error_response_content(self):
        test_name = 'simple_retry'
        comp = self._get_test_component(test_name)
        response_text = '{"error": "Request invalid"}'

        responses.add(
            responses.POST,
            url="https://functional/test",
            body=response_text,
            status=400

        )
        try:
            comp.run()
        except UserException as e:
            self.assertIn(response_text, str(e))


if __name__ == "__main__":
    unittest.main()


================================================
File: tests/functional/custom_matchers.py
================================================
import difflib
import gzip
import os
import tempfile
from io import BufferedReader, BytesIO


def query_param_matcher(params):
    """
    Matcher to match 'params' argument in request
    :param params: (dict), same as provided to request
    :return: (func) matcher
    """

    def match(request):
        request_params = request.params
        valid = (
            params is None
            if request_params is None
            else sorted(params.items()) == sorted(request_params.items())
        )

        if not valid:
            return False, "%s doesn't match %s" % (
                sorted(request_params.items()),
                sorted(params.items()),
            )

        return valid, ""

    return match


def binary_payload_matcher(params):
    """
    Matches JSON encoded data
    :param params: (str) path to source binary file
    :return: (func) matcher
    """

    def _compare_files(path1, path2):
        with open(path1, 'r') as in1, open(path2, 'r') as in2:
            body1 = in1.read()
            body2 = in2.read()
        errors = difflib.context_diff(body1, body2)  # set the compare output to a variable

        return len(list(errors)) == 0

    def match(request):
        request_body = request.body
        result = tempfile.mktemp()
        valid = False
        try:
            if isinstance(request_body, BufferedReader):
                with open(result, 'wb+') as out:
                    for chunk in request_body:
                        out.write(chunk)
                valid = _compare_files(result, params)
            # compare
            if not valid:
                return False, "The binary files do not match!"

            return valid, ""
        except Exception as e:
            return False, f"Cannot parse request.content. {e}"
        finally:
            request_body.close()
            os.remove(result)

    return match


def binary_gz_payload_matcher(params):
    """
    Matches JSON encoded data
    :param params: (str) path to source binary file
    :return: (func) matcher
    """

    def _compare_files(decompressed_result, path2):
        with open(path2, 'r') as inp:
            body2 = inp.read()
        errors = difflib.context_diff(decompressed_result, body2)  # set the compare output to a variable

        return len(list(errors)) == 0

    def match(request):
        request_body = request.body
        result = tempfile.mktemp()
        valid = False
        try:
            if isinstance(request_body, BufferedReader):
                with open(result, 'wb+') as out:
                    for chunk in request_body:
                        out.write(chunk)
                with open(result, 'rb') as gz:
                    decompressed = gzip.decompress(gz.read())
                valid = _compare_files(decompressed.decode('utf-8'), params)
            # compare
            if not valid:
                return False, "The binary files do not match!"

            return valid, ""
        except Exception as e:
            return False, f"Cannot parse request.content. {e}"
        finally:
            request_body.close()
            os.remove(result)

    return match


def binary_payload_multi_matcher_to_string(strings_to_match):
    """
    Matches JSON encoded data
    :param string_to_match: (dict[str]) string to match, per endpoint_path
    :return: (func) matcher
    """

    def _compare_files(decompressed_result, path2):
        with open(path2, 'r') as inp:
            body2 = inp.read()
        errors = difflib.context_diff(decompressed_result, body2)  # set the compare output to a variable

        return len(list(errors)) == 0, f"Expected content: {decompressed_result}; vs. received: {body2} "

    def match(request):
        request_body = request.body
        result = tempfile.mktemp()
        valid = False
        errors = ""
        try:
            if isinstance(request_body, (BufferedReader, BytesIO)):
                with open(result, 'wb+') as out:
                    for chunk in request_body:
                        out.write(chunk)
                valid, errors = _compare_files(strings_to_match[request.url.split('?')[0]], result)
                os.remove(result)
            # compare
            if not valid:
                return False, f"The binary files do not match. " \
                              f"{errors}! "

            return valid, ""
        except Exception as e:
            return False, f"Cannot parse request.content. {e}"
        finally:
            request_body.close()

    return match


================================================
File: tests/functional/binary_gz/config.json
================================================
{
  "parameters": {
    "path": "http://functional/test",
    "mode": "BINARY_GZ",
    "method": "POST",
    "user_parameters": {
      "date": "2021-01-01"
    },
    "headers": [],
    "additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "date": {
            "attr": "date"
          },
          "dryrun": true
        }
      }
    ],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 1,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: tests/functional/binary_gz/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: tests/functional/binary_iterations/config.json
================================================
{
  "parameters": {
    "path": "http://functional/test/[[id]]",
    "mode": "BINARY",
    "method": "POST",
    "user_parameters": {
      "date": "2021-01-01"
    },
    "headers": [],
    "additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "date": {
            "attr": "date"
          },
          "dryrun": true
        }
      }
    ],
    "iteration_mode": {
      "iteration_par_columns": [
        "id"
      ]},
    "json_data_config": {
      "chunk_size": 1,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: tests/functional/binary_iterations/content1.request
================================================
name,address_city,address_country,address_street
John Doe,London,UK,Whitehaven Mansions


================================================
File: tests/functional/binary_iterations/content2.request
================================================
name,address_city,address_country,address_street
Jane Doe,St Mary Mead,UK,High Street


================================================
File: tests/functional/binary_iterations/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: tests/functional/binary_simple/config.json
================================================
{
  "parameters": {
    "path": "http://functional/test",
    "mode": "BINARY",
    "method": "POST",
    "user_parameters": {
      "date": "2021-01-01"
    },
    "headers": [],
    "additional_requests_pars": [
      {
        "key": "params",
        "value": {
          "date": {
            "attr": "date"
          },
          "dryrun": true
        }
      }
    ],
    "iteration_mode": {},
    "json_data_config": {
      "chunk_size": 1,
      "delimiter": "__",
      "infer_types_for_unknown": true
    },
    "debug": true
  },
  "image_parameters": {}
}


================================================
File: tests/functional/binary_simple/content1.request
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: tests/functional/binary_simple/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: tests/functional/invalid_config/config.json
================================================
{
  "parameters": {},
  "image_parameters": {}
}


================================================
File: tests/functional/invalid_config/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: tests/functional/simple_retry/config.json
================================================
{
  "parameters": {
    "api": {
      "base_url": "https://functional",
      "retry_config": {
        "max_retries": 2,
        "backoff_factor": 0.3,
        "codes": [
          500,
          429
        ]
      }
    },
    "user_parameters": {},
    "request_parameters": {
      "method": "POST",
      "endpoint_path": "/test"
    },
    "request_content": {
      "content_type": "JSON",
      "json_mapping": {
        "nesting_delimiter": "__",
        "chunk_size": 2,
        "column_data_types": {
          "autodetect": true
        },
        "request_data_wrapper": "",
        "column_names_override": {}
      }
    }
  }
}

================================================
File: tests/functional/simple_retry/in/tables/orders.csv
================================================
"id","name","address_city","address_country","address_street"
"123","John Doe","London","UK","Whitehaven Mansions"
"234","Jane Doe","St Mary Mead","UK","High Street"

================================================
File: tests/resources/configv2.json
================================================
{
  "api": {
    "base_url": "http://test.com/api/",
    "authentication": {
      "type": "SomeType",
      "parameters": {
        "test": "val"
      }
    },
    "default_query_parameters": {
      "test": "test"
    },
    "default_headers": {
      "Authorization": {
        "attr": "token_encoded"
      }
    },
    "retry_config": {
      "max_retries": 10
    }
  },
  "user_parameters": {
    "debug": true,
    "#token": "Bearer 123456",
    "token_encoded": {
      "function": "concat",
      "args": [
        "Basic ",
        {
          "function": "base64_encode",
          "args": [
            {
              "attr": "#token"
            }
          ]
        }
      ]
    }
  },
  "request_parameters": {
    "method": "POST",
    "headers": {
      "endpoint_header": "eh"
    },
    "query_parameters": {
      "date": "[[date]]"
    },
    "endpoint_path": "users/[[id]]",
    "continue_on_failure": false
  },
  "request_content": {
    "content_type": "JSON",
    "iterate_by_columns": [
      "id",
      "date"
    ],
    "json_mapping": {
      "chunk_size": 1,
      "nesting_delimiter": "__",
      "request_data_wrapper": "{ \"data\": [[data]]}",
      "column_names_override": {
        "column_a": "COLUMN|A"
      },
      "column_data_types": {
        "autodetect": true,
        "datatype_override": [
          {
            "column_a": "number"
          }
        ]
      }
    }
  }
}


================================================
File: tests/resources/configv2_minimal.json
================================================
{
  "api": {
    "base_url": "http://test.com/api/"
  },
  "user_parameters": {
    "debug": true,
    "#token": "Bearer 123456",
    "token_encoded": {
      "function": "concat",
      "args": [
        "Basic ",
        {
          "function": "base64_encode",
          "args": [
            {
              "attr": "#token"
            }
          ]
        }
      ]
    }
  },
  "request_parameters": {
    "method": "POST",
    "endpoint_path": "users/[[id]]",
    "continue_on_failure": false
  },
  "request_content": {
    "content_type": "JSON",
    "iterate_by_columns": [
      "id",
      "date"
    ],
    "json_mapping": {
      "chunk_size": 1,
      "nesting_delimiter": "__",
      "column_data_types": {
        "autodetect": true
      }
    }
  }
}


================================================
File: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.wr-generic" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: ${{ vars.KBC_DEVELOPERPORTAL_USERNAME }}

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

