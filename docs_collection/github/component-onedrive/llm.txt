Directory structure:
└── keboola-component-onedrive/
    ├── README.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── flake8.cfg
    ├── LICENSE.md
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   └── client/
    │       ├── __init__.py
    │       ├── client.py
    │       └── exceptions.py
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
FILE: README.md
================================================
OneDrive Data Source
=============

This connector downloads files from [Microsoft OneDrive](https://www.microsoft.com/en-us/microsoft-365/onedrive/online-cloud-storage) and stores them in your project.

The Microsoft OneDrive cloud storage integrates the [Office365](https://www.office.com/) and [SharePoint](https://www.microsoft.com/en-us/microsoft-365/sharepoint/collaboration) sites. It also supports SharePoint's document libraries. This connector lets you access all your files in your personal or business account.

With the flexibility of file path masks, you can now download multiple files within a single configuration. Additionally, you can selectively download only the files that have been updated.

**Table of contents:**

[TOC]

Prerequisites
=============

OAuth authorization is required for personal OneDrive, while for OneDrive for business, you need to know the Tenant ID in addition to OAuth. If you want to use Sharepoint, you also need to provide the site name.

#### Refresh Token

The refresh token is used to obtain a new access token. The refresh token is stored in the state file and is used for runs of the writer ROW! A problem with no valid refresh token can appear if new rows are added after the main OAuth refresh token expiration time.


Supported Features
===================

If you want to request new features, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/).

Configuration
=============

- **account_type**: Account type - This field is only used in GUI to display relevant fields for different account types.
- **tenant_id**: Tenant ID is needed for OneDrive for Business and SharePoint. You can find the Tenant ID in the Azure Portal. After signing in, click 'Azure Active Directory' in the left-hand menu. The Tenant ID can be found in the 'Tenant information' section on the 'Azure Active Directory' overview page.
- **site_url**: The site URL is only needed for SharePoint. You can find the site name in the URL address when you visit your SharePoint online.
- **library_name**: Library name (optional) is used to select the Document Library from which you want to download files. If you do not wish to download files from the Document Library, leave this field empty.
- **file_path**: Path to the file/s you want to download from the selected service. Supports wildcards.
     - Examples: 
       - \*.csv - Downloads all available CSV files.
       - /reports/\*.csv - Downloads all available CSV files from the reports folder and its subfolders.
       - db_exports/report_\*.xlsx - Downloads all .xlsx files that are named report_\* (\* is wildcard) from the db_exports folder and its subfolders. 
       - db_exports/2022_\*/\*.csv - Downloads all CSV files from folders matching db_exports/2022_\* (\* is wildcard). 
- **new_files_only**: New files only (optional). If set to true, the component will use the timestamp of the freshest file downloaded last run to download only newer files. The LastModifiedAt value from GraphAPI is used.
- **custom_tag**: Custom tag (optional). Adds a custom tag to Keboola Storage for all downloaded files. Only one custom tag is supported.
- **permanent**: Permanent files (optional). If set to true, downloaded files will be stored in Keboola Storage permanently. Otherwise, they will be deleted after 14 days.

Example Configuration
======

```json
{
   "account":{
      "tenant_id":"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
      "account_type":"onedrive_for_business"
   },
   "settings":{
      "file_path":"/extractor-test/subfolder/*.png",
      "new_files_only":false
   },
   "destination":{
      "custom_tag":"odb_test",
      "permanent": false
   }
}
```

Development
-----------

If required, change the local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with the following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone https://bitbucket.org/kds_consulting_team/kds-team.ex-onedrive/src/master/ kds-team.ex-onedrive
cd kds-team.ex-onedrive
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with Keboola, please refer to the
[deployment section of our developer
documentation](https://developers.keboola.com/extend/component/deployment/).



================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
FILE: Dockerfile
================================================
FROM python:3.11-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
FILE: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
FILE: requirements.txt
================================================
keboola.component==1.4.4
keboola.http-client==1.0.0
mock~=5.0.1
freezegun~=1.2.2
backoff==2.2.1
dataconf==2.2.1


================================================
FILE: component_config/component_long_description.md
================================================
This connector downloads files from [Microsoft OneDrive](https://www.microsoft.com/en-us/microsoft-365/onedrive/online-cloud-storage) and stores them in your project.

The Microsoft OneDrive cloud storage integrates the [Office365](https://www.office.com/) and [SharePoint](https://www.microsoft.com/en-us/microsoft-365/sharepoint/collaboration) sites. It also supports SharePoint's document libraries. This connector lets you access all your files in your personal or business account.

With the flexibility of file path masks, you can now download multiple files within a single configuration. Additionally, you can selectively download only the files that have been updated.


================================================
FILE: component_config/component_short_description.md
================================================
Microsoft OneDrive is a file hosting service used for saving files in the cloud, sharing them, and collaborating on content.



================================================
FILE: component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "Data source configuration",
  "properties": {
    "settings": {
      "type": "object",
      "title": "Settings",
      "propertyOrder": 1,
      "properties": {
        "file_path": {
          "type": "string",
          "title": "File path",
          "default": "*",
          "propertyOrder": 1,
          "description": "Source file path with its extension or wildcard"
        },
        "new_files_only": {
          "type": "boolean",
          "format": "checkbox",
          "title": "New files only",
          "default": false,
          "description": "Every job stores the timestamp of the last downloaded file, and a subsequent job can pick up from there.",
          "propertyOrder": 2
        }
      }
    },
    "destination": {
      "type": "object",
      "title": "Destination",
      "propertyOrder": 2,
      "properties": {
        "custom_tag": {
          "type": "string",
          "title": "Custom tag (optional)",
          "description": "Adds a custom tag to Keboola Storage for all downloaded files.",
          "propertyOrder": 1
        },
        "permanent": {
          "type": "boolean",
          "title": "Permanent files",
          "default": false,
          "format": "checkbox",
          "description": "If set to true, downloaded files will be stored in Keboola Storage permanently. Otherwise, they will be deleted after 14 days.",
          "propertyOrder": 2
        }
      }
    }
  }
}


================================================
FILE: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Account configuration",
  "properties": {
    "account": {
      "type": "object",
      "title": "Account",
      "propertyOrder": 1,
      "properties": {
        "account_type": {
          "type": "string",
          "title": "Account Type",
          "enum": [
            "private_onedrive",
            "onedrive_for_business",
            "sharepoint"
          ],
          "default": "work_school",
          "options": {
            "enum_titles": [
              "Private OneDrive",
              "OneDrive for Business",
              "SharePoint"
            ]
          },
          "propertyOrder": 1
        },
        "tenant_id": {
          "type": "string",
          "title": "Tenant ID",
          "description": "You can find the Tenant ID in the <a href='https://portal.azure.com/#home'>Azure Portal</a>. After signing in, click on 'Azure Active Directory' in the left-hand menu. The Tenant ID can be found in the 'Tenant information' section on the 'Azure Active Directory' overview page.",
          "options": {
            "dependencies": {
              "account_type": [
                "onedrive_for_business",
                "sharepoint"
              ]
            }
          },
          "propertyOrder": 2
        },
        "site_url": {
          "type": "string",
          "title": "Site Url",
          "description": "Enter the URL of the SharePoint site you want to access. The site URL can be found in your browser's address bar when you visit the SharePoint site (e.g., https://your_domain.sharepoint.com/sites/your_site_name). Make sure to include the full URL, including the 'https://' prefix.",
          "propertyOrder": 3,
          "options": {
            "dependencies": {
              "account_type": "sharepoint"
            }
          }
        },
        "library_name": {
          "type": "string",
          "title": "Library Name (optional)",
          "description": "Name of the Document Library to download the data from.",
          "propertyOrder": 4,
          "options": {
            "dependencies": {
              "account_type": "sharepoint"
            },
            "async": {
              "label": "List Libraries",
              "action": "listLibraries"
            }
          },
          "items": {
              "enum": [],
              "type": "string"
          },
          "enum": []
        }
      }
    }
  }
}


================================================
FILE: component_config/configuration_description.md
================================================
Configuration
=============

- **account_type**: Account Type - This field is only used in GUI to display relevant fields for different Account types.
- **tenant_id**: Tenant ID is needed for OneDrive for Business and SharePoint. You can find the Tenant ID in the Azure Portal. After signing in, click on 'Azure Active Directory' in the left-hand menu. The Tenant ID can be found in the 'Tenant information' section on the 'Azure Active Directory' overview page.
- **site_url**: Site URL is only needed for SharePoint. You can find the site name in the url address when you visit your SharePoint online.
- **library_name**: Library name (optional) is used to select Document Library from which you want to download files from. If you do not wish to download files from Document Library, leave this field empty.
- **file_path**: Path to file/s you want to download from selected service. Supports wildcards.
     - Examples: 
       - \*.csv - Downloads all available csv files.
       - /reports/\*.csv - Downloads all available csv files from reports folder and it's subfolders.
       - db_exports/report_\*.xlsx - Downloads all .xlsx files that are named like report_\* (\* is wildcard) from db_exports folder and it's subfolders. 
       - db_exports/2022_\*/\*.csv - Downloads all csv files from folders matching db_exports/2022_\* (\* is wildcard) 
- **new_files_only**: New Files Only (optional). If set to true, the component will use timestamp of the freshest file downloaded last run to download only newer files. LastModifiedAt value from GraphAPI is used.
- **custom_tag**: Custom Tag (optional). Adds custom tag to Keboola Storage for all downloaded files. Only one custom tag is supported.
- **permanent**: Permanent Files (optional). If set to true, downloaded files will be stored as permanent in Keboola storage. Otherwise, they will be deleted after 14 days.



================================================
FILE: component_config/documentationUrl.md
================================================
[Empty file]


================================================
FILE: component_config/licenseUrl.md
================================================
[Empty file]


================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sourceCodeUrl.md
================================================
[Empty file]


================================================
FILE: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
FILE: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi


================================================
FILE: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"


================================================
FILE: src/component.py
================================================
import json
import logging
import os
from datetime import datetime
from typing import List, Union, Any

from keboola.component.base import ComponentBase, sync_action
from keboola.component.exceptions import UserException
from keboola.component.sync_actions import SelectElement

from client.client import OneDriveClient, OneDriveClientException
from configuration import Configuration, Account

KEY_STATE_REFRESH_TOKEN = "#refresh_token"


class Component(ComponentBase):

    def __init__(self):
        super().__init__()
        self._configuration: Configuration

        self.refresh_token = self.configuration.oauth_credentials.data["refresh_token"]
        self.client_id = self.configuration.oauth_credentials.appKey
        self.client_secret = self.configuration.oauth_credentials.appSecret

    def run(self):
        self._init_configuration()
        state_file = self.get_state_file()

        file_path = self._configuration.settings.file_path

        if not file_path:
            file_path = "*"
            logging.warning("File path is not set, the component will try to download everything "
                            "from authorized drive!")

        library_name = self._configuration.account.library_name

        last_modified_at = self._set_last_modified(state_file)

        client = self._get_client(self._configuration.account)

        try:
            client.download_files(file_path=file_path, output_dir=self.files_out_path,
                                  last_modified_at=last_modified_at, library_name=library_name)
        except OneDriveClientException as e:
            raise UserException(e) from e

        self._create_manifests(client)
        self._save_timestamp(client, file_path)

    def _save_timestamp(self, client, file_path) -> None:
        if client.freshest_file_timestamp:
            freshest_timestamp = client.freshest_file_timestamp.isoformat()
            self._save_to_state({"last_modified": freshest_timestamp})
            logging.info(f"Saving freshest file timestamp to statefile: {freshest_timestamp}")
        else:
            logging.warning(f"The component has not found any files matching filename: {file_path}")

    def _create_manifests(self, client) -> None:

        tag = self._configuration.destination.custom_tag
        tags = [tag] if tag else []

        permanent = self._configuration.destination.permanent
        if permanent:
            logging.info("Downloaded files will be stored as permanent files.")

        for filename in client.downloaded_files:
            file_def = self.create_out_file_definition(filename, tags=tags, is_permanent=permanent)
            self.write_manifest(file_def)

    def _set_last_modified(self, state_file) -> Union[str, Any]:
        get_new_only = self._configuration.settings.new_files_only
        last_modified_at = False
        if get_new_only:
            if state_file.get("last_modified", False):
                last_modified_at = datetime.fromisoformat(state_file.get("last_modified"))
                logging.info(f"Component will download files with lastModifiedDateTime > {last_modified_at}")
            else:
                logging.warning("last_modified timestamp not found in statefile, Cannot download new files only. "
                                "To resolve this, disable this option in row config or "
                                "set last_modified in statefile manually.")
        return last_modified_at

    def _init_configuration(self) -> None:
        self.validate_configuration_parameters(Configuration.get_dataclass_required_parameters())
        self._configuration: Configuration = Configuration.load_from_dict(self.configuration.parameters)

    def _get_client(self, account_params: Account) -> OneDriveClient:
        tenant_id = account_params.tenant_id
        site_url = account_params.site_url
        for refresh_token in self._get_refresh_tokens():
            try:
                client = OneDriveClient(refresh_token=refresh_token, files_out_folder=self.files_out_path,
                                        client_id=self.client_id, client_secret=self.client_secret,
                                        tenant_id=tenant_id, site_url=site_url)
                self._save_refresh_token_state(client.refresh_token)
                return client
            except OneDriveClientException:
                logging.warning("Refresh token failed, retrying connection with new refresh token.")
                pass
        raise UserException('Authentication failed, reauthorize the extractor in extractor configuration!')

    def _get_refresh_tokens(self) -> list[str]:
        state_file = self.get_state_file()
        state_refresh_token = state_file.get(self.configuration.oauth_credentials.id, {}).get(KEY_STATE_REFRESH_TOKEN)
        if state_refresh_token:
            logging.info("State refresh token found")
        return [token for token in [state_refresh_token, self.refresh_token] if token]

    def _save_refresh_token_state(self, new_refresh_token):
        self._save_to_state(
            {self.configuration.oauth_credentials.id: {KEY_STATE_REFRESH_TOKEN: new_refresh_token}})

    def _save_to_state(self, data: dict) -> None:
        # if not state file exists create it
        if not os.path.exists(os.path.join(self.configuration.data_dir, 'out', 'state.json')):
            with open(os.path.join(self.configuration.data_dir, 'out', 'state.json'), 'w+') as state_file:
                json.dump(data, state_file)
        else:
            with open(os.path.join(self.configuration.data_dir, 'out', 'state.json'), 'r+') as state_file:
                actual_data = json.load(state_file)
                state_file.seek(0)  # Move the cursor to the beginning of the file
                new_data = {**actual_data, **data}
                json.dump(new_data, state_file)
                state_file.truncate()  # Remove remaining part if the new data is shorter

    @sync_action("listLibraries")
    def list_sharepoint_libraries(self) -> List[SelectElement]:
        account_json = self.configuration.parameters.get("account", {})
        required_parameters = ["tenant_id", "site_url"]
        self._validate_parameters(account_json, required_parameters, 'Credentials')

        acc_config = Account.load_from_dict(account_json)

        client = self._get_client(acc_config)

        libraries = client.get_document_libraries(acc_config.site_url)

        return [
            SelectElement(
                label=library['name'],
                value="Shared Documents" if library['name'] == "Documents" else library['webUrl'].split("/")[-1]
            )
            for library in libraries
        ]


# Main entrypoint
if __name__ == "__main__":
    try:
        comp = Component()
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
FILE: src/configuration.py
================================================
import dataclasses
import json
from dataclasses import dataclass
from typing import List

import dataconf


class ConfigurationBase:
    @staticmethod
    def _convert_private_value(value: str):
        return value.replace('"#', '"pswd_')

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith("pswd_"):
            return value.replace("pswd_", "#", 1)
        else:
            return value

    @classmethod
    def load_from_dict(cls, configuration: dict):
        """
        Initialize the configuration dataclass object from dictionary.
        Args:
            configuration: Dictionary loaded from json configuration.

        Returns:

        """
        json_conf = json.dumps(configuration)
        json_conf = ConfigurationBase._convert_private_value(json_conf)
        return dataconf.loads(json_conf, cls, ignore_unexpected=True)

    @classmethod
    def get_dataclass_required_parameters(cls) -> List[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: List[str]

        """
        return [cls._convert_private_value_inv(f.name)
                for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING
                and f.default_factory == dataclasses.MISSING]


@dataclass
class Account(ConfigurationBase):
    tenant_id: str = ""
    site_url: str = ""
    library_name: str = ""


@dataclass
class Settings(ConfigurationBase):
    file_path: str
    new_files_only: bool = False


@dataclass
class Destination(ConfigurationBase):
    custom_tag: str = ""
    permanent: bool = False


@dataclass
class Configuration(ConfigurationBase):
    account: Account
    settings: Settings
    destination: Destination



================================================
FILE: src/client/__init__.py
================================================
[Empty file]


================================================
FILE: src/client/client.py
================================================
import requests
import logging
import fnmatch
import os
from datetime import datetime
import backoff
from urllib.parse import urlparse
from requests.exceptions import HTTPError

from keboola.http_client import HttpClient

from . import exceptions


class OneDriveClientException(Exception):
    pass


class OneDriveClient(HttpClient):
    """
    The OneDriveClient class manages the interaction with OneDrive API. It handles tasks such as
    authenticating the client, configuring the client type (OneDrive, SharePoint, or OneDrive for Business),
    and managing file downloads. Currently, there is a limit to runtime of 60 minutes, because of expiration
    of access_token.

    Parameters:
    ----------
    refresh_token : str
        The token used to refresh the client's access to the OneDrive API.
    files_out_folder : str
        The directory path where downloaded files will be stored.
    client_id : str
        The ID assigned to the client by the OneDrive API.
    client_secret : str
        The secret key assigned to the client by the OneDrive API.
    tenant_id : str, optional
        The ID of the tenant, if the client is a business account (default is None).
    site_url : str, optional
        The URL of the SharePoint site, if the client is configured for SharePoint (default is None).
    """
    MAX_RETRIES = 5

    def __init__(self, refresh_token, files_out_folder, client_id, client_secret, tenant_id=None, site_url=None):

        self.base_url = ""
        self.access_token = ""

        super().__init__(base_url=self.base_url, max_retries=self.MAX_RETRIES, backoff_factor=0.3,
                         status_forcelist=(429, 503, 500, 502, 504))

        self.files_out_folder = files_out_folder
        self._refresh_token = refresh_token

        self.client_id = client_id
        self.client_secret = client_secret
        self.tenant_id = tenant_id
        self.site_url = site_url
        self._configure_client()

        self.downloaded_files = []
        self.freshest_file_timestamp = None
        self.file_mask = None

    def _configure_client(self):
        if not self.tenant_id and not self.site_url:
            return self._configure_onedrive_client()
        elif self.tenant_id and self.site_url:
            return self._configure_sharepoint_client()
        elif self.tenant_id and not self.site_url:
            return self._configure_onedrive_for_business_client()
        else:
            raise OneDriveClientException(f"Unsupported settings: {self.tenant_id}, {self.site_url}")

    def _configure_onedrive_client(self):
        logging.info("Initializing OneDrive client")
        self.client_type = "OneDrive"
        self.authority = 'https://login.microsoftonline.com/common'
        self.base_url = 'https://graph.microsoft.com/v1.0/me'
        self.scope = 'User.Read Files.Read.All offline_access'
        self._get_request_tokens()

    def _configure_sharepoint_client(self):
        logging.info("Initializing Sharepoint client")
        self.client_type = "Sharepoint"
        self.authority = f'https://login.microsoftonline.com/{self.tenant_id}'
        self.scope = 'Sites.Read.All Files.Read.All offline_access'
        self.base_url = 'https://graph.microsoft.com/v1.0/sites/'
        # We need access token to get site id and url
        self._get_request_tokens()
        site_id = self.get_site_id_from_url(self.site_url)
        self.base_url = self.base_url + site_id

    def _configure_onedrive_for_business_client(self):
        logging.info("Initializing OneDriveForBusiness client")
        self.client_type = "OneDriveForBusiness"
        self.authority = f'https://login.microsoftonline.com/{self.tenant_id}'
        self.base_url = 'https://graph.microsoft.com/v1.0/me/drive'
        self.scope = 'Sites.Read.All Files.Read.All offline_access'
        self._get_request_tokens()

    def _get_request_tokens(self) -> None:
        """
        This is handled using requests to handle compatibility with OneDrive and Sharepoint client.
        """
        logging.info("Fetching New Access token")
        request_url = "https://login.microsoftonline.com/common/oauth2/v2.0/token"
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        payload = {
            "client_id": self.client_id,
            "client_secret": self.client_secret,
            "scope": self.scope,
            "grant_type": "refresh_token",
            "refresh_token": self._refresh_token,
        }

        response = requests.post(url=request_url, headers=headers, data=payload)

        token = response.json().get("access_token", None)
        if not token:
            logging.error(response.json())
            raise OneDriveClientException("Authentication failed, "
                                          "reauthorize the extractor in extractor configuration.")

        logging.info("New Access token fetched.")
        self.access_token = token
        self._refresh_token = response.json()["refresh_token"]

        new_header = {"Authorization": 'Bearer ' + self.access_token, "Content-Type": "application/json"}
        self.update_auth_header(updated_header=new_header, overwrite=True)

    @property
    def refresh_token(self):
        return self._refresh_token

    def get_request(self, url: str, is_absolute_path: bool, stream: bool = False):
        response = self.get_raw(url, is_absolute_path=is_absolute_path, stream=stream)
        if response.status_code == 200:
            return response
        elif response.status_code == 401:
            self._get_request_tokens()
            return self.get_request(url, is_absolute_path, stream)
        elif response.status_code == 404:
            logging.error(f"Url {url} returned 404.")
            return None
        else:
            raise OneDriveClientException(f"Cannot fetch {url}, "
                                          f"response: {response.text}, "
                                          f"status_code: {response.status_code}")

    def _resolve_folder_id(self, drive_type: str, folder_path: str):
        if folder_path is None or folder_path == '/':
            return 'root'

        drive_root = f"{self.base_url}/{'root' if drive_type == 'ofb' else 'drive/root'}"
        url = f"{drive_root}:/{folder_path.strip('/')}:/"
        response = self.get_request(url, is_absolute_path=True)

        if response:
            if response.status_code == 200:
                return response.json()['id']
            else:
                raise OneDriveClientException(f"Error resolving folder path '{folder_path}': "
                                              f"{response.status_code}, {response.text}")
        else:
            raise OneDriveClientException(f"Cannot find {folder_path}. Please verify if this path exists.")

    def _get_folder_contents_onedrive(self, drive_type: str, folder_id: str):
        if folder_id == 'root':
            root_or_drive = 'drive/root' if drive_type != 'ofb' else 'root'
            folder_url = f"{self.base_url}/{root_or_drive}/children"
        else:
            drive_or_ofb = 'drive' if drive_type != 'ofb' else ''
            folder_url = f"{self.base_url}/{drive_or_ofb}/items/{folder_id}/children"

        return self._get_folder_content(folder_url)

    def _list_folder_contents(self, drive_type: str, folder_path=None):
        folder_id = self._resolve_folder_id(drive_type, folder_path)
        return self._get_folder_contents_onedrive(drive_type, folder_id)

    def _get_folder_contents_sharepoint(self, folder_path=None, library_name=None):
        folder_id = 'root' if folder_path is None or folder_path == '/' else None

        if library_name:
            logging.info(f"The component will try to fetch files from library {library_name}")
            library_id = self._get_sharepoint_library_id(library_name)
            logging.info(f"Library id: {library_id}")
            library_drive_id = self._get_sharepoint_library_drive_id(library_id)
            logging.info(f"Library drive id: {library_drive_id}")
            if not folder_id:
                folder_id = self._get_sharepoint_folder_id_from_path(library_drive_id, folder_path)
            folder_path = self._make_library_folder_path(folder_id, library_drive_id)
        else:
            logging.info(f"Scanning folder: {folder_path}")
            if folder_id == "root":
                folder_path = f"{self.base_url}/drive/root/children"
            else:
                folder_path = f"{self.base_url}/drive/root:/{folder_path}"
                folder_id = self._get_sharepoint_folder_id_from_path("", folder_path)
                folder_path = f"{self.base_url}/drive/items/{folder_id}/children"

            logging.debug(f"Folder path set to: {folder_path}")

        folder_content = self._get_folder_content(folder_path)

        return folder_content

    def _get_folder_content(self, folder_url: str) -> list:
        folder_content = []
        while True:
            response = self.get_request(folder_url, is_absolute_path=True)

            if response.status_code == 200:
                folder_content.extend(response.json()['value'])
            else:
                raise OneDriveClientException(f"Error occurred when getting folder content:"
                                              f" {response.status_code}, {response.text}")

            if response.json().get('@odata.nextLink'):
                folder_url = response.json().get('@odata.nextLink')
            else:
                return folder_content

    def _get_sharepoint_folder_id_from_path(self, library_drive_id, folder_path):
        if library_drive_id:
            url = f"{self.base_url}/drives/{library_drive_id}/root:/{folder_path.strip('/')}"
        else:
            url = folder_path

        response = self.get_request(url, is_absolute_path=True)
        if response and response.status_code == 200:
            return response.json()['id']

        error_message = f"Error resolving folder path '{folder_path}': {response.status_code}, {response.text}" \
            if response else f"Error resolving folder path '{folder_path}': No response received"
        raise OneDriveClientException(error_message)

    def _get_sharepoint_library_id(self, library_name):
        libraries = self._get_sharepoint_document_libraries()
        logging.debug(f"Found libraries: {libraries}")
        library = next((lib for lib in libraries if lib['name'] == library_name), None)
        if library is None:
            library = next((lib for lib in libraries if lib['webUrl'].split("/")[-1] == library_name), None)
        if library is None:
            raise OneDriveClientException(f"Library '{library_name}' not found")
        return library['id']

    def _get_sharepoint_library_drive_id(self, library_id):
        url = f"{self.base_url}/lists/{library_id}/drive"
        response = self.get_request(url, is_absolute_path=True)

        if response and response.status_code == 200:
            try:
                return response.json()['id']
            except KeyError:
                raise OneDriveClientException(f"Error fetching library drive: {response.json()}")

        error_message = f"Error fetching library drive: {response.status_code}, {response.text}" \
            if response else "Error fetching library drive: No response received"
        raise OneDriveClientException(error_message)

    def _make_library_folder_path(self, folder_id, library_drive_id: str = ""):
        if folder_id == 'root':
            return f"{self.base_url}/drives/{library_drive_id}/root/children"
        else:
            return f"{self.base_url}/drives/{library_drive_id}/items/{folder_id}/children"

    def get_site_id_from_url(self, site_url: str):
        parsed_url = urlparse(site_url)
        hostname = parsed_url.netloc
        server_relative_path = parsed_url.path

        url = f"https://graph.microsoft.com/v1.0/sites/{hostname}:{server_relative_path}"
        headers = {"Authorization": 'Bearer ' + self.access_token}

        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            site = response.json()
            site_id = site['id']
            return site_id
        else:
            raise OneDriveClientException(f"Error occurred when fetching site information: "
                                          f"{response.status_code}, {response.text}")

    def _get_sharepoint_document_libraries(self):
        site_id = self.get_site_id_from_url(self.site_url)
        url = f"{self.base_url}/sites/{site_id}/lists"
        response = self.get_request(url, is_absolute_path=True)

        if response.status_code == 200:
            libraries = response.json()['value']
            return libraries
        else:
            raise OneDriveClientException(f"Error occurred when getting SharePoint document libraries:"
                                          f" {response.status_code}, {response.text}")

    @backoff.on_exception(backoff.expo, Exception, max_tries=MAX_RETRIES)
    def _download_file_from_onedrive_url(self, url, output_path, filename):
        """
        Downloads a file from OneDrive using the provided download URL and saves it to the specified output path.
        """
        with self.get_request(url, is_absolute_path=True, stream=True) as r:

            if r is None:
                self._handle_no_response(filename)
                return

            if r.status_code != 200:
                self._handle_invalid_status_code(r.status_code, filename)
                return

            try:
                with open(output_path, 'wb') as f:
                    for chunk in r.iter_content(chunk_size=8192):
                        f.write(chunk)

                logging.info(f"File {filename} downloaded.")
            except OneDriveClientException as e:
                raise e

        self._handle_existing_file(filename)

    @staticmethod
    def _handle_no_response(filename):
        logging.error(f"Cannot download file {filename}, got no response from OneDrive API.")

    @staticmethod
    def _handle_invalid_status_code(status_code, filename):
        logging.error(f"Cannot download file {filename}, received {status_code} from OneDrive API.")

    def _handle_existing_file(self, filename):
        if filename in self.downloaded_files:
            logging.warning(f"File {filename} has the same filename as an already downloaded file. "
                            f"It has been overwritten.")
        self.downloaded_files.append(filename)

    def _get_items_based_on_client_type(self, folder_path, library_name):
        if self.client_type == "Sharepoint":
            return self._get_folder_contents_sharepoint(folder_path, library_name)
        elif self.client_type == "OneDriveForBusiness":
            return self._list_folder_contents("ofb", folder_path)
        elif self.client_type == "OneDrive":
            return self._list_folder_contents("onedrive", folder_path)
        else:
            raise OneDriveClientException(f"Unsupported client type: {self.client_type}")

    @staticmethod
    def _create_folder_mask(mask, folder_path):
        if "*" in mask and not folder_path == "/":
            return mask.split("*", 1)[0] + "*"
        return None

    def _process_items(self, items, folder_mask, mask, folder_path, output_dir, last_modified_at, library_name):
        for item in items:
            if item.get('folder') is not None:
                self._process_folder_item(item, folder_mask, mask, folder_path, output_dir, last_modified_at,
                                          library_name)
            elif item.get('file') is not None:
                self._process_file_item(item, mask, output_dir, last_modified_at)

    def _process_folder_item(self, item, folder_mask, mask, folder_path, output_dir, last_modified_at, library_name):
        if folder_mask and not fnmatch.fnmatch(item['name'], folder_mask):
            logging.debug(f"Skipping folder {item['name']} because it doesn't match the folder_mask {folder_mask}")
            return
        subfolder_file_path = os.path.join(folder_path, item['name'], os.path.basename(mask))
        self.download_files(subfolder_file_path, output_dir, last_modified_at, library_name)

    def _process_file_item(self, item, mask, output_dir, last_modified_at):
        if mask and not fnmatch.fnmatch(item['name'], mask):
            logging.debug(f"Skipping file {item['name']} because it doesn't match the mask {mask}")
            return
        last_modified = datetime.fromisoformat(item['lastModifiedDateTime'][:-1])
        self._update_freshest_file_timestamp(last_modified)
        if last_modified_at and last_modified <= last_modified_at:
            logging.debug(f"Skipping file {item['name']} because it was last modified before {last_modified_at}.")
            return
        file_url = item['@microsoft.graph.downloadUrl']
        output_path = os.path.join(output_dir, item['name'])
        self._download_file_from_onedrive_url(file_url, output_path, filename=item["name"])

    def get_document_libraries(self, site_url):
        """
        Retrieves a list of document libraries from a site using the Microsoft Graph API.

        Args:
            site_url (str): The URL of the site to retrieve the document libraries from.

        Returns:
            list: A list of dictionaries containing the document library metadata.

        Raises:
            OneDriveClientException: If an error occurs while retrieving the document libraries.
        """
        site_id = self.get_site_id_from_url(site_url)

        url = f"https://graph.microsoft.com/v1.0/sites/{site_id}/drives"
        response = self.get_request(url, is_absolute_path=True)

        try:
            response.raise_for_status()
        except HTTPError as e:
            raise OneDriveClientException(f"Cannot get document libraries for site_url: {site_url}") from e

        return response.json()['value']

    def download_files(self, file_path, output_dir, last_modified_at=None, library_name: str = None):
        if not last_modified_at:
            last_modified_at = datetime.strptime("2000-01-01T00:00:00", "%Y-%m-%dT%H:%M:%S")
        folder_path, mask = self._split_path_mask(file_path)
        logging.info(f"Downloading files matching mask {mask} from folder {folder_path}")
        items = self._get_items_based_on_client_type(folder_path, library_name)
        folder_mask = self._create_folder_mask(mask, folder_path)
        self._process_items(items, folder_mask, mask, folder_path, output_dir, last_modified_at, library_name)

    @property
    def get_freshest_file_timestamp(self):
        return self.freshest_file_timestamp

    @staticmethod
    def _split_path_mask(file_path):
        # Normalize the path to handle platform differences
        file_path = os.path.normpath(file_path)
        components = file_path.split(os.sep)

        path = ""
        mask = ""

        for i, component in enumerate(components):
            if "*" in component:
                mask = os.sep.join(components[i:])
                break
            elif i == len(components) - 1 and "." in component:
                mask = component
            else:
                path = os.path.join(path, component)

        # If mask is empty, set it to "*"
        if not mask:
            mask = "*"

        # If path is empty or doesn't end with a separator, add one
        if not path or path[-1] != os.sep:
            path += os.sep

        return path, mask

    def _update_freshest_file_timestamp(self, last_modified):
        if not self.freshest_file_timestamp or last_modified > self.freshest_file_timestamp:
            self.freshest_file_timestamp = last_modified

    @staticmethod
    def _parse_response(response, endpoint, filename):
        content_type = response.headers['Content-Type']

        try:
            result = response.json() if 'application/json' in content_type else response.text
        except requests.exceptions.JSONDecodeError:
            logging.error(f"Unable to parse JSON from response for {filename}.")
            result = response.text  # Fallback to treating it as text or handle as you see fit

        status_exceptions = {
            400: exceptions.BadRequest,
            401: exceptions.Unauthorized,
            403: exceptions.Forbidden,
            404: exceptions.NotFound,
            405: exceptions.MethodNotAllowed,
            406: exceptions.NotAcceptable,
            409: exceptions.Conflict,
            410: exceptions.Gone,
            411: exceptions.LengthRequired,
            412: exceptions.PreconditionFailed,
            413: exceptions.RequestEntityTooLarge,
            415: exceptions.UnsupportedMediaType,
            416: exceptions.RequestedRangeNotSatisfiable,
            422: exceptions.UnprocessableEntity,
            429: exceptions.TooManyRequests,
            500: exceptions.InternalServerError,
            501: exceptions.NotImplemented,
            503: exceptions.ServiceUnavailable,
            504: exceptions.GatewayTimeout,
            507: exceptions.InsufficientStorage,
            509: exceptions.BandwidthLimitExceeded,
        }

        if response.status_code in (200, 201, 202):
            return result
        elif response.status_code == 204:
            return None
        elif response.status_code in status_exceptions:
            raise OneDriveClientException(f'Calling endpoint {endpoint} failed: {result}') from status_exceptions[
                response.status_code]
        else:
            raise OneDriveClientException(f'Calling endpoint {endpoint} failed: {result}') from exceptions.UnknownError



================================================
FILE: src/client/exceptions.py
================================================
class BaseError(Exception):
    """
    Example:
        error_obj = {
            "error": {
                "code": "invalidRequest",
                "message": "Invalid hostname for this tenancy",
                "innerError": {
                    "request-id": "80fc571a-3262-404b-8a67-22f9cad99016",
                    "date": "2020-01-14T19:01:55"
                }
            }
        }
    """

    def __init__(self, msg, error_obj):
        if isinstance(error_obj.get("error", {}), str):
            Exception.__init__(self, msg + f' Error: {error_obj.get("error", {})}')
            self.error_obj = {}
        else:
            Exception.__init__(self, msg + f' Error: {error_obj.get("error", {}).get("message")}'
                                           f', error code: {error_obj.get("error", {}).get("code")}')
        self.error_obj = error_obj


class UnknownError(BaseError):
    pass


class TokenRequired(BaseError):
    pass


class BadRequest(BaseError):
    pass


class Unauthorized(BaseError):
    pass


class Forbidden(BaseError):
    pass


class NotFound(BaseError):
    pass


class MethodNotAllowed(BaseError):
    pass


class NotAcceptable(BaseError):
    pass


class Conflict(BaseError):
    pass


class Gone(BaseError):
    pass


class LengthRequired(BaseError):
    pass


class PreconditionFailed(BaseError):
    pass


class RequestEntityTooLarge(BaseError):
    pass


class UnsupportedMediaType(BaseError):
    pass


class RequestedRangeNotSatisfiable(BaseError):
    pass


class UnprocessableEntity(BaseError):
    pass


class TooManyRequests(BaseError):
    pass


class InternalServerError(BaseError):
    pass


class NotImplemented(BaseError):
    pass


class ServiceUnavailable(BaseError):
    pass


class GatewayTimeout(BaseError):
    pass


class InsufficientStorage(BaseError):
    pass


class BandwidthLimitExceeded(BaseError):
    pass



================================================
FILE: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
FILE: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
FILE: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-onedrive" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo $raw | sed "s/.*origin\///" | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh


