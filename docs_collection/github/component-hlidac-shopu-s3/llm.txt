Directory structure:
└── keboola-component-hlidac-shopu-s3/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   └── uploader/
    │       ├── __init__.py
    │       └── client.py
    ├── tests/
    │   ├── __init__.py
    │   ├── test_component.py
    │   ├── test_functional.py
    │   └── functional/
    │       ├── metadata/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           └── files/
    │       │   │               └── czc_cz/
    │       │   │                   ├── 173052/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 203596/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 206764/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 238261/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 238955/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 242693/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 242738/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 244495/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 297902/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 310778/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 311157/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 323297/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 323699/
    │       │   │                   │   └── meta.json
    │       │   │                   ├── 333745/
    │       │   │                   │   └── meta.json
    │       │   │                   └── 47017/
    │       │   │                       └── meta.json
    │       │   └── source/
    │       │       └── data/
    │       │           ├── config.json
    │       │           ├── in/
    │       │           │   └── tables/
    │       │           │       ├── out.c_0_czc.csv
    │       │           │       └── out.c_0_czc.csv.manifest
    │       │           └── out/
    │       │               └── files/
    │       │                   └── .gitkeep
    │       └── price-history/
    │           ├── expected/
    │           │   └── data/
    │           │       └── out/
    │           │           └── files/
    │           │               └── czc.cz/
    │           │                   ├── 181163/
    │           │                   │   └── price-history.json
    │           │                   ├── 243828/
    │           │                   │   └── price-history.json
    │           │                   └── 282225/
    │           │                       └── price-history.json
    │           └── source/
    │               └── data/
    │                   ├── config.json
    │                   ├── in/
    │                   │   └── tables/
    │                   │       ├── out.c_0_czc.csv
    │                   │       └── out.c_0_czc.csv.manifest
    │                   └── out/
    │                       └── files/
    │                           └── .gitkeep
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
S3 Writer (Hlidac Shopu)
=============

Ze vstupni tabulky / tabulek vygeneruje json soubory `$shop.tld$/$slug$/price-history.json`
nebo `$shop.tld$/$slug$/metadata.json`, zabalí je do .zip archivu, a následně je odešle do AWS S3.


[TOC]


Configuration
=============

Accepts following parameters:


- AWS access key ID `aws_access_key_id` 
- AWS secret access key `#aws_secret_access_key`
- Input file format `format` (values `metadata` or `pricehistory`)
- Target AWS bucket `aws_bucket`
- AWS directory name `aws_directory` (only if needed)

Kazda vstupni tabulka musi obsahovat sloupce `shop_id` a `slug`.

### Price History

**Konfigurace - příklad**

```json
{
  "storage": {
    "input": {
          "files": []
    }
  },
  "parameters": {
    "format": "pricehistory",
    "aws_access_key_id": "[REDACTED]",
    "#aws_secret_access_key": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    "aws_bucket": "keboola-test",
    "aws_directory": "s3_test/ingest/"
  },
  "action":"run",
  "authorization": {}
}
```

Ocekava tabulku se sloupci `shop_id`, `slug` a `json`

JSON string ve sloupci `json` se ulozi podle nasledujici masky:
`$shop.tld$/$slug$/price-history.json`

### Metadata

**Konfigurace**

```json
{
  "storage": {
    "input": {
          "files": []
    }
  },
  "parameters": {
    "format": "metadata",
    "aws_access_key_id": "[REDACTED]",
    "#aws_secret_access_key": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    "aws_bucket": "keboola-test",
    "aws_directory": "s3_test/ingest/"
  },
  "action":"run",
  "authorization": {}
}
```

Ocekava tabulku minimanlne se sloupci `shop_id`, `slug`.

Ostatni sloupce se pouziji jako JSON atributy. Vysledek se ulozi podle nasledujici masky:
`$shop.tld$/$slug$/metadata.json`

# Development

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in
the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone git@bitbucket.org:kds_consulting_team/kds-team.processor-json-generator-hlidac-shopu.git kds-team.processor-json-generator-hlidac-shopuk
cd kds-team.processor-json-generator-hlidac-shopuk
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)


================================================
File: Dockerfile
================================================
FROM python:3.11-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential zip

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
    mem_limit: 256m
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh
    mem_limit: 128m


================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
keboola.component==1.3.7
keboola.utils
https://bitbucket.org/kds_consulting_team/kds-team.processor-csv-to-json/get/0.5.1.zip#egg=csv2json
https://bitbucket.org/kds_consulting_team/datadirtest/get/1.5.1.zip#egg=datadirtest
mock~=4.0.3
freezegun~=1.2.2
boto3~=1.24.29
csv2json
botocore~=1.27.29
datadirtest

================================================
File: component_config/component_long_description.md
================================================
Json Generator (Hlidac Shopu) long description

================================================
File: component_config/component_short_description.md
================================================
Json Generator (Hlidac Shopu) short description

================================================
File: component_config/configRowSchema.json
================================================
{
  "type": "object",
  "title": "writer configuration",
  "properties": {}
}

================================================
File: component_config/configSchema.json
================================================
{
   "type": "object",
   "title": "writer configuration",
   "required": [
     "format",
     "aws_access_key_id",
     "#aws_secret_access_key",
     "aws_bucket"
   ],
   "properties": {
     "aws_access_key_id": {
       "type": "string",
       "title": "AWS access key ID",
       "description": "Make sure that this AWS Access Key ID has correct permissions.",
       "propertyOrder": 1
     },
     "#aws_secret_access_key": {
       "type": "string",
       "title": "AWS secret access key",
       "description": "The AWS Secret Access Key will be encrypted.",
       "propertyOrder": 2
     },
     "format": {
       "type": "string",
       "enum": [
         "pricehistory",
         "metadata"
       ],
       "title": "Input file format",
       "propertyOrder": 5
     },
     "aws_bucket": {
       "type": "string",
       "title": "Target AWS bucket",
       "description": "Name of the target AWS S3 bucket.",
       "default": "ingest.hlidacshopu.cz",
       "propertyOrder": 3
     },
     "aws_directory": {
       "type": "string",
       "title": "AWS directory name to store the files to, if needed.",
       "description": "If you want to store files in `files` subfolder, enter `files/` If you want to store files to AWS bucket root directory, leave empty.",
       "default": "ingest/",
       "propertyOrder": 4
     },
     "field_datatypes": {
       "type": "array",
       "format": "table",
       "title": "Output columns mapping",
       "description": "Only applied if Input file format is set to metadata.",
       "uniqueItems": true,
       "items": {
         "type": "object",
         "title": "item",
         "properties": {
           "column": {
             "type": "string"
           },
           "type": {
             "type": "string"
           }
         }
       },
       "options": {
         "dependencies": {
           "format": "metadata"
         }
       },
       "propertyOrder": 6
     },
     "override_default_values": {
       "type": "boolean",
       "format": "checkbox",
       "title": "Override default values",
       "description": "If set to false, component uses hardcoded variables for aws_bucket and aws_directory.",
       "default": false,
       "propertyOrder": 7
     }
   }
 }

================================================
File: component_config/configuration_description.md
================================================
Configuration description.

================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "out.c-test.sample_training",
          "destination": "input.csv",
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ],
          "files": []
    }
  },
  "parameters": {
    "format": "pricehistory",
    "aws_access_key_id": "[REDACTED]",
    "#aws_secret_access_key": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    "aws_bucket": "keboola-test",
    "aws_directory": "s3_test/",
    "workers": 32
  },
  "action":"run",
  "authorization": {}
}


================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi

================================================
File: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"

================================================
File: src/component.py
================================================
"""
Template Component main class.

"""
import csv
import json
import logging
from typing import List
import os
import shutil
import io
import zipfile

from csv2json.hone_csv2json import Csv2JsonConverter
from keboola.component.base import ComponentBase
from keboola.component.dao import TableDefinition
from keboola.component.exceptions import UserException
from uploader.client import S3Writer

# configuration variables
KEY_FORMAT = 'format'
KEY_OVERRIDE = 'override_default_values'
AWS_SECRET_ACCESS_KEY = '#aws_secret_access_key'
AWS_ACCESS_KEY_ID = 'aws_access_key_id'
AWS_BUCKET = "aws_bucket"
S3_BUCKET_DIR = "aws_directory"

MAX_FILES_PER_ZIP = 200_000  # Maximum number of files per zip file


# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [AWS_SECRET_ACCESS_KEY,
                       AWS_ACCESS_KEY_ID,
                       AWS_BUCKET,
                       KEY_FORMAT]


class Component(ComponentBase):

    def __init__(self):
        super().__init__()
        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        params = self.configuration.parameters
        self.upload_processor = None
        self.target_paths = None
        self.local_paths = None

        if params.get(KEY_OVERRIDE, False):
            self.s3_bucket_dir = params.get(S3_BUCKET_DIR)
            self.aws_bucket = params.get(AWS_BUCKET)
            logging.info(f"Component will use overriden values from config: s3_bucket_dir: {self.s3_bucket_dir}, "
                         f"aws_bucket: {self.aws_bucket}")
        else:
            self.s3_bucket_dir = ""
            self.aws_bucket = "ingest.hlidacshopu.cz"
            logging.info(f"Component will use default values for config: s3_bucket_dir: {self.s3_bucket_dir}, "
                         f"aws_bucket: {self.aws_bucket}")

        # Access parameters in data/config_pricehistory.json
        if params.get(KEY_FORMAT):
            logging.info(f"Format setting is: {params.get(KEY_FORMAT)}")

        self.custom_mapping = [] if params.get("field_datatypes") is None else params.get("field_datatypes")

    def run(self):
        """
        Main execution code
        """

        input_tables = self.get_input_tables_definitions()

        self.upload_processor = S3Writer(self.configuration.parameters, self.files_out_path,
                                         aws_bucket=self.aws_bucket)

        if not self.upload_processor.test_connection_ok():
            logging.error("Connection check failed. Connection is not possible or your account does not have "
                          "READ_ACP rights.")

        for table in input_tables:
            _format = self.configuration.parameters[KEY_FORMAT]
            logging.info(f"Processing table {table.name} using format: {_format}")
            if _format == 'pricehistory':
                self._generate_price_history(table)
            elif _format == 'metadata':
                self._generate_metadata(table)
            else:
                raise UserException(f"Wrong parameter in data/config_pricehistory.json {_format}. "
                                    "Viable parameters are: pricehistory/metadata")

        self.output_folder_cleanup()
        logging.info(f"Parsing finished successfully. "
                     f"Component processed {self.upload_processor.sent_files_counter} files.")

    @staticmethod
    def _validate_expected_columns(table_type, table: TableDefinition, expected_columns: List[str]):
        errors = []
        for c in expected_columns:
            if c not in table.columns:
                errors.append(c)

        if errors:
            error = f'Some required columns are missing for format {table_type}. ' \
                    f'Missing columns: [{"; ".join(errors)}] '
            raise UserException(error)

    def output_folder_cleanup(self) -> None:
        dir_to_clean = self.files_out_path
        for files in os.listdir(dir_to_clean):
            path = os.path.join(dir_to_clean, files)
            try:
                shutil.rmtree(path)
            except OSError:
                os.remove(path)

    @staticmethod
    def _write_json_content_to_zip(zip_file, file_path, content):
        with io.BytesIO() as file_buffer:
            # Write JSON content to the in-memory file buffer
            json_str = json.dumps(content, ensure_ascii=False)
            file_buffer.write(json_str.encode('utf-8'))
            file_buffer.seek(0)

            # Add the in-memory file to the zip file
            zip_file.writestr(file_path, file_buffer.getvalue())

    def _generate_price_history(self, table: TableDefinition):
        expected_columns = ['shop_id', 'slug', 'json']
        self._validate_expected_columns('pricehistory', table, expected_columns)

        # Create a dictionary to store the zip files by shop_id
        zip_files = {}

        logging.info("Writing json content.")
        file_count = 0
        zip_nr_suffix = 1
        for row in self.read_csv_file(table.full_path):
            shop_id = row["shop_id"]

            if shop_id not in zip_files:
                # Define the suffix for the zip file
                suffix = "_pricehistory_1"
                zip_filename = os.path.join(self.files_out_path, f'{shop_id}{suffix}.zip')
                zip_files[shop_id] = zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED)
                file_count = 0

            # Remove the top-level folder by excluding the `{row["shop_id"]}` part
            file_path = f'items/{row["shop_id"]}/{row["slug"]}/price-history.json'
            content = json.loads(row['json'])
            self._write_json_content_to_zip(zip_files[shop_id], file_path, content)

            file_count += 1
            if file_count >= MAX_FILES_PER_ZIP:
                # Close the current zip file and create a new one
                zip_files[shop_id].close()
                suffix = f"_pricehistory_{zip_nr_suffix}"
                zip_filename = os.path.join(self.files_out_path, f'{shop_id}{suffix}.zip')
                zip_files[shop_id] = zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED)
                file_count = 0
                zip_nr_suffix += 1

        # Close the zip files
        for zip_file in zip_files.values():
            zip_file.close()

        logging.info("Uploading files.")
        self._send_data(table)

    def _generate_metadata(self, table: TableDefinition):
        expected_columns = ['slug', 'shop_id']
        self._validate_expected_columns('metadata', table, expected_columns)

        # Create a dictionary to store the zip files by shop_id
        zip_files = {}

        logging.info("Writing metadata json content.")
        file_count = 0
        zip_nr_suffix = 1
        with open(table.full_path, 'r') as inp:
            reader = csv.DictReader(inp)
            for row in reader:
                shop_id = row["shop_id"]

                if shop_id not in zip_files:
                    # Define the suffix for the zip file
                    suffix = "_metadata_1"
                    zip_filename = os.path.join(self.files_out_path, f'{shop_id}{suffix}.zip')
                    zip_files[shop_id] = zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED)
                    file_count = 0

                # Remove the top-level folder by excluding the `{row["shop_id"]}` part
                file_path = f'items/{row["shop_id"]}/{row["slug"]}/meta.json'
                for c in expected_columns:
                    row.pop(c, None)
                content = self._generate_metadata_content(list(row.keys()), list(row.values()))

                self._write_json_content_to_zip(zip_files[shop_id], file_path, content[0])

                file_count += 1
                if file_count >= MAX_FILES_PER_ZIP:
                    # Close the current zip file and create a new one
                    zip_files[shop_id].close()
                    suffix = f"_metadata_{zip_nr_suffix}"
                    zip_filename = os.path.join(self.files_out_path, f'{shop_id}{suffix}.zip')
                    zip_files[shop_id] = zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED)
                    file_count = 0
                    zip_nr_suffix += 1

        # Close the zip files
        for zip_file in zip_files.values():
            zip_file.close()

        logging.info("Uploading files.")
        self._send_data(table)

    def __generate_price_history(self, table: TableDefinition):
        expected_columns = ['shop_id', 'slug', 'json']
        self._validate_expected_columns('pricehistory', table, expected_columns)

        # Create a dictionary to store the zip files by shop_id
        zip_files = {}
        saved_files = 0

        logging.info("Writing json content.")
        for row in self.read_csv_file(table.full_path):
            shop_id = row["shop_id"]

            if shop_id not in zip_files:
                # Create the zip file with the desired filename
                suffix = "_pricehistory"
                zip_filename = os.path.join(self.files_out_path, f'{shop_id}{suffix}.zip')
                zip_files[shop_id] = zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED)

            # Remove the top-level folder by excluding the `{row["shop_id"]}` part
            file_path = f'items/{row["shop_id"]}/{row["slug"]}/price-history.json'
            content = json.loads(row['json'])
            self._write_json_content_to_zip(zip_files[shop_id], file_path, content)
            saved_files += 1

        # Close the zip files
        for zip_file in zip_files.values():
            zip_file.close()

        logging.info(f"Saved {saved_files} files.")
        logging.info("Uploading files.")
        self._send_data(table)

    def __generate_metadata(self, table: TableDefinition):
        expected_columns = ['slug', 'shop_id']
        self._validate_expected_columns('metadata', table, expected_columns)

        # Create a dictionary to store the zip files by shop_id
        zip_files = {}

        logging.info("Writing metadata json content.")
        with open(table.full_path, 'r') as inp:
            reader = csv.DictReader(inp)
            for row in reader:
                shop_id = row["shop_id"]

                if shop_id not in zip_files:
                    # Create the zip file with the desired filename
                    suffix = "_metadata"
                    zip_filename = os.path.join(self.files_out_path, f'{shop_id}{suffix}.zip')
                    zip_files[shop_id] = zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED)

                # Remove the top-level folder by excluding the `{row["shop_id"]}` part
                file_path = f'items/{row["shop_id"]}/{row["slug"]}/meta.json'
                for c in expected_columns:
                    row.pop(c, None)
                content = self._generate_metadata_content(list(row.keys()), list(row.values()))

                self._write_json_content_to_zip(zip_files[shop_id], file_path, content[0])

        # Close the zip files
        for zip_file in zip_files.values():
            zip_file.close()

        logging.info("Uploading files.")
        self._send_data(table)

    def _generate_metadata_content(self, columns, row: List[str]):
        converter = Csv2JsonConverter(headers=columns, delimiter='__')
        return converter.convert_row(row, coltypes=self.custom_mapping, delimit="__", infer_undefined=True)

    def _send_data(self, table):
        """
        Sends data to S3 and cleans the output folder.
        """
        logging.info(f"Uploading data for table {table.name} to S3")
        # CREATE LIST OF FILES IN OUTPUT FOLDER
        self.local_paths, self.target_paths = self.upload_processor.prepare_lists_of_files(
            self.files_out_path,
            self.s3_bucket_dir)
        # SEND FILES TO TARGET DIR IN S3
        self.upload_processor.process_upload(self.local_paths, self.target_paths)

    @staticmethod
    def read_csv_file(file_path):
        with open(file_path, 'r', encoding='utf-8') as inp:
            reader = csv.DictReader(inp)
            for row in reader:
                yield row


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: src/uploader/client.py
================================================
import logging
import boto3
import os

# configuration variables
KEY_FORMAT = 'format'
AWS_SECRET_ACCESS_KEY = '#aws_secret_access_key'
AWS_ACCESS_KEY_ID = 'aws_access_key_id'
WORKERS = "workers"
S3_BUCKET_DIR = "aws_directory"


class S3Writer:
    """
    This class handles the logic to upload files to AWS S3.
    """

    def __init__(self, params, data_path, aws_bucket):
        super().__init__()
        self.aws_bucket = aws_bucket
        self.data_path = data_path
        self.client = self.get_client_from_session(params)
        self.sent_files_counter = 0

    def process_upload(self, local_paths, target_paths):
        """
        Uploads files to S3 storage.

        Returns: None
        """
        for file_to_upload, target_path in zip(local_paths, target_paths):
            self.upload_one_file(self.aws_bucket, self.client, file_to_upload, target_path)

    @staticmethod
    def get_client_from_session(params) -> boto3.Session.client:
        """
        Creates and returns boto3 client class.

        Args:
            params: Keboola json configuration parameters

        Returns:
            boto3 client class

        """
        session = boto3.Session(
            aws_access_key_id=params.get(AWS_ACCESS_KEY_ID),
            aws_secret_access_key=params.get(AWS_SECRET_ACCESS_KEY)
        )
        return session.client('s3')

    def test_connection_ok(self) -> bool:
        try:
            self.client.head_bucket(Bucket=self.aws_bucket)
            logging.info("S3 Connection successful.")
            return True
        except Exception as e:
            logging.warning(e)
            return False

    @staticmethod
    def prepare_lists_of_files(in_dir, out_dir):
        """
        Creates and populates lists with local paths to files and target paths

        Returns:
            Two lists representing files that will be sent and their destination

        Args:
            in_dir: input directory
            out_dir: target S3 folder
        """

        _local_paths, _target_paths = [], []
        for root, dirs, files in os.walk(in_dir):
            for name in files:
                _local_paths.append(os.path.join(root, name))
                _target_paths.append(out_dir + os.path.join(root, name).replace(in_dir, "")[1:])

        return _local_paths, _target_paths

    def upload_one_file(self, bucket: str, client: boto3.client, local_file: str, target_path: str) -> None:
        """
        Download a single file from S3
        Args:
            bucket (str): S3 bucket where images are hosted
            target_path (str): S3 dir to store the file to
            client (boto3.client): S3 client
            local_file (str): S3 file name
        """
        client.upload_file(
            local_file, bucket, target_path
        )
        self.sent_files_counter += 1


================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        pass
        # with self.assertRaises(ValueError):
            # comp = Component()
            # comp.run()

if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: tests/test_functional.py
================================================
import unittest

from datadirtest import DataDirTester


class TestComponent(unittest.TestCase):

    def test_functional(self):
        # functional_tests = DataDirTester()
        # functional_tests.run()
        pass

if __name__ == "__main__":
    unittest.main()


================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/173052/meta.json
================================================
{"parsedUrl": 173052, "itemId": 173052, "itemName": "Xerox alternativn\u00ed pro OKI 44064011, drum unit cyan", "itemImage": "https://iczc.cz/b8bdo47v4mitj99v76dfsq6i2f-0/obrazek", "commonPrice": null, "minPrice": null, "pkey": "czc_cz:173052", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/203596/meta.json
================================================
{"parsedUrl": 203596, "itemId": 203596, "itemName": "iGET HOMEGUARD HGWIP720 - bezdr\u00e1tov\u00e1 rota\u010dn\u00ed IP HD kamera s PIR detekc\u00ed", "itemImage": "https://iczc.cz/96mae79j6uhtibe3pkmu7529q8_1/obrazek", "commonPrice": null, "minPrice": null, "pkey": "czc_cz:203596", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/206764/meta.json
================================================
{"parsedUrl": 206764, "itemId": 206764, "itemName": "WENGER RESOLUTION - 13\" obal na Macbook, \u010dern\u00fd", "itemImage": "https://iczc.cz/9pkfrulkj2hs69so59mc08murg-0/obrazek", "commonPrice": null, "minPrice": null, "pkey": "czc_cz:206764", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/238261/meta.json
================================================
{"parsedUrl": 238261, "itemId": 238261, "itemName": "Rowkin Bit Charge Stereo, zlat\u00e1", "itemImage": "https://iczc.cz/3e03nmpte8i419rblanbu3ru6a_7/obrazek", "commonPrice": 2040.0, "minPrice": 2040.0, "pkey": "czc_cz:238261", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/238955/meta.json
================================================
{"parsedUrl": 238955, "itemId": 238955, "itemName": "CELLY Gelskin TPU pouzdro pro Samsung Galaxy A6+ (2018), bezbarv\u00e9", "itemImage": "https://iczc.cz/2km1qc435qiju9kf5gfnf0je0e_1/obrazek", "commonPrice": null, "minPrice": null, "pkey": "czc_cz:238955", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/242693/meta.json
================================================
{"parsedUrl": 242693, "itemId": 242693, "itemName": "Acer Aspire 3 (A315-51-35GX), \u010dern\u00e1", "itemImage": "https://iczc.cz/b8k4o3vomsijd8u5jh2vhtdpc2_1/obrazek", "commonPrice": null, "minPrice": null, "pkey": "czc_cz:242693", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/242738/meta.json
================================================
{"parsedUrl": 242738, "itemId": 242738, "itemName": "Lenovo V330-14IKB, \u0161ed\u00e1", "itemImage": "https://iczc.cz/1310pisi86gtjb7a9n4sa8i4gd-4_1/obrazek", "commonPrice": null, "minPrice": null, "pkey": "czc_cz:242738", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/244495/meta.json
================================================
{"parsedUrl": 244495, "itemId": 244495, "itemName": "Mikrotik RB4011iGS+RM", "itemImage": "https://iczc.cz/b48sdl9oa6h4jbl6qm76bj9kh6_7/obrazek", "commonPrice": 5189.0, "minPrice": null, "pkey": "czc_cz:244495", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/297902/meta.json
================================================
{"parsedUrl": 297902, "itemId": 297902, "itemName": "Lenovo ThinkBook 15-IIL, \u0161ed\u00e1", "itemImage": "https://iczc.cz/c1t3eeo67ugi3bojvarvkaeq6a_7/obrazek", "commonPrice": 19990.0, "minPrice": 19990.0, "pkey": "czc_cz:297902", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/310778/meta.json
================================================
{"parsedUrl": 310778, "itemId": 310778, "itemName": "Fortron Champ TW 6K, 6000VA/5400W", "itemImage": "https://iczc.cz/5ghi3lvcvggmi9338lrdafd6d5_7/obrazek", "commonPrice": 22355.0, "minPrice": 22306.0, "pkey": "czc_cz:310778", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/311157/meta.json
================================================
{"parsedUrl": 311157, "itemId": 311157, "itemName": "Motorola Moto G30, 6GB/128GB, Dark Pearl", "itemImage": "https://iczc.cz/6hg1fceifaj2ka1g2f2kpjg1ne_7/obrazek", "commonPrice": 4690.0, "minPrice": null, "pkey": "czc_cz:311157", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/323297/meta.json
================================================
{"parsedUrl": 323297, "itemId": 323297, "itemName": "Dell Inspiron 14 (5410), st\u0159\u00edbrn\u00e1", "itemImage": "https://iczc.cz/01po69kuncj4d8en5hsaecokf8-1_1/obrazek", "commonPrice": null, "minPrice": null, "pkey": "czc_cz:323297", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/323699/meta.json
================================================
{"parsedUrl": 323699, "itemId": 323699, "itemName": "Arlo Ultra sol\u00e1rn\u00ed panel", "itemImage": "https://iczc.cz/73ao3v9hu4g3t90au2cvancmve_7/obrazek", "commonPrice": 1964.0, "minPrice": 1964.0, "pkey": "czc_cz:323699", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/333745/meta.json
================================================
{"parsedUrl": 333745, "itemId": 333745, "itemName": "Apple Watch Nike SE Cellular 44mm Silver, Pure Platinum/Black Nike Sport Band", "itemImage": "https://iczc.cz/2pvhfonq3gjh7b67e2l3csa8tb_7/obrazek", "commonPrice": 10190.0, "minPrice": null, "pkey": "czc_cz:333745", "": null}

================================================
File: tests/functional/metadata/expected/data/out/files/czc_cz/47017/meta.json
================================================
{"parsedUrl": 47017, "itemId": 47017, "itemName": "Epson C13T054740, \u010derven\u00e1", "itemImage": "https://iczc.cz/cv53besnksh1o9ak7bko15k4re_7/obrazek", "commonPrice": 514.0, "minPrice": null, "pkey": "czc_cz:47017", "": null}

================================================
File: tests/functional/metadata/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "out.c-test.sample_training",
          "destination": "input.csv",
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ],
          "files": []
    }
  },
  "parameters": {
    "format": "pricehistory",
    "aws_access_key_id": "[REDACTED]",
    "#aws_secret_access_key": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    "aws_bucket": "keboola-test",
    "aws_directory": "s3_test/",
    "workers": 32
  },
  "action":"run",
  "authorization": {}
}


================================================
File: tests/functional/metadata/source/data/in/tables/out.c_0_czc.csv
================================================
shop_id,slug,parsedUrl,itemId,itemName,itemImage,commonPrice,minPrice,pkey,,
czc_cz,311157,311157,311157,"Motorola Moto G30, 6GB/128GB, Dark Pearl",https://iczc.cz/6hg1fceifaj2ka1g2f2kpjg1ne_7/obrazek,4690.00,null,czc_cz:311157,,
czc_cz,238261,238261,238261,"Rowkin Bit Charge Stereo, zlatá",https://iczc.cz/3e03nmpte8i419rblanbu3ru6a_7/obrazek,2040.00,2040.00,czc_cz:238261,,
czc_cz,173052,173052,173052,"Xerox alternativní pro OKI 44064011, drum unit cyan",https://iczc.cz/b8bdo47v4mitj99v76dfsq6i2f-0/obrazek,null,null,czc_cz:173052,,
czc_cz,203596,203596,203596,"iGET HOMEGUARD HGWIP720 - bezdrátová rotační IP HD kamera s PIR detekcí",https://iczc.cz/96mae79j6uhtibe3pkmu7529q8_1/obrazek,null,null,czc_cz:203596,,
czc_cz,47017,47017,47017,"Epson C13T054740, červená",https://iczc.cz/cv53besnksh1o9ak7bko15k4re_7/obrazek,514.00,null,czc_cz:47017,,
czc_cz,242693,242693,242693,"Acer Aspire 3 (A315-51-35GX), černá",https://iczc.cz/b8k4o3vomsijd8u5jh2vhtdpc2_1/obrazek,null,null,czc_cz:242693,,
czc_cz,297902,297902,297902,"Lenovo ThinkBook 15-IIL, šedá",https://iczc.cz/c1t3eeo67ugi3bojvarvkaeq6a_7/obrazek,19990.00,19990.00,czc_cz:297902,,
czc_cz,238955,238955,238955,"CELLY Gelskin TPU pouzdro pro Samsung Galaxy A6+ (2018), bezbarvé",https://iczc.cz/2km1qc435qiju9kf5gfnf0je0e_1/obrazek,null,null,czc_cz:238955,,
czc_cz,206764,206764,206764,"WENGER RESOLUTION - 13"" obal na Macbook, černý",https://iczc.cz/9pkfrulkj2hs69so59mc08murg-0/obrazek,null,null,czc_cz:206764,,
czc_cz,333745,333745,333745,"Apple Watch Nike SE Cellular 44mm Silver, Pure Platinum/Black Nike Sport Band",https://iczc.cz/2pvhfonq3gjh7b67e2l3csa8tb_7/obrazek,10190.00,null,czc_cz:333745,,
czc_cz,242738,242738,242738,"Lenovo V330-14IKB, šedá",https://iczc.cz/1310pisi86gtjb7a9n4sa8i4gd-4_1/obrazek,null,null,czc_cz:242738,,
czc_cz,310778,310778,310778,"Fortron Champ TW 6K, 6000VA/5400W",https://iczc.cz/5ghi3lvcvggmi9338lrdafd6d5_7/obrazek,22355.00,22306.00,czc_cz:310778,,
czc_cz,323297,323297,323297,"Dell Inspiron 14 (5410), stříbrná",https://iczc.cz/01po69kuncj4d8en5hsaecokf8-1_1/obrazek,null,null,czc_cz:323297,,
czc_cz,323699,323699,323699,"Arlo Ultra solární panel",https://iczc.cz/73ao3v9hu4g3t90au2cvancmve_7/obrazek,1964.00,1964.00,czc_cz:323699,,
czc_cz,244495,244495,244495,"Mikrotik RB4011iGS+RM",https://iczc.cz/b48sdl9oa6h4jbl6qm76bj9kh6_7/obrazek,5189.00,null,czc_cz:244495,,

================================================
File: tests/functional/metadata/source/data/in/tables/out.c_0_czc.csv.manifest
================================================
{"columns":[
"shop_id",
"slug",
"itemUrl",
"parsedUrl",
"itemId",
"itemName",
"itemImage",
"commonPrice",
"minPrice",
"pkey"]
}

================================================
File: tests/functional/price-history/expected/data/out/files/czc.cz/181163/price-history.json
================================================
[{"c": "3149", "d": "2020-05-20", "o": null}]

================================================
File: tests/functional/price-history/expected/data/out/files/czc.cz/243828/price-history.json
================================================
[{"c": "399", "d": "2018-09-04", "o": null}, {"c": "399", "d": "2018-09-05", "o": null}, {"c": null, "d": "2018-10-15", "o": null}, {"c": "399", "d": "2018-10-16", "o": null}, {"c": null, "d": "2018-10-18", "o": null}, {"c": "399", "d": "2018-10-30", "o": null}, {"c": null, "d": "2018-11-24", "o": null}, {"c": "399", "d": "2018-11-25", "o": null}, {"c": null, "d": "2018-12-03", "o": null}, {"c": "399", "d": "2018-12-04", "o": null}, {"c": null, "d": "2018-12-09", "o": null}, {"c": "399", "d": "2018-12-10", "o": null}, {"c": null, "d": "2019-01-05", "o": null}, {"c": "399", "d": "2019-01-06", "o": null}, {"c": null, "d": "2019-01-17", "o": null}, {"c": "399", "d": "2019-01-18", "o": null}, {"c": null, "d": "2019-01-30", "o": null}, {"c": "399", "d": "2019-02-02", "o": null}, {"c": null, "d": "2019-02-03", "o": null}, {"c": "399", "d": "2019-02-05", "o": null}, {"c": null, "d": "2019-02-18", "o": null}, {"c": "399", "d": "2019-02-19", "o": null}, {"c": null, "d": "2019-02-22", "o": null}, {"c": "399", "d": "2019-02-23", "o": null}, {"c": null, "d": "2019-02-28", "o": null}, {"c": "399", "d": "2019-03-01", "o": null}, {"c": null, "d": "2019-03-05", "o": null}, {"c": "399", "d": "2019-03-06", "o": null}, {"c": null, "d": "2019-03-07", "o": null}, {"c": "399", "d": "2019-03-08", "o": null}, {"c": null, "d": "2019-03-18", "o": null}, {"c": "399", "d": "2019-03-20", "o": null}, {"c": null, "d": "2019-04-09", "o": null}, {"c": "399", "d": "2019-04-10", "o": null}, {"c": null, "d": "2019-04-12", "o": null}, {"c": "399", "d": "2019-04-13", "o": null}, {"c": null, "d": "2019-04-15", "o": null}, {"c": "399", "d": "2019-04-16", "o": null}, {"c": null, "d": "2019-04-19", "o": null}, {"c": "399", "d": "2019-04-20", "o": null}, {"c": null, "d": "2019-04-25", "o": null}, {"c": "399", "d": "2019-04-26", "o": null}, {"c": null, "d": "2019-05-12", "o": null}, {"c": "399", "d": "2019-05-13", "o": null}, {"c": null, "d": "2019-05-15", "o": null}, {"c": "399", "d": "2019-05-16", "o": null}, {"c": null, "d": "2019-05-20", "o": null}, {"c": "399", "d": "2019-05-22", "o": null}, {"c": null, "d": "2019-05-23", "o": null}, {"c": "399", "d": "2019-05-24", "o": null}, {"c": null, "d": "2019-05-28", "o": null}, {"c": "399", "d": "2019-05-29", "o": null}, {"c": null, "d": "2019-05-30", "o": null}, {"c": "399", "d": "2019-06-01", "o": null}, {"c": null, "d": "2019-06-20", "o": null}, {"c": "399", "d": "2019-06-21", "o": null}, {"c": null, "d": "2019-07-01", "o": null}, {"c": "399", "d": "2019-07-02", "o": null}, {"c": "299", "d": "2019-07-04", "o": "399"}, {"c": "299", "d": "2019-07-05", "o": "399"}, {"c": null, "d": "2019-07-09", "o": null}, {"c": "299", "d": "2019-07-10", "o": "399"}, {"c": null, "d": "2019-07-11", "o": null}, {"c": "299", "d": "2019-07-13", "o": "399"}, {"c": null, "d": "2019-07-14", "o": null}, {"c": "299", "d": "2019-07-15", "o": "399"}, {"c": null, "d": "2019-07-17", "o": null}, {"c": "299", "d": "2019-07-18", "o": "399"}, {"c": "399", "d": "2019-07-23", "o": null}, {"c": "399", "d": "2019-07-24", "o": null}, {"c": null, "d": "2019-12-17", "o": null}, {"c": "399", "d": "2019-12-18", "o": null}, {"c": null, "d": "2020-05-21", "o": null}, {"c": "399", "d": "2020-05-22", "o": null}, {"c": "299", "d": "2020-07-02", "o": "399"}, {"c": "299", "d": "2020-07-03", "o": "399"}, {"c": "399", "d": "2020-07-14", "o": null}, {"c": "399", "d": "2020-07-15", "o": null}, {"c": "399", "d": "2020-09-18", "o": null}]

================================================
File: tests/functional/price-history/expected/data/out/files/czc.cz/282225/price-history.json
================================================
[{"c": "599", "d": "2020-03-04", "o": null}, {"c": "599", "d": "2020-03-05", "o": null}, {"c": null, "d": "2020-05-01", "o": null}, {"c": "599", "d": "2020-05-03", "o": null}, {"c": null, "d": "2020-05-21", "o": null}, {"c": "599", "d": "2020-05-22", "o": null}, {"c": "419", "d": "2020-07-10", "o": "599"}, {"c": "419", "d": "2020-07-11", "o": "599"}, {"c": "398", "d": "2020-07-29", "o": "599"}, {"c": "398", "d": "2020-07-30", "o": "599"}, {"c": "449", "d": "2020-07-31", "o": "599"}, {"c": "449", "d": "2020-08-01", "o": "599"}, {"c": "377", "d": "2020-08-21", "o": "599"}, {"c": "377", "d": "2020-08-22", "o": "599"}, {"c": "359", "d": "2020-09-16", "o": "599"}, {"c": "359", "d": "2020-09-17", "o": "599"}, {"c": "341", "d": "2020-10-01", "o": "599"}, {"c": "341", "d": "2020-10-02", "o": "599"}, {"c": "324", "d": "2020-10-20", "o": "599"}, {"c": "324", "d": "2020-10-21", "o": "599"}, {"c": "324", "d": "2020-11-05", "o": "599"}]

================================================
File: tests/functional/price-history/source/data/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [
        {
          "source": "out.c-test.sample_training",
          "destination": "input.csv",
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ],
          "files": []
    }
  },
  "parameters": {
    "format": "pricehistory",
    "aws_access_key_id": "[REDACTED]",
    "#aws_secret_access_key": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    "aws_bucket": "keboola-test",
    "aws_directory": "s3_test/",
    "workers": 32
  },
  "action":"run",
  "authorization": {}
}


================================================
File: tests/functional/price-history/source/data/in/tables/out.c_0_czc.csv
================================================
"shop_id","slug","json"
"czc.cz","243828","[{""c"":""399"",""d"":""2018-09-04"",""o"":null},{""c"":""399"",""d"":""2018-09-05"",""o"":null},{""c"":null,""d"":""2018-10-15"",""o"":null},{""c"":""399"",""d"":""2018-10-16"",""o"":null},{""c"":null,""d"":""2018-10-18"",""o"":null},{""c"":""399"",""d"":""2018-10-30"",""o"":null},{""c"":null,""d"":""2018-11-24"",""o"":null},{""c"":""399"",""d"":""2018-11-25"",""o"":null},{""c"":null,""d"":""2018-12-03"",""o"":null},{""c"":""399"",""d"":""2018-12-04"",""o"":null},{""c"":null,""d"":""2018-12-09"",""o"":null},{""c"":""399"",""d"":""2018-12-10"",""o"":null},{""c"":null,""d"":""2019-01-05"",""o"":null},{""c"":""399"",""d"":""2019-01-06"",""o"":null},{""c"":null,""d"":""2019-01-17"",""o"":null},{""c"":""399"",""d"":""2019-01-18"",""o"":null},{""c"":null,""d"":""2019-01-30"",""o"":null},{""c"":""399"",""d"":""2019-02-02"",""o"":null},{""c"":null,""d"":""2019-02-03"",""o"":null},{""c"":""399"",""d"":""2019-02-05"",""o"":null},{""c"":null,""d"":""2019-02-18"",""o"":null},{""c"":""399"",""d"":""2019-02-19"",""o"":null},{""c"":null,""d"":""2019-02-22"",""o"":null},{""c"":""399"",""d"":""2019-02-23"",""o"":null},{""c"":null,""d"":""2019-02-28"",""o"":null},{""c"":""399"",""d"":""2019-03-01"",""o"":null},{""c"":null,""d"":""2019-03-05"",""o"":null},{""c"":""399"",""d"":""2019-03-06"",""o"":null},{""c"":null,""d"":""2019-03-07"",""o"":null},{""c"":""399"",""d"":""2019-03-08"",""o"":null},{""c"":null,""d"":""2019-03-18"",""o"":null},{""c"":""399"",""d"":""2019-03-20"",""o"":null},{""c"":null,""d"":""2019-04-09"",""o"":null},{""c"":""399"",""d"":""2019-04-10"",""o"":null},{""c"":null,""d"":""2019-04-12"",""o"":null},{""c"":""399"",""d"":""2019-04-13"",""o"":null},{""c"":null,""d"":""2019-04-15"",""o"":null},{""c"":""399"",""d"":""2019-04-16"",""o"":null},{""c"":null,""d"":""2019-04-19"",""o"":null},{""c"":""399"",""d"":""2019-04-20"",""o"":null},{""c"":null,""d"":""2019-04-25"",""o"":null},{""c"":""399"",""d"":""2019-04-26"",""o"":null},{""c"":null,""d"":""2019-05-12"",""o"":null},{""c"":""399"",""d"":""2019-05-13"",""o"":null},{""c"":null,""d"":""2019-05-15"",""o"":null},{""c"":""399"",""d"":""2019-05-16"",""o"":null},{""c"":null,""d"":""2019-05-20"",""o"":null},{""c"":""399"",""d"":""2019-05-22"",""o"":null},{""c"":null,""d"":""2019-05-23"",""o"":null},{""c"":""399"",""d"":""2019-05-24"",""o"":null},{""c"":null,""d"":""2019-05-28"",""o"":null},{""c"":""399"",""d"":""2019-05-29"",""o"":null},{""c"":null,""d"":""2019-05-30"",""o"":null},{""c"":""399"",""d"":""2019-06-01"",""o"":null},{""c"":null,""d"":""2019-06-20"",""o"":null},{""c"":""399"",""d"":""2019-06-21"",""o"":null},{""c"":null,""d"":""2019-07-01"",""o"":null},{""c"":""399"",""d"":""2019-07-02"",""o"":null},{""c"":""299"",""d"":""2019-07-04"",""o"":""399""},{""c"":""299"",""d"":""2019-07-05"",""o"":""399""},{""c"":null,""d"":""2019-07-09"",""o"":null},{""c"":""299"",""d"":""2019-07-10"",""o"":""399""},{""c"":null,""d"":""2019-07-11"",""o"":null},{""c"":""299"",""d"":""2019-07-13"",""o"":""399""},{""c"":null,""d"":""2019-07-14"",""o"":null},{""c"":""299"",""d"":""2019-07-15"",""o"":""399""},{""c"":null,""d"":""2019-07-17"",""o"":null},{""c"":""299"",""d"":""2019-07-18"",""o"":""399""},{""c"":""399"",""d"":""2019-07-23"",""o"":null},{""c"":""399"",""d"":""2019-07-24"",""o"":null},{""c"":null,""d"":""2019-12-17"",""o"":null},{""c"":""399"",""d"":""2019-12-18"",""o"":null},{""c"":null,""d"":""2020-05-21"",""o"":null},{""c"":""399"",""d"":""2020-05-22"",""o"":null},{""c"":""299"",""d"":""2020-07-02"",""o"":""399""},{""c"":""299"",""d"":""2020-07-03"",""o"":""399""},{""c"":""399"",""d"":""2020-07-14"",""o"":null},{""c"":""399"",""d"":""2020-07-15"",""o"":null},{""c"":""399"",""d"":""2020-09-18"",""o"":null}]"
"czc.cz","181163","[{""c"":""3149"",""d"":""2020-05-20"",""o"":null}]"
"czc.cz","282225","[{""c"":""599"",""d"":""2020-03-04"",""o"":null},{""c"":""599"",""d"":""2020-03-05"",""o"":null},{""c"":null,""d"":""2020-05-01"",""o"":null},{""c"":""599"",""d"":""2020-05-03"",""o"":null},{""c"":null,""d"":""2020-05-21"",""o"":null},{""c"":""599"",""d"":""2020-05-22"",""o"":null},{""c"":""419"",""d"":""2020-07-10"",""o"":""599""},{""c"":""419"",""d"":""2020-07-11"",""o"":""599""},{""c"":""398"",""d"":""2020-07-29"",""o"":""599""},{""c"":""398"",""d"":""2020-07-30"",""o"":""599""},{""c"":""449"",""d"":""2020-07-31"",""o"":""599""},{""c"":""449"",""d"":""2020-08-01"",""o"":""599""},{""c"":""377"",""d"":""2020-08-21"",""o"":""599""},{""c"":""377"",""d"":""2020-08-22"",""o"":""599""},{""c"":""359"",""d"":""2020-09-16"",""o"":""599""},{""c"":""359"",""d"":""2020-09-17"",""o"":""599""},{""c"":""341"",""d"":""2020-10-01"",""o"":""599""},{""c"":""341"",""d"":""2020-10-02"",""o"":""599""},{""c"":""324"",""d"":""2020-10-20"",""o"":""599""},{""c"":""324"",""d"":""2020-10-21"",""o"":""599""},{""c"":""324"",""d"":""2020-11-05"",""o"":""599""}]"

================================================
File: tests/functional/price-history/source/data/in/tables/out.c_0_czc.csv.manifest
================================================
{"columns":["shop_id","slug","json"]
}

================================================
File: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.wr-hlidac-shopu-s3" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

