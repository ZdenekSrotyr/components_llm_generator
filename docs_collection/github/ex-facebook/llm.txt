Directory structure:
└── keboola-ex-facebook/
    ├── README.md
    ├── Dockerfile
    ├── composer.json
    ├── docker-compose.yml
    ├── phpcs.xml
    ├── phpstan.neon
    ├── phpunit.xml.dist
    ├── .dockerignore
    ├── docker/
    │   ├── composer-install.sh
    │   └── php-prod.ini
    ├── src/
    │   ├── Component.php
    │   ├── Config.php
    │   ├── ConfigDefinition.php
    │   └── run.php
    ├── tests/
    │   ├── functional/
    │   │   ├── DatadirTest.php
    │   │   └── empty-app/
    │   │       ├── expected/
    │   │       │   └── data/
    │   │       │       └── out/
    │   │       │           ├── files/
    │   │       │           │   └── .gitkeep
    │   │       │           └── tables/
    │   │       │               └── .gitkeep
    │   │       └── source/
    │   │           └── data/
    │   │               └── config.json
    │   └── phpunit/
    │       └── bootstrap.php
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
# my-component

> Fill in description

# Usage

> fill in usage instructions

## Development
 
Clone this repository and init the workspace with following command:

```
git clone https://github.com/keboola/my-component
cd my-component
docker-compose build
docker-compose run --rm dev composer install --no-scripts
```

Run the test suite using this command:

```
docker-compose run --rm dev composer tests
```
 
# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
File: Dockerfile
================================================
FROM php:8-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update && apt-get install -y --no-install-recommends \
        git \
        locales \
        unzip \
	&& rm -r /var/lib/apt/lists/* \
	&& sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
	&& locale-gen \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/

# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD ["php", "/code/src/run.php"]


================================================
File: composer.json
================================================
{
    "name": "keboola/my-component",
    "description": "MyComponent description",
    "license": "MIT",
    "require": {
        "php": "^8.1",
        "keboola/php-component": "^9.0"
    },
    "require-dev": {
        "php-parallel-lint/php-parallel-lint": "^1.3",
        "keboola/coding-standard": ">=7.0.2",
        "keboola/datadir-tests": "^5.3",
        "keboola/php-temp": "^2.0",
        "phpstan/phpstan": "^1.4",
        "phpunit/phpunit": "^9.5",
        "symfony/process": "^5.0"
    },
    "autoload": {
        "psr-4": {
            "MyComponent\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "MyComponent\\Tests\\": "tests/phpunit/",
            "MyComponent\\FunctionalTests\\": "tests/functional/"
        }
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests-datadir": "phpunit tests/functional",
        "tests": [
            "@tests-phpunit",
            "@tests-datadir"
        ],

        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "build": [
            "@phplint",
            "@phpcs",
            "@phpstan",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true,
        "allow-plugins": {
            "dealerdirect/phpcodesniffer-composer-installer": true
        }
    }
}


================================================
File: docker-compose.yml
================================================
version: '3'
services:
  dev:
    build: .
    volumes:
      - ./:/code
      - ./data:/data


================================================
File: phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>


================================================
File: phpstan.neon
================================================
parameters:
    ignoreErrors:
        - '#Cannot call method end\(\) on Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface\|null.#'


================================================
File: phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         bootstrap="tests/phpunit/bootstrap.php">
    <testsuite name="Main Test Suite">
        <directory>tests/phpunit</directory>
    </testsuite>
</phpunit>


================================================
File: .dockerignore
================================================
vendor/


================================================
File: docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT


================================================
File: docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1


================================================
File: src/Component.php
================================================
<?php

declare(strict_types=1);

namespace MyComponent;

use Keboola\Component\BaseComponent;

class Component extends BaseComponent
{
    protected function run(): void
    {
        // @TODO implement
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        return ConfigDefinition::class;
    }
}


================================================
File: src/Config.php
================================================
<?php

declare(strict_types=1);

namespace MyComponent;

use Keboola\Component\Config\BaseConfig;

class Config extends BaseConfig
{
    // @todo implement your custom getters
    public function getFoo(): string
    {
        return $this->getStringValue(['parameters', 'foo']);
    }
}


================================================
File: src/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace MyComponent;

use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class ConfigDefinition extends BaseConfigDefinition
{
    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->children()
                ->scalarNode('foo')
                    ->defaultValue('baz')
                ->end()
            ->end()
        ;
        // @formatter:on
        return $parametersNode;
    }
}


================================================
File: src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\Component\Logger;
use Keboola\Component\UserException;
use MyComponent\Component;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
try {
    $app = new Component($logger);
    $app->execute();
    exit(0);
} catch (UserException $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (Throwable $e) {
    $logger->critical(
        get_class($e) . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => is_object($e->getPrevious()) ? get_class($e->getPrevious()) : '',
        ]
    );
    exit(2);
}


================================================
File: tests/functional/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace MyComponent\FunctionalTests;

use Keboola\DatadirTests\DatadirTestCase;

class DatadirTest extends DatadirTestCase
{
}


================================================
File: tests/functional/empty-app/source/data/config.json
================================================
{
}


================================================
File: tests/phpunit/bootstrap.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/../../vendor/autoload.php';


================================================
File: .github/workflows/push.yml
================================================
name: 'GitHub Actions'
'on':
    - push
concurrency: 'ci-${{ github.ref }}'
env:
    APP_IMAGE: keboola-component
    KBC_DEVELOPERPORTAL_VENDOR: keboola
    KBC_DEVELOPERPORTAL_APP: keboola.ex-facebook
    KBC_DEVELOPERPORTAL_USERNAME: keboola+facebook_extractor_github_actions_oj
    KBC_DEVELOPERPORTAL_PASSWORD: '${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}'
    DOCKERHUB_USER: 'keboolabot'
    DOCKERHUB_TOKEN: '${{ secrets.DOCKERHUB_TOKEN }}'
    KBC_STORAGE_TOKEN: '${{ secrets.KBC_STORAGE_TOKEN }}'
    KBC_TEST_PROJECT_URL: ''
    KBC_TEST_PROJECT_CONFIGS: ''
jobs:
    build:
        runs-on: ubuntu-latest
        outputs:
            app_image_tag: '${{ steps.tag.outputs.app_image_tag }}'
            is_semantic_tag: '${{ steps.tag.outputs.is_semantic_tag }}'
        steps:
            -
                name: 'Check out the repo'
                uses: actions/checkout@v3
            -
                name: 'Print Docker version'
                run: 'docker -v'
            -
                name: 'Docker login'
                if: env.DOCKERHUB_TOKEN
                run: 'docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"'
            -
                name: 'Build image'
                run: 'docker build -t $APP_IMAGE .'
            -
                name: 'Set image tag'
                id: tag
                run: |
                    TAG="${GITHUB_REF##*/}"
                    IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
                    echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
                    echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
                    echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
            -
                name: 'Push image to ECR'
                uses: keboola/action-push-to-ecr@master
                with:
                    vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
                    app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
                    username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
                    password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
                    tag: '${{ steps.tag.outputs.app_image_tag }}'
                    push_latest: '${{ steps.tag.outputs.is_semantic_tag }}'
                    source_image: '${{ env.APP_IMAGE}}'
    tests:
        needs: build
        runs-on: ubuntu-latest
        steps:
            -
                name: 'Check out the repo'
                uses: actions/checkout@v3
            -
                name: 'Pull image from ECR'
                uses: keboola/action-pull-from-ecr@master
                with:
                    vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
                    app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
                    username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
                    password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
                    tag: '${{ needs.build.outputs.app_image_tag }}'
                    target_image: '${{ env.APP_IMAGE}}'
                    tag_as_latest: true
            -
                name: 'Run tests'
                run: 'docker run ${{env.APP_IMAGE}} composer ci'
    tests-in-kbc:
        needs: build
        runs-on: ubuntu-latest
        steps:
            -
                name: 'Run KBC test jobs'
                if: 'env.KBC_STORAGE_TOKEN && env.KBC_TEST_PROJECT_CONFIGS'
                uses: keboola/action-run-configs-parallel@master
                with:
                    token: '${{ env.KBC_STORAGE_TOKEN }}'
                    componentId: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
                    tag: '${{ needs.build.outputs.app_image_tag }}'
                    configs: '${{ env.KBC_TEST_PROJECT_CONFIGS }}'
    deploy:
        needs:
            - build
            - tests
            - tests-in-kbc
        runs-on: ubuntu-latest
        if: 'startsWith(github.ref, ''refs/tags/'') && needs.build.outputs.is_semantic_tag == ''true'''
        steps:
            -
                name: 'Set tag in the Deloper Portal'
                uses: keboola/action-set-tag-developer-portal@master
                with:
                    vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
                    app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
                    username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
                    password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
                    tag: '${{ needs.build.outputs.app_image_tag }}'


