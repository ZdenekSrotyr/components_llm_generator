Directory structure:
└── keboola-ex-telemetry-data/
    ├── README.md
    ├── composer.json
    ├── composer.lock
    ├── docker-compose.yml
    ├── Dockerfile
    ├── phpcs.xml
    ├── phpstan.neon
    ├── phpunit.xml.dist
    ├── rector.php
    ├── .dockerignore
    ├── docker/
    │   ├── composer-install.sh
    │   ├── php-prod.ini
    │   └── driver/
    │       ├── simba.snowflake.ini
    │       └── snowflake-policy.pol
    ├── src/
    │   ├── Component.php
    │   ├── Config.php
    │   ├── ConfigDefinition.php
    │   ├── DbConnector.php
    │   ├── Extractor.php
    │   ├── run.php
    │   ├── Exception/
    │   │   ├── ApplicationException.php
    │   │   └── SnowsqlException.php
    │   └── ValueObject/
    │       ├── Column.php
    │       └── Table.php
    ├── tests/
    │   ├── functional/
    │   │   ├── DatadirTest.php
    │   │   ├── activitycenter_mode_correct_telemetry_data/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── activitycenter_mode_correct_telemetry_data_native-types-manifest/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── activitycenter_mode_incremental_fetching/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── activitycenter_mode_incremental_fetching_state/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               ├── state.json
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── organization_mode_correct_telemetry_data/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── organization_mode_incremental_fetching/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               ├── state.json
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── organization_mode_incremental_fetching_state/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               ├── state.json
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── project_mode_correct_telemetry_data/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── project_mode_download_selected_tables/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   ├── data.csv.manifest
    │   │   │                   ├── data2.csv
    │   │   │                   └── data2.csv.manifest
    │   │   ├── project_mode_ignore_incremental_fetching/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   ├── data.csv.manifest
    │   │   │                   ├── ignoreInc.csv
    │   │   │                   └── ignoreInc.csv.manifest
    │   │   ├── project_mode_img_params_stack_id/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── project_mode_incremental_fetching/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── project_mode_incremental_fetching_state/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               ├── state.json
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── project_mode_incremental_fetching_write_old_state/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               ├── state.json
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── set_primary_keys/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── tables/
    │   │   │                   ├── data.csv
    │   │   │                   └── data.csv.manifest
    │   │   ├── skip_staging_table/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           ├── config.json
    │   │   │           └── in/
    │   │   │               └── tables/
    │   │   │                   ├── stagingasqdqwd.csv
    │   │   │                   └── stagingasqdqwd.csv.manifest
    │   │   └── telemetry_data_empty_result/
    │   │       ├── expected-code
    │   │       ├── expected-stderr
    │   │       ├── expected-stdout
    │   │       └── source/
    │   │           └── data/
    │   │               ├── config.json
    │   │               └── in/
    │   │                   └── tables/
    │   │                       ├── data.csv
    │   │                       └── data.csv.manifest
    │   └── phpunit/
    │       ├── bootstrap.php
    │       ├── ConfigTest.php
    │       └── ValueObjectTest.php
    └── .github/
        └── workflows/
            └── push.yml

================================================
FILE: README.md
================================================
# Telemetry data Extractor

> Exports telemetry data for specified project 

# Usage

```json
{
  "parameters": {},
  "image_parameters": {
    "db": {
      "host": "XXX",
      "port": 3306,
      "user": "XXX",
      "database": "XXX",
      "#password": "xxx"
    }
  }
}
```

## Development
 
Clone this repository and init the workspace with following command:

```
git clone https://github.com/keboola/ex-telemetry-data
cd ex-telemetry-data
docker-compose build
docker-compose run --rm dev composer install --no-scripts
```

Run the test suite using this command:

```
docker-compose run --rm dev composer tests
```



================================================
FILE: composer.json
================================================
{
    "name": "keboola/ex-telemetry-data",
    "description": "Telemetry data extractor",
    "license": "MIT",
    "require": {
        "php": "^8",
        "ext-json": "*",
        "keboola/common-exceptions": "^1.1",
        "keboola/csv": "^2.2",
        "keboola/db-extractor-table-format": "^3.8",
        "keboola/php-component": "^10",
        "keboola/php-datatypes": "^7",
        "keboola/retry": "^0.5.0",
        "keboola/table-backend-utils": "^2.7",
        "symfony/config": "^6",
        "symfony/filesystem": "^6"
    },
    "require-dev": {
        "keboola/coding-standard": "^15",
        "keboola/datadir-tests": "^5.2",
        "keboola/php-temp": "^2.0",
        "php-parallel-lint/php-parallel-lint": "^1.2",
        "phpstan/phpstan": "^1",
        "phpunit/phpunit": "^9.0",
        "rector/rector": "^1.1",
        "symfony/process": "^6.0"
    },
    "autoload": {
        "psr-4": {
            "Keboola\\TelemetryData\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Keboola\\TelemetryData\\Tests\\": "tests/phpunit/",
            "Keboola\\TelemetryData\\FunctionalTests\\": "tests/functional/"
        }
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests-datadir": "phpunit tests/functional",
        "tests": [
            "@tests-phpunit",
            "@tests-datadir"
        ],

        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "build": [
            "@phplint",
            "@phpcs",
            "@phpstan",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true,
        "allow-plugins": {
            "dealerdirect/phpcodesniffer-composer-installer": true
        }
    }
}



================================================
FILE: composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "bf817aa97eb56c2d5aee6ffabd5234c6",
    "packages": [
        {
            "name": "brick/math",
            "version": "0.12.1",
            "source": {
                "type": "git",
                "url": "https://github.com/brick/math.git",
                "reference": "f510c0a40911935b77b86859eb5223d58d660df1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/brick/math/zipball/f510c0a40911935b77b86859eb5223d58d660df1",
                "reference": "f510c0a40911935b77b86859eb5223d58d660df1",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "require-dev": {
                "php-coveralls/php-coveralls": "^2.2",
                "phpunit/phpunit": "^10.1",
                "vimeo/psalm": "5.16.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Brick\\Math\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Arbitrary-precision arithmetic library",
            "keywords": [
                "Arbitrary-precision",
                "BigInteger",
                "BigRational",
                "arithmetic",
                "bigdecimal",
                "bignum",
                "bignumber",
                "brick",
                "decimal",
                "integer",
                "math",
                "mathematics",
                "rational"
            ],
            "support": {
                "issues": "https://github.com/brick/math/issues",
                "source": "https://github.com/brick/math/tree/0.12.1"
            },
            "funding": [
                {
                    "url": "https://github.com/BenMorel",
                    "type": "github"
                }
            ],
            "time": "2023-11-29T23:19:16+00:00"
        },
        {
            "name": "doctrine/cache",
            "version": "2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/cache.git",
                "reference": "1ca8f21980e770095a31456042471a57bc4c68fb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/cache/zipball/1ca8f21980e770095a31456042471a57bc4c68fb",
                "reference": "1ca8f21980e770095a31456042471a57bc4c68fb",
                "shasum": ""
            },
            "require": {
                "php": "~7.1 || ^8.0"
            },
            "conflict": {
                "doctrine/common": ">2.2,<2.4"
            },
            "require-dev": {
                "cache/integration-tests": "dev-master",
                "doctrine/coding-standard": "^9",
                "phpunit/phpunit": "^7.5 || ^8.5 || ^9.5",
                "psr/cache": "^1.0 || ^2.0 || ^3.0",
                "symfony/cache": "^4.4 || ^5.4 || ^6",
                "symfony/var-exporter": "^4.4 || ^5.4 || ^6"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Common\\Cache\\": "lib/Doctrine/Common/Cache"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Guilherme Blanco",
                    "email": "guilhermeblanco@gmail.com"
                },
                {
                    "name": "Roman Borschel",
                    "email": "roman@code-factory.org"
                },
                {
                    "name": "Benjamin Eberlei",
                    "email": "kontakt@beberlei.de"
                },
                {
                    "name": "Jonathan Wage",
                    "email": "jonwage@gmail.com"
                },
                {
                    "name": "Johannes Schmitt",
                    "email": "schmittjoh@gmail.com"
                }
            ],
            "description": "PHP Doctrine Cache library is a popular cache implementation that supports many different drivers such as redis, memcache, apc, mongodb and others.",
            "homepage": "https://www.doctrine-project.org/projects/cache.html",
            "keywords": [
                "abstraction",
                "apcu",
                "cache",
                "caching",
                "couchdb",
                "memcached",
                "php",
                "redis",
                "xcache"
            ],
            "support": {
                "issues": "https://github.com/doctrine/cache/issues",
                "source": "https://github.com/doctrine/cache/tree/2.2.0"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Fcache",
                    "type": "tidelift"
                }
            ],
            "time": "2022-05-20T20:07:39+00:00"
        },
        {
            "name": "doctrine/dbal",
            "version": "3.8.6",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/dbal.git",
                "reference": "b7411825cf7efb7e51f9791dea19d86e43b399a1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/dbal/zipball/b7411825cf7efb7e51f9791dea19d86e43b399a1",
                "reference": "b7411825cf7efb7e51f9791dea19d86e43b399a1",
                "shasum": ""
            },
            "require": {
                "composer-runtime-api": "^2",
                "doctrine/cache": "^1.11|^2.0",
                "doctrine/deprecations": "^0.5.3|^1",
                "doctrine/event-manager": "^1|^2",
                "php": "^7.4 || ^8.0",
                "psr/cache": "^1|^2|^3",
                "psr/log": "^1|^2|^3"
            },
            "require-dev": {
                "doctrine/coding-standard": "12.0.0",
                "fig/log-test": "^1",
                "jetbrains/phpstorm-stubs": "2023.1",
                "phpstan/phpstan": "1.11.5",
                "phpstan/phpstan-strict-rules": "^1.6",
                "phpunit/phpunit": "9.6.19",
                "psalm/plugin-phpunit": "0.18.4",
                "slevomat/coding-standard": "8.13.1",
                "squizlabs/php_codesniffer": "3.10.1",
                "symfony/cache": "^5.4|^6.0|^7.0",
                "symfony/console": "^4.4|^5.4|^6.0|^7.0",
                "vimeo/psalm": "4.30.0"
            },
            "suggest": {
                "symfony/console": "For helpful console commands such as SQL execution and import of files."
            },
            "bin": [
                "bin/doctrine-dbal"
            ],
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\DBAL\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Guilherme Blanco",
                    "email": "guilhermeblanco@gmail.com"
                },
                {
                    "name": "Roman Borschel",
                    "email": "roman@code-factory.org"
                },
                {
                    "name": "Benjamin Eberlei",
                    "email": "kontakt@beberlei.de"
                },
                {
                    "name": "Jonathan Wage",
                    "email": "jonwage@gmail.com"
                }
            ],
            "description": "Powerful PHP database abstraction layer (DBAL) with many features for database schema introspection and management.",
            "homepage": "https://www.doctrine-project.org/projects/dbal.html",
            "keywords": [
                "abstraction",
                "database",
                "db2",
                "dbal",
                "mariadb",
                "mssql",
                "mysql",
                "oci8",
                "oracle",
                "pdo",
                "pgsql",
                "postgresql",
                "queryobject",
                "sasql",
                "sql",
                "sqlite",
                "sqlserver",
                "sqlsrv"
            ],
            "support": {
                "issues": "https://github.com/doctrine/dbal/issues",
                "source": "https://github.com/doctrine/dbal/tree/3.8.6"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Fdbal",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-19T10:38:17+00:00"
        },
        {
            "name": "doctrine/deprecations",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/deprecations.git",
                "reference": "dfbaa3c2d2e9a9df1118213f3b8b0c597bb99fab"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/deprecations/zipball/dfbaa3c2d2e9a9df1118213f3b8b0c597bb99fab",
                "reference": "dfbaa3c2d2e9a9df1118213f3b8b0c597bb99fab",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "require-dev": {
                "doctrine/coding-standard": "^9",
                "phpstan/phpstan": "1.4.10 || 1.10.15",
                "phpstan/phpstan-phpunit": "^1.0",
                "phpunit/phpunit": "^7.5 || ^8.5 || ^9.5",
                "psalm/plugin-phpunit": "0.18.4",
                "psr/log": "^1 || ^2 || ^3",
                "vimeo/psalm": "4.30.0 || 5.12.0"
            },
            "suggest": {
                "psr/log": "Allows logging deprecations via PSR-3 logger implementation"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Deprecations\\": "lib/Doctrine/Deprecations"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "A small layer on top of trigger_error(E_USER_DEPRECATED) or PSR-3 logging with options to disable all deprecations or selectively for packages.",
            "homepage": "https://www.doctrine-project.org/",
            "support": {
                "issues": "https://github.com/doctrine/deprecations/issues",
                "source": "https://github.com/doctrine/deprecations/tree/1.1.3"
            },
            "time": "2024-01-30T19:34:25+00:00"
        },
        {
            "name": "doctrine/event-manager",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/event-manager.git",
                "reference": "b680156fa328f1dfd874fd48c7026c41570b9c6e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/event-manager/zipball/b680156fa328f1dfd874fd48c7026c41570b9c6e",
                "reference": "b680156fa328f1dfd874fd48c7026c41570b9c6e",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "conflict": {
                "doctrine/common": "<2.9"
            },
            "require-dev": {
                "doctrine/coding-standard": "^12",
                "phpstan/phpstan": "^1.8.8",
                "phpunit/phpunit": "^10.5",
                "vimeo/psalm": "^5.24"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Common\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Guilherme Blanco",
                    "email": "guilhermeblanco@gmail.com"
                },
                {
                    "name": "Roman Borschel",
                    "email": "roman@code-factory.org"
                },
                {
                    "name": "Benjamin Eberlei",
                    "email": "kontakt@beberlei.de"
                },
                {
                    "name": "Jonathan Wage",
                    "email": "jonwage@gmail.com"
                },
                {
                    "name": "Johannes Schmitt",
                    "email": "schmittjoh@gmail.com"
                },
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com"
                }
            ],
            "description": "The Doctrine Event Manager is a simple PHP event system that was built to be used with the various Doctrine projects.",
            "homepage": "https://www.doctrine-project.org/projects/event-manager.html",
            "keywords": [
                "event",
                "event dispatcher",
                "event manager",
                "event system",
                "events"
            ],
            "support": {
                "issues": "https://github.com/doctrine/event-manager/issues",
                "source": "https://github.com/doctrine/event-manager/tree/2.0.1"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Fevent-manager",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-22T20:47:39+00:00"
        },
        {
            "name": "firebase/php-jwt",
            "version": "v6.10.1",
            "source": {
                "type": "git",
                "url": "https://github.com/firebase/php-jwt.git",
                "reference": "500501c2ce893c824c801da135d02661199f60c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/firebase/php-jwt/zipball/500501c2ce893c824c801da135d02661199f60c5",
                "reference": "500501c2ce893c824c801da135d02661199f60c5",
                "shasum": ""
            },
            "require": {
                "php": "^8.0"
            },
            "require-dev": {
                "guzzlehttp/guzzle": "^7.4",
                "phpspec/prophecy-phpunit": "^2.0",
                "phpunit/phpunit": "^9.5",
                "psr/cache": "^2.0||^3.0",
                "psr/http-client": "^1.0",
                "psr/http-factory": "^1.0"
            },
            "suggest": {
                "ext-sodium": "Support EdDSA (Ed25519) signatures",
                "paragonie/sodium_compat": "Support EdDSA (Ed25519) signatures when libsodium is not present"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Firebase\\JWT\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Neuman Vong",
                    "email": "neuman+pear@twilio.com",
                    "role": "Developer"
                },
                {
                    "name": "Anant Narayanan",
                    "email": "anant@php.net",
                    "role": "Developer"
                }
            ],
            "description": "A simple library to encode and decode JSON Web Tokens (JWT) in PHP. Should conform to the current spec.",
            "homepage": "https://github.com/firebase/php-jwt",
            "keywords": [
                "jwt",
                "php"
            ],
            "support": {
                "issues": "https://github.com/firebase/php-jwt/issues",
                "source": "https://github.com/firebase/php-jwt/tree/v6.10.1"
            },
            "time": "2024-05-18T18:05:11+00:00"
        },
        {
            "name": "google/auth",
            "version": "v1.40.0",
            "source": {
                "type": "git",
                "url": "https://github.com/googleapis/google-auth-library-php.git",
                "reference": "bff9f2d01677e71a98394b5ac981b99523df5178"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/googleapis/google-auth-library-php/zipball/bff9f2d01677e71a98394b5ac981b99523df5178",
                "reference": "bff9f2d01677e71a98394b5ac981b99523df5178",
                "shasum": ""
            },
            "require": {
                "firebase/php-jwt": "^6.0",
                "guzzlehttp/guzzle": "^7.4.5",
                "guzzlehttp/psr7": "^2.4.5",
                "php": "^8.0",
                "psr/cache": "^2.0||^3.0",
                "psr/http-message": "^1.1||^2.0"
            },
            "require-dev": {
                "guzzlehttp/promises": "^2.0",
                "kelvinmo/simplejwt": "0.7.1",
                "phpseclib/phpseclib": "^3.0.35",
                "phpspec/prophecy-phpunit": "^2.1",
                "phpunit/phpunit": "^9.6",
                "sebastian/comparator": ">=1.2.3",
                "squizlabs/php_codesniffer": "^3.5",
                "symfony/process": "^6.0||^7.0",
                "webmozart/assert": "^1.11"
            },
            "suggest": {
                "phpseclib/phpseclib": "May be used in place of OpenSSL for signing strings or for token management. Please require version ^2."
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Google\\Auth\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "description": "Google Auth Library for PHP",
            "homepage": "http://github.com/google/google-auth-library-php",
            "keywords": [
                "Authentication",
                "google",
                "oauth2"
            ],
            "support": {
                "docs": "https://googleapis.github.io/google-auth-library-php/main/",
                "issues": "https://github.com/googleapis/google-auth-library-php/issues",
                "source": "https://github.com/googleapis/google-auth-library-php/tree/v1.40.0"
            },
            "time": "2024-05-31T19:16:15+00:00"
        },
        {
            "name": "google/cloud-bigquery",
            "version": "v1.30.3",
            "source": {
                "type": "git",
                "url": "https://github.com/googleapis/google-cloud-php-bigquery.git",
                "reference": "d5fee14c475aa56a32b3312e94e01a98315b1003"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/googleapis/google-cloud-php-bigquery/zipball/d5fee14c475aa56a32b3312e94e01a98315b1003",
                "reference": "d5fee14c475aa56a32b3312e94e01a98315b1003",
                "shasum": ""
            },
            "require": {
                "google/cloud-core": "^1.55",
                "php": "^8.0",
                "ramsey/uuid": "^3.0|^4.0"
            },
            "require-dev": {
                "erusev/parsedown": "^1.6",
                "google/cloud-storage": "^1.3",
                "phpdocumentor/reflection": "^5.3.3",
                "phpdocumentor/reflection-docblock": "^5.3",
                "phpspec/prophecy-phpunit": "^2.0",
                "phpunit/phpunit": "^9.0",
                "squizlabs/php_codesniffer": "2.*"
            },
            "suggest": {
                "google/cloud-storage": "Makes it easier to load data from Cloud Storage into BigQuery"
            },
            "type": "library",
            "extra": {
                "component": {
                    "displayName": "Google Cloud BigQuery",
                    "id": "cloud-bigquery",
                    "target": "googleapis/google-cloud-php-bigquery.git",
                    "path": "BigQuery",
                    "entry": "src/BigQueryClient.php"
                }
            },
            "autoload": {
                "psr-4": {
                    "Google\\Cloud\\BigQuery\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "description": "BigQuery Client for PHP",
            "support": {
                "source": "https://github.com/googleapis/google-cloud-php-bigquery/tree/v1.30.3"
            },
            "time": "2024-06-07T22:33:41+00:00"
        },
        {
            "name": "google/cloud-core",
            "version": "v1.59.0",
            "source": {
                "type": "git",
                "url": "https://github.com/googleapis/google-cloud-php-core.git",
                "reference": "56d31be2663780a7ed0736bee60d01f047bf15c0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/googleapis/google-cloud-php-core/zipball/56d31be2663780a7ed0736bee60d01f047bf15c0",
                "reference": "56d31be2663780a7ed0736bee60d01f047bf15c0",
                "shasum": ""
            },
            "require": {
                "google/auth": "^1.34",
                "google/gax": "^1.34.0",
                "guzzlehttp/guzzle": "^6.5.8|^7.4.4",
                "guzzlehttp/promises": "^1.4||^2.0",
                "guzzlehttp/psr7": "^2.6",
                "monolog/monolog": "^2.9|^3.0",
                "php": "^8.0",
                "psr/http-message": "^1.0|^2.0",
                "rize/uri-template": "~0.3"
            },
            "require-dev": {
                "erusev/parsedown": "^1.6",
                "google/cloud-common-protos": "~0.5",
                "opis/closure": "^3",
                "phpdocumentor/reflection": "^5.3.3",
                "phpdocumentor/reflection-docblock": "^5.3",
                "phpspec/prophecy-phpunit": "^2.0",
                "phpunit/phpunit": "^9.0",
                "squizlabs/php_codesniffer": "2.*"
            },
            "suggest": {
                "opis/closure": "May be used to serialize closures to process jobs in the batch daemon. Please require version ^3.",
                "symfony/lock": "Required for the Spanner cached based session pool. Please require the following commit: 3.3.x-dev#1ba6ac9"
            },
            "bin": [
                "bin/google-cloud-batch"
            ],
            "type": "library",
            "extra": {
                "component": {
                    "id": "cloud-core",
                    "target": "googleapis/google-cloud-php-core.git",
                    "path": "Core",
                    "entry": "src/ServiceBuilder.php"
                }
            },
            "autoload": {
                "psr-4": {
                    "Google\\Cloud\\Core\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "description": "Google Cloud PHP shared dependency, providing functionality useful to all components.",
            "support": {
                "source": "https://github.com/googleapis/google-cloud-php-core/tree/v1.59.0"
            },
            "time": "2024-06-07T22:33:41+00:00"
        },
        {
            "name": "google/common-protos",
            "version": "v4.6.0",
            "source": {
                "type": "git",
                "url": "https://github.com/googleapis/common-protos-php.git",
                "reference": "f8588298a0a204aef2db15ce501530e476ec883f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/googleapis/common-protos-php/zipball/f8588298a0a204aef2db15ce501530e476ec883f",
                "reference": "f8588298a0a204aef2db15ce501530e476ec883f",
                "shasum": ""
            },
            "require": {
                "google/protobuf": "^v3.25.3||^4.26.1",
                "php": "^8.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.6"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Google\\Api\\": "src/Api",
                    "Google\\Iam\\": "src/Iam",
                    "Google\\Rpc\\": "src/Rpc",
                    "Google\\Type\\": "src/Type",
                    "Google\\Cloud\\": "src/Cloud",
                    "GPBMetadata\\Google\\Api\\": "metadata/Api",
                    "GPBMetadata\\Google\\Iam\\": "metadata/Iam",
                    "GPBMetadata\\Google\\Rpc\\": "metadata/Rpc",
                    "GPBMetadata\\Google\\Type\\": "metadata/Type",
                    "GPBMetadata\\Google\\Cloud\\": "metadata/Cloud",
                    "GPBMetadata\\Google\\Logging\\": "metadata/Logging"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "description": "Google API Common Protos for PHP",
            "homepage": "https://github.com/googleapis/common-protos-php",
            "keywords": [
                "google"
            ],
            "support": {
                "issues": "https://github.com/googleapis/common-protos-php/issues",
                "source": "https://github.com/googleapis/common-protos-php/tree/v4.6.0"
            },
            "time": "2024-04-03T19:11:54+00:00"
        },
        {
            "name": "google/gax",
            "version": "v1.34.0",
            "source": {
                "type": "git",
                "url": "https://github.com/googleapis/gax-php.git",
                "reference": "28aa3e95969a75b278606a88448992a6396a119e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/googleapis/gax-php/zipball/28aa3e95969a75b278606a88448992a6396a119e",
                "reference": "28aa3e95969a75b278606a88448992a6396a119e",
                "shasum": ""
            },
            "require": {
                "google/auth": "^1.34.0",
                "google/common-protos": "^4.4",
                "google/grpc-gcp": "^0.4",
                "google/longrunning": "~0.4",
                "google/protobuf": "^v3.25.3||^4.26.1",
                "grpc/grpc": "^1.13",
                "guzzlehttp/promises": "^2.0",
                "guzzlehttp/psr7": "^2.0",
                "php": "^8.0",
                "ramsey/uuid": "^4.0"
            },
            "conflict": {
                "ext-protobuf": "<3.7.0"
            },
            "require-dev": {
                "phpspec/prophecy-phpunit": "^2.1",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": "^9.6",
                "squizlabs/php_codesniffer": "3.*"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Google\\ApiCore\\": "src",
                    "GPBMetadata\\ApiCore\\": "metadata/ApiCore"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "description": "Google API Core for PHP",
            "homepage": "https://github.com/googleapis/gax-php",
            "keywords": [
                "google"
            ],
            "support": {
                "issues": "https://github.com/googleapis/gax-php/issues",
                "source": "https://github.com/googleapis/gax-php/tree/v1.34.0"
            },
            "time": "2024-05-30T00:35:13+00:00"
        },
        {
            "name": "google/grpc-gcp",
            "version": "v0.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/GoogleCloudPlatform/grpc-gcp-php.git",
                "reference": "2a80dbf690922aa52bb6bb79b9a32a9637a5c2d9"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/GoogleCloudPlatform/grpc-gcp-php/zipball/2a80dbf690922aa52bb6bb79b9a32a9637a5c2d9",
                "reference": "2a80dbf690922aa52bb6bb79b9a32a9637a5c2d9",
                "shasum": ""
            },
            "require": {
                "google/auth": "^1.3",
                "google/protobuf": "^v3.25.3||^4.26.1",
                "grpc/grpc": "^v1.13.0",
                "php": "^8.0",
                "psr/cache": "^1.0.1||^2.0.0||^3.0.0"
            },
            "require-dev": {
                "google/cloud-spanner": "^1.7",
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Grpc\\Gcp\\": "src/"
                },
                "classmap": [
                    "src/generated/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "description": "gRPC GCP library for channel management",
            "support": {
                "issues": "https://github.com/GoogleCloudPlatform/grpc-gcp-php/issues",
                "source": "https://github.com/GoogleCloudPlatform/grpc-gcp-php/tree/v0.4.0"
            },
            "time": "2024-04-03T16:37:55+00:00"
        },
        {
            "name": "google/longrunning",
            "version": "0.4.3",
            "source": {
                "type": "git",
                "url": "https://github.com/googleapis/php-longrunning.git",
                "reference": "ed718a735e407826c3332b7197a44602eb03e608"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/googleapis/php-longrunning/zipball/ed718a735e407826c3332b7197a44602eb03e608",
                "reference": "ed718a735e407826c3332b7197a44602eb03e608",
                "shasum": ""
            },
            "require-dev": {
                "google/gax": "^1.34.0",
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "component": {
                    "id": "longrunning",
                    "path": "LongRunning",
                    "entry": null,
                    "target": "googleapis/php-longrunning"
                }
            },
            "autoload": {
                "psr-4": {
                    "Google\\LongRunning\\": "src/LongRunning",
                    "Google\\ApiCore\\LongRunning\\": "src/ApiCore/LongRunning",
                    "GPBMetadata\\Google\\Longrunning\\": "metadata/Longrunning"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "description": "Google LongRunning Client for PHP",
            "support": {
                "source": "https://github.com/googleapis/php-longrunning/tree/v0.4.3"
            },
            "time": "2024-06-01T03:14:01+00:00"
        },
        {
            "name": "google/protobuf",
            "version": "v4.27.2",
            "source": {
                "type": "git",
                "url": "https://github.com/protocolbuffers/protobuf-php.git",
                "reference": "1b9bfead0ea8108e6ab411258fc38417b62d4bf6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/protocolbuffers/protobuf-php/zipball/1b9bfead0ea8108e6ab411258fc38417b62d4bf6",
                "reference": "1b9bfead0ea8108e6ab411258fc38417b62d4bf6",
                "shasum": ""
            },
            "require": {
                "php": ">=7.0.0"
            },
            "require-dev": {
                "phpunit/phpunit": ">=5.0.0"
            },
            "suggest": {
                "ext-bcmath": "Need to support JSON deserialization"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Google\\Protobuf\\": "src/Google/Protobuf",
                    "GPBMetadata\\Google\\Protobuf\\": "src/GPBMetadata/Google/Protobuf"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "description": "proto library for PHP",
            "homepage": "https://developers.google.com/protocol-buffers/",
            "keywords": [
                "proto"
            ],
            "support": {
                "source": "https://github.com/protocolbuffers/protobuf-php/tree/v4.27.2"
            },
            "time": "2024-06-25T19:14:44+00:00"
        },
        {
            "name": "grpc/grpc",
            "version": "1.57.0",
            "source": {
                "type": "git",
                "url": "https://github.com/grpc/grpc-php.git",
                "reference": "b610c42022ed3a22f831439cb93802f2a4502fdf"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/grpc/grpc-php/zipball/b610c42022ed3a22f831439cb93802f2a4502fdf",
                "reference": "b610c42022ed3a22f831439cb93802f2a4502fdf",
                "shasum": ""
            },
            "require": {
                "php": ">=7.0.0"
            },
            "require-dev": {
                "google/auth": "^v1.3.0"
            },
            "suggest": {
                "ext-protobuf": "For better performance, install the protobuf C extension.",
                "google/protobuf": "To get started using grpc quickly, install the native protobuf library."
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Grpc\\": "src/lib/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "description": "gRPC library for PHP",
            "homepage": "https://grpc.io",
            "keywords": [
                "rpc"
            ],
            "support": {
                "source": "https://github.com/grpc/grpc-php/tree/v1.57.0"
            },
            "time": "2023-08-14T23:57:54+00:00"
        },
        {
            "name": "guzzlehttp/guzzle",
            "version": "7.8.1",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/guzzle.git",
                "reference": "41042bc7ab002487b876a0683fc8dce04ddce104"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/guzzle/zipball/41042bc7ab002487b876a0683fc8dce04ddce104",
                "reference": "41042bc7ab002487b876a0683fc8dce04ddce104",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "guzzlehttp/promises": "^1.5.3 || ^2.0.1",
                "guzzlehttp/psr7": "^1.9.1 || ^2.5.1",
                "php": "^7.2.5 || ^8.0",
                "psr/http-client": "^1.0",
                "symfony/deprecation-contracts": "^2.2 || ^3.0"
            },
            "provide": {
                "psr/http-client-implementation": "1.0"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.2",
                "ext-curl": "*",
                "php-http/client-integration-tests": "dev-master#2c025848417c1135031fdf9c728ee53d0a7ceaee as 3.0.999",
                "php-http/message-factory": "^1.1",
                "phpunit/phpunit": "^8.5.36 || ^9.6.15",
                "psr/log": "^1.1 || ^2.0 || ^3.0"
            },
            "suggest": {
                "ext-curl": "Required for CURL handler support",
                "ext-intl": "Required for Internationalized Domain Name (IDN) support",
                "psr/log": "Required for using the Log middleware"
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                }
            },
            "autoload": {
                "files": [
                    "src/functions_include.php"
                ],
                "psr-4": {
                    "GuzzleHttp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "Jeremy Lindblom",
                    "email": "jeremeamia@gmail.com",
                    "homepage": "https://github.com/jeremeamia"
                },
                {
                    "name": "George Mponos",
                    "email": "gmponos@gmail.com",
                    "homepage": "https://github.com/gmponos"
                },
                {
                    "name": "Tobias Nyholm",
                    "email": "tobias.nyholm@gmail.com",
                    "homepage": "https://github.com/Nyholm"
                },
                {
                    "name": "Márk Sági-Kazár",
                    "email": "mark.sagikazar@gmail.com",
                    "homepage": "https://github.com/sagikazarmark"
                },
                {
                    "name": "Tobias Schultze",
                    "email": "webmaster@tubo-world.de",
                    "homepage": "https://github.com/Tobion"
                }
            ],
            "description": "Guzzle is a PHP HTTP client library",
            "keywords": [
                "client",
                "curl",
                "framework",
                "http",
                "http client",
                "psr-18",
                "psr-7",
                "rest",
                "web service"
            ],
            "support": {
                "issues": "https://github.com/guzzle/guzzle/issues",
                "source": "https://github.com/guzzle/guzzle/tree/7.8.1"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/guzzle",
                    "type": "tidelift"
                }
            ],
            "time": "2023-12-03T20:35:24+00:00"
        },
        {
            "name": "guzzlehttp/promises",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/promises.git",
                "reference": "bbff78d96034045e58e13dedd6ad91b5d1253223"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/promises/zipball/bbff78d96034045e58e13dedd6ad91b5d1253223",
                "reference": "bbff78d96034045e58e13dedd6ad91b5d1253223",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5 || ^8.0"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.2",
                "phpunit/phpunit": "^8.5.36 || ^9.6.15"
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Promise\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "Tobias Nyholm",
                    "email": "tobias.nyholm@gmail.com",
                    "homepage": "https://github.com/Nyholm"
                },
                {
                    "name": "Tobias Schultze",
                    "email": "webmaster@tubo-world.de",
                    "homepage": "https://github.com/Tobion"
                }
            ],
            "description": "Guzzle promises library",
            "keywords": [
                "promise"
            ],
            "support": {
                "issues": "https://github.com/guzzle/promises/issues",
                "source": "https://github.com/guzzle/promises/tree/2.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/promises",
                    "type": "tidelift"
                }
            ],
            "time": "2023-12-03T20:19:20+00:00"
        },
        {
            "name": "guzzlehttp/psr7",
            "version": "2.6.2",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/psr7.git",
                "reference": "45b30f99ac27b5ca93cb4831afe16285f57b8221"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/psr7/zipball/45b30f99ac27b5ca93cb4831afe16285f57b8221",
                "reference": "45b30f99ac27b5ca93cb4831afe16285f57b8221",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5 || ^8.0",
                "psr/http-factory": "^1.0",
                "psr/http-message": "^1.1 || ^2.0",
                "ralouphie/getallheaders": "^3.0"
            },
            "provide": {
                "psr/http-factory-implementation": "1.0",
                "psr/http-message-implementation": "1.0"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.2",
                "http-interop/http-factory-tests": "^0.9",
                "phpunit/phpunit": "^8.5.36 || ^9.6.15"
            },
            "suggest": {
                "laminas/laminas-httphandlerrunner": "Emit PSR-7 responses"
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Psr7\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "George Mponos",
                    "email": "gmponos@gmail.com",
                    "homepage": "https://github.com/gmponos"
                },
                {
                    "name": "Tobias Nyholm",
                    "email": "tobias.nyholm@gmail.com",
                    "homepage": "https://github.com/Nyholm"
                },
                {
                    "name": "Márk Sági-Kazár",
                    "email": "mark.sagikazar@gmail.com",
                    "homepage": "https://github.com/sagikazarmark"
                },
                {
                    "name": "Tobias Schultze",
                    "email": "webmaster@tubo-world.de",
                    "homepage": "https://github.com/Tobion"
                },
                {
                    "name": "Márk Sági-Kazár",
                    "email": "mark.sagikazar@gmail.com",
                    "homepage": "https://sagikazarmark.hu"
                }
            ],
            "description": "PSR-7 message implementation that also provides common utility methods",
            "keywords": [
                "http",
                "message",
                "psr-7",
                "request",
                "response",
                "stream",
                "uri",
                "url"
            ],
            "support": {
                "issues": "https://github.com/guzzle/psr7/issues",
                "source": "https://github.com/guzzle/psr7/tree/2.6.2"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/psr7",
                    "type": "tidelift"
                }
            ],
            "time": "2023-12-03T20:05:35+00:00"
        },
        {
            "name": "keboola/common-exceptions",
            "version": "1.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/common-exceptions.git",
                "reference": "35ac327808f0e4157c9de6cbe0bf8536145cb5ac"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/common-exceptions/zipball/35ac327808f0e4157c9de6cbe0bf8536145cb5ac",
                "reference": "35ac327808f0e4157c9de6cbe0bf8536145cb5ac",
                "shasum": ""
            },
            "require": {
                "php": "^7.1|^8.0"
            },
            "require-dev": {
                "keboola/coding-standard": "^13.0",
                "keboola/php-temp": "^1.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpstan": "^0.12.93",
                "phpunit/phpunit": "^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\CommonExceptions\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Common exceptions shared between different applications",
            "support": {
                "source": "https://github.com/keboola/common-exceptions/tree/1.2.1"
            },
            "time": "2022-10-02T21:12:00+00:00"
        },
        {
            "name": "keboola/csv",
            "version": "2.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csv.git",
                "reference": "efd0fae3bf08562ed95638323375bba2abf65ea3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csv/zipball/efd0fae3bf08562ed95638323375bba2abf65ea3",
                "reference": "efd0fae3bf08562ed95638323375bba2abf65ea3",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "ext-json": "*",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Csv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola CSV reader and writer",
            "homepage": "http://keboola.com",
            "keywords": [
                "csv",
                "rfc4180"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csv/issues",
                "source": "https://github.com/keboola/php-csv/tree/2.3.0"
            },
            "time": "2021-08-26T12:03:06+00:00"
        },
        {
            "name": "keboola/db-extractor-table-format",
            "version": "3.8.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/db-extractor-table-format.git",
                "reference": "5e7bf95a7c33e8c9fd36ecc2c6129a86c5c697aa"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/db-extractor-table-format/zipball/5e7bf95a7c33e8c9fd36ecc2c6129a86c5c697aa",
                "reference": "5e7bf95a7c33e8c9fd36ecc2c6129a86c5c697aa",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "ext-mbstring": "*",
                "keboola/common-exceptions": "^1.0",
                "keboola/php-datatypes": "^7.2",
                "keboola/php-utils": "^4.1",
                "php": ">=8.2"
            },
            "require-dev": {
                "keboola/coding-standard": ">=13.0",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": "^9.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DbExtractor\\TableResultFormat\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "PHP class for formating table result",
            "support": {
                "source": "https://github.com/keboola/db-extractor-table-format/tree/3.8.0"
            },
            "time": "2023-11-10T09:12:47+00:00"
        },
        {
            "name": "keboola/php-component",
            "version": "10.1.4",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-component.git",
                "reference": "ed4ddea277ceb443567e10204a5d86576d7ffe7a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-component/zipball/ed4ddea277ceb443567e10204a5d86576d7ffe7a",
                "reference": "ed4ddea277ceb443567e10204a5d86576d7ffe7a",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/common-exceptions": "^1.2",
                "monolog/monolog": "^2.3",
                "php": ">=8.1",
                "symfony/config": "^5.4|^6.0",
                "symfony/filesystem": "^5.4|^6.0",
                "symfony/finder": "^5.4|^6.0",
                "symfony/property-access": "^5.4|^6.0",
                "symfony/serializer": "^5.4|^6.0"
            },
            "require-dev": {
                "devedge/sami-github": "^1.0",
                "keboola/coding-standard": "^15.0",
                "keboola/php-temp": "^2.0",
                "phpstan/phpstan": "^1.4",
                "phpunit/phpunit": "^9.5"
            },
            "type": "project",
            "autoload": {
                "psr-4": {
                    "Keboola\\Component\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Helper classes for developing Keboola PHP components",
            "keywords": [
                "component",
                "docker",
                "keboola"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-component/issues",
                "source": "https://github.com/keboola/php-component/tree/10.1.4"
            },
            "time": "2024-07-30T13:34:46+00:00"
        },
        {
            "name": "keboola/php-datatypes",
            "version": "7.6.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-datatypes.git",
                "reference": "acafca2309e346206ccc69d15a5a581c45f9b28f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-datatypes/zipball/acafca2309e346206ccc69d15a5a581c45f9b28f",
                "reference": "acafca2309e346206ccc69d15a5a581c45f9b28f",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "require-dev": {
                "keboola/coding-standard": "^15",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpdoc-parser": "^1.6",
                "phpstan/phpstan": "^1.4",
                "phpunit/phpunit": "^9",
                "squizlabs/php_codesniffer": "^3"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Datatype\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "PHP datatypes for databases",
            "support": {
                "issues": "https://github.com/keboola/php-datatypes/issues",
                "source": "https://github.com/keboola/php-datatypes/tree/7.6.0"
            },
            "time": "2024-03-05T09:08:00+00:00"
        },
        {
            "name": "keboola/php-utils",
            "version": "4.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-utils.git",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-utils/zipball/f5be83a50b5c4858f5698747e8a795048a89c382",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382",
                "shasum": ""
            },
            "require": {
                "keboola/sanitizer": "^0.1",
                "php": ">=5.6.0",
                "seld/jsonlint": "^1.4"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "~0.2",
                "phpunit/phpunit": "~5.0",
                "squizlabs/php_codesniffer": "~2.4"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/Keboola/Utils/jsonDecode.php",
                    "src/Keboola/Utils/sanitizeUtf8.php",
                    "src/Keboola/Utils/objectToArray.php",
                    "src/Keboola/Utils/formatDateTime.php",
                    "src/Keboola/Utils/replaceDates.php",
                    "src/Keboola/Utils/replaceDatesInArray.php",
                    "src/Keboola/Utils/buildUrl.php",
                    "src/Keboola/Utils/httpBuildUrl.php",
                    "src/Keboola/Utils/returnBytes.php",
                    "src/Keboola/Utils/camelize.php",
                    "src/Keboola/Utils/getDataFromPath.php",
                    "src/Keboola/Utils/isValidDateTimeString.php",
                    "src/Keboola/Utils/flattenArray.php",
                    "src/Keboola/Utils/arrayToObject.php",
                    "src/Keboola/Utils/isEmptyObject.php",
                    "src/Keboola/Utils/stripInvalidUtf16.php",
                    "src/Keboola/Utils/toAscii.php",
                    "src/Keboola/Utils/sanitizeColumnName.php",
                    "src/Keboola/Utils/formatBytes.php"
                ],
                "psr-0": {
                    "Keboola\\Utils": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Misc utility functions",
            "keywords": [
                "utility"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-utils/issues",
                "source": "https://github.com/keboola/php-utils/tree/master"
            },
            "time": "2019-10-04T20:55:45+00:00"
        },
        {
            "name": "keboola/retry",
            "version": "0.5.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/retry.git",
                "reference": "e2ce6f343db1167350df2850a4532ad6845a635d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/retry/zipball/e2ce6f343db1167350df2850a4532ad6845a635d",
                "reference": "e2ce6f343db1167350df2850a4532ad6845a635d",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "psr/log": "^1.1|^2|^3"
            },
            "replace": {
                "vkartaviy/retry": "*"
            },
            "require-dev": {
                "keboola/coding-standard": "^7.0",
                "phpstan/phpstan-shim": "^0.10",
                "phpunit/phpunit": "7.*"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Retry\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola Dev",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Library for repeatable and retryable operations",
            "keywords": [
                "backoff",
                "proxy",
                "repeat",
                "retry"
            ],
            "support": {
                "issues": "https://github.com/keboola/retry/issues",
                "source": "https://github.com/keboola/retry/tree/0.5.1"
            },
            "time": "2022-09-13T10:26:25+00:00"
        },
        {
            "name": "keboola/sanitizer",
            "version": "0.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/sanitizer.git",
                "reference": "e3b65cf64fc891406b2849c096cd3b0edef19900"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/sanitizer/zipball/e3b65cf64fc891406b2849c096cd3b0edef19900",
                "reference": "e3b65cf64fc891406b2849c096cd3b0edef19900",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Utils\\Sanitizer\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Column name sanitizer",
            "support": {
                "issues": "https://github.com/keboola/sanitizer/issues",
                "source": "https://github.com/keboola/sanitizer/tree/0.1.1"
            },
            "time": "2022-06-02T18:15:37+00:00"
        },
        {
            "name": "keboola/table-backend-utils",
            "version": "2.7.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-table-backend-utils.git",
                "reference": "de860af5cb97385d910ab71715b694749b81a0c6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-table-backend-utils/zipball/de860af5cb97385d910ab71715b694749b81a0c6",
                "reference": "de860af5cb97385d910ab71715b694749b81a0c6",
                "shasum": ""
            },
            "require": {
                "doctrine/dbal": "^3.3",
                "ext-json": "*",
                "ext-odbc": "*",
                "ext-pdo": "*",
                "google/cloud-bigquery": "^1.23",
                "keboola/common-exceptions": "^1",
                "keboola/php-datatypes": "^7.6",
                "keboola/php-utils": "^4.1",
                "keboola/retry": "^0.5.0",
                "php": "^8.1"
            },
            "require-dev": {
                "keboola/coding-standard": "^15",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpstan": "^1.4",
                "phpstan/phpstan-phpunit": "^1",
                "phpunit/phpunit": "^9"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\TableBackendUtils\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Package allows to import files to Snowflake from multiple cloud storages",
            "support": {
                "issues": "https://github.com/keboola/php-table-backend-utils/issues",
                "source": "https://github.com/keboola/php-table-backend-utils/tree/2.7.0"
            },
            "time": "2024-05-09T19:59:02+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "2.9.3",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "a30bfe2e142720dfa990d0a7e573997f5d884215"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/a30bfe2e142720dfa990d0a7e573997f5d884215",
                "reference": "a30bfe2e142720dfa990d0a7e573997f5d884215",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2",
                "psr/log": "^1.0.1 || ^2.0 || ^3.0"
            },
            "provide": {
                "psr/log-implementation": "1.0.0 || 2.0.0 || 3.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "elasticsearch/elasticsearch": "^7 || ^8",
                "ext-json": "*",
                "graylog2/gelf-php": "^1.4.2 || ^2@dev",
                "guzzlehttp/guzzle": "^7.4",
                "guzzlehttp/psr7": "^2.2",
                "mongodb/mongodb": "^1.8",
                "php-amqplib/php-amqplib": "~2.4 || ^3",
                "phpspec/prophecy": "^1.15",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": "^8.5.38 || ^9.6.19",
                "predis/predis": "^1.1 || ^2.0",
                "rollbar/rollbar": "^1.3 || ^2 || ^3",
                "ruflin/elastica": "^7",
                "swiftmailer/swiftmailer": "^5.3|^6.0",
                "symfony/mailer": "^5.4 || ^6",
                "symfony/mime": "^5.4 || ^6"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-curl": "Required to send log messages using the IFTTTHandler, the LogglyHandler, the SendGridHandler, the SlackWebhookHandler or the TelegramBotHandler",
                "ext-mbstring": "Allow to work properly with unicode symbols",
                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
                "ext-openssl": "Required to send log messages using SSL",
                "ext-sockets": "Allow sending log messages to a Syslog server (via UDP driver)",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "https://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "https://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/monolog/issues",
                "source": "https://github.com/Seldaek/monolog/tree/2.9.3"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/monolog/monolog",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-12T20:52:51+00:00"
        },
        {
            "name": "psr/cache",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/cache.git",
                "reference": "aa5030cfa5405eccfdcb1083ce040c2cb8d253bf"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/cache/zipball/aa5030cfa5405eccfdcb1083ce040c2cb8d253bf",
                "reference": "aa5030cfa5405eccfdcb1083ce040c2cb8d253bf",
                "shasum": ""
            },
            "require": {
                "php": ">=8.0.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Cache\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for caching libraries",
            "keywords": [
                "cache",
                "psr",
                "psr-6"
            ],
            "support": {
                "source": "https://github.com/php-fig/cache/tree/3.0.0"
            },
            "time": "2021-02-03T23:26:27+00:00"
        },
        {
            "name": "psr/container",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/container.git",
                "reference": "c71ecc56dfe541dbd90c5360474fbc405f8d5963"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/container/zipball/c71ecc56dfe541dbd90c5360474fbc405f8d5963",
                "reference": "c71ecc56dfe541dbd90c5360474fbc405f8d5963",
                "shasum": ""
            },
            "require": {
                "php": ">=7.4.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Container\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common Container Interface (PHP FIG PSR-11)",
            "homepage": "https://github.com/php-fig/container",
            "keywords": [
                "PSR-11",
                "container",
                "container-interface",
                "container-interop",
                "psr"
            ],
            "support": {
                "issues": "https://github.com/php-fig/container/issues",
                "source": "https://github.com/php-fig/container/tree/2.0.2"
            },
            "time": "2021-11-05T16:47:00+00:00"
        },
        {
            "name": "psr/http-client",
            "version": "1.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-client.git",
                "reference": "bb5906edc1c324c9a05aa0873d40117941e5fa90"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-client/zipball/bb5906edc1c324c9a05aa0873d40117941e5fa90",
                "reference": "bb5906edc1c324c9a05aa0873d40117941e5fa90",
                "shasum": ""
            },
            "require": {
                "php": "^7.0 || ^8.0",
                "psr/http-message": "^1.0 || ^2.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Client\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP clients",
            "homepage": "https://github.com/php-fig/http-client",
            "keywords": [
                "http",
                "http-client",
                "psr",
                "psr-18"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-client"
            },
            "time": "2023-09-23T14:17:50+00:00"
        },
        {
            "name": "psr/http-factory",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-factory.git",
                "reference": "2b4765fddfe3b508ac62f829e852b1501d3f6e8a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-factory/zipball/2b4765fddfe3b508ac62f829e852b1501d3f6e8a",
                "reference": "2b4765fddfe3b508ac62f829e852b1501d3f6e8a",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "psr/http-message": "^1.0 || ^2.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Message\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "PSR-17: Common interfaces for PSR-7 HTTP message factories",
            "keywords": [
                "factory",
                "http",
                "message",
                "psr",
                "psr-17",
                "psr-7",
                "request",
                "response"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-factory"
            },
            "time": "2024-04-15T12:06:14+00:00"
        },
        {
            "name": "psr/http-message",
            "version": "2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-message.git",
                "reference": "402d35bcb92c70c026d1a6a9883f06b2ead23d71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-message/zipball/402d35bcb92c70c026d1a6a9883f06b2ead23d71",
                "reference": "402d35bcb92c70c026d1a6a9883f06b2ead23d71",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Message\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP messages",
            "homepage": "https://github.com/php-fig/http-message",
            "keywords": [
                "http",
                "http-message",
                "psr",
                "psr-7",
                "request",
                "response"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-message/tree/2.0"
            },
            "time": "2023-04-04T09:54:51+00:00"
        },
        {
            "name": "psr/log",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "fe5ea303b0887d5caefd3d431c3e61ad47037001"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/fe5ea303b0887d5caefd3d431c3e61ad47037001",
                "reference": "fe5ea303b0887d5caefd3d431c3e61ad47037001",
                "shasum": ""
            },
            "require": {
                "php": ">=8.0.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "support": {
                "source": "https://github.com/php-fig/log/tree/3.0.0"
            },
            "time": "2021-07-14T16:46:02+00:00"
        },
        {
            "name": "ralouphie/getallheaders",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/ralouphie/getallheaders.git",
                "reference": "120b605dfeb996808c31b6477290a714d356e822"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822",
                "reference": "120b605dfeb996808c31b6477290a714d356e822",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "php-coveralls/php-coveralls": "^2.1",
                "phpunit/phpunit": "^5 || ^6.5"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/getallheaders.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ralph Khattar",
                    "email": "ralph.khattar@gmail.com"
                }
            ],
            "description": "A polyfill for getallheaders.",
            "support": {
                "issues": "https://github.com/ralouphie/getallheaders/issues",
                "source": "https://github.com/ralouphie/getallheaders/tree/develop"
            },
            "time": "2019-03-08T08:55:37+00:00"
        },
        {
            "name": "ramsey/collection",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/ramsey/collection.git",
                "reference": "a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/ramsey/collection/zipball/a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5",
                "reference": "a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "require-dev": {
                "captainhook/plugin-composer": "^5.3",
                "ergebnis/composer-normalize": "^2.28.3",
                "fakerphp/faker": "^1.21",
                "hamcrest/hamcrest-php": "^2.0",
                "jangregor/phpstan-prophecy": "^1.0",
                "mockery/mockery": "^1.5",
                "php-parallel-lint/php-console-highlighter": "^1.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpcsstandards/phpcsutils": "^1.0.0-rc1",
                "phpspec/prophecy-phpunit": "^2.0",
                "phpstan/extension-installer": "^1.2",
                "phpstan/phpstan": "^1.9",
                "phpstan/phpstan-mockery": "^1.1",
                "phpstan/phpstan-phpunit": "^1.3",
                "phpunit/phpunit": "^9.5",
                "psalm/plugin-mockery": "^1.1",
                "psalm/plugin-phpunit": "^0.18.4",
                "ramsey/coding-standard": "^2.0.3",
                "ramsey/conventional-commits": "^1.3",
                "vimeo/psalm": "^5.4"
            },
            "type": "library",
            "extra": {
                "captainhook": {
                    "force-install": true
                },
                "ramsey/conventional-commits": {
                    "configFile": "conventional-commits.json"
                }
            },
            "autoload": {
                "psr-4": {
                    "Ramsey\\Collection\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ben Ramsey",
                    "email": "ben@benramsey.com",
                    "homepage": "https://benramsey.com"
                }
            ],
            "description": "A PHP library for representing and manipulating collections.",
            "keywords": [
                "array",
                "collection",
                "hash",
                "map",
                "queue",
                "set"
            ],
            "support": {
                "issues": "https://github.com/ramsey/collection/issues",
                "source": "https://github.com/ramsey/collection/tree/2.0.0"
            },
            "funding": [
                {
                    "url": "https://github.com/ramsey",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/ramsey/collection",
                    "type": "tidelift"
                }
            ],
            "time": "2022-12-31T21:50:55+00:00"
        },
        {
            "name": "ramsey/uuid",
            "version": "4.7.6",
            "source": {
                "type": "git",
                "url": "https://github.com/ramsey/uuid.git",
                "reference": "91039bc1faa45ba123c4328958e620d382ec7088"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/ramsey/uuid/zipball/91039bc1faa45ba123c4328958e620d382ec7088",
                "reference": "91039bc1faa45ba123c4328958e620d382ec7088",
                "shasum": ""
            },
            "require": {
                "brick/math": "^0.8.8 || ^0.9 || ^0.10 || ^0.11 || ^0.12",
                "ext-json": "*",
                "php": "^8.0",
                "ramsey/collection": "^1.2 || ^2.0"
            },
            "replace": {
                "rhumsaa/uuid": "self.version"
            },
            "require-dev": {
                "captainhook/captainhook": "^5.10",
                "captainhook/plugin-composer": "^5.3",
                "dealerdirect/phpcodesniffer-composer-installer": "^0.7.0",
                "doctrine/annotations": "^1.8",
                "ergebnis/composer-normalize": "^2.15",
                "mockery/mockery": "^1.3",
                "paragonie/random-lib": "^2",
                "php-mock/php-mock": "^2.2",
                "php-mock/php-mock-mockery": "^1.3",
                "php-parallel-lint/php-parallel-lint": "^1.1",
                "phpbench/phpbench": "^1.0",
                "phpstan/extension-installer": "^1.1",
                "phpstan/phpstan": "^1.8",
                "phpstan/phpstan-mockery": "^1.1",
                "phpstan/phpstan-phpunit": "^1.1",
                "phpunit/phpunit": "^8.5 || ^9",
                "ramsey/composer-repl": "^1.4",
                "slevomat/coding-standard": "^8.4",
                "squizlabs/php_codesniffer": "^3.5",
                "vimeo/psalm": "^4.9"
            },
            "suggest": {
                "ext-bcmath": "Enables faster math with arbitrary-precision integers using BCMath.",
                "ext-gmp": "Enables faster math with arbitrary-precision integers using GMP.",
                "ext-uuid": "Enables the use of PeclUuidTimeGenerator and PeclUuidRandomGenerator.",
                "paragonie/random-lib": "Provides RandomLib for use with the RandomLibAdapter",
                "ramsey/uuid-doctrine": "Allows the use of Ramsey\\Uuid\\Uuid as Doctrine field type."
            },
            "type": "library",
            "extra": {
                "captainhook": {
                    "force-install": true
                }
            },
            "autoload": {
                "files": [
                    "src/functions.php"
                ],
                "psr-4": {
                    "Ramsey\\Uuid\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "A PHP library for generating and working with universally unique identifiers (UUIDs).",
            "keywords": [
                "guid",
                "identifier",
                "uuid"
            ],
            "support": {
                "issues": "https://github.com/ramsey/uuid/issues",
                "source": "https://github.com/ramsey/uuid/tree/4.7.6"
            },
            "funding": [
                {
                    "url": "https://github.com/ramsey",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/ramsey/uuid",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-27T21:32:50+00:00"
        },
        {
            "name": "rize/uri-template",
            "version": "0.3.6",
            "source": {
                "type": "git",
                "url": "https://github.com/rize/UriTemplate.git",
                "reference": "34efe65c79710eed0883884f2285ae6d4a0aad19"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/rize/UriTemplate/zipball/34efe65c79710eed0883884f2285ae6d4a0aad19",
                "reference": "34efe65c79710eed0883884f2285ae6d4a0aad19",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "require-dev": {
                "phpunit/phpunit": "~4.8.36"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Rize\\": "src/Rize"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marut K",
                    "homepage": "http://twitter.com/rezigned"
                }
            ],
            "description": "PHP URI Template (RFC 6570) supports both expansion & extraction",
            "keywords": [
                "RFC 6570",
                "template",
                "uri"
            ],
            "support": {
                "issues": "https://github.com/rize/UriTemplate/issues",
                "source": "https://github.com/rize/UriTemplate/tree/0.3.6"
            },
            "funding": [
                {
                    "url": "https://www.paypal.me/rezigned",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/rezigned",
                    "type": "github"
                },
                {
                    "url": "https://opencollective.com/rize-uri-template",
                    "type": "open_collective"
                }
            ],
            "time": "2024-03-10T08:07:49+00:00"
        },
        {
            "name": "seld/jsonlint",
            "version": "1.10.2",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/jsonlint.git",
                "reference": "9bb7db07b5d66d90f6ebf542f09fc67d800e5259"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/jsonlint/zipball/9bb7db07b5d66d90f6ebf542f09fc67d800e5259",
                "reference": "9bb7db07b5d66d90f6ebf542f09fc67d800e5259",
                "shasum": ""
            },
            "require": {
                "php": "^5.3 || ^7.0 || ^8.0"
            },
            "require-dev": {
                "phpstan/phpstan": "^1.5",
                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0 || ^8.5.13"
            },
            "bin": [
                "bin/jsonlint"
            ],
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Seld\\JsonLint\\": "src/Seld/JsonLint/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "https://seld.be"
                }
            ],
            "description": "JSON Linter",
            "keywords": [
                "json",
                "linter",
                "parser",
                "validator"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/jsonlint/issues",
                "source": "https://github.com/Seldaek/jsonlint/tree/1.10.2"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/seld/jsonlint",
                    "type": "tidelift"
                }
            ],
            "time": "2024-02-07T12:57:50+00:00"
        },
        {
            "name": "symfony/config",
            "version": "v6.4.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/config.git",
                "reference": "12e7e52515ce37191b193cf3365903c4f3951e35"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/config/zipball/12e7e52515ce37191b193cf3365903c4f3951e35",
                "reference": "12e7e52515ce37191b193cf3365903c4f3951e35",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/deprecation-contracts": "^2.5|^3",
                "symfony/filesystem": "^5.4|^6.0|^7.0",
                "symfony/polyfill-ctype": "~1.8"
            },
            "conflict": {
                "symfony/finder": "<5.4",
                "symfony/service-contracts": "<2.5"
            },
            "require-dev": {
                "symfony/event-dispatcher": "^5.4|^6.0|^7.0",
                "symfony/finder": "^5.4|^6.0|^7.0",
                "symfony/messenger": "^5.4|^6.0|^7.0",
                "symfony/service-contracts": "^2.5|^3",
                "symfony/yaml": "^5.4|^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Config\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Helps you find, load, combine, autofill and validate configuration values of any kind",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/config/tree/v6.4.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:49:08+00:00"
        },
        {
            "name": "symfony/deprecation-contracts",
            "version": "v3.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/deprecation-contracts.git",
                "reference": "0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1",
                "reference": "0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.5-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "files": [
                    "function.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "A generic function and convention to trigger deprecation notices",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/deprecation-contracts/tree/v3.5.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-18T09:32:20+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v6.4.9",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "b51ef8059159330b74a4d52f68e671033c0fe463"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/b51ef8059159330b74a4d52f68e671033c0fe463",
                "reference": "b51ef8059159330b74a4d52f68e671033c0fe463",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-mbstring": "~1.8"
            },
            "require-dev": {
                "symfony/process": "^5.4|^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides basic utilities for the filesystem",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/filesystem/tree/v6.4.9"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-28T09:49:33+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v6.4.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "3ef977a43883215d560a2cecb82ec8e62131471c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/3ef977a43883215d560a2cecb82ec8e62131471c",
                "reference": "3ef977a43883215d560a2cecb82ec8e62131471c",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1"
            },
            "require-dev": {
                "symfony/filesystem": "^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Finds files and directories via an intuitive fluent interface",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/finder/tree/v6.4.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:49:08+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.30.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "0424dff1c58f028c451efff2045f5d92410bd540"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/0424dff1c58f028c451efff2045f5d92410bd540",
                "reference": "0424dff1c58f028c451efff2045f5d92410bd540",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "provide": {
                "ext-ctype": "*"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.30.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T15:07:36+00:00"
        },
        {
            "name": "symfony/polyfill-intl-grapheme",
            "version": "v1.30.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-grapheme.git",
                "reference": "64647a7c30b2283f5d49b874d84a18fc22054b7a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-grapheme/zipball/64647a7c30b2283f5d49b874d84a18fc22054b7a",
                "reference": "64647a7c30b2283f5d49b874d84a18fc22054b7a",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Grapheme\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's grapheme_* functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "grapheme",
                "intl",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-grapheme/tree/v1.30.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T15:07:36+00:00"
        },
        {
            "name": "symfony/polyfill-intl-normalizer",
            "version": "v1.30.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-normalizer.git",
                "reference": "a95281b0be0d9ab48050ebd988b967875cdb9fdb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/a95281b0be0d9ab48050ebd988b967875cdb9fdb",
                "reference": "a95281b0be0d9ab48050ebd988b967875cdb9fdb",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Normalizer\\": ""
                },
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's Normalizer class and related functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "intl",
                "normalizer",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-normalizer/tree/v1.30.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T15:07:36+00:00"
        },
        {
            "name": "symfony/polyfill-mbstring",
            "version": "v1.30.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-mbstring.git",
                "reference": "fd22ab50000ef01661e2a31d850ebaa297f8e03c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/fd22ab50000ef01661e2a31d850ebaa297f8e03c",
                "reference": "fd22ab50000ef01661e2a31d850ebaa297f8e03c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "provide": {
                "ext-mbstring": "*"
            },
            "suggest": {
                "ext-mbstring": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Mbstring\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for the Mbstring extension",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "mbstring",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.30.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-19T12:30:46+00:00"
        },
        {
            "name": "symfony/property-access",
            "version": "v6.4.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/property-access.git",
                "reference": "e4d9b00983612f9c0013ca37c61affdba2dd975a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/property-access/zipball/e4d9b00983612f9c0013ca37c61affdba2dd975a",
                "reference": "e4d9b00983612f9c0013ca37c61affdba2dd975a",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/deprecation-contracts": "^2.5|^3",
                "symfony/property-info": "^5.4|^6.0|^7.0"
            },
            "require-dev": {
                "symfony/cache": "^5.4|^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\PropertyAccess\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides functions to read and write from/to an object or array using a simple string notation",
            "homepage": "https://symfony.com",
            "keywords": [
                "access",
                "array",
                "extraction",
                "index",
                "injection",
                "object",
                "property",
                "property-path",
                "reflection"
            ],
            "support": {
                "source": "https://github.com/symfony/property-access/tree/v6.4.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:49:08+00:00"
        },
        {
            "name": "symfony/property-info",
            "version": "v7.1.2",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/property-info.git",
                "reference": "d7b91e4aa07e822a9b935fc29a7254c12d502f16"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/property-info/zipball/d7b91e4aa07e822a9b935fc29a7254c12d502f16",
                "reference": "d7b91e4aa07e822a9b935fc29a7254c12d502f16",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/string": "^6.4|^7.0",
                "symfony/type-info": "^7.1"
            },
            "conflict": {
                "phpdocumentor/reflection-docblock": "<5.2",
                "phpdocumentor/type-resolver": "<1.5.1",
                "symfony/dependency-injection": "<6.4",
                "symfony/serializer": "<6.4"
            },
            "require-dev": {
                "phpdocumentor/reflection-docblock": "^5.2",
                "phpstan/phpdoc-parser": "^1.0",
                "symfony/cache": "^6.4|^7.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/serializer": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\PropertyInfo\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Kévin Dunglas",
                    "email": "dunglas@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Extracts information about PHP class' properties using metadata of popular sources",
            "homepage": "https://symfony.com",
            "keywords": [
                "doctrine",
                "phpdoc",
                "property",
                "symfony",
                "type",
                "validator"
            ],
            "support": {
                "source": "https://github.com/symfony/property-info/tree/v7.1.2"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-26T07:21:35+00:00"
        },
        {
            "name": "symfony/serializer",
            "version": "v6.4.9",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/serializer.git",
                "reference": "56ce31d19127e79647ac53387c7555bdcd5730ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/serializer/zipball/56ce31d19127e79647ac53387c7555bdcd5730ce",
                "reference": "56ce31d19127e79647ac53387c7555bdcd5730ce",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/deprecation-contracts": "^2.5|^3",
                "symfony/polyfill-ctype": "~1.8"
            },
            "conflict": {
                "doctrine/annotations": "<1.12",
                "phpdocumentor/reflection-docblock": "<3.2.2",
                "phpdocumentor/type-resolver": "<1.4.0",
                "symfony/dependency-injection": "<5.4",
                "symfony/property-access": "<5.4",
                "symfony/property-info": "<5.4.24|>=6,<6.2.11",
                "symfony/uid": "<5.4",
                "symfony/validator": "<6.4",
                "symfony/yaml": "<5.4"
            },
            "require-dev": {
                "doctrine/annotations": "^1.12|^2",
                "phpdocumentor/reflection-docblock": "^3.2|^4.0|^5.0",
                "seld/jsonlint": "^1.10",
                "symfony/cache": "^5.4|^6.0|^7.0",
                "symfony/config": "^5.4|^6.0|^7.0",
                "symfony/console": "^5.4|^6.0|^7.0",
                "symfony/dependency-injection": "^5.4|^6.0|^7.0",
                "symfony/error-handler": "^5.4|^6.0|^7.0",
                "symfony/filesystem": "^5.4|^6.0|^7.0",
                "symfony/form": "^5.4|^6.0|^7.0",
                "symfony/http-foundation": "^5.4|^6.0|^7.0",
                "symfony/http-kernel": "^5.4|^6.0|^7.0",
                "symfony/messenger": "^5.4|^6.0|^7.0",
                "symfony/mime": "^5.4|^6.0|^7.0",
                "symfony/property-access": "^5.4.26|^6.3|^7.0",
                "symfony/property-info": "^5.4.24|^6.2.11|^7.0",
                "symfony/translation-contracts": "^2.5|^3",
                "symfony/uid": "^5.4|^6.0|^7.0",
                "symfony/validator": "^6.4|^7.0",
                "symfony/var-dumper": "^5.4|^6.0|^7.0",
                "symfony/var-exporter": "^5.4|^6.0|^7.0",
                "symfony/yaml": "^5.4|^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Serializer\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Handles serializing and deserializing data structures, including object graphs, into array structures or other formats like XML and JSON.",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/serializer/tree/v6.4.9"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-28T07:59:05+00:00"
        },
        {
            "name": "symfony/string",
            "version": "v7.1.2",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/string.git",
                "reference": "14221089ac66cf82e3cf3d1c1da65de305587ff8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/string/zipball/14221089ac66cf82e3cf3d1c1da65de305587ff8",
                "reference": "14221089ac66cf82e3cf3d1c1da65de305587ff8",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-intl-grapheme": "~1.0",
                "symfony/polyfill-intl-normalizer": "~1.0",
                "symfony/polyfill-mbstring": "~1.0"
            },
            "conflict": {
                "symfony/translation-contracts": "<2.5"
            },
            "require-dev": {
                "symfony/emoji": "^7.1",
                "symfony/error-handler": "^6.4|^7.0",
                "symfony/http-client": "^6.4|^7.0",
                "symfony/intl": "^6.4|^7.0",
                "symfony/translation-contracts": "^2.5|^3.0",
                "symfony/var-exporter": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "Resources/functions.php"
                ],
                "psr-4": {
                    "Symfony\\Component\\String\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides an object-oriented API to strings and deals with bytes, UTF-8 code points and grapheme clusters in a unified way",
            "homepage": "https://symfony.com",
            "keywords": [
                "grapheme",
                "i18n",
                "string",
                "unicode",
                "utf-8",
                "utf8"
            ],
            "support": {
                "source": "https://github.com/symfony/string/tree/v7.1.2"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-28T09:27:18+00:00"
        },
        {
            "name": "symfony/type-info",
            "version": "v7.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/type-info.git",
                "reference": "60b28eb733f1453287f1263ed305b96091e0d1dc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/type-info/zipball/60b28eb733f1453287f1263ed305b96091e0d1dc",
                "reference": "60b28eb733f1453287f1263ed305b96091e0d1dc",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "psr/container": "^1.1|^2.0"
            },
            "conflict": {
                "phpstan/phpdoc-parser": "<1.0",
                "symfony/dependency-injection": "<6.4",
                "symfony/property-info": "<6.4"
            },
            "require-dev": {
                "phpstan/phpdoc-parser": "^1.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/property-info": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\TypeInfo\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mathias Arlaud",
                    "email": "mathias.arlaud@gmail.com"
                },
                {
                    "name": "Baptiste LEDUC",
                    "email": "baptiste.leduc@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Extracts PHP types information.",
            "homepage": "https://symfony.com",
            "keywords": [
                "PHPStan",
                "phpdoc",
                "symfony",
                "type"
            ],
            "support": {
                "source": "https://github.com/symfony/type-info/tree/v7.1.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:59:31+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "dealerdirect/phpcodesniffer-composer-installer",
            "version": "v1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/PHPCSStandards/composer-installer.git",
                "reference": "4be43904336affa5c2f70744a348312336afd0da"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/PHPCSStandards/composer-installer/zipball/4be43904336affa5c2f70744a348312336afd0da",
                "reference": "4be43904336affa5c2f70744a348312336afd0da",
                "shasum": ""
            },
            "require": {
                "composer-plugin-api": "^1.0 || ^2.0",
                "php": ">=5.4",
                "squizlabs/php_codesniffer": "^2.0 || ^3.1.0 || ^4.0"
            },
            "require-dev": {
                "composer/composer": "*",
                "ext-json": "*",
                "ext-zip": "*",
                "php-parallel-lint/php-parallel-lint": "^1.3.1",
                "phpcompatibility/php-compatibility": "^9.0",
                "yoast/phpunit-polyfills": "^1.0"
            },
            "type": "composer-plugin",
            "extra": {
                "class": "PHPCSStandards\\Composer\\Plugin\\Installers\\PHPCodeSniffer\\Plugin"
            },
            "autoload": {
                "psr-4": {
                    "PHPCSStandards\\Composer\\Plugin\\Installers\\PHPCodeSniffer\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Franck Nijhof",
                    "email": "franck.nijhof@dealerdirect.com",
                    "homepage": "http://www.frenck.nl",
                    "role": "Developer / IT Manager"
                },
                {
                    "name": "Contributors",
                    "homepage": "https://github.com/PHPCSStandards/composer-installer/graphs/contributors"
                }
            ],
            "description": "PHP_CodeSniffer Standards Composer Installer Plugin",
            "homepage": "http://www.dealerdirect.com",
            "keywords": [
                "PHPCodeSniffer",
                "PHP_CodeSniffer",
                "code quality",
                "codesniffer",
                "composer",
                "installer",
                "phpcbf",
                "phpcs",
                "plugin",
                "qa",
                "quality",
                "standard",
                "standards",
                "style guide",
                "stylecheck",
                "tests"
            ],
            "support": {
                "issues": "https://github.com/PHPCSStandards/composer-installer/issues",
                "source": "https://github.com/PHPCSStandards/composer-installer"
            },
            "time": "2023-01-05T11:28:13+00:00"
        },
        {
            "name": "doctrine/instantiator",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/instantiator.git",
                "reference": "c6222283fa3f4ac679f8b9ced9a4e23f163e80d0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/c6222283fa3f4ac679f8b9ced9a4e23f163e80d0",
                "reference": "c6222283fa3f4ac679f8b9ced9a4e23f163e80d0",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "require-dev": {
                "doctrine/coding-standard": "^11",
                "ext-pdo": "*",
                "ext-phar": "*",
                "phpbench/phpbench": "^1.2",
                "phpstan/phpstan": "^1.9.4",
                "phpstan/phpstan-phpunit": "^1.3",
                "phpunit/phpunit": "^9.5.27",
                "vimeo/psalm": "^5.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com",
                    "homepage": "https://ocramius.github.io/"
                }
            ],
            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
            "keywords": [
                "constructor",
                "instantiate"
            ],
            "support": {
                "issues": "https://github.com/doctrine/instantiator/issues",
                "source": "https://github.com/doctrine/instantiator/tree/2.0.0"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator",
                    "type": "tidelift"
                }
            ],
            "time": "2022-12-30T00:23:10+00:00"
        },
        {
            "name": "keboola/coding-standard",
            "version": "15.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "39ae7c3d14776105d574c7c3636e76b72482916a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/39ae7c3d14776105d574c7c3636e76b72482916a",
                "reference": "39ae7c3d14776105d574c7c3636e76b72482916a",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "^8",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "support": {
                "issues": "https://github.com/keboola/phpcs-standard/issues",
                "source": "https://github.com/keboola/phpcs-standard/tree/15.0.1"
            },
            "time": "2023-12-11T08:31:50+00:00"
        },
        {
            "name": "keboola/datadir-tests",
            "version": "5.6.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/datadir-tests.git",
                "reference": "d43f7657806d660f2326d8c438dd800d7ccc1e3d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/datadir-tests/zipball/d43f7657806d660f2326d8c438dd800d7ccc1e3d",
                "reference": "d43f7657806d660f2326d8c438dd800d7ccc1e3d",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/php-temp": "^2.0",
                "php": "^7.4|^8.0",
                "phpunit/phpunit": "^9.5",
                "symfony/filesystem": "^5.0|^6.0",
                "symfony/finder": "^5.0|^6.0",
                "symfony/process": "^5.0|^6.0"
            },
            "require-dev": {
                "keboola/coding-standard": "^13.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/phpstan": "^1.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DatadirTests\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Tool for functional testing of Keboola Connection components",
            "support": {
                "issues": "https://github.com/keboola/datadir-tests/issues",
                "source": "https://github.com/keboola/datadir-tests/tree/5.6.0"
            },
            "time": "2023-10-20T08:02:53+00:00"
        },
        {
            "name": "keboola/php-temp",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/filesystem": ">2.8"
            },
            "require-dev": {
                "infection/infection": "^0.12",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^8.0",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0|^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Temp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Temp library handles application temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-temp/issues",
                "source": "https://github.com/keboola/php-temp/tree/2.0.1"
            },
            "time": "2019-04-26T07:18:24+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.12.0",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c",
                "reference": "3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "conflict": {
                "doctrine/collections": "<1.6.8",
                "doctrine/common": "<2.13.3 || >=3 <3.2.2"
            },
            "require-dev": {
                "doctrine/collections": "^1.6.8",
                "doctrine/common": "^2.13.3 || ^3.2.2",
                "phpspec/prophecy": "^1.10",
                "phpunit/phpunit": "^7.5.20 || ^8.5.23 || ^9.5.13"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ],
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "support": {
                "issues": "https://github.com/myclabs/DeepCopy/issues",
                "source": "https://github.com/myclabs/DeepCopy/tree/1.12.0"
            },
            "funding": [
                {
                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-12T14:39:25+00:00"
        },
        {
            "name": "nikic/php-parser",
            "version": "v5.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/nikic/PHP-Parser.git",
                "reference": "139676794dc1e9231bf7bcd123cfc0c99182cb13"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/139676794dc1e9231bf7bcd123cfc0c99182cb13",
                "reference": "139676794dc1e9231bf7bcd123cfc0c99182cb13",
                "shasum": ""
            },
            "require": {
                "ext-ctype": "*",
                "ext-json": "*",
                "ext-tokenizer": "*",
                "php": ">=7.4"
            },
            "require-dev": {
                "ircmaxell/php-yacc": "^0.0.7",
                "phpunit/phpunit": "^7.0 || ^8.0 || ^9.0"
            },
            "bin": [
                "bin/php-parse"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpParser\\": "lib/PhpParser"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Nikita Popov"
                }
            ],
            "description": "A PHP parser written in PHP",
            "keywords": [
                "parser",
                "php"
            ],
            "support": {
                "issues": "https://github.com/nikic/PHP-Parser/issues",
                "source": "https://github.com/nikic/PHP-Parser/tree/v5.0.2"
            },
            "time": "2024-03-05T20:51:40+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "54750ef60c58e43759730615a392c31c80e23176"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/54750ef60c58e43759730615a392c31c80e23176",
                "reference": "54750ef60c58e43759730615a392c31c80e23176",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-phar": "*",
                "ext-xmlwriter": "*",
                "phar-io/version": "^3.0.1",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "support": {
                "issues": "https://github.com/phar-io/manifest/issues",
                "source": "https://github.com/phar-io/manifest/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2024-03-03T12:33:53+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "3.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "4f7fd7836c6f332bb2933569e566a0d6c4cbed74"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/4f7fd7836c6f332bb2933569e566a0d6c4cbed74",
                "reference": "4f7fd7836c6f332bb2933569e566a0d6c4cbed74",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "support": {
                "issues": "https://github.com/phar-io/version/issues",
                "source": "https://github.com/phar-io/version/tree/3.2.1"
            },
            "time": "2022-02-21T01:04:05+00:00"
        },
        {
            "name": "php-parallel-lint/php-parallel-lint",
            "version": "v1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-parallel-lint/PHP-Parallel-Lint.git",
                "reference": "6db563514f27e19595a19f45a4bf757b6401194e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-parallel-lint/PHP-Parallel-Lint/zipball/6db563514f27e19595a19f45a4bf757b6401194e",
                "reference": "6db563514f27e19595a19f45a4bf757b6401194e",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "php": ">=5.3.0"
            },
            "replace": {
                "grogy/php-parallel-lint": "*",
                "jakub-onderka/php-parallel-lint": "*"
            },
            "require-dev": {
                "nette/tester": "^1.3 || ^2.0",
                "php-parallel-lint/php-console-highlighter": "0.* || ^1.0",
                "squizlabs/php_codesniffer": "^3.6"
            },
            "suggest": {
                "php-parallel-lint/php-console-highlighter": "Highlight syntax in code snippet"
            },
            "bin": [
                "parallel-lint"
            ],
            "type": "library",
            "autoload": {
                "classmap": [
                    "./src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Jakub Onderka",
                    "email": "ahoj@jakubonderka.cz"
                }
            ],
            "description": "This tool checks the syntax of PHP files about 20x faster than serial check.",
            "homepage": "https://github.com/php-parallel-lint/PHP-Parallel-Lint",
            "keywords": [
                "lint",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/issues",
                "source": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/tree/v1.4.0"
            },
            "time": "2024-03-27T12:14:49+00:00"
        },
        {
            "name": "phpstan/phpdoc-parser",
            "version": "1.29.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpdoc-parser.git",
                "reference": "fcaefacf2d5c417e928405b71b400d4ce10daaf4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpdoc-parser/zipball/fcaefacf2d5c417e928405b71b400d4ce10daaf4",
                "reference": "fcaefacf2d5c417e928405b71b400d4ce10daaf4",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "require-dev": {
                "doctrine/annotations": "^2.0",
                "nikic/php-parser": "^4.15",
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpstan/extension-installer": "^1.0",
                "phpstan/phpstan": "^1.5",
                "phpstan/phpstan-phpunit": "^1.1",
                "phpstan/phpstan-strict-rules": "^1.0",
                "phpunit/phpunit": "^9.5",
                "symfony/process": "^5.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "PHPStan\\PhpDocParser\\": [
                        "src/"
                    ]
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPDoc parser with support for nullable, intersection and generic types",
            "support": {
                "issues": "https://github.com/phpstan/phpdoc-parser/issues",
                "source": "https://github.com/phpstan/phpdoc-parser/tree/1.29.1"
            },
            "time": "2024-05-31T08:52:43+00:00"
        },
        {
            "name": "phpstan/phpstan",
            "version": "1.11.5",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan.git",
                "reference": "490f0ae1c92b082f154681d7849aee776a7c1443"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan/zipball/490f0ae1c92b082f154681d7849aee776a7c1443",
                "reference": "490f0ae1c92b082f154681d7849aee776a7c1443",
                "shasum": ""
            },
            "require": {
                "php": "^7.2|^8.0"
            },
            "conflict": {
                "phpstan/phpstan-shim": "*"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan - PHP Static Analysis Tool",
            "keywords": [
                "dev",
                "static analysis"
            ],
            "support": {
                "docs": "https://phpstan.org/user-guide/getting-started",
                "forum": "https://github.com/phpstan/phpstan/discussions",
                "issues": "https://github.com/phpstan/phpstan/issues",
                "security": "https://github.com/phpstan/phpstan/security/policy",
                "source": "https://github.com/phpstan/phpstan-src"
            },
            "funding": [
                {
                    "url": "https://github.com/ondrejmirtes",
                    "type": "github"
                },
                {
                    "url": "https://github.com/phpstan",
                    "type": "github"
                }
            ],
            "time": "2024-06-17T15:10:54+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "9.2.31",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "48c34b5d8d983006bd2adc2d0de92963b9155965"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/48c34b5d8d983006bd2adc2d0de92963b9155965",
                "reference": "48c34b5d8d983006bd2adc2d0de92963b9155965",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-xmlwriter": "*",
                "nikic/php-parser": "^4.18 || ^5.0",
                "php": ">=7.3",
                "phpunit/php-file-iterator": "^3.0.3",
                "phpunit/php-text-template": "^2.0.2",
                "sebastian/code-unit-reverse-lookup": "^2.0.2",
                "sebastian/complexity": "^2.0",
                "sebastian/environment": "^5.1.2",
                "sebastian/lines-of-code": "^1.0.3",
                "sebastian/version": "^3.0.1",
                "theseer/tokenizer": "^1.2.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcov": "PHP extension that provides line coverage",
                "ext-xdebug": "PHP extension that provides line coverage as well as branch and path coverage"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                "security": "https://github.com/sebastianbergmann/php-code-coverage/security/policy",
                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.31"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:37:42+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "3.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf",
                "reference": "cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2021-12-02T12:48:52+00:00"
        },
        {
            "name": "phpunit/php-invoker",
            "version": "3.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-invoker.git",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "ext-pcntl": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcntl": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Invoke callables with a timeout",
            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
            "keywords": [
                "process"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
                "source": "https://github.com/sebastianbergmann/php-invoker/tree/3.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:58:55+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
                "source": "https://github.com/sebastianbergmann/php-text-template/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T05:33:50+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "5.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-timer/issues",
                "source": "https://github.com/sebastianbergmann/php-timer/tree/5.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:16:10+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "9.6.19",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "a1a54a473501ef4cdeaae4e06891674114d79db8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/a1a54a473501ef4cdeaae4e06891674114d79db8",
                "reference": "a1a54a473501ef4cdeaae4e06891674114d79db8",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.3.1 || ^2",
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "ext-xmlwriter": "*",
                "myclabs/deep-copy": "^1.10.1",
                "phar-io/manifest": "^2.0.3",
                "phar-io/version": "^3.0.2",
                "php": ">=7.3",
                "phpunit/php-code-coverage": "^9.2.28",
                "phpunit/php-file-iterator": "^3.0.5",
                "phpunit/php-invoker": "^3.1.1",
                "phpunit/php-text-template": "^2.0.3",
                "phpunit/php-timer": "^5.0.2",
                "sebastian/cli-parser": "^1.0.1",
                "sebastian/code-unit": "^1.0.6",
                "sebastian/comparator": "^4.0.8",
                "sebastian/diff": "^4.0.3",
                "sebastian/environment": "^5.1.3",
                "sebastian/exporter": "^4.0.5",
                "sebastian/global-state": "^5.0.1",
                "sebastian/object-enumerator": "^4.0.3",
                "sebastian/resource-operations": "^3.0.3",
                "sebastian/type": "^3.2",
                "sebastian/version": "^3.0.2"
            },
            "suggest": {
                "ext-soap": "To be able to generate mocks based on WSDL files",
                "ext-xdebug": "PHP extension that provides line coverage as well as branch and path coverage"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.6-dev"
                }
            },
            "autoload": {
                "files": [
                    "src/Framework/Assert/Functions.php"
                ],
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                "security": "https://github.com/sebastianbergmann/phpunit/security/policy",
                "source": "https://github.com/sebastianbergmann/phpunit/tree/9.6.19"
            },
            "funding": [
                {
                    "url": "https://phpunit.de/sponsors.html",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpunit/phpunit",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-05T04:35:58+00:00"
        },
        {
            "name": "rector/rector",
            "version": "1.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/rectorphp/rector.git",
                "reference": "c930cdb21294f10955ddfc31b720971e8333943d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/rectorphp/rector/zipball/c930cdb21294f10955ddfc31b720971e8333943d",
                "reference": "c930cdb21294f10955ddfc31b720971e8333943d",
                "shasum": ""
            },
            "require": {
                "php": "^7.2|^8.0",
                "phpstan/phpstan": "^1.11"
            },
            "conflict": {
                "rector/rector-doctrine": "*",
                "rector/rector-downgrade-php": "*",
                "rector/rector-phpunit": "*",
                "rector/rector-symfony": "*"
            },
            "suggest": {
                "ext-dom": "To manipulate phpunit.xml via the custom-rule command"
            },
            "bin": [
                "bin/rector"
            ],
            "type": "library",
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Instant Upgrade and Automated Refactoring of any PHP code",
            "keywords": [
                "automation",
                "dev",
                "migration",
                "refactoring"
            ],
            "support": {
                "issues": "https://github.com/rectorphp/rector/issues",
                "source": "https://github.com/rectorphp/rector/tree/1.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/tomasvotruba",
                    "type": "github"
                }
            ],
            "time": "2024-06-21T07:51:17+00:00"
        },
        {
            "name": "sebastian/cli-parser",
            "version": "1.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/cli-parser.git",
                "reference": "2b56bea83a09de3ac06bb18b92f068e60cc6f50b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/2b56bea83a09de3ac06bb18b92f068e60cc6f50b",
                "reference": "2b56bea83a09de3ac06bb18b92f068e60cc6f50b",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for parsing CLI options",
            "homepage": "https://github.com/sebastianbergmann/cli-parser",
            "support": {
                "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
                "source": "https://github.com/sebastianbergmann/cli-parser/tree/1.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:27:43+00:00"
        },
        {
            "name": "sebastian/code-unit",
            "version": "1.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit.git",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the PHP code units",
            "homepage": "https://github.com/sebastianbergmann/code-unit",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit/issues",
                "source": "https://github.com/sebastianbergmann/code-unit/tree/1.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:08:54+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:30:19+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "4.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "fa0f136dd2334583309d32b62544682ee972b51a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/fa0f136dd2334583309d32b62544682ee972b51a",
                "reference": "fa0f136dd2334583309d32b62544682ee972b51a",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/diff": "^4.0",
                "sebastian/exporter": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/comparator/issues",
                "source": "https://github.com/sebastianbergmann/comparator/tree/4.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2022-09-14T12:41:17+00:00"
        },
        {
            "name": "sebastian/complexity",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/complexity.git",
                "reference": "25f207c40d62b8b7aa32f5ab026c53561964053a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/25f207c40d62b8b7aa32f5ab026c53561964053a",
                "reference": "25f207c40d62b8b7aa32f5ab026c53561964053a",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.18 || ^5.0",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for calculating the complexity of PHP code units",
            "homepage": "https://github.com/sebastianbergmann/complexity",
            "support": {
                "issues": "https://github.com/sebastianbergmann/complexity/issues",
                "source": "https://github.com/sebastianbergmann/complexity/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-12-22T06:19:30+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "ba01945089c3a293b01ba9badc29ad55b106b0bc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/ba01945089c3a293b01ba9badc29ad55b106b0bc",
                "reference": "ba01945089c3a293b01ba9badc29ad55b106b0bc",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3",
                "symfony/process": "^4.2 || ^5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/diff/issues",
                "source": "https://github.com/sebastianbergmann/diff/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:30:58+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "5.1.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "830c43a844f1f8d5b7a1f6d6076b784454d8b7ed"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/830c43a844f1f8d5b7a1f6d6076b784454d8b7ed",
                "reference": "830c43a844f1f8d5b7a1f6d6076b784454d8b7ed",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-posix": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "http://www.github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/environment/issues",
                "source": "https://github.com/sebastianbergmann/environment/tree/5.1.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-02-03T06:03:51+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "78c00df8f170e02473b682df15bfcdacc3d32d72"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/78c00df8f170e02473b682df15bfcdacc3d32d72",
                "reference": "78c00df8f170e02473b682df15bfcdacc3d32d72",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-mbstring": "*",
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "https://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/exporter/issues",
                "source": "https://github.com/sebastianbergmann/exporter/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:33:00+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "5.0.7",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9",
                "reference": "bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-dom": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-uopz": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "http://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/global-state/issues",
                "source": "https://github.com/sebastianbergmann/global-state/tree/5.0.7"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-02T06:35:11+00:00"
        },
        {
            "name": "sebastian/lines-of-code",
            "version": "1.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/lines-of-code.git",
                "reference": "e1e4a170560925c26d424b6a03aed157e7dcc5c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/e1e4a170560925c26d424b6a03aed157e7dcc5c5",
                "reference": "e1e4a170560925c26d424b6a03aed157e7dcc5c5",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.18 || ^5.0",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for counting the lines of code in PHP source code",
            "homepage": "https://github.com/sebastianbergmann/lines-of-code",
            "support": {
                "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/1.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-12-22T06:20:34+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:12:34+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
                "source": "https://github.com/sebastianbergmann/object-reflector/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:14:26+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "4.0.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1",
                "reference": "e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "https://github.com/sebastianbergmann/recursion-context",
            "support": {
                "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
                "source": "https://github.com/sebastianbergmann/recursion-context/tree/4.0.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-02-03T06:07:39+00:00"
        },
        {
            "name": "sebastian/resource-operations",
            "version": "3.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/resource-operations.git",
                "reference": "05d5692a7993ecccd56a03e40cd7e5b09b1d404e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/05d5692a7993ecccd56a03e40cd7e5b09b1d404e",
                "reference": "05d5692a7993ecccd56a03e40cd7e5b09b1d404e",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides a list of PHP built-in functions that operate on resources",
            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
            "support": {
                "source": "https://github.com/sebastianbergmann/resource-operations/tree/3.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-03-14T16:00:52+00:00"
        },
        {
            "name": "sebastian/type",
            "version": "3.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/type.git",
                "reference": "75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7",
                "reference": "75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the types of the PHP type system",
            "homepage": "https://github.com/sebastianbergmann/type",
            "support": {
                "issues": "https://github.com/sebastianbergmann/type/issues",
                "source": "https://github.com/sebastianbergmann/type/tree/3.2.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2023-02-03T06:13:03+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "c6c1022351a901512170118436c764e473f6de8c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c",
                "reference": "c6c1022351a901512170118436c764e473f6de8c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "support": {
                "issues": "https://github.com/sebastianbergmann/version/issues",
                "source": "https://github.com/sebastianbergmann/version/tree/3.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:39:44+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "8.15.0",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "7d1d957421618a3803b593ec31ace470177d7817"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/7d1d957421618a3803b593ec31ace470177d7817",
                "reference": "7d1d957421618a3803b593ec31ace470177d7817",
                "shasum": ""
            },
            "require": {
                "dealerdirect/phpcodesniffer-composer-installer": "^0.6.2 || ^0.7 || ^1.0",
                "php": "^7.2 || ^8.0",
                "phpstan/phpdoc-parser": "^1.23.1",
                "squizlabs/php_codesniffer": "^3.9.0"
            },
            "require-dev": {
                "phing/phing": "2.17.4",
                "php-parallel-lint/php-parallel-lint": "1.3.2",
                "phpstan/phpstan": "1.10.60",
                "phpstan/phpstan-deprecation-rules": "1.1.4",
                "phpstan/phpstan-phpunit": "1.3.16",
                "phpstan/phpstan-strict-rules": "1.5.2",
                "phpunit/phpunit": "8.5.21|9.6.8|10.5.11"
            },
            "type": "phpcodesniffer-standard",
            "extra": {
                "branch-alias": {
                    "dev-master": "8.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "keywords": [
                "dev",
                "phpcs"
            ],
            "support": {
                "issues": "https://github.com/slevomat/coding-standard/issues",
                "source": "https://github.com/slevomat/coding-standard/tree/8.15.0"
            },
            "funding": [
                {
                    "url": "https://github.com/kukulich",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/slevomat/coding-standard",
                    "type": "tidelift"
                }
            ],
            "time": "2024-03-09T15:20:58+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.10.1",
            "source": {
                "type": "git",
                "url": "https://github.com/PHPCSStandards/PHP_CodeSniffer.git",
                "reference": "8f90f7a53ce271935282967f53d0894f8f1ff877"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/PHPCSStandards/PHP_CodeSniffer/zipball/8f90f7a53ce271935282967f53d0894f8f1ff877",
                "reference": "8f90f7a53ce271935282967f53d0894f8f1ff877",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0 || ^8.0 || ^9.3.4"
            },
            "bin": [
                "bin/phpcbf",
                "bin/phpcs"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "Former lead"
                },
                {
                    "name": "Juliette Reinders Folmer",
                    "role": "Current lead"
                },
                {
                    "name": "Contributors",
                    "homepage": "https://github.com/PHPCSStandards/PHP_CodeSniffer/graphs/contributors"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "https://github.com/PHPCSStandards/PHP_CodeSniffer",
            "keywords": [
                "phpcs",
                "standards",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/PHPCSStandards/PHP_CodeSniffer/issues",
                "security": "https://github.com/PHPCSStandards/PHP_CodeSniffer/security/policy",
                "source": "https://github.com/PHPCSStandards/PHP_CodeSniffer",
                "wiki": "https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki"
            },
            "funding": [
                {
                    "url": "https://github.com/PHPCSStandards",
                    "type": "github"
                },
                {
                    "url": "https://github.com/jrfnl",
                    "type": "github"
                },
                {
                    "url": "https://opencollective.com/php_codesniffer",
                    "type": "open_collective"
                }
            ],
            "time": "2024-05-22T21:24:41+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v6.4.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "8d92dd79149f29e89ee0f480254db595f6a6a2c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/8d92dd79149f29e89ee0f480254db595f6a6a2c5",
                "reference": "8d92dd79149f29e89ee0f480254db595f6a6a2c5",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Executes commands in sub-processes",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/process/tree/v6.4.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:49:08+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.2.3",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2",
                "reference": "737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "support": {
                "issues": "https://github.com/theseer/tokenizer/issues",
                "source": "https://github.com/theseer/tokenizer/tree/1.2.3"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2024-03-03T12:36:25+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": "^8",
        "ext-json": "*"
    },
    "platform-dev": [],
    "plugin-api-version": "2.6.0"
}



================================================
FILE: docker-compose.yml
================================================
version: '3'
services:
  app: &main
    image: ex-data-telemetry
    build: .
    volumes:
      - ./data:/data
    environment:
      - SNOWFLAKE_DB_HOST
      - SNOWFLAKE_DB_USER
      - SNOWFLAKE_DB_PASSWORD
      - SNOWFLAKE_DB_DATABASE
      - SNOWFLAKE_DB_PORT
      - SNOWFLAKE_DB_SCHEMA
      - SNOWFLAKE_DB_WAREHOUSE
      - KBC_PROJECTID
      - KBC_STACKID
      - KBC_DATA_TYPE_SUPPORT=none

  dev:
    <<: *main
    volumes:
      - ./:/code
      - ./data:/data



================================================
FILE: Dockerfile
================================================
FROM php:8.3-cli-bullseye

ARG SNOWFLAKE_ODBC_VERSION=2.25.12
ARG SNOWFLAKE_SNOWSQL_VERSION=1.3.0
ARG SNOWFLAKE_GPG_KEY=630D9F3CAB551AF3
ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600
ENV TMPDIR=/opt/snowsqltempdir

RUN mkdir -p /opt/snowsqltempdir

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update && apt-get install -y \
        git \
        locales \
        unzip \
        unixodbc \
        unixodbc-dev \
        libpq-dev \
        debsig-verify \
        libicu-dev \
        dirmngr \
	&& rm -r /var/lib/apt/lists/* \
	&& sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
	&& locale-gen \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

RUN docker-php-ext-configure intl \
    && docker-php-ext-install intl

# Snowflake ODBC
# https://github.com/docker-library/php/issues/103#issuecomment-353674490
RUN set -ex; \
    docker-php-source extract; \
    { \
        echo '# https://github.com/docker-library/php/issues/103#issuecomment-353674490'; \
        echo 'AC_DEFUN([PHP_ALWAYS_SHARED],[])dnl'; \
        echo; \
        cat /usr/src/php/ext/odbc/config.m4; \
    } > temp.m4; \
    mv temp.m4 /usr/src/php/ext/odbc/config.m4; \
    docker-php-ext-configure odbc --with-unixODBC=shared,/usr; \
    docker-php-ext-install odbc; \
    docker-php-source delete

#snoflake download + verify package
COPY docker/driver/snowflake-policy.pol /etc/debsig/policies/$SNOWFLAKE_GPG_KEY/generic.pol
COPY docker/driver/simba.snowflake.ini /usr/lib/snowflake/odbc/lib/simba.snowflake.ini
ADD https://sfc-repo.azure.snowflakecomputing.com/odbc/linux/$SNOWFLAKE_ODBC_VERSION/snowflake-odbc-$SNOWFLAKE_ODBC_VERSION.x86_64.deb /tmp/snowflake-odbc.deb
ADD https://sfc-repo.azure.snowflakecomputing.com/snowsql/bootstrap/1.3/linux_x86_64/snowsql-$SNOWFLAKE_SNOWSQL_VERSION-linux_x86_64.bash /usr/bin/snowsql-linux_x86_64.bash
ADD https://sfc-repo.azure.snowflakecomputing.com/snowsql/bootstrap/1.3/linux_x86_64/snowsql-$SNOWFLAKE_SNOWSQL_VERSION-linux_x86_64.bash.sig /tmp/snowsql-linux_x86_64.bash.sig

# snowflake - charset settings
ENV LANG en_US.UTF-8
ENV LC_ALL=C.UTF-8

RUN mkdir -p ~/.gnupg \
    && chmod 700 ~/.gnupg \
    && echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf \
    && mkdir -p /etc/gnupg \
    && echo "allow-weak-digest-algos" >> /etc/gnupg/gpg.conf \
    && mkdir -p /usr/share/debsig/keyrings/$SNOWFLAKE_GPG_KEY \
    && if ! gpg --keyserver hkp://keys.gnupg.net --recv-keys $SNOWFLAKE_GPG_KEY; then \
        gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys $SNOWFLAKE_GPG_KEY;  \
    fi \
    && gpg --export $SNOWFLAKE_GPG_KEY > /usr/share/debsig/keyrings/$SNOWFLAKE_GPG_KEY/debsig.gpg \
    && debsig-verify /tmp/snowflake-odbc.deb \
    && gpg --verify /tmp/snowsql-linux_x86_64.bash.sig /usr/bin/snowsql-linux_x86_64.bash \
    && gpg --batch --delete-key --yes $SNOWFLAKE_GPG_KEY \
    && dpkg -i /tmp/snowflake-odbc.deb \
    && SNOWSQL_DEST=/usr/bin SNOWSQL_LOGIN_SHELL=~/.profile bash /usr/bin/snowsql-linux_x86_64.bash \
    && rm /tmp/snowflake-odbc.deb

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/

# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD ["php", "/code/src/run.php"]



================================================
FILE: phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>



================================================
FILE: phpstan.neon
================================================
parameters:
    ignoreErrors:
        - '#Cannot call method [a-zA-Z]+\(\) on Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface\|null.#'



================================================
FILE: phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="true"
         bootstrap="tests/phpunit/bootstrap.php">
    <testsuite name="Main Test Suite">
        <directory>tests/phpunit</directory>
    </testsuite>
</phpunit>



================================================
FILE: rector.php
================================================
<?php

declare(strict_types=1);

use Rector\Config\RectorConfig;
use Rector\PHPUnit\Set\PHPUnitSetList;
use Rector\TypeDeclaration\Rector\ClassMethod\AddParamTypeBasedOnPHPUnitDataProviderRector;
use Rector\TypeDeclaration\Rector\ClassMethod\AddReturnTypeDeclarationRector;
use Rector\TypeDeclaration\Rector\ClassMethod\AddVoidReturnTypeWhereNoReturnRector;

return RectorConfig::configure()
    ->withPaths([
        __DIR__ . '/src',
        __DIR__ . '/tests',
    ])
    ->withPhpSets()
    ->withSets([
        PHPUnitSetList::PHPUNIT_50,
        PHPUnitSetList::PHPUNIT_60,
        PHPUnitSetList::PHPUNIT_70,
        PHPUnitSetList::PHPUNIT_80,
        PHPUnitSetList::PHPUNIT_90,
    ])
    ->withPHPStanConfigs([__DIR__ . '/phpstan.neon'])
    ->withRules([
        AddVoidReturnTypeWhereNoReturnRector::class,
        AddReturnTypeDeclarationRector::class,
        AddParamTypeBasedOnPHPUnitDataProviderRector::class,
    ])
    ->withPreparedSets(
        deadCode: true,
        codeQuality: true,
        typeDeclarations: true,
    );



================================================
FILE: .dockerignore
================================================
vendor/



================================================
FILE: docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT



================================================
FILE: docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1



================================================
FILE: docker/driver/simba.snowflake.ini
================================================
[Driver]
DriverManagerEncoding=UTF-16
DriverLocale=en-US
ErrorMessagesPath=/usr/lib/snowflake/odbc/ErrorMessages/
LogNamespace=
LogPath=/tmp
ODBCInstLib=libodbcinst.so
#LogLevel=6
CABundleFile=/usr/lib/snowflake/odbc/lib/cacert.pem
DisableOCSPCheck=true



================================================
FILE: docker/driver/snowflake-policy.pol
================================================
<?xml version="1.0"?>
<!DOCTYPE Policy SYSTEM "http://www.debian.org/debsig/1.0/policy.dtd">
<Policy xmlns="https://www.debian.org/debsig/1.0/">
    <Origin Name="Snowflake Computing" id="630D9F3CAB551AF3" Description="Snowflake ODBC Driver DEB package"/>
    <Selection>
        <Required Type="origin" File="debsig.gpg" id="630D9F3CAB551AF3"/>
    </Selection>
    <Verification MinOptional="0">
        <Required Type="origin" File="debsig.gpg" id="630D9F3CAB551AF3"/>
    </Verification>
</Policy>



================================================
FILE: src/Component.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData;

use Keboola\Component\BaseComponent;

class Component extends BaseComponent
{
    protected function run(): void
    {
        $extractor = new Extractor(
            new DbConnector($this->getAppConfig(), $this->getLogger()),
            $this->getAppConfig(),
            $this->getLogger(),
            $this->getManifestManager(),
            $this->getDataDir(),
            $this->getInputState(),
        );

        $result = $extractor->extractData();

        if ($result !== []) {
            $this->writeOutputStateToFile($result);
        } elseif ($this->getInputState() !== []) {
            $this->writeOutputStateToFile($this->getInputState());
        }
    }

    private function getAppConfig(): Config
    {
        /** @var Config $config */
        $config = $this->getConfig();

        return $config;
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        return ConfigDefinition::class;
    }
}



================================================
FILE: src/Config.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData;

use Keboola\Component\Config\BaseConfig;
use Keboola\Component\UserException;
use Keboola\TelemetryData\ValueObject\Table;

class Config extends BaseConfig
{
    public const RETRY_MAX_ATTEMPTS = 5;

    public const RETRY_DEFAULT_BACKOFF_INTERVAL = 1000;

    public const MODE_PROJECT = 'project';

    public const MODE_ORGANIZATION = 'organization';

    public const MODE_ACTIVITY_CENTER = 'activity-center';

    public const STATE_INCREMENTAL_KEY = 'lastFetchedValue';

    public function getProjectId(): string
    {
        $projectId = getenv('KBC_PROJECTID');
        if (!$projectId) {
            throw new UserException('Cannot find "KBC_PROJECTID" environment.');
        }
        return $projectId;
    }

    public function getMode(): string
    {
        return $this->getStringValue(['parameters', 'mode']);
    }

    public function getKbcStackId(): string
    {
        if (isset($this->getImageParameters()['stackId'])) {
            return $this->getImageParameters()['stackId'];
        }
        $url = getenv('KBC_STACKID');
        if (!$url) {
            throw new UserException('Cannot find "KBC_STACKID" environment.');
        }
        return $url;
    }

    public function getDbHost(): string
    {
        $imageParameters = $this->getImageParameters();
        return $imageParameters['db']['host'];
    }

    public function getDbPort(): string
    {
        $imageParameters = $this->getImageParameters();
        return (string) $imageParameters['db']['port'];
    }

    public function getDbUser(): string
    {
        $imageParameters = $this->getImageParameters();
        return $imageParameters['db']['user'];
    }

    public function getDbPassword(): string
    {
        $imageParameters = $this->getImageParameters();
        return $imageParameters['db']['#password'];
    }

    public function getDbDatabase(): string
    {
        $imageParameters = $this->getImageParameters();
        return $imageParameters['db']['database'];
    }

    public function getDbSchema(): string
    {
        $imageParameters = $this->getImageParameters();
        return $imageParameters['db']['schema'];
    }

    public function getDbWarehouse(): string
    {
        $imageParameters = $this->getImageParameters();
        return $imageParameters['db']['warehouse'];
    }

    /**
     * @return Table[]|null
     */
    public function getTables(): ?array
    {
        $imageParameters = $this->getImageParameters();
        if (!isset($imageParameters['tables'])) {
            return null;
        }

        return array_map(
            fn($v) => Table::buildFromArray([
                'schema_name' => $this->getDbSchema(),
                'name' => $v,
            ]),
            $imageParameters['tables'],
        );
    }

    public function isIncrementalFetching(?string $tableName = null): bool
    {
        if ($tableName && in_array($tableName, $this->tablesIgnoringIncrementalFetching())) {
            return false;
        }

        return (bool) $this->getValue(['parameters', 'incrementalFetching']);
    }

    public function isIncremental(?string $tableName = null): bool
    {
        if ($tableName && in_array($tableName, $this->tablesIgnoringIncrementalFetching())) {
            return false;
        }

        return (bool) $this->getValue(['parameters', 'incremental']);
    }

    /**
     * @return string[]
     */
    private function tablesIgnoringIncrementalFetching(): array
    {
        return $this->getImageParameters()['tablesIgnoringIncrementalFetching'] ?? [];
    }
}



================================================
FILE: src/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData;

use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class ConfigDefinition extends BaseConfigDefinition
{
    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->children()
                ->enumNode('mode')
                    ->values([Config::MODE_PROJECT, Config::MODE_ORGANIZATION, Config::MODE_ACTIVITY_CENTER])
                    ->defaultValue(Config::MODE_PROJECT)
                ->end()
                ->booleanNode('incrementalFetching')->defaultFalse()->end()
                ->booleanNode('incremental')->defaultFalse()->end()
            ->end()
        ;
        // @formatter:on
        return $parametersNode;
    }
}



================================================
FILE: src/DbConnector.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData;

use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Exception\DriverException;
use Keboola\Component\UserException;
use Keboola\TableBackendUtils\Connection\Snowflake\SnowflakeConnectionFactory;
use Keboola\TableBackendUtils\Escaping\Snowflake\SnowflakeQuote;
use Keboola\TelemetryData\ValueObject\Column;
use Keboola\TelemetryData\ValueObject\Table;
use Keboola\Temp\Temp;
use Psr\Log\LoggerInterface;
use SplFileInfo;

class DbConnector
{
    private Connection $connection;

    private SplFileInfo $snowSqlConfigFile;

    public function __construct(private Config $config, private LoggerInterface $logger)
    {
        $this->connection = $this->createConnection();
        $this->snowSqlConfigFile = $this->createSnowSqlConfig();
    }

    private function createConnection(): Connection
    {
        try {
            $connection = SnowflakeConnectionFactory::getConnection(
                $this->config->getDbHost(),
                $this->config->getDbUser(),
                $this->config->getDbPassword(),
                [
                    'port' => $this->config->getDbPort(),
                    'warehouse' => $this->config->getDbWarehouse(),
                    'database' => $this->config->getDbDatabase(),
                ],
            );
            $connection->executeStatement(
                sprintf(
                    'USE SCHEMA %s',
                    SnowflakeQuote::quoteSingleIdentifier($this->config->getDbSchema()),
                ),
            );
        } catch (DriverException $e) {
            throw new UserException($e->getMessage(), 0, $e);
        }

        return $connection;
    }

    public function getSnowSqlConfigFile(): SplFileInfo
    {
        return $this->snowSqlConfigFile;
    }

    /**
     * @param Table[]|null $whiteList
     * @return Table[]
     */
    public function getTables(?array $whiteList = null): array
    {
        if (is_array($whiteList) && !$whiteList) {
            return [];
        }

        $tables = $this->queryTables($whiteList);
        if ($tables === []) {
            return [];
        }

        $tableObjects = [];
        $sqlWhereElements = [];
        foreach ($tables as $table) {
            $tableObject = Table::buildFromArray(
                $table,
            );

            $tableId = sprintf(
                '%s.%s',
                $tableObject->getSchema(),
                $tableObject->getName(),
            );

            $tableObjects[$tableId] = $tableObject;
            $sqlWhereElements[] = sprintf(
                '(table_schema = %s AND table_name = %s)',
                SnowflakeQuote::quote($table['schema_name']),
                SnowflakeQuote::quote($table['name']),
            );
        }

        $primaryKeys = $this->queryPrimaryKeys();

        foreach ($this->queryColumns($sqlWhereElements) as $column) {
            $columnObject = Column::buildFromArray($column);
            $tableId = sprintf(
                '%s.%s',
                $columnObject->getTableSchema(),
                $columnObject->getTableName(),
            );

            if (isset($primaryKeys[$tableId])) {
                $columnObject->setIsPrimaryKey(in_array($columnObject->getName(), $primaryKeys[$tableId]));
            }

            $tableObjects[$tableId]->addColumn($columnObject);
        }
        foreach ($tableObjects as $tableId => $table) {
            $missingColumns = $table->getMissingRequiredColumns();
            if ($missingColumns !== []) {
                unset($tableObjects[$tableId]);
                $this->logger->info(sprintf(
                    'Missing "%s" columns for table "%s".',
                    implode(', ', $missingColumns),
                    $table->getName(),
                ));
            }
        }

        return $tableObjects;
    }

    public function cleanupTableStage(string $tmpTableName): void
    {
        $sql = sprintf('REMOVE @~/%s;', $tmpTableName);
        $this->connection->executeStatement($sql);
    }

    /**
     * @return array<int, array<string, string>>
     */
    public function fetchAll(string $sql): array
    {
        //@phpstan-ignore-next-line
        return $this->connection->fetchAllAssociative($sql);
    }

    public function fetchOneStringOrNull(string $sql): string|null
    {
        $result = $this->connection->fetchOne($sql);
        if ($result === false) {
            return null;
        }
        assert(is_string($result));
        return $result;
    }

    private function createSnowSqlConfig(): SplFileInfo
    {
        $hostParts = explode('.', $this->config->getDbHost());
        $accountName = implode('.', array_slice($hostParts, 0, count($hostParts) - 2));

        $cliConfig[] = '';
        $cliConfig[] = '[options]';
        $cliConfig[] = 'exit_on_error = true';
        $cliConfig[] = '';
        $cliConfig[] = '[connections.downloader]';
        $cliConfig[] = sprintf('accountname = "%s"', $accountName);
        $cliConfig[] = sprintf('username = "%s"', $this->config->getDbUser());
        $cliConfig[] = sprintf('password = "%s"', $this->config->getDbPassword());
        $cliConfig[] = sprintf('dbname = "%s"', $this->config->getDbDatabase());
        $cliConfig[] = sprintf('warehousename = "%s"', $this->config->getDbWarehouse());
        $cliConfig[] = sprintf('schemaname = "%s"', $this->config->getDbSchema());

        $file = (new Temp())->createFile('snowsql.config');
        file_put_contents($file->getPathname(), implode("\n", $cliConfig));

        return $file;
    }

    /**
     * @param Table[]|null $whiteList
     * @return array<array{schema_name:string,name:string}>
     */
    private function queryTables(?array $whiteList): array
    {
        /** @var array<array{schema_name:string,name:string}> $tables */
        $tables = $this->connection->fetchAllAssociative('SHOW TABLES IN SCHEMA');

        $filteredTables = array_filter($tables, fn($v): bool => !$this->shouldTableBeSkipped($v, $whiteList));

        usort($filteredTables, fn($item1, $item2): int => strnatcmp($item1['name'], $item2['name']));

        return $filteredTables;
    }

    /**
     * @param array{schema_name:string,name:string} $table
     * @param Table[]|null $whiteList
     */
    private function shouldTableBeSkipped(array $table, ?array $whiteList): bool
    {
        $isFromInformationSchema = $table['schema_name'] === 'INFORMATION_SCHEMA';
        $isStageTable = str_starts_with($table['name'], 'staging');
        $isNotFromWhiteList = false;
        if ($whiteList) {
            $filteredWhiteList = array_filter(
                $whiteList,
                fn(Table $v): bool => $v->getSchema() === $table['schema_name'] && $v->getName() === $table['name'],
            );
            $isNotFromWhiteList = $filteredWhiteList === [];
        }
        return $isFromInformationSchema || $isNotFromWhiteList || $isStageTable;
    }

    /**
     * @param string[] $queryTables
     * @return array<int, array{
     *      COLUMN_NAME: string,
     *      CHARACTER_MAXIMUM_LENGTH: string|int,
     *      NUMERIC_PRECISION: string|int,
     *      NUMERIC_SCALE: string|int,
     *      IS_NULLABLE: string,
     *      DATA_TYPE: string,
     *      TABLE_SCHEMA: string,
     *      TABLE_NAME: string,
     *  }>
     */
    private function queryColumns(array $queryTables): array
    {
        $sqlWhereClause = sprintf('WHERE %s', implode(' OR ', $queryTables));

        $sql = sprintf(
            'SELECT * FROM information_schema.columns %s ORDER BY TABLE_SCHEMA, TABLE_NAME, ORDINAL_POSITION',
            $sqlWhereClause,
        );

        //@phpstan-ignore-next-line
        return $this->connection->fetchAllAssociative($sql);
    }

    /**
     * @return array<string, string[]>
     */
    private function queryPrimaryKeys(): array
    {
        $sql = sprintf(
            'SHOW PRIMARY KEYS IN DATABASE %s',
            SnowflakeQuote::quoteSingleIdentifier($this->config->getDbDatabase()),
        );

        /** @var array<int, array{schema_name:string, table_name:string, column_name:string}> $primaryKeys */
        $primaryKeys = $this->connection->fetchAllAssociative($sql);

        $result = [];
        foreach ($primaryKeys as $primaryKey) {
            assert(is_array($primaryKey));
            $tableId = sprintf(
                '%s.%s',
                $primaryKey['schema_name'],
                $primaryKey['table_name'],
            );
            $result[$tableId][] = $primaryKey['column_name'];
        }

        return $result;
    }
}



================================================
FILE: src/Extractor.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData;

use Keboola\Component\Manifest\ManifestManager;
use Keboola\Component\Manifest\ManifestManager\Options\OutTable\ManifestOptionsSchema;
use Keboola\Component\UserException;
use Keboola\Csv\CsvOptions;
use Keboola\Datatype\Definition\Exception\InvalidLengthException;
use Keboola\Datatype\Definition\Exception\InvalidTypeException;
use Keboola\Datatype\Definition\GenericStorage;
use Keboola\Datatype\Definition\Snowflake;
use Keboola\DbExtractor\TableResultFormat\Metadata\Builder\BuilderHelper;
use Keboola\TableBackendUtils\Escaping\Snowflake\SnowflakeQuote;
use Keboola\TelemetryData\Exception\SnowsqlException;
use Keboola\TelemetryData\ValueObject\Column;
use Keboola\TelemetryData\ValueObject\Table;
use Keboola\Temp\Temp;
use Psr\Log\LoggerInterface;
use Retry\BackOff\ExponentialBackOffPolicy;
use Retry\Policy\SimpleRetryPolicy;
use Retry\RetryProxy;
use RuntimeException;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Process\Process;
use Throwable;

class Extractor
{
    /**
     * @param array<string, array{lastFetchedValue: string}> $inputState
     */
    public function __construct(
        private DbConnector $dbConnector,
        private Config $config,
        private LoggerInterface $logger,
        private ManifestManager $manifestManager,
        private string $datadir,
        private array $inputState,
    ) {
    }

    /**
     * @return array<string, array{lastFetchedValue: string}>
     */
    public function extractData(): array
    {
        $tableNamesForManifest = [];
        $result = [];

        foreach ($this->dbConnector->getTables($this->config->getTables()) as $table) {
            $this->logger->info(sprintf('Exporting to "%s"', $table->getName()));
            $retryProxy = $this->getRetryProxy();
            try {
                $rows = $retryProxy->call(fn(): int => $this->exportAndDownloadData($table));
            } catch (Throwable $e) {
                $message = sprintf('DB query failed: %s', $e->getMessage());
                throw new UserException($message, 0, $e);
            }

            if ($this->config->isIncrementalFetching($table->getName())) {
                $lastRow = $this->getLastRow($table);
                if ($lastRow) {
                    $result[$table->getName()] = [
                        Config::STATE_INCREMENTAL_KEY => $lastRow,
                    ];
                }
            }

            if ($rows > 0) {
                $tableNamesForManifest[] = $table;
            } else {
                $this->removeEmptyFile($table);
            }
        }
        $this->createManifestMetadata($tableNamesForManifest);
        return $result;
    }

    private function getLastRow(Table $table): ?string
    {
        $sql = sprintf(
            'SELECT %s FROM %s.%s ORDER BY %s DESC LIMIT 1',
            SnowflakeQuote::quoteSingleIdentifier(Column::INCREMENTAL_NAME),
            SnowflakeQuote::quoteSingleIdentifier($table->getSchema()),
            SnowflakeQuote::quoteSingleIdentifier($table->getName()),
            SnowflakeQuote::quoteSingleIdentifier(Column::INCREMENTAL_NAME),
        );

        $resultLastRow = $this->getRetryProxy()->call(
            fn(): string|null => $this->dbConnector->fetchOneStringOrNull($sql),
        );
        assert($resultLastRow === null || is_string($resultLastRow));

        return $resultLastRow;
    }

    private function generateSqlStatement(Table $table): string
    {
        $sql = sprintf(
            'SELECT * FROM %s.%s',
            SnowflakeQuote::quoteSingleIdentifier($table->getSchema()),
            SnowflakeQuote::quoteSingleIdentifier($table->getName()),
        );

        $whereStatement = [];
        $orderStatement = '';
        switch ($this->config->getMode()) {
            case Config::MODE_PROJECT:
                $projectColumnName = Column::PROJECT_SINGLE_NAME;
                $stackColumnName = Column::STACK_SINGLE_NAME;
                break;
            case Config::MODE_ORGANIZATION:
                $projectColumnName = Column::PROJECT_COMPANY_NAME;
                $stackColumnName = Column::STACK_COMPANY_NAME;
                break;
            case Config::MODE_ACTIVITY_CENTER:
                $projectColumnName = Column::PROJECT_ACTIVITY_CENTER_NAME;
                $stackColumnName = Column::STACK_ACTIVITY_CENTER_NAME;
                break;
            default:
                throw new UserException(sprintf('Unknown mode "%s".', $this->config->getMode()));
        }

        $whereStatement[] = sprintf(
            '%s = %s',
            SnowflakeQuote::quoteSingleIdentifier($projectColumnName),
            SnowflakeQuote::quote($this->config->getProjectId()),
        );
        $whereStatement[] = sprintf(
            '%s = %s',
            SnowflakeQuote::quoteSingleIdentifier($stackColumnName),
            SnowflakeQuote::quote($this->config->getKbcStackId()),
        );

        if ($this->config->isIncrementalFetching($table->getName())) {
            if (isset($this->inputState[$table->getName()]['lastFetchedValue'])) {
                $whereStatement[] = sprintf(
                    '%s >= %s',
                    SnowflakeQuote::quoteSingleIdentifier(Column::INCREMENTAL_NAME),
                    SnowflakeQuote::quote($this->inputState[$table->getName()]['lastFetchedValue']),
                );
            }
            $orderStatement = SnowflakeQuote::quoteSingleIdentifier(Column::INCREMENTAL_NAME);
        }

        $sql .= sprintf(
            ' WHERE %s',
            implode(' AND ', $whereStatement),
        );

        if ($orderStatement !== '' && $orderStatement !== '0') {
            $sql .= ' ORDER BY ' . $orderStatement;
        }

        $this->logger->info(sprintf(
            'Run query "%s"',
            $sql,
        ));

        return $sql;
    }

    /**
     * @param Table[] $tableNames
     */
    private function createManifestMetadata(array $tableNames): void
    {
        $tableStructures = $this->dbConnector->getTables($tableNames);

        foreach ($tableStructures as $tableStructure) {
            $schema = [];
            foreach ($tableStructure->getColumns() as $column) {
                $schema[] = $this->createManifestOptionsSchema($column);
            }
            $tableMetadata = [
                'KBC.name' => $tableStructure->getName(),
                'KBC.sanitizedName' => BuilderHelper::sanitizeName($tableStructure->getName()),
                'KBC.datatype.backend' => 'snowflake',
            ];

            $options = new ManifestManager\Options\OutTable\ManifestOptions();
            $options
                ->setSchema($schema)
                ->setIncremental($this->config->isIncremental($tableStructure->getName()))
                ->setDestination($tableStructure->getName())
                ->setTableMetadata($tableMetadata);

            $this->manifestManager->writeTableManifest(
                sprintf('%s.csv', $tableStructure->getName()),
                $options,
                $this->config->getDataTypeSupport()->usingLegacyManifest(),
            );
        }
    }

    private function createManifestOptionsSchema(
        Column $column,
    ): ManifestOptionsSchema {
        try {
            $datatype = new Snowflake(
                $column->getDataType(),
                [
                    'length' => $column->getLength(),
                    'nullable' => $column->isNullable(),
                ],
            );
        } catch (InvalidTypeException|InvalidLengthException) {
            $datatype = new GenericStorage(
                $column->getDataType(),
                [
                    'nullable' => $column->isNullable(),
                ],
            );
        }

        $columnMetadata = [];
        foreach ($datatype->toMetadata() as $item) {
            if ($item['value'] !== null) {
                $columnMetadata[$item['key']] = $item['value'];
            }
        }

        $dataTypes = [
            'base' => array_filter([
                'type' => $datatype->getBasetype(),
                'length' => $datatype->getLength(),
                'default' => $datatype->getDefault(),
            ], fn($value) => $value !== null),
        ];

        if ($datatype instanceof Snowflake) {
            $dataTypes['snowflake'] = array_filter([
                'type' => $datatype->getType(),
                'length' => $datatype->getLength(),
                'default' => $datatype->getDefault(),
            ], fn($value) => $value !== null);
        }

        return new ManifestOptionsSchema(
            BuilderHelper::sanitizeName($column->getName()),
            $dataTypes,
            $datatype->isNullable(),
            $column->isPrimaryKey(),
            null,
            $columnMetadata,
        );
    }

    private function exportAndDownloadData(Table $table): int
    {
        $tmpTableName = sprintf(
            '%s_%s_%s',
            $table->getName(),
            $this->config->getProjectId(),
            $this->config->getKbcStackId(),
        );
        $copyCommand = $this->generateCopyCommand(
            $tmpTableName,
            $this->generateSqlStatement($table),
        );

        $result = $this->dbConnector->fetchAll($copyCommand);
        $rowCount = (int) ($result[0]['rows_unloaded'] ?? 0);
        if ($rowCount === 0) {
            return 0;
        }

        $outputDataDir = $this->datadir . '/out/tables/' . $table->getName() . '.csv';
        if (!is_dir($outputDataDir) && !mkdir($outputDataDir, 0755, true) && !is_dir($outputDataDir)) {
            throw new RuntimeException(sprintf('Directory "%s" was not created', $outputDataDir));
        }

        $this->logger->info('Downloading data from Snowflake');

        $sqls = [];
        $sqls[] = sprintf('USE WAREHOUSE %s;', SnowflakeQuote::quoteSingleIdentifier($this->config->getDbWarehouse()));
        $sqls[] = sprintf('USE DATABASE %s;', SnowflakeQuote::quoteSingleIdentifier($this->config->getDbDatabase()));
        $sqls[] = sprintf(
            'USE SCHEMA %s.%s;',
            SnowflakeQuote::quoteSingleIdentifier($this->config->getDbDatabase()),
            SnowflakeQuote::quoteSingleIdentifier($this->config->getDbSchema()),
        );
        $sqls[] = sprintf(
            'GET @~/%s file://%s;',
            $tmpTableName,
            $outputDataDir,
        );

        $snowSqlFile = (new Temp())->createTmpFile('snowsql.sql');
        file_put_contents($snowSqlFile->getPathname(), implode("\n", $sqls));

        $command = sprintf(
            'snowsql --noup --config %s -c downloader -f %s',
            $this->dbConnector->getSnowSqlConfigFile(),
            $snowSqlFile,
        );

        $process = Process::fromShellCommandline($command);
        $process->setTimeout(null);
        $process->run();

        if (!$process->isSuccessful()) {
            $this->logger->error(sprintf('Snowsql error, process output %s', $process->getOutput()));
            $this->logger->error(sprintf('Snowsql error: %s', $process->getErrorOutput()));
            throw new SnowsqlException(sprintf(
                'File download error occurred processing [%s]',
                $table->getName(),
            ));
        }

        $this->dbConnector->cleanupTableStage($tmpTableName);

        return $rowCount;
    }

    private function ensureOutputTableDir(): string
    {
        $outputDir = implode(
            '/',
            [
                $this->datadir,
                'out',
                'tables',
            ],
        );
        $fs = new Filesystem();
        if (!$fs->exists($outputDir)) {
            $fs->mkdir($outputDir);
        }
        return $outputDir;
    }

    private function removeEmptyFile(Table $table): void
    {
        $filename = sprintf(
            '%s/%s.csv',
            $this->ensureOutputTableDir(),
            $table->getName(),
        );

        $fs = new Filesystem();
        if ($fs->exists($filename)) {
            $fs->remove($filename);
        }
    }

    private function generateCopyCommand(string $stageTmpPath, string $query): string
    {
        $csvOptions = [];
        $csvOptions[] = sprintf('FIELD_DELIMITER = %s', SnowflakeQuote::quote(CsvOptions::DEFAULT_DELIMITER));
        $csvOptions[] = sprintf(
            'FIELD_OPTIONALLY_ENCLOSED_BY = %s',
            SnowflakeQuote::quote(CsvOptions::DEFAULT_ENCLOSURE),
        );
        $csvOptions[] = sprintf('ESCAPE_UNENCLOSED_FIELD = %s', SnowflakeQuote::quote('\\'));
        $csvOptions[] = sprintf('COMPRESSION = %s', SnowflakeQuote::quote('GZIP'));
        $csvOptions[] = 'NULL_IF=()';

        return sprintf(
            '
            COPY INTO @~/%s/part
            FROM (%s)

            FILE_FORMAT = (TYPE=CSV %s)
            HEADER = false
            MAX_FILE_SIZE=50000000
            OVERWRITE = TRUE
            ;
            ',
            $stageTmpPath,
            rtrim(trim($query), ';'),
            implode(' ', $csvOptions),
        );
    }

    private function getRetryProxy(): RetryProxy
    {
        return new RetryProxy(
            new SimpleRetryPolicy(
                Config::RETRY_MAX_ATTEMPTS,
                ['Exception', 'SnowsqlException'],
            ),
            new ExponentialBackOffPolicy(Config::RETRY_DEFAULT_BACKOFF_INTERVAL),
            $this->logger,
        );
    }
}



================================================
FILE: src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\Component\Logger;
use Keboola\Component\UserException;
use Keboola\TelemetryData\Component;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
try {
    $app = new Component($logger);
    $app->execute();
    exit(0);
} catch (UserException $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (Throwable $e) {
    $logger->critical(
        $e::class . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => is_object($e->getPrevious()) ? $e->getPrevious()::class : '',
        ],
    );
    exit(2);
}



================================================
FILE: src/Exception/ApplicationException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData\Exception;

use Exception;
use Keboola\CommonExceptions\ApplicationExceptionInterface;

class ApplicationException extends Exception implements ApplicationExceptionInterface
{

}



================================================
FILE: src/Exception/SnowsqlException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData\Exception;

use Keboola\Component\UserException;

class SnowsqlException extends UserException
{

}



================================================
FILE: src/ValueObject/Column.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData\ValueObject;

class Column
{
    public const PROJECT_SINGLE_NAME = 'dst_proj_single';

    public const STACK_SINGLE_NAME = 'dst_stack_single';

    public const PROJECT_COMPANY_NAME = 'dst_proj_company';

    public const STACK_COMPANY_NAME = 'dst_stack_company';

    public const PROJECT_ACTIVITY_CENTER_NAME = 'dst_proj_ac';

    public const STACK_ACTIVITY_CENTER_NAME = 'dst_stack_ac';

    public const INCREMENTAL_NAME = 'dst_timestamp';

    private const TYPE_WITHOUT_LENGTH = [
        'TEXT',
        'MEDIUMTEXT',
        'LONGTEXT',
    ];

    private bool $isPrimaryKey = false;

    /**
     * @param array{
     *     COLUMN_NAME: string,
     *     CHARACTER_MAXIMUM_LENGTH: string|int,
     *     NUMERIC_PRECISION: string|int,
     *     NUMERIC_SCALE: string|int,
     *     IS_NULLABLE: string,
     *     DATA_TYPE: string,
     *     TABLE_SCHEMA: string,
     *     TABLE_NAME: string,
     * } $data
     */
    public static function buildFromArray(array $data): self
    {
        return new self(
            $data['COLUMN_NAME'],
            (int) $data['CHARACTER_MAXIMUM_LENGTH'],
            (int) $data['NUMERIC_PRECISION'],
            (int) $data['NUMERIC_SCALE'],
            $data['IS_NULLABLE'] !== 'NO',
            $data['DATA_TYPE'],
            $data['TABLE_SCHEMA'],
            $data['TABLE_NAME'],
        );
    }

    public function __construct(
        private string $name,
        private int $characterMaximumLength,
        private int $numericPrecision,
        private int $numericScale,
        private bool $isNullable,
        private string $dataType,
        private string $tableSchema,
        private string $tableName,
    ) {
    }

    public function setIsPrimaryKey(bool $isPrimaryKey): self
    {
        $this->isPrimaryKey = $isPrimaryKey;
        return $this;
    }

    public function isPrimaryKey(): bool
    {
        return $this->isPrimaryKey;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getTableSchema(): string
    {
        return $this->tableSchema;
    }

    public function getTableName(): string
    {
        return $this->tableName;
    }

    public function getCharacterMaximumLength(): int
    {
        return $this->characterMaximumLength;
    }

    public function getNumericPrecision(): int
    {
        return $this->numericPrecision;
    }

    public function getNumericScale(): int
    {
        return $this->numericScale;
    }

    public function isNullable(): bool
    {
        return $this->isNullable;
    }

    public function getDataType(): string
    {
        return $this->dataType;
    }

    /**
     * @return array{
     *     character_maximum: int|null,
     *     numeric_precision: int|null,
     *     numeric_scale: int|null
     * }
     */
    public function getLength(): ?array
    {
        if (in_array(strtoupper($this->getDataType()), self::TYPE_WITHOUT_LENGTH)) {
            return null;
        }
        return [
            'character_maximum' => $this->getCharacterMaximumLength(),
            'numeric_precision' => $this->getNumericPrecision(),
            'numeric_scale' => $this->getNumericScale(),
        ];
    }
}



================================================
FILE: src/ValueObject/Table.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData\ValueObject;

class Table
{
    /**
     * @var string[]
     */
    private array $requiredTableColumns = [
        'dst_proj_single',
        'dst_stack_single',
        'dst_proj_company',
        'dst_stack_company',
        'dst_proj_ac',
        'dst_stack_ac',
        'dst_timestamp',
    ];

    /** @var Column[] $columns */
    private array $columns = [];

    /**
     * @param array{schema_name:string,name:string} $data
     */
    public static function buildFromArray(array $data): self
    {
        return new self(
            $data['schema_name'],
            $data['name'],
        );
    }

    public function __construct(private string $schema, private string $name)
    {
    }

    public function addColumn(Column $column): void
    {
        $this->columns[] = $column;
    }

    public function getSchema(): string
    {
        return $this->schema;
    }

    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @return Column[]
     */
    public function getColumns(): array
    {
        return $this->columns;
    }

    /**
     * @return string[]
     */
    public function getMissingRequiredColumns(): array
    {
        return array_values(array_diff(
            $this->requiredTableColumns,
            array_map(fn(Column $v): string => $v->getName(), $this->columns),
        ));
    }
}



================================================
FILE: tests/functional/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData\FunctionalTests;

use Doctrine\DBAL\Connection;
use Keboola\Csv\CsvReader;
use Keboola\DatadirTests\DatadirTestCase;
use Keboola\DatadirTests\DatadirTestSpecificationInterface;
use Keboola\TableBackendUtils\Connection\Snowflake\SnowflakeConnectionFactory;
use Keboola\TableBackendUtils\Escaping\Snowflake\SnowflakeQuote;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;
use Throwable;

class DatadirTest extends DatadirTestCase
{
    private Connection $connection;

    public function setUp(): void
    {
        $this->connection = SnowflakeConnectionFactory::getConnection(
            (string) getenv('SNOWFLAKE_DB_HOST'),
            (string) getenv('SNOWFLAKE_DB_USER'),
            (string) getenv('SNOWFLAKE_DB_PASSWORD'),
            [
                'port' => (string) getenv('SNOWFLAKE_DB_PORT'),
                'warehouse' => (string) getenv('SNOWFLAKE_DB_WAREHOUSE'),
                'database' => (string) getenv('SNOWFLAKE_DB_DATABASE'),
            ],
        );
        $this->connection->executeStatement(
            sprintf(
                'USE SCHEMA %s',
                SnowflakeQuote::quoteSingleIdentifier((string) getenv('SNOWFLAKE_DB_SCHEMA')),
            ),
        );
        parent::setUp();
    }

    /**
     * @dataProvider provideDatadirSpecifications
     */
    public function testDatadir(DatadirTestSpecificationInterface $specification): void
    {
        $tempDatadir = $this->getTempDatadir($specification);

        $this->cleanDatabase();
        $this->initDatabase((string) $specification->getSourceDatadirDirectory());

        $process = $this->runScript($tempDatadir->getTmpFolder());

        $this->assertMatchesSpecification($specification, $process, $tempDatadir->getTmpFolder());
    }

    public function assertDirectoryContentsSame(string $expected, string $actual): void
    {
        $this->prettifyAllManifests($actual);
        $this->ungzipFiles($actual);
        parent::assertDirectoryContentsSame($expected, $actual);
    }

    private function cleanDatabase(): void
    {
        $sql = 'SHOW TABLES IN SCHEMA';

        $items = $this->connection->fetchAllAssociative($sql);
        /** @var array{schema_name:string,name:string} $item */
        foreach ($items as $item) {
            $this->connection->executeQuery(
                sprintf(
                    'DROP TABLE IF EXISTS %s.%s',
                    SnowflakeQuote::quoteSingleIdentifier($item['schema_name']),
                    SnowflakeQuote::quoteSingleIdentifier($item['name']),
                ),
            );
        }
    }

    private function initDatabase(string $datadirDirectory): void
    {
        $finder = new Finder();
        $importFiles = $finder->name('*.manifest')->in($datadirDirectory . '/in/tables');

        foreach ($importFiles as $file) {
            $databaseTableName = substr(
                $file->getFilename(),
                0,
                (int) strpos($file->getFilename(), '.csv.manifest'),
            );

            $fileContent = json_decode(
                (string) file_get_contents($file->getPathname()),
                true,
                512,
                JSON_THROW_ON_ERROR,
            );
            assert(is_array($fileContent));

            $columns = [];
            foreach ($fileContent['columns'] as $column) {
                $columns[] = sprintf(
                    '%s VARCHAR(512)',
                    SnowflakeQuote::quoteSingleIdentifier($column),
                );
            }

            $sqlTemplate = <<<SQL
CREATE TABLE %s (
    %s
);
SQL;
            $sql = sprintf(
                $sqlTemplate,
                SnowflakeQuote::quoteSingleIdentifier($databaseTableName),
                implode(',', $columns),
            );

            $this->connection->executeQuery($sql);

            if (array_key_exists('primary_key', $fileContent) && is_array($fileContent['primary_key'])) {
                $sqlConstraintsTemplate = <<<SQL
ALTER TABLE %s ADD CONSTRAINT PK_%s PRIMARY KEY (%s)
SQL;

                $sql = sprintf(
                    $sqlConstraintsTemplate,
                    SnowflakeQuote::quoteSingleIdentifier($databaseTableName),
                    $databaseTableName,
                    implode(
                        ', ',
                        array_map(
                            fn(string $v): string => SnowflakeQuote::quoteSingleIdentifier($v),
                            $fileContent['primary_key'],
                        ),
                    ),
                );

                $this->connection->executeQuery($sql);
            }

            $sqlInsertTemplate = <<<SQL
INSERT INTO %s VALUES (%s);
SQL;

            $csvReader = new CsvReader(substr(
                $file->getPathname(),
                0,
                (int) strpos($file->getPathname(), '.manifest'),
            ));

            while ($csvReader->current()) {
                $current = $csvReader->current();
                assert(is_array($current));
                $row = array_map(
                    fn($item): string => SnowflakeQuote::quote($item),
                    $current,
                );

                $sqlInsert = sprintf(
                    $sqlInsertTemplate,
                    SnowflakeQuote::quoteSingleIdentifier($databaseTableName),
                    implode(', ', $row),
                );

                $this->connection->executeQuery($sqlInsert);
                $csvReader->next();
            }
        }
    }

    protected function prettifyAllManifests(string $actual): void
    {
        foreach ($this->findManifests($actual . '/tables') as $file) {
            $this->prettifyJsonFile((string) $file->getRealPath());
        }
    }

    protected function prettifyJsonFile(string $path): void
    {
        $json = (string) file_get_contents($path);
        try {
            file_put_contents($path, (string) json_encode(json_decode($json), JSON_PRETTY_PRINT));
        } catch (Throwable) {
            // If a problem occurs, preserve the original contents
            file_put_contents($path, $json);
        }
    }

    protected function findManifests(string $dir): Finder
    {
        $finder = new Finder();
        return $finder->files()->in($dir)->name(['~.*\.manifest~']);
    }

    protected function ungzipFiles(string $actualDir): void
    {
        $fs = new Filesystem();
        if (!$fs->exists($actualDir . '/tables')) {
            return;
        }
        $gzipFiles = $this->findGzipFiles($actualDir . '/tables');
        foreach ($gzipFiles as $gzipFile) {
            $process = Process::fromShellCommandline('gzip -d ' . $gzipFile->getRealPath());
            $process->run();
        }
    }

    private function findGzipFiles(string $dir): Finder
    {
        $finder = new Finder();
        return $finder->files()->in($dir)->depth(1)->name(['~.*\.csv.gz$~']);
    }
}



================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data/expected-code
================================================
0


================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data/expected-stderr
================================================



================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_ac" = '2' AND "dst_stack_ac" = 'connection.north-europe.azure.keboola.com'"
Downloading data from Snowflake



================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data/source/data/config.json
================================================
{
  "parameters": {
    "mode": "activity-center"
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","1","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","1","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data_native-types-manifest/expected-code
================================================
0



================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data_native-types-manifest/expected-stderr
================================================



================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data_native-types-manifest/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_ac" = '2' AND "dst_stack_ac" = 'connection.north-europe.azure.keboola.com'"
Downloading data from Snowflake



================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data_native-types-manifest/source/data/config.json
================================================
{
  "parameters": {
    "mode": "activity-center"
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  },
  "storage": {
    "output": {
      "data_type_support": "authoritative"
    }
  }
}



================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data_native-types-manifest/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","1","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","1","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/activitycenter_mode_correct_telemetry_data_native-types-manifest/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching/expected-code
================================================
0


================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching/expected-stderr
================================================



================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_ac" = '2' AND "dst_stack_ac" = 'connection.north-europe.azure.keboola.com' ORDER BY "dst_timestamp""
Downloading data from Snowflake



================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching/source/data/config.json
================================================
{
  "parameters": {
    "mode": "activity-center",
    "incrementalFetching": true
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","1","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","1","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 09:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 10:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching_state/expected-code
================================================
0


================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching_state/expected-stderr
================================================



================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching_state/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_ac" = '2' AND "dst_stack_ac" = 'connection.north-europe.azure.keboola.com' AND "dst_timestamp" >= '2020-12-01 09:09:10' ORDER BY "dst_timestamp""
Downloading data from Snowflake



================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching_state/source/data/config.json
================================================
{
  "parameters": {
    "mode": "activity-center",
    "incrementalFetching": true
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching_state/source/data/in/state.json
================================================
{"data":{"lastFetchedValue":"2020-12-01 09:09:10"}}



================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching_state/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","1","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","1","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 09:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","2","connection.north-europe.azure.keboola.com","2020-12-01 10:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/activitycenter_mode_incremental_fetching_state/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/organization_mode_correct_telemetry_data/expected-code
================================================
0


================================================
FILE: tests/functional/organization_mode_correct_telemetry_data/expected-stderr
================================================



================================================
FILE: tests/functional/organization_mode_correct_telemetry_data/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_company" = '2' AND "dst_stack_company" = 'connection.north-europe.azure.keboola.com'"
Downloading data from Snowflake



================================================
FILE: tests/functional/organization_mode_correct_telemetry_data/source/data/config.json
================================================
{
  "parameters": {
    "mode": "organization"
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/organization_mode_correct_telemetry_data/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/organization_mode_correct_telemetry_data/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/organization_mode_incremental_fetching/expected-code
================================================
0


================================================
FILE: tests/functional/organization_mode_incremental_fetching/expected-stderr
================================================



================================================
FILE: tests/functional/organization_mode_incremental_fetching/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_company" = '2' AND "dst_stack_company" = 'connection.north-europe.azure.keboola.com' AND "dst_timestamp" >= '2020-12-02 08:09:10' ORDER BY "dst_timestamp""
Downloading data from Snowflake



================================================
FILE: tests/functional/organization_mode_incremental_fetching/source/data/config.json
================================================
{
  "parameters": {
    "mode": "organization",
    "incrementalFetching": true
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/organization_mode_incremental_fetching/source/data/in/state.json
================================================
{"data":{"lastFetchedValue":"2020-12-02 08:09:10"}}



================================================
FILE: tests/functional/organization_mode_incremental_fetching/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-02 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-03 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-04 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 09:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 10:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 18:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/organization_mode_incremental_fetching/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/organization_mode_incremental_fetching_state/expected-code
================================================
0


================================================
FILE: tests/functional/organization_mode_incremental_fetching_state/expected-stderr
================================================



================================================
FILE: tests/functional/organization_mode_incremental_fetching_state/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_company" = '2' AND "dst_stack_company" = 'connection.north-europe.azure.keboola.com' AND "dst_timestamp" >= '2020-12-02 08:09:10' ORDER BY "dst_timestamp""
Downloading data from Snowflake



================================================
FILE: tests/functional/organization_mode_incremental_fetching_state/source/data/config.json
================================================
{
  "parameters": {
    "mode": "organization",
    "incrementalFetching": true
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/organization_mode_incremental_fetching_state/source/data/in/state.json
================================================
{"data":{"lastFetchedValue":"2020-12-02 08:09:10"}}



================================================
FILE: tests/functional/organization_mode_incremental_fetching_state/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-02 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-03 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-04 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 09:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 10:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 18:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/organization_mode_incremental_fetching_state/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/project_mode_correct_telemetry_data/expected-code
================================================
0


================================================
FILE: tests/functional/project_mode_correct_telemetry_data/expected-stderr
================================================



================================================
FILE: tests/functional/project_mode_correct_telemetry_data/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_single" = '2' AND "dst_stack_single" = 'connection.north-europe.azure.keboola.com'"
Downloading data from Snowflake



================================================
FILE: tests/functional/project_mode_correct_telemetry_data/source/data/config.json
================================================
{
  "parameters": {
    "mode": "project"
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/project_mode_correct_telemetry_data/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/project_mode_correct_telemetry_data/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/project_mode_download_selected_tables/expected-code
================================================
0


================================================
FILE: tests/functional/project_mode_download_selected_tables/expected-stderr
================================================



================================================
FILE: tests/functional/project_mode_download_selected_tables/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_single" = '2' AND "dst_stack_single" = 'connection.north-europe.azure.keboola.com' ORDER BY "dst_timestamp""
Downloading data from Snowflake



================================================
FILE: tests/functional/project_mode_download_selected_tables/source/data/config.json
================================================
{
  "parameters": {
    "mode": "project",
    "incrementalFetching": true
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    },
    "tables": [
      "data"
    ]
  }
}



================================================
FILE: tests/functional/project_mode_download_selected_tables/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-02 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-03 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-04 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 09:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 10:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 18:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/project_mode_download_selected_tables/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/project_mode_download_selected_tables/source/data/in/tables/data2.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-02 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-03 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-04 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 09:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 10:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 18:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/project_mode_download_selected_tables/source/data/in/tables/data2.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/project_mode_ignore_incremental_fetching/expected-code
================================================
0


================================================
FILE: tests/functional/project_mode_ignore_incremental_fetching/expected-stderr
================================================



================================================
FILE: tests/functional/project_mode_ignore_incremental_fetching/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_single" = '2' AND "dst_stack_single" = 'connection.north-europe.azure.keboola.com' ORDER BY "dst_timestamp""
Downloading data from Snowflake
Exporting to "ignoreInc"
Run query "SELECT * FROM "%s"."ignoreInc" WHERE "dst_proj_single" = '2' AND "dst_stack_single" = 'connection.north-europe.azure.keboola.com'"
Downloading data from Snowflake



================================================
FILE: tests/functional/project_mode_ignore_incremental_fetching/source/data/config.json
================================================
{
  "parameters": {
    "mode": "project",
    "incrementalFetching": true,
    "incremental": true
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    },
    "tablesIgnoringIncrementalFetching": [
      "ignoreInc"
    ]
  }
}



================================================
FILE: tests/functional/project_mode_ignore_incremental_fetching/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-02 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-03 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-04 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 09:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 10:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 18:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/project_mode_ignore_incremental_fetching/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/project_mode_ignore_incremental_fetching/source/data/in/tables/ignoreInc.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-02 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-03 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-04 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 09:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 10:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 18:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/project_mode_ignore_incremental_fetching/source/data/in/tables/ignoreInc.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/project_mode_img_params_stack_id/expected-code
================================================
0


================================================
FILE: tests/functional/project_mode_img_params_stack_id/expected-stderr
================================================



================================================
FILE: tests/functional/project_mode_img_params_stack_id/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_single" = '2' AND "dst_stack_single" = 'ownStackId'"
Downloading data from Snowflake



================================================
FILE: tests/functional/project_mode_img_params_stack_id/source/data/config.json
================================================
{
  "parameters": {
    "mode": "project"
  },
  "image_parameters": {
    "stackId": "ownStackId",
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/project_mode_img_params_stack_id/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 17"
"2","ownStackId","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"2","ownStackId","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"2","ownStackId","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/project_mode_img_params_stack_id/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/project_mode_incremental_fetching/expected-code
================================================
0


================================================
FILE: tests/functional/project_mode_incremental_fetching/expected-stderr
================================================



================================================
FILE: tests/functional/project_mode_incremental_fetching/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_single" = '2' AND "dst_stack_single" = 'connection.north-europe.azure.keboola.com' ORDER BY "dst_timestamp""
Downloading data from Snowflake



================================================
FILE: tests/functional/project_mode_incremental_fetching/source/data/config.json
================================================
{
  "parameters": {
    "mode": "project",
    "incrementalFetching": true
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/project_mode_incremental_fetching/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-02 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-03 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-04 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 09:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 10:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 18:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/project_mode_incremental_fetching/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/project_mode_incremental_fetching_state/expected-code
================================================
0


================================================
FILE: tests/functional/project_mode_incremental_fetching_state/expected-stderr
================================================



================================================
FILE: tests/functional/project_mode_incremental_fetching_state/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_single" = '2' AND "dst_stack_single" = 'connection.north-europe.azure.keboola.com' AND "dst_timestamp" >= '2020-12-01 18:09:10' ORDER BY "dst_timestamp""
Downloading data from Snowflake



================================================
FILE: tests/functional/project_mode_incremental_fetching_state/source/data/config.json
================================================
{
  "parameters": {
    "mode": "project",
    "incrementalFetching": true
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/project_mode_incremental_fetching_state/source/data/in/state.json
================================================
{"data":{"lastFetchedValue":"2020-12-01 18:09:10"}}



================================================
FILE: tests/functional/project_mode_incremental_fetching_state/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-02 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-03 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-04 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 09:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 10:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 18:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/project_mode_incremental_fetching_state/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/project_mode_incremental_fetching_write_old_state/expected-code
================================================
0


================================================
FILE: tests/functional/project_mode_incremental_fetching_write_old_state/expected-stderr
================================================



================================================
FILE: tests/functional/project_mode_incremental_fetching_write_old_state/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_company" = '2' AND "dst_stack_company" = 'connection.north-europe.azure.keboola.com' AND "dst_timestamp" >= '2020-12-01 08:09:10' ORDER BY "dst_timestamp""



================================================
FILE: tests/functional/project_mode_incremental_fetching_write_old_state/source/data/config.json
================================================
{
  "parameters": {
    "mode": "organization",
    "incrementalFetching": true
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/project_mode_incremental_fetching_write_old_state/source/data/in/state.json
================================================
{"data":{"lastFetchedValue":"2020-12-01 08:09:10"}}



================================================
FILE: tests/functional/project_mode_incremental_fetching_write_old_state/source/data/in/tables/data.csv
================================================



================================================
FILE: tests/functional/project_mode_incremental_fetching_write_old_state/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/set_primary_keys/expected-code
================================================
0


================================================
FILE: tests/functional/set_primary_keys/expected-stderr
================================================



================================================
FILE: tests/functional/set_primary_keys/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_company" = '2' AND "dst_stack_company" = 'connection.north-europe.azure.keboola.com'"
Downloading data from Snowflake



================================================
FILE: tests/functional/set_primary_keys/source/data/config.json
================================================
{
  "parameters": {
    "mode": "organization"
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/set_primary_keys/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 5"



================================================
FILE: tests/functional/set_primary_keys/source/data/in/tables/data.csv.manifest
================================================
{"primary_key": ["dst_proj_single"], "columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/functional/skip_staging_table/expected-code
================================================
0


================================================
FILE: tests/functional/skip_staging_table/expected-stderr
================================================



================================================
FILE: tests/functional/skip_staging_table/expected-stdout
================================================



================================================
FILE: tests/functional/skip_staging_table/source/data/config.json
================================================
{
  "parameters": {
    "mode": "organization",
    "incrementalFetching": true
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/skip_staging_table/source/data/in/tables/stagingasqdqwd.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"2","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-02 08:09:10","test 2"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-03 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-04 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 6"
"2","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 7"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:10:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 09:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 09:09:10","test 11"
"2","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 10:09:10","test 12"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"2","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 18:09:10","test 17"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/skip_staging_table/source/data/in/tables/stagingasqdqwd.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}


================================================
FILE: tests/functional/telemetry_data_empty_result/expected-code
================================================
0


================================================
FILE: tests/functional/telemetry_data_empty_result/expected-stderr
================================================




================================================
FILE: tests/functional/telemetry_data_empty_result/expected-stdout
================================================
Exporting to "data"
Run query "SELECT * FROM "%s"."data" WHERE "dst_proj_single" = '2' AND "dst_stack_single" = 'connection.north-europe.azure.keboola.com'"



================================================
FILE: tests/functional/telemetry_data_empty_result/source/data/config.json
================================================
{
  "parameters": {
    "mode": "project"
  },
  "image_parameters": {
    "db": {
      "host": "%env(string:SNOWFLAKE_DB_HOST)%",
      "port": "%env(int:SNOWFLAKE_DB_PORT)%",
      "user": "%env(string:SNOWFLAKE_DB_USER)%",
      "database": "%env(string:SNOWFLAKE_DB_DATABASE)%",
      "#password": "%env(string:SNOWFLAKE_DB_PASSWORD)%",
      "schema": "%env(string:SNOWFLAKE_DB_SCHEMA)%",
      "warehouse": "%env(string:SNOWFLAKE_DB_WAREHOUSE)%"
    }
  }
}



================================================
FILE: tests/functional/telemetry_data_empty_result/source/data/in/tables/data.csv
================================================
"1","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 1"
"3","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 3"
"4","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 4"
"5","connection.north-europe.azure.keboola.com","2","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 5"
"1","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 6"
"3","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 8"
"4","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 9"
"5","connection.north-europe.azure.keboola.com","3","connection.north-europe.azure.keboola.com","","","2020-12-01 08:09:10","test 10"
"1","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 11"
"3","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 13"
"4","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 14"
"5","connection.north-europe.azure.keboola.com","2","connection.keboola.com","","","2020-12-01 08:09:10","test 15"
"1","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 16"
"3","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 18"
"4","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 19"
"5","connection.north-europe.azure.keboola.com","3","connection.keboola.com","","","2020-12-01 08:09:10","test 20"



================================================
FILE: tests/functional/telemetry_data_empty_result/source/data/in/tables/data.csv.manifest
================================================
{"columns":["dst_proj_single","dst_stack_single","dst_proj_company","dst_stack_company","dst_proj_ac","dst_stack_ac","dst_timestamp","sample_data"],"metadata":[{"key":"KBC.name","value":"data"}],"column_metadata":{"dst_proj_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_single":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_company":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_proj_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_stack_ac":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"dst_timestamp":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}],"sample_data":[{"key":"KBC.datatype.type","value":"TEXT"},{"key":"KBC.datatype.nullable","value":true},{"key":"KBC.datatype.basetype","value":"STRING"}]}}



================================================
FILE: tests/phpunit/bootstrap.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/../../vendor/autoload.php';



================================================
FILE: tests/phpunit/ConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData\Tests;

use Iterator;
use Keboola\TelemetryData\Config;
use Keboola\TelemetryData\ConfigDefinition;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigTest extends TestCase
{
    /**
     * @dataProvider validConfigDataProvider
     * @param array<mixed> $configData
     * @param array<mixed> $expectedData
     */
    public function testValidConfig(array $configData, array $expectedData): void
    {
        $config = new Config(['parameters' => $configData], new ConfigDefinition());

        Assert::assertEquals(
            ['parameters' => $expectedData],
            $config->getData(),
        );
    }

    public function testInvalidMode(): void
    {
        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage(
            'The value "unknownMode" is not allowed for path "root.parameters.mode". ' .
            'Permissible values: "project", "organization"',
        );
        new Config(
            [
                'parameters' => [
                    'mode' => 'unknownMode',
                ],
            ],
            new ConfigDefinition(),
        );
    }

    public function validConfigDataProvider(): Iterator
    {
        yield [
            [],
            ['mode' => Config::MODE_PROJECT, 'incrementalFetching' => false, 'incremental' => false],
        ];

        yield [
            ['incrementalFetching' => false],
            ['mode' => Config::MODE_PROJECT, 'incrementalFetching' => false, 'incremental' => false],
        ];

        yield [
            ['incrementalFetching' => true],
            ['mode' => Config::MODE_PROJECT, 'incrementalFetching' => true, 'incremental' => false],
        ];

        yield [
            ['mode' => Config::MODE_PROJECT],
            ['mode' => Config::MODE_PROJECT, 'incrementalFetching' => false, 'incremental' => false],
        ];

        yield [
            ['mode' => Config::MODE_ORGANIZATION],
            ['mode' => Config::MODE_ORGANIZATION, 'incrementalFetching' => false, 'incremental' => false],
        ];

        yield [
            ['mode' => Config::MODE_PROJECT, 'incrementalFetching' => true, 'incremental' => false],
            ['mode' => Config::MODE_PROJECT, 'incrementalFetching' => true, 'incremental' => false],
        ];

        yield [
            ['mode' => Config::MODE_ORGANIZATION, 'incrementalFetching' => true, 'incremental' => true],
            ['mode' => Config::MODE_ORGANIZATION, 'incrementalFetching' => true, 'incremental' => true],
        ];
    }
}



================================================
FILE: tests/phpunit/ValueObjectTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\TelemetryData\Tests;

use Iterator;
use Keboola\TelemetryData\ValueObject\Column;
use Keboola\TelemetryData\ValueObject\Table;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

class ValueObjectTest extends TestCase
{
    /**
     * @dataProvider invalidColumnsConfig
     * @param string[] $columns
     * @param string[] $missingColumns
     */
    public function testTableObject(array $columns, array $missingColumns): void
    {
        $table = Table::buildFromArray(
            [
                'schema_name' => 'test_schema',
                'name' => 'test_name',
            ],
        );

        Assert::assertEquals('test_schema', $table->getSchema());
        Assert::assertEquals('test_name', $table->getName());

        foreach ($columns as $columnName) {
            $column = Column::buildFromArray(
                [
                    'COLUMN_NAME' => $columnName,
                    'CHARACTER_MAXIMUM_LENGTH' => 10,
                    'NUMERIC_PRECISION' => 20,
                    'NUMERIC_SCALE' => 30,
                    'IS_NULLABLE' => 'YES',
                    'DATA_TYPE' => 'varchar',
                    'TABLE_SCHEMA' => 'test_schema',
                    'TABLE_NAME' => 'test_name',
                ],
            );
            $table->addColumn($column);
        }

        Assert::assertEquals($missingColumns, $table->getMissingRequiredColumns());
    }

    public function testColumnObject(): void
    {
        $column = Column::buildFromArray(
            [
                'COLUMN_NAME' => Column::PROJECT_SINGLE_NAME,
                'CHARACTER_MAXIMUM_LENGTH' => 10,
                'NUMERIC_PRECISION' => 20,
                'NUMERIC_SCALE' => 30,
                'IS_NULLABLE' => 'YES',
                'DATA_TYPE' => 'varchar',
                'TABLE_SCHEMA' => 'test_schema',
                'TABLE_NAME' => 'test_name',
            ],
        );

        Assert::assertEquals(Column::PROJECT_SINGLE_NAME, $column->getName());
        Assert::assertEquals(10, $column->getCharacterMaximumLength());
        Assert::assertEquals(20, $column->getNumericPrecision());
        Assert::assertEquals(30, $column->getNumericScale());
        Assert::assertTrue($column->isNullable());
        Assert::assertEquals('varchar', $column->getDataType());
        Assert::assertEquals('test_schema', $column->getTableSchema());
        Assert::assertEquals('test_name', $column->getTableName());
    }

    public function invalidColumnsConfig(): Iterator
    {
        yield [
            [],
            [
                Column::PROJECT_SINGLE_NAME,
                Column::STACK_SINGLE_NAME,
                Column::PROJECT_COMPANY_NAME,
                Column::STACK_COMPANY_NAME,
                Column::PROJECT_ACTIVITY_CENTER_NAME,
                Column::STACK_ACTIVITY_CENTER_NAME,
                Column::INCREMENTAL_NAME,
            ],
        ];
        yield [
            [
                Column::STACK_COMPANY_NAME,
                Column::STACK_SINGLE_NAME,
                Column::STACK_ACTIVITY_CENTER_NAME,
                Column::PROJECT_COMPANY_NAME,
                Column::PROJECT_SINGLE_NAME,
                Column::PROJECT_ACTIVITY_CENTER_NAME,
            ],
            [Column::INCREMENTAL_NAME],
        ];
        yield [
            [
                Column::STACK_COMPANY_NAME,
                Column::STACK_SINGLE_NAME,
                Column::STACK_ACTIVITY_CENTER_NAME,
                Column::PROJECT_COMPANY_NAME,
                Column::PROJECT_ACTIVITY_CENTER_NAME,
                Column::INCREMENTAL_NAME,
            ],
            [Column::PROJECT_SINGLE_NAME],
        ];
        yield [
            [
                Column::STACK_COMPANY_NAME,
                Column::STACK_SINGLE_NAME,
                Column::STACK_ACTIVITY_CENTER_NAME,
                Column::PROJECT_SINGLE_NAME,
                Column::PROJECT_ACTIVITY_CENTER_NAME,
                Column::INCREMENTAL_NAME,
            ],
            [Column::PROJECT_COMPANY_NAME],
        ];
        yield [
            [
                Column::STACK_COMPANY_NAME,
                Column::STACK_ACTIVITY_CENTER_NAME,
                Column::PROJECT_COMPANY_NAME,
                Column::PROJECT_SINGLE_NAME,
                Column::PROJECT_ACTIVITY_CENTER_NAME,
                Column::INCREMENTAL_NAME,
            ],
            [Column::STACK_SINGLE_NAME],
        ];
        yield [
            [
                Column::STACK_SINGLE_NAME,
                Column::STACK_ACTIVITY_CENTER_NAME,
                Column::PROJECT_COMPANY_NAME,
                Column::PROJECT_SINGLE_NAME,
                Column::PROJECT_ACTIVITY_CENTER_NAME,
                Column::INCREMENTAL_NAME,
            ],
            [Column::STACK_COMPANY_NAME],
        ];
        yield [
            [
                Column::STACK_COMPANY_NAME,
                Column::STACK_SINGLE_NAME,
                Column::PROJECT_COMPANY_NAME,
                Column::PROJECT_SINGLE_NAME,
                Column::PROJECT_ACTIVITY_CENTER_NAME,
                Column::INCREMENTAL_NAME,
            ],
            [Column::STACK_ACTIVITY_CENTER_NAME],
        ];
        yield [
            [
                Column::STACK_COMPANY_NAME,
                Column::STACK_SINGLE_NAME,
                Column::STACK_ACTIVITY_CENTER_NAME,
                Column::PROJECT_COMPANY_NAME,
                Column::PROJECT_SINGLE_NAME,
                Column::INCREMENTAL_NAME,
            ],
            [Column::PROJECT_ACTIVITY_CENTER_NAME],
        ];
    }
}



================================================
FILE: .github/workflows/push.yml
================================================
name: GitHub Actions
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # Name of the image in the ECR
  APP_IMAGE: ex-data-telemetry

  # Developer portal login
  KBC_DEVELOPERPORTAL_VENDOR: "keboola"
  KBC_DEVELOPERPORTAL_APP: "keboola.ex-telemetry-data"
  KBC_DEVELOPERPORTAL_USERNAME: "keboola+ex_telemetry_data_gh_actions"
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # DockerHub login
  DOCKERHUB_USER: "keboolabot"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test KBC project
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }}
  KBC_TEST_PROJECT_URL: "https://connection.keboola.com/admin/projects/2703/dashboard"
  KBC_TEST_PROJECT_CONFIGS: "2867033176" # space separated list

  # env for extractor
  SNOWFLAKE_DB_DATABASE: "telemetry_data_gh_actions"
  SNOWFLAKE_DB_HOST: "kebooladev.snowflakecomputing.com"
  SNOWFLAKE_DB_WAREHOUSE: "DEV"
  SNOWFLAKE_DB_USER: "telemetry_data_gh_actions"
  SNOWFLAKE_DB_PASSWORD: ${{ secrets.SNOWFLAKE_DB_PASSWORD }}
  SNOWFLAKE_DB_PORT: "443"
  SNOWFLAKE_DB_SCHEMA: "telemetry_data_gh_actions"
  KBC_PROJECTID: 2
  KBC_STACKID: "connection.north-europe.azure.keboola.com"
  KBC_DATA_TYPE_SUPPORT: "none"
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Print Docker version
        run: docker -v
      -
        name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"
      -
        name: Build image
        run: docker build -t $APP_IMAGE .
      -
        name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
      -
        name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ steps.tag.outputs.app_image_tag }}
          push_latest: ${{ steps.tag.outputs.is_semantic_tag }}
          source_image: ${{ env.APP_IMAGE}}

  tests:
    needs: build
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix: ...
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.APP_IMAGE}}
          tag_as_latest: true
      -
        name: Run tests
        run: |
          docker run \
          -e SNOWFLAKE_DB_HOST \
          -e SNOWFLAKE_DB_USER \
          -e SNOWFLAKE_DB_PASSWORD \
          -e SNOWFLAKE_DB_DATABASE \
          -e SNOWFLAKE_DB_PORT \
          -e SNOWFLAKE_DB_SCHEMA \
          -e SNOWFLAKE_DB_WAREHOUSE \
          -e KBC_PROJECTID \
          -e KBC_STACKID \
          -e KBC_DATA_TYPE_SUPPORT \
          ${{env.APP_IMAGE}} \
          composer ci

  tests-in-kbc:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Run KBC test jobs
        if: env.KBC_STORAGE_TOKEN && env.KBC_TEST_PROJECT_CONFIGS
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ env.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    needs:
      - build
      - tests
      - tests-in-kbc
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.build.outputs.is_semantic_tag == 'true'
    steps:
      -
        name: Set tag in the Developer Portal
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}


