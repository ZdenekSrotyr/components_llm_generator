Directory structure:
└── keboola-component-k2/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── TEMPLATE_README.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── k2_object_metadata.py
    │   ├── k2parser.py
    │   ├── ssh_utils.py
    │   ├── table_handler.py
    │   └── client/
    │       ├── __init__.py
    │       └── client.py
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
K2 Extractor
=============

K2 is an ERP information system for managing production, inventory, financials, and more

This component fetches defined data objects from the K2 API

**Table of contents:**

[TOC]

Prerequisites
=============

[Whitelist the Keboola IP adresses](https://help.keboola.com/components/ip-addresses/) if necessary, or setup an ssh
tunnel.

Configuration
=============

### K2 Authorization Configuration

- Username (username) - [REQ] Username for K2
- Password (#password) - [REQ] Password for K2
- Service name (service_name) - [REQ] Name of the K2 service  http://myk2server.com/{SERVICE_NAME}
- Use ssh (use_ssh) - [REQ] If True, an SSH tunnel will be used to call the API
- SSH Tunnel configuration (ssh) - [OPT] Dictionary holding the following
    - SSH Username (username) - [REQ] The SSH User for connecting to your SSH server
    - SSH Private Key (#private_key) - [REQ] The base64-encoded private key for the key pair associated with your SSH
      server
    - SSH Tunnel Host (tunnel_host) - [REQ] The host name or host IP associated with your SSH server (Note: Don't use
      load balancer as host)
    - SSH Remote Address (remote_address) - [REQ] The address that is used to query the K2 API e.g. k2api.myfirm.cz
    - SSH Remote Port (remote_port) - [REQ] The port of the K2 API e.g. 8080
- Source url (source_url) - [OPT] The address that is used to query the K2 API, e.g. https://myk2server.com, necessary
  when not using SSH

### Configuration row

- Data object (data_object) - [REQ] Name of object to download from K2
- Fields (fields) - [OPT] A list of the names of data fields that should be fetched, separated by comma
- Conditions (conditions) - [OPT] Conditions used for filtering data. Using the format defined in
  the <a href='https://help.k2.cz/k2ori/02/en/10023272.htm#o106273'>K2 documentation</a>
- Loading Options (loading_options) - [REQ] dictionary holding the following :
    - Load Type (load_type) - [REQ] "Full Load" or "Incremental load" If set to Incremental load, the result tables will
      be updated based on primary key and new records will be fetched. Full load overwrites the destination table each
      time.
    - Incremental Field (incremental_field) - [OPT] Field from the K2 Object that should be used for incremental
      fetching; e.g. Timestamp
    - Date From (date_from)- [OPT] What date to fetch data from using the incremental field; either exact date in
      YYYY-MM-DD format, relative date e.g. 3 days ago, or last run to fetch data since last run
    - Date To (date_to)- [OPT] What date to fetch data to using the incremental field; either exact date in YYYY-MM-DD
      format, relative date e.g. 3 days ago, or now to fetch data till the current time

Developer notes
===========

This component is used for downloading data objects from K2. Each configuration is for downloading a single data object
with some specified fields that should be downloaded. Fields that should be downloaded are either properties of an
object or child objects of the object you are downloading.

To explain this further, you are downloading data about cars from K2. You download the object name : "Car" with the
fields
"ID, Brand, Model, YearOfBuild, Components, Components.Manufacturer"

The Brand, Model and YearOfBuild are fields of the Car object and Components is a child object, and Manufacturer is a
child object of Components

you will then have 3 tables:
Car : [ID, Brand, Model, YearOfBuild]
Component : [Car_ID, ID, ComponentName, ComponentType, ComponentCost]
Component_Manufacturer : [Car_ID, Component_ID, ID, ManufacturerName, ManufacturerCountry]


Sample Configuration
=============

```json
{
  "parameters": {
    "username": "USERNAME",
    "#password": "SECRET_VALUE",
    "service_name": "API",
    "data_object": "OBJECT_IN_K2",
    "incremental": true,
    "fields": "",
    "conditions": "",
    "use_ssh": true,
    "ssh": {
      "username": "SSH_USERNAME",
      "#private_key": "BASE64 encoded private key",
      "tunnel_host": "tunnel-host.com",
      "remote_address": "k2api.myservice.com",
      "remote_port": "8080"
    },
    "source_url": "http://k2api.myapi.com:8080/API",
    "loading_options": {
      "load_type": "Incremental load",
      "incremental_field": "Timestamp",
      "date_from": "last",
      "date_to": "now"
    }
  },
  "action": "run"
}
```

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in
the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/)



================================================
File: Dockerfile
================================================
FROM python:3.8.6-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY /component_config /code/component_config/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
keboola.utils==1.1.0
keboola.component==1.3.7
keboola.csvwriter==1.0.1
keboola.http-client==1.0.0
mock==4.0.3
freezegun==1.2.1
sshtunnel==0.4.0
requests~=2.27.1
paramiko~=2.10.4
cryptography==36.0.2
dateparser~=1.1.1

================================================
File: component_config/component_long_description.md
================================================
This component fetches defined data objects from the K2 API

================================================
File: component_config/component_short_description.md
================================================
K2 is an ERP information system for managing production, inventory, financials, and more

================================================
File: component_config/configRowSchema.json
================================================
{
  "title": "Configuration Schema",
  "type": "object",
  "properties": {
    "data_object": {
      "propertyOrder": 40,
      "title": "Data object",
      "type": "string",
      "description": "Name of object to download from K2"
    },
    "fields": {
      "propertyOrder": 50,
      "title": "Fields",
      "type": "string",
      "description": "A list of the names of data fields that should be fetched, separated by comma"
    },
    "conditions": {
      "propertyOrder": 60,
      "title": "Conditions",
      "type": "string",
      "description": "Conditions used for filtering data. Using the format defined in the <a href='https://help.k2.cz/k2ori/02/en/10023272.htm#o106273'>K2 documentation</a>"
    },
    "loading_options": {
      "type": "object",
      "title": "Loading Options",
      "propertyOrder": 90,
      "required": [
        "load_type",
        "incremental_field",
        "date_from",
        "date_to"
      ],
      "properties": {
        "load_type": {
          "title": "Load type",
          "type": "string",
          "enum": [
            "Full Load",
            "Incremental load"
          ],
          "default": "Full Load",
          "description": "If set to Incremental load, the result tables will be updated based on primary key and new records will be fetched. Full load overwrites the destination table each time.",
          "propertyOrder": 100
        },
        "incremental_field": {
          "title": "Incremental field",
          "type": "string",
          "options": {
            "dependencies": {
              "load_type": "Incremental load"
            }
          },
          "description": "Field from the K2 Object that should be used for incremental fetching; e.g. Timestamp",
          "propertyOrder": 110
        },
        "date_from": {
          "title": "Date from",
          "type": "string",
          "options": {
            "dependencies": {
              "load_type": "Incremental load"
            }
          },
          "default": "last run",
          "description": "What date to fetch data from using the incremental field; either exact date in YYYY-MM-DD format, relative date e.g. 3 days ago, or last run to fetch data since last run ",
          "propertyOrder": 120
        },
        "date_to": {
          "title": "Date to",
          "type": "string",
          "options": {
            "dependencies": {
              "load_type": "Incremental load"
            }
          },
          "description":  "What date to fetch data to using the incremental field; either exact date in YYYY-MM-DD format, relative date e.g. 3 days ago, or now to fetch data till the current time",
          "default": "now",
          "propertyOrder": 130
        }
      }
    }
  }
}

================================================
File: component_config/configSchema.json
================================================
{
  "title": "K2 Authorization Configuration",
  "type": "object",
  "required": [
    "username",
    "#password"
  ],
  "properties": {
    "username": {
      "propertyOrder": 10,
      "title": "Username",
      "type": "string",
      "description": "Username for K2"
    },
    "#password": {
      "propertyOrder": 20,
      "title": "Password",
      "type": "string",
      "description": "Password for K2",
      "format": "password"
    },
    "service_name": {
      "propertyOrder": 30,
      "title": "Service name",
      "type": "string",
      "description": "Name of the K2 service  http://myk2server.com/{SERVICE_NAME}"
    },
    "use_ssh": {
      "propertyOrder": 70,
      "title": "Use ssh",
      "type": "boolean",
      "description": "If checked, an SSH tunnel will be used to call the API",
      "format": "checkbox",
      "default": false
    },
    "ssh": {
      "options": {
        "dependencies": {
          "use_ssh": true
        }
      },
      "propertyOrder": 80,
      "title": "SSH Tunnel configuration",
      "type": "object",
      "description": "",
      "properties": {
        "username": {
          "propertyOrder": 10,
          "title": "Username",
          "description": "The SSH User for connecting to your SSH server",
          "type": "string"
        },
        "#private_key": {
          "propertyOrder": 20,
          "title": "Private key",
          "type": "string",
          "format": "textarea",
          "options": {
            "input_height": "150px"
          },
          "description": "The base64-encoded private key for the key pair associated with your SSH server"
        },
        "#private_key_password": {
          "propertyOrder": 25,
          "title": "Private key password",
          "type": "string",
          "format": "password",
          "description": "The password for the provided private key"
        },
        "tunnel_host": {
          "propertyOrder": 30,
          "title": "Tunnel host",
          "type": "string",
          "description": "The host name or host IP associated with your SSH server (Note: Don't use load balancer as host)"
        },
        "remote_address": {
          "propertyOrder": 40,
          "title": "K2 API source address",
          "type": "string",
          "description": "The address that is used to query the K2 API e.g. k2api.myfirm.cz"
        },
        "remote_port": {
          "propertyOrder": 50,
          "title": "K2 API port",
          "type": "string",
          "description": "The port of the K2 API e.g. 8080"
        }
      }
    },
    "source_url": {
      "propertyOrder": 70,
      "title": "Source url",
      "type": "string",
      "description": "The address that is used to query the K2 API, e.g. https://myk2server.com",
      "options": {
        "dependencies": {
          "use_ssh": false
        }
      }
    }
  }
}

================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "use_ssh": false,
    "username": "sssss@sssss.cz",
    "#password": "sssssssss",
    "source_url": "https://sssss.k2.cz",
    "service_name": "API",
    "debug": true,
    "fields": "RID,TimeStamp,TransferDate,WarehouseFromId.Abbr,WarehouseToId",
    "conditions": "RID;EQ;1234",
    "data_object": "Pre",
    "loading_options": {
      "load_type": "Full Load"
    }
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}


================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 




================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag

================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test


================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi

================================================
File: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi

================================================
File: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"

================================================
File: src/component.py
================================================
import logging
import warnings
from datetime import datetime
from typing import List, Dict, Optional

import dateparser
import requests
from keboola.component.base import ComponentBase
from keboola.component.dao import TableMetadata
from keboola.component.exceptions import UserException
from keboola.csvwriter import ElasticDictWriter
from sshtunnel import SSHTunnelForwarder, BaseSSHTunnelForwarderError

from keboola.utils.helpers import comma_separated_values_to_list
from client import K2Client, K2ClientException
from k2parser import K2DataParser
from table_handler import TableHandler
from ssh_utils import get_private_key, SomeSSHException
from k2_object_metadata import K2ObjectMetadata, K2_OBJECT_CLASS_NAME_KEY, K2_OBJECT_FIELD_NAME_KEY, \
    K2_OBJECT_PARENT_CLASS_NAME_KEY, K2_OBJECT_PARENT_PRIMARY_KEYS

# Ignore dateparser warnings regarding pytz
warnings.filterwarnings(
    "ignore",
    message="The localize method is no longer necessary, as this time zone supports the fold attribute",
)

KEY_USERNAME = "username"
KEY_PASSWORD = "#password"
KEY_DATA_OBJECT = "data_object"
KEY_FIELDS = "fields"
KEY_CONDITIONS = "conditions"
KEY_SOURCE_URL = "source_url"
KEY_SERVICE_NAME = "service_name"

KEY_LOADING_OPTIONS = "loading_options"
KEY_LOAD_TYPE = "load_type"
KEY_INCREMENTAL_FIELD = "incremental_field"
KEY_DATE_FROM = "date_from"
KEY_DATE_TO = "date_to"

KEY_USE_SSH = "use_ssh"
KEY_SSH = "ssh"
KEY_SSH_PRIVATE_KEY = "#private_key"
KEY_SSH_PRIVATE_KEY_PASSWORD = "#private_key_password"
KEY_SSH_USERNAME = "username"
KEY_SSH_TUNNEL_HOST = "tunnel_host"
KEY_SSH_REMOTE_ADDRESS = "remote_address"
KEY_SSH_REMOTE_PORT = "remote_port"

KEY_STATE_PREVIOUS_COLUMNS = "previous_columns"
KEY_STATE_LAST_RUN = "last_run"

REQUIRED_PARAMETERS = [KEY_USERNAME, KEY_PASSWORD, KEY_LOADING_OPTIONS, KEY_DATA_OBJECT, KEY_SERVICE_NAME]
REQUIRED_IMAGE_PARS = []

LOCAL_BIND_ADDRESS = "localhost"
LOCAL_BIND_PORT = 9800


class Component(ComponentBase):

    def __init__(self):
        self.ssh_server = None
        self.client = None
        self.state = None
        self.date_to = None
        self.date_from = None
        self.table_handlers = {}

        super().__init__()
        self.new_state = self._init_new_state()

    def run(self):
        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        self.validate_image_parameters(REQUIRED_IMAGE_PARS)

        self.state = self.get_state_file()

        self.date_from = self._get_date_from()
        self.date_to = self._get_date_to()
        self._validate_fetching_mode()

        params = self.configuration.parameters

        self._init_client()

        if params.get(KEY_USE_SSH):
            self._create_and_start_ssh_tunnel()

        object_to_fetch = params.get(KEY_DATA_OBJECT)
        fields_to_fetch = self._get_fields_to_fetch()

        self._log_what_will_be_fetched(object_to_fetch)

        object_metadata = self._get_object_metadata(object_to_fetch)

        self._init_table_handlers(object_metadata, fields_to_fetch)
        self._fetch_and_write_data(object_metadata, fields_to_fetch)
        self._close_table_handlers()

        self.write_state_file(self.new_state)

    def _init_client(self) -> None:
        params = self.configuration.parameters
        username = params.get(KEY_USERNAME)
        password = params.get(KEY_PASSWORD)
        k2_address = self._get_k2_address()
        service_name = params.get(KEY_SERVICE_NAME)

        self.client = K2Client(username, password, k2_address, service_name)

    def _init_new_state(self) -> dict:
        statefile = self.get_state_file()
        previous_columns = statefile.get(KEY_STATE_PREVIOUS_COLUMNS, {})

        return {"last_run": datetime.now().strftime("%Y-%m-%d %H:%M:%S"), KEY_STATE_PREVIOUS_COLUMNS: previous_columns}

    def _fetching_is_incremental(self) -> bool:
        params = self.configuration.parameters
        loading_options = params.get(KEY_LOADING_OPTIONS, {})
        load_type = loading_options.get(KEY_LOAD_TYPE)
        return load_type == "Incremental load"

    def _get_incremental_field(self) -> Optional[str]:
        params = self.configuration.parameters
        loading_options = params.get(KEY_LOADING_OPTIONS, {})
        incremental = self._fetching_is_incremental()
        return loading_options.get(KEY_INCREMENTAL_FIELD) if incremental else None

    def _get_date_from(self) -> Optional[str]:
        params = self.configuration.parameters
        loading_options = params.get(KEY_LOADING_OPTIONS, {})
        incremental = self._fetching_is_incremental()
        last_run = self.state.get(KEY_STATE_LAST_RUN)
        return self._get_parsed_date(loading_options.get(KEY_DATE_FROM), last_run) if incremental else None

    def _get_date_to(self) -> Optional[str]:
        params = self.configuration.parameters
        loading_options = params.get(KEY_LOADING_OPTIONS, {})
        incremental = self._fetching_is_incremental()
        return self._get_parsed_date(loading_options.get(KEY_DATE_TO), "now") if incremental else None

    def _get_fetching_conditions(self) -> str:
        params = self.configuration.parameters
        incremental_field = self._get_incremental_field()
        conditions = params.get(KEY_CONDITIONS)
        return self._update_conditions_with_incremental_options(conditions, incremental_field)

    def _get_fields_to_fetch(self) -> str:
        params = self.configuration.parameters
        if fields := params.get(KEY_FIELDS):
            fields = fields.replace(" ", "")
        return fields

    def _get_k2_address(self) -> str:
        params = self.configuration.parameters
        if params.get(KEY_USE_SSH):
            return f"http://{LOCAL_BIND_ADDRESS}:{LOCAL_BIND_PORT}"
        return params.get(KEY_SOURCE_URL)

    def _fetch_and_write_data(self, object_metadata: K2ObjectMetadata, fields_to_fetch: str) -> None:
        """
        Paginates through all data which needs to be fetched based on conditions specified in the config and
        parses and saves all data to their respective csv tables in the data directory.

        Args:
            object_metadata: Metadata of the object that will be fetched
            fields_to_fetch: String of comma separated fields that will be fetched

        """
        child_object_foreign_keys = self._get_child_foreign_keys(object_metadata, fields_to_fetch)
        object_name = object_metadata.class_name
        conditions = self._get_fetching_conditions()
        try:
            for i, page_data in enumerate(self.client.get_object_data(object_name, fields_to_fetch, conditions)):
                if i % 20 == 0:
                    logging.info(f"Fetching page {i}")
                parsed_data = self._parse_object_data(page_data, object_name, child_object_foreign_keys)
                for parsed_data_name in parsed_data:
                    if parsed_data_name in self.table_handlers:
                        self.table_handlers[parsed_data_name].writer.writerows(parsed_data[parsed_data_name])
        except K2ClientException as k2_exc:
            raise UserException(k2_exc) from k2_exc
        except requests.exceptions.HTTPError as http_exc:
            raise UserException(http_exc) from http_exc
        except requests.exceptions.ConnectionError as http_exc:
            raise UserException("Could not connect to K2 API") from http_exc

    @staticmethod
    def _parse_object_data(k2_data: List[Dict], data_object, child_objects: Dict) -> Dict:
        parser = K2DataParser(child_object_parent_primary_keys=child_objects)
        return parser.parse_data(k2_data, data_object)

    def _get_object_metadata(self, object_class_name: str) -> K2ObjectMetadata:
        try:
            return K2ObjectMetadata(self.client.get_object_meta(object_class_name))
        except K2ClientException as k2exc:
            raise UserException("Authorization is incorrect, please validate the username, "
                                "password, service, and data object for K2") from k2exc
        except requests.exceptions.ConnectionError as e:
            raise UserException("Failed to connect to K2 Address and port, please validate if it is correct") from e

    @staticmethod
    def _generate_table_metadata(metadata: K2ObjectMetadata, table_columns: List[str]) -> TableMetadata:
        """
        Converts the metadata of a K2 object to Keboola Table metadata

        Args:
            metadata: metadata of a K2 object
            table_columns: columns in the resulting Keboola table

        Returns:
            Table metadata generated from K2 Object metadata

        """
        tm = TableMetadata()
        if metadata.caption:
            tm.add_table_description(metadata.caption)
        column_descriptions = {}
        for column in metadata.field_definitions:
            if column.get(K2_OBJECT_FIELD_NAME_KEY) in table_columns:
                column_descriptions[column.get(K2_OBJECT_FIELD_NAME_KEY)] = column.get("Description", "")
        tm.add_column_descriptions(column_descriptions)
        return tm

    @staticmethod
    def _get_parsed_date(date_input: Optional[str], last_run: Optional[str]) -> Optional[str]:
        if not date_input:
            parsed_date = None
        elif date_input.lower() in ["last", "last run"] and last_run:
            parsed_date = dateparser.parse(last_run)
        elif date_input.lower() in ["now", "today"]:
            parsed_date = datetime.now()
        elif date_input.lower() in ["last", "last run"] and not last_run:
            parsed_date = dateparser.parse("1990-01-01")
        else:
            try:
                parsed_date = dateparser.parse(date_input).date()
            except (AttributeError, TypeError) as err:
                raise UserException(f"Cannot parse date input {date_input}") from err
        if parsed_date:
            parsed_date = parsed_date.strftime("%Y-%m-%d %H:%M:%S")
        return parsed_date

    def _update_conditions_with_incremental_options(self, conditions: str, incremental_field: str) -> str:
        """
        Updates fetching conditions to contain the incremental filter so only those data are fetched.

        Args:
            conditions: string of conditions with the format defined in
                        https://help.k2.cz/k2ori/02/en/10023272.htm#o106273
            incremental_field: The name of the field that is being used for incremental fetching, e.g. Timestamp

        Returns: updated conditions string

        """
        if incremental_field and self.date_from and self.date_to:
            incremental_condition = f"{incremental_field};GE;{self.date_from},{incremental_field};LE;{self.date_to}"
            if conditions:
                conditions = f"{conditions},{incremental_condition}"
            else:
                conditions = incremental_condition
        return conditions

    def _create_and_start_ssh_tunnel(self) -> None:
        self._create_ssh_tunnel()
        try:
            self.ssh_server.start()
        except BaseSSHTunnelForwarderError as e:
            raise UserException(
                "Failed to establish SSH connection. Recheck all SSH configuration parameters") from e

    def _create_ssh_tunnel(self) -> None:
        params = self.configuration.parameters
        ssh = params.get(KEY_SSH)
        private_key = ssh.get(KEY_SSH_PRIVATE_KEY)
        private_key_password = ssh.get(KEY_SSH_PRIVATE_KEY_PASSWORD)
        try:
            private_key = get_private_key(private_key, private_key_password)
        except SomeSSHException as key_exc:
            raise UserException from key_exc
        ssh_tunnel_host = ssh.get(KEY_SSH_TUNNEL_HOST)
        ssh_remote_address = ssh.get(KEY_SSH_REMOTE_ADDRESS)
        try:
            ssh_remote_port = int(ssh.get(KEY_SSH_REMOTE_PORT))
        except ValueError as v_e:
            raise UserException("Remote port must be a valid integer") from v_e
        ssh_username = ssh.get(KEY_SSH_USERNAME)

        self.ssh_server = SSHTunnelForwarder(ssh_address_or_host=ssh_tunnel_host,
                                             ssh_pkey=private_key,
                                             ssh_username=ssh_username,
                                             remote_bind_address=(ssh_remote_address, ssh_remote_port),
                                             local_bind_address=(LOCAL_BIND_ADDRESS, LOCAL_BIND_PORT),
                                             ssh_config_file=None,
                                             allow_agent=False)

    @staticmethod
    def _add_parent_prefix_to_keys(parent_prefix: str, primary_keys: List[str]) -> List[str]:
        return [f"{parent_prefix}_{pk}" for pk in primary_keys]

    def _find_child_objects(self, k2_object_class_name: str, k2_object_fields: List[str]) -> List[Dict]:
        """
        Passes through a list of fields of a k2 object and determines which ones are child objects. Child objects are
        then returned in a list of dictionaries.

        Args:
            k2_object_class_name: name of k2 object data is being fetched for
            k2_object_fields: list of fields that are being fetched

        Returns:
            A list of dictionaries containing child objects Class names, Fieldnames, and the corresponding class name
            and primary keys of the parent object of the child

        """
        object_metadata = self._get_object_metadata(k2_object_class_name)
        all_child_objects = []
        for k2_object_field in k2_object_fields:
            if child_objects := self._find_child_object(object_metadata, k2_object_field):
                all_child_objects.extend(child_objects)
        return all_child_objects

    def _find_child_object(self, object_metadata: K2ObjectMetadata, k2_object_field: str, all_child_objects=None):
        """
        Recursively goes through a field name to find if it is a child object.
        A '.' signifies a parent child relationship so field name of ObjectA.ObjectB signifies that B is a child of A,
        and we return the metadata of the B object. Once the final child object is found for the field name it is
        returned. If the field is just a field of the object and not a child object, then None is returned.

        Args:
            object_metadata: the metadata of the parent object of the field
            k2_object_field: the name of the field which is used to determine whether it is a child object

        Returns:
            Metadata about a child, in the form of a dictionary containing the child's Class name, Field name,
            and the corresponding class name and primary keys of the parent object of the child

        """
        if not all_child_objects:
            all_child_objects = []
        if "." in k2_object_field:
            split_text = k2_object_field.split(".")
            main_field_name = split_text[0]
            main_class_name = object_metadata.get_child_class_name_from_field_name(main_field_name)

            if main_class_name:
                child_object_metadata = self._get_object_metadata(main_class_name)
                all_child_objects.append(object_metadata.get_child_metadata(main_field_name))
                childs_children = ".".join(split_text[1:])
                self._find_child_object(child_object_metadata, childs_children, all_child_objects)
        else:
            child_class_name = object_metadata.get_child_class_name_from_field_name(k2_object_field)
            if child_class_name:
                all_child_objects.append(object_metadata.get_child_metadata(k2_object_field))
        return all_child_objects

    def _get_child_foreign_keys(self, parent_object_metadata: K2ObjectMetadata, fields: str) -> Dict:
        """
        Passes through all child objects and find the primary keys of each child's parents, this data
        is then used for parsing the data, as the parent primary keys should be saved with the child data so they can
        be linked.

        Args:
            parent_object_metadata: metadata of the parent object of the child
            fields: str containing fields to be fetched

        Returns: A dictionary with the key as the string f"{parent class name}_{child field name}" and the value as the
        primary keys of the parent object of the child

        """
        parsed_fields = comma_separated_values_to_list(fields)
        child_objects = self._find_child_objects(parent_object_metadata.class_name, parsed_fields)
        child_foreign_keys = {}
        for child_object in child_objects:
            parent_metadata = self._get_object_metadata(child_object.get(K2_OBJECT_PARENT_CLASS_NAME_KEY))
            parents_primary_keys = parent_metadata.primary_key_names
            key_name = f"{parent_metadata.class_name}_{child_object.get(K2_OBJECT_FIELD_NAME_KEY)}"
            child_foreign_keys[key_name] = parents_primary_keys
        return child_foreign_keys

    def _validate_fetching_mode(self) -> None:
        incremental_load = self._fetching_is_incremental()
        incremental_field = self._get_incremental_field()
        if incremental_load and (not incremental_field or not self.date_from or not self.date_to):
            raise UserException("To run incremental load mode you need to specify the incremental field, "
                                "date from and date to")

    def _get_fields_from_previous_run(self, object_name: str) -> List[str]:
        return self.state.get(KEY_STATE_PREVIOUS_COLUMNS, {}).get(object_name) or []

    def _log_what_will_be_fetched(self, object_to_fetch) -> None:
        logging.info(f"Fetching object : {object_to_fetch}")
        if self._fetching_is_incremental():
            logging.info(f"Fetching data from {self.date_from} to {self.date_to}")

    def _init_table_handlers(self, object_metadata: K2ObjectMetadata, fields_to_fetch: str) -> None:
        """
         Initializes the main table handler and child table handlers (A Table handler is an object that holds the
         metadata of the object to be downloaded, the table writer, and the table definition).
         The main table handler is for the data that corresponds to the main object. The child table handlers are for
         all the child objects of the main table data.
         Each table handler is stored in the Table Handler dictionary variable in the component. It can be accessed by
         the name of the table handler, the main table handler name is the Class name of the object and the
         name of the child table handlers is the {Parent Class Name}_{Child Name}

        Args:
            object_metadata: Metadata of the object in K2 that will be fetched
            fields_to_fetch: Comma separated list of fields of the K2 object that should be fetched, if empty, all
                             fields will be fetched. It is possible to specify child objects in the fields
        """
        incremental_load = self._fetching_is_incremental()
        self._init_main_table_handler(object_metadata, incremental_load)
        self._init_child_table_handlers(object_metadata, fields_to_fetch, incremental_load)

    def _init_main_table_handler(self, object_metadata: K2ObjectMetadata, incremental_load: bool) -> None:
        object_name = object_metadata.class_name
        object_fields_from_previous_run = self._get_fields_from_previous_run(object_name)

        table_definition = self.create_out_table_definition(f"{object_name}.csv",
                                                            primary_key=object_metadata.primary_keys,
                                                            incremental=incremental_load)

        writer = ElasticDictWriter(table_definition.full_path, object_fields_from_previous_run)
        self.table_handlers[object_name] = TableHandler(table_definition=table_definition,
                                                        writer=writer,
                                                        object_metadata=object_metadata)

    def _init_child_table_handlers(self, parent_object_metadata: K2ObjectMetadata, fields: str,
                                   incremental: bool) -> None:
        parsed_fields = comma_separated_values_to_list(fields)
        child_objects = self._find_child_objects(parent_object_metadata.class_name, parsed_fields)

        for child_object in child_objects:
            self._init_child_table_handler(child_object, incremental)

    def _init_child_table_handler(self, child_object: Dict, incremental: bool) -> None:
        """
        Initializes a table handler for a specific child object.
        Initializes the table definition for the handler by creating a table name and finding the primary keys
        Initializes the table writer for the handler using the table definition and columns from the state (all columns
        from the previous run should be present in the output table).

        Args:
            child_object: Metadata about a child, in the form of a dictionary containing the child's Class name,
                          Field name, and the corresponding class name and primary keys of the parent object of
                          the child
            incremental: boolean value indicating whether the table should be incrementally loaded into KBC storage

        """
        parent_class_name = child_object.get(K2_OBJECT_PARENT_CLASS_NAME_KEY)
        child_class_name = child_object.get(K2_OBJECT_CLASS_NAME_KEY)
        child_field_name = child_object.get(K2_OBJECT_FIELD_NAME_KEY)
        full_name = f"{parent_class_name}_{child_field_name}"
        table_name = f"{full_name}.csv"

        object_metadata = self._get_object_metadata(child_object.get(K2_OBJECT_CLASS_NAME_KEY))

        parent_keys_with_prefix = self._add_parent_prefix_to_keys(parent_class_name,
                                                                  child_object.get(K2_OBJECT_PARENT_PRIMARY_KEYS))
        child_primary_keys = object_metadata.primary_key_names
        child_primary_keys += parent_keys_with_prefix

        child_table_definition = self.create_out_table_definition(table_name,
                                                                  primary_key=child_primary_keys,
                                                                  incremental=incremental)

        child_prev_columns = self.state.get(KEY_STATE_PREVIOUS_COLUMNS, {}).get(child_class_name, [])
        writer = ElasticDictWriter(child_table_definition.full_path, child_prev_columns)

        self.table_handlers[full_name] = TableHandler(table_definition=child_table_definition,
                                                      object_metadata=object_metadata,
                                                      writer=writer)

    def _close_table_handlers(self) -> None:
        for table_handler in self.table_handlers:
            self._close_table_handler(self.table_handlers[table_handler])

    def _close_table_handler(self, table_handler: TableHandler) -> None:
        """
        Closes the table handler writer. Updates the table definition columns with the final columns of the writer.
        Adds table metadata to the table definition. Writes the manifest of the table. Updates new state with the
        columns of the table.

        Args:
            table_handler: the table handler to be closed

        """
        k2_object_name = table_handler.object_metadata.class_name
        if not k2_object_name:
            raise UserException("K2 server has not returned the object name in object metadata, "
                                "please check the K2 object.")

        table_handler.writer.close()

        final_fields = table_handler.writer.fieldnames
        table_handler.table_definition.columns = final_fields

        table_handler.table_definition.table_metadata = self._generate_table_metadata(
            metadata=table_handler.object_metadata,
            table_columns=final_fields)

        self.write_manifest(table_handler.table_definition)

        logging.debug(f"Saving fields for {k2_object_name}: {final_fields}")
        self.new_state[KEY_STATE_PREVIOUS_COLUMNS][k2_object_name] = final_fields


if __name__ == "__main__":
    try:
        comp = Component()
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: src/k2_object_metadata.py
================================================
from typing import Optional, List, Dict

K2_OBJECT_CLASS_NAME_KEY = "ClassName"
K2_OBJECT_FIELD_NAME_KEY = "FieldName"
K2_OBJECT_PARENT_CLASS_NAME_KEY = "ParentClassName"
K2_OBJECT_PARENT_PRIMARY_KEYS = "ParentPrimaryKeys"


class K2ObjectMetadata:
    def __init__(self, metadata: Dict):
        self.metadata = metadata

    @property
    def class_name(self) -> str:
        return self.metadata.get(K2_OBJECT_CLASS_NAME_KEY)

    @property
    def field_definitions(self) -> List:
        return self.metadata.get("FieldList", {})

    @property
    def caption(self) -> str:
        return self.metadata.get("Caption")

    @property
    def primary_key_names(self) -> List:
        return [primary_key.get(K2_OBJECT_FIELD_NAME_KEY) for primary_key in self.metadata.get("PrimaryKeyFieldList")]

    @property
    def field_list(self) -> List:
        return list(self.metadata.get("FieldList"))

    @property
    def child_list(self) -> List:
        return self.metadata.get("ChildList", [])

    @property
    def primary_keys(self) -> List[str]:
        primary_keys = []
        if primary_keys_list := self.metadata.get("PrimaryKeyFieldList"):
            primary_keys = [primary_key.get(K2_OBJECT_FIELD_NAME_KEY) for primary_key in primary_keys_list]
        return primary_keys

    def get_child_class_name_from_field_name(self, child_field_name: str) -> str:
        for child in self.child_list:
            if child_field_name == child.get(K2_OBJECT_FIELD_NAME_KEY):
                return child.get("ChildClassName")

    def get_child_metadata(self, child_field_name: str) -> Optional[Dict]:
        for child in self.child_list:
            if child_field_name == child.get(K2_OBJECT_FIELD_NAME_KEY):
                return {K2_OBJECT_CLASS_NAME_KEY: child.get("ChildClassName"),
                        K2_OBJECT_FIELD_NAME_KEY: child.get(K2_OBJECT_FIELD_NAME_KEY),
                        K2_OBJECT_PARENT_CLASS_NAME_KEY: self.metadata.get(K2_OBJECT_CLASS_NAME_KEY),
                        K2_OBJECT_PARENT_PRIMARY_KEYS: self.primary_keys}


================================================
File: src/k2parser.py
================================================
from typing import Union, List, Dict, Tuple, Optional
from enum import Enum, auto


class K2DataObject(Enum):
    BASE = auto()
    NESTED = auto()
    CHILD_TABLE = auto()


class K2DataParser:
    def __init__(self, child_object_parent_primary_keys: Dict[str, List]):
        self.child_object_parent_primary_keys = child_object_parent_primary_keys

    def parse_data(self, json_data: List[Dict], main_table_name: str) -> Dict:
        final_data = {}
        for row in json_data:
            parsed_row = self._parse_row_to_tables(row, main_table_name)
            for key in parsed_row:
                if key not in final_data:
                    final_data[key] = []
                final_data[key].extend(parsed_row[key])
        return final_data

    def _parse_row_to_tables(self, data_object: Dict, main_table_name: str) -> Dict:
        table_data = {main_table_name: []}

        def init_table(key: str):
            if key not in table_data:
                table_data[key] = []

        def parse_field(customer_data: Dict, table_name: str, table_index: int = 0, parent_name: str = ""):
            for index, sub_data in enumerate(customer_data.get("FieldValues")):
                type_of_data = self.get_data_type(sub_data)
                if type_of_data == K2DataObject.BASE:
                    parse_object(table_name, sub_data, table_index, parent_name)
                elif type_of_data == K2DataObject.CHILD_TABLE:
                    child_name = sub_data.get("Name")
                    child_table_name = f"{customer_data.get('DOClassName')}_{child_name}"
                    parent_pkeys = self.get_parent_pkeys_from_child(child_table_name)
                    data_to_send = sub_data.get("Value").get("Items")
                    p_key_name, p_key_val = self.get_primary_key(customer_data.get("FieldValues"), parent_pkeys)
                    p_key_name = f"{customer_data.get('DOClassName')}_{p_key_name}"
                    parse_child_table(data_to_send, child_table_name, p_key_name, p_key_val)
                elif type_of_data == K2DataObject.NESTED:
                    if parent_name:
                        new_parent_name = f"{parent_name}_{sub_data.get('Name')}"
                    else:
                        new_parent_name = sub_data.get('Name')
                    parse_field(sub_data.get("Value"), table_name, table_index, parent_name=new_parent_name)

        def parse_child_table(data: List[Dict], table_name: str, p_key_name: str, p_key_val: Union[str, int]):
            init_table(table_name)
            current_child_table_len = len(table_data[table_name])
            for index, datum in enumerate(data):
                table_index = current_child_table_len + index
                parse_field(datum, table_name, table_index)
                table_data[table_name][table_index][p_key_name] = p_key_val

        def parse_object(table_name: str, data: Dict, table_index: int, parent_name: str = ''):
            if len(table_data[table_name]) < table_index + 1:
                table_data[table_name].append({})
            name = data.get("Name")
            if parent_name:
                name = f"{parent_name}_{data.get('Name')}"
            if name in table_data[table_name][table_index]:
                raise ValueError("Attempting to overwrite data, Parsing Failed")
            table_data[table_name][table_index][name] = data.get("Value")

        parse_field(data_object, main_table_name)
        return table_data

    @staticmethod
    def get_data_type(data_object: Dict) -> K2DataObject:
        data_type = K2DataObject.BASE
        if isinstance(data_object.get("Value"), dict):
            if data_object.get("Value").get("__type") == 'DataObjectWrapper:K2.Data':
                data_type = K2DataObject.NESTED
            elif data_object.get("Value").get("__type") == 'ChildDataObjectWrapper:K2.Data':
                data_type = K2DataObject.CHILD_TABLE
        return data_type

    @staticmethod
    def get_primary_key(data: List[Dict], pkey_names: List[str]) -> Tuple[Optional[str], Optional[Union[str, int]]]:
        for pkey_name in pkey_names:
            for datum in data:
                if datum.get("Name") == pkey_name:
                    return datum.get("Name"), datum.get("Value")
        return None, None

    def get_parent_pkeys_from_child(self, child_table_name):
        for child in self.child_object_parent_primary_keys:
            if child == child_table_name:
                return self.child_object_parent_primary_keys[child]
        return ["RID", "ID", "Id"]


================================================
File: src/ssh_utils.py
================================================
import base64
import binascii
import contextlib
import paramiko
from io import StringIO
from typing import Tuple


class SomeSSHException(Exception):
    pass


def get_private_key(input_key, private_key_password):
    key = _get_decoded_key(input_key)
    try:
        if private_key_password:
            return paramiko.RSAKey.from_private_key(StringIO(key), password=private_key_password)
        else:
            return paramiko.RSAKey.from_private_key(StringIO(key))
    except paramiko.ssh_exception.SSHException as pkey_error:
        raise SomeSSHException("Invalid private key")from pkey_error


def _get_decoded_key(input_key):
    """
        Have to satisfy both encoded and not encoded keys
    """
    b64_decoded_input_key = ""
    with contextlib.suppress(binascii.Error):
        b64_decoded_input_key = base64.b64decode(input_key, validate=True).decode('utf-8')

    is_valid_b64, message_b64 = validate_ssh_private_key(b64_decoded_input_key)
    is_valid, message = validate_ssh_private_key(input_key)
    if is_valid_b64:
        final_key = b64_decoded_input_key
    elif is_valid:
        final_key = input_key
    else:
        raise SomeSSHException("\n".join([message, message_b64]))
    return final_key


def validate_ssh_private_key(ssh_private_key: str) -> Tuple[bool, str]:
    if "\n" not in ssh_private_key:
        return False, "SSH Private key is invalid, make sure it \\n characters as new lines"
    return True, ""


================================================
File: src/table_handler.py
================================================
class TableHandler:
    def __init__(self, table_definition, writer, object_metadata, parent_primary_keys=None, parent_name=None):
        self.table_definition = table_definition
        self.writer = writer
        self.object_metadata = object_metadata
        self.parent_primary_keys = parent_primary_keys
        self.parent_name = parent_name


================================================
File: src/client/__init__.py
================================================
from .client import K2Client, K2ClientException  # noqa

================================================
File: src/client/client.py
================================================
import hmac
import base64
import urllib
import requests
import json
from urllib.parse import unquote
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
from typing import Generator, Dict, Optional
from keboola.http_client import HttpClient

BASE_URL = ""
PAGE_SIZE = 250


class K2ClientException(Exception):
    pass


class K2Client(HttpClient):
    def __init__(self, username: str, password: str, k2_address: str, service_name: str) -> None:
        self.username = username
        self.password = password
        self.k2_address = k2_address
        self.service_name = service_name
        super().__init__(f"{k2_address}/{service_name}", max_retries=3)

    def get_object_meta(self, object_name: str) -> Dict:
        requests_url = f"{self.base_url}Meta/{object_name}"
        auth_header = self._get_auth_header(self.username, self.password, requests_url)
        response = requests.get(requests_url, headers=auth_header)
        if response.status_code != 200:
            raise K2ClientException(
                f"Failed to fetch object metadata because of error {response.status_code} : {response.text}")
        return json.loads(response.text)

    def get_object_data(self, object_name: str, fields: Optional[str], conditions: Optional[str]) -> Generator:

        parameters = self._generate_object_request_params(fields, conditions)
        requests_url = self._generate_object_request_url(object_name, parameters)
        auth_header = self._get_auth_header(self.username, self.password, requests_url)

        last_page = False
        next_page_url = ""
        while not last_page:
            if next_page_url:
                auth_header = self._get_auth_header(self.username, self.password, next_page_url)
                response = self.get_raw(next_page_url, is_absolute_path=True, headers=auth_header)
            else:
                response = self.get_raw(requests_url, is_absolute_path=True, headers=auth_header)
            self._handle_http_error(response)
            current_page = json.loads(response.text)
            next_page_url = current_page.get("NextPageURL")
            if not next_page_url:
                last_page = True
            yield current_page.get("Items")

    def _get_auth_header(self, username: str, password: str, source_url: str) -> Dict:
        hmac_hash = self._generate_hmac_hash(password, source_url)
        return {"Authorization": f"{username}:{hmac_hash}"}

    @staticmethod
    def _generate_object_request_params(fields: Optional[str], conditions: Optional[str]) -> Dict:
        parameters = {"pageSize": PAGE_SIZE}
        if fields:
            parameters["fields"] = fields
        if conditions:
            parameters["conditions"] = conditions
        return parameters

    def _generate_object_request_url(self, object_name: str, parameters: Dict) -> str:
        encoded_params = urllib.parse.urlencode(parameters)
        encoded_params = encoded_params.replace("+", "%20")
        return f"{self.base_url}Data/{object_name}?{encoded_params}"

    @staticmethod
    def _generate_hmac_hash(password: str, source_url: str) -> str:
        unquoted_source_url = unquote(source_url)
        message = unquoted_source_url.upper().encode()
        key = password.encode()
        hmac_hash = hmac.new(key, msg=message, digestmod='md5')
        base_44_encoded_hash = base64.b64encode(hmac_hash.digest())
        return base_44_encoded_hash.decode()

    @staticmethod
    def _handle_http_error(response: requests.Response) -> None:
        try:
            response.raise_for_status()
        except requests.HTTPError as e:
            response_error = json.loads(e.response.text)
            if response.status_code == 400:
                raise K2ClientException(
                    "Failed to process object query, " f"either invalid object, fields, or conditions. "
                    f"{response.text}") from e

            if response.status_code == 401:
                raise K2ClientException("Failed to Authorize the component, make sure your "
                                        f"credentials and source url are valid. {response.text}") from e

            raise K2ClientException(
                f"{response_error.get('error')}. Exception code {response.text}") from e

    # override to continue on failure
    def _requests_retry_session(self, session=None) -> requests.Session:
        session = session or requests.Session()
        retry = Retry(
            total=self.max_retries,
            read=self.max_retries,
            connect=self.max_retries,
            backoff_factor=self.backoff_factor,
            status_forcelist=self.status_forcelist
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        return session


================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import os
import unittest
from pathlib import Path

import mock
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()

    @mock.patch.dict(os.environ,
                     {'KBC_DATADIR': Path(__file__).parent.parent.joinpath('component_config/sample-config').as_posix()})
    def test_conditions_added_on_incremental_and_without(self):
        comp = Component()
        comp.date_from = "from"
        comp.date_to = "to"
        res = comp._update_conditions_with_incremental_options('condition', 'incremental')
        self.assertEqual(res, 'condition,incremental;GE;from,incremental;LE;to')

        res = comp._update_conditions_with_incremental_options('condition', None, )
        self.assertEqual(res, 'condition')


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()


================================================
File: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-k2" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

