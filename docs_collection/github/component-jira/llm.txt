Directory structure:
└── keboola-component-jira/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── change_log.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   ├── stack_parameters.json
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── fields.csv
    │               ├── fields.csv.manifest
    │               ├── issues.csv
    │               ├── issues.csv.manifest
    │               ├── projects.csv
    │               ├── projects.csv.manifest
    │               ├── test.csv
    │               ├── users.csv
    │               ├── users.csv.manifest
    │               ├── worklogs-deleted.csv
    │               ├── worklogs-deleted.csv.manifest
    │               ├── worklogs.csv
    │               └── worklogs.csv.manifest
    ├── scripts/
    │   ├── build_n_test.sh
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── client.py
    │   ├── component.py
    │   ├── configuration.py
    │   └── result.py
    ├── tests/
    │   ├── __init__.py
    │   └── test_component.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
# Jira extractor

Jira is a proprietary issue tracking product developed by Atlassian that allows bug tracking and agile project management. A Jira extractor for Keboola Connection allows to download data about projects, issues and time worked on each issue.

## Configuration

A sample configuration can be found in the [component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-jira/src/master/component_config/sample-config/config.json).

### Parameters

All parameters, except parameter for load type, are required.

- **Username**
    - **type:** required
    - **configuration name:** `username`
    - **description:** A username, which will be used to log in to Atlassian Cloud. Usually, the username is an email address of the user.
- **API Token**
    - **type:** required
    - **configuration name:** `#token`
    - **description:** An API token, which can be obtained in [Manage account](https://id.atlassian.com/manage/api-tokens) section
- **Organization ID**
    - **type:** required
    - **configuration name:** `organization_id`
    - **description:** ID of the organization of which data will be downloaded. The organization ID is located in the first part of the URL of the Atlassian stack; e.g. for *https://cool_org.atlassian.net/* the organization ID is *cool_org*.
- **Date Range**
    - **type:** required
    - **configuration name:** `since`
    - **description:** The date range, since when the data will be downloaded. Can be specified absolutely (e.g. **2020-01-01**) or relatively (e.g. **2 days ago**, **1 month ago**).
    - **default:** 3 days ago
- **Datasets**
    - **type:** required
    - **configuration name:** `datasets`
    - **note:** If you'd like to download `issues_changelogs` or `comments` dataset, **`issues` must be selected as well.**
    - **advanced filter:** The component has a hidden(not in UI) feature where you can add an Issue filter in JQL. The "issue_jql_filter" parameter can be used in the RAW configuration, overriding the Data range parameter.**
    - **description:** An array of objects, which will be downloaded.
    - **possible values:** `issues`, `issues_changelogs`, `worklogs`, `boards_n_sprints`, `comments`
- **Load Type**
    - **type:** optional
    - **configuration name:** `incremental`
    - **description:** Specifies load type back to storage.
    - **default:** `1` - `Incremental Load`
- **Custom JQL**
    - **type:** optional
    - **configuration name:** `custom_jql`
    - **description:** Runs custom JQL to get issues using a specified filter
    - Child parameter : **Table name**
      - **type:** required
      - **configuration name:** `table_name`
      - **description:** Name of table that stores the data returned by the filter
    - Child parameter : **JQL**
      - **type:** required
      - **configuration name:** `jql`
      - **description:** JQL filter to apply

### Functionality notes

When fetching issues, take note that an update in the fixVersion does not update the "update" time of the issue. 
Therefore, if an issue's version is released, and the issue is no longer in the specified Date Range the data will not be fetched.
If fetching incrementally, this can lead to out of date data in the fixVersion field. 
Make sure to have a date range set to a long enough period to fetch the issue data.

## Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kds-team.ex-jira.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

================================================
File: Dockerfile
================================================
FROM python:3.9-slim
ENV PYTHONIOENCODING utf-8

COPY . /code/

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential git
RUN pip install flake8
RUN pip install -r /code/requirements.txt
WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================================================
File: change_log.md
================================================
**0.1.1**
Added feature to download changelogs for each issue.

================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

#check if deployment is triggered only in master
if [ $BITBUCKET_BRANCH != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi


================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
    mem_limit: 256m
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: requirements.txt
================================================
https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/get/0.2.7.zip#egg=kbc
keboola.component==1.4.4
mock==5.1.0
freezegun==1.4.0
dateparser==1.2.0
requests==2.28.2
dataconf==3.0.0
git+https://github.com/SgtMarmite/python-http-client.git@async-http-client
aiolimiter==1.1.0

================================================
File: component_config/component_long_description.md
================================================
# Jira extractor

Jira is a proprietary issue tracking product developed by Atlassian that allows bug tracking and agile project management. A Jira extractor for Keboola Connection allows to download data about projects, issues and time worked on each issue.

## Configuration

A sample configuration can be found in the [component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-jira/src/master/component_config/sample-config/config.json).

================================================
File: component_config/component_short_description.md
================================================
Jira is a proprietary issue tracking product developed by Atlassian that allows bug tracking and agile project management.

================================================
File: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Parameters",
  "required": [
    "username",
    "#token",
    "organization_id",
    "organization_url",
    "datasets",
    "incremental",
    "since"
  ],
  "properties": {
    "username": {
      "type": "string",
      "title": "Username",
      "description": "A username to Atlassian Cloud; usually an email.",
      "minLength": 1,
      "propertyOrder": 100
    },
    "#token": {
      "type": "string",
      "format": "password",
      "title": "API Token",
      "description": "An API token to Atlassian Cloud.</br>A token can be generated in <a href='https://id.atlassian.com/manage/api-tokens' target='_blank'>manage your account</a> section.",
      "propertyOrder": 200
    },
    "organization_id": {
      "type": "string",
      "title": "Organization ID",
      "description": "An ID of the organization, for which the data will be downloaded. Can be found in the first part of the URL, i.e. <a href='https://<organization_id>.atlassian.net'>https://&ltorganization_id&gt.atlassian.net</a>.",
      "propertyOrder": 300
    },
    "organization_url": {
      "type": "string",
      "title": "Organization URL",
      "description": "URL which will be used to download data from your organization.",
      "template": "https://{{org_id}}.atlassian.net",
      "watch": {
        "org_id": "organization_id"
      },
      "propertyOrder": 325
    },
    "since": {
      "type": "string",
      "title": "Date Range",
      "description": "Date, since when the data will be downloaded. Can be specified absolutely (e.g. '2020-01-01') or relatively (e.g. '2 days ago', '1 month ago').",
      "default": "3 days ago",
      "propertyOrder": 350
    },
    "datasets": {
      "type": "array",
      "format": "select",
      "title": "Datasets",
      "description": "To fetch Issues Changelogs and Issues Comments, the Issues is also required.",
      "uniqueItems": true,
      "items": {
        "options": {
          "enum_titles": [
            "Issues",
            "Issues Changelogs",
            "Worklogs",
            "Boards & Sprints",
            "Issues Comments",
            "Organizations",
            "Servicedesks & Customers (experimental endpoint)"
          ]
        },
        "enum": [
          "issues",
          "issues_changelogs",
          "worklogs",
          "boards_n_sprints",
          "comments",
          "organizations",
          "servicedesks_and_customers"
        ],
        "type": "string"
      },
      "default": [
        "issues",
        "worklogs"
      ],
      "propertyOrder": 400
    },
    "custom_jql": {
      "type": "array",
      "format": "table",
      "title": "Custom JQL",
      "uniqueItems": true,
      "propertyOrder": 500,
      "items": {
        "type": "object",
        "title": "JQL",
        "properties": {
          "table_name": {
            "type": "string",
            "title": "Table name"
          },
          "jql": {
            "type": "string",
            "title": "JQL"
          }
        }
      }
    },
    "incremental": {
      "type": "number",
      "title": "Load Type",
      "enum": [
        1,
        0
      ],
      "options": {
        "enum_titles": [
          "Incremental Load",
          "Full Load"
        ]
      },
      "propertyOrder": 600
    }
  }
}

================================================
File: component_config/configuration_description.md
================================================
A sample configuration can be found in the [component's repository](https://bitbucket.org/kds_consulting_team/kds-team.ex-jira/src/master/component_config/sample-config/config.json).

### Parameters

All parameters, except parameter for load type, are required.

- **Username**
    - **type:** required
    - **configuration name:** `username`
    - **description:** A username, which will be used to log in to Atlassian Cloud. Usually, the username is an email address of the user.
- **API Token**
    - **type:** required
    - **configuration name:** `#token`
    - **description:** An API token, which can be obtained in [Manage account](https://id.atlassian.com/manage/api-tokens) section
- **Organization ID**
    - **type:** required
    - **configuration name:** `organization_id`
    - **description:** ID of the organization of which data will be downloaded. The organization ID is located in the first part of the URL of the Atlassian stack; e.g. for *https://cool_org.atlassian.net/* the organization ID is *cool_org*.
- **Date Range**
    - **type:** required
    - **configuration name:** `since`
    - **description:** The date range, since when the data will be downloaded. Can be specified absolutely (e.g. **2020-01-01**) or relatively (e.g. **2 days ago**, **1 month ago**).
    - **default:** 3 days ago
- **Datasets**
    - **type:** required
    - **configuration name:** `datasets`
    - **note:** If you'd like to download `issues_changelogs` or `comments` dataset, **`issues` must be selected as well.**
    - **description:** An array of objects, which will be downloaded.
    - **possible values:** `issues`, `issues_changelogs`, `worklogs`, `boards_n_sprints`, `comments`
- **Load Type**
    - **type:** optional
    - **configuration name:** `incremental`
    - **description:** Specifies load type back to storage.
    - **default:** `1` - `Incremental Load`
- **Custom JQL**
    - **type:** optional
    - **configuration name:** `custom_jql`
    - **description:** Runs custom JQL to get issues using a specified filter
    - Child parameter : **Table name**
      - **type:** required
      - **configuration name:** `table_name`
      - **description:** Name of table that stores the data returned by the filter
    - Child parameter : **JQL**
      - **type:** required
      - **configuration name:** `jql`
      - **description:** JQL filter to apply

  

  
### Functionality notes

When fetching issues, take note that an update in the fixVersion does not update the "update" time of the issue. 
Therefore, if an issue's version is released, and the issue is no longer in the specified Date Range the data will not be fetched.
If fetching incrementally, this can lead to out of date data in the fixVersion field. 
Make sure to have a date range set to a long enough period to fetch the issue data.

================================================
File: component_config/logger
================================================
gelf

================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}

================================================
File: component_config/stack_parameters.json
================================================
{}

================================================
File: component_config/sample-config/config.json
================================================
{
  "parameters": {
    "username": "test@keboola.com",
    "#token": "API_TOKEN",
    "organization_id": "my_org",
    "since": "30 days ago",
    "incremental": 1,
    "datasets": [
      "issues",
      "worklogs"
    ]
  },
  "image_parameters": {}
}

================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}

================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}

================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>

================================================
File: component_config/sample-config/out/tables/fields.csv
================================================
"statuscategorychangedate","statuscategorychangedate","Status Category Changed","False"
"issuetype","issuetype","Issue Type","False"
"parent","parent","Parent","False"


================================================
File: component_config/sample-config/out/tables/fields.csv.manifest
================================================
{"incremental": true, "primary_key": ["id", "key"], "columns": ["id", "key", "name", "custom"]}

================================================
File: component_config/sample-config/out/tables/issues.csv
================================================
"15201","TEST-4232","2020-02-21T15:12:57.114+0100","10004","Bug","","TEST","[]","","","","-1","","2020-02-21T15:12:56.663+0100","10002","=6=","[]","","","","","2020-02-21T16:06:03.118+0100","10048","Ready 4 Dev","[]","","","","Summary","5bbb27d8dc7080556d14aa77","test@test.com","Test","[]","5db95782d0d0d60c2e069cb5","Reporter Name","0","0","","","0","0","{""customfield_10000"":null}"


================================================
File: component_config/sample-config/out/tables/issues.csv.manifest
================================================
{"incremental": true, "primary_key": ["id", "key"], "columns": ["id", "key", "status_category_change_date", "issue_type_id", "issue_type_name", "time_spent", "project_key", "fix_versions", "aggregate_time_spent", "resolution", "resolution_date", "work_ratio", "last_viewed", "created", "priority_id", "priority_name", "labels", "time_estimate", "aggregate_time_original_estimate", "assignee_account_id", "assignee_display_name", "updated", "status_id", "status_name", "components", "time_original_estimate", "security", "aggregate_time_estimate", "summary", "creator_account_id", "creator_email_address", "creator_display_name", "subtasks", "reporter_account_id", "reporter_display_name", "aggregate_progress", "aggregate_progress_total", "environment", "due_date", "progress", "progress_total", "custom_fields"]}

================================================
File: component_config/sample-config/out/tables/projects.csv
================================================
"10005","TEST","TEst team","10001","Internal","software","False"


================================================
File: component_config/sample-config/out/tables/projects.csv.manifest
================================================
{"incremental": true, "primary_key": ["id", "key"], "columns": ["id", "key", "name", "project_category_id", "project_category_name", "project_type_key", "is_private"]}

================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"


================================================
File: component_config/sample-config/out/tables/users.csv
================================================
"5d9b2860cd50b80dcea8a5b7","Opsgenie Incident Timeline","True","app"


================================================
File: component_config/sample-config/out/tables/users.csv.manifest
================================================
{"incremental": true, "primary_key": ["account_id"], "columns": ["account_id", "display_name", "active", "account_type"]}

================================================
File: component_config/sample-config/out/tables/worklogs-deleted.csv
================================================
"36020","1579868367880"
"36043","1579868375519"


================================================
File: component_config/sample-config/out/tables/worklogs-deleted.csv.manifest
================================================
{"incremental": true, "primary_key": ["worklog_id"], "columns": ["worklog_id", "updated_time"]}

================================================
File: component_config/sample-config/out/tables/worklogs.csv
================================================
"36822","14832","5cc028fc4573b30ffbeb7244","User 1","5cc028fc4573b30ffbeb7244","Update User 1","2020-01-31T11:27:01.913+0100","2020-01-31T11:27:01.913+0100","2020-01-31T09:39:31.000+0100","1h 45m","6300"
"36318","14891","5a8431adb01a4c302bf1470c","User 2","5a8431adb01a4c302bf1470c","Update User 2,"2020-01-28T09:01:01.464+0100","2020-01-28T09:01:01.464+0100","2020-01-28T06:38:31.000+0100","2h 21m","8460"


================================================
File: component_config/sample-config/out/tables/worklogs.csv.manifest
================================================
{"incremental": true, "primary_key": ["id"], "columns": ["id", "issue_id", "author_account_id", "author_display_name", "update_author_account_id", "update_author_display_name", "created", "updated", "started", "time_spent", "time_spent_seconds"]}

================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover

================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
    exit 1
fi

================================================
File: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi

================================================
File: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"

================================================
File: src/client.py
================================================
import logging
from keboola.component import UserException
from urllib.parse import urljoin
from keboola.http_client.async_client import AsyncHttpClient
import httpx

BASE_URL = 'https://{0}.atlassian.net/rest/api/3/'
AGILE_URL = 'https://{0}.atlassian.net/rest/agile/1.0/'
SERVICEDESK_URL = 'https://{0}.atlassian.net/rest/servicedeskapi/'
MAX_RESULTS = 100
MAX_RESULTS_AGILE = 50
MAX_RESULTS_SERVICEDESK = 50


class JiraClient(AsyncHttpClient):

    def __init__(self, organization_id, username, api_token):

        self.param_base_url = BASE_URL.format(organization_id)
        self.param_agile_url = AGILE_URL.format(organization_id)
        self.param_servicedesk_url = SERVICEDESK_URL.format(organization_id)
        self.param_username = username
        self.param_api_token = api_token

        super().__init__(self.param_base_url, auth=(self.param_username, self.param_api_token), retries=5,
                         default_headers={
                             'accept': 'application/json',
                             'content-type': 'application/json'
                         })

    async def get_projects(self):

        url_projects = urljoin(self.base_url, 'project')
        par_projects = {'expand': 'description'}
        rsp_projects = await self.get_raw(endpoint=url_projects, params=par_projects)

        if rsp_projects.status_code == 200:
            return rsp_projects.json()

        elif rsp_projects.status_code == 403 and \
                'Basic auth with password is not allowed on this instance' in rsp_projects.text:
            raise UserException("Could not authenticate against the API. Please, check the API token.")

        else:
            raise UserException(f"Unable to authenticate against {self.param_base_url}."
                                f"Received: {rsp_projects.status_code} - {rsp_projects.text}.")

    async def get_comments(self, issue_id: str):
        url_comments = urljoin(self.base_url, f'issue/{issue_id}/comment')

        params = {
            'expand': 'properties'
        }

        try:
            r = await self.get_raw(endpoint=url_comments, params=params)
            sc, js = r.status_code, r.json()

            if sc == 200:
                comments = js['comments']
            else:
                logging.error(f"Could not download comments for issue {issue_id}. {sc} - {js}")
                comments = {}

        except httpx.HTTPStatusError as e:
            logging.error(f"Could not download comments for issue {issue_id}. - {e.response.text}")
            comments = {}

        return comments

    async def get_changelogs(self, issue_key):

        url_changelogs = urljoin(self.base_url, f'issue/{issue_key}/changelog')
        offset = 0
        all_changelogs = []
        is_complete = False

        while is_complete is False:
            params_changelogs = {
                'startAt': offset,
                'maxResults': MAX_RESULTS
            }

            rsp_changelogs = await self.get_raw(endpoint=url_changelogs, params=params_changelogs)
            sc_changelogs, js_changelogs = rsp_changelogs.status_code, rsp_changelogs.json()

            if sc_changelogs == 200:
                all_changelogs += js_changelogs['values']
                offset += MAX_RESULTS
                is_complete = js_changelogs['isLast']

            else:
                raise UserException(f"Could not download changelogs for issue {issue_key}."
                                    f"Received: {sc_changelogs} - {js_changelogs}.")

        return all_changelogs

    async def get_issues(self, update_date=None, offset=0, issue_jql_filter=None):

        url_issues = urljoin(self.param_base_url, 'search')
        if issue_jql_filter:
            param_jql = issue_jql_filter
        else:
            param_jql = f'updated >= {update_date}' if update_date else None

        is_complete = False

        params_issues = {
            'startAt': offset,
            'jql': param_jql,
            'maxResults': MAX_RESULTS,
            'expand': 'changelog'
        }

        rsp_issues = await self.get_raw(endpoint=url_issues, params=params_issues)

        if rsp_issues.status_code == 200:
            issues = rsp_issues.json()['issues']

            if len(issues) < MAX_RESULTS:
                is_complete = True

            else:
                offset += MAX_RESULTS

            return issues, is_complete, offset

        else:
            raise UserException(f"Could not download issues."
                                f"Received: {rsp_issues.status_code} - {rsp_issues.text}.")

    async def get_users(self):

        url_users = urljoin(self.param_base_url, 'users')
        offset = 0
        all_users = []
        is_complete = False

        while is_complete is False:
            params_users = {
                'startAt': offset,
                'maxResults': MAX_RESULTS
            }

            rsp_users = await self.get_raw(endpoint=url_users, params=params_users)

            if rsp_users.status_code == 200:
                _usr = rsp_users.json()
                all_users += _usr

                if len(_usr) < MAX_RESULTS:
                    is_complete = True

                else:
                    offset += MAX_RESULTS

            else:
                raise UserException(f"Could not download users."
                                    f"Received: {rsp_users.status_code} - {rsp_users.text}.")

        return all_users

    async def get_organizations(self):

        url_organizations = urljoin(self.param_servicedesk_url, 'organization')
        offset = 0
        all_organizations = []
        is_complete = False

        while is_complete is False:
            params_organizations = {
                'start': offset,
                'limit': MAX_RESULTS_SERVICEDESK
            }

            rsp_organizations = await self.get_raw(endpoint=url_organizations, params=params_organizations)

            if rsp_organizations.status_code == 200:
                _usr = rsp_organizations.json()['values']
                all_organizations += _usr

                if len(_usr) < MAX_RESULTS_SERVICEDESK:
                    is_complete = True

                else:
                    offset += MAX_RESULTS_SERVICEDESK

            else:
                raise UserException(f"Could not download organizations."
                                    f"Received: {rsp_organizations.status_code} - {rsp_organizations.text}.")

        return all_organizations

    async def get_servicedesks(self):

        url_organizations = urljoin(self.param_servicedesk_url, 'servicedesk')
        offset = 0
        all_servicedesks = []
        is_complete = False

        while is_complete is False:
            params_servicedesks = {
                'start': offset,
                'limit': MAX_RESULTS_SERVICEDESK
            }

            rsp_servicedesks = await self.get_raw(endpoint=url_organizations, params=params_servicedesks)

            if rsp_servicedesks.status_code == 200:
                _usr = rsp_servicedesks.json()['values']
                all_servicedesks += _usr

                if len(_usr) < MAX_RESULTS_SERVICEDESK:
                    is_complete = True

                else:
                    offset += MAX_RESULTS_SERVICEDESK

            else:
                raise UserException(f"Could not download servicedesks."
                                    f"Received: {rsp_servicedesks.status_code} - {rsp_servicedesks.text}.")

        return all_servicedesks

    async def get_servicedesk_customers(self, servicedesk_id: str):

        url_organization_users = urljoin(self.param_servicedesk_url, f'servicedesk/{servicedesk_id}/customer')
        offset = 0
        all_users = []
        is_complete = False

        while is_complete is False:
            params_organization_users = {
                'start': offset,
                'limit': MAX_RESULTS_SERVICEDESK
            }

            rsp_users = await self.get_raw(endpoint=url_organization_users, params=params_organization_users,
                                           headers={"X-ExperimentalApi": "opt-in"})

            if rsp_users.status_code == 200:
                _usr = rsp_users.json()['values']
                all_users += _usr

                if len(_usr) < MAX_RESULTS_SERVICEDESK:
                    is_complete = True

                else:
                    offset += MAX_RESULTS_SERVICEDESK

            else:
                raise UserException(f"Could not download users."
                                    f"Received: {rsp_users.status_code} - {rsp_users.text}.")

        return all_users

    async def get_fields(self):

        url_fields = urljoin(self.param_base_url, 'field')
        params_fields = {
            'expand': 'projects.issuetypes.fields'
        }

        rsp_fields = await self.get_raw(endpoint=url_fields, params=params_fields)

        if rsp_fields.status_code == 200:
            return rsp_fields.json()

        else:
            raise UserException(f"Could not download fields."
                                f"Received: {rsp_fields.status_code} - {rsp_fields.text}.")

    @staticmethod
    def split_list_to_chunks(list_split, chunk_size):

        for i in range(0, len(list_split), chunk_size):
            yield list_split[i:i + chunk_size]

    async def get_deleted_worklogs(self, since=None):

        url_deleted = urljoin(self.param_base_url, 'worklog/deleted')
        param_since = since
        is_complete = False
        all_worklogs = []

        while is_complete is False:

            params_deleted = {
                'since': param_since
            }

            rsp_deleted = await self.get_raw(endpoint=url_deleted, params=params_deleted)

            if rsp_deleted.status_code == 200:
                js_worklogs = rsp_deleted.json()
                all_worklogs += js_worklogs['values']

                if js_worklogs['lastPage'] is True:
                    is_complete = True

                else:
                    param_since = js_worklogs['until']

            else:
                raise UserException(f"Could not download deleted worklogs."
                                    f"Received: {rsp_deleted.status_code} - {rsp_deleted.text}.")

        return all_worklogs

    async def get_updated_worklogs(self, since=None):

        url_updated = urljoin(self.param_base_url, 'worklog/updated')
        param_since = since
        is_complete = False
        all_worklogs = []

        while is_complete is False:

            params_updated = {
                'since': param_since
            }

            rsp_updated = await self.get_raw(endpoint=url_updated, params=params_updated)

            if rsp_updated.status_code == 200:
                js_worklogs = rsp_updated.json()
                all_worklogs += js_worklogs['values']

                if js_worklogs['lastPage'] is True:
                    is_complete = True

                else:
                    param_since = js_worklogs['until']

            else:
                raise UserException(f"Could not download updated worklogs."
                                    f"Received: {rsp_updated.status_code} - {rsp_updated.text}.")

        return all_worklogs

    async def get_worklogs(self, worklog_ids):

        url_worklogs = urljoin(self.base_url, 'worklog/list')
        list_gen = self.split_list_to_chunks(worklog_ids, 1000)
        all_worklogs = []

        for w_list in list_gen:

            rsp_worklogs = await self.post_raw(endpoint=url_worklogs, json={'ids': w_list})

            if rsp_worklogs.status_code == 200:
                all_worklogs += rsp_worklogs.json()

            else:
                raise UserException(f"Could not download changed worklogs."
                                    f"Received: {rsp_worklogs.status_code} - {rsp_worklogs.text}.")

        return all_worklogs

    async def get_all_boards(self):

        url_boards = urljoin(self.param_agile_url, 'board')
        offset = 0
        is_complete = False
        all_boards = []

        while is_complete is False:
            params_boards = {
                'startAt': offset,
                'maxResults': MAX_RESULTS_AGILE
            }

            rsp_boards = await self.get_raw(endpoint=url_boards, params=params_boards)

            if rsp_boards.status_code == 200:
                _brd = rsp_boards.json()
                all_boards += _brd['values']
                is_complete = _brd['isLast']
                offset += MAX_RESULTS_AGILE

            else:
                raise UserException(f"Could not download boards."
                                    f"Received: {rsp_boards.status_code} - {rsp_boards.text}.")

        return all_boards

    def get_all_customers(self):

        url_boards = urljoin(self.param_base_url, 'board')
        offset = 0
        is_complete = False
        all_boards = []

        while is_complete is False:
            params_boards = {
                'startAt': offset,
                'maxResults': MAX_RESULTS_AGILE
            }

            rsp_boards = self.get_raw(url=url_boards, params=params_boards)

            if rsp_boards.status_code == 200:
                _brd = rsp_boards.json()
                all_boards += _brd['values']
                is_complete = _brd['isLast']
                offset += MAX_RESULTS_AGILE

            else:
                raise UserException(f"Could not download boards."
                                    f"Received: {rsp_boards.status_code} - {rsp_boards.text}.")

        return all_boards

    async def get_custom_jql(self, jql, offset=0):
        url_issues = urljoin(self.param_base_url, 'search')
        is_complete = False

        params_issues = {
            'startAt': offset,
            'jql': jql,
            'maxResults': MAX_RESULTS,
            'expand': 'changelog'
        }

        rsp_issues = await self.get_raw(endpoint=url_issues, params=params_issues)

        if rsp_issues.status_code == 200:
            issues = rsp_issues.json()['issues']

            if len(issues) < MAX_RESULTS:
                is_complete = True

            else:
                offset += MAX_RESULTS

            return issues, is_complete, offset

        else:
            raise UserException(f"Could not download custom JQL."
                                f"Received: {rsp_issues.status_code} - {rsp_issues.text}.")

    async def get_board_sprints(self, board_id):

        url_sprints = urljoin(self.param_agile_url, f'board/{board_id}/sprint')
        offset = 0
        is_complete = False
        all_sprints = []

        while is_complete is False:
            params_sprints = {
                'startAt': offset,
                'maxResults': MAX_RESULTS_AGILE
            }
            try:
                rsp_sprints = await self.get_raw(url_sprints, params=params_sprints)

                if rsp_sprints.status_code == 200:
                    _sprt = rsp_sprints.json()
                    all_sprints += _sprt['values']
                    is_complete = _sprt['isLast']
                    offset += MAX_RESULTS_AGILE

            except Exception as e:

                if e.response.status_code == 400 and \
                        'The board does not support sprints' in e.response.json()['errorMessages']:
                    break
                elif e.response.status_code == 400 and \
                        'Tabule nepodporuje sprinty' in e.response.json()['errorMessages']:
                    break

                else:
                    raise UserException(f"Could not download sprints for board {board_id}."
                                        f"Received: {e.response.status_code} - {e.response.text}.")

                break

        return all_sprints

    async def get_sprint_issues(self, sprint_id, update_date=None):

        url_issues = urljoin(self.param_agile_url, f'sprint/{sprint_id}/issue')
        param_jql = f'updated >= {update_date}' if update_date is not None else None
        is_complete = False
        offset = 0
        all_issues = []

        while is_complete is False:
            params_issues = {
                'startAt': offset,
                'maxResults': MAX_RESULTS,
                'jql': param_jql,
                'fields': 'id,key'
            }

            rsp_issues = await self.get_raw(url_issues, params=params_issues)

            if rsp_issues.status_code == 200:
                _iss = rsp_issues.json()['issues']
                all_issues += _iss

                if len(_iss) < MAX_RESULTS:
                    is_complete = True

                else:
                    offset += MAX_RESULTS

            else:
                raise UserException(f"Could not download issues for sprint {sprint_id}."
                                    f"Received: {rsp_issues.status_code} - {rsp_issues.text}.")

        return all_issues


================================================
File: src/component.py
================================================
import copy
import logging
import os
import csv
import re

import asyncio

import dateparser
from keboola.component import ComponentBase, UserException
from configuration import Configuration

from client import JiraClient
from result import JiraWriter, FIELDS_R_ISSUES, FIELDS_COMMENTS, PK_COMMENTS

KEY_JQL = "jql"
KEY_TABLE_NAME = "table_name"


class JiraComponent(ComponentBase):

    def __init__(self):

        super().__init__()

        self.validate_configuration_parameters(Configuration.get_dataclass_required_parameters())
        self.cfg: Configuration = Configuration.load_from_dict(self.configuration.parameters)

        self.cfg.incremental = bool(self.cfg.incremental)

        _parsed_date = dateparser.parse(self.cfg.since)

        if _parsed_date is None:
            raise UserException(f"Could not recognize date \"{self.cfg.since}\".")

        else:
            self.param_since_date = _parsed_date.strftime('%Y-%m-%d')
            self.param_since_unix = int(_parsed_date.timestamp() * 1000)

        self.client = JiraClient(organization_id=self.cfg.organization_id,
                                 username=self.cfg.username,
                                 api_token=self.cfg.pswd_token)

    def run(self):
        asyncio.run(self.run_async())

    async def run_async(self):

        tasks = []

        logging.info("Downloading projects.")
        tasks.append(self.get_and_write_projects())

        logging.info("Downloading a list of fields.")
        tasks.append(self.get_and_write_fields())

        logging.info("Downloading users.")
        tasks.append(self.get_and_write_users())

        self.check_issues_param()

        if 'issues' in self.cfg.datasets:
            logging.info("Downloading issues.")
            await self.get_and_write_issues()

            if 'comments' in self.cfg.datasets:
                logging.info("Downloading comments")
                tasks.append(self.get_and_write_comments())

        if 'boards_n_sprints' in self.cfg.datasets:
            logging.info("Downloading boards and sprints.")
            tasks.append(self.get_and_write_boards_and_sprints())

        if 'worklogs' in self.cfg.datasets:
            logging.info("Downloading worklogs.")
            tasks.append(self.get_and_write_worklogs())

        if 'organizations' in self.cfg.datasets:
            logging.info("Downloading organizations.")
            tasks.append(self.get_and_write_organizations())

        if 'servicedesks_and_customers' in self.cfg.datasets:
            logging.info("Downloading servicedesks and customers.")
            tasks.append(self.get_and_write_servicedesks_and_customers())

        if self.cfg.custom_jql:
            for custom_jql in self.cfg.custom_jql:
                if not custom_jql.get(KEY_JQL):
                    raise UserException("Custom JQL error: JQL is empty, must be filled in")
                if not custom_jql.get(KEY_TABLE_NAME):
                    raise UserException("Custom JQL error: table name is empty, must be filled in")
                logging.info(f"Downloading custom JQL : {custom_jql.get(KEY_JQL)}")
                tasks.append(self.get_and_write_custom_jql(custom_jql.get(KEY_JQL), custom_jql.get(KEY_TABLE_NAME)))

        await asyncio.gather(*tasks)

    def check_issues_param(self):
        if 'issues' not in self.cfg.datasets:
            if 'issues_changelogs' in self.cfg.datasets:
                logging.warning("Issues need to be enabled in order to download issues changelogs.")
            if 'comments' in self.cfg.datasets:
                logging.warning("Issues need to be enabled in order to download issues comments.")

    @staticmethod
    def merge_text_and_mentions(data):
        merged_string = ""

        content_list = data.get("body", {}).get("content", [])

        for content in content_list:
            if content.get("type") == "paragraph":
                for c in content.get("content", []):
                    if c.get("type") == "text":
                        merged_string += c.get("text", "")
                    elif c.get("type") == "mention":
                        merged_string += c.get("attrs", {}).get("text", "")

        return merged_string

    @staticmethod
    def get_issue_id_from_url(url):
        pattern = r"/issue/(\d+)"
        match = re.search(pattern, url)
        if match:
            issue_id = match.group(1)
            return issue_id
        else:
            raise UserException("Cannot find issue_id in response during fetching comments.")

    @staticmethod
    def get_issue_ids(table_name, table_cols, issue_id_col_name):
        with open(table_name, 'r') as file:
            r = csv.DictReader(file, fieldnames=table_cols)
            for row in r:
                yield row[issue_id_col_name]

    def parse_comments(self, comments) -> list:
        result = []
        for comment in comments:
            body_text = self.merge_text_and_mentions(comment)
            update_author = comment.get("updateAuthor", {})
            # Check if the comment has properties and parse public visibility if present
            public_visibility = None
            if comment.get("properties"):
                for prop in comment["properties"]:
                    if prop.get("key") == "sd.public.comment":
                        public_visibility = prop.get("value", {}).get("internal")
                        break

            result.append({
                "comment_id": comment["id"],
                "issue_id": self.get_issue_id_from_url(comment["self"]),
                "account_id": comment["author"].get("accountId"),
                "email_address": comment["author"].get("emailAddress"),
                "display_name": comment["author"].get("displayName"),
                "active": comment["author"].get("active"),
                "account_type": comment["author"].get("accountType"),
                "text": body_text,
                "update_author_account_id": update_author.get("accountId"),
                "update_author_display_name": update_author.get("displayName"),
                "update_author_active": update_author.get("active"),
                "update_author_email_address": update_author.get("emailAddress"),
                "update_author_account_type": update_author.get("accountType"),
                "created": comment["created"],
                "updated": comment["updated"],
                "public_visibility": public_visibility
            })
        return result

    async def get_and_write_comments(self):

        load_table_name = os.path.join(self.tables_out_path, 'issues.csv')
        issue_id_col_name = 'id'

        issue_ids = set()
        for issue_id in self.get_issue_ids(load_table_name, FIELDS_R_ISSUES, issue_id_col_name):
            issue_ids.add(issue_id)

        # This is the only table that is being saved in component.py, other tables use JiraWriter. The reason is
        # that I wanted to save both mentions and comments in a single field as sting and this was the easiest way.
        with open(os.path.join(self.tables_out_path, 'comments.csv'), mode="w", newline="") as output_file:
            writer = csv.DictWriter(output_file, fieldnames=FIELDS_COMMENTS, extrasaction="ignore")
            for issue_id in issue_ids:
                issue_comments = await self.client.get_comments(issue_id=issue_id)
                if issue_comments:
                    comments = self.parse_comments(issue_comments)
                    writer.writerows(comments)

        table = self.create_out_table_definition(name="comments.csv", columns=FIELDS_COMMENTS, primary_key=PK_COMMENTS,
                                                 incremental=self.cfg.incremental)
        self.write_manifest(table)

    async def get_and_write_projects(self):
        projects = await self.client.get_projects()
        wr = JiraWriter(self.tables_out_path, 'projects', self.cfg.incremental)
        wr.writerows(projects)
        wr.close()

    async def get_and_write_users(self):

        users = await self.client.get_users()
        wr = JiraWriter(self.tables_out_path, 'users', self.cfg.incremental)
        wr.writerows(users)
        wr.close()

    async def get_and_write_fields(self):

        fields = await self.client.get_fields()
        wr = JiraWriter(self.tables_out_path, 'fields', self.cfg.incremental)
        wr.writerows(fields)
        wr.close()

    async def get_and_write_organizations(self):

        organizations = await self.client.get_organizations()
        wr = JiraWriter(self.tables_out_path, 'organizations', self.cfg.incremental)
        wr.writerows(organizations)
        wr.close()

    async def get_and_write_servicedesks_and_customers(self):

        organizations = await self.client.get_servicedesks()
        wr = JiraWriter(self.tables_out_path, 'servicedesks', self.cfg.incremental)
        wr.writerows(organizations)
        wr.close()

        for organization in organizations:
            customers = await self.client.get_servicedesk_customers(organization['id'])
            wr = JiraWriter(self.tables_out_path, 'servicedesk-customers', self.cfg.incremental)
            wr.writerows(customers)
            wr.close()

    async def get_and_write_worklogs(self, batch_size=1000):
        _worklogs_u = [w['worklogId'] for w in await self.client.get_updated_worklogs(self.param_since_unix)]
        total_worklogs = len(_worklogs_u)

        wr = JiraWriter(self.tables_out_path, 'worklogs', self.cfg.incremental)

        for i in range(0, total_worklogs, batch_size):
            batch_worklog_ids = _worklogs_u[i:i + batch_size]
            batch_worklogs = await self.client.get_worklogs(batch_worklog_ids)

            worklogs_out = []

            for w in batch_worklogs:
                worklogs_out.append({**w, **{'comment': self.parse_description(w.get('comment', '')).strip('\n')}})

            wr.writerows(worklogs_out)

        wr.close()

        worklogs_deleted = await self.client.get_deleted_worklogs(self.param_since_unix)
        wr = JiraWriter(self.tables_out_path, 'worklogs-deleted', self.cfg.incremental)
        wr.writerows(worklogs_deleted)
        wr.close()

    def parse_description(self, description) -> str:
        if description is None:
            return ''
        text = ''

        if 'content' in description:

            text += self.parse_description(description['content'])

            if description['type'] == 'paragraph':
                text += '\n'

        elif isinstance(description, dict):

            if description['type'] == 'inlineCard' or description['type'] == 'blockCard':
                text += description.get('attrs', {}).get('url', '')
            elif description['type'] == 'text':
                text += description.get('text', '')
            elif description['type'] == 'hardBreak':
                text += '\n'
            elif description['type'] == 'mention':
                text += description.get('attrs', {}).get('text', '')
            elif description['type'] == 'status':
                text += description.get('attrs', {}).get('text', '')
            elif description['type'] in ('codeBlock', 'media'):
                pass
            else:
                text += ''

        elif isinstance(description, list):

            for list_item in description:
                text += self.parse_description(list_item)

        else:
            pass

        return text

    async def get_and_write_issues(self):
        offset = 0
        is_complete = False
        download_further_changelogs = []

        writer_issues = JiraWriter(self.tables_out_path, 'issues', self.cfg.incremental)

        writer_changelogs = None
        if 'issues_changelogs' in self.cfg.datasets:
            writer_changelogs = JiraWriter(self.tables_out_path, 'issues-changelogs', self.cfg.incremental)

        while is_complete is False:

            issues, is_complete, offset = await self.client.get_issues(self.param_since_date, offset=offset,
                                                                       issue_jql_filter=self.cfg.issue_jql_filter)
            issues_f = []

            for issue in issues:

                _out = {
                    'id': issue['id'],
                    'key': issue['key']
                }

                _custom = {}

                for key, value in issue['fields'].items():
                    if 'customfield_' in key:
                        _custom[key] = value
                    elif key == 'description':
                        _out['description'] = self.parse_description(issue['fields']['description']
                                                                     ).strip('\n').replace("\0", "\\0")
                    else:
                        _out[key] = value

                _out['custom_fields'] = _custom
                issues_f += [copy.deepcopy(_out)]

                if 'issues_changelogs' in self.cfg.datasets:
                    _changelog = issue['changelog']

                    if _changelog['maxResults'] < _changelog['total']:
                        download_further_changelogs += [(issue['id'], issue['key'])]

                    else:
                        all_changelogs = []
                        _changelogs = [{**x, **{'issue_id': issue['id'], 'issue_key': issue['key']}}
                                       for x in _changelog['histories']]

                        for changelog in _changelogs:
                            _out = dict()
                            _out['total_changed_items'] = len(changelog['items'])
                            _out['id'] = changelog['id']
                            _out['issue_id'] = changelog['issue_id']
                            _out['issue_key'] = changelog['issue_key']
                            _out['author_accountId'] = changelog.get('author', {}).get('accountId', '')
                            _out['author_emailAddress'] = changelog.get('author', {}).get('emailAddress', '')
                            _out['created'] = changelog['created']

                            for idx, item in enumerate(changelog['items'], start=1):
                                item['changed_item_order'] = idx
                                all_changelogs += [{**_out, **item}]

                        writer_changelogs.writerows(all_changelogs)

            writer_issues.writerows(issues_f)

        writer_issues.close()

        for issue in download_further_changelogs:
            all_changelogs = []
            _changelogs = [{**c, **{'issue_id': issue[0], 'issue_key': issue[1]}}
                           for c in await self.client.get_changelogs(issue[1])]

            for changelog in _changelogs:
                _out = dict()
                _out['total_changed_items'] = len(changelog['items'])
                _out['id'] = changelog['id']
                _out['issue_id'] = changelog['issue_id']
                _out['issue_key'] = changelog['issue_key']
                _out['author_accountId'] = changelog.get('author', {}).get('accountId', '')
                _out['author_emailAddress'] = changelog.get('author', {}).get('emailAddress', '')
                _out['created'] = changelog['created']

                for idx, item in enumerate(changelog['items'], start=1):
                    item['changed_item_order'] = idx
                    all_changelogs += [{**_out, **item}]

            writer_changelogs.writerows(all_changelogs)
        if writer_changelogs:
            writer_changelogs.close()

    async def get_and_write_boards_and_sprints(self):

        boards = await self.client.get_all_boards()
        _boards = [b['id'] for b in boards]
        JiraWriter(self.tables_out_path, 'boards', self.cfg.incremental).writerows(boards)

        sprint_writer = JiraWriter(self.tables_out_path, 'sprints', self.cfg.incremental)
        all_sprints = []
        for board in _boards:
            sprints = await self.client.get_board_sprints(board)
            all_sprints += [s['id'] for s in sprints if
                            s.get('completeDate', self.param_since_date) >= self.param_since_date]
            sprints = [{**s, **{'board_id': board}} for s in sprints]
            sprint_writer.writerows(sprints)
        sprint_writer.close()

        issues_writer = JiraWriter(self.tables_out_path, 'sprints-issues', self.cfg.incremental)
        for sprint in set(all_sprints):
            issues = await self.client.get_sprint_issues(sprint, update_date=self.param_since_date)
            issues = [{**i, **{'sprint_id': sprint}} for i in issues]
            issues_writer.writerows(issues)
        issues_writer.close()

    async def get_and_write_custom_jql(self, jql, table_name):
        offset = 0
        is_complete = False
        writer_issues = JiraWriter(self.tables_out_path, 'issues', self.cfg.incremental, custom_name=table_name)

        while is_complete is False:
            issues, is_complete, offset = await self.client.get_custom_jql(jql, offset=offset)
            issues_f = []
            for issue in issues:
                _out = {
                    'id': issue['id'],
                    'key': issue['key']
                }
                _custom = {}
                for key, value in issue['fields'].items():
                    if 'customfield_' in key:
                        _custom[key] = value
                    elif key == 'description':
                        _out['description'] = self.parse_description(issue['fields']['description']).strip('\n')
                    else:
                        _out[key] = value

                _out['custom_fields'] = _custom
                issues_f += [copy.deepcopy(_out)]
            writer_issues.writerows(issues_f)
        writer_issues.close()


if __name__ == "__main__":
    try:
        comp = JiraComponent()
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: src/configuration.py
================================================
import dataclasses
import json
from dataclasses import dataclass, field
from typing import List, Dict
import dataconf


class ConfigurationBase:
    @staticmethod
    def _convert_private_value(value: str):
        return value.replace('"#', '"pswd_')

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith("pswd_"):
            return value.replace("pswd_", "#", 1)
        else:
            return value

    @classmethod
    def load_from_dict(cls, configuration: dict):
        """
        Initialize the configuration dataclass object from dictionary.
        Args:
            configuration: Dictionary loaded from json configuration.

        Returns:

        """
        json_conf = json.dumps(configuration)
        json_conf = ConfigurationBase._convert_private_value(json_conf)
        return dataconf.loads(json_conf, cls, ignore_unexpected=True)

    @classmethod
    def get_dataclass_required_parameters(cls) -> List[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: List[str]

        """
        return [cls._convert_private_value_inv(f.name)
                for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING
                and f.default_factory == dataclasses.MISSING
                ]


@dataclass
class Configuration(ConfigurationBase):
    since: str = ""
    pswd_token: str = ""
    datasets: List[str] = field(default_factory=list)
    username: str = ""
    custom_jql: List[Dict[str, str]] = field(default_factory=list)
    issue_jql_filter: str = ""
    incremental: int = 1
    organization_id: str = ""
    organization_url: str = ""


================================================
File: src/result.py
================================================
import csv
import json
import os
import sys

csv.field_size_limit(sys.maxsize)  # to prevent _csv.Error: field larger than field limit

FIELDS_ISSUES = ['id', 'key', 'statuscategorychangedate', 'issuetype_id', 'issuetype_name', 'timespent', 'project_key',
                 'fixVersions', 'aggregatetimespent', 'resolution', 'resolutiondate', 'resolution_id',
                 'resolution_name', 'resolution_description', 'workratio', 'lastViewed',
                 'created', 'priority_id', 'priority_name', 'labels', 'timeestimate', 'aggregatetimeoriginalestimate',
                 'assignee_accountId', 'assignee_displayName', 'updated', 'status_id', 'status_name', 'components',
                 'timeoriginalestimate', 'security', 'aggregatetimeestimate', 'summary', 'description',
                 'creator_accountId', 'creator_emailAddress', 'creator_displayName', 'parent_id', 'subtasks',
                 'reporter_accountId', 'reporter_displayName', 'aggregateprogress_progress', 'aggregateprogress_total',
                 'environment', 'duedate', 'progress_progress', 'progress_total', 'custom_fields', 'issuelinks',
                 'versions']
FIELDS_R_ISSUES = ['id', 'key', 'status_category_change_date', 'issue_type_id', 'issue_type_name', 'time_spent',
                   'project_key', 'fix_versions', 'aggregate_time_spent', 'resolution', 'resolution_date',
                   'resolution_id', 'resolution_name', 'resolution_description', 'work_ratio',
                   'last_viewed', 'created', 'priority_id', 'priority_name', 'labels', 'time_estimate',
                   'aggregate_time_original_estimate', 'assignee_account_id', 'assignee_display_name', 'updated',
                   'status_id', 'status_name', 'components', 'time_original_estimate', 'security',
                   'aggregate_time_estimate', 'summary', 'description', 'creator_account_id', 'creator_email_address',
                   'creator_display_name', 'parent_id', 'subtasks', 'reporter_account_id', 'reporter_display_name',
                   'aggregate_progress', 'aggregate_progress_total', 'environment', 'due_date', 'progress',
                   'progress_total', 'custom_fields', 'issuelinks', 'versions']
PK_ISSUES = ['id']
JSON_ISSUES = ['fixVersions', 'components', 'subtasks', 'custom_fields', 'issuelinks', 'versions']

FIELDS_USERS = ['accountId', 'displayName', 'active', 'accountType', 'emailAddress', 'locale']
FIELDS_R_USERS = ['account_id', 'display_name', 'active', 'account_type', 'email_address', 'locale']
PK_USERS = ['account_id']
JSON_USERS = []

FIELDS_FIELDS = ['id', 'key', 'name', 'custom']
FIELDS_R_FIELDS = FIELDS_FIELDS
PK_FIELDS = ['id', 'key']
JSON_FIELDS = []

FIELDS_PROJECTS = ['id', 'key', 'name', 'description', 'projectCategory_id', 'projectCategory_name',
                   'projectCategory_description', 'projectTypeKey', 'isPrivate', 'archived', 'archivedBy_accountId',
                   'archivedBy_displayName']
FIELDS_R_PROJECTS = ['id', 'key', 'name', 'description', 'project_category_id', 'project_category_name',
                     'project_category_description', 'project_type_key', 'is_private', 'archived',
                     'archived_by_account_id', 'archived_by_display_name']
PK_PROJECTS = ['id', 'key']
JSON_PROJECTS = []

FIELDS_WORKLOGS_DELETED = ['worklogId', 'updatedTime']
FIELDS_R_WORKLOGS_DELETED = ['worklog_id', 'updated_time']
PK_WORKLOGS_DELETED = ['worklog_id']
JSON_WORKLOGS_DELETED = []

FIELDS_WORKLOGS = ['id', 'issueId', 'author_accountId', 'author_displayName', 'updateAuthor_accountId',
                   'updateAuthor_displayName', 'created', 'updated', 'started', 'timeSpent', 'timeSpentSeconds',
                   'comment']
FIELDS_R_WORKLOGS = ['id', 'issue_id', 'author_account_id', 'author_display_name', 'update_author_account_id',
                     'update_author_display_name', 'created', 'updated', 'started', 'time_spent', 'time_spent_seconds',
                     'comment']
PK_WORKLOGS = ['id']
JSON_WORKLOGS = []

FIELDS_ISSUES_CHANGELOGS = ['id', 'issue_id', 'issue_key', 'author_accountId', 'author_emailAddress', 'created',
                            'total_changed_items', 'changed_item_order', 'field', 'fieldtype', 'from', 'fromString',
                            'to', 'toString']
FIELDS_R_ISSUES_CHANGELOGS = ['id', 'issue_id', 'issue_key', 'author_account_id', 'author_email_address', 'created',
                              'total_changed_items', 'changed_item_order', 'field', 'field_type', 'from', 'from_string',
                              'to', 'to_string']
PK_ISSUES_CHANGELOGS = ['id', 'issue_key', 'field']
JSON_ISSUES_CHANGELOGS = []

FIELDS_BOARDS = ['id', 'self', 'name', 'type', 'location_projectId']
FIELDS_R_BOARDS = ['id', 'url', 'name', 'type', 'project_id']
PK_BOARDS = ['id']
JSON_BOARDS = []

FIELDS_SPRINTS = ['id', 'board_id', 'self', 'state', 'name', 'startDate', 'endDate',
                  'completeDate', 'originBoardId', 'goal']
FIELDS_R_SPRINTS = ['id', 'board_id', 'url', 'state', 'name', 'start_date', 'end_date',
                    'complete_date', 'origin_board_id', 'goal']
PK_SPRINTS = ['id']
JSON_SPRINTS = []

FIELDS_SPRINTS_ISSUES = ['id', 'sprint_id', 'key']
FIELDS_R_SPRINTS_ISSUES = ['issue_id', 'sprint_id', 'issue_key']
PK_SPRINTS_ISSUES = ['issue_id', 'sprint_id']
JSON_SPRINTS_ISSUES = []

FIELDS_COMMENTS = ["comment_id", "issue_id", "account_id", "email_address", "display_name", "active", "account_type",
                   "text", "update_author_account_id", "update_author_display_name", "update_author_active",
                   "update_author_email_address", "update_author_account_type", "created", "updated",
                   "public_visibility"]
FIELDS_R_COMMENTS = ["comment_id", "issue_id", "account_id", "email_address", "display_name", "active", "account_type",
                     "text", "update_author_account_id", "update_author_display_name", "update_author_active",
                     "update_author_email_address", "update_author_account_type", "created", "updated",
                     "public_visibility"]
PK_COMMENTS = ["comment_id"]
JSON_COMMENTS = []

FIELDS_ORGANIZATIONS = ['id', 'name', 'created_jira', '_links_self']
JSON_ORGANIZATIONS = []
PK_ORGANIZATIONS = ['id']
FIELDS_R_ORGANIZATIONS = ['id', 'name', 'created', 'links']

FIELDS_SERVICEDESKS = ['id', 'projectId', 'projectName', 'projectKey', '_links_self']
JSON_SERVICEDESKS = []
PK_SERVICEDESKS = ['id']
FIELDS_R_SERVICEDESKS = ['id', 'projectId', 'projectName', 'projectKey', '_links']

FIELDS_SERVICEDESK_CUSTOMERS = ['accountId', 'emailAddress', 'displayName', 'active', 'timeZone', '_links_self']
JSON_SERVICEDESK_CUSTOMERS = []
PK_SERVICEDESK_CUSTOMERS = ['accountId']
FIELDS_R_SERVICEDESK_CUSTOMERS = ['accountId', 'emailAddress', 'displayName', 'active', 'timeZone', '_links']


class JiraWriter:

    def __init__(self, tableOutPath, tableName, incremental, custom_name=""):

        self.paramFields = eval(f'FIELDS_{tableName.upper().replace("-", "_")}')
        self.paramJsonFields = eval(f'JSON_{tableName.upper().replace("-", "_")}')
        self.paramPrimaryKey = eval(f'PK_{tableName.upper().replace("-", "_")}')
        self.paramFieldsRenamed = eval(f'FIELDS_R_{tableName.upper().replace("-", "_")}')
        self.paramPath = tableOutPath
        self.paramTableName = tableName
        self.paramTable = tableName + '.csv'
        if custom_name:
            self.paramTableName = custom_name
            self.paramTable = custom_name + '.csv'
        self.paramTablePath = os.path.join(self.paramPath, self.paramTable)
        self.paramIncremental = incremental

        self.createManifest()
        self.createWriter()

    def createManifest(self):

        template = {
            'incremental': self.paramIncremental,
            'primary_key': self.paramPrimaryKey,
            'columns': self.paramFieldsRenamed
        }

        path = self.paramTablePath + '.manifest'

        with open(path, 'w') as manifest:
            json.dump(template, manifest)

    def createWriter(self):

        self.csvfile = open(self.paramTablePath, 'w', newline='')
        self.writer = csv.DictWriter(self.csvfile, fieldnames=self.paramFields,
                                     restval='', extrasaction='ignore', quotechar='\"', quoting=csv.QUOTE_ALL)

    def close(self):
        self.csvfile.close()

    def writerows(self, listToWrite, parentDict=None):

        for row in listToWrite:

            _cust = row.get('custom_fields', None)

            row_f = self.flatten_json(x=row)
            _dictToWrite = {}

            for key, value in row_f.items():

                if key in self.paramJsonFields:
                    _dictToWrite[key] = json.dumps(value)

                elif key in self.paramFields:
                    _dictToWrite[key] = value

                else:
                    continue

            if parentDict is not None:
                _dictToWrite = {**_dictToWrite, **parentDict}

            if _cust is not None:
                _dictToWrite = {**_dictToWrite, **{'custom_fields': json.dumps(_cust)}}

            self.writer.writerow(_dictToWrite)

    def flatten_json(self, x, out=None, name=''):
        if out is None:
            out = dict()

        if type(x) is dict:
            for a in x:
                self.flatten_json(x[a], out, name + a + '_')
        else:
            out[name[:-1]] = x

        return out


================================================
File: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-jira" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

