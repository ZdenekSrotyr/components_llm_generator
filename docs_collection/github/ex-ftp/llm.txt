Directory structure:
└── keboola-ex-ftp/
    ├── README.md
    ├── composer.json
    ├── composer.lock
    ├── docker-compose.yml
    ├── Dockerfile
    ├── Dockerfile-tests
    ├── LICENSE
    ├── LICENSE.md
    ├── phpcs.xml
    ├── phpstan.neon
    ├── phpunit.xml.dist
    ├── .dockerignore
    ├── docker/
    │   ├── composer-install.sh
    │   └── php-prod.ini
    ├── src/
    │   ├── AdapterFactory.php
    │   ├── Config.php
    │   ├── ConfigDefinition.php
    │   ├── FileStateRegistry.php
    │   ├── FtpExtractor.php
    │   ├── FtpExtractorComponent.php
    │   ├── GlobValidator.php
    │   ├── ItemFilter.php
    │   ├── run.php
    │   └── Exception/
    │       ├── ApplicationException.php
    │       └── ExceptionConverter.php
    ├── tests/
    │   ├── ftpInitContent/
    │   │   ├── file_1.txt
    │   │   ├── Zvlášť zákeřný učeň s ďolíčky běží podél zóny úlů.csv
    │   │   └── dir1/
    │   │       └── dir1_1/
    │   │           ├── specific-file-2.csv
    │   │           └── specific-file.csv
    │   ├── functional/
    │   │   ├── DatadirTest.php
    │   │   ├── bad-connection/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── expected-stdout
    │   │   ├── new-files-from-old-state/
    │   │   │   └── expected-strout
    │   │   ├── simple-ssh/
    │   │   │   ├── expected-code
    │   │   │   └── expected-stdout
    │   │   ├── ssh-bad-connection/
    │   │   │   ├── expected-code
    │   │   │   └── expected-stderr
    │   │   └── test-connection/
    │   │       ├── expected-code
    │   │       ├── expected-stderr
    │   │       └── expected-stdout
    │   └── phpunit/
    │       ├── AdapterFactoryTest.php
    │       ├── bootstrap.php
    │       ├── ConfigTest.php
    │       ├── ConnectionTest.php
    │       ├── ExceptionConverterTest.php
    │       ├── FileStateRegistryTest.php
    │       ├── GlobValidatorTest.php
    │       └── ItemFilterTest.php
    └── .github/
        └── workflows/
            └── push.yml

================================================
FILE: README.md
================================================
[Binary file]


================================================
FILE: composer.json
================================================
{
    "require": {
        "php": "^7.4",
        "keboola/php-component": "^8.0",
        "keboola/retry": "^0.5.0",
        "keboola/sanitizer": "^0.1.0",
        "keboola/ssh-tunnel": "^2.0",
        "league/flysystem": "^1.1",
        "league/flysystem-sftp": "^1.1",
        "webmozart/glob": "^4.3"
    },
    "require-dev": {
        "php-parallel-lint/php-parallel-lint": "^1.2",
        "keboola/csv": "^2.0",
        "keboola/coding-standard": "^4.0",
        "keboola/php-temp": "^2.0",
        "phpstan/phpstan": "^0.12.14",
        "phpunit/phpunit": "^9.0",
        "symfony/process": "^5.0",
        "keboola/datadir-tests": "^5.2"
    },
    "autoload": {
        "psr-4": {
            "Keboola\\FtpExtractor\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Keboola\\FtpExtractor\\Tests\\": "tests/phpunit/",
            "Keboola\\FtpExtractor\\FunctionalTests\\": "tests/functional/"
        }
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests-datadir": "phpunit tests/functional",
        "tests": [
            "@tests-phpunit",
            "@tests-datadir"
        ],

        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "build": [
            "@phplint",
            "@phpcs",
            "@phpstan",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true
    }
}



================================================
FILE: composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "844ca3f2c7aaac7f5e5cc38d47ffaf21",
    "packages": [
        {
            "name": "keboola/common-exceptions",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/common-exceptions.git",
                "reference": "fb3ac03b92e7db56f1f4e1952d232ef8640a18d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/common-exceptions/zipball/fb3ac03b92e7db56f1f4e1952d232ef8640a18d7",
                "reference": "fb3ac03b92e7db56f1f4e1952d232ef8640a18d7",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^1.0",
                "phpstan/phpstan-shim": "^0.10.6",
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\CommonExceptions\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Common exceptions shared between different applications",
            "support": {
                "source": "https://github.com/keboola/common-exceptions/tree/master"
            },
            "time": "2020-07-07T07:42:44+00:00"
        },
        {
            "name": "keboola/php-component",
            "version": "8.1.2",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-component.git",
                "reference": "49af27d934f09be2e11ea1becb2c98e75032b36b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-component/zipball/49af27d934f09be2e11ea1becb2c98e75032b36b",
                "reference": "49af27d934f09be2e11ea1becb2c98e75032b36b",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/common-exceptions": "^1.0",
                "monolog/monolog": "^2.0",
                "php": "^7.3",
                "symfony/config": "^5.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/serializer": "^5.0"
            },
            "require-dev": {
                "devedge/sami-github": "^1.0",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^2.0",
                "phpstan/phpstan": "^0.12.14",
                "phpunit/phpunit": "^9.0"
            },
            "type": "project",
            "autoload": {
                "psr-4": {
                    "Keboola\\Component\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Helper classes for developing Keboola PHP components",
            "keywords": [
                "component",
                "docker",
                "keboola"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-component/issues",
                "source": "https://github.com/keboola/php-component/tree/8.1.2"
            },
            "time": "2020-04-30T11:08:47+00:00"
        },
        {
            "name": "keboola/retry",
            "version": "0.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/retry.git",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/retry/zipball/afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "psr/log": "^1.1"
            },
            "replace": {
                "vkartaviy/retry": "*"
            },
            "require-dev": {
                "keboola/coding-standard": "^7.0",
                "phpstan/phpstan-shim": "^0.10",
                "phpunit/phpunit": "7.*"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Retry\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola Dev",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Library for repeatable and retryable operations",
            "keywords": [
                "backoff",
                "proxy",
                "repeat",
                "retry"
            ],
            "support": {
                "issues": "https://github.com/keboola/retry/issues",
                "source": "https://github.com/keboola/retry/tree/0.5.0"
            },
            "time": "2020-01-31T14:20:00+00:00"
        },
        {
            "name": "keboola/sanitizer",
            "version": "0.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/sanitizer.git",
                "reference": "6edda00cd177409a33f180b8f12bdad89bf893c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/sanitizer/zipball/6edda00cd177409a33f180b8f12bdad89bf893c5",
                "reference": "6edda00cd177409a33f180b8f12bdad89bf893c5",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Utils\\Sanitizer\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Column name sanitizer",
            "support": {
                "issues": "https://github.com/keboola/sanitizer/issues",
                "source": "https://github.com/keboola/sanitizer/tree/0.1.0"
            },
            "time": "2019-01-11T10:21:17+00:00"
        },
        {
            "name": "keboola/ssh-tunnel",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/ssh-tunnel.git",
                "reference": "0738a9c806092f7d5bc81d5edda796e9caf7a507"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/ssh-tunnel/zipball/0738a9c806092f7d5bc81d5edda796e9caf7a507",
                "reference": "0738a9c806092f7d5bc81d5edda796e9caf7a507",
                "shasum": ""
            },
            "require": {
                "symfony/process": "^4.2|^5.0"
            },
            "require-dev": {
                "keboola/coding-standard": ">=9.0.0",
                "phpstan/phpstan": "^0.12.14",
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\": "src/Keboola/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Simple library for SSH tunneling",
            "support": {
                "issues": "https://github.com/keboola/ssh-tunnel/issues",
                "source": "https://github.com/keboola/ssh-tunnel/tree/2.0.4"
            },
            "time": "2021-10-21T06:07:45+00:00"
        },
        {
            "name": "league/flysystem",
            "version": "1.1.9",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/flysystem.git",
                "reference": "094defdb4a7001845300334e7c1ee2335925ef99"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/flysystem/zipball/094defdb4a7001845300334e7c1ee2335925ef99",
                "reference": "094defdb4a7001845300334e7c1ee2335925ef99",
                "shasum": ""
            },
            "require": {
                "ext-fileinfo": "*",
                "league/mime-type-detection": "^1.3",
                "php": "^7.2.5 || ^8.0"
            },
            "conflict": {
                "league/flysystem-sftp": "<1.0.6"
            },
            "require-dev": {
                "phpspec/prophecy": "^1.11.1",
                "phpunit/phpunit": "^8.5.8"
            },
            "suggest": {
                "ext-ftp": "Allows you to use FTP server storage",
                "ext-openssl": "Allows you to use FTPS server storage",
                "league/flysystem-aws-s3-v2": "Allows you to use S3 storage with AWS SDK v2",
                "league/flysystem-aws-s3-v3": "Allows you to use S3 storage with AWS SDK v3",
                "league/flysystem-azure": "Allows you to use Windows Azure Blob storage",
                "league/flysystem-cached-adapter": "Flysystem adapter decorator for metadata caching",
                "league/flysystem-eventable-filesystem": "Allows you to use EventableFilesystem",
                "league/flysystem-rackspace": "Allows you to use Rackspace Cloud Files",
                "league/flysystem-sftp": "Allows you to use SFTP server storage via phpseclib",
                "league/flysystem-webdav": "Allows you to use WebDAV storage",
                "league/flysystem-ziparchive": "Allows you to use ZipArchive adapter",
                "spatie/flysystem-dropbox": "Allows you to use Dropbox storage",
                "srmklive/flysystem-dropbox-v2": "Allows you to use Dropbox storage for PHP 5 applications"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.1-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "League\\Flysystem\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Frank de Jonge",
                    "email": "info@frenky.net"
                }
            ],
            "description": "Filesystem abstraction: Many filesystems, one API.",
            "keywords": [
                "Cloud Files",
                "WebDAV",
                "abstraction",
                "aws",
                "cloud",
                "copy.com",
                "dropbox",
                "file systems",
                "files",
                "filesystem",
                "filesystems",
                "ftp",
                "rackspace",
                "remote",
                "s3",
                "sftp",
                "storage"
            ],
            "support": {
                "issues": "https://github.com/thephpleague/flysystem/issues",
                "source": "https://github.com/thephpleague/flysystem/tree/1.1.9"
            },
            "funding": [
                {
                    "url": "https://offset.earth/frankdejonge",
                    "type": "other"
                }
            ],
            "time": "2021-12-09T09:40:50+00:00"
        },
        {
            "name": "league/flysystem-sftp",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/flysystem-sftp.git",
                "reference": "36fb893d10bb799fa6aa7199e37e84314c9fd97d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/flysystem-sftp/zipball/36fb893d10bb799fa6aa7199e37e84314c9fd97d",
                "reference": "36fb893d10bb799fa6aa7199e37e84314c9fd97d",
                "shasum": ""
            },
            "require": {
                "league/flysystem": "~1.0",
                "php": ">=5.6.0",
                "phpseclib/phpseclib": "~2.0"
            },
            "require-dev": {
                "mockery/mockery": "0.9.*",
                "phpunit/phpunit": "^5.7.25"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "League\\Flysystem\\Sftp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Frank de Jonge",
                    "email": "info@frenky.net"
                }
            ],
            "description": "Flysystem adapter for SFTP",
            "support": {
                "issues": "https://github.com/thephpleague/flysystem-sftp/issues",
                "source": "https://github.com/thephpleague/flysystem-sftp/tree/1.1.0"
            },
            "funding": [
                {
                    "url": "https://offset.earth/frankdejonge",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/frankdejonge",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/league/flysystem",
                    "type": "tidelift"
                }
            ],
            "time": "2022-01-04T22:02:01+00:00"
        },
        {
            "name": "league/mime-type-detection",
            "version": "1.11.0",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/mime-type-detection.git",
                "reference": "ff6248ea87a9f116e78edd6002e39e5128a0d4dd"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/mime-type-detection/zipball/ff6248ea87a9f116e78edd6002e39e5128a0d4dd",
                "reference": "ff6248ea87a9f116e78edd6002e39e5128a0d4dd",
                "shasum": ""
            },
            "require": {
                "ext-fileinfo": "*",
                "php": "^7.2 || ^8.0"
            },
            "require-dev": {
                "friendsofphp/php-cs-fixer": "^3.2",
                "phpstan/phpstan": "^0.12.68",
                "phpunit/phpunit": "^8.5.8 || ^9.3"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "League\\MimeTypeDetection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Frank de Jonge",
                    "email": "info@frankdejonge.nl"
                }
            ],
            "description": "Mime-type detection for Flysystem",
            "support": {
                "issues": "https://github.com/thephpleague/mime-type-detection/issues",
                "source": "https://github.com/thephpleague/mime-type-detection/tree/1.11.0"
            },
            "funding": [
                {
                    "url": "https://github.com/frankdejonge",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/league/flysystem",
                    "type": "tidelift"
                }
            ],
            "time": "2022-04-17T13:12:02+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "1cb1cde8e8dd0f70cc0fe51354a59acad9302084"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/1cb1cde8e8dd0f70cc0fe51354a59acad9302084",
                "reference": "1cb1cde8e8dd0f70cc0fe51354a59acad9302084",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2",
                "psr/log": "^1.0.1"
            },
            "provide": {
                "psr/log-implementation": "1.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "elasticsearch/elasticsearch": "^7",
                "graylog2/gelf-php": "^1.4.2",
                "mongodb/mongodb": "^1.8",
                "php-amqplib/php-amqplib": "~2.4",
                "php-console/php-console": "^3.1.3",
                "phpspec/prophecy": "^1.6.1",
                "phpstan/phpstan": "^0.12.59",
                "phpunit/phpunit": "^8.5",
                "predis/predis": "^1.1",
                "rollbar/rollbar": "^1.3",
                "ruflin/elastica": ">=0.90 <7.0.1",
                "swiftmailer/swiftmailer": "^5.3|^6.0"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-mbstring": "Allow to work properly with unicode symbols",
                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "php-console/php-console": "Allow sending log messages to Google Chrome",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "https://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "https://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/monolog/issues",
                "source": "https://github.com/Seldaek/monolog/tree/2.2.0"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/monolog/monolog",
                    "type": "tidelift"
                }
            ],
            "time": "2020-12-14T13:15:25+00:00"
        },
        {
            "name": "phpseclib/phpseclib",
            "version": "2.0.37",
            "source": {
                "type": "git",
                "url": "https://github.com/phpseclib/phpseclib.git",
                "reference": "c812fbb4d6b4d7f30235ab7298a12f09ba13b37c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpseclib/phpseclib/zipball/c812fbb4d6b4d7f30235ab7298a12f09ba13b37c",
                "reference": "c812fbb4d6b4d7f30235ab7298a12f09ba13b37c",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.3"
            },
            "require-dev": {
                "phing/phing": "~2.7",
                "phpunit/phpunit": "^4.8.35|^5.7|^6.0|^9.4",
                "squizlabs/php_codesniffer": "~2.0"
            },
            "suggest": {
                "ext-gmp": "Install the GMP (GNU Multiple Precision) extension in order to speed up arbitrary precision integer arithmetic operations.",
                "ext-libsodium": "SSH2/SFTP can make use of some algorithms provided by the libsodium-php extension.",
                "ext-mcrypt": "Install the Mcrypt extension in order to speed up a few other cryptographic operations.",
                "ext-openssl": "Install the OpenSSL extension in order to speed up a wide variety of cryptographic operations."
            },
            "type": "library",
            "autoload": {
                "files": [
                    "phpseclib/bootstrap.php"
                ],
                "psr-4": {
                    "phpseclib\\": "phpseclib/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jim Wigginton",
                    "email": "terrafrost@php.net",
                    "role": "Lead Developer"
                },
                {
                    "name": "Patrick Monnerat",
                    "email": "pm@datasphere.ch",
                    "role": "Developer"
                },
                {
                    "name": "Andreas Fischer",
                    "email": "bantu@phpbb.com",
                    "role": "Developer"
                },
                {
                    "name": "Hans-Jürgen Petrich",
                    "email": "petrich@tronic-media.com",
                    "role": "Developer"
                },
                {
                    "name": "Graham Campbell",
                    "email": "graham@alt-three.com",
                    "role": "Developer"
                }
            ],
            "description": "PHP Secure Communications Library - Pure-PHP implementations of RSA, AES, SSH2, SFTP, X.509 etc.",
            "homepage": "http://phpseclib.sourceforge.net",
            "keywords": [
                "BigInteger",
                "aes",
                "asn.1",
                "asn1",
                "blowfish",
                "crypto",
                "cryptography",
                "encryption",
                "rsa",
                "security",
                "sftp",
                "signature",
                "signing",
                "ssh",
                "twofish",
                "x.509",
                "x509"
            ],
            "support": {
                "issues": "https://github.com/phpseclib/phpseclib/issues",
                "source": "https://github.com/phpseclib/phpseclib/tree/2.0.37"
            },
            "funding": [
                {
                    "url": "https://github.com/terrafrost",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/phpseclib",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpseclib/phpseclib",
                    "type": "tidelift"
                }
            ],
            "time": "2022-04-04T04:57:45+00:00"
        },
        {
            "name": "psr/log",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/0f73288fd15629204f9d42b7055f72dacbe811fc",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "Psr/Log/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "support": {
                "source": "https://github.com/php-fig/log/tree/1.1.3"
            },
            "time": "2020-03-23T09:12:05+00:00"
        },
        {
            "name": "symfony/config",
            "version": "v5.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/config.git",
                "reference": "d0a82d965296083fe463d655a3644cbe49cbaa80"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/config/zipball/d0a82d965296083fe463d655a3644cbe49cbaa80",
                "reference": "d0a82d965296083fe463d655a3644cbe49cbaa80",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/deprecation-contracts": "^2.1",
                "symfony/filesystem": "^4.4|^5.0",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-php80": "^1.15"
            },
            "conflict": {
                "symfony/finder": "<4.4"
            },
            "require-dev": {
                "symfony/event-dispatcher": "^4.4|^5.0",
                "symfony/finder": "^4.4|^5.0",
                "symfony/messenger": "^4.4|^5.0",
                "symfony/service-contracts": "^1.1|^2",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "symfony/yaml": "To use the yaml reference dumper"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Config\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Config Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/config/tree/v5.2.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-12-09T18:54:12+00:00"
        },
        {
            "name": "symfony/deprecation-contracts",
            "version": "v2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/deprecation-contracts.git",
                "reference": "5fa56b4074d1ae755beb55617ddafe6f5d78f665"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/5fa56b4074d1ae755beb55617ddafe6f5d78f665",
                "reference": "5fa56b4074d1ae755beb55617ddafe6f5d78f665",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.2-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "files": [
                    "function.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "A generic function and convention to trigger deprecation notices",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/deprecation-contracts/tree/master"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-09-07T11:33:47+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v5.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "fa8f8cab6b65e2d99a118e082935344c5ba8c60d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/fa8f8cab6b65e2d99a118e082935344c5ba8c60d",
                "reference": "fa8f8cab6b65e2d99a118e082935344c5ba8c60d",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-ctype": "~1.8"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Filesystem Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/filesystem/tree/v5.2.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-30T17:05:38+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v5.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "0b9231a5922fd7287ba5b411893c0ecd2733e5ba"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/0b9231a5922fd7287ba5b411893c0ecd2733e5ba",
                "reference": "0b9231a5922fd7287ba5b411893c0ecd2733e5ba",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Finder Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/finder/tree/v5.2.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-12-08T17:02:38+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.22.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "c6c942b1ac76c82448322025e084cadc56048b4e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/c6c942b1ac76c82448322025e084cadc56048b4e",
                "reference": "c6c942b1ac76c82448322025e084cadc56048b4e",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.22.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-07T16:49:33+00:00"
        },
        {
            "name": "symfony/polyfill-php80",
            "version": "v1.22.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php80.git",
                "reference": "dc3063ba22c2a1fd2f45ed856374d79114998f91"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/dc3063ba22c2a1fd2f45ed856374d79114998f91",
                "reference": "dc3063ba22c2a1fd2f45ed856374d79114998f91",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Php80\\": ""
                },
                "files": [
                    "bootstrap.php"
                ],
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ion Bazan",
                    "email": "ion.bazan@gmail.com"
                },
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php80/tree/v1.22.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-07T16:49:33+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v5.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "bd8815b8b6705298beaa384f04fabd459c10bedd"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/bd8815b8b6705298beaa384f04fabd459c10bedd",
                "reference": "bd8815b8b6705298beaa384f04fabd459c10bedd",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-php80": "^1.15"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Process Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/process/tree/v5.2.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-12-08T17:03:37+00:00"
        },
        {
            "name": "symfony/serializer",
            "version": "v5.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/serializer.git",
                "reference": "4af81510bb603a6d255691a88e118add2bba6337"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/serializer/zipball/4af81510bb603a6d255691a88e118add2bba6337",
                "reference": "4af81510bb603a6d255691a88e118add2bba6337",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-php80": "^1.15"
            },
            "conflict": {
                "phpdocumentor/type-resolver": "<0.2.1",
                "symfony/dependency-injection": "<4.4",
                "symfony/property-access": "<4.4",
                "symfony/property-info": "<4.4",
                "symfony/yaml": "<4.4"
            },
            "require-dev": {
                "doctrine/annotations": "~1.0",
                "doctrine/cache": "~1.0",
                "phpdocumentor/reflection-docblock": "^3.0|^4.0|^5.0",
                "symfony/cache": "^4.4|^5.0",
                "symfony/config": "^4.4|^5.0",
                "symfony/dependency-injection": "^4.4|^5.0",
                "symfony/error-handler": "^4.4|^5.0",
                "symfony/filesystem": "^4.4|^5.0",
                "symfony/form": "^4.4|^5.0",
                "symfony/http-foundation": "^4.4|^5.0",
                "symfony/http-kernel": "^4.4|^5.0",
                "symfony/mime": "^4.4|^5.0",
                "symfony/property-access": "^4.4|^5.0",
                "symfony/property-info": "^4.4|^5.0",
                "symfony/uid": "^5.1",
                "symfony/validator": "^4.4|^5.0",
                "symfony/var-exporter": "^4.4|^5.0",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "doctrine/annotations": "For using the annotation mapping. You will also need doctrine/cache.",
                "doctrine/cache": "For using the default cached annotation reader and metadata cache.",
                "psr/cache-implementation": "For using the metadata cache.",
                "symfony/config": "For using the XML mapping loader.",
                "symfony/mime": "For using a MIME type guesser within the DataUriNormalizer.",
                "symfony/property-access": "For using the ObjectNormalizer.",
                "symfony/property-info": "To deserialize relations.",
                "symfony/var-exporter": "For using the metadata compiler.",
                "symfony/yaml": "For using the default YAML mapping loader."
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Serializer\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Serializer Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/serializer/tree/v5.2.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-12-18T08:03:05+00:00"
        },
        {
            "name": "webmozart/assert",
            "version": "1.9.1",
            "source": {
                "type": "git",
                "url": "https://github.com/webmozarts/assert.git",
                "reference": "bafc69caeb4d49c39fd0779086c03a3738cbb389"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/webmozarts/assert/zipball/bafc69caeb4d49c39fd0779086c03a3738cbb389",
                "reference": "bafc69caeb4d49c39fd0779086c03a3738cbb389",
                "shasum": ""
            },
            "require": {
                "php": "^5.3.3 || ^7.0 || ^8.0",
                "symfony/polyfill-ctype": "^1.8"
            },
            "conflict": {
                "phpstan/phpstan": "<0.12.20",
                "vimeo/psalm": "<3.9.1"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.8.36 || ^7.5.13"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Webmozart\\Assert\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Assertions to validate method input/output with nice error messages.",
            "keywords": [
                "assert",
                "check",
                "validate"
            ],
            "support": {
                "issues": "https://github.com/webmozarts/assert/issues",
                "source": "https://github.com/webmozarts/assert/tree/1.9.1"
            },
            "time": "2020-07-08T17:02:28+00:00"
        },
        {
            "name": "webmozart/glob",
            "version": "4.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/webmozarts/glob.git",
                "reference": "06358fafde0f32edb4513f4fd88fe113a40c90ee"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/webmozarts/glob/zipball/06358fafde0f32edb4513f4fd88fe113a40c90ee",
                "reference": "06358fafde0f32edb4513f4fd88fe113a40c90ee",
                "shasum": ""
            },
            "require": {
                "php": "^7.3 || ^8.0.0",
                "webmozart/path-util": "^2.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^8.0",
                "symfony/filesystem": "^5.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.1-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Webmozart\\Glob\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "A PHP implementation of Ant's glob.",
            "support": {
                "issues": "https://github.com/webmozarts/glob/issues",
                "source": "https://github.com/webmozarts/glob/tree/4.3.0"
            },
            "time": "2021-01-21T06:17:15+00:00"
        },
        {
            "name": "webmozart/path-util",
            "version": "2.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/webmozart/path-util.git",
                "reference": "d939f7edc24c9a1bb9c0dee5cb05d8e859490725"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/webmozart/path-util/zipball/d939f7edc24c9a1bb9c0dee5cb05d8e859490725",
                "reference": "d939f7edc24c9a1bb9c0dee5cb05d8e859490725",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.3",
                "webmozart/assert": "~1.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.6",
                "sebastian/version": "^1.0.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.3-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Webmozart\\PathUtil\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "A robust cross-platform utility for normalizing, comparing and modifying file paths.",
            "support": {
                "issues": "https://github.com/webmozart/path-util/issues",
                "source": "https://github.com/webmozart/path-util/tree/2.3.0"
            },
            "time": "2015-12-17T08:42:14+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "doctrine/instantiator",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/instantiator.git",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "require-dev": {
                "doctrine/coding-standard": "^8.0",
                "ext-pdo": "*",
                "ext-phar": "*",
                "phpbench/phpbench": "^0.13 || 1.0.0-alpha2",
                "phpstan/phpstan": "^0.12",
                "phpstan/phpstan-phpunit": "^0.12",
                "phpunit/phpunit": "^7.0 || ^8.0 || ^9.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com",
                    "homepage": "https://ocramius.github.io/"
                }
            ],
            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
            "keywords": [
                "constructor",
                "instantiate"
            ],
            "support": {
                "issues": "https://github.com/doctrine/instantiator/issues",
                "source": "https://github.com/doctrine/instantiator/tree/1.4.0"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-10T18:47:58+00:00"
        },
        {
            "name": "keboola/coding-standard",
            "version": "4.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "17b1820b408cfbeed4498c2c5b5c7a456bebe850"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/17b1820b408cfbeed4498c2c5b5c7a456bebe850",
                "reference": "17b1820b408cfbeed4498c2c5b5c7a456bebe850",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "4.4.6",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "support": {
                "issues": "https://github.com/keboola/phpcs-standard/issues",
                "source": "https://github.com/keboola/phpcs-standard/tree/master"
            },
            "time": "2018-05-15T15:09:36+00:00"
        },
        {
            "name": "keboola/csv",
            "version": "2.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csv.git",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csv/zipball/eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "ext-json": "*",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Csv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola CSV reader and writer",
            "homepage": "http://keboola.com",
            "keywords": [
                "csv",
                "rfc4180"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csv/issues",
                "source": "https://github.com/keboola/php-csv/tree/master"
            },
            "time": "2020-07-28T09:27:05+00:00"
        },
        {
            "name": "keboola/datadir-tests",
            "version": "5.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/datadir-tests.git",
                "reference": "be02e9dc7869c4224cff6dd1b0cdc7937753b234"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/datadir-tests/zipball/be02e9dc7869c4224cff6dd1b0cdc7937753b234",
                "reference": "be02e9dc7869c4224cff6dd1b0cdc7937753b234",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/php-temp": "^2.0",
                "php": "^7.3",
                "phpunit/phpunit": "^9.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/process": "^5.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^9.0",
                "phpstan/phpstan": "^0.12.14"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DatadirTests\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Tool for functional testing of Keboola Connection components",
            "support": {
                "issues": "https://github.com/keboola/datadir-tests/issues",
                "source": "https://github.com/keboola/datadir-tests/tree/5.2.1"
            },
            "time": "2020-11-30T19:23:38+00:00"
        },
        {
            "name": "keboola/php-temp",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/filesystem": ">2.8"
            },
            "require-dev": {
                "infection/infection": "^0.12",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^8.0",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0|^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Temp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Temp library handles application temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-temp/issues",
                "source": "https://github.com/keboola/php-temp/tree/2.0.1"
            },
            "time": "2019-04-26T07:18:24+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.10.2",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "776f831124e9c62e1a2c601ecc52e776d8bb7220"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/776f831124e9c62e1a2c601ecc52e776d8bb7220",
                "reference": "776f831124e9c62e1a2c601ecc52e776d8bb7220",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "replace": {
                "myclabs/deep-copy": "self.version"
            },
            "require-dev": {
                "doctrine/collections": "^1.0",
                "doctrine/common": "^2.6",
                "phpunit/phpunit": "^7.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                },
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "support": {
                "issues": "https://github.com/myclabs/DeepCopy/issues",
                "source": "https://github.com/myclabs/DeepCopy/tree/1.10.2"
            },
            "funding": [
                {
                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-13T09:40:50+00:00"
        },
        {
            "name": "nikic/php-parser",
            "version": "v4.10.4",
            "source": {
                "type": "git",
                "url": "https://github.com/nikic/PHP-Parser.git",
                "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/c6d052fc58cb876152f89f532b95a8d7907e7f0e",
                "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e",
                "shasum": ""
            },
            "require": {
                "ext-tokenizer": "*",
                "php": ">=7.0"
            },
            "require-dev": {
                "ircmaxell/php-yacc": "^0.0.7",
                "phpunit/phpunit": "^6.5 || ^7.0 || ^8.0 || ^9.0"
            },
            "bin": [
                "bin/php-parse"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.9-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpParser\\": "lib/PhpParser"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Nikita Popov"
                }
            ],
            "description": "A PHP parser written in PHP",
            "keywords": [
                "parser",
                "php"
            ],
            "support": {
                "issues": "https://github.com/nikic/PHP-Parser/issues",
                "source": "https://github.com/nikic/PHP-Parser/tree/v4.10.4"
            },
            "time": "2020-12-20T10:01:03+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-phar": "*",
                "ext-xmlwriter": "*",
                "phar-io/version": "^3.0.1",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "support": {
                "issues": "https://github.com/phar-io/manifest/issues",
                "source": "https://github.com/phar-io/manifest/tree/master"
            },
            "time": "2020-06-27T14:33:11+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "3.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "e4782611070e50613683d2b9a57730e9a3ba5451"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/e4782611070e50613683d2b9a57730e9a3ba5451",
                "reference": "e4782611070e50613683d2b9a57730e9a3ba5451",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "support": {
                "issues": "https://github.com/phar-io/version/issues",
                "source": "https://github.com/phar-io/version/tree/3.0.4"
            },
            "time": "2020-12-13T23:18:30+00:00"
        },
        {
            "name": "php-parallel-lint/php-parallel-lint",
            "version": "v1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-parallel-lint/PHP-Parallel-Lint.git",
                "reference": "474f18bc6cc6aca61ca40bfab55139de614e51ca"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-parallel-lint/PHP-Parallel-Lint/zipball/474f18bc6cc6aca61ca40bfab55139de614e51ca",
                "reference": "474f18bc6cc6aca61ca40bfab55139de614e51ca",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "php": ">=5.4.0"
            },
            "replace": {
                "grogy/php-parallel-lint": "*",
                "jakub-onderka/php-parallel-lint": "*"
            },
            "require-dev": {
                "nette/tester": "^1.3 || ^2.0",
                "php-parallel-lint/php-console-highlighter": "~0.3",
                "squizlabs/php_codesniffer": "~3.0"
            },
            "suggest": {
                "php-parallel-lint/php-console-highlighter": "Highlight syntax in code snippet"
            },
            "bin": [
                "parallel-lint"
            ],
            "type": "library",
            "autoload": {
                "classmap": [
                    "./"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Jakub Onderka",
                    "email": "ahoj@jakubonderka.cz"
                }
            ],
            "description": "This tool check syntax of PHP files about 20x faster than serial check.",
            "homepage": "https://github.com/php-parallel-lint/PHP-Parallel-Lint",
            "support": {
                "issues": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/issues",
                "source": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/tree/master"
            },
            "time": "2020-04-04T12:18:32+00:00"
        },
        {
            "name": "phpdocumentor/reflection-common",
            "version": "2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionCommon.git",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-2.x": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jaap van Otterdijk",
                    "email": "opensource@ijaap.nl"
                }
            ],
            "description": "Common reflection classes used by phpdocumentor to reflect the code structure",
            "homepage": "http://www.phpdoc.org",
            "keywords": [
                "FQSEN",
                "phpDocumentor",
                "phpdoc",
                "reflection",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionCommon/issues",
                "source": "https://github.com/phpDocumentor/ReflectionCommon/tree/2.x"
            },
            "time": "2020-06-27T09:03:43+00:00"
        },
        {
            "name": "phpdocumentor/reflection-docblock",
            "version": "5.2.2",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/069a785b2141f5bcf49f3e353548dc1cce6df556",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556",
                "shasum": ""
            },
            "require": {
                "ext-filter": "*",
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.2",
                "phpdocumentor/type-resolver": "^1.3",
                "webmozart/assert": "^1.9.1"
            },
            "require-dev": {
                "mockery/mockery": "~1.3.2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                },
                {
                    "name": "Jaap van Otterdijk",
                    "email": "account@ijaap.nl"
                }
            ],
            "description": "With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.",
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionDocBlock/issues",
                "source": "https://github.com/phpDocumentor/ReflectionDocBlock/tree/master"
            },
            "time": "2020-09-03T19:13:55+00:00"
        },
        {
            "name": "phpdocumentor/type-resolver",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/TypeResolver.git",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.0"
            },
            "require-dev": {
                "ext-tokenizer": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-1.x": "1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                }
            ],
            "description": "A PSR-5 based resolver of Class names, Types and Structural Element Names",
            "support": {
                "issues": "https://github.com/phpDocumentor/TypeResolver/issues",
                "source": "https://github.com/phpDocumentor/TypeResolver/tree/1.4.0"
            },
            "time": "2020-09-17T18:55:26+00:00"
        },
        {
            "name": "phpspec/prophecy",
            "version": "1.12.2",
            "source": {
                "type": "git",
                "url": "https://github.com/phpspec/prophecy.git",
                "reference": "245710e971a030f42e08f4912863805570f23d39"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpspec/prophecy/zipball/245710e971a030f42e08f4912863805570f23d39",
                "reference": "245710e971a030f42e08f4912863805570f23d39",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.2",
                "php": "^7.2 || ~8.0, <8.1",
                "phpdocumentor/reflection-docblock": "^5.2",
                "sebastian/comparator": "^3.0 || ^4.0",
                "sebastian/recursion-context": "^3.0 || ^4.0"
            },
            "require-dev": {
                "phpspec/phpspec": "^6.0",
                "phpunit/phpunit": "^8.0 || ^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.11.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Prophecy\\": "src/Prophecy"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Konstantin Kudryashov",
                    "email": "ever.zet@gmail.com",
                    "homepage": "http://everzet.com"
                },
                {
                    "name": "Marcello Duarte",
                    "email": "marcello.duarte@gmail.com"
                }
            ],
            "description": "Highly opinionated mocking framework for PHP 5.3+",
            "homepage": "https://github.com/phpspec/prophecy",
            "keywords": [
                "Double",
                "Dummy",
                "fake",
                "mock",
                "spy",
                "stub"
            ],
            "support": {
                "issues": "https://github.com/phpspec/prophecy/issues",
                "source": "https://github.com/phpspec/prophecy/tree/1.12.2"
            },
            "time": "2020-12-19T10:15:11+00:00"
        },
        {
            "name": "phpstan/phpstan",
            "version": "0.12.69",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan.git",
                "reference": "8f436ea35241da33487fd0d38b4bc3e6dfe30ea8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan/zipball/8f436ea35241da33487fd0d38b4bc3e6dfe30ea8",
                "reference": "8f436ea35241da33487fd0d38b4bc3e6dfe30ea8",
                "shasum": ""
            },
            "require": {
                "php": "^7.1|^8.0"
            },
            "conflict": {
                "phpstan/phpstan-shim": "*"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.12-dev"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan - PHP Static Analysis Tool",
            "support": {
                "issues": "https://github.com/phpstan/phpstan/issues",
                "source": "https://github.com/phpstan/phpstan/tree/0.12.69"
            },
            "funding": [
                {
                    "url": "https://github.com/ondrejmirtes",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/phpstan",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpstan/phpstan",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-24T14:55:37+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "9.2.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "f3e026641cc91909d421802dd3ac7827ebfd97e1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/f3e026641cc91909d421802dd3ac7827ebfd97e1",
                "reference": "f3e026641cc91909d421802dd3ac7827ebfd97e1",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-xmlwriter": "*",
                "nikic/php-parser": "^4.10.2",
                "php": ">=7.3",
                "phpunit/php-file-iterator": "^3.0.3",
                "phpunit/php-text-template": "^2.0.2",
                "sebastian/code-unit-reverse-lookup": "^2.0.2",
                "sebastian/complexity": "^2.0",
                "sebastian/environment": "^5.1.2",
                "sebastian/lines-of-code": "^1.0.3",
                "sebastian/version": "^3.0.1",
                "theseer/tokenizer": "^1.2.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcov": "*",
                "ext-xdebug": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-11-28T06:44:49+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "3.0.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/aa4be8575f26070b100fccb67faabb28f21f66f8",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:57:25+00:00"
        },
        {
            "name": "phpunit/php-invoker",
            "version": "3.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-invoker.git",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "ext-pcntl": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcntl": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Invoke callables with a timeout",
            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
            "keywords": [
                "process"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
                "source": "https://github.com/sebastianbergmann/php-invoker/tree/3.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:58:55+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
                "source": "https://github.com/sebastianbergmann/php-text-template/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T05:33:50+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "5.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-timer/issues",
                "source": "https://github.com/sebastianbergmann/php-timer/tree/5.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:16:10+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "9.5.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "e7bdf4085de85a825f4424eae52c99a1cec2f360"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/e7bdf4085de85a825f4424eae52c99a1cec2f360",
                "reference": "e7bdf4085de85a825f4424eae52c99a1cec2f360",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.3.1",
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "ext-xmlwriter": "*",
                "myclabs/deep-copy": "^1.10.1",
                "phar-io/manifest": "^2.0.1",
                "phar-io/version": "^3.0.2",
                "php": ">=7.3",
                "phpspec/prophecy": "^1.12.1",
                "phpunit/php-code-coverage": "^9.2.3",
                "phpunit/php-file-iterator": "^3.0.5",
                "phpunit/php-invoker": "^3.1.1",
                "phpunit/php-text-template": "^2.0.3",
                "phpunit/php-timer": "^5.0.2",
                "sebastian/cli-parser": "^1.0.1",
                "sebastian/code-unit": "^1.0.6",
                "sebastian/comparator": "^4.0.5",
                "sebastian/diff": "^4.0.3",
                "sebastian/environment": "^5.1.3",
                "sebastian/exporter": "^4.0.3",
                "sebastian/global-state": "^5.0.1",
                "sebastian/object-enumerator": "^4.0.3",
                "sebastian/resource-operations": "^3.0.3",
                "sebastian/type": "^2.3",
                "sebastian/version": "^3.0.2"
            },
            "require-dev": {
                "ext-pdo": "*",
                "phpspec/prophecy-phpunit": "^2.0.1"
            },
            "suggest": {
                "ext-soap": "*",
                "ext-xdebug": "*"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.5-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ],
                "files": [
                    "src/Framework/Assert/Functions.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                "source": "https://github.com/sebastianbergmann/phpunit/tree/9.5.1"
            },
            "funding": [
                {
                    "url": "https://phpunit.de/donate.html",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2021-01-17T07:42:25+00:00"
        },
        {
            "name": "sebastian/cli-parser",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/cli-parser.git",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for parsing CLI options",
            "homepage": "https://github.com/sebastianbergmann/cli-parser",
            "support": {
                "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
                "source": "https://github.com/sebastianbergmann/cli-parser/tree/1.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:08:49+00:00"
        },
        {
            "name": "sebastian/code-unit",
            "version": "1.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit.git",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the PHP code units",
            "homepage": "https://github.com/sebastianbergmann/code-unit",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit/issues",
                "source": "https://github.com/sebastianbergmann/code-unit/tree/1.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:08:54+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:30:19+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/55f4261989e546dc112258c7a75935a81a7ce382",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/diff": "^4.0",
                "sebastian/exporter": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/comparator/issues",
                "source": "https://github.com/sebastianbergmann/comparator/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:49:45+00:00"
        },
        {
            "name": "sebastian/complexity",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/complexity.git",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/739b35e53379900cc9ac327b2147867b8b6efd88",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.7",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for calculating the complexity of PHP code units",
            "homepage": "https://github.com/sebastianbergmann/complexity",
            "support": {
                "issues": "https://github.com/sebastianbergmann/complexity/issues",
                "source": "https://github.com/sebastianbergmann/complexity/tree/2.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:52:27+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3",
                "symfony/process": "^4.2 || ^5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/diff/issues",
                "source": "https://github.com/sebastianbergmann/diff/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:10:38+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "5.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/388b6ced16caa751030f6a69e588299fa09200ac",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-posix": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "http://www.github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/environment/issues",
                "source": "https://github.com/sebastianbergmann/environment/tree/5.1.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:52:38+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "4.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-mbstring": "*",
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "http://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/exporter/issues",
                "source": "https://github.com/sebastianbergmann/exporter/tree/4.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:24:23+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "5.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/a90ccbddffa067b51f574dea6eb25d5680839455",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-dom": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-uopz": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "http://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/global-state/issues",
                "source": "https://github.com/sebastianbergmann/global-state/tree/5.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:55:19+00:00"
        },
        {
            "name": "sebastian/lines-of-code",
            "version": "1.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/lines-of-code.git",
                "reference": "c1c2e997aa3146983ed888ad08b15470a2e22ecc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/c1c2e997aa3146983ed888ad08b15470a2e22ecc",
                "reference": "c1c2e997aa3146983ed888ad08b15470a2e22ecc",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.6",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for counting the lines of code in PHP source code",
            "homepage": "https://github.com/sebastianbergmann/lines-of-code",
            "support": {
                "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/1.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-11-28T06:42:11+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:12:34+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
                "source": "https://github.com/sebastianbergmann/object-reflector/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:14:26+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/cd9d8cf3c5804de4341c283ed787f099f5506172",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "http://www.github.com/sebastianbergmann/recursion-context",
            "support": {
                "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
                "source": "https://github.com/sebastianbergmann/recursion-context/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:17:30+00:00"
        },
        {
            "name": "sebastian/resource-operations",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/resource-operations.git",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides a list of PHP built-in functions that operate on resources",
            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
            "support": {
                "issues": "https://github.com/sebastianbergmann/resource-operations/issues",
                "source": "https://github.com/sebastianbergmann/resource-operations/tree/3.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:45:17+00:00"
        },
        {
            "name": "sebastian/type",
            "version": "2.3.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/type.git",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.3-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the types of the PHP type system",
            "homepage": "https://github.com/sebastianbergmann/type",
            "support": {
                "issues": "https://github.com/sebastianbergmann/type/issues",
                "source": "https://github.com/sebastianbergmann/type/tree/2.3.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:18:59+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "c6c1022351a901512170118436c764e473f6de8c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c",
                "reference": "c6c1022351a901512170118436c764e473f6de8c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "support": {
                "issues": "https://github.com/sebastianbergmann/version/issues",
                "source": "https://github.com/sebastianbergmann/version/tree/3.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:39:44+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "4.4.6",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "861e7b55d348c81a9dd0b3655dbbc83076d60c05"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/861e7b55d348c81a9dd0b3655dbbc83076d60c05",
                "reference": "861e7b55d348c81a9dd0b3655dbbc83076d60c05",
                "shasum": ""
            },
            "require": {
                "php": "^7.1",
                "squizlabs/php_codesniffer": "^3.0.2"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "0.9.2",
                "phing/phing": "2.16",
                "phpstan/phpstan": "0.9.2",
                "phpstan/phpstan-phpunit": "0.9.4",
                "phpstan/phpstan-strict-rules": "0.9",
                "phpunit/php-code-coverage": "6.0.1",
                "phpunit/phpunit": "7.0.0"
            },
            "type": "phpcodesniffer-standard",
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "support": {
                "issues": "https://github.com/slevomat/coding-standard/issues",
                "source": "https://github.com/slevomat/coding-standard/tree/4.4.6"
            },
            "time": "2018-02-15T17:13:28+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.5.8",
            "source": {
                "type": "git",
                "url": "https://github.com/squizlabs/PHP_CodeSniffer.git",
                "reference": "9d583721a7157ee997f235f327de038e7ea6dac4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/9d583721a7157ee997f235f327de038e7ea6dac4",
                "reference": "9d583721a7157ee997f235f327de038e7ea6dac4",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0"
            },
            "bin": [
                "bin/phpcs",
                "bin/phpcbf"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "lead"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "https://github.com/squizlabs/PHP_CodeSniffer",
            "keywords": [
                "phpcs",
                "standards"
            ],
            "support": {
                "issues": "https://github.com/squizlabs/PHP_CodeSniffer/issues",
                "source": "https://github.com/squizlabs/PHP_CodeSniffer",
                "wiki": "https://github.com/squizlabs/PHP_CodeSniffer/wiki"
            },
            "time": "2020-10-23T02:01:07+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/75a63c33a8577608444246075ea0af0d052e452a",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "support": {
                "issues": "https://github.com/theseer/tokenizer/issues",
                "source": "https://github.com/theseer/tokenizer/tree/master"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2020-07-12T23:59:07+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": "^7.4"
    },
    "platform-dev": [],
    "plugin-api-version": "2.3.0"
}



================================================
FILE: docker-compose.yml
================================================
version: '2.2'
services:
  app:
    build: .
    image: keboola/ex-ftp
    volumes:
      - ./tests/ftpInitContent:/code/tests/ftpInitContent
      - ssh-keys:/root/.ssh:ro
    links:
      - sshproxy
      - ftp

  dev: &devConfig
    build: .
    volumes:
      - ./:/code
      - ./data:/data
      - ssh-keys:/root/.ssh:ro
    links:
      - sshproxy
      - ftp

  ftp:
    image: rreignier/pure-ftpd
    environment:
      FTP_USER_NAME: ftpuser
      FTP_USER_PASS: userpass
      FTP_USER_HOME: /home/ftpusers/
      FTP_PASSIVE_PORTS: 10000:10005
      PUBLICHOST: ftp
    volumes:
      - ./tests/ftpInitContent:/home/ftpusers

  sshproxy:
    image: keboola/db-component-ssh-proxy:latest
    volumes:
      - ssh-keys:/root/.ssh
    links:
      - ftp

  tests:
      <<: *devConfig
      build:
        dockerfile: Dockerfile-tests
        context: .
      environment:
        - XDEBUG_CONFIG=remote_enable=1 remote_mode=req remote_port=9000 remote_host=172.20.0.1 remote_connect_back=0
        - PHP_IDE_CONFIG=serverName=ex-ftp

volumes:
  ssh-keys:


================================================
FILE: Dockerfile
================================================
FROM php:7.4-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update && apt-get install -y --no-install-recommends \
        ftp \
        ssh \
        git \
        unzip \
	&& rm -r /var/lib/apt/lists/* \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/
# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader
# copy rest of the app
COPY . /code/
# run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD ["php", "/code/src/run.php"]



================================================
FILE: Dockerfile-tests
================================================
FROM keboola/ex-ftp

RUN pecl install xdebug-3.1.5 \
 && docker-php-ext-enable xdebug



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) Keboola :(){:|:&};: s.r.o.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola, https://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.



================================================
FILE: phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>



================================================
FILE: phpstan.neon
================================================
parameters:
    checkMissingIterableValueType: false
    ignoreErrors:
        - '#Cannot call method .* on Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface\|null#'



================================================
FILE: phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         bootstrap="tests/phpunit/bootstrap.php">
    <testsuite name="Main Test Suite">
        <directory>tests/phpunit</directory>
    </testsuite>
</phpunit>



================================================
FILE: .dockerignore
================================================
vendor/



================================================
FILE: docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT



================================================
FILE: docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1



================================================
FILE: src/AdapterFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor;

use Keboola\Component\UserException;
use League\Flysystem\Adapter\AbstractAdapter;
use League\Flysystem\Adapter\Ftp;
use League\Flysystem\Sftp\SftpAdapter;
use Psr\Log\LoggerInterface;
use Retry\BackOff\ExponentialBackOffPolicy;
use Retry\Policy\SimpleRetryPolicy;
use Retry\RetryProxy;

class AdapterFactory
{
    public static function getAdapter(Config $config, LoggerInterface $logger): AbstractAdapter
    {
        switch ($config->getConnectionType()) {
            case ConfigDefinition::CONNECTION_TYPE_FTP:
                return static::createFtpAdapter($config);
            case ConfigDefinition::CONNECTION_TYPE_SSL_EXPLICIT:
                return static::createSslFtpImplicitAdapter($config);
            case ConfigDefinition::CONNECTION_TYPE_SFTP:
                return static::createSftpAdapter($config, $logger);
            default:
                throw new \InvalidArgumentException("Specified adapter not found");
        }
    }

    private static function createFtpAdapter(Config $config): AbstractAdapter
    {
        return new Ftp(
            $config->getConnectionConfig()
        );
    }

    private static function createSslFtpImplicitAdapter(Config $config): AbstractAdapter
    {
        return new Ftp(
            array_merge($config->getConnectionConfig(), ['ssl' => true])
        );
    }

    private static function createSftpAdapter(Config $config, LoggerInterface $logger): AbstractAdapter
    {
        if ($config->getPrivateKey() === '') {
            $adapter = new SftpAdapter($config->getConnectionConfig());
        } else {
            $adapter = new  SftpAdapter(
                array_merge($config->getConnectionConfig(), ['privateKey' => $config->getPrivateKey()])
            );
        }
        static::setSftpRoot($adapter, $config->getPathToCopy(), $logger);
        return $adapter;
    }

    private static function setSftpRoot(SftpAdapter $adapter, string $sourcePath, LoggerInterface $logger): void
    {
        if (substr($sourcePath, 0, 1) === '/') {
            $adapter->setRoot('/');
            return;
        }

        $retryProxy = new RetryProxy(
            new SimpleRetryPolicy(FtpExtractor::CONNECTION_RETRIES),
            new ExponentialBackOffPolicy(FtpExtractor::RETRY_BACKOFF),
            $logger
        );

        try {
            $pwd = $retryProxy->call(function () use ($adapter): string {
                return $adapter->getConnection()->pwd();
            });
            $adapter->setRoot($pwd);
        } catch (\RuntimeException $e) {
            throw new UserException($e->getMessage(), $e->getCode(), $e);
        } catch (\LogicException $e) {
            throw new UserException($e->getMessage(), $e->getCode(), $e);
        } catch (\ErrorException $e) {
            throw new UserException($e->getMessage(), $e->getCode(), $e);
        }
    }
}



================================================
FILE: src/Config.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor;

use Keboola\Component\Config\BaseConfig;

class Config extends BaseConfig
{
    public const SSH_PORT = 22;

    private string $host;

    private int $port;

    public function getConnectionConfig(): array
    {
        return [
            'host' => $this->getHost(),
            'port' => $this->getPort(),
            'username' => $this->getValue(['parameters', 'username']),
            'password' => $this->getValue(['parameters', '#password']),
            'timeout' => $this->getValue(['parameters', 'timeout']),
            'recurseManually' => $this->shouldUseManualRecursion(),
            'ignorePassiveAddress' => $this->ignorePassiveAddress(),
        ];
    }

    public function getConnectionType(): string
    {
        return $this->getValue(['parameters', 'connectionType']);
    }

    public function getPathToCopy(): string
    {
        return $this->getValue(['parameters', 'path']);
    }

    public function isOnlyForNewFiles(): bool
    {
        return $this->getValue(['parameters', 'onlyNewFiles']);
    }

    public function skipFileNotFound(): bool
    {
        return $this->getValue(['parameters', 'skipFileNotFound']);
    }

    public function getPrivateKey(): string
    {
        return $this->getValue(['parameters', '#privateKey']);
    }

    private function shouldUseManualRecursion(): bool
    {
        return $this->getValue(['parameters', 'listing']) === ConfigDefinition::LISTING_MANUAL;
    }

    public function ignorePassiveAddress(): bool
    {
        return $this->getValue(['parameters', 'ignorePassiveAddress']);
    }

    public function getHost(): string
    {
        return $this->host ?? $this->getValue(['parameters', 'host']);
    }

    public function getPort(): int
    {
        return $this->port ?? $this->getValue(['parameters', 'port']);
    }

    public function setHost(string $host): void
    {
        $this->host = $host;
    }

    public function setPort(int $port): void
    {
        $this->port = $port;
    }

    public function isSshEnabled(): bool
    {
        return $this->getValue(['parameters', 'ssh', 'enabled'], false);
    }

    public function getSshConfig(int $port, ?int $localPort = null): array
    {
        $sshConfig = $this->getValue(['parameters', 'ssh']);
        $sshConfig['remoteHost'] = $this->getHost();
        $sshConfig['remotePort'] = $port;
        $sshConfig['localPort'] = $localPort ?? $port;
        $sshConfig['sshPort'] = self::SSH_PORT;
        $sshConfig['privateKey'] = $sshConfig['keys']['#private'];
        return $sshConfig;
    }

    public function getFtpPassivePorts(): array
    {
        $portRange = $this->getValue(['parameters', 'ssh', 'passivePortRange']);

        list($rangeFrom, $rangeTo) = explode(':', $portRange);

        return range($rangeFrom, $rangeTo);
    }
}



================================================
FILE: src/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor;

use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;
use function PHPUnit\Framework\matches;

class ConfigDefinition extends BaseConfigDefinition
{
    public const CONNECTION_TYPE_FTP = 'FTP';
    public const CONNECTION_TYPE_SSL_EXPLICIT = 'FTPS';
    public const CONNECTION_TYPE_SFTP = 'SFTP';

    public const LISTING_RECURSION = 'recursion';
    public const LISTING_MANUAL = 'manual';

    private const SSH_REQUIRED_PARAMS = [
        'user',
        'sshHost',
        'sshPort',
        'passivePortRange',
        'keys',
    ];

    protected function getRootDefinition(TreeBuilder $treeBuilder): ArrayNodeDefinition
    {
        $rootNode = parent::getRootDefinition($treeBuilder);

        $rootNode->validate()->always(function ($v) {
            if (isset($v['image_parameters']['approvedHostnames'])) {
                foreach ($v['image_parameters']['approvedHostnames'] as $approvedHostname) {
                    if ($v['parameters']['host'] === $approvedHostname['host'] &&
                        $v['parameters']['port'] === $approvedHostname['port']
                    ) {
                        return $v;
                    }
                }
                throw new InvalidConfigurationException(sprintf(
                    'Hostname "%s" with port "%s" is not approved.',
                    $v['parameters']['host'],
                    $v['parameters']['port']
                ));
            }
            return $v;
        })->end();

        return $rootNode;
    }

    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->children()
                ->scalarNode('host')
                    ->isRequired()
                    ->cannotBeEmpty()
                ->end()
                ->scalarNode('username')
                    ->isRequired()
                    ->cannotBeEmpty()
                ->end()
                ->scalarNode('#password')
                    ->defaultValue('')
                ->end()
                ->scalarNode('path')
                    ->isRequired()
                    ->cannotBeEmpty()
                ->end()
                ->booleanNode('onlyNewFiles')
                    ->defaultFalse()
                ->end()
                ->booleanNode('skipFileNotFound')
                    ->defaultFalse()
                ->end()
                ->integerNode('port')
                    ->min(1)->max(65535)
                    ->defaultValue(21)
                ->end()
                ->arrayNode('ssh')
                    ->validate()->always(function ($val) {
                        if ($val['enabled'] === false) {
                            return $val;
                        }

                        foreach (self::SSH_REQUIRED_PARAMS as $param) {
                            if (!array_key_exists($param, $val)) {
                                throw new InvalidConfigurationException(sprintf(
                                    'The child config "%s" under "root.parameters.ssh" must be configured.',
                                    $param
                                ));
                            }
                        }

                        return $val;
                    })
                    ->end()
                    ->children()
                        ->booleanNode('enabled')->defaultFalse()->end()
                        ->arrayNode('keys')
                            ->children()
                                ->scalarNode('#private')->isRequired()->cannotBeEmpty()->end()
                                ->scalarNode('public')->isRequired()->cannotBeEmpty()->end()
                            ->end()
                        ->end()
                        ->scalarNode('user')->cannotBeEmpty()->end()
                        ->scalarNode('sshHost')->cannotBeEmpty()->end()
                        ->integerNode('sshPort')
                            ->beforeNormalization()->always(function ($v) {
                                return (int) $v;
                            })->end()
                            ->defaultValue(22)
                        ->end()
                        ->scalarNode('passivePortRange')
                            ->validate()->always(function ($val) {
                                preg_match('/^([0-9]*):([0-9]*)$/', $val, $matches);

                                if (count($matches) !== 3) {
                                    throw new InvalidConfigurationException(
                                        'The "passivePortRange" has invalid format.'
                                    );
                                }

                                $rangeFrom = $matches[1];
                                $rangeTo = $matches[2];

                                if ($rangeTo < $rangeFrom) {
                                    throw new InvalidConfigurationException(
                                        'The Range From must be less than Range To.'
                                    );
                                }

                                return $val;
                            })->end()
                            ->cannotBeEmpty()
                        ->end()
                    ->end()
                ->end()
                ->scalarNode('connectionType')
                    ->isRequired()
                    ->validate()->ifNotInArray([
                               self::CONNECTION_TYPE_FTP,
                               self::CONNECTION_TYPE_SSL_EXPLICIT,
                               self::CONNECTION_TYPE_SFTP,
                            ])->thenInvalid(
                                sprintf(
                                    'Connection type must be one of %s.',
                                    implode(', ', [
                                        self::CONNECTION_TYPE_FTP,
                                        self::CONNECTION_TYPE_SSL_EXPLICIT,
                                        self::CONNECTION_TYPE_SFTP,
                                    ])
                                )
                            )
                        ->end()
                ->end()
                ->scalarNode('#privateKey')
                    ->defaultValue('')
                ->end()
                ->integerNode('timeout')
                    ->min(1)
                    ->defaultValue(60)
                ->end()
                ->enumNode('listing')
                    ->values([self::LISTING_MANUAL, self::LISTING_RECURSION])
                    ->defaultValue(self::LISTING_RECURSION)
                ->end()
                ->booleanNode('ignorePassiveAddress')
                    ->defaultFalse()
                ->end()
            ->end()
        ;
        // @formatter:on
        return $parametersNode;
    }
}



================================================
FILE: src/FileStateRegistry.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor;

class FileStateRegistry
{
    public const STATE_FILE_KEY = 'ex_ftp_state';
    public const NEWEST_TIMESTAMP_KEY = 'newest_timestamp';
    public const FILES_WITH_NEWEST_TIMESTAMP_KEY = 'last_timestamp_files';

    /**
     * @var int
     */
    private $newestTimestamp;

    /**
     * @var array
     */
    private $filesWithNewestTimestamp;

    public function __construct(array $stateFile)
    {
        $this->newestTimestamp = 0;
        $this->filesWithNewestTimestamp = [];
        if (isset($stateFile[self::STATE_FILE_KEY])) {
            $cfg = $stateFile[self::STATE_FILE_KEY];

            if (isset($cfg[self::NEWEST_TIMESTAMP_KEY])) {
                $this->newestTimestamp = intval($cfg[self::NEWEST_TIMESTAMP_KEY]);
            }

            if (isset($cfg[self::FILES_WITH_NEWEST_TIMESTAMP_KEY])) {
                $this->filesWithNewestTimestamp = (array) $cfg[self::FILES_WITH_NEWEST_TIMESTAMP_KEY];
            }
        }
    }

    public function shouldBeFileUpdated(string $remotePath, int $timestamp): bool
    {
        if ($this->newestTimestamp <= $timestamp && !in_array($remotePath, $this->filesWithNewestTimestamp)) {
            return true;
        }
        return false;
    }

    public function updateOutputState(string $remotePath, int $timestamp): void
    {
        // if the file has a greater timestamp than our newest, then reset our values.
        if ($this->newestTimestamp < $timestamp) {
            $this->newestTimestamp = $timestamp;
            $this->filesWithNewestTimestamp = [$remotePath];
        } else if ($this->newestTimestamp = $timestamp) {
            $this->filesWithNewestTimestamp[] = $remotePath;
        }
    }

    public function getFileStates(): array
    {
        return [
            self::NEWEST_TIMESTAMP_KEY => $this->newestTimestamp,
            self::FILES_WITH_NEWEST_TIMESTAMP_KEY => $this->filesWithNewestTimestamp,
        ];
    }
}



================================================
FILE: src/FtpExtractor.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor;

use Keboola\Component\UserException;
use Keboola\FtpExtractor\Exception\ApplicationException;
use Keboola\FtpExtractor\Exception\ExceptionConverter;
use Keboola\Utils\Sanitizer\ColumnNameSanitizer;
use League\Flysystem\Adapter\AbstractFtpAdapter;
use League\Flysystem\FileNotFoundException;
use League\Flysystem\Filesystem as FtpFilesystem;
use Psr\Log\LoggerInterface;
use Symfony\Component\Filesystem\Filesystem;
use Throwable;
use Webmozart\Glob\Glob;
use Retry\RetryProxy;
use Retry\Policy\SimpleRetryPolicy;
use Retry\BackOff\ExponentialBackOffPolicy;

class FtpExtractor
{
    private const RECURSIVE_COPY = true;
    private const FILE_DESTINATION_KEY = 'destination-path';
    private const FILE_TIMESTAMP_KEY = 'timestamp';
    private const FILE_SOURCE_KEY = 'source-path';
    private const LOGGER_INFO_LOOP = '10';
    public const CONNECTION_RETRIES = 3;
    public const RETRY_BACKOFF = 300;

    private FtpFilesystem $ftpFilesystem;

    private bool $onlyNewFiles;

    private array $filesToDownload;

    private FileStateRegistry $registry;

    private LoggerInterface $logger;

    private Filesystem $fs;

    private bool $skipFileNotFound;

    public function __construct(
        bool $onlyNewFiles,
        FtpFilesystem $ftpFs,
        FileStateRegistry $registry,
        LoggerInterface $logger,
        bool $skipFileNotFound = false
    ) {
        $this->ftpFilesystem = $ftpFs;
        $this->onlyNewFiles = $onlyNewFiles;
        $this->filesToDownload = [];
        $this->registry = $registry;
        $this->logger = $logger;
        $this->fs = new Filesystem();
        $this->skipFileNotFound = $skipFileNotFound;
    }

    public function copyFiles(string $sourcePath, string $destinationPath): int
    {
        try {
            /** @var AbstractFtpAdapter $adapter */
            $adapter = $this->ftpFilesystem->getAdapter();
            $this->logger->info(sprintf(
                'Connecting to host "%s" on port "%s".',
                $adapter->getHost(),
                $adapter->getPort()
            ));

            $this->createRetryProxy()->call(static function () use ($adapter): void {
                $adapter->getConnection();
            });

            $this->logger->info('Connection successful');
        } catch (Throwable $e) {
            ExceptionConverter::handleCopyFilesException($e);
        }

        $this->prepareToDownloadFolder($sourcePath, $destinationPath);
        return $this->download();
    }

    private function prepareToDownloadFolder(string $sourcePath, string $destinationPath): void
    {
        $items = $this->getPotentialFiles($sourcePath);
        $i = 0;
        foreach ($items as $item) {
            if ($i % self::LOGGER_INFO_LOOP === 0) {
                $this->logger->info(
                    sprintf(
                        "Checked %d of a possible %d files and found %d to download so far",
                        $i,
                        count($items),
                        count($this->filesToDownload)
                    )
                );
            }
            $i++;
            if (!GlobValidator::validatePathAgainstGlob($item['path'], $sourcePath)) {
                continue;
            }
            $timestamp = 0;
            if ($this->onlyNewFiles) {
                try {
                    $timestamp = $this->createRetryProxy()->call(function () use ($item): int {
                        return (int) $this->ftpFilesystem->getTimestamp($item['path']);
                    });
                    if (!$this->registry->shouldBeFileUpdated($item['path'], $timestamp)) {
                        continue;
                    }
                } catch (FileNotFoundException $e) {
                    if ($this->skipFileNotFound) {
                        $this->logger->warning(sprintf('File "%s" not found on FTP server.', $item['path']));
                        continue;
                    } else {
                        ExceptionConverter::handlePrepareToDownloadException($e);
                    }
                } catch (Throwable $e) {
                    ExceptionConverter::handlePrepareToDownloadException($e);
                }
            }
            $destination = $destinationPath . '/' . strtr($item['path'], ['/' => '-']);
            $this->filesToDownload[] = [
                self::FILE_DESTINATION_KEY => $destination,
                self::FILE_SOURCE_KEY => $item['path'],
                self::FILE_TIMESTAMP_KEY => $timestamp,
            ];
        }
        $this->logger->info(sprintf("%d files are ready for download", count($this->filesToDownload)));
    }

    private function getPotentialFiles(string $sourcePath): array
    {
        $absSourcePath = GlobValidator::convertToAbsolute($sourcePath); //because Glob work with absolute paths

        $items = [];
        try {
            if (Glob::getStaticPrefix($absSourcePath) === $absSourcePath) { //means is file
                $file = $this->createRetryProxy()->call(function () use ($absSourcePath) {
                    return $this->ftpFilesystem->get($absSourcePath);
                });
                $items[] = [
                    'path' => $file->getPath(),
                    'type' => ($file->isFile()) ? ItemFilter::FTP_FILETYPE_FILE : '',
                ];
            } else { //means is glob based path
                $this->logger->info("Fetching list of files in base path");
                $basePath = Glob::getBasePath($absSourcePath);
                $items = $this->createRetryProxy()->call(function () use ($basePath): array {
                    return $this->ftpFilesystem->listContents($basePath, self::RECURSIVE_COPY);
                });
            }
            $countBeforeFilter = count($items);
            $this->logger->info(
                sprintf(
                    "Base path listing contains %s item(s) including directories",
                    $countBeforeFilter
                )
            );
            $items = ItemFilter::getOnlyFiles($items);
            $this->logger->info(
                sprintf(
                    "%s item(s) filtered out",
                    $countBeforeFilter - count($items)
                )
            );
        } catch (Throwable $e) {
            ExceptionConverter::handlePrepareToDownloadException($e);
        }
        $this->logger->info(sprintf("Base path contains %s files(s)", count($items)));
        return $items;
    }

    private function download(): int
    {
        $cbTimestampSort = function (array $a, array $b) {
            return intval($a[self::FILE_TIMESTAMP_KEY]) <=> intval($b[self::FILE_TIMESTAMP_KEY]);
        };
        uasort($this->filesToDownload, $cbTimestampSort);

        $downloadedFiles = 0;
        foreach ($this->filesToDownload as $file) {
            $this->downloadFile($file);
            $downloadedFiles++;
        }
        return $downloadedFiles;
    }

    private function downloadFile(array $file): void
    {
        $file[self::FILE_DESTINATION_KEY] = ColumnNameSanitizer::toAscii($file[self::FILE_DESTINATION_KEY]);

        $this->logger->info(sprintf("Downloading file %s", $file[self::FILE_SOURCE_KEY]));

        $localPath = $file[self::FILE_DESTINATION_KEY];
        $ftpPath = $file[self::FILE_SOURCE_KEY];

        try {
            $this->createRetryProxy()->call(function () use ($localPath, $ftpPath): void {
                $ftpSize = $this->getFileSize($ftpPath);
                $stream = $this->ftpFilesystem->readStream($ftpPath);
                if ($stream === false) {
                    throw new UserException(sprintf('Downloading of file "%s" failed.', $ftpPath));
                }
                $this->fs->dumpFile($localPath, $stream);
                if ($ftpSize) {
                    $localSize = filesize($localPath);
                    $this->checkFileSize($localPath, $ftpPath, $localSize, $ftpSize);
                }
            });
        } catch (FileNotFoundException $e) {
            if ($this->skipFileNotFound) {
                $this->logger->warning(sprintf('File "%s" not found on FTP server.', $ftpPath));
                return;
            } else {
                ExceptionConverter::handleDownloadException($e);
            }
        } catch (Throwable $e) {
            ExceptionConverter::handleDownloadException($e);
        }
        $this->registry->updateOutputState($file[self::FILE_SOURCE_KEY], $file[self::FILE_TIMESTAMP_KEY]);
    }

    private function createRetryProxy(): RetryProxy
    {
        return new RetryProxy(
            new SimpleRetryPolicy(self::CONNECTION_RETRIES),
            new ExponentialBackOffPolicy(self::RETRY_BACKOFF),
            $this->logger
        );
    }

    private function getFileSize(string $ftpPath): int
    {
        try {
            $ftpSize = $this->ftpFilesystem->getSize($ftpPath);
            if (is_int($ftpSize)) {
                return $ftpSize;
            }
        } catch (Throwable $e) {
            $this->logger->warning(sprintf('Cannot get size of the FTP file "%s". %s', $ftpPath, $e->getMessage()));
            return 0;
        }

        $this->logger->warning(sprintf('Cannot get size of the FTP file "%s".', $ftpPath));
        return 0;
    }

    /**
     * @param string $localPath
     * @param string $ftpPath
     * @param int|false $localSize
     * @param int|false $ftpSize
     * @throws ApplicationException
     */
    private function checkFileSize(string $localPath, string $ftpPath, $localSize, $ftpSize): void
    {
        if (!is_int($localSize)) {
            throw new ApplicationException(
                sprintf('Cannot get size of the local file "%s".', $localPath)
            );
        }

        if (!is_int($ftpSize)) {
            throw new ApplicationException(
                sprintf('Cannot get size of the FTP file "%s".', $ftpPath)
            );
        }

        if ($ftpSize !== $localSize) {
            throw new UserException(sprintf(
                'The size of the downloaded file "%s" does not match the size reported from the FTP server. ' .
                'FTP size: %s, local size: %s.',
                $ftpPath,
                self::humanReadableFileSize($ftpSize),
                self::humanReadableFileSize($localSize)
            ));
        }
    }

    private static function humanReadableFileSize(int $size, int $precision = 2): string
    {
        // https://gist.github.com/liunian/9338301
        for ($i = 0; ($size / 1024) > 0.9; $i++) {
            $size /= 1024;
        }
        return round($size, $precision) . ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'][$i];
    }
}



================================================
FILE: src/FtpExtractorComponent.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor;

use Keboola\Component\BaseComponent;
use Keboola\Component\UserException;
use Keboola\SSHTunnel\SSH;
use Keboola\SSHTunnel\SSHException;
use League\Flysystem\Adapter\Ftp;
use League\Flysystem\Filesystem;
use League\Flysystem\Sftp\SftpAdapter;
use Throwable;

class FtpExtractorComponent extends BaseComponent
{
    protected function run(): void
    {
        $config = $this->getConfig();
        if ($config->isSshEnabled()) {
            $config = $this->openSshTunnel($config);
        }
        $registry = new FileStateRegistry($this->getInputState());
        $ftpFs = new Filesystem(AdapterFactory::getAdapter($config, $this->getLogger()));
        $ftpExtractor = new FtpExtractor(
            $config->isOnlyForNewFiles(),
            $ftpFs,
            $registry,
            $this->getLogger(),
            $this->getConfig()->skipFileNotFound()
        );
        $count = $ftpExtractor->copyFiles(
            $config->getPathToCopy(),
            $this->getOutputDirectory()
        );
        $this->writeOutputStateToFile(
            array_merge(
                $this->getInputState(),
                [FileStateRegistry::STATE_FILE_KEY => $registry->getFileStates()]
            )
        );
        $this->getLogger()->info(sprintf("%d file(s) downloaded", $count));
    }

    public function testConnectionAction(): array
    {
        $config = $this->getConfig();
        if ($config->isSshEnabled()) {
            $config = $this->openSshTunnel($config);
        }

        try {
            /** @var Ftp|SftpAdapter $adapter */
            $adapter = AdapterFactory::getAdapter($config, $this->getLogger());
            $adapter->connect();
        } catch (Throwable $e) {
            throw new UserException(sprintf("Connection failed: '%s'", $e->getMessage()), 0, $e);
        }

        return [
            'status' => 'success',
        ];
    }

    protected function getSyncActions(): array
    {
        return [
            'testConnection' => 'testConnectionAction',
        ];
    }

    private function getOutputDirectory(): string
    {
        return $this->getDataDir() . '/out/files/';
    }

    public function getConfig(): Config
    {
        /** @var Config $config */
        $config = parent::getConfig();
        return $config;
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        return ConfigDefinition::class;
    }

    private function openSshTunnel(Config $config): Config
    {
        try {
            $ssh = new SSH();
            $ssh->openTunnel($config->getSshConfig($config->getPort(), 21));

            // open tunnels to all FTP ports
            foreach ($this->getConfig()->getFtpPassivePorts() as $port) {
                $ssh->openTunnel($config->getSshConfig($port));
            }
        } catch (SSHException $e) {
            throw new UserException($e->getMessage());
        }

        $config->setHost('localhost');
        $config->setPort(21);

        return $config;
    }
}



================================================
FILE: src/GlobValidator.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor;

use Webmozart\Glob\Glob;

/**
 * Wrapper class around Webmozart\Glob. Matching does not require absolute path.
 */
class GlobValidator
{
    public static function validatePathAgainstGlob(string $path, string $glob): bool
    {
        $path = static::convertToAbsolute($path);
        $glob = static::convertToAbsolute($glob);
        return Glob::match($path, $glob);
    }

    public static function convertToAbsolute(string $path): string
    {
        if (substr($path, 0, 1) !== '/') {
            return '/' . $path;
        }

        return $path;
    }
}



================================================
FILE: src/ItemFilter.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor;

class ItemFilter
{
    public const FTP_FILETYPE_FILE = 'file';

    public static function getOnlyFiles(array $items): array
    {
        $result = [];
        foreach ($items as $item) {
            if ((isset($item['type'])) && $item['type'] === static::FTP_FILETYPE_FILE) {
                $result[] = $item;
            }
        }
        return $result;
    }
}



================================================
FILE: src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\Component\UserException;
use Keboola\Component\Logger;
use Keboola\FtpExtractor\FtpExtractorComponent;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
try {
    $app = new FtpExtractorComponent($logger);
    $app->execute();
    exit(0);
} catch (UserException $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (\Throwable $e) {
    $previous = $e->getPrevious();
    $logger->critical(
        get_class($e) . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => $previous ? get_class($previous) : '',
        ]
    );
    exit(2);
}



================================================
FILE: src/Exception/ApplicationException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor\Exception;

final class ApplicationException extends \Exception
{
}



================================================
FILE: src/Exception/ExceptionConverter.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor\Exception;

use Keboola\Component\UserException;
use League\Flysystem\FileNotFoundException;
use League\Flysystem\FilesystemException;
use League\Flysystem\Sftp\SftpAdapterException;

final class ExceptionConverter
{
    public static function handleCopyFilesException(\Throwable $e): void
    {
        self::handleCommonException($e);
    }

    public static function handlePrepareToDownloadException(\Throwable $e): void
    {
        self::handleCommonException($e);
    }

    public static function handleDownloadException(\Throwable $e): void
    {
        if ($e instanceof FileNotFoundException) {
            self::toUserException($e, sprintf(
                'Error while trying to download file: %s',
                $e->getMessage()
            ));
        }

        self::handleCommonException($e);
    }

    private static function handleCommonException(\Throwable $e): void
    {
        if ($e instanceof UserException) {
            throw $e;
        }

        if ($e instanceof SftpAdapterException) {
            self::toUserException($e);
        }

        if ($e instanceof FilesystemException) {
            self::toUserException($e);
        }

        // Make the message clear for user (ftp_rawlist(): php_connect_nonb() failed: Operation now in progress)
        if ($e instanceof \ErrorException
            && preg_match_all('/Operation now in progress \(115\)/', $e->getMessage())) {
            self::toUserException($e, sprintf(
                'Connection was terminated. Check that the connection is not blocked by Firewall ' .
                'or set ignore passive address: %s',
                $e->getMessage()
            ));
        }

        // Make the message clear for user (ftp_rawlist()/ftp_mdtm(): Connection timed out)
        if ($e instanceof \ErrorException
            && preg_match_all('/Connection timed out/', $e->getMessage())) {
            self::toUserException(
                $e,
                'Connection timed out. Check your timeout configuration, server health and try again.',
            );
        }

        // Make the message clear for user (ftp_rawlist\(\): data_accept: SSL/TLS handshake failed)
        if ($e instanceof \ErrorException
            && preg_match_all('/ftp_rawlist\(\): data_accept: SSL\/TLS handshake failed/', $e->getMessage())) {
            self::toUserException(
                $e,
                'SSL/TLS handshake failed. Check your credentials, SSL/TLS configuration and make sure the ' .
                'certificate is valid and is not expired.',
            );
        }

        if ($e instanceof \ErrorException
            && preg_match_all('/Expected SSH_/', $e->getMessage())) {
            self::toUserException($e);
        }

        // Catch user_error from phpseclib
        // phpcs:disable
        if (preg_match_all('/(getaddrinfo failed)|(Cannot connect to)|(The authenticity of)|(Connection closed prematurely)/', $e->getMessage())) {
            self::toUserException($e);
        }
        // phpcs:enable

        self::toApplicationException($e);
    }

    private static function toUserException(\Throwable $e, ?string $customMessage = null): void
    {
        throw new UserException($customMessage ?: $e->getMessage(), $e->getCode(), $e);
    }

    private static function toApplicationException(\Throwable $e): void
    {
        throw new ApplicationException($e->getMessage(), $e->getCode(), $e);
    }
}



================================================
FILE: tests/ftpInitContent/file_1.txt
================================================
testing1


================================================
FILE: tests/ftpInitContent/Zvlášť zákeřný učeň s ďolíčky běží podél zóny úlů.csv
================================================
id,text,tag
1,"D: Co bylo dříve, slepice nebo vejce? 
O: Dříve bylo všechno - slepice, vejce, cukr, mouka, máslo, maso, ovoce...",Rádio Jerevan
2,"D: Kdy bude lépe? 
O: Lépe už bylo.",Rádio Jerevan
3,"D: Slyšela jsem, že je v Moskvě maso. Bude i v Minsku? 
O: Ano, výstava je putovní.",Rádio Jerevan
4,"D: Slyšel jsem, že v Ukrajinské SSR roste kukuřice jako telegrafní sloupy. Je to pravda? 
O: Ano, někde i hustěji.",Rádio Jerevan
5,"D: Může se stát Bůh členem Komunistické strany? 
O: V principu ano, ale nejprve musí vystoupit z církve.",Rádio Jerevan
6,"D: Co je to chaos? 
O: Na otázky týkající se našeho průmyslu pro rozsáhlost odpovědi neodpovídáme.",Rádio Jerevan
7,"D: Na co umřel Stalin? 
O: Naštěstí.",Rádio Jerevan
8,"D: Je v Sovětském svaze stejná svoboda projevu jako na Západě? 
O: Ano, ale na Západě je i svoboda po projevu.",Rádio Jerevan
9,"D: Slyšela jsem, že i list papíru je účinnější metoda antikoncepce než západní přípravky. Je to pravda? 
O: V zásadě ano, drží-li jej žena mezi koleny.",Rádio Jerevan



================================================
FILE: tests/ftpInitContent/dir1/dir1_1/specific-file-2.csv
================================================
This is also good content;


================================================
FILE: tests/ftpInitContent/dir1/dir1_1/specific-file.csv
================================================
This is a great fajl!


================================================
FILE: tests/functional/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor\FunctionalTests;

use Keboola\Csv\CsvWriter;
use Keboola\Component\JsonHelper;
use Keboola\DatadirTests\AbstractDatadirTestCase;
use Keboola\DatadirTests\DatadirTestSpecificationInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Finder\SplFileInfo;
use Symfony\Component\Process\Process;

class DatadirTest extends AbstractDatadirTestCase
{
    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass();

        putenv('SSH_PRIVATE_KEY=' . file_get_contents('/root/.ssh/id_rsa'));
        putenv('SSH_PUBLIC_KEY=' . file_get_contents('/root/.ssh/id_rsa.pub'));
    }

    protected function setUp(): void
    {
        parent::setUp();

        // kill all ssh tunnels
        $process = new Process(['sh', '-c', 'pgrep ssh | xargs -r kill']);
        $process->run();

        $files = (new Finder())->files()->in(__DIR__ . '/../ftpInitContent/');
        $timestamps = [];
        foreach ($files as $file) {
            /** @var SplFileInfo $file */
            if ($file->getFilename() === 'a_brand_new_file.csv') {
                unlink(__DIR__ . '/../ftpInitContent/a_brand_new_file.csv');
                continue;
            }
            $timestamps[$file->getRelativePathname()] = $file->getMTime();
        }

        // --- normal-download test ----
        $state = [
            "ex_ftp_state" => [
                "newest_timestamp" => 0,
                "last_timestamp_files" => [],
            ],
        ];
        JsonHelper::writeFile(__DIR__ . '/normal-download/expected/data/out/state.json', $state);

        // --- special-chars test ---
        $state = [
            "ex_ftp_state" => [
                "newest_timestamp" => 0,
                "last_timestamp_files" => [],
            ],
        ];
        JsonHelper::writeFile(__DIR__ . '/special-chars/expected/data/out/state.json', $state);

        // --- simple-ssh test ---
        $state = [
            "ex_ftp_state" => [
                "newest_timestamp" => 0,
                "last_timestamp_files" => [],
            ],
        ];
        JsonHelper::writeFile(__DIR__ . '/simple-ssh/expected/data/out/state.json', $state);

        // --- nothing-to-update tests ---
        $state = [
            "ex_ftp_state" => [
                "newest_timestamp" => $timestamps["dir1/recursive.bin"],
                "last_timestamp_files" => ["dir1/recursive.bin"],
            ],
        ];
        JsonHelper::writeFile(__DIR__ . '/nothing-to-update/expected/data/out/state.json', $state);
        JsonHelper::writeFile(__DIR__ . '/nothing-to-update/source/data/in/state.json', $state);

        // --- specific-directory test ----
        $state = [
            "ex_ftp_state" => [
                "newest_timestamp" => 0,
                "last_timestamp_files" => [],
            ],
        ];
        JsonHelper::writeFile(__DIR__ . '/specific-directory/expected/data/out/state.json', $state);

        // --- manual-recursion test ----
        $state = [
            "ex_ftp_state" => [
                "newest_timestamp" => 0,
                "last_timestamp_files" => [],
            ],
        ];
        JsonHelper::writeFile(__DIR__ . '/manual-recursion/expected/data/out/state.json', $state);

        // --- only-new-files tests ---
        $inputState = [
            "ex_ftp_state" => [
                "newest_timestamp" => 0,
                "last_timestamp_files" => [],
            ],
        ];
        $outputState = [
            "ex_ftp_state" => [
                "newest_timestamp" => $timestamps["file_1.txt"],
                "last_timestamp_files" => ["file_1.txt", "Zvlášť zákeřný učeň s ďolíčky běží podél zóny úlů.csv"],
            ],
        ];
        JsonHelper::writeFile(__DIR__ . '/only-new-files/expected/data/out/state.json', $outputState);
        JsonHelper::writeFile(__DIR__ . '/only-new-files/source/data/in/state.json', $inputState);

        // -- new-files-from-old-state test --
        $inputState = [
            "ex_ftp_state" => [
                "newest_timestamp" => $timestamps["file_1.txt"],
                "last_timestamp_files" => ["file_1.txt", "Zvlášť zákeřný učeň s ďolíčky běží podél zóny úlů.csv"],
            ],
        ];
        JsonHelper::writeFile(__DIR__ . '/new-files-from-old-state/source/data/in/state.json', $inputState);
    }

    /**
     * @dataProvider provideDatadirSpecifications
     */
    public function testDatadir(DatadirTestSpecificationInterface $specification): void
    {
        $tempDatadir = $this->getTempDatadir($specification);

        $sourceDatadir = $specification->getSourceDatadirDirectory();

        if ($this->doesNameMatchDatadir('new-files-from-old-state', (string) $sourceDatadir)) {
            // -- new-files-from-old-state test --
            $newCsvFile = __DIR__ . '/../ftpInitContent/a_brand_new_file.csv';
            $expectingCsvFile = __DIR__ . '/new-files-from-old-state/expected/data/out/files/a_brand_new_file.csv';

            $csvWriter = new CsvWriter($newCsvFile);
            $csvWriter->writeRow(['a', 'csv', 'file']);
            $fs = new Filesystem();
            $fs->copy($newCsvFile, $expectingCsvFile);
            $freshTimestamp = (new SplFileInfo($newCsvFile, "", ""))->getMTime();
            $outputState = [
                "ex_ftp_state" => [
                    "newest_timestamp" => $freshTimestamp,
                    "last_timestamp_files" => ["a_brand_new_file.csv"],
                ],
            ];
            JsonHelper::writeFile(__DIR__ . '/new-files-from-old-state/expected/data/out/state.json', $outputState);
        }

        $process = $this->runScript($tempDatadir->getTmpFolder());

        $this->assertMatchesSpecification($specification, $process, $tempDatadir->getTmpFolder());
    }

    private function doesNameMatchDatadir(string $testName, string $datadir): bool
    {
        return in_array($testName, explode('/', $datadir));
    }
}



================================================
FILE: tests/functional/bad-connection/expected-code
================================================
1



================================================
FILE: tests/functional/bad-connection/expected-stderr
================================================
Could not connect to host: ftp-bad, port:21



================================================
FILE: tests/functional/bad-connection/expected-stdout
================================================
Connecting to host "ftp-bad" on port "21".
Could not connect to host: ftp-bad, port:21. Retrying... [1x]
Could not connect to host: ftp-bad, port:21. Retrying... [2x]



================================================
FILE: tests/functional/new-files-from-old-state/expected-strout
================================================
[Empty file]


================================================
FILE: tests/functional/simple-ssh/expected-code
================================================
0



================================================
FILE: tests/functional/simple-ssh/expected-stdout
================================================
Connecting to host "localhost" on port "21".
Connection successful
Fetching list of files in base path
Base path listing contains 7 item(s) including directories
2 item(s) filtered out
Base path contains 5 files(s)
Checked 0 of a possible 5 files and found 0 to download so far
2 files are ready for download
Downloading file file_1.txt
Downloading file Zvlášť zákeřný učeň s ďolíčky běží podél zóny úlů.csv
2 file(s) downloaded



================================================
FILE: tests/functional/ssh-bad-connection/expected-code
================================================
1



================================================
FILE: tests/functional/ssh-bad-connection/expected-stderr
================================================
Unable to create ssh tunnel. Output:  ErrorOutput: ssh: Could not resolve hostname bad-sshproxy: %s



================================================
FILE: tests/functional/test-connection/expected-code
================================================
0



================================================
FILE: tests/functional/test-connection/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/test-connection/expected-stdout
================================================
{"status":"success"}


================================================
FILE: tests/phpunit/AdapterFactoryTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor\Tests;

use Keboola\Component\UserException;
use Keboola\FtpExtractor\AdapterFactory;
use Keboola\FtpExtractor\Config;
use Keboola\FtpExtractor\ConfigDefinition;
use League\Flysystem\Adapter\Ftp;
use League\Flysystem\Sftp\SftpAdapter;
use PHPUnit\Framework\TestCase;
use Psr\Log\NullLogger;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class AdapterFactoryTest extends TestCase
{
    /**
     * @dataProvider adapterConfigProvider
     * @psalm-param class-string<object> $expectedClass
     */
    public function testGetFtpsImplicitAdapter(Config $config, string $expectedClass): void
    {
        $this->assertInstanceOf(
            $expectedClass,
            AdapterFactory::getAdapter($config, new NullLogger())
        );
    }

    public function adapterConfigProvider(): array
    {
        return [
            [$this->provideTestConfig(ConfigDefinition::CONNECTION_TYPE_FTP), Ftp::class],
            [$this->provideTestConfig(ConfigDefinition::CONNECTION_TYPE_SFTP), SftpAdapter::class],
            [$this->provideTestConfig(ConfigDefinition::CONNECTION_TYPE_SSL_EXPLICIT), Ftp::class],
        ];
    }

    public function testWrongConnectionType(): void
    {
        $this->expectException(InvalidConfigurationException::class);
        $this->provideTestConfig("Blanka");
    }

    public function testInvalidSftpAdapterWithRelativePath(): void
    {
        $config = new Config(
            [
                'parameters' => [
                    'host' => 'ftp',
                    'username' => 'ftpuser',
                    '#password' => 'userpass',
                    'port' => 21,
                    'path' => 'rel',
                    'connectionType' => 'SFTP',
                    'timeout' => 1,
                ],
            ],
            new ConfigDefinition()
        );
        $this->expectException(UserException::class);
        $this->expectExceptionMessageMatches('/Could not login/');
        AdapterFactory::getAdapter($config, new NullLogger());
    }

    private function provideTestConfig(string $connectionType): Config
    {
        return new Config(
            [
                'parameters' => [
                    'host' => 'ftp',
                    'username' => 'ftpuser',
                    '#password' => 'userpass',
                    'port' => 21,
                    'path' => '/absolute/path/*',
                    'connectionType' => $connectionType,
                ],
            ],
            new ConfigDefinition()
        );
    }
}



================================================
FILE: tests/phpunit/bootstrap.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/../../vendor/autoload.php';



================================================
FILE: tests/phpunit/ConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor\Tests;

use Generator;
use Keboola\FtpExtractor\Config;
use Keboola\FtpExtractor\ConfigDefinition;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigTest extends TestCase
{
    public function listingProvider(): array
    {
        return [
            [false, ConfigDefinition::LISTING_RECURSION],
            [true, ConfigDefinition::LISTING_MANUAL],
            [false, null],
        ];
    }

    /** @dataProvider listingProvider */
    public function testListingRecursion(bool $recurseManually, ?string $listing): void
    {
        $configArray = [
            'parameters' => [
                'host' => 'ftp',
                'username' => 'ftpuser',
                '#password' => 'userpass',
                'port' => 21,
                'path' => 'rel',
                'connectionType' => 'SFTP',
            ],
        ];
        if ($listing) {
            $configArray['parameters']['listing'] = $listing;
        }
        $config = new Config(
            $configArray,
            new ConfigDefinition()
        );
        $this->assertSame($recurseManually, $config->getConnectionConfig()['recurseManually']);
    }

    public function testInvalidListingOption(): void
    {
        $configArray = [
            'parameters' => [
                'host' => 'ftp',
                'username' => 'ftpuser',
                '#password' => 'userpass',
                'port' => 21,
                'path' => 'rel',
                'connectionType' => 'SFTP',
                'listing' => 'non-existing',
            ],
        ];

        $this->expectException(InvalidConfigurationException::class);

        new Config(
            $configArray,
            new ConfigDefinition()
        );
    }

    /** @dataProvider invalidSSHDataProvider */
    public function testInvalidSSHConfig(array $sshConfig, string $expectedMessage): void
    {
        $configArray = [
            'parameters' => [
                'host' => 'hostName',
                'username' => 'ftpuser',
                '#password' => 'userpass',
                'port' => 21,
                'path' => 'rel',
                'connectionType' => 'FTP',
                'ssh' => $sshConfig,
            ],
        ];

        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage($expectedMessage);
        new Config($configArray, new ConfigDefinition());
    }

    /** @dataProvider validSSHDataProvider */
    public function testValidSSHConfig(array $sshConfig): void
    {
        $configArray = [
            'parameters' => [
                'host' => 'hostName',
                'username' => 'ftpuser',
                '#password' => 'userpass',
                'port' => 21,
                'path' => 'rel',
                'connectionType' => 'FTP',
                'onlyNewFiles' => false,
                '#privateKey' => '',
                'timeout' => 60,
                'listing' => 'recursion',
                'ignorePassiveAddress' => false,
                'skipFileNotFound' => false,
                'ssh' => $sshConfig,
            ],
        ];

        $config = new Config($configArray, new ConfigDefinition());

        Assert::assertEquals($configArray, $config->getData());
    }
    
    /**
     * @dataProvider invalidApprovedHostnameDataProvider
     */
    public function testInvalidApprovedHostname(array $approvedHostnameConfig): void
    {
        $configArray = [
            'image_parameters' => [
                'approvedHostnames' => [$approvedHostnameConfig],
            ],
            'parameters' => [
                'host' => 'hostName',
                'username' => 'ftpuser',
                '#password' => 'userpass',
                'port' => 21,
                'path' => 'rel',
                'connectionType' => 'SFTP',
            ],
        ];

        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage('Hostname "hostName" with port "21" is not approved.');
        new Config(
            $configArray,
            new ConfigDefinition()
        );
    }

    public function testValidApprovedHostname(): void
    {
        $configArray = [
            'image_parameters' => [
                'approvedHostnames' => [
                    [
                        'host' => 'ftpHost',
                        'port' => 21,
                    ],
                ],
            ],
            'parameters' => [
                'host' => 'ftpHost',
                'username' => 'ftpuser',
                '#password' => 'userpass',
                'port' => 21,
                'path' => 'rel',
                'connectionType' => 'SFTP',
            ],
        ];

        $config = new Config(
            $configArray,
            new ConfigDefinition()
        );

        $this->assertEquals(Config::class, get_class($config));
    }

    public function invalidApprovedHostnameDataProvider(): Generator
    {
        yield "invalid-host" => [
            [
                'host' => 'invalidHost',
                'port' => 21,
            ],
        ];

        yield "invalid-port" => [
            [
                'host' => 'hostName',
                'port' => 22,
            ],
        ];

        yield "invalid-both" => [
            [
                'host' => 'invalidHost',
                'port' => 22,
            ],
        ];
    }

    public function invalidSSHDataProvider(): Generator
    {
        yield 'missing-keys' => [
            [
                'enabled' => true,
                'sshHost' => 'localhost',
                'user' => 'user',
                'passivePortRange' => '10000:10001',
            ],
            'The child config "keys" under "root.parameters.ssh" must be configured.',
        ];
        yield 'missing-private-key' => [
            [
                'enabled' => true,
                'keys' => [
                    'public' => 'publicKey',
                ],
                'sshHost' => 'localhost',
                'user' => 'user',
                'passivePortRange' => '10000:10001',
            ],
            'The child config "#private" under "root.parameters.ssh.keys" must be configured.',
        ];
        yield 'missing-public-key' => [
            [
                'enabled' => true,
                'keys' => [
                    '#private' => 'privateKey',
                ],
                'sshHost' => 'localhost',
                'user' => 'user',
                'passivePortRange' => '10000:10001',
            ],
            'The child config "public" under "root.parameters.ssh.keys" must be configured.',
        ];
        yield 'missing-ssh-host' => [
            [
                'enabled' => true,
                'keys' => [
                    '#private' => 'privateKey',
                    'public' => 'publicKey',
                ],
                'user' => 'user',
                'passivePortRange' => '10000:10001',
            ],
            'The child config "sshHost" under "root.parameters.ssh" must be configured.',
        ];
        yield 'missing-user' => [
            [
                'enabled' => true,
                'keys' => [
                    '#private' => 'privateKey',
                    'public' => 'publicKey',
                ],
                'sshHost' => 'localhost',
                'passivePortRange' => '10000:10001',
            ],
            'The child config "user" under "root.parameters.ssh" must be configured.',
        ];
        yield 'missing-passivePortRange' => [
            [
                'enabled' => true,
                'keys' => [
                    '#private' => 'privateKey',
                    'public' => 'publicKey',
                ],
                'sshHost' => 'localhost',
                'user' => 'user',
            ],
            'The child config "passivePortRange" under "root.parameters.ssh" must be configured.',
        ];
        yield 'wrong-port-range' => [
            [
                'enabled' => true,
                'keys' => [
                    '#private' => 'privateKey',
                    'public' => 'publicKey',
                ],
                'sshHost' => 'localhost',
                'user' => 'user',
                'passivePortRange' => '10000:9000',
            ],
            'The Range From must be less than Range To.',
        ];
    }

    public function validSSHDataProvider(): Generator
    {
        yield 'stringPort' => [
            [
                'enabled' => true,
                'keys' => [
                    '#private' => 'privateKey',
                    'public' => 'publicKey',
                ],
                'sshHost' => 'localhost',
                'sshPort' => '12345',
                'user' => 'user',
                'passivePortRange' => '10000:11000',
            ],
        ];

        yield 'intPort' => [
            [
                'enabled' => true,
                'keys' => [
                    '#private' => 'privateKey',
                    'public' => 'publicKey',
                ],
                'sshHost' => 'localhost',
                'sshPort' => 12345,
                'user' => 'user',
                'passivePortRange' => '10000:11000',
            ],
        ];
    }

    public function testGetConnectionConfig(): void
    {
        $configArray = [
            'parameters' => [
                'host' => 'ftp',
                'username' => 'ftpuser',
                '#password' => 'userpass',
                'port' => 21,
                'path' => 'rel',
                'connectionType' => 'SFTP',
            ],
        ];
        $config = new Config(
            $configArray,
            new ConfigDefinition(),
        );

        $expectedConnectionConfig = [
            'host' => 'ftp',
            'port' => 21,
            'username' => 'ftpuser',
            'password' => 'userpass',
            'timeout' => 60,
            'recurseManually' => false,
            'ignorePassiveAddress' => false,
        ];

        $this->assertSame($expectedConnectionConfig, $config->getConnectionConfig());
    }
}



================================================
FILE: tests/phpunit/ConnectionTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor\Tests;

use Keboola\Component\UserException;
use Keboola\FtpExtractor\FileStateRegistry;
use Keboola\FtpExtractor\FtpExtractor;
use League\Flysystem\Adapter\AbstractFtpAdapter;
use League\Flysystem\Adapter\Ftp;
use League\Flysystem\Filesystem;
use League\Flysystem\Sftp\SftpAdapter;
use Monolog\Handler\TestHandler;
use Monolog\Logger;
use PHPUnit\Framework\TestCase;

class ConnectionTest extends TestCase
{
    /**
     * @dataProvider invalidConnectionProvider
     */
    public function testFalseConnection(AbstractFtpAdapter $adapter): void
    {
        $handler = new TestHandler();
        $extractor = new FtpExtractor(
            false,
            new Filesystem($adapter),
            new FileStateRegistry([]),
            (new Logger('ftpExtractorTest'))->pushHandler($handler)
        );

        try {
            $extractor->copyFiles('source', 'destination');
        } catch (\Throwable $e) {
            $this->assertInstanceOf(UserException::class, $e);
            $this->assertCount(3, $handler->getRecords());
            $this->assertMatchesRegularExpression(
                '/(Could not login)|(getaddrinfo failed)|(Could not connect to)|(Cannot connect to)/',
                $e->getMessage()
            );

            foreach ($handler->getRecords() as $count => $record) {
                if ($count === 0) {
                    $this->assertEquals(
                        sprintf('Connecting to host "%s" on port "%s".', $adapter->getHost(), $adapter->getPort()),
                        $record['message']
                    );
                    continue;
                }

                $this->assertMatchesRegularExpression(
                    '/(Could not login)|(getaddrinfo failed)|(Could not connect to)|(Cannot connect to)/',
                    $record['message']
                );
                $this->assertMatchesRegularExpression(sprintf('/Retrying\.\.\. \[%dx\]$/', $count), $record['message']);
            }
        }
    }


    public function invalidConnectionProvider(): array
    {
        return [
            'ftp-non-existing-server' => [
                new Ftp([
                    'host' => 'localhost',
                    'username' => 'bob',
                    'password' => 'marley',
                    'port' => 21,
                ]),
            ],
            'ftps-non-existing-server' => [
                new Ftp([
                    'host' => 'localhost',
                    'username' => 'bob',
                    'password' => 'marley',
                    'port' => 21,
                    'ssl' => 1,
                ]),
            ],
            'sftp-non-existing-server' => [
                new SftpAdapter([
                    'host' => 'localhost',
                    'username' => 'bob',
                    'password' => 'marley',
                    'port' => 22,
                ]),
            ],
            'sftp-non-existing-host' => [
                new SftpAdapter([
                    'host' => 'non-existing-host.keboola',
                    'username' => 'bob',
                    'password' => 'marley',
                    'port' => 22,
                ]),
            ],
            'sftp-non-existing-server-and-port' => [
                new SftpAdapter([
                    'host' => 'non-existing-host.keboola',
                    'username' => 'bob',
                    'password' => 'marley',
                    'port' => 220,
                    'path' => 'non-exists',
                ]),
            ],
            'ftp-non-existing-host' => [
                new Ftp([
                    'host' => 'non-existing-host.keboola',
                    'username' => 'bob',
                    'password' => 'marley',
                    'port' => 21,
                ]),
            ],
            'ftp-non-existing-host-and-port' => [
                new Ftp([
                    'host' => 'non-existing-host.keboola',
                    'username' => 'bob',
                    'password' => 'marley',
                    'port' => 50000,
                ]),
            ],
        ];
    }
}



================================================
FILE: tests/phpunit/ExceptionConverterTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor\Tests;

use Keboola\FtpExtractor\Exception\ApplicationException;
use League\Flysystem\ConnectionRuntimeException;
use League\Flysystem\Sftp\ConnectionErrorException;
use League\Flysystem\Sftp\InvalidRootException;
use PHPUnit\Framework\TestCase;
use Keboola\FtpExtractor\Exception\ExceptionConverter;
use League\Flysystem\FileNotFoundException;
use Keboola\Component\UserException;

class ExceptionConverterTest extends TestCase
{
    /**
     * @dataProvider exceptionMessageProvider
     * @psalm-param class-string<\Throwable> $expectedException
     */
    public function testHandleCopyFilesException(
        string $expectedException,
        string $expectedExceptionMessage,
        \Throwable $throwException
    ): void {
        $this->expectException($expectedException);
        $this->expectExceptionMessage($expectedExceptionMessage);

        try {
            throw $throwException;
        } catch (\Throwable $e) {
            ExceptionConverter::handleCopyFilesException($e);
        }
    }

    /**
     * @dataProvider exceptionMessageProvider
     * @psalm-param class-string<\Throwable> $expectedException
     */
    public function testHandlePrepareToDownloadException(
        string $expectedException,
        string $expectedExceptionMessage,
        \Throwable $throwException
    ): void {
        $this->expectException($expectedException);
        $this->expectExceptionMessage($expectedExceptionMessage);

        try {
            throw $throwException;
        } catch (\Throwable $e) {
            ExceptionConverter::handlePrepareToDownloadException($e);
        }
    }

    /**
     * @dataProvider downloadExceptionMessageProvider
     * @psalm-param class-string<\Throwable> $expectedException
     */
    public function testHandleDownloadException(
        string $expectedException,
        string $expectedExceptionMessage,
        \Throwable $throwException
    ): void {
        $this->expectException($expectedException);
        $this->expectExceptionMessage($expectedExceptionMessage);

        try {
            throw $throwException;
        } catch (\Throwable $e) {
            ExceptionConverter::handleDownloadException($e);
        }
    }

    public function exceptionMessageProvider(): array
    {
        return [
            [
                UserException::class,
                'Foo bar',
                new InvalidRootException('Foo bar'),
            ],
            [
                UserException::class,
                'Foo bar',
                new ConnectionErrorException('Foo bar'),
            ],
            [
                UserException::class,
                'Foo bar',
                new FileNotFoundException('Foo bar'),
            ],
            [
                UserException::class,
                'Could not login with username: foo bar',
                new ConnectionErrorException('Could not login with username: foo bar'),
            ],
            [
                UserException::class,
                'php_network_getaddresses: getaddrinfo failed: nodename nor servname provided, or not known',
                new \RuntimeException(
                    'php_network_getaddresses: getaddrinfo failed: nodename nor servname provided, or not known'
                ),
            ],
            [
                UserException::class,
                'Could not connect to server to verify public key.',
                new ConnectionRuntimeException('Could not connect to server to verify public key.'),
            ],
            [
                UserException::class,
                'The authenticity of host foo can\'t be established.',
                new \RuntimeException('The authenticity of host foo can\'t be established.'),
            ],
            [
                UserException::class,
                'Cannot connect to foo bar',
                new \RuntimeException('Cannot connect to foo bar'),
            ],
            [
                UserException::class,
                'Root is invalid or does not exist: /foo/bar',
                new InvalidRootException('Root is invalid or does not exist: /foo/bar'),
            ],
            [
                UserException::class,
                'Foo bar',
                new ConnectionErrorException('Foo bar'),
            ],
            [
                ApplicationException::class,
                'Foo bar',
                new \RuntimeException('Foo bar'),
            ],
            [
                UserException::class,
                sprintf(
                    'Connection was terminated. Check that the connection is not blocked by Firewall ' .
                    'or set ignore passive address: Operation now in progress (115)'
                ),
                new \ErrorException('Operation now in progress (115)'),
            ],
        ];
    }

    public function downloadExceptionMessageProvider(): array
    {
        $filePath = '/foo/bar.jpg';
        $progressMessage = 'Operation now in progress (115)';

        return [
            [
                UserException::class,
                sprintf('Error while trying to download file: File not found at path: %s', $filePath),
                new FileNotFoundException($filePath),
            ],
            [
                UserException::class,
                sprintf(
                    'Connection was terminated. Check that the connection is not blocked by Firewall ' .
                    'or set ignore passive address: %s',
                    $progressMessage
                ),
                new \ErrorException($progressMessage),
            ],
            [
                ApplicationException::class,
                'Foo Bar',
                new \ErrorException('Foo Bar'),
            ],
            [
                ApplicationException::class,
                'Foo Bar',
                new \RuntimeException('Foo Bar'),
            ],
            [
                UserException::class,
                'Connection timed out. Check your timeout configuration, server health and try again.',
                new \ErrorException('ftp_rawlist(): Connection timed out'),
            ],
            [
                UserException::class,
                'Connection timed out. Check your timeout configuration, server health and try again.',
                new \ErrorException('ftp_mdtm(): Connection timed out'),
            ],
            [
                UserException::class,
                'SSL/TLS handshake failed. Check your credentials, SSL/TLS configuration and make sure the ' .
                'certificate is valid and is not expired.',
                new \ErrorException('ftp_rawlist(): data_accept: SSL/TLS handshake failed'),
            ],
            [
                UserException::class,
                'Expected SSH_FXP_ATTRS or SSH_FXP_STATUS',
                new \ErrorException('Expected SSH_FXP_ATTRS or SSH_FXP_STATUS'),
            ],
            [
                UserException::class,
                'Expected SSH_FXP_VERSION',
                new \ErrorException('Expected SSH_FXP_VERSION'),
            ],
        ];
    }
}



================================================
FILE: tests/phpunit/FileStateRegistryTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor\Tests;

use Keboola\FtpExtractor\FileStateRegistry;
use PHPUnit\Framework\TestCase;

class FileStateRegistryTest extends TestCase
{
    /**
     * @dataProvider firstRunDataProvider
     */
    public function testRegistry(array $files, FileStateRegistry $registry): void
    {
        foreach ($files as $file) {
            $this->assertSame(
                $file['expected'],
                $registry->shouldBeFileUpdated($file['name'], $file['timestamp']),
                sprintf("Bad decision for %s with timestamp %s", $file['name'], $file['timestamp'])
            );
        }
    }

    public function firstRunDataProvider(): array
    {
        $firstRunFiles = [
            ['name' => 'dir1/files/1.txt', 'timestamp' => 900, 'expected' => false],
            ['name' => 'dir1/files/2.txt', 'timestamp' => 1000, 'expected' => true],
            ['name' => 'dir1/files/3.txt', 'timestamp' => 1002, 'expected' => true],
            ['name' => 'dir1/files/4.txt', 'timestamp' => 1005, 'expected' => true],
        ];

        $sameSecondUpdateFiles = [
            ['name' => '/dir2/file2.csv', 'timestamp' => 1000, 'expected' => false],
            ['name' => '/dir2/file1.csv', 'timestamp' => 1000, 'expected' => false],
            ['name' => '/dir2/file3.csv', 'timestamp' => 1000, 'expected' => true],
            ['name' => '/dir2/file5.csv', 'timestamp' => 1000, 'expected' => true],
            ['name' => '/dir3/file1.csv', 'timestamp' => 1001, 'expected' => true],
            ['name' => '/dir3/file2.csv', 'timestamp' => 1001, 'expected' => true],
            ['name' => '/dir5/file3.csv', 'timestamp' => 1005, 'expected' => true],
        ];

        $lastFiles = [
            '/dir2/file1.csv',
            '/dir2/file2.csv',
        ];

        return [
           'firstRun' => [$firstRunFiles, $this->getRegistry(1000, [])],
           'secondRunWithLastFiles' => [$sameSecondUpdateFiles, $this->getRegistry(1000, $lastFiles)],
        ];
    }

    private function getRegistry(int $newestTimestamp, array $files): FileStateRegistry
    {
        $stateFile = [
            FileStateRegistry::STATE_FILE_KEY => [
                FileStateRegistry::NEWEST_TIMESTAMP_KEY => $newestTimestamp,
                FileStateRegistry::FILES_WITH_NEWEST_TIMESTAMP_KEY => $files,
            ],
        ];

        return new FileStateRegistry($stateFile);
    }
}



================================================
FILE: tests/phpunit/GlobValidatorTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor\Tests;

use Keboola\FtpExtractor\GlobValidator;
use PHPUnit\Framework\TestCase;

class GlobValidatorTest extends TestCase
{
    /**
     * @group Glob
     * @dataProvider positiveDataProvider
     */
    public function testPositiveGlobMatchingPatterns(string $path, string $glob): void
    {
        $this->assertTrue(GlobValidator::validatePathAgainstGlob($path, $glob));
    }

    public function positiveDataProvider(): array
    {
        return [
            ['/files/data/test.txt', '/*/*/*.txt'],
            ['files/data/test.txt', '*/*/*.txt'],
            ['files/data/test.txt', '/*/data/test.*'],
            ['files/data/test.txt', '/**/*'],
            ['files/data/test.txt', 'files/data/test.txt'],
            ['files/data/test.txt', '/files/data/test.txt'],
        ];
    }

    /**
     * @group Glob
     * @dataProvider negativeDataProvider
     */
    public function testNegativeGlobMatchingPatterns(string $path, string $glob): void
    {
        $this->assertFalse(GlobValidator::validatePathAgainstGlob($path, $glob));
    }

    public function negativeDataProvider(): array
    {
        return [
            ['files/data/func1.txt', 'file/*/*.txt'],
            ['files/data/func1.ptx', 'files/*/*.txt'],
            ['/files/data/func1.bin', '*/*/*/*/*.bin'],
        ];
    }
}



================================================
FILE: tests/phpunit/ItemFilterTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\FtpExtractor\Tests;

use Keboola\FtpExtractor\ItemFilter;
use PHPUnit\Framework\TestCase;

class ItemFilterTest extends TestCase
{
    public function testFileFilter(): void
    {
        $items = [
            ['type' => 'directory'],
            ['type' => ItemFilter::FTP_FILETYPE_FILE],
            ['type' => ItemFilter::FTP_FILETYPE_FILE],
        ];

        $expected = [
            ['type' => ItemFilter::FTP_FILETYPE_FILE],
            ['type' => ItemFilter::FTP_FILETYPE_FILE],
        ];

        $this->assertSame($expected, ItemFilter::getOnlyFiles($items));
    }
}



================================================
FILE: .github/workflows/push.yml
================================================
name: GitHub Actions
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # Name of the image in the ECR
  APP_IMAGE: keboola/ex-ftp

  # Developer portal login
  KBC_DEVELOPERPORTAL_APP: keboola.ex-ftp
  KBC_DEVELOPERPORTAL_APP_CSAS: keboola.ex-ftp-csas
  KBC_DEVELOPERPORTAL_USERNAME: keboola+ex_ftp_github_actions
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
  KBC_DEVELOPERPORTAL_VENDOR: keboola

  # DockerHub login
  DOCKERHUB_USER: "keboolabot"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test KBC project
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }}
  KBC_TEST_PROJECT_URL: ""
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v4
      -
        name: Print Docker version
        run: docker -v
      -
        name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"
      -
        name: Build image
        run: docker build -t $APP_IMAGE .
      -
        name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
      -
        name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ steps.tag.outputs.app_image_tag }}
          push_latest: ${{ steps.tag.outputs.is_semantic_tag }}
          source_image: ${{ env.APP_IMAGE}}

  tests:
    needs: build
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix: ...
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v4
      -
        name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.APP_IMAGE}}
          tag_as_latest: true
      -
        name: Run tests
        run: |
          docker compose build
          docker compose run app composer ci

  tests-in-kbc:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Run KBC test jobs
        if: env.KBC_STORAGE_TOKEN && env.KBC_TEST_PROJECT_CONFIGS
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ env.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    needs:
      - build
      - tests
      - tests-in-kbc
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.build.outputs.is_semantic_tag == 'true'
    steps:
      -
        name: Set tag in the Developer Portal
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
      -
        name: Set tag in the Deloper Portal (CSAS)
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          repository_app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP_CSAS }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}


