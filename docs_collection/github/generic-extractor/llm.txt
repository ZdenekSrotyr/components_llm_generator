Directory structure:
└── keboola-generic-extractor/
    ├── docker/
    │   ├── php.ini
    │   ├── jsontest/
    │   │   ├── JsonTests.pl
    │   │   └── Dockerfile
    │   └── composer-install.sh
    ├── apiary.apib
    ├── LICENSE
    ├── phpcs.xml
    ├── docker-compose.yml
    ├── src/
    │   ├── Logger/
    │   │   └── LoggerMiddleware.php
    │   ├── GenericExtractor.php
    │   ├── GenericExtractorJob.php
    │   ├── AwsSignature/
    │   │   └── AwsSignatureMiddleware.php
    │   ├── Authentication/
    │   │   ├── Query.php
    │   │   ├── NoAuth.php
    │   │   ├── OAuth20Login.php
    │   │   ├── Basic.php
    │   │   ├── Login.php
    │   │   ├── OAuth10.php
    │   │   ├── OAuth20.php
    │   │   └── AuthInterface.php
    │   ├── Response/
    │   │   ├── FindResponseArray.php
    │   │   └── Filter.php
    │   ├── Cache/
    │   │   └── CacheAllStrategy.php
    │   ├── PlaceholdersUtils.php
    │   ├── Context/
    │   │   ├── OAuth20LoginContext.php
    │   │   ├── OAuth20Context.php
    │   │   ├── QueryAuthContext.php
    │   │   ├── LoginAuthApiRequestContext.php
    │   │   ├── RequestContext.php
    │   │   └── LoginAuthLoginRequestContext.php
    │   ├── Exception/
    │   │   ├── UserException.php
    │   │   ├── SshTunnelOpenException.php
    │   │   └── ApplicationException.php
    │   ├── Utils.php
    │   ├── Configuration/
    │   │   ├── Extractor.php
    │   │   ├── Headers.php
    │   │   ├── Api.php
    │   │   ├── UserFunction.php
    │   │   ├── Extractor/
    │   │   │   ├── StateFile.php
    │   │   │   ├── ConfigFile.php
    │   │   │   └── Node/
    │   │   │       ├── Config.php
    │   │   │       ├── Authorization.php
    │   │   │       ├── Api.php
    │   │   │       ├── NodeFunction.php
    │   │   │       ├── AwsSignature.php
    │   │   │       └── SshProxy.php
    │   │   └── JuicerRest.php
    │   ├── run.php
    │   ├── SshTunnel/
    │   │   ├── SshTunnelFactory.php
    │   │   └── SshTunnel.php
    │   ├── MissingTableHelper.php
    │   └── Executor.php
    ├── composer.lock
    ├── phpstan.neon
    ├── tests/
    │   └── phpunit/
    │       ├── RecursiveJobTest.php
    │       ├── GenericExtractorJobTest.php
    │       ├── FunctionalTest.php
    │       ├── Authentication/
    │       │   ├── OAuth20Test.php
    │       │   ├── OAuth10Test.php
    │       │   ├── OAuth20LoginTest.php
    │       │   ├── LoginTest.php
    │       │   ├── QueryTest.php
    │       │   └── BasicTest.php
    │       ├── Response/
    │       │   ├── FindResponseArrayTest.php
    │       │   └── FilterTest.php
    │       ├── CacheTest.php
    │       ├── Context/
    │       │   ├── OAuth20LoginContextTest.php
    │       │   ├── OAuth20ContextTest.php
    │       │   ├── QueryAuthContextTest.php
    │       │   ├── RequestContextTest.php
    │       │   ├── LoginAuthLoginRequestContextTest.php
    │       │   └── LoginAuthApiRequestContextTest.php
    │       ├── ExtractorTestCase.php
    │       ├── Traits/
    │       │   ├── RmDirTrait.php
    │       │   ├── ToxiproxyTrait.php
    │       │   └── CloseSshTunnelsTrait.php
    │       ├── SshTunnelRetryTest.php
    │       ├── data/
    │       │   ├── ssh_tunnel_net_problem/
    │       │   │   └── config.json
    │       │   ├── multipleOutputsUserData/
    │       │   │   ├── expected/
    │       │   │   │   └── tables/
    │       │   │   │       ├── first.get.manifest
    │       │   │   │       ├── second.get
    │       │   │   │       ├── second.get.manifest
    │       │   │   │       └── first.get
    │       │   │   └── config.json
    │       │   ├── oauth20mac/
    │       │   │   └── config.json
    │       │   ├── basicAuth/
    │       │   │   ├── expected/
    │       │   │   │   └── tables/
    │       │   │   │       ├── getPost.get
    │       │   │   │       └── getPost.get.manifest
    │       │   │   └── config.json
    │       │   ├── jobUserData/
    │       │   │   ├── expected/
    │       │   │   │   ├── state.json
    │       │   │   │   └── tables/
    │       │   │   │       ├── get
    │       │   │   │       └── get.manifest
    │       │   │   └── config.json
    │       │   ├── emptyCfg/
    │       │   │   └── config.json
    │       │   ├── invalidHeadersConfigOauth/
    │       │   │   └── config.json
    │       │   ├── getPost/
    │       │   │   ├── expected/
    │       │   │   │   └── tables/
    │       │   │   │       ├── getPost.post
    │       │   │   │       ├── getPost.get
    │       │   │   │       ├── getPost.get.manifest
    │       │   │   │       └── getPost.post.manifest
    │       │   │   └── config.json
    │       │   ├── multipleOutputs/
    │       │   │   ├── expected/
    │       │   │   │   └── tables/
    │       │   │   │       ├── first.get.manifest
    │       │   │   │       ├── second.get
    │       │   │   │       ├── second.get.manifest
    │       │   │   │       └── first.get
    │       │   │   └── config.json
    │       │   ├── metadataTest/
    │       │   │   ├── config.json
    │       │   │   ├── in/
    │       │   │   │   └── state.json
    │       │   │   └── out/
    │       │   │       └── state.json
    │       │   ├── requestCache/
    │       │   │   └── config.json
    │       │   ├── invalidHeadersConfig/
    │       │   │   └── config.json
    │       │   ├── dynamicUserData/
    │       │   │   ├── expected/
    │       │   │   │   ├── state.json
    │       │   │   │   └── tables/
    │       │   │   │       ├── get
    │       │   │   │       └── get.manifest
    │       │   │   └── config.json
    │       │   ├── syncAction/
    │       │   │   └── config.json
    │       │   ├── noCache/
    │       │   │   └── config.json
    │       │   ├── oauth20queryfn/
    │       │   │   └── config.json
    │       │   ├── oauth20login/
    │       │   │   └── config.json
    │       │   ├── recursive/
    │       │   │   └── config.json
    │       │   ├── defaultBucket/
    │       │   │   ├── expected/
    │       │   │   │   ├── state.json
    │       │   │   │   └── tables/
    │       │   │   │       ├── db
    │       │   │   │       └── db.manifest
    │       │   │   └── config.json
    │       │   ├── oauth20bearer/
    │       │   │   └── config.json
    │       │   ├── storeResultsDefaultBucket/
    │       │   │   └── out/
    │       │   │       └── tables/
    │       │   │           ├── 1
    │       │   │           ├── 1.manifest
    │       │   │           ├── 0.manifest
    │       │   │           └── 0
    │       │   ├── simple_basic/
    │       │   │   └── config.json
    │       │   ├── jsonMap/
    │       │   │   ├── expected/
    │       │   │   │   └── tables/
    │       │   │   │       ├── get
    │       │   │   │       └── get.manifest
    │       │   │   └── config.json
    │       │   ├── storeResultsTest/
    │       │   │   └── out/
    │       │   │       └── tables/
    │       │   │           ├── full/
    │       │   │           │   ├── 1
    │       │   │           │   ├── 1.manifest
    │       │   │           │   ├── 0.manifest
    │       │   │           │   └── 0
    │       │   │           └── incremental/
    │       │   │               ├── 1
    │       │   │               ├── 1.manifest
    │       │   │               ├── 0.manifest
    │       │   │               └── 0
    │       │   ├── ssh_tunnel/
    │       │   │   └── config.json
    │       │   ├── ssh_tunnel_server_error/
    │       │   │   └── config.json
    │       │   ├── defaultOptions/
    │       │   │   └── config.json
    │       │   ├── requestCacheTTL/
    │       │   │   └── config.json
    │       │   ├── recursive_same_ph/
    │       │   │   └── config.json
    │       │   ├── iterations/
    │       │   │   └── config.json
    │       │   ├── responseUrlScroll/
    │       │   │   ├── expected/
    │       │   │   │   └── tables/
    │       │   │   │       ├── responseUrl.scroll.manifest
    │       │   │   │       └── responseUrl.scroll
    │       │   │   └── config.json
    │       │   └── ssh_tunnel_bad_config/
    │       │       └── config.json
    │       ├── Config/
    │       │   ├── ConfigurationTest.php
    │       │   ├── ApiTest.php
    │       │   ├── UserFunctionTest.php
    │       │   └── JuicerRestTest.php
    │       ├── MockExecutionTest.php
    │       ├── MissingTableHelperTest.php
    │       ├── PlaceholdersUtilsTest.php
    │       ├── GenericExtractorTest.php
    │       ├── UtilsTest.php
    │       └── bootstrap.php
    ├── Dockerfile-ssh-proxy
    ├── phpunit.xml.dist
    ├── doc/
    │   ├── docker-compose.yml
    │   ├── generate-ssl.sh
    │   ├── run-samples.sh
    │   ├── examples/
    │   │   ├── 123-incremental-load-legacy/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       └── state.json
    │   │   ├── 013-skip-flatten/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 035-complex-post/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.getUsers.manifest
    │   │   │   │   └── mock-server.getUsers
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 101-function-query-auth/
    │   │   │   ├── items-users.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.orders.manifest
    │   │   │   ├── items-orders.response
    │   │   │   ├── config.json
    │   │   │   ├── items-orders.request
    │   │   │   └── items-users.response
    │   │   ├── 041-paging-stop-same/
    │   │   │   ├── users4.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   └── users4.response
    │   │   ├── 016-inconsistent-object/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 084-login-auth-expires-seconds/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   ├── login.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.orders.manifest
    │   │   │   ├── orders.request
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   ├── login.requestHeaders
    │   │   │   └── login.request
    │   │   ├── 120-datafield-separator/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 106-child-jobs-array/
    │   │   │   ├── user234.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users-2
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.users-2_members_items
    │   │   │   │   ├── mock-server.users-2_members_tags.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   ├── mock-server.users-2_members_tags
    │   │   │   │   ├── mock-server.users-2.manifest
    │   │   │   │   └── mock-server.users-2_members_items.manifest
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── user123.request
    │   │   ├── 014-skip-flatten-nested/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users_contacts
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.users_contacts.manifest
    │   │   │   └── config.json
    │   │   ├── 129-login-auth-scalar/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── login.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   ├── login.requestHeaders
    │   │   │   └── login.request
    │   │   ├── 012-deeply-nested-object/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users_contacts
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.users_contacts.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 074-http-headers/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 070-mapping-tables-nested-direct-pk/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.primary-address
    │   │   │   │   ├── mock-server.primary-address.manifest
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-contact.manifest
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.user-contact
    │   │   │   └── config.json
    │   │   ├── 034-post-request/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.getUsers.manifest
    │   │   │   │   └── mock-server.getUsers
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 134-user-data-in-mapping/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 045-next-page-flag-has-more/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 131-ssh-tunnel/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server-behind-proxy.users
    │   │   │   │   └── mock-server-behind-proxy.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 015-skip-boolean/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 114-oauth2-google/
    │   │   │   ├── reports.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── adsense.rows.manifest
    │   │   │   │   ├── adsense.rows
    │   │   │   │   ├── adsense.report-rows.manifest
    │   │   │   │   └── adsense.report-rows
    │   │   │   ├── config.json
    │   │   │   ├── token.response
    │   │   │   ├── token.request
    │   │   │   └── reports.request
    │   │   ├── 009-nested-array/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 051-pagination-pagenum-basic/
    │   │   │   ├── users3.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   └── users3.request
    │   │   ├── 039-default-parameters/
    │   │   │   ├── items.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.items
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.items.manifest
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── items.request
    │   │   ├── 056-pagination-response-url-params-override/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 111-templates-example/
    │   │   │   ├── orders.requestHeaders
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.orders.manifest
    │   │   │   ├── orders.request
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── token.requestHeaders
    │   │   │   ├── config.json
    │   │   │   ├── token.response
    │   │   │   ├── token.request
    │   │   │   └── config-original.json
    │   │   ├── 042-paging-stop-same-2/
    │   │   │   ├── users4.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users6.response
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   ├── users4.response
    │   │   │   └── users6.request
    │   │   ├── 087-function-baseurl/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 021-basic-child-job/
    │   │   │   ├── user234.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user_user-id
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.user_user-id.manifest
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── user123.request
    │   │   ├── 047-next-page-flag-is-last/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 001-simple-job/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 069-mapping-tables-nested-direct/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.primary-address
    │   │   │   │   ├── mock-server.primary-address.manifest
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-contact.manifest
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.user-contact
    │   │   │   └── config.json
    │   │   ├── 048-force-stop/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 023-child-job-nested-id/
    │   │   │   ├── user234.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── user123.request
    │   │   ├── 037-retry-header/
    │   │   │   ├── users.responsecode
    │   │   │   ├── users.responseheaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 067-mapping-tables-nested/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.user-address
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-contact.manifest
    │   │   │   │   ├── mock-server.user-address.manifest
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.user-contact
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 135-basic-child-job-array/
    │   │   │   ├── children-a3.response
    │   │   │   ├── children-a1.response
    │   │   │   ├── children-a2.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user_child-id.manifest
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   ├── mock-server.users_children
    │   │   │   │   ├── mock-server.user_child-id
    │   │   │   │   └── mock-server.users_children.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   ├── children-a3.request
    │   │   │   ├── children-a1.request
    │   │   │   └── children-a2.request
    │   │   ├── 063-mapping-automatic/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users_interests.manifest
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.users_interests
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 025-naming-conflict/
    │   │   │   ├── user234.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── user123.request
    │   │   ├── 137-mapping-tables-nested-empty/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.user-address
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-contact.manifest
    │   │   │   │   ├── mock-server.user-address.manifest
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.user-contact
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 103-oauth2-bearer/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 085-function-job-placeholders/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── user00234.request
    │   │   │   ├── config.json
    │   │   │   ├── user00003.response
    │   │   │   ├── user00234.response
    │   │   │   └── user00003.request
    │   │   ├── 090-function-job-parameters-sha1/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 059-pagination-response-param-scroll-request/
    │   │   │   ├── search.response
    │   │   │   ├── results1.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── search.request
    │   │   │   ├── results2.request
    │   │   │   ├── results1.request
    │   │   │   └── results2.response
    │   │   ├── 116-multiple-conditions-multiple-jobs/
    │   │   │   ├── accounts0.response
    │   │   │   ├── accounts0.request
    │   │   │   ├── accounts2.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.accounts
    │   │   │   │   ├── mock-server.accounts.manifest
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users0.response
    │   │   │   ├── users0.request
    │   │   │   ├── config.json
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── accounts2.request
    │   │   ├── 100-function-login-headers/
    │   │   │   ├── auth.requestHeaders
    │   │   │   ├── auth.response
    │   │   │   ├── auth.request
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 073-mapping-forceType/
    │   │   │   ├── config-alternative.json
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 024-child-job-deeply-nested-id/
    │   │   │   ├── user234.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── user123.request
    │   │   ├── 032-multiple-combined-filter/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 055-pagination-response-url-params/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 057-pagination-response-param-basic/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 092-function-user-date-set-date/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 099-function-query-parameters/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 064-mapping-basic/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 133-ssh-tunnel-iterations-params/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── ge-tutorial.users.manifest
    │   │   │   │   └── ge-tutorial.users
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 046-next-page-flag-has-more-2/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 020-setting-delimiter-complex/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 098-function-hmac/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 052-pagination-pagenum-rename/
    │   │   │   ├── users3.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   └── users3.request
    │   │   ├── 031-combined-filter/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 068-mapping-tables-nested-array/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.primary-address
    │   │   │   │   ├── mock-server.secondary-address.manifest
    │   │   │   │   ├── mock-server.secondary-address
    │   │   │   │   ├── mock-server.primary-address.manifest
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-contact.manifest
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.user-contact
    │   │   │   └── config.json
    │   │   ├── 066-mapping-tables-basic/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.user-interests.manifest
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.user-interests
    │   │   │   └── config.json
    │   │   ├── 108-incremental-load-date/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       └── state.json
    │   │   ├── 075-incremental-output/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 036-complex-get/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 054-pagination-response-url-basic/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 112-iterations-params/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── ge-tutorial.users.manifest
    │   │   │   │   └── ge-tutorial.users
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 078-basic-auth/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 097-function-ifempty/
    │   │   │   ├── config-alternative.json
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 018-multiple-filters/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users_contacts
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.users_contacts.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 029-simple-filter/
    │   │   │   ├── user234.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── user345.response
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── user345.request
    │   │   │   ├── config.json
    │   │   │   ├── user456.response
    │   │   │   ├── user456.request
    │   │   │   └── user123.request
    │   │   ├── 080-login-auth-query/
    │   │   │   ├── login.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── login.request
    │   │   ├── 006-simple-object/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 118-function-login-headers-response/
    │   │   │   ├── auth.requestHeaders
    │   │   │   ├── auth.response
    │   │   │   ├── auth.request
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 126-pagination-stop-limit/
    │   │   │   ├── users4.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   └── users4.response
    │   │   ├── 071-mapping-multiple-pk/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.interests
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.interests.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 091-function-user-data/
    │   │   │   ├── orders.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.orders.manifest
    │   │   │   ├── orders.request
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 107-incremental-load/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       └── state.json
    │   │   ├── 004-array-in-nested-object/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 143-aws-signature-request/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 005-two-arrays-in-nested-object/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 044-paging-stop-underflow-struct/
    │   │   │   ├── users4.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   └── users4.response
    │   │   ├── 027-basic-deeper-nesting-alternative/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   ├── mock-server.order-detail
    │   │   │   │   ├── mock-server.orders.manifest
    │   │   │   │   └── mock-server.order-detail.manifest
    │   │   │   └── config.json
    │   │   ├── 065-mapping-child-jobs/
    │   │   │   ├── user234.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── user123.request
    │   │   ├── 049-pagination-offset-rename/
    │   │   │   ├── users4.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   └── users4.response
    │   │   ├── 117-function-login-params-response/
    │   │   │   ├── auth.requestHeaders
    │   │   │   ├── auth.response
    │   │   │   ├── auth.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 040-required-headers/
    │   │   │   ├── users.requestheaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 011-object-with-nested-object/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 050-pagination-offset-override/
    │   │   │   ├── orders1.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.orders.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users2.request
    │   │   │   ├── orders1.response
    │   │   │   └── users2.response
    │   │   ├── 142-https-client-cert/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── https/
    │   │   │   │   ├── nginx.conf.tmpl
    │   │   │   │   ├── client_ca/
    │   │   │   │   │   ├── rootCA.key
    │   │   │   │   │   └── rootCA.crt
    │   │   │   │   ├── ca/
    │   │   │   │   │   ├── rootCA.key
    │   │   │   │   │   └── rootCA.crt
    │   │   │   │   ├── client_certs/
    │   │   │   │   │   ├── client_key.pem
    │   │   │   │   │   ├── client_csr.pem
    │   │   │   │   │   └── client_cert.pem
    │   │   │   │   └── certs/
    │   │   │   │       ├── cert.pem
    │   │   │   │       ├── csr.pem
    │   │   │   │       └── key.pem
    │   │   │   └── config.json
    │   │   ├── 115-multiple-pk-parent/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.user-address
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-address.manifest
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 102-oauth1/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 072-mapping-pk-disable/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 082-login-auth-expires/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   ├── login.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.orders.manifest
    │   │   │   ├── orders.request
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   ├── login.requestHeaders
    │   │   │   └── login.request
    │   │   ├── 062-pagination-multiple-scrollers/
    │   │   │   ├── search3.response
    │   │   │   ├── search2.request
    │   │   │   ├── search1.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.search.manifest
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.search
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── search2.response
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   ├── search3.request
    │   │   │   └── search1.request
    │   │   ├── 136-post-request-functions/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.getAccessLog
    │   │   │   │   └── mock-server.getAccessLog.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 093-function-api-http-headers/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── config-alternative.json
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 083-login-auth-expires-date/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── orders.response
    │   │   │   ├── login.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.orders.manifest
    │   │   │   ├── orders.request
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   ├── login.requestHeaders
    │   │   │   └── login.request
    │   │   ├── 089-function-job-parameters-md5/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 060-pagination-cursor-basic/
    │   │   │   ├── users3.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   └── users3.request
    │   │   ├── 105-oauth2-login/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── token.requestHeaders
    │   │   │   ├── config.json
    │   │   │   ├── token.response
    │   │   │   └── token.request
    │   │   ├── 096-function-nested-from-to/
    │   │   │   ├── orders.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   └── mock-server.orders.manifest
    │   │   │   ├── orders.request
    │   │   │   └── config.json
    │   │   ├── 095-function-nested/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 139-pagination-hasmore-child-filter/
    │   │   │   ├── users3.response
    │   │   │   ├── user567.response
    │   │   │   ├── user678.response
    │   │   │   ├── user234.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── user345.response
    │   │   │   ├── user123.response
    │   │   │   ├── user567.request
    │   │   │   ├── user345.request
    │   │   │   ├── config.json
    │   │   │   ├── user678.request
    │   │   │   ├── users1.request
    │   │   │   ├── user456.response
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   ├── users3.request
    │   │   │   ├── user456.request
    │   │   │   └── user123.request
    │   │   ├── 038-default-headers/
    │   │   │   ├── users.requestheaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 088-function-baseurl-sprintf/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 119-function-nested-config/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 028-advanced-deep-nesting/
    │   │   │   ├── user123order1345.response
    │   │   │   ├── user123order1234.response
    │   │   │   ├── user234order2345.request
    │   │   │   ├── user123orders.request
    │   │   │   ├── user234order2345items.response
    │   │   │   ├── user234.response
    │   │   │   ├── user123order1345.request
    │   │   │   ├── user123order1345item345.response
    │   │   │   ├── user234orders.request
    │   │   │   ├── user123order1345item456.request
    │   │   │   ├── user234orders.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.order-items.manifest
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.item-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   ├── mock-server.item-detail
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   ├── mock-server.order-detail
    │   │   │   │   ├── mock-server.order-items
    │   │   │   │   ├── mock-server.orders.manifest
    │   │   │   │   └── mock-server.order-detail.manifest
    │   │   │   ├── user123order1234items.response
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── user123order1345item456.response
    │   │   │   ├── config.json
    │   │   │   ├── user123order1234.request
    │   │   │   ├── user123order1345items.request
    │   │   │   ├── user234order2345items.request
    │   │   │   ├── user234order2345.response
    │   │   │   ├── user123order1345item345.request
    │   │   │   ├── user123order1345items.response
    │   │   │   ├── user123orders.response
    │   │   │   ├── user123order1234items.request
    │   │   │   └── user123.request
    │   │   ├── 128-login-auth-text/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── login.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   ├── login.requestHeaders
    │   │   │   └── login.request
    │   │   ├── 010-object-with-nested-array/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users_tags.manifest
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.users_tags
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 104-oauth2-hmac/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 008-single-object-in-array/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 003-multiple-arrays-in-object/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 058-pagination-response-param-override/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   └── users1.response
    │   │   ├── 019-different-delimiter/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 127-pagination-stop-field/
    │   │   │   ├── users3.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   └── users3.request
    │   │   ├── 017-upgrading-array/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users_tags.manifest
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.users_tags
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 110-incremental-relative/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       └── state.json
    │   │   ├── 125-user-data-legacy/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 122-multiple-filters-legacy/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users_contacts
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.users_contacts.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 130-unsupported-nested-array/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── rows
    │   │   │   │   └── rows.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 141-https-self-signed/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── https/
    │   │   │   │   ├── ca/
    │   │   │   │   │   ├── rootCA.srl
    │   │   │   │   │   ├── rootCA.key
    │   │   │   │   │   └── rootCA.crt
    │   │   │   │   └── certs/
    │   │   │   │       ├── cert.pem
    │   │   │   │       ├── csr.pem
    │   │   │   │       └── key.pem
    │   │   │   └── config.json
    │   │   ├── 121-inconsistent-object-legacy/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 132-ignore-errors/
    │   │   │   ├── user234.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user_user-id
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.user_user-id.manifest
    │   │   │   ├── user124.responseCode
    │   │   │   ├── user124.request
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   ├── user124.response
    │   │   │   └── user123.request
    │   │   ├── 077-query-auth/
    │   │   │   ├── config-alternative.json
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 061-pagination-cursor-reverse/
    │   │   │   ├── users3.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   └── users3.request
    │   │   ├── 022-basic-child-job-datatype/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 086-function-job-placeholders-reference/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 030-not-like-filter/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   └── config.json
    │   │   ├── 109-incremental-load-from-to/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       └── state.json
    │   │   ├── 043-paging-stop-underflow/
    │   │   │   ├── users4.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   └── users4.response
    │   │   ├── 076-user-data/
    │   │   │   ├── user234.response
    │   │   │   ├── orders.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   └── mock-server.orders.manifest
    │   │   │   ├── orders.request
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── user123.request
    │   │   ├── 113-iterations-headers/
    │   │   │   ├── config-alternative.json
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── ge-tutorial.users.manifest
    │   │   │   │   └── ge-tutorial.users
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   ├── users1.requestHeaders
    │   │   │   └── users2.requestHeaders
    │   │   ├── 002-array-in-object/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 026-basic-deeper-nesting/
    │   │   │   ├── user123order1345.response
    │   │   │   ├── user123order1234.response
    │   │   │   ├── user234order2345.request
    │   │   │   ├── user123orders.request
    │   │   │   ├── user234.response
    │   │   │   ├── user123order1345.request
    │   │   │   ├── user234orders.request
    │   │   │   ├── user234orders.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   ├── mock-server.orders
    │   │   │   │   ├── mock-server.users.manifest
    │   │   │   │   ├── mock-server.order-detail
    │   │   │   │   ├── mock-server.orders.manifest
    │   │   │   │   └── mock-server.order-detail.manifest
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   ├── user123order1234.request
    │   │   │   ├── user234order2345.response
    │   │   │   ├── user123orders.response
    │   │   │   └── user123.request
    │   │   ├── 053-pagination-pagenum-override/
    │   │   │   ├── users3.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   └── users3.request
    │   │   ├── 138-pagination-stop-field-child-filter/
    │   │   │   ├── users3.response
    │   │   │   ├── user234.response
    │   │   │   ├── user789.request
    │   │   │   ├── user7899.request
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── user345.response
    │   │   │   ├── user123.response
    │   │   │   ├── user345.request
    │   │   │   ├── config.json
    │   │   │   ├── users1.request
    │   │   │   ├── user456.response
    │   │   │   ├── users2.request
    │   │   │   ├── user7899.response
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   ├── users3.request
    │   │   │   ├── user789.response
    │   │   │   ├── user456.request
    │   │   │   └── user123.request
    │   │   ├── 124-naming-conflict-legacy/
    │   │   │   ├── user234.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── user123.response
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   └── user123.request
    │   │   ├── 079-login-auth-headers/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── login.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   ├── login.requestHeaders
    │   │   │   └── login.request
    │   │   ├── 007-nested-object/
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 094-function-config-headers/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   └── config.json
    │   │   ├── 081-login-auth-headers-query-override/
    │   │   │   ├── users.requestHeaders
    │   │   │   ├── login.response
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── users.request
    │   │   │   ├── users.response
    │   │   │   ├── config.json
    │   │   │   ├── login.requestHeaders
    │   │   │   └── login.request
    │   │   ├── 140-pagination-forcestop-child-filter/
    │   │   │   ├── users3.response
    │   │   │   ├── user567.response
    │   │   │   ├── user678.response
    │   │   │   ├── user234.response
    │   │   │   ├── user234.request
    │   │   │   ├── _sample_out/
    │   │   │   │   ├── mock-server.users
    │   │   │   │   ├── mock-server.user-detail.manifest
    │   │   │   │   ├── mock-server.user-detail
    │   │   │   │   └── mock-server.users.manifest
    │   │   │   ├── user345.response
    │   │   │   ├── user123.response
    │   │   │   ├── user567.request
    │   │   │   ├── user345.request
    │   │   │   ├── config.json
    │   │   │   ├── user678.request
    │   │   │   ├── users1.request
    │   │   │   ├── user456.response
    │   │   │   ├── users2.request
    │   │   │   ├── users2.response
    │   │   │   ├── users1.response
    │   │   │   ├── users3.request
    │   │   │   ├── user456.request
    │   │   │   └── user123.request
    │   │   └── 033-job-parameters/
    │   │       ├── _sample_out/
    │   │       │   ├── mock-server.users
    │   │       │   └── mock-server.users.manifest
    │   │       ├── config.json
    │   │       ├── users1.request
    │   │       ├── users2.request
    │   │       ├── users2.response
    │   │       └── users1.response
    │   ├── run-single-example.sh
    │   └── README.md
    ├── .github/
    │   └── workflows/
    │       └── push.yml
    ├── composer.json
    ├── python-sync-actions/
    │   ├── flake8.cfg
    │   ├── docker-compose.yml
    │   ├── src/
    │   │   ├── component.py
    │   │   ├── configuration.py
    │   │   ├── http_generic/
    │   │   │   ├── __init__.py
    │   │   │   ├── client.py
    │   │   │   ├── auth.py
    │   │   │   └── pagination.py
    │   │   ├── user_functions.py
    │   │   ├── __init__.py
    │   │   ├── actions/
    │   │   │   ├── curl.py
    │   │   │   ├── mapping.py
    │   │   │   └── __init__.py
    │   │   └── placeholders_utils.py
    │   ├── tests/
    │   │   ├── test_mapping.py
    │   │   ├── test_auth.py
    │   │   ├── data_tests/
    │   │   │   ├── test_003_oauth_cc/
    │   │   │   │   └── config.json
    │   │   │   ├── test_006_post_fail/
    │   │   │   │   └── config.json
    │   │   │   ├── test_006_post_form/
    │   │   │   │   └── config.json
    │   │   │   ├── test_004_oauth_cc_post/
    │   │   │   │   └── config.json
    │   │   │   ├── test_007_infer_mapping_userdata/
    │   │   │   │   └── config.json
    │   │   │   ├── test_008_infer_mapping_userdata_child/
    │   │   │   │   └── config.json
    │   │   │   ├── test_005_post/
    │   │   │   │   └── config.json
    │   │   │   ├── test_002_nested/
    │   │   │   │   ├── response.json
    │   │   │   │   ├── config.json
    │   │   │   │   └── output.json
    │   │   │   ├── test_009_empty_datafield/
    │   │   │   │   ├── response.json
    │   │   │   │   └── config.json
    │   │   │   └── test_001/
    │   │   │       ├── response.json
    │   │   │       ├── config.json
    │   │   │       └── output.json
    │   │   ├── test_component.py
    │   │   ├── _test_calls.py
    │   │   ├── __init__.py
    │   │   ├── test_curl.py
    │   │   ├── test_functions.py
    │   │   ├── test_configuration.py
    │   │   └── calls/
    │   │       ├── 004-nested-deep/
    │   │       │   ├── user1order22.response
    │   │       │   ├── users.requestHeaders
    │   │       │   ├── user1order11.requestHeaders
    │   │       │   ├── user1orders.request
    │   │       │   ├── user1order21.requestHeaders
    │   │       │   ├── user2.response
    │   │       │   ├── user1.requestHeaders
    │   │       │   ├── user1order11.request
    │   │       │   ├── users.request
    │   │       │   ├── users.response
    │   │       │   ├── user1order12.request
    │   │       │   ├── config.json
    │   │       │   ├── user1order12.response
    │   │       │   ├── user1order22.requestHeaders
    │   │       │   ├── user1orders.response
    │   │       │   ├── user1order22.request
    │   │       │   ├── user2.requestHeaders
    │   │       │   ├── user2orders.request
    │   │       │   ├── user1order21.request
    │   │       │   ├── user1order21.response
    │   │       │   ├── user2orders.response
    │   │       │   ├── user2.request
    │   │       │   ├── user1order12.requestHeaders
    │   │       │   ├── user1order11.response
    │   │       │   ├── user1orders.requestHeaders
    │   │       │   ├── user1.response
    │   │       │   ├── user1.request
    │   │       │   └── user2orders.requestHeaders
    │   │       ├── 002-token-body/
    │   │       │   ├── orders.requestHeaders
    │   │       │   ├── orders.response
    │   │       │   ├── orders.request
    │   │       │   └── config.json
    │   │       ├── 005-query/
    │   │       │   ├── orders.requestHeaders
    │   │       │   ├── orders.response
    │   │       │   ├── orders.request
    │   │       │   └── config.json
    │   │       ├── 010-default-header/
    │   │       │   ├── orders.requestHeaders
    │   │       │   ├── orders.response
    │   │       │   ├── orders.request
    │   │       │   └── config.json
    │   │       ├── 003-basic/
    │   │       │   ├── orders.requestHeaders
    │   │       │   ├── orders.response
    │   │       │   ├── orders.request
    │   │       │   └── config.json
    │   │       ├── 008-page-params-offset/
    │   │       │   ├── orders.requestHeaders
    │   │       │   ├── orders.response
    │   │       │   ├── orders.request
    │   │       │   └── config.json
    │   │       ├── 001-token-header/
    │   │       │   ├── orders.requestHeaders
    │   │       │   ├── orders.response
    │   │       │   ├── orders.request
    │   │       │   └── config.json
    │   │       ├── 000-bearer/
    │   │       │   ├── orders.requestHeaders
    │   │       │   ├── orders.response
    │   │       │   ├── orders.request
    │   │       │   └── config.json
    │   │       ├── 009-page-params-offset-job/
    │   │       │   ├── orders.requestHeaders
    │   │       │   ├── orders.response
    │   │       │   ├── orders.request
    │   │       │   └── config.json
    │   │       ├── __init__.py
    │   │       ├── 006-login-auth-headers/
    │   │       │   ├── users.requestHeaders
    │   │       │   ├── login.response
    │   │       │   ├── users.request
    │   │       │   ├── users.response
    │   │       │   ├── config.json
    │   │       │   ├── login.requestHeaders
    │   │       │   └── login.request
    │   │       ├── 004-nested/
    │   │       │   ├── user3.request
    │   │       │   ├── users.requestHeaders
    │   │       │   ├── user4.requestHeaders
    │   │       │   ├── user2.response
    │   │       │   ├── user4.response
    │   │       │   ├── user1.requestHeaders
    │   │       │   ├── users.request
    │   │       │   ├── user3.response
    │   │       │   ├── users.response
    │   │       │   ├── config.json
    │   │       │   ├── user2.requestHeaders
    │   │       │   ├── user4.request
    │   │       │   ├── user2.request
    │   │       │   ├── user1.response
    │   │       │   ├── user1.request
    │   │       │   └── user3.requestHeaders
    │   │       └── 007-page-params-pagenum/
    │   │           ├── orders.requestHeaders
    │   │           ├── orders.response
    │   │           ├── orders.request
    │   │           └── config.json
    │   ├── requirements.txt
    │   ├── Dockerfile
    │   └── README.md
    ├── .dockerignore
    ├── Dockerfile
    └── README.md

================================================
File: /docker/php.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1


================================================
File: /docker/jsontest/JsonTests.pl
================================================
#!/usr/bin/env perl

#
# Copyright 2015 Ryan Whitworth (rwhitworth)
# Distributed under the MIT License.
# See LICENSE or http://opensource.org/licenses/MIT
#

use Mojolicious::Lite;
use Digest::MD5;
use Bytes::Random::Secure qw( random_string_from );

@ARGV = qw(daemon --listen http://*:80);

get '/' => sub {
  my $c = shift;
  $c->render(template => 'index');
};

get '/ip' => sub {
  my $c = shift;
  $c->res->headers->header("Content-Type" => 'application/json');
  $c->res->headers->header("Access-Control-Allow-Origin" => '*');
  $c->render(text => '{"ip": "' . $c->tx->remote_address . '"}');
};

get '/headers' => sub {
  my $c = shift;
  my $text = "{\n";
  foreach my $x (keys %{$c->tx->req->headers->{headers}})
  {
    if (length($text) > 2) { $text .= ",\n"; }
    $text .= '"' . $x . '": "' . ${$c->tx->req->content->headers}{headers}{$x}[0] . '"';
  }
  $text .= "\n}";
  $c->res->headers->header("Content-Type" => 'application/json');
  $c->res->headers->header("Access-Control-Allow-Origin" => '*');
  $c->render(text => $text);
};

get '/date' => sub {
  my $c = shift;
  my $text = "{\n";
  my $time_t = time;
  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($time_t);
  $year += 1900;
  my $timestr = sprintf("%02d:%02d:%02d ", $hour, $min, $sec);
  if ($hour >= 13) { $timestr .= "PM"; }
  else { $timestr .= "AM"; }
  my $datestr = sprintf("%02d-%02d-%04d", $mon, $mday, $year);

  $text .= '"time": "' . $timestr . '",' . "\n";
  $text .= '"milliseconds_since_epoch": "' . ($time_t * 1000) . '",' . "\n";
  $text .= '"date": "' . $datestr . '"';
  $text .= "\n}";
  $c->res->headers->header("Content-Type" => 'application/json');
  $c->res->headers->header("Access-Control-Allow-Origin" => '*');
  $c->render(text => $text);
};

get '/random' => sub {
  my $c = shift;
  my $text = "{\"data\": \"";
  $text .= random_string_from(
      join( '', ( 'a' .. 'z' ), ( 'A' .. 'Z' ), ( '0' .. '9' ) ),
      10000
  );
  $text .= "\"\n}";
  $c->render(text => $text);
};

get '/http-code-503' => sub {
  my $c = shift;
  $c->render(text => 'server error', status => '503');
};

get '/echo' => sub {
  my $c = shift;
  $c->render(text => 'not defined');
};

get '/validate' => sub {
  my $c = shift;
  $c->render(text => 'not defined');
};

get '/cookie' => sub {
  my $c = shift;
  my $time_t = time * 1000;
  $c->cookie(time => $time_t);
  $c->res->headers->header("Content-Type" => 'application/json');
  $c->res->headers->header("Access-Control-Allow-Origin" => '*');
  $c->render(text => '{"time": "' . $time_t . '"}');
};

app->secrets(['passphrase1']);
app->start;

__DATA__

@@ index.html.ep
% layout 'default';
% title 'Welcome';
<h1>Welcome to the Mojolicious real-time web framework!</h1>
To learn more, you can browse through the documentation
<%= link_to 'here' => '/perldoc' %>.

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body><%= content %></body>
</html>

@@ not_found.html.ep
<!DOCTYPE html>
<html>
  <head><title>Page not found</title></head>
  <body>Page not found <%= $status %></body>
</html>


================================================
File: /docker/jsontest/Dockerfile
================================================
FROM perl:5

# Install deps
RUN curl -L http://cpanmin.us | perl - App::cpanminus && \
    cpanm Mojolicious && \
    cpanm Bytes::Random::Secure

COPY ./JsonTests.pl /src/JsonTests.pl
WORKDIR /src

EXPOSE 80

CMD ["perl", "JsonTests.pl", "prefork"]


================================================
File: /docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT


================================================
File: /apiary.apib
================================================
FORMAT: 1A

# ExtractorMock

Polls is a simple API allowing consumers to view polls and vote in them.

# Group API

## Get [/get]

### GET data [GET]
+ Response 201 (application/json)

        [
            {
                "id": "321",
                "status": "get"
            },
            {
                "id": "girlfriend",
                "status": "imaginary"
            }
        ]
        
## Post [/post]

### POST data [POST]
+ Request (application/json)
            
    + Body
    
            {
                "parameter": "value"
            }

+ Response 201 (application/json)

        [
            {
                "id": "123",
                "status": "post"
            },
            {
                "id": "potato",
                "status": "mashed"
            }
        ]
        
## Scroll - response URL [/scroll]

### First page [GET]
+ Response 201 (application/json)

        {
            "data": [
                {
                    "id": "1.0",
                    "status": "first"
                },
                {
                    "id": "1.1",
                    "status": "page"
                }
            ],
            "next": "/scroll/next"
        }
        

### Next page [GET /scroll/next]
+ Response 201 (application/json)

        {
            "data": [
                {
                    "id": "2.0",
                    "status": "next"
                },
                {
                    "id": "2.1",
                    "status": "page"
                }
            ],
            "next": "/scroll/last"
        }
        
### Last page [GET /scroll/last]
+ Response 201 (application/json)

        {
            "data": [
                {
                    "id": "3.0",
                    "status": "last"
                },
                {
                    "id": "3.1",
                    "status": "page"
                }
            ],
            "next": ""
        }
        

## Basic Auth [/basic]
User/Pw = test:test

### GET data [GET]

+ Request

    + Headers

            Authorization: Basic dGVzdDp0ZXN0

+ Response 201 (application/json)

        [
            {
                "id": "1",
                "status": "basic"
            }
        ]
        
## Default options [/defaultOptions{?param}]

### GET data [GET]

+ Parameters
    
    + param (string, required) - Default test value
        + Default: `value`

+ Response 200 (application/json)

        []

## Default bucket [/defaultBucket]

### GET [GET]

+ Response 200

        [{
            "key": "value"
        }]
        



================================================
File: /LICENSE
================================================
MIT License

Copyright (c) Keboola :(){:|:&};: s.r.o.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: /phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>


================================================
File: /docker-compose.yml
================================================
version: '3'
services:
  app: &app
    build: .
    image: keboola/generic-extractor

  ci: &ci
    << : *app
    command: composer ci
    depends_on:
      - jsontest
      - toxiproxy
      - ssh-proxy

  dev:
    << : *ci
    command: bash
    volumes:
      - ./:/code
      - ./data:/data

  jsontest:
      build: ./docker/jsontest
      image: keboola/jsontest

  toxiproxy:
    image: shopify/toxiproxy
    depends_on:
      - ssh-proxy

  ssh-proxy:
    build:
      context: .
      dockerfile: Dockerfile-ssh-proxy
    links:
      - jsontest:jsontest-behind-proxy



================================================
File: /src/Logger/LoggerMiddleware.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Logger;

use GuzzleHttp\MessageFormatter;
use GuzzleHttp\Middleware;
use Psr\Http\Message\RequestInterface;
use Psr\Log\LoggerInterface;

class LoggerMiddleware
{
    public static function create(LoggerInterface $logger): callable
    {
        // GET /defaultOptions?param=value HTTP/1.1 User-Agent: GuzzleHttp/7 Host: ...
        $template = '{req_headers}';
        $formatter = new MessageFormatter($template);

        // Log request
        return Middleware::tap(function (RequestInterface $request) use ($logger, $formatter): void {
            $logger->debug($formatter->format($request));
        });
    }
}


================================================
File: /src/GenericExtractor.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor;

use Keboola\GenericExtractor\AwsSignature\AwsSignatureMiddleware;
use Keboola\GenericExtractor\Configuration\Api;
use Keboola\GenericExtractor\Configuration\JuicerRest;
use Keboola\GenericExtractor\Configuration\UserFunction;
use Keboola\GenericExtractor\Logger\LoggerMiddleware;
use Keboola\Juicer\Config\JobConfig;
use Keboola\Juicer\Config\Config;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Parser\Json;
use Keboola\Juicer\Parser\JsonMap;
use Keboola\Juicer\Parser\ParserInterface;
use Keboola\Temp\Temp;
use Kevinrob\GuzzleCache\CacheMiddleware;
use Kevinrob\GuzzleCache\Strategy\CacheStrategyInterface;
use Psr\Log\LoggerInterface;
use stdClass;

class GenericExtractor
{
    public const COMPAT_LEVEL_OLD_PARSER = 1;
    public const COMPAT_LEVEL_FILTER_EMPTY_SCALAR = 2;
    public const COMPAT_LEVEL_LATEST = 3;

    protected ?ParserInterface $parser = null;

    protected ?CacheStrategyInterface $cacheStrategy = null;

    protected Temp $temp;

    protected array $metadata = [];

    protected LoggerInterface $logger;

    private Api $api;

    private ?string $proxy;

    /** @var callable|null */
    private $clientInitCallback;

    public function __construct(
        Temp $temp,
        LoggerInterface $logger,
        Api $api,
        ?string $proxy = null,
        ?callable $clientInitCallback = null,
        ?array $awsSignatureCredentials = null
    ) {
        $this->temp = $temp;
        $this->logger = $logger;
        $this->api = $api;
        $this->proxy = $proxy;
        $this->clientInitCallback = $clientInitCallback;
        $this->awsSignatureCredentials = $awsSignatureCredentials;
    }

    public function enableCache(CacheStrategyInterface $cacheStrategy): self
    {
        $this->cacheStrategy = $cacheStrategy;
        return $this;
    }

    public function run(Config $config): void
    {
        $client = $this->createClient($config);
        $this->initParser($config);
        foreach ($config->getJobs() as $jobConfig) {
            $this->runJob($jobConfig, $client, $config);
        }

        if ($this->parser instanceof Json) {
            // FIXME fallback from JsonMap
            $this->metadata = array_replace_recursive($this->metadata, $this->parser->getMetadata());
        }
    }

    protected function createClient(Config $config): RestClient
    {
        $headers = UserFunction::build(
            $this->api->getHeaders()->getHeaders(),
            ['attr' => $config->getAttributes()]
        );

        Utils::checkHeadersForStdClass($headers);

        $defaults = [
            'headers' => $headers,
            'proxy' => $this->proxy,
            // http://docs.guzzlephp.org/en/stable/request-options.html#verify-option
            'verify' => $this->api->hasCaCertificate() ? $this->api->getCaCertificateFile() : true,
            // timeouts
            'connect_timeout' => $this->api->getConnectTimeout(),
            'timeout' => $this->api->getRequestTimeout(),
        ];

        if ($this->api->hasClientCertificate()) {
            $defaults['cert'] = $this->api->getClientCertificateFile();
        }

        $client = new RestClient(
            $this->logger,
            $this->api->getBaseUrl(),
            $defaults,
            JuicerRest::convertRetry($this->api->getRetryConfig()),
            $this->api->getDefaultRequestOptions(),
            $this->api->getIgnoreErrors()
        );

        // Attach auth middleware
        $this->api->getAuth()->attachToClient($client);

        // Verbose Logging of all requests
        $client->getHandlerStack()->push(LoggerMiddleware::create($this->logger), 'logger');

        // Cache
        if ($this->cacheStrategy) {
            $client->getHandlerStack()->push(new CacheMiddleware($this->cacheStrategy), 'cache');
        }

        // AWS Signature request
        if ($this->awsSignatureCredentials) {
            $client->getHandlerStack()->push(
                AwsSignatureMiddleware::create($this->awsSignatureCredentials),
                'aws-signature'
            );
        }

        // Custom client init callback
        if ($this->clientInitCallback) {
            ($this->clientInitCallback)($client);
        }

        return $client;
    }

    protected function runJob(JobConfig $jobConfig, RestClient $client, Config $config): void
    {
        if (!$this->parser) {
            throw new \UnexpectedValueException('Parser is not set.');
        }

        $job = new GenericExtractorJob(
            $jobConfig,
            $client,
            $this->parser,
            $this->logger,
            $this->api->getNewScroller(),
            $config->getAttributes(),
            $this->metadata,
            $this->getCompatLevel($config)
        );
        if (!empty($config->getAttribute('userData'))) {
            $job->setUserParentId(
                is_scalar($config->getAttribute('userData'))
                ? ['userData' => $config->getAttribute('userData')]
                : $config->getAttribute('userData')
            );
        }

        $job->run();
    }

    public function setParser(ParserInterface $parser): void
    {
        $this->parser = $parser;
    }

    public function getParser(): ParserInterface
    {
        if (!$this->parser) {
            throw new \LogicException('Parser is not set.');
        }

        return $this->parser;
    }

    private function getCompatLevel(Config $config): int
    {
        if (empty($config->getAttribute('compatLevel'))) {
            return self::COMPAT_LEVEL_LATEST;
        }
        return (int) $config->getAttribute('compatLevel');
    }

    protected function initParser(Config $config): ParserInterface
    {
        if (!empty($this->parser) && $this->parser instanceof ParserInterface) {
            return $this->parser;
        }

        if ($this->getCompatLevel($config) <= self::COMPAT_LEVEL_OLD_PARSER) {
            $compatLevel = Json::LEGACY_VERSION;
        } else {
            $compatLevel = Json::LATEST_VERSION;
        }
        $parser = new Json($this->logger, $this->metadata, $compatLevel, 2000000);

        if (empty($config->getAttribute('mappings'))) {
            $this->parser = $parser;
        } else {
            $this->parser = new JsonMap($config, $this->logger, $parser);
        }

        return $this->parser;
    }

    public function setMetadata(array $data): void
    {
        $this->metadata = $data;
    }

    public function getMetadata(): array
    {
        return $this->metadata;
    }
}


================================================
File: /src/GenericExtractorJob.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor;

use Keboola\Filter\Exception\FilterException;
use Keboola\Filter\FilterFactory;
use Keboola\GenericExtractor\Configuration\UserFunction;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\GenericExtractor\Response\Filter;
use Keboola\GenericExtractor\Response\FindResponseArray;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Client\RestRequest;
use Keboola\Juicer\Config\JobConfig;
use Keboola\Juicer\Pagination\ScrollerInterface;
use Keboola\Juicer\Pagination\NoScroller;
use Keboola\Juicer\Parser\ParserInterface;
use Psr\Log\LoggerInterface;

/**
 * A generic Job class generally used to set up each API call, handle its pagination and
 * parsing into a CSV ready for Storage upload.
 * Adds a capability to process recursive calls based on
 * responses. If an endpoint contains {} enclosed
 * parameter, it'll be replaced by a value from a parent call
 * based on the values from its response and "mapping" set in
 * child's "placeholders" object
 */
class GenericExtractorJob
{
    private JobConfig $config;

    private RestClient $client;

    private ParserInterface $parser;

    private ScrollerInterface $scroller;

    private string $jobId;

    private LoggerInterface $logger;

    private array $attributes = [];

    private array $metadata = [];

    private ?string $lastResponseHash = null;

    /**
     * Data to append to the root result
     */
    private ?array $userParentId = null;

    /**
     * Used to save necessary parents' data to child's output
     */
    private array $parentParams;

    private array $parentResults;

    /**
     * Compatibility level
     */
    private int $compatLevel;

    /**
     * @param RestClient      $client      A client used to communicate with the API (wrapper for Guzzle)
     * @param ParserInterface $parser      A parser to handle the result and convert it into CSV file(s)
     * @param int             $compatLevel Compatibility level, @see GenericExtractor
     */
    public function __construct(
        JobConfig $config,
        RestClient $client,
        ParserInterface $parser,
        LoggerInterface $logger,
        ScrollerInterface $scroller,
        array $attributes,
        array $metadata,
        int $compatLevel,
        array $parentResults = [],
        array $parentParams = []
    ) {
        $this->logger = $logger;
        $this->config = $config;
        $this->client = $client;
        $this->parser = $parser;
        $this->scroller = $scroller;
        $this->jobId = $config->getJobId();
        $this->attributes = $attributes;
        $this->metadata = $metadata;
        $this->compatLevel = $compatLevel;
        $this->parentResults = $parentResults;
        $this->parentParams = $parentParams;

        // Replace parent params in endpoint
        foreach ($this->parentParams as $params) {
            $this->config->setEndpoint(str_replace(
                "{{$params['placeholder']}}",
                $params['value'],
                $this->config->getConfig()['endpoint']
            ));
        }
    }

    /**
     * Manages cycling through the requests as long as
     * scroller provides next page
     *
     * Verifies the latest response isn't identical as the last one
     * to prevent infinite loop on awkward pagination APIs
     */
    public function run(): void
    {
        $this->config->setParams($this->buildParams($this->config));

        $parentId = $this->getParentId();

        $request = $this->firstPage($this->config);
        while ($request !== null) {
            $response = $this->download($request);

            $responseHash = sha1(serialize($response));
            if ($responseHash === $this->lastResponseHash) {
                $this->logger->debug(
                    sprintf(
                        "Job '%s' finished when last response matched the previous!",
                        $this->getJobId()
                    )
                );
                $this->scroller->reset();
                break;
            } else {
                $data = $this->runResponseModules($response, $this->config);
                $data = $this->filterResponse($this->config, $data);
                $this->parse($data, $parentId);

                $this->lastResponseHash = $responseHash;
            }

            $request = $this->nextPage($this->config, $response, $data);
        }
    }

    private function runChildJobs(array $data): void
    {
        foreach ($this->config->getChildJobs() as $child) {
            $filter = null;
            if (!empty($child->getConfig()['recursionFilter'])) {
                try {
                    $filter = FilterFactory::create($child->getConfig()['recursionFilter']);
                } catch (FilterException $e) {
                    throw new UserException($e->getMessage(), 0, $e);
                }
            }

            foreach ($data as $result) {
                if (!empty($filter) && ($filter->compareObject((object) $result) === false)) {
                    continue;
                }

                // Add current result to the beginning of an array, containing all parent results
                $parentResults = $this->parentResults;
                array_unshift($parentResults, $result);

                $childJobs = $this->createChild($child, $parentResults);
                foreach ($childJobs as $childJob) {
                    $childJob->run();
                }
            }
        }
    }

    /**
     * Create a child job with current client and parser
     *
     * @return static[]
     */
    private function createChild(JobConfig $config, array $parentResults): array
    {
        // Clone and reset Scroller
        $scroller = clone $this->scroller;
        $scroller->reset();

        // Process placeholders
        $placeholders = !empty($config->getConfig()['placeholders']) ? $config->getConfig()['placeholders'] : [];
        if (empty($placeholders)) {
            $this->logger->warning("No 'placeholders' set for '" . $config->getConfig()['endpoint'] . "'");
        }

        $paramsForChildJobs = PlaceholdersUtils::getParamsForChildJobs(
            $placeholders,
            $parentResults,
            $this->parentParams
        );

        $jobs = [];
        foreach ($paramsForChildJobs as $params) {
            // Clone the config to prevent overwriting the placeholder(s) in endpoint
            $job = new self(
                clone $config,
                $this->client,
                $this->parser,
                $this->logger,
                $scroller,
                $this->attributes,
                $this->metadata,
                $this->compatLevel,
                $parentResults,
                $params,
            );
            $jobs[] = $job;
        }

        /** @var static[] $jobs */
        return $jobs;
    }

    /**
     *  Download an URL from REST or SOAP API and return its body as an object.
     * should handle the API call, backoff and response decoding
     *
     * @return mixed Raw response as it comes from the client
     */
    private function download(RestRequest $request)
    {
        return $this->client->download($request);
    }


    /**
     * Create subsequent requests for pagination (usually based on $response from previous request)
     * Return a download request OR false if no next page exists
     *
     * @param  mixed $response
     * @return RestRequest|false
     */
    private function nextPage(JobConfig $config, $response, array $data)
    {
        return $this->getScroller()->getNextRequest($this->client, $config, $response, $data);
    }

    /**
     * Create the first download request.
     * Return a download request
     *
     * @return RestRequest|bool
     */
    private function firstPage(JobConfig $config)
    {
        return $this->getScroller()->getFirstRequest($this->client, $config);
    }

    /**
     * Parse the result into a CSV (either using any of built-in parsers, or using own methods).
     *
     * Create subsequent jobs for recursive endpoints. Uses "children" section of the job config
     *
     * @param  array $parentId ID (or list thereof) to be passed to parser
     * @return array
     */
    private function parse(array $data, ?array $parentId = null): array
    {
        $this->parser->process($data, $this->config->getDataType(), $this->getParentCols($parentId));
        $this->runChildJobs($data);
        return $data;
    }

    private function getScroller(): ScrollerInterface
    {
        if (empty($this->scroller)) {
            $this->scroller = new NoScroller;
        }

        return $this->scroller;
    }

    private function getParentId(): ?array
    {
        if (!empty($this->config->getConfig()['userData'])) {
            if (!is_array($this->config->getConfig()['userData'])) {
                $jobUserData = ['job_parent_id' => $this->config->getConfig()['userData']];
            } else {
                $jobUserData = $this->config->getConfig()['userData'];
            }
        } else {
            $jobUserData = [];
        }

        if (!empty($this->userParentId)) {
            $jobUserData = array_merge($this->userParentId, $jobUserData);
        }

        if (empty($jobUserData)) {
            return null;
        }

        return UserFunction::build(
            $jobUserData,
            [
                'attr' => $this->attributes,
                'time' => !empty($this->metadata['time']) ? $this->metadata['time'] : [],
            ]
        );
    }

    private function getParentCols(?array $parentIdCols = null): array
    {
        // Add parent values to the result
        $parentCols = is_null($parentIdCols) ? [] : $parentIdCols;
        foreach ($this->parentParams as $v) {
            $key = $this->prependParent($v['field']);
            $parentCols[$key] = $v['value'];
        }
        return $parentCols;
    }

    private function buildParams(JobConfig $config): array
    {
        return UserFunction::build(
            $config->getParams(),
            [
                'attr' => $this->attributes,
                'time' => !empty($this->metadata['time']) ? $this->metadata['time'] : [],
            ]
        );
    }

    /**
     * Filters the $data array according to
     * $config->getConfig()['responseFilter'] and
     * returns the filtered array
     */
    private function filterResponse(JobConfig $config, array $data): array
    {
        $filter = new Filter($config, $this->compatLevel);
        return $filter->run($data);
    }

    /**
     * @param array|object $response
     */
    private function runResponseModules($response, JobConfig $jobConfig): array
    {
        $responseModule = new FindResponseArray($this->logger);
        return $responseModule->process($response, $jobConfig);
    }


    private function prependParent(string $string): string
    {
        return (substr($string, 0, 7) === 'parent_') ? $string : "parent_{$string}";
    }

    /**
     * @param mixed $id
     */
    public function setUserParentId($id): void
    {
        if (!is_array($id)) {
            throw new UserException(
                'User defined parent ID must be a key:value pair, or multiple such pairs.',
                0,
                null,
                ['id' => $id]
            );
        }

        $this->userParentId = $id;
    }

    public function getJobId(): string
    {
        return $this->jobId;
    }
}


================================================
File: /src/AwsSignature/AwsSignatureMiddleware.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\AwsSignature;

use Aws\Credentials\Credentials;
use Aws\Signature\SignatureV4;
use Psr\Http\Message\RequestInterface;

class AwsSignatureMiddleware
{
    public static function create(array $awsSignatureCredentials): callable
    {

        // Signature request
        return function (callable $handler) use ($awsSignatureCredentials) {
            return function (RequestInterface $request, array $options) use ($handler, $awsSignatureCredentials) {
                $awsCredentials = new Credentials(
                    $awsSignatureCredentials['accessKeyId'],
                    $awsSignatureCredentials['#secretKey']
                );

                $signatureV4 = new SignatureV4(
                    $awsSignatureCredentials['serviceName'],
                    $awsSignatureCredentials['regionName']
                );

                return $handler(
                    $signatureV4->signRequest($request, $awsCredentials),
                    $options
                );
            };
        };
    }
}


================================================
File: /src/Authentication/Query.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Authentication;

use GuzzleHttp\Middleware;
use Keboola\GenericExtractor\Configuration\UserFunction;
use Keboola\GenericExtractor\Context\QueryAuthContext;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\GenericExtractor\Utils;
use Keboola\Juicer\Client\RestClient;
use Psr\Http\Message\RequestInterface;
use function Keboola\Utils\arrayToObject;

/**
 * Authentication method using query parameters
 */
class Query implements AuthInterface
{
    protected array $query;

    protected array $configAttributes;

    public function __construct(array $configAttributes, array $authentication)
    {
        if (empty($authentication['query'])) {
            throw new UserException(
                "The query authentication method requires 'query' configuration in 'authentication' section."
            );
        }
        $this->query = $authentication['query'];
        $this->configAttributes = $configAttributes;
    }

    public function attachToClient(RestClient $client): void
    {
        $client->getHandlerStack()->push(Middleware::mapRequest(
            function (RequestInterface $request): RequestInterface {
                $context = QueryAuthContext::create($request, $this->configAttributes);
                $authQuery = UserFunction::build((array) arrayToObject($this->query), $context);

                // Append auth query
                $uri = $request->getUri();
                return $request->withUri($uri->withQuery(
                    Utils::mergeQueries($uri->getQuery(), $authQuery)
                ));
            }
        ));
    }
}


================================================
File: /src/Authentication/NoAuth.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Authentication;

use Keboola\Juicer\Client\RestClient;

class NoAuth implements AuthInterface
{
    public function attachToClient(RestClient $client): void
    {
    }
}


================================================
File: /src/Authentication/OAuth20Login.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Authentication;

use Keboola\GenericExtractor\Configuration\UserFunction;
use Keboola\GenericExtractor\Context\OAuth20LoginContext;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\Juicer\Client\RestRequest;
use Keboola\Utils\Exception\JsonDecodeException;
use function Keboola\Utils\jsonDecode;

/**
 * Config:
 *
 * loginRequest:
 *    endpoint: string
 *    params: array (optional)
 *    method: GET|POST|FORM (optional)
 *    headers: array (optional)
 * apiRequest:
 *    headers: array # [$headerName => $responsePath]
 *    query: array # same as with headers
 * expires: int|array # # of seconds OR ['response' => 'path', 'relative' => false] (optional)
 *
 * The response MUST be a JSON object containing credentials
 */
class OAuth20Login extends Login
{
    protected array $params;

    protected array $auth;

    private string $key;

    private string $secret;

    private array $data;

    public function __construct(array $configAttributes, array $authorization, array $authentication)
    {
        parent::__construct($configAttributes, $authentication);
        if (empty($authorization['oauth_api']['credentials'])) {
            throw new UserException('OAuth API credentials not supplied in config');
        }

        $credentials = $authorization['oauth_api']['credentials'];
        foreach (['#data', 'appKey', '#appSecret'] as $key) {
            if (empty($credentials[$key])) {
                throw new UserException("Missing '{$key}' for OAuth 2.0 authorization");
            }
        }
        $this->key = (string) $credentials['appKey'];
        $this->secret = (string) $credentials['#appSecret'];

        try {
            $this->data = jsonDecode($credentials['#data'], true);
        } catch (JsonDecodeException $e) {
            throw new UserException('The OAuth data is not a valid JSON');
        }
    }

    protected function getLoginRequest(array $config): RestRequest
    {
        $fnContext = OAuth20LoginContext::create($this->key, $this->secret, $this->data, $this->configAttributes);

        if (!empty($config['params'])) {
            $config['params'] = UserFunction::build($config['params'], $fnContext);
        }
        if (!empty($config['headers'])) {
            $config['headers'] = UserFunction::build($config['headers'], $fnContext);
        }

        // Create login request without default request options
        return $this->client->createRequest($config, false);
    }
}


================================================
File: /src/Authentication/Basic.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Authentication;

use GuzzleHttp\Middleware;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\Juicer\Client\RestClient;
use Psr\Http\Message\RequestInterface;

/**
 * Basic HTTP Authentication using name and password
 */
class Basic implements AuthInterface
{
    protected string $username;

    protected string $password;

    public function __construct(array $config)
    {
        if (empty($config['username']) && empty($config['#username'])) {
            throw new UserException("Missing the required '#username' (or 'username') attribute in config.");
        }
        if (empty($config['password']) && empty($config['#password'])) {
            throw new UserException("Missing the required '#password' attribute in config.");
        }

        $this->username = empty($config['username']) ? $config['#username'] : $config['username'];
        $this->password = empty($config['password']) ? $config['#password'] : $config['password'];
    }

    /**
     * @inheritdoc
     */
    public function attachToClient(RestClient $client): void
    {
        // Add Authorization header to each request
        $client->getHandlerStack()->push(Middleware::mapRequest(
            function (RequestInterface $request): RequestInterface {
                return $request->withHeader(
                    'Authorization',
                    'Basic ' . \base64_encode("$this->username:$this->password")
                );
            }
        ));
    }
}


================================================
File: /src/Authentication/Login.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Authentication;

use Keboola\GenericExtractor\Context\LoginAuthApiRequestContext;
use Keboola\GenericExtractor\Context\LoginAuthLoginRequestContext;
use Keboola\GenericExtractor\Utils;
use Keboola\Utils\Exception\NoDataFoundException;
use LogicException;
use GuzzleHttp\Middleware;
use Keboola\GenericExtractor\Configuration\UserFunction;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Client\RestRequest;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use function Keboola\Utils\getDataFromPath;

/**
 * Config:
 *
 * loginRequest:
 *    endpoint: string
 *    params: array (optional)
 *    method: GET|POST|FORM (optional)
 *    headers: array (optional)
 * apiRequest:
 *    headers: array # [$headerName => $responsePath]
 *    query: array # same as with headers
 * expires: int|array # # of seconds OR ['response' => 'path', 'relative' => false] (optional)
 *
 * The response MUST be a JSON (object or scalar) containing credentials or text. See "format".
 */
class Login implements AuthInterface
{
    protected array $configAttributes;

    protected RestClient $client;

    private array $authentication;

    private ?string $format = null;

    private bool $enabled = true;

    private bool $loggedIn = false;

    private array $signatureHeaders;

    private array $signatureQuery;

    private ?int $expiration;

    public function __construct(array $configAttributes, array $authentication)
    {
        $this->configAttributes = $configAttributes;
        $this->authentication = $authentication;
        if (empty($authentication['format'])) {
            $this->format = 'json';
        } else {
            if (in_array($authentication['format'], ['json', 'text'])) {
                $this->format = $authentication['format'];
            } else {
                throw new UserException("'format' must be either 'json' or 'text'.");
            }
        }
        if (empty($authentication['loginRequest'])) {
            throw new UserException("'loginRequest' is not configured for Login authentication");
        }
        if (empty($authentication['loginRequest']['endpoint'])) {
            throw new UserException('Request endpoint must be set for the Login authentication method.');
        }
        if (!empty($authentication['expires']) && (!filter_var($authentication['expires'], FILTER_VALIDATE_INT)
                && empty($authentication['expires']['response']))
        ) {
            throw new UserException(
                "The 'expires' attribute must be either an integer or an array with 'response' " .
                'key containing a path in the response'
            );
        }
    }

    public function attachToClient(RestClient $client): void
    {
        $this->client = $client;
        $this->client->getHandlerStack()->push(Middleware::mapRequest(
            function (RequestInterface $request): RequestInterface {
                // Skip this middleware for the log in request
                if (!$this->isEnabled()) {
                    return $request;
                }

                // Log in if not logged in
                if (!$this->isLoggedIn()) {
                    $this->logIn();
                }

                // Modify request
                return $this->addSignature($request);
            }
        ));
    }

    private function addSignature(RequestInterface $request): RequestInterface
    {
        // Add query params
        $uri = $request->getUri();
        // For historical reasons, we HERE merge same keys into the array.
        // TODO: Make a flag to configure queries merging.
        $request = $request->withUri($uri->withQuery(
            Utils::mergeQueries($uri->getQuery(), $this->signatureQuery, true)
        ));

        // Add headers
        $request = Utils::mergeHeaders($request, $this->signatureHeaders);

        return $request;
    }

    public function isEnabled(): bool
    {
        return $this->enabled;
    }

    public function isLoggedIn(): bool
    {
        // Login request not sent yet
        if (!$this->loggedIn) {
            return false;
        }

        // Login expired
        if ($this->expiration && time() > $this->expiration) {
            return false;
        }

        return true;
    }

    public function getExpiration(): ?int
    {
        return $this->expiration;
    }

    public function logIn(): void
    {
        // Disabled middleware for login request
        $this->enabled = false;
        $rawResponse = $this->runRequest();
        $loginResponse = $this->getObjectFromResponse($rawResponse);
        $this->processResponse($loginResponse);
        $this->enabled = true;
        $this->loggedIn= true;
    }

    protected function getLoginRequest(array $config): RestRequest
    {
        $fnContext = LoginAuthLoginRequestContext::create($this->configAttributes);
        if (!empty($config['params'])) {
            $config['params'] = UserFunction::build($config['params'], $fnContext);
        }
        if (!empty($config['headers'])) {
            $config['headers'] = UserFunction::build($config['headers'], $fnContext);
            Utils::checkHeadersForStdClass($config['headers']);
        }

        // Create login request without default request options
        return $this->client->createRequest($config, false);
    }

    private function processResponse(\stdClass $loginResponse): void
    {
        $this->signatureQuery = $this->buildApiRequestFunctions(
            $this->authentication['apiRequest']['query'] ?? [],
            $loginResponse,
        );
        $this->signatureHeaders = $this->buildApiRequestFunctions(
            $this->authentication['apiRequest']['headers'] ?? [],
            $loginResponse,
        );
        $this->expiration = $this->getExpirationFromResponse($loginResponse);
    }

    private function runRequest(): ResponseInterface
    {
        $restRequest = $this->getLoginRequest($this->authentication['loginRequest']);
        $guzzleRequest = $this->client->getGuzzleRequestFactory()->create($restRequest);
        return $this->client->getClient()->send($guzzleRequest);
    }

    private function getObjectFromResponse(ResponseInterface $rawResponse): \stdClass
    {
        if ($this->format === 'text') {
            return (object) ['data' => (string) $rawResponse->getBody()];
        } elseif ($this->format === 'json') {
            $response = $this->client->getObjectFromResponse($rawResponse);

            if ($response instanceof \stdClass) {
                return $response;
            }

            if (is_scalar($response)) {
                return (object) ['data' => $response];
            }

            throw new UserException(sprintf(
                'The response to the login request should be an object or a scalar value, given "%s".',
                gettype($response),
            ));
        }

        throw new LogicException(sprintf('Unexpected format "%s".', $this->format));
    }

    /**
     * Gets expiration from the login response
     */
    private function getExpirationFromResponse(\stdClass $response): ?int
    {
        if (!isset($this->authentication['expires'])) {
            return null;
        } elseif (is_numeric($this->authentication['expires'])) {
            return time() + (int) $this->authentication['expires'];
        } elseif (is_array($this->authentication['expires'])) {
            $rExpiry = getDataFromPath($this->authentication['expires']['response'], $response, '.');
            if ($rExpiry === null) {
                return null;
            }
            $expiry = is_int($rExpiry) ? $rExpiry : strtotime($rExpiry);

            if (!empty($this->authentication['expires']['relative'])) {
                $expiry += time();
            }

            if ($expiry < time()) {
                throw new UserException("Login authentication returned expiry time before current time: '{$rExpiry}'");
            }

            return $expiry;
        }

        return null;
    }

    protected function buildApiRequestFunctions(array $functions, \stdClass $loginResponse): array
    {
        $result = UserFunction::build(
            $functions,
            LoginAuthApiRequestContext::create($loginResponse, $this->configAttributes)
        );

        // for backward compatibility, check the values if they are a valid path within the response
        foreach ($result as $key => $value) {
            try {
                $result[$key] = getDataFromPath($value, $loginResponse, '.', false);
            } catch (NoDataFoundException $e) {
                // silently ignore invalid paths as they are probably values already processed by functions
            }
        }

        return $result;
    }
}


================================================
File: /src/Authentication/OAuth10.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Authentication;

use GuzzleHttp\Middleware;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\Juicer\Client\RestClient;
use GuzzleHttp\Subscriber\Oauth\Oauth1;
use Keboola\Utils\Exception\JsonDecodeException;
use Psr\Http\Message\RequestInterface;
use function Keboola\Utils\jsonDecode;

/**
 * OAuth 1.0 implementation
 */
class OAuth10 implements AuthInterface
{
    protected string $token;

    protected string $tokenSecret;

    protected string $consumerKey;

    protected string $consumerSecret;

    public function __construct(array $authorization)
    {
        if (empty($authorization['oauth_api']['credentials'])) {
            throw new UserException('OAuth API credentials not supplied in configuration.');
        }

        $oauthApiDetails = $authorization['oauth_api']['credentials'];

        foreach (['#data', 'appKey', '#appSecret'] as $key) {
            if (empty($oauthApiDetails[$key])) {
                throw new UserException("Missing '{$key}' for OAuth 1.0 authorization.");
            }
        }

        // Decode data
        try {
            $data = jsonDecode($oauthApiDetails['#data']);
        } catch (JsonDecodeException $e) {
            throw new UserException('The OAuth #data is not a valid JSON.');
        }

        if (!$data instanceof \stdClass) {
            throw new UserException(sprintf(
                "Key 'oauth_api.credentials'.#data must be object, given '%s'.",
                gettype($data)
            ));
        }

        if (!isset($data->oauth_token)) {
            throw new UserException(
                "Missing 'oauth_api.credentials.#data.oauth_token' for OAuth 1.0 authorization."
            );
        }

        if (!isset($data->oauth_token_secret)) {
            throw new UserException(
                "Missing 'oauth_api.credentials.#data.oauth_token_secret' for OAuth 1.0 authorization."
            );
        }

        $this->token = $data->oauth_token;
        $this->tokenSecret = $data->oauth_token_secret;
        $this->consumerKey = $oauthApiDetails['appKey'];
        $this->consumerSecret = $oauthApiDetails['#appSecret'];
    }

    /**
     * @inheritdoc
     */
    public function attachToClient(RestClient $client): void
    {
        $middleware = new Oauth1([
            'consumer_key' => $this->consumerKey,
            'consumer_secret' => $this->consumerSecret,
            'token' => $this->token,
            'token_secret' => $this->tokenSecret,
        ]);

        // Before OAuth we need to set option "auth" = "oauth",
        // otherwise, OAuth middleware will not start (this is how it is implemented).
        $client->getHandlerStack()->push(static function (callable $handler): callable {
            return static function (RequestInterface $request, array $options) use ($handler) {
                $options['auth'] = 'oauth';
                return $handler($request, $options);
            };
        });

        // Add OAuth middleware
        $client->getHandlerStack()->push($middleware);
    }
}


================================================
File: /src/Authentication/OAuth20.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Authentication;

use GuzzleHttp\Middleware;
use Keboola\GenericExtractor\Configuration\UserFunction;
use Keboola\GenericExtractor\Context\OAuth20Context;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\GenericExtractor\Utils;
use Keboola\Juicer\Client\RestClient;
use Psr\Http\Message\RequestInterface;

/**
 * OAuth 2.0 Bearer implementation
 * https:// tools.ietf.org/html/rfc6750#section-2.1
 *
 * This class allows using the OAuth data in any way.
 *
 * Possible #data:
 *
 * ```
 * rawTokenString
 * ```
 * accessed by `authorization: data`
 *
 * ```
 * {
 *  'access_token': 'tokenString',
 *  'some': '...'
 * }
 * ```
 * accessed by `authorization: { data.access_token }` & `format: json`
 */
class OAuth20 implements AuthInterface
{
    /**
     * @var string|object
     */
    private $data;

    private string $clientId;

    private string $clientSecret;

    private array $headers;

    private array $query;

    public function __construct(array $authorization, array $authentication)
    {
        if (empty($authorization['oauth_api']['credentials'])) {
            throw new UserException('OAuth API credentials not supplied in configuration.');
        }

        $oauthApiDetails = $authorization['oauth_api']['credentials'];

        foreach (['#data', 'appKey', '#appSecret'] as $key) {
            if (empty($oauthApiDetails[$key])) {
                throw new UserException("Missing '{$key}' for OAuth 2.0 authorization.");
            }
        }

        if (empty($authentication['format'])) {
            $authentication['format'] = 'text';
        }

        switch ($authentication['format']) {
            case 'json':
                // authorization: { data: key }
                /** @var object $data */
                $data = \Keboola\Utils\jsonDecode((string) $oauthApiDetails['#data']);
                $this->data = $data;
                break;
            case 'text':
                // authorization: data
                $this->data = (string) $oauthApiDetails['#data'];
                break;
            default:
                throw new UserException("Unknown OAuth data format '{$authentication['format']}'.");
        }

        // authorization: clientId
        $this->clientId = (string) $oauthApiDetails['appKey'];
        // authorization: clientSecret
        $this->clientSecret = (string) $oauthApiDetails['#appSecret'];
        $this->headers = empty($authentication['headers']) ? [] : $authentication['headers'];
        $this->query = empty($authentication['query']) ? [] : $authentication['query'];
    }

    /**
     * @inheritdoc
     */
    public function attachToClient(RestClient $client): void
    {
        $client->getHandlerStack()->push(Middleware::mapRequest(
            function (RequestInterface $request): RequestInterface {
                // Create context
                $fnContext = OAuth20Context::create($request, $this->clientId, $this->data);

                // Add query params
                $uri = $request->getUri();
                $query = UserFunction::build($this->query, $fnContext);
                $request = $request->withUri($uri->withQuery(
                    Utils::mergeQueries($uri->getQuery(), $query)
                ));

                // Add headers
                $headers = UserFunction::build($this->headers, $fnContext);
                Utils::checkHeadersForStdClass($headers);
                $request = Utils::mergeHeaders($request, $headers);

                return $request;
            }
        ));
    }
}


================================================
File: /src/Authentication/AuthInterface.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Authentication;

use Keboola\Juicer\Client\RestClient;

interface AuthInterface
{
    public function attachToClient(RestClient $client): void;
}


================================================
File: /src/Response/FindResponseArray.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Response;

use Keboola\GenericExtractor\Exception\UserException;
use Keboola\Juicer\Config\JobConfig;
use Psr\Log\LoggerInterface;

class FindResponseArray
{
    private LoggerInterface $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    /**
     * Try to find the data array within $response.
     *
     * @param  array|object $response
     * @throws UserException
     */
    public function process($response, JobConfig $jobConfig): array
    {
        $config = $jobConfig->getConfig();
        $separator = '.';
        // If dataField doesn't say where the data is in a response, try to find it!
        if (!empty($config['dataField'])) {
            if (is_array($config['dataField'])) {
                if (empty($config['dataField']['path'])) {
                    throw new UserException("'dataField.path' must be set!");
                }

                $path = $config['dataField']['path'];
                if (!empty($config['dataField']['delimiter'])) {
                    $separator = $config['dataField']['delimiter'];
                }
            } elseif (is_scalar($config['dataField'])) {
                $path = $config['dataField'];
            } else {
                throw new UserException("'dataField' must be either a path string or an object with 'path' attribute.");
            }

            $data = \Keboola\Utils\getDataFromPath($path, $response, $separator);
            if (empty($data)) {
                $this->logger->warning("dataField '{$path}' contains no data!");
                $data = [];
            } elseif (!is_array($data)) {
                // In case of a single object being returned
                $data = [$data];
            }
        } elseif (is_array($response)) {
            // Simplest case, the response is just the dataset
            $data = $response;
        } elseif (is_object($response)) {
            // Find arrays in the response
            $arrays = [];
            foreach (get_object_vars($response) as $key => $value) {
                if (is_array($value)) {
                    $arrays[$key] = $value;
                } // TODO else {$this->metadata[$key] = json_encode($value);} ? return [$data,$metadata];
            }

            $arrayNames = array_keys($arrays);
            if (count($arrays) === 1) {
                $data = $arrays[$arrayNames[0]];
            } elseif (count($arrays) === 0) {
                $this->logger->warning(
                    "No data array found in response! (endpoint: {$config['endpoint']})",
                    [
                    'response' => json_encode($response),
                    ]
                );
                $data = [];
            } else {
                throw new UserException(
                    "More than one array found in response! Use 'dataField' parameter to specify a key to the data " .
                    'array. (endpoint: ' . $config['endpoint'] . ', arrays in response root: ' .
                    implode(', ', $arrayNames) . ')',
                    0,
                    null,
                    [
                        'response' => json_encode($response),
                        'arrays found' => $arrayNames,
                    ]
                );
            }
        } else {
            throw new UserException('Unknown response from API.', 0, null, ['response' => json_encode($response)]);
        }

        return $data;
    }
}


================================================
File: /src/Response/Filter.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Response;

use Keboola\GenericExtractor\Exception\UserException;
use Keboola\GenericExtractor\GenericExtractor;
use Keboola\Juicer\Config\JobConfig;

/**
 * Processes data and converts them to scalar values by
 * JSON encoding it.
 *
 * To process an entire array, the path must be 'array',
 * while to process each item within an array separately,
 * the path would be 'array[]'.
 */
class Filter
{
    public const DEFAULT_DELIMITER = '.';

    protected array $filters;

    protected string $delimiter;

    /**
     * Compatibility level
     */
    private int $compatLevel;

    public function __construct(JobConfig $config, int $compatLevel)
    {
        $this->filters = empty($config->getConfig()['responseFilter'])
            ? []
            : (is_array($config->getConfig()['responseFilter'])
                ? $config->getConfig()['responseFilter']
                : [$config->getConfig()['responseFilter']]);

        $this->delimiter = empty($config->getConfig()['responseFilterDelimiter'])
            ? self::DEFAULT_DELIMITER
            : $config->getConfig()['responseFilterDelimiter'];
        $this->compatLevel = $compatLevel;
    }

    /**
     * Filters the $data array according to
     * $config->getConfig()['responseFilter'] and
     * returns the filtered array
     */
    public function run(array $data): array
    {
        foreach ($this->filters as $path) {
            foreach ($data as &$item) {
                $item = $this->filterItem($item, $path);
            }
        }

        return $data;
    }

    /**
     * @param  mixed $item
     * @return mixed
     */
    protected function filterItem($item, string $path)
    {
        /** @var array $currentPath */
        $currentPath = explode($this->delimiter, $path, 2);

        if (substr($currentPath[0], -2) === '[]') {
            $key = substr($currentPath[0], 0, -2);
            $arr = true;
        } else {
            $key = $currentPath[0];
            $arr = false;
        }

        if ($this->compatLevel <= GenericExtractor::COMPAT_LEVEL_FILTER_EMPTY_SCALAR) {
            if (empty($item->{$key})) {
                return $item;
            }
        } else {
            if (!is_object($item) || !property_exists($item, $key)) {
                return $item;
            }
        }

        if ($arr) {
            if (!is_array($item->{$key})) {
                throw new UserException("Error filtering response. '{$key}' is not an array.");
            }

            foreach ($item->{$key} as &$subItem) {
                if (count($currentPath) === 1) {
                    $subItem = $this->updateItem($subItem);
                } else {
                    $subItem = $this->filterItem($subItem, $currentPath[1]);
                }
            }
        } else {
            if (count($currentPath) === 1) {
                $item->{$key} = $this->updateItem($item->{$key});
            } else {
                $item->{$key} = $this->filterItem($item->{$key}, $currentPath[1]);
            }
        }

        return $item;
    }

    /**
     * @param mixed $item
     */
    protected function updateItem($item): string
    {
        if ($this->compatLevel <= GenericExtractor::COMPAT_LEVEL_FILTER_EMPTY_SCALAR) {
            return is_scalar($item) ? (string) $item : (string) json_encode($item);
        } else {
            return (string) json_encode($item);
        }
    }
}


================================================
File: /src/Cache/CacheAllStrategy.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Cache;

use Kevinrob\GuzzleCache\CacheEntry;
use Kevinrob\GuzzleCache\Storage\CacheStorageInterface;
use Kevinrob\GuzzleCache\Strategy\PublicCacheStrategy;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;

/**
 * Cache ALL responses, useful for templates development.
 * It is not publicly documented.
 */
class CacheAllStrategy extends PublicCacheStrategy
{
    private int $ttl;

    public function __construct(CacheStorageInterface $cache, int $ttl)
    {
        parent::__construct($cache);
        $this->ttl = $ttl;
    }

    protected function getCacheObject(RequestInterface $request, ResponseInterface $response): CacheEntry
    {
        return new CacheEntry(
            $request,
            $response,
            new \DateTime(sprintf('+%d seconds', $this->ttl))
        );
    }

    public function fetch(RequestInterface $request): ?CacheEntry
    {
        return $this->storage->fetch($this->getCacheKey($request));
    }
}


================================================
File: /src/PlaceholdersUtils.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor;

use Keboola\Code\Builder;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\Utils\Exception\NoDataFoundException;
use function Keboola\Utils\arrayToObject;
use function Keboola\Utils\getDataFromPath;

class PlaceholdersUtils
{
    public static function getParamsForChildJobs(array $placeholders, array $parentResults, array $parentParams): array
    {
        $params = [];
        foreach ($placeholders as $placeholder => $field) {
            $params[$placeholder] = self::getPlaceholder($placeholder, $field, $parentResults);
        }

        // Add parent params as well (for 'tagging' child-parent data)
        // Same placeholder in deeper nesting replaces parent value
        $params = array_replace($parentParams, $params);

        // Create all combinations if there are some parameter values as array.
        // Each combination will be one child job.
        return self::getParamsPerChildJob($params);
    }

    /**
     * @param string|array $field Path or a function with a path
     * @return array ['placeholder', 'field', 'value']
     */
    public static function getPlaceholder(string $placeholder, $field, array $parentResults): array
    {
        // TODO allow using a descriptive ID(level) by storing the result by `task(job) id` in $parentResults
        $level = strpos($placeholder, ':') === false
            ? 0
            : (int) strtok($placeholder, ':') - 1;

        // Check function (defined as array)
        if (!is_scalar($field)) {
            if (empty($field['path'])) {
                throw new UserException(
                    "The path for placeholder '{$placeholder}' must be a string value or an object " .
                    "containing 'path' and 'function'."
                );
            }

            $fn = (object) arrayToObject($field);
            $field = $field['path'];
            unset($fn->path);
        }

        // Get value
        $value = self::getPlaceholderValue((string) $field, $parentResults, $level, $placeholder);

        // Run function
        if (isset($fn)) {
            $builder = new Builder;
            $builder->allowFunction('urlencode');
            $value = $builder->run($fn, ['placeholder' => ['value' => $value]]);
        }

        // Return definition
        return [
            'placeholder' => $placeholder,
            'field' => $field,
            'value' => $value,
        ];
    }

    /**
     * @return mixed
     */
    public static function getPlaceholderValue(string $field, array $parentResults, int $level, string $placeholder)
    {
        try {
            if (!array_key_exists($level, $parentResults)) {
                $maxLevel = empty($parentResults) ? 0 : (int) max(array_keys($parentResults)) + 1;
                throw new UserException(
                    'Level ' . ++$level . ' not found in parent results! Maximum level: ' . $maxLevel
                );
            }

            return getDataFromPath($field, $parentResults[$level], '.', false);
        } catch (NoDataFoundException $e) {
            throw new UserException(
                "No value found for {$placeholder} in parent result. (level: " . ++$level . ')',
                0,
                null,
                [
                    'parents' => $parentResults,
                ]
            );
        }
    }

    public static function getParamsPerChildJob(array $params): array
    {
        // If value is array -> it is converted to multiple separated items
        $flattened = [];
        foreach ($params as $placeholder) {
            $placeholderName = $placeholder['placeholder'];
            $template = $placeholder;
            if (is_array($placeholder['value'])) {
                $flattened[$placeholderName] = [];
                foreach ($placeholder['value'] as $value) {
                    $template['value'] = $value;
                    $flattened[$placeholderName][] = $template;
                }
            } else {
                $flattened[$placeholderName] = [$template];
            }
        }

        // Get all combinations between placeholders values
        return self::cartesian($flattened);
    }

    /**
     * Cartesian product of array
     * https://stackoverflow.com/a/8567479
     */
    private static function cartesian(array $input): array
    {
        $result = [];
        $arrays = array_values($input);
        $sizeIn = sizeof($arrays);
        $size = $sizeIn > 0 ? 1 : 0;
        foreach ($arrays as $array) {
            $size = $size * sizeof($array);
        }
        for ($i = 0; $i < $size; $i ++) {
            $result[$i] = [];
            for ($j = 0; $j < $sizeIn; $j ++) {
                array_push($result[$i], current($arrays[$j]));
            }
            for ($j = ($sizeIn -1); $j >= 0; $j --) {
                if (next($arrays[$j])) {
                    break;
                } elseif (isset($arrays[$j])) {
                    reset($arrays[$j]);
                }
            }
        }
        return $result;
    }
}


================================================
File: /src/Context/OAuth20LoginContext.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Context;

/**
 * https://developers.keboola.com/extend/generic-extractor/functions/#oauth-20-login-authentication-context
 */
class OAuth20LoginContext
{
    public static function create(string $key, string $secret, array $data, array $configAttributes): array
    {
        return [
            'consumer' => [
                'client_id' => $key,
                'client_secret' => $secret,
            ],
            'user' => $data,
            'attr' => $configAttributes,
        ];
    }
}


================================================
File: /src/Context/OAuth20Context.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Context;

use GuzzleHttp\Psr7\Query;
use Psr\Http\Message\RequestInterface;
use function Keboola\Utils\flattenArray;
use function Keboola\Utils\objectToArray;

/**
 * https://developers.keboola.com/extend/generic-extractor/functions/#oauth-20-authentication-context
 */
class OAuth20Context
{
    /**
     * @param string|object $data
     */
    public static function create(RequestInterface $request, string $clientId, $data): array
    {
        return [
            'query' => Query::parse($request->getUri()->getQuery()),
            'request' => RequestContext::create($request),
            'authorization' => self::getAuthorizationContext($clientId, $data),
        ];
    }

    /**
     * @param string|object $data
     */
    private static function getAuthorizationContext(string $clientId, $data): array
    {
        $authorization = [
            'clientId' => $clientId,
            'nonce' => substr(sha1(uniqid(microtime(), true)), 0, 16),
            'timestamp' => time(),
        ];

        if (!is_scalar($data)) {
            $authorization = array_merge(
                $authorization,
                flattenArray(objectToArray($data), 'data.')
            );
        } else {
            $authorization['data'] = $data;
        }

        return $authorization;
    }
}


================================================
File: /src/Context/QueryAuthContext.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Context;

use GuzzleHttp\Psr7\Query;
use Psr\Http\Message\RequestInterface;

/**
 * https://developers.keboola.com/extend/generic-extractor/functions/#query-authentication-context
 */
class QueryAuthContext
{
    public static function create(RequestInterface $request, array $configAttributes): array
    {
        return [
            'query' => Query::parse($request->getUri()->getQuery()),
            'request' => RequestContext::create($request),
            'attr' => $configAttributes,
        ];
    }
}


================================================
File: /src/Context/LoginAuthApiRequestContext.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Context;

use function Keboola\Utils\objectToArray;

/**
 * https://developers.keboola.com/extend/generic-extractor/functions/#login-authentication-context
 */
class LoginAuthApiRequestContext
{
    public static function create(\stdClass $loginResponse, array $configAttributes): array
    {
        return [
            'response' => objectToArray($loginResponse),
            'attr' => $configAttributes,
        ];
    }
}


================================================
File: /src/Context/RequestContext.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Context;

use Keboola\GenericExtractor\Utils;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\UriInterface;

/** Used by: QueryAuthContext */
class RequestContext
{
    public static function create(RequestInterface $request): array
    {
        $uri = $request->getUri();
        return [
            'url' => (string) $uri,
            'path' => $uri->getPath(),
            'queryString' => $uri->getQuery(),
            'method' => $request->getMethod(),
            'hostname' => $uri->getHost(),
            'port' => self::getPort($uri),
            'resource' => Utils::getResource($uri),
        ];
    }

    private static function getPort(UriInterface $uri): ?int
    {
        $port = $uri->getPort();
        if ($port) {
            return $port;
        }

        switch (strtolower($uri->getScheme())) {
            case 'http':
                return 80;

            case 'https':
                return 443;
        }

        return null;
    }
}


================================================
File: /src/Context/LoginAuthLoginRequestContext.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Context;

/**
 * https://developers.keboola.com/extend/generic-extractor/functions/#login-authentication-context
 */
class LoginAuthLoginRequestContext
{
    public static function create(array $configAttributes): array
    {
        return [
            'attr' => $configAttributes,
        ];
    }
}


================================================
File: /src/Exception/UserException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Exception;

class UserException extends ApplicationException
{
}


================================================
File: /src/Exception/SshTunnelOpenException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Exception;

class SshTunnelOpenException extends UserException
{
}


================================================
File: /src/Exception/ApplicationException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Exception;

class ApplicationException extends \RuntimeException
{
    private ?array $data = null;

    public function __construct(string $message = '', int $code = 0, ?\Throwable $previous = null, ?array $data = null)
    {
        parent::__construct($message, $code, $previous);
        $this->data = $data;
    }

    public function getData(): ?array
    {
        return $this->data;
    }
}


================================================
File: /src/Utils.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor;

use GuzzleHttp\Psr7\Query;
use Keboola\GenericExtractor\Exception\UserException;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\UriInterface;

class Utils
{
    public static function getResource(UriInterface $uri): string
    {
        return $uri->getPath() . ($uri->getQuery() ? '?' . $uri->getQuery() : '');
    }

    /**
     * Merge HTTP queries, query2 values take precedence over query1 values.
     * @param string|array $query1
     * @param string|array $query2
     * @param bool $mergeToArray
     */
    public static function mergeQueries($query1, $query2, bool $mergeToArray = false): string
    {
        $query1 = is_array($query1) ? $query1 : Query::parse($query1);
        $query2 = is_array($query2) ? $query2 : Query::parse($query2);
        $mergeToArrayValues = [];

        foreach ($query2 as $key => $value) {
            if (array_key_exists($key, $query1) && $mergeToArray) {
                $mergeToArrayValues[$key] = array_merge(
                    $mergeToArrayValues[$key] ?? [$query1[$key]],
                    [$value]
                );
                unset($query1[$key]);
            } else {
                $query1[$key] = $value;
            }
        }

        foreach ($mergeToArrayValues as $key => $values) {
            foreach (array_unique($values) as $i => $value) {
                $query1[$key. "[$i]"] = $value;
            }
        }

        return Query::build($query1);
    }

    /**
     * Merge HTTP headers, new headers values take precedence.
     */
    public static function mergeHeaders(RequestInterface $request, array $headers): RequestInterface
    {
        foreach ($headers as $name => $value) {
            $request = $request->withHeader($name, $value);
        }

        return $request;
    }

    public static function checkHeadersForStdClass(array $array, array $path = []): void
    {
        foreach ($array as $key => $value) {
            $currentPath = array_merge($path, [$key]);
            if (is_array($value)) {
                self::checkHeadersForStdClass($value, $currentPath);
            } elseif (!is_scalar($value) && !is_null($value)) {
                throw new UserException(sprintf(
                    'Invalid configuration: invalid type "%s" in headers at path: %s',
                    gettype($value),
                    implode('.', $currentPath)
                ));
            }
        }
    }
}


================================================
File: /src/Configuration/Extractor.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration;

use Keboola\CsvTable\Table;
use Keboola\GenericExtractor\Cache\CacheAllStrategy;
use Keboola\GenericExtractor\Configuration\Extractor\ConfigFile;
use Keboola\GenericExtractor\Configuration\Extractor\StateFile;
use Keboola\GenericExtractor\Exception\ApplicationException;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\Juicer\Config\Config;
use Kevinrob\GuzzleCache\Storage\FlysystemStorage;
use Kevinrob\GuzzleCache\Strategy\CacheStrategyInterface;
use League\Flysystem\Adapter\Local;
use Psr\Log\LoggerInterface;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;
use Symfony\Component\Config\Definition\Processor;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;
use Throwable;

/**
 * Class Extractor provides interfaces for processing configuration files and
 * obtaining parts of GE extractor configuration.
 */
class Extractor
{
    public const CACHE_TTL = 604800;

    private LoggerInterface $logger;

    private array $config;

    private array $state;

    private string $dataDir;

    public function __construct(string $dataDir, LoggerInterface $logger)
    {
        $this->logger = $logger;
        $this->config = $this->loadConfigFile($dataDir);
        if ($this->isSyncAction()) {
            $this->runSyncActionProcess();
        }
        $this->state = $this->loadStateFile($dataDir);
        $this->dataDir = $dataDir;
    }

    private function loadJSONFile(string $dataDir, string $name): array
    {
        $fileName = $dataDir . DIRECTORY_SEPARATOR . $name;
        if (!file_exists($fileName)) {
            throw new ApplicationException("Configuration file '$fileName' not found.");
        }
        $data = json_decode((string) file_get_contents($fileName), true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new ApplicationException('Configuration file is not a valid JSON: ' . json_last_error_msg());
        }
        return $data;
    }

    private function loadConfigFile(string $dataDir): array
    {
        $data = $this->loadJSONFile($dataDir, 'config.json');
        $processor = new Processor();
        try {
            $processor->processConfiguration(new ConfigFile(), $data);
        } catch (InvalidConfigurationException $e) {
            // TODO: create issue to make this strict
            //$this->logger->warning("Configuration file configuration is invalid: " . $e->getMessage());
        }
        return $data;
    }

    private function loadStateFile(string $dataDir): array
    {
        try {
            $data = $this->loadJSONFile($dataDir, 'in' . DIRECTORY_SEPARATOR . 'state.json');
        } catch (ApplicationException $e) {
            // state file is optional so only log the error
            $this->logger->warning('State file not found ' . $e->getMessage());
            $data = [];
        }
        $processor = new Processor();
        try {
            $processor->processConfiguration(new StateFile(), $data);
        } catch (InvalidConfigurationException $e) {
            // TODO: create issue to make this strict
            //$this->logger->warning("State file configuration is invalid: " . $e->getMessage());
        }
        return $data;
    }

    /**
     * @return Config[]
     */
    public function getMultipleConfigs(): array
    {
        if (empty($this->config['parameters']['iterations'])) {
            return [$this->getConfig([])];
        }

        $configs = [];
        foreach ($this->config['parameters']['iterations'] as $params) {
            $configs[] = $this->getConfig($params);
        }
        return $configs;
    }

    private function getConfig(array $params): Config
    {
        if (empty($this->config['parameters']['config'])) {
            throw new UserException("The 'config' section is required in the configuration.");
        }
        $configuration = array_replace($this->config['parameters']['config'], $params);
        return new Config($configuration);
    }

    private function isSyncAction(): bool
    {
        if (isset($this->config['action']) && $this->config['action'] !== 'run') {
            return true;
        }

        return false;
    }

    public function getSshProxy(): ?array
    {
        if (isset($this->config['parameters']['sshProxy'])) {
            return $this->config['parameters']['sshProxy'];
        }
        return null;
    }

    public function getMetadata(): array
    {
        return $this->state;
    }

    public function getCache(): ?CacheStrategyInterface
    {
        if (empty($this->config['parameters']['cache'])) {
            return null;
        }

        $ttl = !empty($this->config['parameters']['cache']['ttl']) ?
            (int) $this->config['parameters']['cache']['ttl'] : self::CACHE_TTL;
        $cacheDir = $this->dataDir . DIRECTORY_SEPARATOR . 'cache';
        return new CacheAllStrategy(
            new FlysystemStorage(new Local($cacheDir)),
            $ttl
        );
    }

    public function getApi(array $configAttributes): Api
    {
        if (!empty($this->config['authorization'])) {
            $authorization = $this->config['authorization'];
        } else {
            $authorization = [];
        }

        $this->validateApiConfig();

        return new Api($this->logger, $this->config['parameters']['api'], $configAttributes, $authorization);
    }

    public function getAwsSignatureCredentials(): ?array
    {
        if (empty($this->config['parameters']['aws']['signature']['credentials'])) {
            return null;
        }

        $requiredParams = ['accessKeyId', '#secretKey', 'serviceName', 'regionName'];
        foreach ($requiredParams as $requiredParam) {
            if (empty($this->config['parameters']['aws']['signature']['credentials'][$requiredParam])) {
                throw new UserException(
                    sprintf(
                        'Option "%s" under "parameters.aws.signature.credentials" cannot be empty.',
                        $requiredParam
                    )
                );
            }
        }

        return $this->config['parameters']['aws']['signature']['credentials'];
    }

    public function saveConfigMetadata(array $data): void
    {
        $dirPath = $this->dataDir . DIRECTORY_SEPARATOR . 'out';
        if (!is_dir($dirPath)) {
            mkdir($dirPath);
        }
        file_put_contents($dirPath . DIRECTORY_SEPARATOR . 'state.json', json_encode($data));
    }

    /**
     * @param Table[] $csvFiles
     * @param bool    $sapiPrefix  whether to prefix the output bucket with "in.c-"
     * @param bool    $incremental Set the incremental flag in manifest
     *                             TODO: revisit this
     */
    public function storeResults(
        array $csvFiles,
        ?string $bucketName = null,
        bool $sapiPrefix = true,
        bool $incremental = false
    ): void {
        $path = "{$this->dataDir}/out/tables/";

        if (!is_null($bucketName)) {
            $path .= $bucketName . '/';
            $bucketName = $sapiPrefix ? 'in.c-' . $bucketName : $bucketName;
        }

        if (!is_dir($path)) {
            mkdir($path, 0775, true);
            chown($path, (int) fileowner("{$this->dataDir}/out/tables/"));
            chgrp($path, (int) filegroup("{$this->dataDir}/out/tables/"));
        }

        foreach ($csvFiles as $key => $file) {
            $manifest = [];

            if (!is_null($bucketName)) {
                $manifest['destination'] = "{$bucketName}.{$key}";
            }

            $manifest['incremental'] = $file->isIncrementalSet()
                ? $file->getIncremental()
                : $incremental;

            if (!empty($file->getPrimaryKey())) {
                $manifest['primary_key'] = $file->getPrimaryKey(true);
            }

            file_put_contents($path . $key . '.manifest', json_encode($manifest));
            copy($file->getPathname(), $path . $key);
        }
    }

    protected function validateApiConfig(): void
    {
        $apiNode = $this->config['parameters']['api'];
        if (empty($apiNode) && !is_array($apiNode)) {
            throw new UserException("The 'api' section is required in configuration.");
        }

        if (array_key_exists('caCertificate', $apiNode)
            && (!is_null($apiNode['caCertificate']) && !is_string($apiNode['caCertificate']))
        ) {
            throw new UserException("The 'caCertificate' must be string.");
        }

        if (array_key_exists('clientCertificate', $apiNode)
            && (!is_null($apiNode['clientCertificate']) && !is_string($apiNode['clientCertificate']))
        ) {
            throw new UserException("The 'clientCertificate' must be string.");
        }
    }

    private function runSyncActionProcess(): void
    {
        try {
            $command = [
                'python',
                '-u',
                './python-sync-actions/src/component.py',
            ];

            $process = new Process($command);
            $process->mustRun();

            echo $process->getOutput();
            fwrite(STDERR, $process->getErrorOutput());
            exit($process->getExitCode());
        } catch (ProcessFailedException $e) {
            $this->logger->error('Process failed to start: ' . $e->getMessage());
            fwrite(STDERR, 'Process error output: ' . $e->getProcess()->getErrorOutput());
            exit($e->getProcess()->getExitCode());
        } catch (Throwable $e) {
            $this->logger->error('Unexpected error: ' . $e->getMessage());
            throw new ApplicationException('Unexpected error: ' . $e->getMessage());
        }
    }
}


================================================
File: /src/Configuration/Headers.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration;

use Keboola\GenericExtractor\Exception\UserException;

/**
 * API Headers wrapper
 */
class Headers
{
    private array $apiHeaders = [];

    private array $configHeaders = [];

    private array $requiredHeaders = [];

    public function __construct(array $api, array $configAttributes)
    {
        if (!empty($api['http']['headers']) && is_array($api['http']['headers'])) {
            $this->apiHeaders = $api['http']['headers'];
        }
        if (!empty($api['http']['requiredHeaders']) && is_array($api['http']['requiredHeaders'])) {
            $this->requiredHeaders = $api['http']['requiredHeaders'];
        }

        $this->loadConfig($configAttributes);
    }

    private function loadConfig(array $configAttributes): void
    {
        if (!empty($configAttributes['http']['headers']) && is_array($configAttributes['http']['headers'])) {
            $configHeaders = $configAttributes['http']['headers'];
        } else {
            $configHeaders = [];
        }

        if (!empty($this->requiredHeaders)) {
            foreach ($this->requiredHeaders as $rHeader) {
                if (empty($configHeaders[$rHeader])) {
                    throw new UserException("Missing required header {$rHeader} in 'config.http.headers'.");
                }
            }
        }

        $this->configHeaders = $configHeaders;
    }

    public function getHeaders(): array
    {
        return array_replace($this->apiHeaders, $this->configHeaders);
    }
}


================================================
File: /src/Configuration/Api.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration;

use Keboola\GenericExtractor\Authentication;
use Keboola\GenericExtractor\Authentication\AuthInterface;
use Keboola\GenericExtractor\Exception\ApplicationException;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Pagination\ScrollerFactory;
use Keboola\Juicer\Pagination\ScrollerInterface;
use Keboola\Utils\Exception\JsonDecodeException;
use Psr\Log\LoggerInterface;
use Symfony\Component\Validator\Constraints\Url;
use Symfony\Component\Validator\Validation;

/**
 * API Description
 */
class Api
{
    private string $baseUrl;

    private string $name = 'generic';

    private AuthInterface $auth;

    private ?string $caCertificate = null;

    private array $scrollerConfig = [];

    private Headers $headers;

    private array $defaultRequestOptions = [];

    private array $retryConfig = [];

    private LoggerInterface $logger;

    private array $ignoreErrors = [];

    private ?string $clientCertificate = null;

    private float $connectTimeout = RestClient::DEFAULT_CONNECT_TIMEOUT;

    private float $requestTimeout = RestClient::DEFAULT_REQUEST_TIMEOUT;

    public function __construct(LoggerInterface $logger, array $api, array $configAttributes, array $authorization)
    {
        $this->logger = $logger;
        $this->auth = $this->createAuth($api, $configAttributes, $authorization);
        $this->caCertificate = $api['caCertificate'] ?? null;
        $this->clientCertificate = $api['#clientCertificate'] ?? null;
        $this->headers = new Headers($api, $configAttributes);
        if (!empty($api['pagination']) && is_array($api['pagination'])) {
            if (isset($api['pagination']['pages'])) {
                if (is_int($api['pagination']['pages']) ||
                    (is_string($api['pagination']['pages']) && ctype_digit($api['pagination']['pages']))
                ) {
                    $api['pagination']['pages'] = (int) $api['pagination']['pages'];
                } else {
                    throw new UserException(sprintf(
                        'Value "pages" in "api.pagination" has to be int, %s given.',
                        getType($api['pagination']['pages'])
                    ));
                }
            }
            $this->scrollerConfig = $api['pagination'];
        }
        if (!empty($api['retryConfig']) && is_array($api['retryConfig'])) {
            $this->retryConfig = $api['retryConfig'];
        }
        if (!empty($api['http']['ignoreErrors']) && is_array($api['http']['ignoreErrors'])) {
            $this->ignoreErrors = $api['http']['ignoreErrors'];
        }
        $this->baseUrl = $this->createBaseUrl($api, $configAttributes);
        if (!empty($api['name'])) {
            $this->name = $api['name'];
        }
        if (!empty($api['http']['defaultOptions'])) {
            $this->defaultRequestOptions = $api['http']['defaultOptions'];
        }
        if (!empty($api['http']['connectTimeout']) && is_numeric($api['http']['connectTimeout'])) {
            $this->connectTimeout = (float) $api['http']['connectTimeout'];
        }
        if (!empty($api['http']['requestTimeout']) && is_numeric($api['http']['requestTimeout'])) {
            $this->requestTimeout = (float) $api['http']['requestTimeout'];
        }
    }

    /**
     * Create Authentication class that accepts a Guzzle client.
     *
     * @throws UserException
     */
    private function createAuth(array $api, array $configAttributes, array $authorization): AuthInterface
    {
        if (empty($api['authentication']['type'])) {
            $this->logger->debug('Using no authentication.');
            return new Authentication\NoAuth();
        }
        $this->logger->debug("Using '{$api['authentication']['type']}' authentication.");
        switch ($api['authentication']['type']) {
            case 'basic':
                if (!empty($config['password']) && empty($config['#password'])) {
                    $this->logger->warning("Using deprecated 'password', use '#password' instead.");
                }
                return new Authentication\Basic($configAttributes);
            /** @noinspection PhpMissingBreakStatementInspection */
            case 'url.query':
                $this->logger->warning("Method 'url.query' auth is deprecated, use 'query'.");
                // intentional, no break
            case 'query':
                if (empty($api['authentication']['query']) && !empty($api['query'])) {
                    $this->logger->warning("Using 'api.query' is deprecated, use 'api.authentication.query");
                    $api['authentication']['query'] = $api['query'];
                }
                return new Authentication\Query($configAttributes, $api['authentication']);
            case 'login':
                return new Authentication\Login($configAttributes, $api['authentication']);
            case 'oauth10':
                return new Authentication\OAuth10($authorization);
            case 'oauth20':
                return new Authentication\OAuth20($authorization, $api['authentication']);
            case 'oauth20.login':
                return new Authentication\OAuth20Login($configAttributes, $authorization, $api['authentication']);
            default:
                throw new UserException("Unknown authorization type '{$api['authentication']['type']}'.");
        }
    }

    private function createBaseUrl(array $api, array $configAttributes): string
    {
        if (empty($api['baseUrl'])) {
            throw new UserException("The 'baseUrl' attribute must be set in API configuration");
        }

        if (self::isValidUrl($api['baseUrl'])) {
            return $api['baseUrl'];
        }

        if (is_string($api['baseUrl'])) {
            // For backwards compatibility
            try {
                $fn = \Keboola\Utils\jsonDecode($api['baseUrl']);
                $this->logger->warning('Passing json-encoded baseUrl is deprecated.');
            } catch (JsonDecodeException $e) {
                throw new UserException("The 'baseUrl' attribute in API configuration is not a valid URL");
            }
            $baseUrl = UserFunction::build([$fn], ['attr' => $configAttributes])[0];
        } else {
            $baseUrl = UserFunction::build([$api['baseUrl']], ['attr' => $configAttributes])[0];
        }

        if (!self::isValidUrl($baseUrl)) {
            throw new UserException(
                sprintf(
                    'The "baseUrl" attribute in API configuration resulted in an invalid URL (%s)',
                    $baseUrl
                )
            );
        }

        return $baseUrl;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getBaseUrl(): string
    {
        return $this->baseUrl;
    }

    public function getNewScroller(): ScrollerInterface
    {
        return ScrollerFactory::getScroller($this->scrollerConfig, $this->logger);
    }

    public function getAuth(): AuthInterface
    {
        return $this->auth;
    }

    public function hasCaCertificate(): bool
    {
        return $this->caCertificate !== null;
    }

    public function getCaCertificate(): string
    {
        if (!$this->caCertificate) {
            throw new ApplicationException('Key "api.caCertificate" is not configured.');
        }

        return $this->caCertificate;
    }

    public function getCaCertificateFile(): string
    {
        $filePath = '/tmp/generic-extractor-ca-certificate-' . uniqid((string) rand(), true) . '.crt';
        file_put_contents($filePath, $this->getCaCertificate());
        return $filePath;
    }


    public function hasClientCertificate(): bool
    {
        return $this->clientCertificate !== null;
    }

    public function getClientCertificate(): string
    {
        if (!$this->clientCertificate) {
            throw new ApplicationException('Key "api.clientCertificate" is not configured.');
        }

        return $this->clientCertificate;
    }

    public function getClientCertificateFile(): string
    {
        $filePath = '/tmp/generic-extractor-client-certificate-' . uniqid((string) rand(), true) . '.pem';
        file_put_contents($filePath, $this->getClientCertificate());
        return $filePath;
    }

    public function getHeaders(): Headers
    {
        return $this->headers;
    }

    public function getDefaultRequestOptions(): array
    {
        return $this->defaultRequestOptions;
    }

    public function getRetryConfig(): array
    {
        return $this->retryConfig;
    }

    public function getIgnoreErrors(): array
    {
        return $this->ignoreErrors;
    }

    public function getConnectTimeout(): float
    {
        return $this->connectTimeout;
    }

    public function getRequestTimeout(): float
    {
        return $this->requestTimeout;
    }


    /**
     * @param mixed $url
     */
    public static function isValidUrl($url): bool
    {
        if (!is_string($url)) {
            return false;
        }

        $constraint = new Url();
        $validator = Validation::createValidator();
        $errors = $validator->validate($url, $constraint);
        return $errors->count() === 0;
    }
}


================================================
File: /src/Configuration/UserFunction.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration;

use Keboola\Code\Builder;
use Keboola\Code\Exception\UserScriptException;
use Keboola\GenericExtractor\Exception\UserException;
use function Keboola\Utils\arrayToObject;

/**
 * Keboola\Code\Builder wrapper
 */
class UserFunction
{
    /**
     * @param array|\stdClass $functions
     * @param array $params ['attr' => $attributesArray, ...]
     * @throws UserException
     */
    public static function build($functions, array $params = []): array
    {
        /** @var array|\stdClass|mixed $functions */
        if (!is_object($functions) && !is_array($functions)) {
            throw new UserException(
                sprintf(
                    "Expected 'object' type, given '%s' type, value '%s'.",
                    gettype($functions),
                    json_encode($functions)
                )
            );
        }

        $builder = new Builder();
        $functions = (array) arrayToObject((array) $functions);
        try {
            array_walk(
                $functions,
                function (&$value, $key) use ($params, $builder): void {
                    $value = $value instanceof \stdClass ? $builder->run($value, $params) : $value;
                }
            );
        } catch (UserScriptException $e) {
            throw new UserException('User script error: ' . $e->getMessage());
        }

        return $functions;
    }
}


================================================
File: /src/Configuration/Extractor/StateFile.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration\Extractor;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class StateFile implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('state-file');
        $root = $treeBuilder->getRootNode();
        $root->children()->arrayNode('todo')->isRequired();
        return $treeBuilder;
    }
}


================================================
File: /src/Configuration/Extractor/ConfigFile.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration\Extractor;

use Keboola\GenericExtractor\Configuration\Extractor\Node\Api;
use Keboola\GenericExtractor\Configuration\Extractor\Node\Authorization;
use Keboola\GenericExtractor\Configuration\Extractor\Node\AwsSignature;
use Keboola\GenericExtractor\Configuration\Extractor\Node\Config;
use Keboola\GenericExtractor\Configuration\Extractor\Node\SshProxy;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class ConfigFile implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('config-file');
        /** @var ArrayNodeDefinition $root */
        $root = $treeBuilder->getRootNode();
        $parameters = $root->children()->arrayNode('parameters')->isRequired();
        $awsSignature = $parameters->children()->arrayNode('aws');
        AwsSignature::configureNode($awsSignature);
        $api = $parameters->children()->arrayNode('api')->isRequired();
        Api::configureNode($api);
        $config = $parameters->children()->arrayNode('config')->isRequired();
        Config::configureNode($config);
        $authorization = $root->children()->arrayNode('authorization');
        Authorization::configureNode($authorization);
        $sshProxy = $root->children()->arrayNode('sshProxy');
        SshProxy::configureNode($sshProxy);
        return $treeBuilder;
    }
}


================================================
File: /src/Configuration/Extractor/Node/Config.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration\Extractor\Node;

use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class Config
{
    public static function configureNode(ArrayNodeDefinition $node): void
    {
        // TODO
    }
}


================================================
File: /src/Configuration/Extractor/Node/Authorization.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration\Extractor\Node;

use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class Authorization
{
    public static function configureNode(ArrayNodeDefinition $node): void
    {
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $node->children()
            ->arrayNode('oauth_api')
                ->children()
                    ->arrayNode('credentials')
                        ->children()
                            ->scalarNode('#data')->isRequired()->end()
                            ->scalarNode('appKey')->isRequired()->end()
                            ->scalarNode('#appSecret')->isRequired()->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
        ->end();
        // @formatter:on
    }
}


================================================
File: /src/Configuration/Extractor/Node/Api.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration\Extractor\Node;

use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class Api
{
    public static function configureNode(ArrayNodeDefinition $node): void
    {
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $node
            ->ignoreExtraKeys() // TODO add missing sub-nodes
            ->children()
                ->scalarNode('caCertificate')->cannotBeEmpty()->end()
                ->scalarNode('clientCertificate')->cannotBeEmpty()->end()
            ->end();
        // @formatter:on
    }
}


================================================
File: /src/Configuration/Extractor/Node/NodeFunction.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration\Extractor\Node;

use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class NodeFunction
{
    public static function configureNode(ArrayNodeDefinition $node): void
    {
        // TODO
    }
}


================================================
File: /src/Configuration/Extractor/Node/AwsSignature.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration\Extractor\Node;

use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class AwsSignature
{
    public static function configureNode(ArrayNodeDefinition $node): void
    {
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $node->children()
            ->arrayNode('signature')
                ->children()
                    ->arrayNode('credentials')
                        ->children()
                            ->scalarNode('accessKeyId')->isRequired()->end()
                            ->scalarNode('#secretKey')->isRequired()->end()
                            ->scalarNode('serviceName')->isRequired()->end()
                            ->scalarNode('regionName')->isRequired()->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
        ->end();
        // @formatter:on
    }
}


================================================
File: /src/Configuration/Extractor/Node/SshProxy.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration\Extractor\Node;

use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class SshProxy
{
    public static function configureNode(ArrayNodeDefinition $node): void
    {
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $node
            ->children()
                ->scalarNode('host')->isRequired()->end()
                ->scalarNode('port')->isRequired()->end()
                ->scalarNode('user')->isRequired()->end()
                ->scalarNode('#privateKey')->isRequired()->end()
            ->end();
        // @formatter:on
    }
}


================================================
File: /src/Configuration/JuicerRest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Configuration;

class JuicerRest
{
    /**
     * Convert structure of config from Juicer 8 => 9
     */
    public static function convertRetry(array $config): array
    {
        // TODO: add deprecation
        if (isset($config['curlCodes'])) {
            $config['curl'] = [];
            $config['curl']['codes'] = $config['curlCodes'];
            unset($config['curlCodes']);
        }

        if (isset($config['headerName']) || isset($config['httpCodes'])) {
            $config['http'] = [];

            if (isset($config['headerName'])) {
                $config['http']['retryHeader'] = $config['headerName'];
                unset($config['headerName']);
            }
            if (isset($config['httpCodes'])) {
                $config['http']['codes'] = $config['httpCodes'];
                unset($config['httpCodes']);
            }
        }

        return $config;
    }
}


================================================
File: /src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\GenericExtractor\Exception\ApplicationException;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\GenericExtractor\Executor;

require_once __DIR__ . '/../vendor/autoload.php';

// initialize logger
$logger = new Monolog\Logger('logger');
/** @var resource $stream */
$stream = fopen('php://stdout', 'r');
$logger->pushHandler(new \Monolog\Handler\StreamHandler($stream));
//$logger->debug("Starting up");

try {
    $executor = new Executor($logger);
    $executor->run();
} catch (UserException $e) {
    $logger->error($e->getMessage(), (array) $e->getData());
    exit(1);
} catch (\Keboola\Juicer\Exception\UserException $e) {
    $logger->error($e->getMessage(), (array) $e->getData());
    exit(1);
} catch (ApplicationException $e) {
    $logger->error($e->getMessage(), (array) $e->getData());
    exit($e->getCode() > 1 ? $e->getCode() : 2);
} catch (\Throwable $e) {
    if ($e instanceof \GuzzleHttp\Exception\RequestException
        && $e->getPrevious() instanceof UserException
    ) {
        /** @var UserException $ex */
        $ex = $e->getPrevious();
        $logger->error($ex->getMessage(), (array) $ex->getData());
        exit(1);
    }
    $logger->error(
        $e->getMessage(),
        [
        'errFile' => $e->getFile(),
        'errLine' => $e->getLine(),
        'trace' => $e->getTrace(),
        'exception' => get_class($e),
        ]
    );
    exit(2);
}

$logger->info('Extractor finished successfully.');
exit(0);


================================================
File: /src/SshTunnel/SshTunnelFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\SshTunnel;

use Keboola\GenericExtractor\Exception\UserException;
use Psr\Log\LoggerInterface;

class SshTunnelFactory
{
    public const LOCAL_PORT = 33006;

    private LoggerInterface $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    public function create(array $sshConfig): SshTunnel
    {
        $missingParams = array_diff(
            ['user', 'host', 'port', '#privateKey'],
            array_keys($sshConfig)
        );

        if (!empty($missingParams)) {
            throw new UserException(sprintf("Missing parameters '%s' in SSH config.", implode(',', $missingParams)));
        }

        return new SshTunnel(
            $this->logger,
            $sshConfig['user'],
            $sshConfig['host'],
            (int) $sshConfig['port'],
            self::LOCAL_PORT,
            $sshConfig['#privateKey'],
        );
    }
}


================================================
File: /src/SshTunnel/SshTunnel.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\SshTunnel;

use GuzzleHttp\Middleware;
use Keboola\GenericExtractor\Exception\ApplicationException;
use Psr\Http\Message\RequestInterface;
use Psr\Log\LoggerInterface;
use Retry\BackOff\ExponentialBackOffPolicy;
use Retry\Policy\SimpleRetryPolicy;
use Retry\RetryProxy;
use Symfony\Component\Process\Process;
use Keboola\GenericExtractor\Exception\SshTunnelOpenException;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\Temp\Temp;

class SshTunnel
{
    public const SSH_SERVER_ALIVE_INTERVAL = 10;

    private const CREATE_SSH_MAX_RETRY = 5;

    private LoggerInterface $logger;
    private Temp $temp;
    private ?Process $process = null;
    private string $sshUser;
    private string $sshHost;
    private int $sshPort;
    private int $localPort;
    private string $privateKey;
    private bool $opened = false;

    public function __construct(
        LoggerInterface $logger,
        string $sshUser,
        string $sshHost,
        int $sshPort,
        int $localPort,
        string $privateKey
    ) {
        $this->logger = $logger;
        $this->temp = new Temp('ssh-tunnel');
        $this->sshUser = $sshUser;
        $this->sshHost = $sshHost;
        $this->sshPort = $sshPort;
        $this->localPort = $localPort;
        $this->privateKey = $privateKey;
    }

    public function __destruct()
    {
        $this->close();
        $this->temp->remove();
    }

    public function open(): void
    {
        if ($this->isOpened()) {
            return;
        }

        $this->logger->info("Creating SSH tunnel to '$this->sshHost' ...");
        $cmd = sprintf(
            'ssh ' .
            '-4 ' . // bind port to IPv4
            '-D %s ' . // local port
            '%s@%s -p %s ' . // user, sshHost, sshPort
            '-i %s ' . // private key
            '-N ' . // only port forwarding
            '-o BatchMode=yes ' . // don't ask for password
            '-o ExitOnForwardFailure=yes ' . // exit on error
            '-o StrictHostKeyChecking=no ' .
            '-o ServerAliveInterval=%d -o ServerAliveCountMax=1', // exit if server not alive
            $this->localPort,
            $this->sshUser,
            $this->sshHost,
            $this->sshPort,
            $this->writeKeyToFile($this->privateKey),
            self::SSH_SERVER_ALIVE_INTERVAL
        );

        $simplyRetryPolicy = new SimpleRetryPolicy(
            self::CREATE_SSH_MAX_RETRY,
            [SshTunnelOpenException::class,\Throwable::class]
        );

        $exponentialBackOffPolicy = new ExponentialBackOffPolicy();
        $proxy = new RetryProxy(
            $simplyRetryPolicy,
            $exponentialBackOffPolicy,
            $this->logger
        );

        $proxy->call(function () use ($cmd): void {
            // SSH tunnel process
            $this->process = Process::fromShellCommandline($cmd, null);
            $this->process->setTimeout(null);
            $this->process->start();

            // Wait until:
            // - SSH tunnel process is not running -> error
            // - SSH tunnel ready -> ok
            while ($this->process->isRunning() && !$this->isAlive()) {
                sleep(1);
            }

            // Throw exception if error when creating tunnel
            if (!$this->process->isRunning()) {
                throw new SshTunnelOpenException(
                    sprintf(
                        'Unable to create ssh tunnel. Output: %s ErrorOutput: %s',
                        $this->process->getOutput(),
                        $this->process->getErrorOutput()
                    )
                );
            }
        });

        $this->logger->debug('SSH tunnel created.');
    }

    public function close(): void
    {
        if ($this->process && $this->process->isRunning()) {
            $this->process->stop();
        }

        $this->opened = false;
    }

    public function isOpened(): bool
    {
        return $this->opened;
    }

    public function isAlive(): bool
    {
        $checkProcess = Process::fromShellCommandline(sprintf('nc -z 127.0.0.1 %d', $this->localPort));
        $checkProcess->setTimeout(3);
        $this->opened = $checkProcess->run() === 0;
        if (!$this->process || !$this->process->isRunning()) {
            $this->opened = false;
        }

        return $this->isOpened();
    }

    public function reopenIfNotAlive(): void
    {
        if ($this->isAlive()) {
            return;
        }

        $this->close();
        $this->logger->debug('SSH tunnel is not alive. Reconnecting ...');
        try {
            $this->open();
        } catch (SshTunnelOpenException $e) {
            // ignore, request will fail with correct ConnectionError
        }
    }

    public function getProxy(): string
    {
        return sprintf('socks5h://127.0.0.1:%s', $this->localPort);
    }

    public function getMiddleware(): callable
    {
        return Middleware::tap(function (RequestInterface $request, array $options): void {
            $retryNumber = $options['retries'] ?? null;
            if ($retryNumber === null) {
                throw new ApplicationException(
                    'Missing "retires" key in $options. ' .
                    'SSH tunnel middleware must be registered after retry middleware.'
                );
            }

            if (!$this->isOpened()) {
                $this->open();
            } elseif ($retryNumber > 0) {
                // If retrying -> check if problem is not in the SSH tunnel
                $this->reopenIfNotAlive();
            }
        });
    }

    protected function writeKeyToFile(string $key): string
    {
        if (empty($key)) {
            throw new UserException('Key must not be empty');
        }
        $path = (string) $this->temp->createFile('ssh-key')->getRealPath();
        (string) file_put_contents($path, $key);
        chmod($path, 0600);
        return $path;
    }
}


================================================
File: /src/MissingTableHelper.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor;

use Keboola\Csv\CsvWriter;
use Keboola\GenericExtractor\Configuration\Extractor;
use Keboola\GenericExtractor\Exception\UserException;

class MissingTableHelper
{
    public static function checkConfigs(array $configs, string $dataDir, Extractor $configuration): void
    {
        foreach ($configs as $config) {
            $api = $configuration->getApi($config->getAttributes());

            if (!empty($config->getAttribute('outputBucket'))) {
                $outputBucket = $config->getAttribute('outputBucket');
            } elseif ($config->getAttribute('id')) {
                $outputBucket = 'ex-api-' . $api->getName() . '-' . $config->getAttribute('id');
            } else {
                $outputBucket = '';
            }

            if ($config->getAttribute('mappings')) {
                if ($outputBucket) {
                    $destinationBase = $dataDir . '/out/tables/' . $outputBucket . '.';
                } else {
                    $destinationBase = $dataDir . '/out/tables/';
                }
                foreach ($config->getAttribute('mappings') as $name => $mapping) {
                    self::fillMissingTableMapping(
                        $destinationBase,
                        $outputBucket,
                        $config->getAttribute('incrementalOutput'),
                        $name,
                        $mapping
                    );
                }
            }
        }
    }

    private static function fillMissingTableMapping(
        string $baseFileName,
        string $outputBucket,
        bool $incremental,
        string $name,
        array $mapping,
        array $parentKey = []
    ): void {
        $columns = [];
        $primaryKey = [];
        if (!empty($mapping['type']) && ($mapping['type'] === 'table')) {
            // special case of root table mapping which is one level higher than any other mapping
            $mapping = [$mapping];
        }
        foreach ($mapping as $item) {
            if (!is_array($item)) {
                $columns[] = $item;
            } elseif ((empty($item['type']) || (($item['type'] === 'column') || ($item['type'] === 'user')))) {
                if (!isset($item['mapping'])) {
                    throw new UserException(sprintf('Missing mapping key at item with type "%s"', $item['type']));
                }
                $columns[] = $item['mapping']['destination'];
                if (!empty($item['mapping']['primaryKey'])) {
                    $primaryKey[] = $item['mapping']['destination'];
                }
            } elseif ($item['type'] === 'table') {
                if (empty($item['parentKey'])) {
                    $parentKeyParam = ['destination' => $name . '_pk'];
                } elseif (empty($item['parentKey']['destination'])) {
                    $parentKeyParam = $item['parentKey'];
                    $parentKeyParam['destination'] = $name . '_pk';
                } else {
                    $parentKeyParam = $item['parentKey'];
                }
                self::fillMissingTableMapping(
                    $baseFileName,
                    $outputBucket,
                    $incremental,
                    $item['destination'],
                    $item['tableMapping'] ?? [],
                    $parentKeyParam
                );
            } else {
                throw new UserException(sprintf('Invalid mapping type "%s".', $item['type']));
            }
        }
        /* this is intentionally after to produce consistent results with generic, where parent key
            is appended to the end of the table */
        if ($parentKey && !($parentKey['disable'] ?? false)) {
            $columns[] = $parentKey['destination'];
            if (!empty($parentKey['primaryKey'])) {
                $primaryKey[] = $parentKey['destination'];
            }
        }
        /* the condition for file existence is intentionally so far in checking, if it were any earlier, we would
            skip non-existent child mappings of an existent parent */
        if ($columns && !file_exists($baseFileName . $name)) {
            $csvFile = new CsvWriter($baseFileName . $name);
            $csvFile->writeRow($columns);
            $manifest = [
                'incremental' => $incremental,
            ];
            if ($outputBucket) {
                $manifest['destination'] = 'in.c-' . $outputBucket . '.' . $name;
            }
            if ($primaryKey) {
                $manifest['primary_key'] = $primaryKey;
            }
            file_put_contents($baseFileName . $name . '.manifest', json_encode($manifest));
        }
    }
}


================================================
File: /src/Executor.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor;

use Keboola\GenericExtractor\Configuration\Extractor;
use Keboola\GenericExtractor\SshTunnel\SshTunnelFactory;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Parser\Json;
use Keboola\Temp\Temp;
use Monolog\Handler\AbstractHandler;
use Monolog\Logger;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Finder\SplFileInfo;

/**
 * Class Executor manages multiple configurations (created by iterations) and executes
 * GenericExtractor for each of them.
 */
class Executor
{
    private Logger $logger;

    public function __construct(Logger $logger)
    {
        $this->logger = $logger;
    }

    private function setLogLevel(bool $debug): void
    {
        /**
         * @var AbstractHandler $handler
         */
        foreach ($this->logger->getHandlers() as $handler) {
            if ($handler instanceof AbstractHandler) {
                if ($debug) {
                    $handler->setLevel($this->logger::DEBUG);
                } else {
                    $handler->setLevel($this->logger::INFO);
                }
            }
        }
    }

    public function run(): void
    {
        $temp = new Temp();
        $dataDir = rtrim(getenv('KBC_DATADIR'), '/') ?: '/data';
        $configuration = new Extractor($dataDir, $this->logger);
        $configs = $configuration->getMultipleConfigs();

        $sshTunnel = null;
        if ($configuration->getSshProxy() !== null) {
            $sshTunnelFactory = new SshTunnelFactory($this->logger);
            $sshTunnel = $sshTunnelFactory->create($configuration->getSshProxy());
        }

        $awsSignatureCredentials = $configuration->getAwsSignatureCredentials();

        $metadata = $configuration->getMetadata();
        $metadata['time']['previousStart'] =
            empty($metadata['time']['previousStart']) ? 0 : $metadata['time']['previousStart'];
        $metadata['time']['currentStart'] = time();
        $cacheStorage = $configuration->getCache();

        $results = [];

        foreach ($configs as $config) {
            $this->setLogLevel((bool) $config->getAttribute('debug'));
            $api = $configuration->getApi($config->getAttributes());

            if (!empty($config->getAttribute('outputBucket'))) {
                $outputBucket = $config->getAttribute('outputBucket');
            } elseif ($config->getAttribute('id')) {
                $outputBucket = 'ex-api-' . $api->getName() . '-' . $config->getAttribute('id');
            } else {
                $outputBucket = '__kbc_default';
            }

            $extractor = new GenericExtractor(
                $temp,
                $this->logger,
                $api,
                $sshTunnel ? $sshTunnel->getProxy() : null,
                function (RestClient $client) use ($sshTunnel): void {
                    if ($sshTunnel) {
                        $client->getHandlerStack()->after(
                            'retry',
                            $sshTunnel->getMiddleware(),
                            'ssh-tunnel'
                        );
                    }
                },
                $awsSignatureCredentials
            );

            if ($cacheStorage) {
                $extractor->enableCache($cacheStorage);
            }

            if (!empty($results[$outputBucket])) {
                $extractor->setParser($results[$outputBucket]['parser']);
            }
            $extractor->setMetadata($metadata);

            $extractor->run($config);

            $metadata = $extractor->getMetadata();

            $results[$outputBucket]['parser'] = $extractor->getParser();
            $results[$outputBucket]['incremental'] = $config->getAttribute('incrementalOutput');
        }

        foreach ($results as $bucket => $result) {
            $this->logger->debug("Processing results for {$bucket}.");
            /**
             * @var Json $parser
             */
            $parser = $result['parser'];
            $configuration->storeResults(
                $parser->getResults(),
                $bucket === '__kbc_default' ? null : (string) $bucket,
                true,
                $result['incremental']
            );

            // move files and flatten file structure
            $folderFinder = new Finder();
            $fs = new Filesystem();
            $folders = $folderFinder->directories()->in($dataDir . '/out/tables')->depth(0);
            foreach ($folders as $folder) {
                /** @var SplFileInfo $folder */
                $filesFinder = new Finder();
                $files = $filesFinder->files()->in($folder->getPathname())->depth(0);
                /** @var SplFileInfo $file */
                foreach ($files as $file) {
                    $destination =
                        $dataDir . '/out/tables/' . basename($folder->getPathname()) .
                        '.' . basename($file->getPathname());
                    // maybe move will be better?
                    $fs->rename($file->getPathname(), $destination);
                }
            }
            $fs->remove($folders);
        }

        MissingTableHelper::checkConfigs($configs, $dataDir, $configuration);
        $metadata['time']['previousStart'] = $metadata['time']['currentStart'];
        unset($metadata['time']['currentStart']);
        $configuration->saveConfigMetadata($metadata);
    }
}


================================================
File: /composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "085770e34bd5c4c4c1e070e86c3d4c6a",
    "packages": [
        {
            "name": "aws/aws-crt-php",
            "version": "v1.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/awslabs/aws-crt-php.git",
                "reference": "3942776a8c99209908ee0b287746263725685732"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/awslabs/aws-crt-php/zipball/3942776a8c99209908ee0b287746263725685732",
                "reference": "3942776a8c99209908ee0b287746263725685732",
                "shasum": ""
            },
            "require": {
                "php": ">=5.5"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.8.35|^5.4.3"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "authors": [
                {
                    "name": "AWS SDK Common Runtime Team",
                    "email": "aws-sdk-common-runtime@amazon.com"
                }
            ],
            "description": "AWS Common Runtime for PHP",
            "homepage": "http://aws.amazon.com/sdkforphp",
            "keywords": [
                "amazon",
                "aws",
                "crt",
                "sdk"
            ],
            "support": {
                "issues": "https://github.com/awslabs/aws-crt-php/issues",
                "source": "https://github.com/awslabs/aws-crt-php/tree/v1.0.2"
            },
            "time": "2021-09-03T22:57:30+00:00"
        },
        {
            "name": "aws/aws-sdk-php",
            "version": "3.208.5",
            "source": {
                "type": "git",
                "url": "https://github.com/aws/aws-sdk-php.git",
                "reference": "58fa9d8b522b0afa260299179ff950c783ff0ee1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/aws/aws-sdk-php/zipball/58fa9d8b522b0afa260299179ff950c783ff0ee1",
                "reference": "58fa9d8b522b0afa260299179ff950c783ff0ee1",
                "shasum": ""
            },
            "require": {
                "aws/aws-crt-php": "^1.0.2",
                "ext-json": "*",
                "ext-pcre": "*",
                "ext-simplexml": "*",
                "guzzlehttp/guzzle": "^5.3.3|^6.2.1|^7.0",
                "guzzlehttp/promises": "^1.4.0",
                "guzzlehttp/psr7": "^1.7.0|^2.0",
                "mtdowling/jmespath.php": "^2.6",
                "php": ">=5.5"
            },
            "require-dev": {
                "andrewsville/php-token-reflection": "^1.4",
                "aws/aws-php-sns-message-validator": "~1.0",
                "behat/behat": "~3.0",
                "doctrine/cache": "~1.4",
                "ext-dom": "*",
                "ext-openssl": "*",
                "ext-pcntl": "*",
                "ext-sockets": "*",
                "nette/neon": "^2.3",
                "paragonie/random_compat": ">= 2",
                "phpunit/phpunit": "^4.8.35|^5.4.3",
                "psr/cache": "^1.0",
                "psr/simple-cache": "^1.0",
                "sebastian/comparator": "^1.2.3"
            },
            "suggest": {
                "aws/aws-php-sns-message-validator": "To validate incoming SNS notifications",
                "doctrine/cache": "To use the DoctrineCacheAdapter",
                "ext-curl": "To send requests using cURL",
                "ext-openssl": "Allows working with CloudFront private distributions and verifying received SNS messages",
                "ext-sockets": "To use client-side monitoring"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Aws\\": "src/"
                },
                "files": [
                    "src/functions.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "authors": [
                {
                    "name": "Amazon Web Services",
                    "homepage": "http://aws.amazon.com"
                }
            ],
            "description": "AWS SDK for PHP - Use Amazon Web Services in your PHP project",
            "homepage": "http://aws.amazon.com/sdkforphp",
            "keywords": [
                "amazon",
                "aws",
                "cloud",
                "dynamodb",
                "ec2",
                "glacier",
                "s3",
                "sdk"
            ],
            "support": {
                "forum": "https://forums.aws.amazon.com/forum.jspa?forumID=80",
                "issues": "https://github.com/aws/aws-sdk-php/issues",
                "source": "https://github.com/aws/aws-sdk-php/tree/3.208.5"
            },
            "time": "2021-12-13T20:17:56+00:00"
        },
        {
            "name": "guzzlehttp/guzzle",
            "version": "7.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/guzzle.git",
                "reference": "7008573787b430c1c1f650e3722d9bba59967628"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/guzzle/zipball/7008573787b430c1c1f650e3722d9bba59967628",
                "reference": "7008573787b430c1c1f650e3722d9bba59967628",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "guzzlehttp/promises": "^1.4",
                "guzzlehttp/psr7": "^1.7 || ^2.0",
                "php": "^7.2.5 || ^8.0",
                "psr/http-client": "^1.0"
            },
            "provide": {
                "psr/http-client-implementation": "1.0"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.4.1",
                "ext-curl": "*",
                "php-http/client-integration-tests": "^3.0",
                "phpunit/phpunit": "^8.5.5 || ^9.3.5",
                "psr/log": "^1.1"
            },
            "suggest": {
                "ext-curl": "Required for CURL handler support",
                "ext-intl": "Required for Internationalized Domain Name (IDN) support",
                "psr/log": "Required for using the Log middleware"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "7.3-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\": "src/"
                },
                "files": [
                    "src/functions_include.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "Márk Sági-Kazár",
                    "email": "mark.sagikazar@gmail.com",
                    "homepage": "https://sagikazarmark.hu"
                }
            ],
            "description": "Guzzle is a PHP HTTP client library",
            "homepage": "http://guzzlephp.org/",
            "keywords": [
                "client",
                "curl",
                "framework",
                "http",
                "http client",
                "psr-18",
                "psr-7",
                "rest",
                "web service"
            ],
            "support": {
                "issues": "https://github.com/guzzle/guzzle/issues",
                "source": "https://github.com/guzzle/guzzle/tree/7.3.0"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://github.com/alexeyshockov",
                    "type": "github"
                },
                {
                    "url": "https://github.com/gmponos",
                    "type": "github"
                }
            ],
            "time": "2021-03-23T11:33:13+00:00"
        },
        {
            "name": "guzzlehttp/oauth-subscriber",
            "version": "0.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/oauth-subscriber.git",
                "reference": "47b4b9cd0b31a6733a3cc500d4285a8363502485"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/oauth-subscriber/zipball/47b4b9cd0b31a6733a3cc500d4285a8363502485",
                "reference": "47b4b9cd0b31a6733a3cc500d4285a8363502485",
                "shasum": ""
            },
            "require": {
                "guzzlehttp/guzzle": "^6.0|^7.0",
                "php": ">=5.5.0"
            },
            "require-dev": {
                "phpunit/phpunit": "~4.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.4-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Subscriber\\Oauth\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                }
            ],
            "description": "Guzzle OAuth 1.0 subscriber",
            "homepage": "http://guzzlephp.org/",
            "keywords": [
                "Guzzle",
                "oauth"
            ],
            "support": {
                "issues": "https://github.com/guzzle/oauth-subscriber/issues",
                "source": "https://github.com/guzzle/oauth-subscriber/tree/0.4.0"
            },
            "time": "2020-07-01T06:28:13+00:00"
        },
        {
            "name": "guzzlehttp/promises",
            "version": "1.4.1",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/promises.git",
                "reference": "8e7d04f1f6450fef59366c399cfad4b9383aa30d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/promises/zipball/8e7d04f1f6450fef59366c399cfad4b9383aa30d",
                "reference": "8e7d04f1f6450fef59366c399cfad4b9383aa30d",
                "shasum": ""
            },
            "require": {
                "php": ">=5.5"
            },
            "require-dev": {
                "symfony/phpunit-bridge": "^4.4 || ^5.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.4-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Promise\\": "src/"
                },
                "files": [
                    "src/functions_include.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                }
            ],
            "description": "Guzzle promises library",
            "keywords": [
                "promise"
            ],
            "support": {
                "issues": "https://github.com/guzzle/promises/issues",
                "source": "https://github.com/guzzle/promises/tree/1.4.1"
            },
            "time": "2021-03-07T09:25:29+00:00"
        },
        {
            "name": "guzzlehttp/psr7",
            "version": "1.8.1",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/psr7.git",
                "reference": "35ea11d335fd638b5882ff1725228b3d35496ab1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/psr7/zipball/35ea11d335fd638b5882ff1725228b3d35496ab1",
                "reference": "35ea11d335fd638b5882ff1725228b3d35496ab1",
                "shasum": ""
            },
            "require": {
                "php": ">=5.4.0",
                "psr/http-message": "~1.0",
                "ralouphie/getallheaders": "^2.0.5 || ^3.0.0"
            },
            "provide": {
                "psr/http-message-implementation": "1.0"
            },
            "require-dev": {
                "ext-zlib": "*",
                "phpunit/phpunit": "~4.8.36 || ^5.7.27 || ^6.5.14 || ^7.5.20 || ^8.5.8 || ^9.3.10"
            },
            "suggest": {
                "laminas/laminas-httphandlerrunner": "Emit PSR-7 responses"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.7-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Psr7\\": "src/"
                },
                "files": [
                    "src/functions_include.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "Tobias Schultze",
                    "homepage": "https://github.com/Tobion"
                }
            ],
            "description": "PSR-7 message implementation that also provides common utility methods",
            "keywords": [
                "http",
                "message",
                "psr-7",
                "request",
                "response",
                "stream",
                "uri",
                "url"
            ],
            "support": {
                "issues": "https://github.com/guzzle/psr7/issues",
                "source": "https://github.com/guzzle/psr7/tree/1.8.1"
            },
            "time": "2021-03-21T16:25:00+00:00"
        },
        {
            "name": "keboola-legacy/json-parser",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/legacy-php-jsonparser.git",
                "reference": "8c574cc9f71ed3892455a9cdbcf54d05d74a4ef8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/legacy-php-jsonparser/zipball/8c574cc9f71ed3892455a9cdbcf54d05d74a4ef8",
                "reference": "8c574cc9f71ed3892455a9cdbcf54d05d74a4ef8",
                "shasum": ""
            },
            "require": {
                "keboola/php-csvtable": "^1.1",
                "keboola/php-utils": "^4.1",
                "monolog/monolog": "^2.2",
                "php": ">=7.4"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "dev-master",
                "phpunit/phpunit": "^5.2",
                "squizlabs/php_codesniffer": "^2.5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "KeboolaLegacy\\Json\\": "src/KeboolaLegacy/Json"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ondrej Vana",
                    "email": "kachna@keboola.cz"
                }
            ],
            "description": "Keboola JSON to CSV parser",
            "keywords": [
                "converter",
                "csv",
                "json",
                "json2csv",
                "parser"
            ],
            "support": {
                "issues": "https://github.com/keboola/legacy-php-jsonparser/issues",
                "source": "https://github.com/keboola/legacy-php-jsonparser/tree/3.0.0"
            },
            "abandoned": "keboola/json-parser",
            "time": "2021-01-15T15:41:37+00:00"
        },
        {
            "name": "keboola/codebuilder",
            "version": "1.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-codebuilder.git",
                "reference": "44959f4dfd1b893a7f3bc3f5b827573fc417ec5f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-codebuilder/zipball/44959f4dfd1b893a7f3bc3f5b827573fc417ec5f",
                "reference": "44959f4dfd1b893a7f3bc3f5b827573fc417ec5f",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/php-utils": "^4.1",
                "php": ">=7.4"
            },
            "require-dev": {
                "keboola/coding-standard": ">=9.0",
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpstan/phpstan": "^0.12",
                "phpunit/phpunit": "^9.5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Code\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Execute JSON defined user scripts",
            "keywords": [
                "script",
                "user",
                "user-script"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-codebuilder/issues",
                "source": "https://github.com/keboola/php-codebuilder/tree/1.0.2"
            },
            "time": "2024-11-20T10:34:26+00:00"
        },
        {
            "name": "keboola/csv",
            "version": "2.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csv.git",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csv/zipball/eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "ext-json": "*",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Csv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola CSV reader and writer",
            "homepage": "http://keboola.com",
            "keywords": [
                "csv",
                "rfc4180"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csv/issues",
                "source": "https://github.com/keboola/php-csv/tree/master"
            },
            "time": "2020-07-28T09:27:05+00:00"
        },
        {
            "name": "keboola/csvmap",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csvmap.git",
                "reference": "87ebc40091b3fc14ebda382fbdd6ad7f69639b5f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csvmap/zipball/87ebc40091b3fc14ebda382fbdd6ad7f69639b5f",
                "reference": "87ebc40091b3fc14ebda382fbdd6ad7f69639b5f",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/csv": "^2.1",
                "keboola/php-csvtable": "^1.1",
                "keboola/php-utils": "^4.1",
                "php": "^7.1"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "dev-master",
                "phpunit/phpunit": ">=7.5",
                "squizlabs/php_codesniffer": "~2.7"
            },
            "type": "library",
            "autoload": {
                "psr-0": {
                    "Keboola\\CsvMap": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ondrej Vana",
                    "email": "kachna@keboola.cz"
                }
            ],
            "description": "Flatten an object into a CSV file(s)",
            "keywords": [
                "csv",
                "flatten",
                "object"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csvmap/issues",
                "source": "https://github.com/keboola/php-csvmap/tree/1.1.0"
            },
            "time": "2020-10-29T12:19:34+00:00"
        },
        {
            "name": "keboola/filter",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-filter.git",
                "reference": "e21735865f7eac769793559c90bc053fe4c7b86d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-filter/zipball/e21735865f7eac769793559c90bc053fe4c7b86d",
                "reference": "e21735865f7eac769793559c90bc053fe4c7b86d",
                "shasum": ""
            },
            "require": {
                "keboola/php-utils": "^4.1",
                "php": ">=7.4"
            },
            "require-dev": {
                "keboola/coding-standard": ">=9.0",
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpstan/phpstan": "^0.12",
                "phpunit/phpunit": "^9.5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Filter\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Simple comparison filter",
            "keywords": [
                "expressions",
                "generic extractor"
            ],
            "support": {
                "source": "https://github.com/keboola/php-filter/tree/2.0.0"
            },
            "time": "2021-01-20T10:43:27+00:00"
        },
        {
            "name": "keboola/json-parser",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-jsonparser.git",
                "reference": "a8b93569f57ba1dae696729f74ffa8f79a0955df"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-jsonparser/zipball/a8b93569f57ba1dae696729f74ffa8f79a0955df",
                "reference": "a8b93569f57ba1dae696729f74ffa8f79a0955df",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/php-csvtable": "^1.1.1",
                "keboola/php-temp": "^2.0",
                "keboola/php-utils": "^4.1",
                "monolog/monolog": "^2.2",
                "php": ">=7.4"
            },
            "require-dev": {
                "keboola/coding-standard": ">=9.0",
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpstan/phpstan": "^0.12.14",
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Json\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola JSON to CSV parser",
            "keywords": [
                "converter",
                "csv",
                "json",
                "json2csv",
                "parser"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-jsonparser/issues",
                "source": "https://github.com/keboola/php-jsonparser/tree/3.0.0"
            },
            "time": "2021-01-14T12:37:59+00:00"
        },
        {
            "name": "keboola/juicer",
            "version": "5.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/juicer.git",
                "reference": "4cb9d1395c6ebeb1fe6c1f25aa5d88e7280e2bcd"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/juicer/zipball/4cb9d1395c6ebeb1fe6c1f25aa5d88e7280e2bcd",
                "reference": "4cb9d1395c6ebeb1fe6c1f25aa5d88e7280e2bcd",
                "shasum": ""
            },
            "require": {
                "ext-curl": "*",
                "ext-iconv": "*",
                "ext-json": "*",
                "guzzlehttp/guzzle": "^7.2",
                "keboola-legacy/json-parser": "^3.0",
                "keboola/codebuilder": "^1.0",
                "keboola/csvmap": "^1.1",
                "keboola/json-parser": "^3.0",
                "keboola/php-csvtable": "^1.1",
                "keboola/php-temp": "^2.0",
                "keboola/php-utils": "^4.1",
                "php": ">=7.4"
            },
            "require-dev": {
                "keboola/coding-standard": ">=9.0",
                "monolog/monolog": "^2.2",
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpstan/phpstan": "^0.12",
                "phpunit/phpunit": "^9.5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Juicer\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Generic Extractor Juicer",
            "keywords": [
                "generic extractor",
                "json",
                "rest"
            ],
            "support": {
                "issues": "https://github.com/keboola/juicer/issues",
                "source": "https://github.com/keboola/juicer/tree/5.1.0"
            },
            "time": "2023-09-05T11:21:25+00:00"
        },
        {
            "name": "keboola/php-csvtable",
            "version": "1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csvtable.git",
                "reference": "c5163f1b96c3e35f660b35218781621c789b1a28"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csvtable/zipball/c5163f1b96c3e35f660b35218781621c789b1a28",
                "reference": "c5163f1b96c3e35f660b35218781621c789b1a28",
                "shasum": ""
            },
            "require": {
                "keboola/csv": "^2.2",
                "keboola/php-temp": "^2.0",
                "php": "^7.1"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "dev-master",
                "phpunit/phpunit": ">=7.5"
            },
            "type": "library",
            "autoload": {
                "psr-0": {
                    "Keboola\\CsvTable": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ondrej Vana",
                    "email": "kachna@keboola.cz"
                }
            ],
            "description": "CSV file class with Keboola StorageApi extensions",
            "keywords": [
                "csv",
                "storageapi",
                "table"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csvtable/issues",
                "source": "https://github.com/keboola/php-csvtable/tree/1.2.0"
            },
            "time": "2021-01-20T10:46:15+00:00"
        },
        {
            "name": "keboola/php-temp",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/filesystem": ">2.8"
            },
            "require-dev": {
                "infection/infection": "^0.12",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^8.0",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0|^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Temp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Temp library handles application temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-temp/issues",
                "source": "https://github.com/keboola/php-temp/tree/2.0.1"
            },
            "time": "2019-04-26T07:18:24+00:00"
        },
        {
            "name": "keboola/php-utils",
            "version": "4.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-utils.git",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-utils/zipball/f5be83a50b5c4858f5698747e8a795048a89c382",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382",
                "shasum": ""
            },
            "require": {
                "keboola/sanitizer": "^0.1",
                "php": ">=5.6.0",
                "seld/jsonlint": "^1.4"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "~0.2",
                "phpunit/phpunit": "~5.0",
                "squizlabs/php_codesniffer": "~2.4"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/Keboola/Utils/jsonDecode.php",
                    "src/Keboola/Utils/sanitizeUtf8.php",
                    "src/Keboola/Utils/objectToArray.php",
                    "src/Keboola/Utils/formatDateTime.php",
                    "src/Keboola/Utils/replaceDates.php",
                    "src/Keboola/Utils/replaceDatesInArray.php",
                    "src/Keboola/Utils/buildUrl.php",
                    "src/Keboola/Utils/httpBuildUrl.php",
                    "src/Keboola/Utils/returnBytes.php",
                    "src/Keboola/Utils/camelize.php",
                    "src/Keboola/Utils/getDataFromPath.php",
                    "src/Keboola/Utils/isValidDateTimeString.php",
                    "src/Keboola/Utils/flattenArray.php",
                    "src/Keboola/Utils/arrayToObject.php",
                    "src/Keboola/Utils/isEmptyObject.php",
                    "src/Keboola/Utils/stripInvalidUtf16.php",
                    "src/Keboola/Utils/toAscii.php",
                    "src/Keboola/Utils/sanitizeColumnName.php",
                    "src/Keboola/Utils/formatBytes.php"
                ],
                "psr-0": {
                    "Keboola\\Utils": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Misc utility functions",
            "keywords": [
                "utility"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-utils/issues",
                "source": "https://github.com/keboola/php-utils/tree/master"
            },
            "time": "2019-10-04T20:55:45+00:00"
        },
        {
            "name": "keboola/retry",
            "version": "0.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/retry.git",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/retry/zipball/afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "psr/log": "^1.1"
            },
            "replace": {
                "vkartaviy/retry": "*"
            },
            "require-dev": {
                "keboola/coding-standard": "^7.0",
                "phpstan/phpstan-shim": "^0.10",
                "phpunit/phpunit": "7.*"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Retry\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola Dev",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Library for repeatable and retryable operations",
            "keywords": [
                "backoff",
                "proxy",
                "repeat",
                "retry"
            ],
            "support": {
                "issues": "https://github.com/keboola/retry/issues",
                "source": "https://github.com/keboola/retry/tree/0.5.0"
            },
            "time": "2020-01-31T14:20:00+00:00"
        },
        {
            "name": "keboola/sanitizer",
            "version": "0.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/sanitizer.git",
                "reference": "6edda00cd177409a33f180b8f12bdad89bf893c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/sanitizer/zipball/6edda00cd177409a33f180b8f12bdad89bf893c5",
                "reference": "6edda00cd177409a33f180b8f12bdad89bf893c5",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Utils\\Sanitizer\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Column name sanitizer",
            "support": {
                "issues": "https://github.com/keboola/sanitizer/issues",
                "source": "https://github.com/keboola/sanitizer/tree/0.1.0"
            },
            "time": "2019-01-11T10:21:17+00:00"
        },
        {
            "name": "kevinrob/guzzle-cache-middleware",
            "version": "v3.3.1",
            "source": {
                "type": "git",
                "url": "https://github.com/Kevinrob/guzzle-cache-middleware.git",
                "reference": "f978b8da7484a16e26589a5518d6bacc6ccdee99"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Kevinrob/guzzle-cache-middleware/zipball/f978b8da7484a16e26589a5518d6bacc6ccdee99",
                "reference": "f978b8da7484a16e26589a5518d6bacc6ccdee99",
                "shasum": ""
            },
            "require": {
                "php": ">=5.5.0"
            },
            "require-dev": {
                "cache/array-adapter": "^0.4 || ^0.5 || ^1.0",
                "cache/simple-cache-bridge": "^0.1 || ^1.0",
                "doctrine/cache": "^1.0",
                "guzzlehttp/guzzle": "^6.0",
                "illuminate/cache": "^5.0",
                "league/flysystem": "^1.0",
                "phpunit/phpunit": "^4.8.36 || ^5.0",
                "psr/cache": "^1.0",
                "symfony/phpunit-bridge": "^4.4 || ^5.0"
            },
            "suggest": {
                "doctrine/cache": "This library has a lot of ready-to-use cache storage (to be used with Kevinrob\\GuzzleCache\\Storage\\DoctrineCacheStorage).",
                "guzzlehttp/guzzle": "For using this library. It was created for Guzzle6 (but you can use it with any PSR-7 HTTP client).",
                "laravel/framework": "To be used with Kevinrob\\GuzzleCache\\Storage\\LaravelCacheStorage",
                "league/flysystem": "To be used with Kevinrob\\GuzzleCache\\Storage\\FlysystemStorage",
                "psr/cache": "To be used with Kevinrob\\GuzzleCache\\Storage\\Psr6CacheStorage",
                "psr/simple-cache": "To be used with Kevinrob\\GuzzleCache\\Storage\\Psr16CacheStorage"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Kevinrob\\GuzzleCache\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Kevin Robatel",
                    "email": "kevinrob2@gmail.com",
                    "homepage": "https://github.com/Kevinrob"
                }
            ],
            "description": "A HTTP/1.1 Cache for Guzzle 6. It's a simple Middleware to be added in the HandlerStack. (RFC 7234)",
            "homepage": "https://github.com/Kevinrob/guzzle-cache-middleware",
            "keywords": [
                "Etag",
                "Flysystem",
                "Guzzle",
                "cache",
                "cache-control",
                "doctrine",
                "expiration",
                "guzzle6",
                "handler",
                "http",
                "http 1.1",
                "middleware",
                "performance",
                "php",
                "promise",
                "psr6",
                "psr7",
                "rfc7234",
                "validation"
            ],
            "support": {
                "issues": "https://github.com/Kevinrob/guzzle-cache-middleware/issues",
                "source": "https://github.com/Kevinrob/guzzle-cache-middleware/tree/v3.3.1"
            },
            "time": "2020-02-14T11:17:02+00:00"
        },
        {
            "name": "league/flysystem",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/flysystem.git",
                "reference": "9be3b16c877d477357c015cec057548cf9b2a14a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/flysystem/zipball/9be3b16c877d477357c015cec057548cf9b2a14a",
                "reference": "9be3b16c877d477357c015cec057548cf9b2a14a",
                "shasum": ""
            },
            "require": {
                "ext-fileinfo": "*",
                "league/mime-type-detection": "^1.3",
                "php": "^7.2.5 || ^8.0"
            },
            "conflict": {
                "league/flysystem-sftp": "<1.0.6"
            },
            "require-dev": {
                "phpspec/prophecy": "^1.11.1",
                "phpunit/phpunit": "^8.5.8"
            },
            "suggest": {
                "ext-fileinfo": "Required for MimeType",
                "ext-ftp": "Allows you to use FTP server storage",
                "ext-openssl": "Allows you to use FTPS server storage",
                "league/flysystem-aws-s3-v2": "Allows you to use S3 storage with AWS SDK v2",
                "league/flysystem-aws-s3-v3": "Allows you to use S3 storage with AWS SDK v3",
                "league/flysystem-azure": "Allows you to use Windows Azure Blob storage",
                "league/flysystem-cached-adapter": "Flysystem adapter decorator for metadata caching",
                "league/flysystem-eventable-filesystem": "Allows you to use EventableFilesystem",
                "league/flysystem-rackspace": "Allows you to use Rackspace Cloud Files",
                "league/flysystem-sftp": "Allows you to use SFTP server storage via phpseclib",
                "league/flysystem-webdav": "Allows you to use WebDAV storage",
                "league/flysystem-ziparchive": "Allows you to use ZipArchive adapter",
                "spatie/flysystem-dropbox": "Allows you to use Dropbox storage",
                "srmklive/flysystem-dropbox-v2": "Allows you to use Dropbox storage for PHP 5 applications"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.1-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "League\\Flysystem\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Frank de Jonge",
                    "email": "info@frenky.net"
                }
            ],
            "description": "Filesystem abstraction: Many filesystems, one API.",
            "keywords": [
                "Cloud Files",
                "WebDAV",
                "abstraction",
                "aws",
                "cloud",
                "copy.com",
                "dropbox",
                "file systems",
                "files",
                "filesystem",
                "filesystems",
                "ftp",
                "rackspace",
                "remote",
                "s3",
                "sftp",
                "storage"
            ],
            "support": {
                "issues": "https://github.com/thephpleague/flysystem/issues",
                "source": "https://github.com/thephpleague/flysystem/tree/1.x"
            },
            "funding": [
                {
                    "url": "https://offset.earth/frankdejonge",
                    "type": "other"
                }
            ],
            "time": "2020-08-23T07:39:11+00:00"
        },
        {
            "name": "league/mime-type-detection",
            "version": "1.7.0",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/mime-type-detection.git",
                "reference": "3b9dff8aaf7323590c1d2e443db701eb1f9aa0d3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/mime-type-detection/zipball/3b9dff8aaf7323590c1d2e443db701eb1f9aa0d3",
                "reference": "3b9dff8aaf7323590c1d2e443db701eb1f9aa0d3",
                "shasum": ""
            },
            "require": {
                "ext-fileinfo": "*",
                "php": "^7.2 || ^8.0"
            },
            "require-dev": {
                "friendsofphp/php-cs-fixer": "^2.18",
                "phpstan/phpstan": "^0.12.68",
                "phpunit/phpunit": "^8.5.8 || ^9.3"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "League\\MimeTypeDetection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Frank de Jonge",
                    "email": "info@frankdejonge.nl"
                }
            ],
            "description": "Mime-type detection for Flysystem",
            "support": {
                "issues": "https://github.com/thephpleague/mime-type-detection/issues",
                "source": "https://github.com/thephpleague/mime-type-detection/tree/1.7.0"
            },
            "funding": [
                {
                    "url": "https://github.com/frankdejonge",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/league/flysystem",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-18T20:58:21+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "1cb1cde8e8dd0f70cc0fe51354a59acad9302084"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/1cb1cde8e8dd0f70cc0fe51354a59acad9302084",
                "reference": "1cb1cde8e8dd0f70cc0fe51354a59acad9302084",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2",
                "psr/log": "^1.0.1"
            },
            "provide": {
                "psr/log-implementation": "1.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "elasticsearch/elasticsearch": "^7",
                "graylog2/gelf-php": "^1.4.2",
                "mongodb/mongodb": "^1.8",
                "php-amqplib/php-amqplib": "~2.4",
                "php-console/php-console": "^3.1.3",
                "phpspec/prophecy": "^1.6.1",
                "phpstan/phpstan": "^0.12.59",
                "phpunit/phpunit": "^8.5",
                "predis/predis": "^1.1",
                "rollbar/rollbar": "^1.3",
                "ruflin/elastica": ">=0.90 <7.0.1",
                "swiftmailer/swiftmailer": "^5.3|^6.0"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-mbstring": "Allow to work properly with unicode symbols",
                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "php-console/php-console": "Allow sending log messages to Google Chrome",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "https://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "https://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/monolog/issues",
                "source": "https://github.com/Seldaek/monolog/tree/2.2.0"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/monolog/monolog",
                    "type": "tidelift"
                }
            ],
            "time": "2020-12-14T13:15:25+00:00"
        },
        {
            "name": "mtdowling/jmespath.php",
            "version": "2.6.1",
            "source": {
                "type": "git",
                "url": "https://github.com/jmespath/jmespath.php.git",
                "reference": "9b87907a81b87bc76d19a7fb2d61e61486ee9edb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/jmespath/jmespath.php/zipball/9b87907a81b87bc76d19a7fb2d61e61486ee9edb",
                "reference": "9b87907a81b87bc76d19a7fb2d61e61486ee9edb",
                "shasum": ""
            },
            "require": {
                "php": "^5.4 || ^7.0 || ^8.0",
                "symfony/polyfill-mbstring": "^1.17"
            },
            "require-dev": {
                "composer/xdebug-handler": "^1.4 || ^2.0",
                "phpunit/phpunit": "^4.8.36 || ^7.5.15"
            },
            "bin": [
                "bin/jp.php"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.6-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "JmesPath\\": "src/"
                },
                "files": [
                    "src/JmesPath.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                }
            ],
            "description": "Declaratively specify how to extract elements from a JSON document",
            "keywords": [
                "json",
                "jsonpath"
            ],
            "support": {
                "issues": "https://github.com/jmespath/jmespath.php/issues",
                "source": "https://github.com/jmespath/jmespath.php/tree/2.6.1"
            },
            "time": "2021-06-14T00:11:39+00:00"
        },
        {
            "name": "psr/container",
            "version": "1.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/container.git",
                "reference": "8622567409010282b7aeebe4bb841fe98b58dcaf"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/container/zipball/8622567409010282b7aeebe4bb841fe98b58dcaf",
                "reference": "8622567409010282b7aeebe4bb841fe98b58dcaf",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Psr\\Container\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common Container Interface (PHP FIG PSR-11)",
            "homepage": "https://github.com/php-fig/container",
            "keywords": [
                "PSR-11",
                "container",
                "container-interface",
                "container-interop",
                "psr"
            ],
            "support": {
                "issues": "https://github.com/php-fig/container/issues",
                "source": "https://github.com/php-fig/container/tree/1.1.1"
            },
            "time": "2021-03-05T17:36:06+00:00"
        },
        {
            "name": "psr/http-client",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-client.git",
                "reference": "2dfb5f6c5eff0e91e20e913f8c5452ed95b86621"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-client/zipball/2dfb5f6c5eff0e91e20e913f8c5452ed95b86621",
                "reference": "2dfb5f6c5eff0e91e20e913f8c5452ed95b86621",
                "shasum": ""
            },
            "require": {
                "php": "^7.0 || ^8.0",
                "psr/http-message": "^1.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Client\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP clients",
            "homepage": "https://github.com/php-fig/http-client",
            "keywords": [
                "http",
                "http-client",
                "psr",
                "psr-18"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-client/tree/master"
            },
            "time": "2020-06-29T06:28:15+00:00"
        },
        {
            "name": "psr/http-message",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-message.git",
                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-message/zipball/f6561bf28d520154e4b0ec72be95418abe6d9363",
                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Message\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP messages",
            "homepage": "https://github.com/php-fig/http-message",
            "keywords": [
                "http",
                "http-message",
                "psr",
                "psr-7",
                "request",
                "response"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-message/tree/master"
            },
            "time": "2016-08-06T14:39:51+00:00"
        },
        {
            "name": "psr/log",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/0f73288fd15629204f9d42b7055f72dacbe811fc",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "Psr/Log/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "support": {
                "source": "https://github.com/php-fig/log/tree/1.1.3"
            },
            "time": "2020-03-23T09:12:05+00:00"
        },
        {
            "name": "ralouphie/getallheaders",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/ralouphie/getallheaders.git",
                "reference": "120b605dfeb996808c31b6477290a714d356e822"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822",
                "reference": "120b605dfeb996808c31b6477290a714d356e822",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "php-coveralls/php-coveralls": "^2.1",
                "phpunit/phpunit": "^5 || ^6.5"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/getallheaders.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ralph Khattar",
                    "email": "ralph.khattar@gmail.com"
                }
            ],
            "description": "A polyfill for getallheaders.",
            "support": {
                "issues": "https://github.com/ralouphie/getallheaders/issues",
                "source": "https://github.com/ralouphie/getallheaders/tree/develop"
            },
            "time": "2019-03-08T08:55:37+00:00"
        },
        {
            "name": "seld/jsonlint",
            "version": "1.8.3",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/jsonlint.git",
                "reference": "9ad6ce79c342fbd44df10ea95511a1b24dee5b57"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/jsonlint/zipball/9ad6ce79c342fbd44df10ea95511a1b24dee5b57",
                "reference": "9ad6ce79c342fbd44df10ea95511a1b24dee5b57",
                "shasum": ""
            },
            "require": {
                "php": "^5.3 || ^7.0 || ^8.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0"
            },
            "bin": [
                "bin/jsonlint"
            ],
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Seld\\JsonLint\\": "src/Seld/JsonLint/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "http://seld.be"
                }
            ],
            "description": "JSON Linter",
            "keywords": [
                "json",
                "linter",
                "parser",
                "validator"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/jsonlint/issues",
                "source": "https://github.com/Seldaek/jsonlint/tree/1.8.3"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/seld/jsonlint",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-11T09:19:24+00:00"
        },
        {
            "name": "symfony/config",
            "version": "v5.2.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/config.git",
                "reference": "212d54675bf203ff8aef7d8cee8eecfb72f4a263"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/config/zipball/212d54675bf203ff8aef7d8cee8eecfb72f4a263",
                "reference": "212d54675bf203ff8aef7d8cee8eecfb72f4a263",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/deprecation-contracts": "^2.1",
                "symfony/filesystem": "^4.4|^5.0",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-php80": "^1.15"
            },
            "conflict": {
                "symfony/finder": "<4.4"
            },
            "require-dev": {
                "symfony/event-dispatcher": "^4.4|^5.0",
                "symfony/finder": "^4.4|^5.0",
                "symfony/messenger": "^4.4|^5.0",
                "symfony/service-contracts": "^1.1|^2",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "symfony/yaml": "To use the yaml reference dumper"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Config\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Helps you find, load, combine, autofill and validate configuration values of any kind",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/config/tree/v5.2.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-02-23T23:58:19+00:00"
        },
        {
            "name": "symfony/console",
            "version": "v5.2.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/console.git",
                "reference": "35f039df40a3b335ebf310f244cb242b3a83ac8d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/console/zipball/35f039df40a3b335ebf310f244cb242b3a83ac8d",
                "reference": "35f039df40a3b335ebf310f244cb242b3a83ac8d",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-mbstring": "~1.0",
                "symfony/polyfill-php73": "^1.8",
                "symfony/polyfill-php80": "^1.15",
                "symfony/service-contracts": "^1.1|^2",
                "symfony/string": "^5.1"
            },
            "conflict": {
                "symfony/dependency-injection": "<4.4",
                "symfony/dotenv": "<5.1",
                "symfony/event-dispatcher": "<4.4",
                "symfony/lock": "<4.4",
                "symfony/process": "<4.4"
            },
            "provide": {
                "psr/log-implementation": "1.0"
            },
            "require-dev": {
                "psr/log": "~1.0",
                "symfony/config": "^4.4|^5.0",
                "symfony/dependency-injection": "^4.4|^5.0",
                "symfony/event-dispatcher": "^4.4|^5.0",
                "symfony/lock": "^4.4|^5.0",
                "symfony/process": "^4.4|^5.0",
                "symfony/var-dumper": "^4.4|^5.0"
            },
            "suggest": {
                "psr/log": "For using the console logger",
                "symfony/event-dispatcher": "",
                "symfony/lock": "",
                "symfony/process": ""
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Console\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Eases the creation of beautiful and testable command line interfaces",
            "homepage": "https://symfony.com",
            "keywords": [
                "cli",
                "command line",
                "console",
                "terminal"
            ],
            "support": {
                "source": "https://github.com/symfony/console/tree/v5.2.6"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-03-28T09:42:18+00:00"
        },
        {
            "name": "symfony/deprecation-contracts",
            "version": "v2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/deprecation-contracts.git",
                "reference": "5fa56b4074d1ae755beb55617ddafe6f5d78f665"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/5fa56b4074d1ae755beb55617ddafe6f5d78f665",
                "reference": "5fa56b4074d1ae755beb55617ddafe6f5d78f665",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.2-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "files": [
                    "function.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "A generic function and convention to trigger deprecation notices",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/deprecation-contracts/tree/master"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-09-07T11:33:47+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v5.2.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "8c86a82f51658188119e62cff0a050a12d09836f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/8c86a82f51658188119e62cff0a050a12d09836f",
                "reference": "8c86a82f51658188119e62cff0a050a12d09836f",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-ctype": "~1.8"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides basic utilities for the filesystem",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/filesystem/tree/v5.2.6"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-03-28T14:30:26+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v5.2.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "0d639a0943822626290d169965804f79400e6a04"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/0d639a0943822626290d169965804f79400e6a04",
                "reference": "0d639a0943822626290d169965804f79400e6a04",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Finds files and directories via an intuitive fluent interface",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/finder/tree/v5.2.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-02-15T18:55:04+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.22.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "c6c942b1ac76c82448322025e084cadc56048b4e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/c6c942b1ac76c82448322025e084cadc56048b4e",
                "reference": "c6c942b1ac76c82448322025e084cadc56048b4e",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.22.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-07T16:49:33+00:00"
        },
        {
            "name": "symfony/polyfill-intl-grapheme",
            "version": "v1.22.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-grapheme.git",
                "reference": "5601e09b69f26c1828b13b6bb87cb07cddba3170"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-grapheme/zipball/5601e09b69f26c1828b13b6bb87cb07cddba3170",
                "reference": "5601e09b69f26c1828b13b6bb87cb07cddba3170",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Grapheme\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's grapheme_* functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "grapheme",
                "intl",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-grapheme/tree/v1.22.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-22T09:19:47+00:00"
        },
        {
            "name": "symfony/polyfill-intl-normalizer",
            "version": "v1.22.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-normalizer.git",
                "reference": "43a0283138253ed1d48d352ab6d0bdb3f809f248"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/43a0283138253ed1d48d352ab6d0bdb3f809f248",
                "reference": "43a0283138253ed1d48d352ab6d0bdb3f809f248",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Normalizer\\": ""
                },
                "files": [
                    "bootstrap.php"
                ],
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's Normalizer class and related functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "intl",
                "normalizer",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-normalizer/tree/v1.22.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-22T09:19:47+00:00"
        },
        {
            "name": "symfony/polyfill-mbstring",
            "version": "v1.22.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-mbstring.git",
                "reference": "5232de97ee3b75b0360528dae24e73db49566ab1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/5232de97ee3b75b0360528dae24e73db49566ab1",
                "reference": "5232de97ee3b75b0360528dae24e73db49566ab1",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-mbstring": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Mbstring\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for the Mbstring extension",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "mbstring",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.22.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-22T09:19:47+00:00"
        },
        {
            "name": "symfony/polyfill-php73",
            "version": "v1.22.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php73.git",
                "reference": "a678b42e92f86eca04b7fa4c0f6f19d097fb69e2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php73/zipball/a678b42e92f86eca04b7fa4c0f6f19d097fb69e2",
                "reference": "a678b42e92f86eca04b7fa4c0f6f19d097fb69e2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Php73\\": ""
                },
                "files": [
                    "bootstrap.php"
                ],
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 7.3+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php73/tree/v1.22.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-07T16:49:33+00:00"
        },
        {
            "name": "symfony/polyfill-php80",
            "version": "v1.22.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php80.git",
                "reference": "dc3063ba22c2a1fd2f45ed856374d79114998f91"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/dc3063ba22c2a1fd2f45ed856374d79114998f91",
                "reference": "dc3063ba22c2a1fd2f45ed856374d79114998f91",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Php80\\": ""
                },
                "files": [
                    "bootstrap.php"
                ],
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ion Bazan",
                    "email": "ion.bazan@gmail.com"
                },
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php80/tree/v1.22.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-07T16:49:33+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v5.4.39",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "85a554acd7c28522241faf2e97b9541247a0d3d5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/85a554acd7c28522241faf2e97b9541247a0d3d5",
                "reference": "85a554acd7c28522241faf2e97b9541247a0d3d5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-php80": "^1.16"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Executes commands in sub-processes",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/process/tree/v5.4.39"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-18T08:26:06+00:00"
        },
        {
            "name": "symfony/service-contracts",
            "version": "v2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/service-contracts.git",
                "reference": "d15da7ba4957ffb8f1747218be9e1a121fd298a1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/service-contracts/zipball/d15da7ba4957ffb8f1747218be9e1a121fd298a1",
                "reference": "d15da7ba4957ffb8f1747218be9e1a121fd298a1",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "psr/container": "^1.0"
            },
            "suggest": {
                "symfony/service-implementation": ""
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.2-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Contracts\\Service\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Generic abstractions related to writing services",
            "homepage": "https://symfony.com",
            "keywords": [
                "abstractions",
                "contracts",
                "decoupling",
                "interfaces",
                "interoperability",
                "standards"
            ],
            "support": {
                "source": "https://github.com/symfony/service-contracts/tree/master"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-09-07T11:33:47+00:00"
        },
        {
            "name": "symfony/string",
            "version": "v5.2.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/string.git",
                "reference": "ad0bd91bce2054103f5eaa18ebeba8d3bc2a0572"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/string/zipball/ad0bd91bce2054103f5eaa18ebeba8d3bc2a0572",
                "reference": "ad0bd91bce2054103f5eaa18ebeba8d3bc2a0572",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-intl-grapheme": "~1.0",
                "symfony/polyfill-intl-normalizer": "~1.0",
                "symfony/polyfill-mbstring": "~1.0",
                "symfony/polyfill-php80": "~1.15"
            },
            "require-dev": {
                "symfony/error-handler": "^4.4|^5.0",
                "symfony/http-client": "^4.4|^5.0",
                "symfony/translation-contracts": "^1.1|^2",
                "symfony/var-exporter": "^4.4|^5.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\String\\": ""
                },
                "files": [
                    "Resources/functions.php"
                ],
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides an object-oriented API to strings and deals with bytes, UTF-8 code points and grapheme clusters in a unified way",
            "homepage": "https://symfony.com",
            "keywords": [
                "grapheme",
                "i18n",
                "string",
                "unicode",
                "utf-8",
                "utf8"
            ],
            "support": {
                "source": "https://github.com/symfony/string/tree/v5.2.6"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-03-17T17:12:15+00:00"
        },
        {
            "name": "symfony/translation-contracts",
            "version": "v2.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/translation-contracts.git",
                "reference": "e2eaa60b558f26a4b0354e1bbb25636efaaad105"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/translation-contracts/zipball/e2eaa60b558f26a4b0354e1bbb25636efaaad105",
                "reference": "e2eaa60b558f26a4b0354e1bbb25636efaaad105",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5"
            },
            "suggest": {
                "symfony/translation-implementation": ""
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.3-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Contracts\\Translation\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Generic abstractions related to translation",
            "homepage": "https://symfony.com",
            "keywords": [
                "abstractions",
                "contracts",
                "decoupling",
                "interfaces",
                "interoperability",
                "standards"
            ],
            "support": {
                "source": "https://github.com/symfony/translation-contracts/tree/v2.3.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-09-28T13:05:58+00:00"
        },
        {
            "name": "symfony/validator",
            "version": "v5.2.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/validator.git",
                "reference": "67354644f9baba3cc122134c255b7461b7e0fe31"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/validator/zipball/67354644f9baba3cc122134c255b7461b7e0fe31",
                "reference": "67354644f9baba3cc122134c255b7461b7e0fe31",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/deprecation-contracts": "^2.1",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-mbstring": "~1.0",
                "symfony/polyfill-php73": "~1.0",
                "symfony/polyfill-php80": "^1.15",
                "symfony/translation-contracts": "^1.1|^2"
            },
            "conflict": {
                "doctrine/lexer": "<1.0.2",
                "phpunit/phpunit": "<5.4.3",
                "symfony/dependency-injection": "<4.4",
                "symfony/expression-language": "<5.1",
                "symfony/http-kernel": "<4.4",
                "symfony/intl": "<4.4",
                "symfony/translation": "<4.4",
                "symfony/yaml": "<4.4"
            },
            "require-dev": {
                "doctrine/annotations": "^1.10.4",
                "doctrine/cache": "~1.0",
                "egulias/email-validator": "^2.1.10|^3",
                "symfony/cache": "^4.4|^5.0",
                "symfony/config": "^4.4|^5.0",
                "symfony/console": "^4.4|^5.0",
                "symfony/dependency-injection": "^4.4|^5.0",
                "symfony/expression-language": "^5.1",
                "symfony/finder": "^4.4|^5.0",
                "symfony/http-client": "^4.4|^5.0",
                "symfony/http-foundation": "^4.4|^5.0",
                "symfony/http-kernel": "^4.4|^5.0",
                "symfony/intl": "^4.4|^5.0",
                "symfony/mime": "^4.4|^5.0",
                "symfony/property-access": "^4.4|^5.0",
                "symfony/property-info": "^4.4|^5.0",
                "symfony/translation": "^4.4|^5.0",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "doctrine/annotations": "For using the annotation mapping. You will also need doctrine/cache.",
                "doctrine/cache": "For using the default cached annotation reader.",
                "egulias/email-validator": "Strict (RFC compliant) email validation",
                "psr/cache-implementation": "For using the mapping cache.",
                "symfony/config": "",
                "symfony/expression-language": "For using the Expression validator and the ExpressionLanguageSyntax constraints",
                "symfony/http-foundation": "",
                "symfony/intl": "",
                "symfony/property-access": "For accessing properties within comparison constraints",
                "symfony/property-info": "To automatically add NotNull and Type constraints",
                "symfony/translation": "For translating validation errors.",
                "symfony/yaml": ""
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Validator\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides tools to validate values",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/validator/tree/v5.2.6"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-03-23T12:45:44+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "doctrine/instantiator",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/instantiator.git",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "require-dev": {
                "doctrine/coding-standard": "^8.0",
                "ext-pdo": "*",
                "ext-phar": "*",
                "phpbench/phpbench": "^0.13 || 1.0.0-alpha2",
                "phpstan/phpstan": "^0.12",
                "phpstan/phpstan-phpunit": "^0.12",
                "phpunit/phpunit": "^7.0 || ^8.0 || ^9.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com",
                    "homepage": "https://ocramius.github.io/"
                }
            ],
            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
            "keywords": [
                "constructor",
                "instantiate"
            ],
            "support": {
                "issues": "https://github.com/doctrine/instantiator/issues",
                "source": "https://github.com/doctrine/instantiator/tree/1.4.0"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-10T18:47:58+00:00"
        },
        {
            "name": "keboola/coding-standard",
            "version": "11.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "d7000bd2373b3cb4616ec96169e56739ea65d328"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/d7000bd2373b3cb4616ec96169e56739ea65d328",
                "reference": "d7000bd2373b3cb4616ec96169e56739ea65d328",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "^4.8.6",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "support": {
                "issues": "https://github.com/keboola/phpcs-standard/issues",
                "source": "https://github.com/keboola/phpcs-standard/tree/11.0.0"
            },
            "time": "2021-04-09T11:29:16+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.10.2",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "776f831124e9c62e1a2c601ecc52e776d8bb7220"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/776f831124e9c62e1a2c601ecc52e776d8bb7220",
                "reference": "776f831124e9c62e1a2c601ecc52e776d8bb7220",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "replace": {
                "myclabs/deep-copy": "self.version"
            },
            "require-dev": {
                "doctrine/collections": "^1.0",
                "doctrine/common": "^2.6",
                "phpunit/phpunit": "^7.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                },
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "support": {
                "issues": "https://github.com/myclabs/DeepCopy/issues",
                "source": "https://github.com/myclabs/DeepCopy/tree/1.10.2"
            },
            "funding": [
                {
                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-13T09:40:50+00:00"
        },
        {
            "name": "nikic/php-parser",
            "version": "v4.10.4",
            "source": {
                "type": "git",
                "url": "https://github.com/nikic/PHP-Parser.git",
                "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/c6d052fc58cb876152f89f532b95a8d7907e7f0e",
                "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e",
                "shasum": ""
            },
            "require": {
                "ext-tokenizer": "*",
                "php": ">=7.0"
            },
            "require-dev": {
                "ircmaxell/php-yacc": "^0.0.7",
                "phpunit/phpunit": "^6.5 || ^7.0 || ^8.0 || ^9.0"
            },
            "bin": [
                "bin/php-parse"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.9-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpParser\\": "lib/PhpParser"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Nikita Popov"
                }
            ],
            "description": "A PHP parser written in PHP",
            "keywords": [
                "parser",
                "php"
            ],
            "support": {
                "issues": "https://github.com/nikic/PHP-Parser/issues",
                "source": "https://github.com/nikic/PHP-Parser/tree/v4.10.4"
            },
            "time": "2020-12-20T10:01:03+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-phar": "*",
                "ext-xmlwriter": "*",
                "phar-io/version": "^3.0.1",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "support": {
                "issues": "https://github.com/phar-io/manifest/issues",
                "source": "https://github.com/phar-io/manifest/tree/master"
            },
            "time": "2020-06-27T14:33:11+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "3.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "bae7c545bef187884426f042434e561ab1ddb182"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/bae7c545bef187884426f042434e561ab1ddb182",
                "reference": "bae7c545bef187884426f042434e561ab1ddb182",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "support": {
                "issues": "https://github.com/phar-io/version/issues",
                "source": "https://github.com/phar-io/version/tree/3.1.0"
            },
            "time": "2021-02-23T14:00:09+00:00"
        },
        {
            "name": "php-parallel-lint/php-parallel-lint",
            "version": "v1.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-parallel-lint/PHP-Parallel-Lint.git",
                "reference": "772a954e5f119f6f5871d015b23eabed8cbdadfb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-parallel-lint/PHP-Parallel-Lint/zipball/772a954e5f119f6f5871d015b23eabed8cbdadfb",
                "reference": "772a954e5f119f6f5871d015b23eabed8cbdadfb",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "php": ">=5.3.0"
            },
            "replace": {
                "grogy/php-parallel-lint": "*",
                "jakub-onderka/php-parallel-lint": "*"
            },
            "require-dev": {
                "nette/tester": "^1.3 || ^2.0",
                "php-parallel-lint/php-console-highlighter": "~0.3",
                "squizlabs/php_codesniffer": "^3.5"
            },
            "suggest": {
                "php-parallel-lint/php-console-highlighter": "Highlight syntax in code snippet"
            },
            "bin": [
                "parallel-lint"
            ],
            "type": "library",
            "autoload": {
                "classmap": [
                    "./"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Jakub Onderka",
                    "email": "ahoj@jakubonderka.cz"
                }
            ],
            "description": "This tool check syntax of PHP files about 20x faster than serial check.",
            "homepage": "https://github.com/php-parallel-lint/PHP-Parallel-Lint",
            "support": {
                "issues": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/issues",
                "source": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/tree/v1.3.0"
            },
            "time": "2021-04-07T14:42:48+00:00"
        },
        {
            "name": "phpdocumentor/reflection-common",
            "version": "2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionCommon.git",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-2.x": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jaap van Otterdijk",
                    "email": "opensource@ijaap.nl"
                }
            ],
            "description": "Common reflection classes used by phpdocumentor to reflect the code structure",
            "homepage": "http://www.phpdoc.org",
            "keywords": [
                "FQSEN",
                "phpDocumentor",
                "phpdoc",
                "reflection",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionCommon/issues",
                "source": "https://github.com/phpDocumentor/ReflectionCommon/tree/2.x"
            },
            "time": "2020-06-27T09:03:43+00:00"
        },
        {
            "name": "phpdocumentor/reflection-docblock",
            "version": "5.2.2",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/069a785b2141f5bcf49f3e353548dc1cce6df556",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556",
                "shasum": ""
            },
            "require": {
                "ext-filter": "*",
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.2",
                "phpdocumentor/type-resolver": "^1.3",
                "webmozart/assert": "^1.9.1"
            },
            "require-dev": {
                "mockery/mockery": "~1.3.2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                },
                {
                    "name": "Jaap van Otterdijk",
                    "email": "account@ijaap.nl"
                }
            ],
            "description": "With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.",
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionDocBlock/issues",
                "source": "https://github.com/phpDocumentor/ReflectionDocBlock/tree/master"
            },
            "time": "2020-09-03T19:13:55+00:00"
        },
        {
            "name": "phpdocumentor/type-resolver",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/TypeResolver.git",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.0"
            },
            "require-dev": {
                "ext-tokenizer": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-1.x": "1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                }
            ],
            "description": "A PSR-5 based resolver of Class names, Types and Structural Element Names",
            "support": {
                "issues": "https://github.com/phpDocumentor/TypeResolver/issues",
                "source": "https://github.com/phpDocumentor/TypeResolver/tree/1.4.0"
            },
            "time": "2020-09-17T18:55:26+00:00"
        },
        {
            "name": "phpspec/prophecy",
            "version": "1.13.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpspec/prophecy.git",
                "reference": "be1996ed8adc35c3fd795488a653f4b518be70ea"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpspec/prophecy/zipball/be1996ed8adc35c3fd795488a653f4b518be70ea",
                "reference": "be1996ed8adc35c3fd795488a653f4b518be70ea",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.2",
                "php": "^7.2 || ~8.0, <8.1",
                "phpdocumentor/reflection-docblock": "^5.2",
                "sebastian/comparator": "^3.0 || ^4.0",
                "sebastian/recursion-context": "^3.0 || ^4.0"
            },
            "require-dev": {
                "phpspec/phpspec": "^6.0",
                "phpunit/phpunit": "^8.0 || ^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.11.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Prophecy\\": "src/Prophecy"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Konstantin Kudryashov",
                    "email": "ever.zet@gmail.com",
                    "homepage": "http://everzet.com"
                },
                {
                    "name": "Marcello Duarte",
                    "email": "marcello.duarte@gmail.com"
                }
            ],
            "description": "Highly opinionated mocking framework for PHP 5.3+",
            "homepage": "https://github.com/phpspec/prophecy",
            "keywords": [
                "Double",
                "Dummy",
                "fake",
                "mock",
                "spy",
                "stub"
            ],
            "support": {
                "issues": "https://github.com/phpspec/prophecy/issues",
                "source": "https://github.com/phpspec/prophecy/tree/1.13.0"
            },
            "time": "2021-03-17T13:42:18+00:00"
        },
        {
            "name": "phpstan/phpstan",
            "version": "0.12.83",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan.git",
                "reference": "4a967cec6efb46b500dd6d768657336a3ffe699f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan/zipball/4a967cec6efb46b500dd6d768657336a3ffe699f",
                "reference": "4a967cec6efb46b500dd6d768657336a3ffe699f",
                "shasum": ""
            },
            "require": {
                "php": "^7.1|^8.0"
            },
            "conflict": {
                "phpstan/phpstan-shim": "*"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.12-dev"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan - PHP Static Analysis Tool",
            "support": {
                "issues": "https://github.com/phpstan/phpstan/issues",
                "source": "https://github.com/phpstan/phpstan/tree/0.12.83"
            },
            "funding": [
                {
                    "url": "https://github.com/ondrejmirtes",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/phpstan",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpstan/phpstan",
                    "type": "tidelift"
                }
            ],
            "time": "2021-04-03T15:35:45+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "9.2.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "f6293e1b30a2354e8428e004689671b83871edde"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/f6293e1b30a2354e8428e004689671b83871edde",
                "reference": "f6293e1b30a2354e8428e004689671b83871edde",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-xmlwriter": "*",
                "nikic/php-parser": "^4.10.2",
                "php": ">=7.3",
                "phpunit/php-file-iterator": "^3.0.3",
                "phpunit/php-text-template": "^2.0.2",
                "sebastian/code-unit-reverse-lookup": "^2.0.2",
                "sebastian/complexity": "^2.0",
                "sebastian/environment": "^5.1.2",
                "sebastian/lines-of-code": "^1.0.3",
                "sebastian/version": "^3.0.1",
                "theseer/tokenizer": "^1.2.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcov": "*",
                "ext-xdebug": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2021-03-28T07:26:59+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "3.0.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/aa4be8575f26070b100fccb67faabb28f21f66f8",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:57:25+00:00"
        },
        {
            "name": "phpunit/php-invoker",
            "version": "3.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-invoker.git",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "ext-pcntl": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcntl": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Invoke callables with a timeout",
            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
            "keywords": [
                "process"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
                "source": "https://github.com/sebastianbergmann/php-invoker/tree/3.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:58:55+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
                "source": "https://github.com/sebastianbergmann/php-text-template/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T05:33:50+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "5.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-timer/issues",
                "source": "https://github.com/sebastianbergmann/php-timer/tree/5.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:16:10+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "9.5.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "c73c6737305e779771147af66c96ca6a7ed8a741"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/c73c6737305e779771147af66c96ca6a7ed8a741",
                "reference": "c73c6737305e779771147af66c96ca6a7ed8a741",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.3.1",
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "ext-xmlwriter": "*",
                "myclabs/deep-copy": "^1.10.1",
                "phar-io/manifest": "^2.0.1",
                "phar-io/version": "^3.0.2",
                "php": ">=7.3",
                "phpspec/prophecy": "^1.12.1",
                "phpunit/php-code-coverage": "^9.2.3",
                "phpunit/php-file-iterator": "^3.0.5",
                "phpunit/php-invoker": "^3.1.1",
                "phpunit/php-text-template": "^2.0.3",
                "phpunit/php-timer": "^5.0.2",
                "sebastian/cli-parser": "^1.0.1",
                "sebastian/code-unit": "^1.0.6",
                "sebastian/comparator": "^4.0.5",
                "sebastian/diff": "^4.0.3",
                "sebastian/environment": "^5.1.3",
                "sebastian/exporter": "^4.0.3",
                "sebastian/global-state": "^5.0.1",
                "sebastian/object-enumerator": "^4.0.3",
                "sebastian/resource-operations": "^3.0.3",
                "sebastian/type": "^2.3",
                "sebastian/version": "^3.0.2"
            },
            "require-dev": {
                "ext-pdo": "*",
                "phpspec/prophecy-phpunit": "^2.0.1"
            },
            "suggest": {
                "ext-soap": "*",
                "ext-xdebug": "*"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.5-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ],
                "files": [
                    "src/Framework/Assert/Functions.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                "source": "https://github.com/sebastianbergmann/phpunit/tree/9.5.4"
            },
            "funding": [
                {
                    "url": "https://phpunit.de/donate.html",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2021-03-23T07:16:29+00:00"
        },
        {
            "name": "sebastian/cli-parser",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/cli-parser.git",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for parsing CLI options",
            "homepage": "https://github.com/sebastianbergmann/cli-parser",
            "support": {
                "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
                "source": "https://github.com/sebastianbergmann/cli-parser/tree/1.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:08:49+00:00"
        },
        {
            "name": "sebastian/code-unit",
            "version": "1.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit.git",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the PHP code units",
            "homepage": "https://github.com/sebastianbergmann/code-unit",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit/issues",
                "source": "https://github.com/sebastianbergmann/code-unit/tree/1.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:08:54+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:30:19+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/55f4261989e546dc112258c7a75935a81a7ce382",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/diff": "^4.0",
                "sebastian/exporter": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/comparator/issues",
                "source": "https://github.com/sebastianbergmann/comparator/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:49:45+00:00"
        },
        {
            "name": "sebastian/complexity",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/complexity.git",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/739b35e53379900cc9ac327b2147867b8b6efd88",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.7",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for calculating the complexity of PHP code units",
            "homepage": "https://github.com/sebastianbergmann/complexity",
            "support": {
                "issues": "https://github.com/sebastianbergmann/complexity/issues",
                "source": "https://github.com/sebastianbergmann/complexity/tree/2.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:52:27+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3",
                "symfony/process": "^4.2 || ^5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/diff/issues",
                "source": "https://github.com/sebastianbergmann/diff/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:10:38+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "5.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/388b6ced16caa751030f6a69e588299fa09200ac",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-posix": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "http://www.github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/environment/issues",
                "source": "https://github.com/sebastianbergmann/environment/tree/5.1.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:52:38+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "4.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-mbstring": "*",
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "http://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/exporter/issues",
                "source": "https://github.com/sebastianbergmann/exporter/tree/4.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:24:23+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "5.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/a90ccbddffa067b51f574dea6eb25d5680839455",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-dom": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-uopz": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "http://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/global-state/issues",
                "source": "https://github.com/sebastianbergmann/global-state/tree/5.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:55:19+00:00"
        },
        {
            "name": "sebastian/lines-of-code",
            "version": "1.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/lines-of-code.git",
                "reference": "c1c2e997aa3146983ed888ad08b15470a2e22ecc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/c1c2e997aa3146983ed888ad08b15470a2e22ecc",
                "reference": "c1c2e997aa3146983ed888ad08b15470a2e22ecc",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.6",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for counting the lines of code in PHP source code",
            "homepage": "https://github.com/sebastianbergmann/lines-of-code",
            "support": {
                "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/1.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-11-28T06:42:11+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:12:34+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
                "source": "https://github.com/sebastianbergmann/object-reflector/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:14:26+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/cd9d8cf3c5804de4341c283ed787f099f5506172",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "http://www.github.com/sebastianbergmann/recursion-context",
            "support": {
                "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
                "source": "https://github.com/sebastianbergmann/recursion-context/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:17:30+00:00"
        },
        {
            "name": "sebastian/resource-operations",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/resource-operations.git",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides a list of PHP built-in functions that operate on resources",
            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
            "support": {
                "issues": "https://github.com/sebastianbergmann/resource-operations/issues",
                "source": "https://github.com/sebastianbergmann/resource-operations/tree/3.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:45:17+00:00"
        },
        {
            "name": "sebastian/type",
            "version": "2.3.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/type.git",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.3-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the types of the PHP type system",
            "homepage": "https://github.com/sebastianbergmann/type",
            "support": {
                "issues": "https://github.com/sebastianbergmann/type/issues",
                "source": "https://github.com/sebastianbergmann/type/tree/2.3.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:18:59+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "c6c1022351a901512170118436c764e473f6de8c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c",
                "reference": "c6c1022351a901512170118436c764e473f6de8c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "support": {
                "issues": "https://github.com/sebastianbergmann/version/issues",
                "source": "https://github.com/sebastianbergmann/version/tree/3.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:39:44+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "4.8.7",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "shasum": ""
            },
            "require": {
                "php": "^7.1",
                "squizlabs/php_codesniffer": "^3.4.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "1.0.0",
                "phing/phing": "2.16.1",
                "phpstan/phpstan": "0.9.2",
                "phpstan/phpstan-phpunit": "0.9.4",
                "phpstan/phpstan-strict-rules": "0.9",
                "phpunit/phpunit": "7.5.1"
            },
            "type": "phpcodesniffer-standard",
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "support": {
                "issues": "https://github.com/slevomat/coding-standard/issues",
                "source": "https://github.com/slevomat/coding-standard/tree/4.8.7"
            },
            "time": "2019-01-03T13:15:50+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.6.0",
            "source": {
                "type": "git",
                "url": "https://github.com/squizlabs/PHP_CodeSniffer.git",
                "reference": "ffced0d2c8fa8e6cdc4d695a743271fab6c38625"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/ffced0d2c8fa8e6cdc4d695a743271fab6c38625",
                "reference": "ffced0d2c8fa8e6cdc4d695a743271fab6c38625",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0"
            },
            "bin": [
                "bin/phpcs",
                "bin/phpcbf"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "lead"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "https://github.com/squizlabs/PHP_CodeSniffer",
            "keywords": [
                "phpcs",
                "standards"
            ],
            "support": {
                "issues": "https://github.com/squizlabs/PHP_CodeSniffer/issues",
                "source": "https://github.com/squizlabs/PHP_CodeSniffer",
                "wiki": "https://github.com/squizlabs/PHP_CodeSniffer/wiki"
            },
            "time": "2021-04-09T00:54:41+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/75a63c33a8577608444246075ea0af0d052e452a",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "support": {
                "issues": "https://github.com/theseer/tokenizer/issues",
                "source": "https://github.com/theseer/tokenizer/tree/master"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2020-07-12T23:59:07+00:00"
        },
        {
            "name": "webmozart/assert",
            "version": "1.10.0",
            "source": {
                "type": "git",
                "url": "https://github.com/webmozarts/assert.git",
                "reference": "6964c76c7804814a842473e0c8fd15bab0f18e25"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/webmozarts/assert/zipball/6964c76c7804814a842473e0c8fd15bab0f18e25",
                "reference": "6964c76c7804814a842473e0c8fd15bab0f18e25",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0",
                "symfony/polyfill-ctype": "^1.8"
            },
            "conflict": {
                "phpstan/phpstan": "<0.12.20",
                "vimeo/psalm": "<4.6.1 || 4.6.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^8.5.13"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.10-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Webmozart\\Assert\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Assertions to validate method input/output with nice error messages.",
            "keywords": [
                "assert",
                "check",
                "validate"
            ],
            "support": {
                "issues": "https://github.com/webmozarts/assert/issues",
                "source": "https://github.com/webmozarts/assert/tree/1.10.0"
            },
            "time": "2021-03-09T10:59:23+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": {},
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": ">=7.4",
        "ext-json": "*"
    },
    "platform-dev": {},
    "plugin-api-version": "2.6.0"
}


================================================
File: /phpstan.neon
================================================
parameters:
    checkMissingIterableValueType: false
    ignoreErrors:
        - '#Call to an undefined method Symfony\\Component\\Config\\Definition\\Builder#'
        - '#Cannot call method .* on Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface\|null.#'
        - '#Cannot access offset .* on Iterator#'
        - '#MockObject is not subtype of native type#'
        - '#Call to an undefined method .*::method\(\)#'
        # TODO remove -> skipped tests
        - '#Unreachable statement - code above always terminates\.#'


================================================
File: /tests/phpunit/RecursiveJobTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests;

use GuzzleHttp\Psr7\Response;
use Keboola\GenericExtractor\GenericExtractor;
use Keboola\GenericExtractor\GenericExtractorJob;
use Keboola\Juicer\Config\JobConfig;
use Keboola\Juicer\Pagination\NoScroller;
use Keboola\Juicer\Parser\Json;
use Keboola\Juicer\Parser\ParserInterface;
use Keboola\Juicer\Tests\HistoryContainer;
use Keboola\Juicer\Tests\RestClientMockBuilder;
use PHPUnit\Framework\TestCase;
use Psr\Log\NullLogger;

class RecursiveJobTest extends TestCase
{
    public function testParse(): void
    {
        $jobConfig = new JobConfig([
            'id' => 'multiCfg',
            'endpoint' => 'exports/tickets.json',
            'dataType' => 'tickets_export',
            'userData' => ['userData' => 'hello'],
        ]);
        $parser = new Json(new NullLogger(), [], Json::LATEST_VERSION);
        $response = '{
            "data": [
                {
                    "a": "first",
                    "id": 1,
                    "c": ["jedna","one",1]
                },
                {
                    "a": "second",
                    "id": 2,
                    "c": ["dva","two",2]
                }
            ]
        }';

        $job = $this->createJob($jobConfig, $parser, null, [
            new Response(200, [], $response),
        ]);
        $job->run();

        self::assertEquals(
            ['tickets_export', 'tickets_export_c'],
            array_keys($parser->getResults())
        );

        self::assertEquals(
            '"a","id","c","userData"' . "\n" .
            '"first","1","tickets_export_708eef46be0d529f9495cf672287fbb5","hello"' . "\n" .
            '"second","2","tickets_export_2e8ef466fbc672e6eb065306273f60f6","hello"' . "\n",
            file_get_contents($parser->getResults()['tickets_export']->getPathname())
        );
        self::assertEquals(
            '"data","JSON_parentId"'. "\n" .
            '"jedna","tickets_export_708eef46be0d529f9495cf672287fbb5"' . "\n" .
            '"one","tickets_export_708eef46be0d529f9495cf672287fbb5"'. "\n" .
            '"1","tickets_export_708eef46be0d529f9495cf672287fbb5"' . "\n" .
            '"dva","tickets_export_2e8ef466fbc672e6eb065306273f60f6"' . "\n" .
            '"two","tickets_export_2e8ef466fbc672e6eb065306273f60f6"' . "\n" .
            '"2","tickets_export_2e8ef466fbc672e6eb065306273f60f6"' . "\n",
            file_get_contents($parser->getResults()['tickets_export_c']->getPathname())
        );
    }

    public function testNestedPlaceholder(): void
    {
        $jobConfig = new JobConfig([
            'id' => 'first',
            'endpoint' => 'first/',
            'dataType' => 'first',
            'children' => [
                [
                    'id' => 'second',
                    'endpoint' => 'first/{first-id}',
                    'dataType' => 'second',
                    'placeholders' => [
                        'first-id' => 'id',
                    ],
                    'children' => [
                        [
                            'id' => 'third',
                            'dataType' => 'third',
                            'endpoint' => 'first/{first-id}/second/{second-id}',
                            'placeholders' => [
                                'second-id' => 'id',
                            ],
                        ],
                    ],
                ],
            ],
        ]);
        $parser = new Json(new NullLogger(), [], Json::LATEST_VERSION);
        $history = new HistoryContainer();
        $job = $this->createJob($jobConfig, $parser, $history, [
            new Response(200, [], json_encode(
                ['data' => [['id' => 123, '1st' => 1]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['id' => 456, '2nd' => 2], ['id' => 789, '2nd' => 3]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['3rd' => 4]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['3rd' => 5]]]
            )),
        ]);
        $job->run();

        self::assertEquals(
            ['first', 'second', 'third'],
            array_keys($parser->getResults())
        );

        self::assertEquals(4, $history->count());
        self::assertEquals(
            "\"id\",\"1st\"\n\"123\",\"1\"\n",
            file_get_contents($parser->getResults()['first']->getPathname())
        );
        self::assertEquals(
            "\"id\",\"2nd\",\"parent_id\"\n\"456\",\"2\",\"123\"\n\"789\",\"3\",\"123\"\n",
            file_get_contents($parser->getResults()['second']->getPathname())
        );
        self::assertEquals(
            "\"3rd\",\"parent_id\"\n\"4\",\"456\"\n\"5\",\"789\"\n",
            file_get_contents($parser->getResults()['third']->getPathname())
        );
    }

    /**
     * Differently named placeholders, order 2-1, parent_id in result contains 2nd level id
     */
    public function testNestedSamePlaceholder1(): void
    {
        $jobConfig = new JobConfig([
            'id' => 'first',
            'endpoint' => 'first/',
            'dataType' => 'first',
            'children' => [
                [
                    'id' => 'second',
                    'endpoint' => 'first/{1:id}',
                    'dataType' => 'second',
                    'placeholders' => [
                        '1:id' => 'id',
                    ],
                    'children' => [
                        [
                            'id' => 'third',
                            'dataType' => 'third',
                            'endpoint' => 'first/{2:id}/second/{1:first-id}',
                            'placeholders' => [
                                '2:id' => 'id',
                                '1:first-id' => 'id',
                            ],
                        ],
                    ],
                ],
            ],
        ]);
        $parser = new Json(new NullLogger(), [], Json::LATEST_VERSION);
        $history = new HistoryContainer();
        $job = $this->createJob($jobConfig, $parser, $history, [
            new Response(200, [], json_encode(
                ['data' => [['id' => 123, '1st' => 1]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['id' => 456, '2nd' => 2], ['id' => 789, '2nd' => 3]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['3rd' => 4]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['3rd' => 5]]]
            )),
        ]);
        $job->run();

        self::assertEquals(
            ['first', 'second', 'third'],
            array_keys($parser->getResults())
        );

        self::assertEquals(4, $history->count());
        self::assertEquals(
            "\"id\",\"1st\"\n\"123\",\"1\"\n",
            file_get_contents($parser->getResults()['first']->getPathname())
        );
        self::assertEquals(
            "\"id\",\"2nd\",\"parent_id\"\n\"456\",\"2\",\"123\"\n\"789\",\"3\",\"123\"\n",
            file_get_contents($parser->getResults()['second']->getPathname())
        );
        self::assertEquals(
            "\"3rd\",\"parent_id\"\n\"4\",\"456\"\n\"5\",\"789\"\n",
            file_get_contents($parser->getResults()['third']->getPathname())
        );
    }

    /**
     * Differently named placeholders, order 1-2, parent_id in result contains 1st level id
     */
    public function testNestedSamePlaceholder2(): void
    {
        $jobConfig = new JobConfig([
            'id' => 'first',
            'endpoint' => 'first/',
            'dataType' => 'first',
            'children' => [
                [
                    'id' => 'second',
                    'endpoint' => 'first/{1:id}',
                    'dataType' => 'second',
                    'placeholders' => [
                        '1:id' => 'id',
                    ],
                    'children' => [
                        [
                            'id' => 'third',
                            'dataType' => 'third',
                            'endpoint' => 'first/{2:id}/second/{1:first-id}',
                            'placeholders' => [
                                '1:first-id' => 'id',
                                '2:id' => 'id',
                            ],
                        ],
                    ],
                ],
            ],
        ]);

        $parser = new Json(new NullLogger(), [], Json::LATEST_VERSION);
        $history = new HistoryContainer();
        $job = $this->createJob($jobConfig, $parser, $history, [
            new Response(200, [], json_encode(
                ['data' => [['id' => 123, '1st' => 1]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['id' => 456, '2nd' => 2], ['id' => 789, '2nd' => 3]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['3rd' => 4]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['3rd' => 5]]]
            )),
        ]);
        $job->run();

        self::assertEquals(
            ['first', 'second', 'third'],
            array_keys($parser->getResults())
        );

        self::assertEquals(4, $history->count());
        self::assertEquals(
            "\"id\",\"1st\"\n\"123\",\"1\"\n",
            file_get_contents($parser->getResults()['first']->getPathname())
        );
        self::assertEquals(
            "\"id\",\"2nd\",\"parent_id\"\n\"456\",\"2\",\"123\"\n\"789\",\"3\",\"123\"\n",
            file_get_contents($parser->getResults()['second']->getPathname())
        );
        self::assertEquals(
            "\"3rd\",\"parent_id\"\n\"4\",\"123\"\n\"5\",\"123\"\n",
            file_get_contents($parser->getResults()['third']->getPathname())
        );
    }

    /**
     * Same named placeholders, order 2-1, parent_id in result contains 1st level id (order does not matter)
     */
    public function testNestedSamePlaceholder3(): void
    {
        $jobConfig = new JobConfig([
            'id' => 'first',
            'endpoint' => 'first/',
            'dataType' => 'first',
            'children' => [
                [
                    'id' => 'second',
                    'endpoint' => 'first/{1:id}',
                    'dataType' => 'second',
                    'placeholders' => [
                        '1:id' => 'id',
                    ],
                    'children' => [
                        [
                            'id' => 'third',
                            'dataType' => 'third',
                            'endpoint' => 'first/{2:id}/second/{1:id}',
                            'placeholders' => [
                                '2:id' => 'id',
                                '1:id' => 'id',
                            ],
                        ],
                    ],
                ],
            ],
        ]);
        $parser = new Json(new NullLogger(), [], Json::LATEST_VERSION);
        $history = new HistoryContainer();
        $job = $this->createJob($jobConfig, $parser, $history, [
            new Response(200, [], json_encode(
                ['data' => [['id' => 123, '1st' => 1]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['id' => 456, '2nd' => 2], ['id' => 789, '2nd' => 3]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['3rd' => 4]]]
            )),
            new Response(200, [], json_encode(
                ['data' => [['3rd' => 5]]]
            )),
        ]);
        $job->run();

        self::assertEquals(
            ['first', 'second', 'third'],
            array_keys($parser->getResults())
        );

        self::assertEquals(4, $history->count());
        self::assertEquals(
            "\"id\",\"1st\"\n\"123\",\"1\"\n",
            file_get_contents($parser->getResults()['first']->getPathname())
        );
        self::assertEquals(
            "\"id\",\"2nd\",\"parent_id\"\n\"456\",\"2\",\"123\"\n\"789\",\"3\",\"123\"\n",
            file_get_contents($parser->getResults()['second']->getPathname())
        );
        self::assertEquals(
            "\"3rd\",\"parent_id\"\n\"4\",\"123\"\n\"5\",\"123\"\n",
            file_get_contents($parser->getResults()['third']->getPathname())
        );
    }

    public function testUserDataAddLegacy(): void
    {
        $jobConfig = new JobConfig([
            'id' => 'multiCfg',
            'endpoint' => 'exports/tickets.json',
            'dataType' => 'tickets_export',
            'userData' => ['column' => 'hello'],
        ]);
        $parser = new Json(new NullLogger(), [], Json::LEGACY_VERSION);
        $response = '{
            "data": [
                {
                    "column": "first",
                    "id": 1
                },
                {
                    "column": "second",
                    "id": 2
                }
            ]
        }';

        $job = $this->createJob($jobConfig, $parser, null, [
            new Response(200, [], $response),
        ]);
        $job->run();

        self::assertEquals(
            ['tickets_export'],
            array_keys($parser->getResults())
        );

        self::assertEquals(
            '"column","id","1afd32818d1c9525f82aff4c09efd254"' . "\n" .
            '"hello","1",""' . "\n" .
            '"hello","2",""' . "\n",
            file_get_contents($parser->getResults()['tickets_export']->getPathname())
        );
    }

    public function testUserDataAddLegacyMetadata(): void
    {
        $jobConfig = new JobConfig([
            'id' => 'multiCfg',
            'endpoint' => 'exports/tickets.json',
            'dataType' => 'tickets_export',
            'userData' => ['column' => 'hello'],
        ]);
        $metadata = [
            'time' => [
                'previousStart' => 1492606006,
            ],
            'json_parser.struct' => [
                'tickets_export' => [
                    'column' => 'scalar',
                    'id' => 'scalar',
                    'modified' => 'scalar',
                ],
            ],
            'json_parser.structVersion' => 2,
        ];
        $parser = new Json(new NullLogger(), $metadata, Json::LATEST_VERSION);
        $response = '{
            "data": [
                {
                    "column": "first",
                    "id": 1
                },
                {
                    "column": "second",
                    "id": 2
                }
            ]
        }';

        $job = $this->createJob($jobConfig, $parser, null, [
            new Response(200, [], $response),
        ]);
        $job->run();

        self::assertEquals(
            ['tickets_export'],
            array_keys($parser->getResults())
        );
        self::assertEquals(
            '"column","id","modified","1afd32818d1c9525f82aff4c09efd254"' . "\n" .
            '"hello","1","",""' . "\n" .
            '"hello","2","",""' . "\n",
            file_get_contents($parser->getResults()['tickets_export']->getPathname())
        );
        self::assertEquals(
            [
                'json_parser.struct' => [
                    'tickets_export' => [
                        'column' => 'scalar',
                        'id' => 'scalar',
                        'modified' => 'scalar',
                    ],
                ],
                'json_parser.structVersion' => 2.0,
            ],
            $parser->getMetadata()
        );
    }

    public function testUserDataAddNewMetadata(): void
    {
        $jobConfig = new JobConfig([
            'id' => 'multiCfg',
            'endpoint' => 'exports/tickets.json',
            'dataType' => 'tickets_export',
            'userData' => ['column' => 'hello'],
        ]);
        $metadata = [
            'json_parser.struct' => [
                'data' => [
                    '_tickets_export' => [
                        '[]' => [
                            'nodeType' => 'object',
                            '_id' => [
                                'nodeType' => 'scalar',
                                'headerNames' => 'id',
                            ],
                            '_column' => [
                                'nodeType' => 'scalar',
                                'headerNames' => 'column',
                            ],
                            '_modified' => [
                                'nodeType' => 'scalar',
                                'headerNames' => 'modified',
                            ],
                            'headerNames' => 'data',
                            '_column_u0' => [
                                'nodeType' => 'scalar',
                                'type' => 'parent',
                                'headerNames' => 'column_u0',
                            ],
                        ],
                        'nodeType' => 'array',
                    ],
                ],
                'parent_aliases' => [
                    'column' => 'column_u0',
                ],
            ],
            'json_parser.structVersion' => 3,
        ];
        $parser = new Json(new NullLogger(), $metadata, Json::LATEST_VERSION);
        $response = '{
            "data": [
                {
                    "column": "first",
                    "id": 1
                },
                {
                    "column": "second",
                    "id": 2
                }
            ]
        }';

        $job = $this->createJob($jobConfig, $parser, null, [
            new Response(200, [], $response),
        ]);
        $job->run();

        self::assertEquals(
            ['tickets_export'],
            array_keys($parser->getResults())
        );
        self::assertEquals(
            '"id","column","modified","column_u0"' . "\n" .
            '"1","first","","hello"' . "\n" .
            '"2","second","","hello"' . "\n",
            file_get_contents($parser->getResults()['tickets_export']->getPathname())
        );
        self::assertEquals(
            [
                'json_parser.struct' => [
                    'data' => [
                        '_tickets_export' => [
                            '[]' => [
                                'nodeType' => 'object',
                                '_id' => [
                                    'nodeType' => 'scalar',
                                    'headerNames' => 'id',
                                ],
                                '_modified' => [
                                    'nodeType' => 'scalar',
                                    'headerNames' => 'modified',
                                ],
                                '_column' => [
                                    'nodeType' => 'scalar',
                                    'headerNames' => 'column',
                                ],
                                'headerNames' => 'data',
                                '_column_u0' => [
                                    'nodeType' => 'scalar',
                                    'type' => 'parent',
                                    'headerNames' => 'column_u0',
                                ],
                            ],
                            'nodeType' => 'array',
                        ],
                    ],
                    'parent_aliases' => [
                        'column' => 'column_u0',
                    ],
                ],
                'json_parser.structVersion' => 3,
            ],
            $parser->getMetadata()
        );
    }

    public function testUserDataAdd(): void
    {
        $jobConfig = new JobConfig([
            'id' => 'multiCfg',
            'endpoint' => 'exports/tickets.json',
            'dataType' => 'tickets_export',
            'userData' => ['column' => 'hello'],
        ]);
        $parser = new Json(new NullLogger(), [], Json::LATEST_VERSION);
        $response = '{
            "data": [
                {
                    "column": "first",
                    "id": 1
                },
                {
                    "column": "second",
                    "id": 2
                }
            ]
        }';

        $job = $this->createJob($jobConfig, $parser, null, [
            new Response(200, [], $response),
        ]);
        $job->run();

        self::assertEquals(
            ['tickets_export'],
            array_keys($parser->getResults())
        );

        self::assertEquals(
            '"column","id","column_u0"' . "\n" .
            '"first","1","hello"' . "\n" .
            '"second","2","hello"' . "\n",
            file_get_contents($parser->getResults()['tickets_export']->getPathname())
        );
    }

    public function testObject(): void
    {
        $jobConfig = new JobConfig([
            'id' => 'multiCfg',
            'endpoint' => 'exports/tickets.json',
            'dataType' => 'tickets_export',
            'dataField' => '.',
            'userData' => ['column' => 'hello'],
        ]);
        $parser = new Json(new NullLogger(), [], Json::LATEST_VERSION);
        $response = '{
            "data": {
                "column": "second",
                "id": 2
            }
        }';

        $job = $this->createJob($jobConfig, $parser, null, [
            new Response(200, [], $response),
        ]);
        $job->run();

        self::assertEquals(
            ['tickets_export'],
            array_keys($parser->getResults())
        );

        self::assertEquals(
            '"data_column","data_id","column"' . "\n" .
            '"second","2","hello"' . "\n",
            file_get_contents($parser->getResults()['tickets_export']->getPathname())
        );
    }

    protected function createJob(
        JobConfig $config,
        ?ParserInterface $parser,
        ?HistoryContainer $history,
        ?array $responses = null
    ): GenericExtractorJob {
        $attributes = [];
        $metadata = [];
        $scroller = new NoScroller();
        $logger = new NullLogger();
        $scroller = $scroller ?? new NoScroller();
        $parser = $parser ?? new Json($logger, [], Json::LATEST_VERSION);
        $responses = $responses ?? new Response(200, [], '[{"result": "data"}]');
        $restClientBuilder = RestClientMockBuilder::create()
            ->setResponses($responses)
            ->setBaseUri('http://example.com/api/');

        if ($history) {
            $restClientBuilder->setHistoryContainer($history);
        }

        $restClient = $restClientBuilder->getRestClient();

        return new GenericExtractorJob(
            $config,
            $restClient,
            $parser,
            $logger,
            $scroller,
            $attributes,
            $metadata,
            GenericExtractor::COMPAT_LEVEL_LATEST
        );
    }
}


================================================
File: /tests/phpunit/GenericExtractorJobTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests;

use Keboola\GenericExtractor\Exception\UserException;
use Keboola\GenericExtractor\GenericExtractor;
use Keboola\GenericExtractor\GenericExtractorJob;
use Keboola\Juicer\Config\JobConfig;
use Keboola\Juicer\Pagination\NoScroller;
use Keboola\Juicer\Pagination\ResponseUrlScroller;
use Keboola\Juicer\Pagination\ScrollerInterface;
use Keboola\Juicer\Parser\Json;
use Keboola\Juicer\Parser\ParserInterface;
use Keboola\Juicer\Tests\RestClientMockBuilder;
use Psr\Log\NullLogger;

class GenericExtractorJobTest extends ExtractorTestCase
{
    /**
     * @dataProvider parentIdProvider
     */
    public function testGetParentId(JobConfig $cfg, ?array $expected): void
    {
        $job = $this->createJob($cfg, [], []);

        self::assertEquals($expected, self::callMethod($job, 'getParentId', []));
    }

    public function parentIdProvider(): array
    {
        return [
            [
                new JobConfig(
                    [
                        'endpoint' => 'ep',
                        'userData' => [
                            'k' => 'v',
                        ],
                    ]
                ),
                [
                    'k' => 'v',
                ],
            ],
            [
                new JobConfig(
                    [
                        'endpoint' => 'ep',
                    ]
                ),
                null,
            ],
            [
                new JobConfig(
                    [
                        'endpoint' => 'ep',
                        'userData' => 'v',
                    ]
                ),
                [
                    'job_parent_id' => 'v',
                ],
            ],
            [
                new JobConfig(
                    [
                        'endpoint' => 'ep',
                        'userData' => [
                            'hash' => [
                                'function' => 'md5',
                                'args' => [
                                    'a',
                                ],
                            ],
                        ],
                    ]
                ),
                [
                    'hash' => md5('a'),
                ],
            ],
        ];
    }

    public function testUserParentId(): void
    {
        $value = ['parent' => 'val'];
        $job = $this->createJob(
            new JobConfig(
                [
                    'endpoint' => 'ep',
                ]
            ),
            [],
            []
        );
        $job->setUserParentId($value);

        self::assertEquals($value, self::callMethod($job, 'getParentId', []));
    }

    public function testUserParentIdMerge(): void
    {
        $job = $this->createJob(
            new JobConfig(
                [
                    'endpoint' => 'ep',
                    'userData' => [
                        'cfg' => 'cfgVal',
                        'both' => 'cfgVal',
                    ],
                ]
            ),
            [],
            []
        );
        $job->setUserParentId(
            [
                'inj' => 'injVal',
                'both' => 'injVal',
            ]
        );

        self::assertEquals(
            [
                'cfg' => 'cfgVal',
                'both' => 'cfgVal',
                'inj' => 'injVal',
            ],
            self::callMethod($job, 'getParentId', [])
        );
    }

    public function testFirstPage(): void
    {
        $cfg = new JobConfig(
            [
                'endpoint' => 'ep',
                'params' => [
                    'first' => 1,
                ],
            ]
        );
        $job = $this->createJob($cfg, [], []);

        $req = self::callMethod($job, 'firstPage', [$cfg]);
        self::assertEquals('ep', $req->getEndpoint());
    }

    /**
     * @dataProvider nextPageProvider
     */
    public function testNextPage(array $config, array $expectedParams): void
    {
        $cfg = new JobConfig(
            [
                'endpoint' => 'ep',
                'params' => [
                    'first' => 1,
                ],
            ]
        );
        $job = $this->createJob($cfg, [], [], new ResponseUrlScroller($config, new NullLogger()));
        self::callMethod($job, 'buildParams', [$cfg]);

        $response = new \stdClass();
        $response->nextPage = 'http://example.com/api/ep?something=2';
        $response->results = [1, 2];

        $req = self::callMethod(
            $job,
            'nextPage',
            [
                $cfg,
                $response,
                $response->results,
            ]
        );

        self::assertEquals($response->nextPage, $req->getEndpoint());
        self::assertEquals($expectedParams, $req->getParams());
    }

    public function nextPageProvider(): array
    {
        return [
            [['urlKey' => 'nextPage', 'includeParams' => true], ['first' => 1]],
            [['urlKey' => 'nextPage'], []],
        ];
    }

    public function testBuildParams(): void
    {
        $cfg = new JobConfig(
            [
                'endpoint' => 'fooBar',
                'params' => [
                    'timeframe' => 'this_24_hours',
                    'filters' => [
                        'function' => 'concat',
                        'args' => [
                            [
                                'function' => 'date',
                                'args' => [
                                    'Y-m-d',
                                ],
                            ],
                            'string',
                            [
                                'attr' => 'das.attribute',
                            ],
                        ],
                    ],
                ],
            ]
        );
        $job = $this->createJob(
            $cfg,
            ['das.attribute' => 'something interesting'],
            [
                'time' => [
                    'previousStart' => 0,
                    'currentStart' => time(),
                ],
            ]
        );
        $params = self::callMethod(
            $job,
            'buildParams',
            [
                $cfg,
            ]
        );

        self::assertEquals(
            [
                'timeframe' => 'this_24_hours',
                'filters' => date('Y-m-d') . 'stringsomething interesting',
            ],
            $params
        );
    }

    public function testBuildParamsException(): void
    {
        $cfg = new JobConfig(
            [
                'endpoint' => 'fooBar',
                'params' => [
                    'filters' => [
                        'function' => 'date',
                    ],
                ],
            ]
        );
        $job = $this->createJob(
            $cfg,
            ['das.attribute' => 'something interesting'],
            [
                'time' => [
                    'previousStart' => 0,
                    'currentStart' => time(),
                ],
            ]
        );
        $this->expectException(UserException::class);
        $this->expectExceptionMessage('User script error: date() expects at least 1 parameter, 0 given');
        self::callMethod($job, 'buildParams', [$cfg]);
    }

    public function testFilterResponse(): void
    {
        $cfg = new JobConfig(
            [
                'endpoint' => 'fooBar',
                'responseFilter' => 'complexItem',
            ]
        );

        $job = $this->createJob($cfg, [], []);

        $data = [
            (object) [
                'simpleItem' => 1,
                'complexItem' => (object) [
                    'data' => [1, 2, 3],
                ],
                'anotherItem' => (object) [
                    'id' => 1,
                    'data' => [4, 5, 6],
                ],
            ],
        ];

        $filtered = self::callMethod($job, 'filterResponse', [$cfg, $data]);

        self::assertTrue(is_scalar($filtered[0]->complexItem));
        self::assertEquals($data[0]->anotherItem, $filtered[0]->anotherItem);
    }

    public function testRun(): void
    {
        $jobConfig = new JobConfig(['endpoint' => 'ep']);
        $parser = new Json(new NullLogger(), [], Json::LATEST_VERSION);
        $job = $this->createJob($jobConfig, [], [], null, $parser);
        $job->run();

        self::assertCount(1, $parser->getResults());
        self::assertContainsOnlyInstancesOf('\Keboola\CsvTable\Table', $parser->getResults());
    }

    protected function createJob(
        JobConfig $config,
        array $attributes = [],
        array $metadata = [],
        ?ScrollerInterface $scroller = null,
        ?ParserInterface $parser = null
    ): GenericExtractorJob {
        $logger = new NullLogger();
        $scroller = $scroller ?? new NoScroller();
        $parser = $parser ?? new Json($logger, [], Json::LATEST_VERSION);
        $restClient = RestClientMockBuilder::create()
            ->addResponse200('[{"result": "data"}]')
            ->setBaseUri('http://example.com/api/')
            ->getRestClient();
        return new GenericExtractorJob(
            $config,
            $restClient,
            $parser,
            $logger,
            $scroller,
            $attributes,
            $metadata,
            GenericExtractor::COMPAT_LEVEL_LATEST
        );
    }
}


================================================
File: /tests/phpunit/FunctionalTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests;

use Keboola\GenericExtractor\Tests\Traits\RmDirTrait;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Process\Process;

class FunctionalTest extends TestCase
{
    use RmDirTrait;

    private array $rmDirs;

    protected function setUp(): void
    {
        parent::setUp();
        $this->rmDirs = [];
    }

    protected function tearDown(): void
    {
        parent::tearDown();

        // Remove out dirs
        foreach ($this->rmDirs as $dir) {
            $this->rmDir($dir);
        }
    }

    public function testInvalidHeaderConfig(): void
    {
        $dataDir = __DIR__ . '/data/invalidHeadersConfig';
        $process = $this->startPhpProcess($dataDir);
        $process->wait();
        $stdout = $process->getOutput();
        Assert::assertSame(1, $process->getExitCode());
        Assert::assertStringContainsString(
            'Invalid configuration: invalid type "object" in headers at path: Authorization.0',
            $stdout
        );
    }

    public function testInvalidHeaderConfigOauth(): void
    {
        $dataDir = __DIR__ . '/data/invalidHeadersConfigOauth';
        $process = $this->startPhpProcess($dataDir);
        $process->wait();
        $stdout = $process->getOutput();
        Assert::assertSame(1, $process->getExitCode());
        Assert::assertStringContainsString(
            'Invalid configuration: invalid type "object" in headers at path: Authorization [] []',
            $stdout
        );
    }

    public function startPhpProcess(string $dataDir): Process
    {
        $outDir = $dataDir . '/out';
        $runPhp = __DIR__ . '/../../src/run.php';
        $this->rmDirs[] = $outDir;
        $process = new Process(['php', "$runPhp"], null, ['KBC_DATADIR' => $dataDir]);
        $process->setTimeout(60);
        $process->start();
        return $process;
    }
}


================================================
File: /tests/phpunit/Authentication/OAuth20Test.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Authentication;

use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Uri;
use GuzzleHttp\Psr7\Utils;
use Keboola\GenericExtractor\Authentication\OAuth20;
use Keboola\GenericExtractor\Tests\ExtractorTestCase;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Client\RestRequest;
use Keboola\Juicer\Tests\HistoryContainer;
use Keboola\Juicer\Tests\RestClientMockBuilder;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\UriInterface;
use Psr\Log\NullLogger;

class OAuth20Test extends ExtractorTestCase
{
    public function testAuthenticateClientJson(): void
    {
        // Create OAuth20 auth
        $config = json_decode((string) file_get_contents(__DIR__ . '/../data/oauth20bearer/config.json'), true);
        $auth = new OAuth20(
            $config['authorization'],
            $config['parameters']['api']['authentication']
        );

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            ->addResponse200('{"foo": "bar1"}')
            ->addResponse200('{"foo": "bar2"}')
            ->setGuzzleConfig(['headers' => ['X-Test' => 'test']])
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Each request contains Authorization header
        // 1. request
        self::assertEquals((object) ['foo' => 'bar1'], $restClient->download(
            new RestRequest(['endpoint' => 'ep', 'params' => ['k1' => 'v1']])
        ));
        $request1 = $history->pop()->getRequest();
        self::assertSame('Bearer testToken', $request1->getHeaderLine('Authorization'));
        self::assertSame('test', $request1->getHeaderLine('X-Test'));
        self::assertSame('k1=v1', $request1->getUri()->getQuery());
        // 2. request
        self::assertEquals((object) ['foo' => 'bar2'], $restClient->download(
            new RestRequest(['endpoint' => 'ep', 'params' => ['k2' => 'v2']])
        ));
        $request2 = $history->pop()->getRequest();
        self::assertSame('Bearer testToken', $request2->getHeaderLine('Authorization'));
        self::assertSame('test', $request2->getHeaderLine('X-Test'));
        self::assertSame('k2=v2', $request2->getUri()->getQuery());

        // No more history items
        self::assertTrue($history->isEmpty());
    }

    public function testMACAuth(): void
    {
        // Create OAuth20 auth
        $config = json_decode((string) file_get_contents(__DIR__ . '/../data/oauth20mac/config.json'), true);
        $authData = json_decode($config['authorization']['oauth_api']['credentials']['#data']);
        $auth = new OAuth20(
            $config['authorization'],
            $config['parameters']['api']['authentication']
        );

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            ->addResponse200('{"foo": "bar1"}')
            ->addResponse200('{"foo": "bar2"}')
            ->setGuzzleConfig(['headers' => ['X-Test' => 'test']])
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Each request contains Authorization header
        // 1. request
        self::assertEquals(
            (object) ['foo' => 'bar1'],
            $restClient->download(new RestRequest(['endpoint' => '/resource', 'params' => ['k1' => 'v1']]))
        );
        $this->assertMacRequest($history->pop()->getRequest(), $authData);
        // 2. request
        self::assertEquals(
            (object) ['foo' => 'bar2'],
            $restClient->download(new RestRequest(['endpoint' => '/resource', 'params' => ['k2' => 'v2']]))
        );
        $this->assertMacRequest($history->pop()->getRequest(), $authData);

        // No more history items
        self::assertTrue($history->isEmpty());
    }

    private function assertMacRequest(RequestInterface $request, \stdClass $authData): void
    {
        $authHeader = $request->getHeaderLine('Authorization');
        $match = preg_match(
            '/MAC id="testToken", ts="([0-9]{10})", nonce="([0-9a-zA-Z]{16})", mac="([0-9a-zA-Z]{32})"/',
            $authHeader,
            $matches
        );
        if ($match !== 1) {
            throw new \Exception('MAC Header does not match the expected pattern');
        }

        $timestamp = $matches[1];
        $nonce = $matches[2];

        $uri = $request->getUri();
        $resource = $uri->getPath() . ($uri->getQuery() ? '?' . $uri->getQuery() : '');
        $macString = join(
            "\n",
            [
                $timestamp,
                $nonce,
                strtoupper($request->getMethod()),
                $resource,
                $uri->getHost(),
                80,
                "\n",
            ]
        );

        $expectedAuthHeader = sprintf(
            'MAC id="%s", ts="%s", nonce="%s", mac="%s"',
            $authData->access_token,
            $timestamp,
            $nonce,
            md5(hash_hmac('sha256', $macString, $authData->mac_secret))
        );
        self::assertEquals($expectedAuthHeader, $authHeader);
        // Header gets last newline trimmed
        self::assertEquals($macString, $request->getHeaderLine('Test') . "\n\n");
    }
}


================================================
File: /tests/phpunit/Authentication/OAuth10Test.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Authentication;

use Keboola\GenericExtractor\Authentication\OAuth10;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Tests\HistoryContainer;
use Keboola\Juicer\Tests\RestClientMockBuilder;
use PHPUnit\Framework\TestCase;

class OAuth10Test extends TestCase
{
    public function testAuthenticateClient(): void
    {
        // Create Oauth10 auth
        $authorization = [
            'oauth_api' => [
                'credentials' => [
                    '#data' => '{"oauth_token": "token", "oauth_token_secret": "token_secret"}',
                    'appKey' => 'aaa',
                    '#appSecret' => 'bbb',
                ],
            ],
        ];
        $auth = new OAuth10($authorization);

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            ->addResponse200((string) json_encode((object) [
                'data' => [1, 2, 3],
            ]))
            ->addResponse200((string) json_encode((object) [
                'data' => [4, 5, 6],
            ]))
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Each request contains Authorization header
        // 1. requests
        self::assertEquals(
            (object) ['data' => [1, 2, 3]],
            $restClient->download($restClient->createRequest(['endpoint' => '/']))
        );
        $authHeader1 = $history->pop()->getRequest()->getHeaderLine('Authorization');
        self::assertMatchesRegularExpression(
            '/^OAuth oauth_consumer_key="aaa", oauth_nonce="([0-9a-zA-Z]*)", '.
            'oauth_signature="([0-9a-zA-Z%]*)", oauth_signature_method="HMAC-SHA1", '.
            'oauth_timestamp="([0-9]{10})", oauth_token="token", oauth_version="1.0"$/',
            $authHeader1
        );

        // 2. request
        self::assertEquals(
            (object) ['data' => [4, 5, 6]],
            $restClient->download($restClient->createRequest(['endpoint' => '/']))
        );
        $authHeader2 = $history->pop()->getRequest()->getHeaderLine('Authorization');
        self::assertMatchesRegularExpression(
            '/^OAuth oauth_consumer_key="aaa", oauth_nonce="([0-9a-zA-Z]*)", '.
            'oauth_signature="([0-9a-zA-Z%]*)", oauth_signature_method="HMAC-SHA1", '.
            'oauth_timestamp="([0-9]{10})", oauth_token="token", oauth_version="1.0"$/',
            $authHeader2
        );

        // No more history items
        self::assertTrue($history->isEmpty());
    }
}


================================================
File: /tests/phpunit/Authentication/OAuth20LoginTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Authentication;

use Keboola\GenericExtractor\Authentication\OAuth20Login;
use Keboola\GenericExtractor\Tests\ExtractorTestCase;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Tests\HistoryContainer;
use Keboola\Juicer\Tests\RestClientMockBuilder;

class OAuth20LoginTest extends ExtractorTestCase
{
    public function testAuthenticateClient(): void
    {
        $expiresInSeconds = 3;

        // Create OAuth20Login auth
        $oauthCredentials = [
            'appKey' => 1,
            '#appSecret' => 'two',
            '#data' => (string) json_encode(
                [
                    'access_token' => '1234',
                    'refresh_token' => 'asdf',
                    'expires_in' => 3600,
                ]
            ),
        ];

        $authentication = [
            'loginRequest' => [
                'endpoint' => 'auth/refresh',
                'params' => ['refresh_token' => ['user' => 'refresh_token']],
                'method' => 'POST',
            ],
            'apiRequest' => [
                'query' => ['access_token' => 'access_token'],
            ],
            'expires' => ['response' => 'expires_in', 'relative' => true],
        ];

        $auth = new OAuth20Login([], ['oauth_api' => ['credentials' => $oauthCredentials]], $authentication);

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            // Auth response
            ->addResponse200((string) json_encode((object) [
                'access_token' => 1234,
                'expires_in' => $expiresInSeconds,
            ]))
            // First API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [1,2,3],
            ]))
            // Second API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [4, 5, 6],
            ]))
            // Auth response (login expired_
            ->addResponse200((string) json_encode((object) [
                'access_token' => 4321,
                'expires_in' => $expiresInSeconds,
            ]))
            // Third API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [7, 8, 9],
            ]))
            ->setGuzzleConfig(['base_url' => 'http://example.com/api'])
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Run
        $request = $restClient->createRequest(['endpoint' => '/api/get']);
        self::assertEquals((object) ['data' => [1, 2, 3]], $restClient->download($request));
        self::assertEquals((object) ['data' => [4, 5, 6]], $restClient->download($request));

        // Assert login call, "first" attribute is in body, "second" int the header
        $loginCall = $history->shift();
        self::assertEquals('POST', $loginCall->getRequest()->getMethod());
        self::assertEquals('{"refresh_token":"asdf"}', (string) $loginCall->getRequest()->getBody());

        // Assert API calls, must contain signature
        $apiCall1 = $history->shift();
        self::assertEquals('access_token=1234', $apiCall1->getRequest()->getUri()->getQuery());
        $apiCall2 = $history->shift();
        self::assertEquals('access_token=1234', $apiCall2->getRequest()->getUri()->getQuery());

        // No more history items
        self::assertTrue($history->isEmpty());

        // Let's wait for the login expiration
        sleep($expiresInSeconds + 1);
        $expiresSecond = time() + $expiresInSeconds;

        // Run -> expected new login
        $request = $restClient->createRequest(['endpoint' => '/api/get']);
        self::assertEquals((object) ['data' => [7, 8, 9]], $restClient->download($request));

        // Assert login call
        $loginCall = $history->shift();
        self::assertEquals('POST', $loginCall->getRequest()->getMethod());
        self::assertEquals('{"refresh_token":"asdf"}', (string) $loginCall->getRequest()->getBody());

        // Assert API call
        $apiCall3 = $history->shift();
        self::assertEquals('access_token=4321', $apiCall3->getRequest()->getUri()->getQuery());

        // No more history items
        self::assertTrue($history->isEmpty());

        // Check that the expiration meets expectations
        $expiration = $auth->getExpiration();
        self::assertTrue(is_int($expiration));
        self::assertLessThan($expiresSecond + 2, $expiration);
    }
}


================================================
File: /tests/phpunit/Authentication/LoginTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Authentication;

use Keboola\GenericExtractor\Authentication\Login;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\GenericExtractor\Tests\ExtractorTestCase;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Tests\HistoryContainer;
use Keboola\Juicer\Tests\RestClientMockBuilder;

class LoginTest extends ExtractorTestCase
{
    public function testAuthenticateClient(): void
    {
        $expiresInSeconds = 5000;
        $expires = time() + $expiresInSeconds;

        // Create Login auth
        $attrs = ['first' => 1, 'second' => 'two'];
        $api = [
            'loginRequest' => [
                'endpoint' => 'login',
                'params' => ['par' => ['attr' => 'first']],
                'headers' => ['X-Header' => ['attr' => 'second']],
                'method' => 'POST',
            ],
            'apiRequest' => [
                'headers' => ['X-Test-Auth' => ['response' => 'headerToken']],
                'query' => ['qToken' => ['response' => 'queryToken']],
            ],
            'expires' => ['response' => 'expiresIn', 'relative' => true],
        ];
        $auth = new Login($attrs, $api);

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            // Auth response
            ->addResponse200((string) json_encode((object) [
                'headerToken' => 1234,
                'queryToken' => 4321,
                'expiresIn' => $expiresInSeconds,
            ]))
            // First API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [1, 2, 3],
            ]))
            // Second API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [4, 5, 6],
            ]))
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Run
        self::assertEquals(
            (object) ['data' => [1, 2, 3]],
            $restClient->download($restClient->createRequest(['endpoint' => '/api/get']))
        );
        self::assertEquals(
            (object) ['data' => [4, 5, 6]],
            $restClient->download($restClient->createRequest([
                'endpoint' => '/api/get',
                'params' => ['foo1' => 'bar1'],
                'headers' => ['X-Request-Param' => 'bar2'],
            ]))
        );

        // Assert login call, "first" attribute is in body, "second" int the header
        $loginCall = $history->shift();
        self::assertEquals(
            (string) json_encode(['par' => $attrs['first']]),
            (string) $loginCall->getRequest()->getBody()
        );
        self::assertEquals($attrs['second'], $loginCall->getRequest()->getHeaderLine('X-Header'));

        // Assert API calls, must contain signature
        $apiCall1 = $history->shift();
        self::assertEquals(1234, $apiCall1->getRequest()->getHeaderLine('X-Test-Auth'));
        self::assertEquals('qToken=4321', $apiCall1->getRequest()->getUri()->getQuery());
        $apiCall2 = $history->shift();
        self::assertEquals(1234, $apiCall2->getRequest()->getHeaderLine('X-Test-Auth'));
        self::assertEquals('bar2', $apiCall2->getRequest()->getHeaderLine('X-Request-Param'));
        self::assertEquals('foo1=bar1&qToken=4321', $apiCall2->getRequest()->getUri()->getQuery());

        // No more history items
        self::assertTrue($history->isEmpty());

        // Check that the expiration meets expectations
        $expiration = $auth->getExpiration();
        self::assertTrue(is_int($expiration));
        self::assertLessThan($expires + 2, $expiration);
    }

    public function testAuthenticateClientExpired(): void
    {
        $expiresInSecondsFirst = 1;
        $expiresInSecondsSecond = 5000;

        // Create Login auth
        $attrs = ['first' => 1, 'second' => 'two'];
        $api = [
            'loginRequest' => [
                'endpoint' => 'login',
                'params' => ['par' => ['attr' => 'first']],
                'headers' => ['X-Header' => ['attr' => 'second']],
                'method' => 'POST',
            ],
            'apiRequest' => [
                'headers' => ['X-Test-Auth' => ['response' => 'headerToken']],
                'query' => ['qToken' => ['response' => 'queryToken']],
            ],
            'expires' => ['response' => 'expiresIn', 'relative' => true],
        ];
        $auth = new Login($attrs, $api);

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            // Auth response
            ->addResponse200((string) json_encode((object) [
                'headerToken' => 1234,
                'queryToken' => 4321,
                'expiresIn' => $expiresInSecondsFirst,
            ]))
            // First API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [1, 2, 3],
            ]))
            // Second API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [4, 5, 6],
            ]))
            // Auth response -> new login
            ->addResponse200((string) json_encode((object) [
                'headerToken' => 9876,
                'queryToken' => 5432,
                'expiresIn' => $expiresInSecondsSecond,
            ]))
            // Third API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [7, 8, 9],
            ]))
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Run
        $request = $restClient->createRequest(['endpoint' => '/api/get']);
        self::assertEquals((object) ['data' => [1, 2, 3]], $restClient->download($request));
        self::assertEquals((object) ['data' => [4, 5, 6]], $restClient->download($request));

        // Login call + 2 API calls -> same as in previous testAuthenticateClient test
        self::assertSame(3, $history->count());
        $history->clear();

        // Let's wait for the login expiration
        sleep($expiresInSecondsFirst + 1);
        $expiresSecond = time() + $expiresInSecondsSecond;

        // Run -> expected new login
        $request = $restClient->createRequest(['endpoint' => '/api/get']);
        self::assertEquals((object) ['data' => [7, 8, 9]], $restClient->download($request));

        // Assert login call
        $loginCall = $history->shift();
        self::assertEquals(
            (string) json_encode(['par' => $attrs['first']]),
            (string) $loginCall->getRequest()->getBody()
        );
        self::assertEquals($attrs['second'], $loginCall->getRequest()->getHeaderLine('X-Header'));

        // Assert API call
        $apiCall3 = $history->shift();
        self::assertEquals(9876, $apiCall3->getRequest()->getHeaderLine('X-Test-Auth'));
        self::assertEquals('qToken=5432', $apiCall3->getRequest()->getUri()->getQuery());

        // No more history items
        self::assertTrue($history->isEmpty());

        // Check that the expiration meets expectations
        $expiration = $auth->getExpiration();
        self::assertTrue(is_int($expiration));
        self::assertLessThan($expiresSecond + 2, $expiration);
    }

    public function testAuthenticateClientScalar(): void
    {
        // Create Login auth
        $attrs = ['first' => 1, 'second' => 'two'];
        $api = [
            'format' => 'json',
            'loginRequest' => [
                'endpoint' => 'login',
                'params' => ['par' => ['attr' => 'first']],
                'headers' => ['X-Header' => ['attr' => 'second']],
                'method' => 'POST',
            ],
            'apiRequest' => [
                'headers' => ['X-Test-Auth' => ['response' => 'data']],
            ],
        ];
        $auth = new Login($attrs, $api);

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            // Auth response
            ->addResponse200((string) json_encode('someToken')) // <<<< scalar JSON value
            // First API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [1, 2, 3],
            ]))
            // Second API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [4, 5, 6],
            ]))
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Run
        $request = $restClient->createRequest(['endpoint' => '/api/get']);
        self::assertEquals((object) ['data' => [1, 2, 3]], $restClient->download($request));
        self::assertEquals((object) ['data' => [4, 5, 6]], $restClient->download($request));

        // Assert login call, "first" attribute is in body, "second" int the header
        $loginCall = $history->shift();
        self::assertEquals(
            (string) json_encode(['par' => $attrs['first']]),
            (string) $loginCall->getRequest()->getBody()
        );
        self::assertEquals($attrs['second'], $loginCall->getRequest()->getHeaderLine('X-Header'));

        // Assert API calls, must contain signature
        $apiCall1 = $history->shift();
        self::assertEquals('someToken', $apiCall1->getRequest()->getHeaderLine('X-Test-Auth'));
        $apiCall2 = $history->shift();
        self::assertEquals('someToken', $apiCall2->getRequest()->getHeaderLine('X-Test-Auth'));

        // No more history items
        self::assertTrue($history->isEmpty());
    }

    public function testAuthenticateClientText(): void
    {
        // Create Login auth
        $attrs = ['first' => 1, 'second' => 'two'];
        $api = [
            'format' => 'text',
            'loginRequest' => [
                'endpoint' => 'login',
                'params' => ['par' => ['attr' => 'first']],
                'headers' => ['X-Header' => ['attr' => 'second']],
                'method' => 'POST',
            ],
            'apiRequest' => [
                'headers' => ['X-Test-Auth' => ['response' => 'data']],
            ],
        ];
        $auth = new Login($attrs, $api);

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            // Auth response
            ->addResponse200('someToken') // <<<< text body
            // First API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [1, 2, 3],
            ]))
            // Second API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [4, 5, 6],
            ]))
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Run
        $request = $restClient->createRequest(['endpoint' => '/api/get']);
        self::assertEquals((object) ['data' => [1, 2, 3]], $restClient->download($request));
        self::assertEquals((object) ['data' => [4, 5, 6]], $restClient->download($request));

        // Assert login call, "first" attribute is in body, "second" int the header
        $loginCall = $history->shift();
        self::assertEquals(
            (string) json_encode(['par' => $attrs['first']]),
            (string) $loginCall->getRequest()->getBody()
        );
        self::assertEquals($attrs['second'], $loginCall->getRequest()->getHeaderLine('X-Header'));

        // Assert API calls, must contain signature
        $apiCall1 = $history->shift();
        self::assertEquals('someToken', $apiCall1->getRequest()->getHeaderLine('X-Test-Auth'));
        $apiCall2 = $history->shift();
        self::assertEquals('someToken', $apiCall2->getRequest()->getHeaderLine('X-Test-Auth'));

        // No more history items
        self::assertTrue($history->isEmpty());
    }

    public function testAuthenticateClientWithFunctionInApiRequestHeaders(): void
    {
        // Create Login auth
        $api = [
            'loginRequest' => [
                'endpoint' => 'login',
                'headers' => ['X-Header' => 'fooBar'],
                'method' => 'POST',
            ],
            'apiRequest' => [
                'headers' => [
                    // backward compatible
                    'Authorization1' => 'tokens.header',
                    // function
                    'Authorization2' => [
                        'function' => 'concat',
                        'args' => [
                            'Bearer',
                            ' ',
                            ['response' => 'tokens.header'],
                        ],
                    ],
                    // direct reference
                    'Authorization3' => [
                        'response' => 'tokens.header',
                    ],
                ],
                'query' => [
                    // backward compatible
                    'qToken1' => 'tokens.query',
                    // function
                    'qToken2' => [
                        'function' => 'concat',
                        'args' => [
                            'qt',
                            ['response' => 'tokens.query'],
                        ],
                    ],
                    // direct reference
                    'qToken3' => [
                        'response' => 'tokens.query',
                    ],
                ],
            ],
        ];
        $auth = new Login(['a1' => ['b1' => 'c1'], 'a2' => ['b2' => 'c2']], $api);

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            // Auth response
            ->addResponse200((string) json_encode((object) [
                'tokens' => [
                    'header' => 1234,
                    'query' => 4321,
                ],
            ]))
            // First API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [1, 2, 3],
            ]))
            // Second API call response
            ->addResponse200((string) json_encode((object) [
                'data' => [4, 5, 6],
            ]))
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Run
        $request = $restClient->createRequest(['endpoint' => '/api/get']);
        self::assertEquals((object) ['data' => [1, 2, 3]], $restClient->download($request));
        self::assertEquals((object) ['data' => [4, 5, 6]], $restClient->download($request));

        // Assert login call
        $loginCall = $history->shift();
        self::assertEquals('fooBar', $loginCall->getRequest()->getHeaderLine('X-Header'));

        // Assert API calls, must contain signature
        $apiCall1 = $history->shift();
        self::assertEquals('1234', $apiCall1->getRequest()->getHeaderLine('Authorization1'));
        self::assertEquals('Bearer 1234', $apiCall1->getRequest()->getHeaderLine('Authorization2'));
        self::assertEquals('1234', $apiCall1->getRequest()->getHeaderLine('Authorization3'));
        self::assertEquals(
            'qToken1=4321&qToken2=qt4321&qToken3=4321',
            $apiCall1->getRequest()->getUri()->getQuery()
        );
        $apiCall2 = $history->shift();
        self::assertEquals('1234', $apiCall2->getRequest()->getHeaderLine('Authorization1'));
        self::assertEquals('Bearer 1234', $apiCall2->getRequest()->getHeaderLine('Authorization2'));
        self::assertEquals('1234', $apiCall2->getRequest()->getHeaderLine('Authorization3'));
        self::assertEquals(
            'qToken1=4321&qToken2=qt4321&qToken3=4321',
            $apiCall2->getRequest()->getUri()->getQuery()
        );

        // No more history items
        self::assertTrue($history->isEmpty());
    }

    public function testInvalid1(): void
    {
        $api = [
            'format' => 'js',
        ];
        $this->expectException(UserException::class);
        $this->expectExceptionMessage("'format' must be either 'json' or 'text'");
        new Login([], $api);
    }

    public function testInvalid2(): void
    {
        $api = [
            'format' => 'json',
        ];
        $this->expectException(UserException::class);
        $this->expectExceptionMessage("loginRequest' is not configured for Login authentication");
        new Login([], $api);
    }

    public function testInvalid3(): void
    {
        $api = [
            'loginRequest' => [
                'method' => 'POST',
            ],
        ];
        $this->expectException(UserException::class);
        $this->expectExceptionMessage('Request endpoint must be set for the Login authentication method.');
        new Login([], $api);
    }

    public function testInvalid4(): void
    {
        $api = [
            'loginRequest' => [
                'method' => 'POST',
                'endpoint' => 'dummy',
            ],
            'expires' => 'never',
        ];
        $this->expectException(UserException::class);
        $this->expectExceptionMessage(
            "The 'expires' attribute must be either an integer " .
            "or an array with 'response' key containing a path in the response"
        );
        new Login([], $api);
    }
}


================================================
File: /tests/phpunit/Authentication/QueryTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Authentication;

use GuzzleHttp\Psr7\Query as Psr7Query;
use Keboola\GenericExtractor\Authentication\Query;
use Keboola\GenericExtractor\Tests\ExtractorTestCase;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Tests\HistoryContainer;
use Keboola\Juicer\Tests\RestClientMockBuilder;

class QueryTest extends ExtractorTestCase
{
    public function testAuthenticateClient(): void
    {
        // Create Query auth
        $authentication = [
            'query' => [
                'paramOne' => (object) ['attr' => 'first'],
                'paramTwo' => (object) [
                    'function' => 'md5',
                    'args' => [(object) ['attr' => 'second']],
                ],
                'paramThree' => 'string',
            ],
        ];
        $configAttributes = ['first' => 1, 'second' => 'two'];
        $auth = new Query($configAttributes, $authentication);

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            ->addResponse200((string) json_encode((object) [
                'data' => [1, 2, 3],
            ]))
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Run
        self::assertEquals(
            (object) ['data' => [1, 2, 3]],
            $restClient->download($restClient->createRequest(['endpoint' => '/']))
        );

        // Assert request query
        $apiCall = $history->shift();
        self::assertEquals(
            'paramOne=1&paramTwo=' . md5($configAttributes['second']) . '&paramThree=string',
            $apiCall->getRequest()->getUri()->getQuery()
        );

        // No more history items
        self::assertTrue($history->isEmpty());
    }

    public function testAuthenticateClientQuery(): void
    {
        // Create Query auth
        $authentication = ['query' => ['authParam' => 'secretCodeWow']];
        $configAttributes = [];
        $auth = new Query($configAttributes, $authentication);

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            ->addResponse200((string) json_encode((object) [
                'data' => [1, 2, 3],
            ]))
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Run
        self::assertEquals(
            (object) ['data' => [1, 2, 3]],
            $restClient->download(
                $restClient->createRequest(['endpoint' => '/query', 'params' => ['param' => 'value']])
            )
        );

        // Assert request query
        $apiCall = $history->shift();
        self::assertEquals(
            'param=value&authParam=secretCodeWow',
            $apiCall->getRequest()->getUri()->getQuery()
        );

        // No more history items
        self::assertTrue($history->isEmpty());
    }

    public function testRequestInfo(): void
    {
        // Create Query auth
        $urlTokenParam = (object) [
            'function' => 'concat',
            'args' => [
                (object) ['request' => 'url'],
                (object) ['attr' => 'token'],
                (object) ['query' => 'param'],
            ],
        ];

        $authentication = [
            'query' => [
                'urlTokenParamHash' => (object) [
                    'function' => 'md5',
                    'args' => [
                        $urlTokenParam,
                    ],
                ],
                'urlTokenParam' => $urlTokenParam,
            ],
        ];
        $configAttributes = ['token' => 'asdf1234'];
        $auth = new Query($configAttributes, $authentication);

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            ->addResponse200((string) json_encode((object) [
                'data' => [1, 2, 3],
            ]))
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Run
        self::assertEquals(
            (object) ['data' => [1, 2, 3]],
            $restClient->download(
                $restClient->createRequest(['endpoint' => '/query', 'params' => ['param' => 'value']])
            )
        );

        // Assert request query
        $apiCall = $history->shift();
        $originalUrl = 'http://example.com/query?param=value';
        self::assertEquals(
            (string) Psr7Query::build([
                'param' => 'value',
                'urlTokenParamHash' => md5($originalUrl . $configAttributes['token'] . 'value'),
                'urlTokenParam' => $originalUrl . $configAttributes['token'] . 'value',
            ]),
            $apiCall->getRequest()->getUri()->getQuery()
        );

        // No more history items
        self::assertTrue($history->isEmpty());
    }
}


================================================
File: /tests/phpunit/Authentication/BasicTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Authentication;

use Keboola\GenericExtractor\Authentication\Basic;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Client\RestRequest;
use Keboola\Juicer\Tests\HistoryContainer;
use Keboola\Juicer\Tests\RestClientMockBuilder;
use PHPUnit\Framework\TestCase;

class BasicTest extends TestCase
{
    /**
     * @dataProvider credentialsProvider
     */
    public function testAuthenticateClient(array $credentials): void
    {
        $auth = new Basic($credentials);

        // Create RestClient
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            ->addResponse200('{"foo": "bar1"}')
            ->addResponse200('{"foo": "bar2"}')
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $restClient) use ($auth): void {
                $auth->attachToClient($restClient);
            })
            ->getRestClient();

        // Each request contains Authorization header
        self::assertEquals((object) ['foo' => 'bar1'], $restClient->download(new RestRequest(['endpoint' => 'ep'])));
        self::assertSame(
            'Basic dGVzdDpwYXNz',
            $history->pop()->getRequest()->getHeaderLine('Authorization')
        );
        self::assertEquals((object) ['foo' => 'bar2'], $restClient->download(new RestRequest(['endpoint' => 'ep'])));
        self::assertSame(
            'Basic dGVzdDpwYXNz',
            $history->pop()->getRequest()->getHeaderLine('Authorization')
        );
    }

    public function credentialsProvider(): array
    {
        return [
            [
                ['username' => 'test', 'password' => 'pass'],
            ],
            [
                ['#username' => 'test', '#password' => 'pass'],
            ],
        ];
    }
}


================================================
File: /tests/phpunit/Response/FindResponseArrayTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Response;

use Keboola\GenericExtractor\Exception\UserException;
use Keboola\GenericExtractor\Response\FindResponseArray;
use Keboola\Juicer\Config\JobConfig;
use PHPUnit\Framework\TestCase;
use Psr\Log\NullLogger;

class FindResponseArrayTest extends TestCase
{
    public function testSingleArray(): void
    {
        $cfg = new JobConfig(
            [
            'endpoint' => 'a',
            'dataField' => 'results',
            ]
        );

        $module = new FindResponseArray(new NullLogger());

        $response = (object) [
            'results' => [
                (object) ['id' => 1],
                (object) ['id' => 2],
            ],
            'otherArray' => ['a','b'],
        ];

        $data = $module->process($response, $cfg);
        $this->assertEquals($response->{$cfg->getConfig()['dataField']}, $data);
    }

    public function testNestedArray(): void
    {
        $cfg = new JobConfig(
            [
            'endpoint' => 'a',
            'dataField' => 'data.results',
            ]
        );

        $module = new FindResponseArray(new NullLogger());

        $response = (object) [
            'data' => (object) [
                'results' => [
                    (object) ['id' => 1],
                    (object) ['id' => 2],
                ],
            ],
            'otherArray' => ['a','b'],
        ];

        $data = $module->process($response, $cfg);
        $this->assertEquals($response->data->results, $data);
    }

    public function testMultipleArraysException(): void
    {
        $cfg = new JobConfig(
            [
            'endpoint' => 'a',
            ]
        );

        $module = new FindResponseArray(new NullLogger());

        $response = (object) [
            'results' => [
                (object) ['id' => 1],
                (object) ['id' => 2],
            ],
            'otherArray' => ['a','b'],
        ];

        $this->expectException(UserException::class);
        $this->expectExceptionMessage(
            "More than one array found in response! Use 'dataField' parameter to specify a key to the data array. " .
            '(endpoint: a, arrays in response root: results, otherArray)'
        );
        $module->process($response, $cfg);
    }
}


================================================
File: /tests/phpunit/Response/FilterTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Response;

use Keboola\GenericExtractor\GenericExtractor;
use Keboola\GenericExtractor\Response\Filter;
use Keboola\Juicer\Config\JobConfig;
use PHPUnit\Framework\TestCase;

class FilterTest extends TestCase
{
    public function testRun(): void
    {
        $jobConfig = new JobConfig(
            [
            'endpoint' => 'ep',
            'responseFilter' => 'out.arr[].in',
            ]
        );

        $filter = new Filter($jobConfig, GenericExtractor::COMPAT_LEVEL_LATEST);

        $data = [
            (object) [
                'id' => 1,
                'out' => (object) [
                    'arr' => [
                        (object) [
                            'in' => 'string',
                        ],
                        (object) [
                            'in' => [(object) ['array' => 'of objects!']],
                        ],
                    ],
                ],
            ],
        ];

        self::assertEquals(
            [
                (object) [
                    'id' => 1,
                    'out' => (object) [
                        'arr' => [
                            (object) [
                                'in' => '"string"',
                            ],
                            (object) [
                                'in' => '[{"array":"of objects!"}]',
                            ],
                        ],
                    ],
                ],
            ],
            $filter->run($data)
        );
    }

    public function testArray(): void
    {
        $jobConfig = new JobConfig(
            [
            'endpoint' => 'ep',
            'responseFilter' => 'out.arr[]',
            ]
        );

        $filter = new Filter($jobConfig, GenericExtractor::COMPAT_LEVEL_LATEST);

        $data = [
            (object) [
                'id' => 1,
                'out' => (object) [
                    'arr' => [
                        (object) [
                            'in' => 'object',
                        ],
                        (object) [
                            'in' => [(object) ['array' => 'of objects!']],
                        ],
                        'string',
                    ],
                ],
            ],
        ];

        self::assertEquals(
            [
                (object) [
                    'id' => 1,
                    'out' => (object) [
                        'arr' => [
                            '{"in":"object"}',
                            '{"in":[{"array":"of objects!"}]}',
                            '"string"',
                        ],
                    ],
                ],
            ],
            $filter->run($data)
        );
    }

    public function testMissingData(): void
    {
        $jobConfig = new JobConfig(
            [
            'endpoint' => 'ep',
            'responseFilter' => 'out.arr[].in',
            ]
        );

        $filter = new Filter($jobConfig, GenericExtractor::COMPAT_LEVEL_LATEST);

        $data = [
            (object) [
                'id' => 1,
                'out' => (object) [
                    'arr' => [
                        (object) [
                            'in' => 'string',
                        ],
                        (object) [
                            'uh' => 'no "in" here!',
                        ],
                        (object) [
                            'in' => ['str','ing'],
                        ],
                    ],
                ],
            ],
        ];

        self::assertEquals(
            [
                (object) [
                    'id' => 1,
                    'out' => (object) [
                        'arr' => [
                            (object) [
                                'in' => '"string"',
                            ],
                            (object) [
                                'uh' => 'no "in" here!', // <- correct because this is not filtered prop!
                            ],
                            (object) [
                                'in' => '["str","ing"]',
                            ],
                        ],
                    ],
                ],
            ],
            $filter->run($data)
        );
    }

    public function testMultipleFilters(): void
    {
        $jobConfig = new JobConfig(
            [
            'endpoint' => 'ep',
            'responseFilter' => ['out.arr[]', 'out.in'],
            ]
        );
        $filter = new Filter($jobConfig, GenericExtractor::COMPAT_LEVEL_LATEST);

        $data = [
            (object) [
                'id' => 1,
                'out' => (object) [
                    'arr' => [
                        (object) [
                            'in' => 'string',
                        ],
                        (object) [
                            'in' => [(object) ['array' => 'of objects!']],
                        ],
                    ],
                    'in' => 'string',
                ],
            ],
            (object) [
                'id' => 2,
                'out' => (object) [
                    'arr' => [
                        (object) [
                            'something' => [(object) ['more' => 'objects!']],
                        ],
                    ],
                    'in' => (object) ['second' => 'object'],
                ],
            ],
        ];

        self::assertEquals(
            [
                (object) [
                    'id' => 1,
                    'out' => (object) [
                        'arr' => [
                            '{"in":"string"}',
                            '{"in":[{"array":"of objects!"}]}',
                        ],
                        'in' => '"string"',
                    ],
                ],
                (object) [
                    'id' => 2,
                    'out' => (object) [
                        'arr' => [
                            '{"something":[{"more":"objects!"}]}',
                        ],
                        'in' => '{"second":"object"}',
                    ],
                ],
            ],
            $filter->run($data)
        );
    }

    public function testDelimiter(): void
    {
        $jobConfig = new JobConfig(
            [
            'endpoint' => 'ep',
            'responseFilter' => 'out/in',
            'responseFilterDelimiter' => '/',
            ]
        );
        $filter = new Filter($jobConfig, GenericExtractor::COMPAT_LEVEL_LATEST);

        $data = [
            (object) [
                'i.d' => 1,
                'out' => (object) ['in' => ['string']],
            ],
        ];

        self::assertEquals(
            [
                (object) [
                    'i.d' => 1,
                    'out' => (object) [
                        'in' => '["string"]',
                    ],
                ],
            ],
            $filter->run($data)
        );
    }

    public function testNestedArrays(): void
    {
        $jobConfig = new JobConfig(
            [
            'endpoint' => 'ep',
            'responseFilter' => 'out.arr[].arr2[]',
            ]
        );
        $filter = new Filter($jobConfig, GenericExtractor::COMPAT_LEVEL_LATEST);

        $data = [
            (object) [
                'out' => (object) [
                    'arr' => [
                        (object) [
                            'arr2' => [1,[2],(object) ['three' => 3]],
                        ],
                    ],
                ],
            ],
        ];

        self::assertEquals(
            [
            (object) [
                'out' => (object) [
                    'arr' => [
                        (object) [
                            'arr2' => [1,'[2]','{"three":3}'],
                        ],
                    ],
                ],
            ],
            ],
            $filter->run($data)
        );
    }

    public function testRunEmptyValuesLegacy(): void
    {
        $jobConfig = new JobConfig(
            [
            'endpoint' => 'ep',
            'responseFilter' => 'data',
            ]
        );

        $filter = new Filter($jobConfig, GenericExtractor::COMPAT_LEVEL_FILTER_EMPTY_SCALAR);
        $data = json_decode(
            '[
                {
                    "id": 1,
                    "data": false
                },
                {
                    "id": 2,
                    "data": 0
                },
                {
                    "id": 3,
                    "data": null
                },
                {
                    "id": 4,
                    "data": ""
                },
                {
                    "id": 5,
                    "data": []
                },
                {
                    "id": 6,
                    "data": ["something"]
                },
                {
                    "id": 7,
                    "data": [42]
                }
            ]'
        );

        self::assertEquals(
            [
                (object) [
                    'id' => 1,
                    'data' => false,
                ],
                (object) [
                    'id' => 2,
                    'data' => 0,
                ],
                (object) [
                    'id' => 3,
                    'data' => null,
                ],
                (object) [
                    'id' => 4,
                    'data' => '',
                ],
                (object) [
                    'id' => 5,
                    'data' => [],
                ],
                (object) [
                    'id' => 6,
                    'data' => '["something"]',
                ],
                (object) [
                    'id' => 7,
                    'data' => '[42]',
                ],
            ],
            $filter->run($data)
        );
    }

    public function testRunEmptyValuesFilterLatest(): void
    {
        $jobConfig = new JobConfig(
            [
            'endpoint' => 'ep',
            'responseFilter' => 'data',
            ]
        );

        $filter = new Filter($jobConfig, GenericExtractor::COMPAT_LEVEL_LATEST);
        $data = json_decode(
            '[
                {
                    "id": 1,
                    "data": false
                },
                {
                    "id": 2,
                    "data": 0
                },
                {
                    "id": 3,
                    "data": null
                },
                {
                    "id": 4,
                    "data": ""
                },
                {
                    "id": 5,
                    "data": []
                },
                {
                    "id": 6,
                    "data": ["something"]
                },
                {
                    "id": 7,
                    "data": [42]
                }
            ]'
        );

        self::assertEquals(
            [
                (object) [
                    'id' => 1,
                    'data' => 'false',
                ],
                (object) [
                    'id' => 2,
                    'data' => '0',
                ],
                (object) [
                    'id' => 3,
                    'data' => 'null',
                ],
                (object) [
                    'id' => 4,
                    'data' => '""',
                ],
                (object) [
                    'id' => 5,
                    'data' => '[]',
                ],
                (object) [
                    'id' => 6,
                    'data' => '["something"]',
                ],
                (object) [
                    'id' => 7,
                    'data' => '[42]',
                ],
            ],
            $filter->run($data)
        );
    }

    public function testRunEmptyValuesArrayLegacy(): void
    {
        $jobConfig = new JobConfig(
            [
            'endpoint' => 'ep',
            'responseFilter' => 'data[]',
            ]
        );

        $filter = new Filter($jobConfig, GenericExtractor::COMPAT_LEVEL_FILTER_EMPTY_SCALAR);
        $data = json_decode(
            '[
                {
                    "id": 1,
                    "data": [0, false, []]
                },
                {
                    "id": 2,
                    "data": ["foo", 0, ["bar"]]
                }
            ]'
        );

        self::assertEquals(
            [
                (object) [
                    'id' => 1,
                    'data' => [0, false, '[]'],
                ],
                (object) [
                    'id' => 2,
                    'data' => ['foo', 0, '["bar"]'],
                ],
            ],
            $filter->run($data)
        );
    }

    public function testRunEmptyValuesArrayLatest(): void
    {
        $jobConfig = new JobConfig(
            [
            'endpoint' => 'ep',
            'responseFilter' => 'data[]',
            ]
        );

        $filter = new Filter($jobConfig, GenericExtractor::COMPAT_LEVEL_LATEST);
        $data = json_decode(
            '[
                {
                    "id": 1,
                    "data": [0, false, []]
                },
                {
                    "id": 2,
                    "data": ["foo", 0, ["bar"]]
                }
            ]'
        );

        self::assertEquals(
            [
                (object) [
                    'id' => 1,
                    'data' => ['0', 'false', '[]'],
                ],
                (object) [
                    'id' => 2,
                    'data' => ['"foo"', '0', '["bar"]'],
                ],
            ],
            $filter->run($data)
        );
    }
}


================================================
File: /tests/phpunit/CacheTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests;

use Keboola\Csv\CsvReader;
use PHPUnit\Framework\TestCase;

class CacheTest extends TestCase
{
    public function testCacheTTL(): void
    {
        // first execution
        $dataDir = __DIR__ . '/data/requestCacheTTL';
        $runPhp = __DIR__ . '/../../src/run.php';
        $this->rmDir("{$dataDir}/out");
        $this->rmDir("{$dataDir}/cache");
        $filePath = "{$dataDir}/out/tables/getPost.get";
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);

        self::assertStringContainsString('Extractor finished successfully.', implode("\n", $output));
        self::assertFileExists($filePath);
        $csv = new CsvReader($filePath);
        self::assertEquals(3, $csv->getColumnsCount());

        $csv->next();
        $data = $csv->current();
        unset($csv);

        $firstDateTime = (int) $data[1];
        $this->rmDir("{$dataDir}/out");

        sleep(3);

        // second execution
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);

        self::assertStringContainsString('Extractor finished successfully', implode("\n", $output));
        self::assertFileExists($filePath);
        $csv = new CsvReader($filePath);
        self::assertEquals(3, $csv->getColumnsCount());

        $csv->next();
        $data = $csv->current();
        unset($csv);

        // First and second date are same -> response was cached
        $secondDateTime = (int) $data[1];
        self::assertTrue($firstDateTime === $secondDateTime);
        $this->rmDir("{$dataDir}/out");

        sleep(10);

        // third execution
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);

        self::assertStringContainsString('Extractor finished successfully.', implode("\n", $output));
        self::assertFileExists($filePath);
        $csv = new CsvReader($filePath);
        self::assertEquals(3, $csv->getColumnsCount());

        $csv->next();
        $data = $csv->current();
        unset($csv);

        $thirdDateTime = (int) $data[1];
        self::assertTrue($secondDateTime < $thirdDateTime);

        $this->rmDir("{$dataDir}/out");
        $this->rmDir("{$dataDir}/cache");
    }

    protected function rmDir(string $dirPath): void
    {
        if (!file_exists($dirPath)) {
            return;
        }
        foreach (new \RecursiveIteratorIterator(
            new \RecursiveDirectoryIterator(
                $dirPath,
                \FilesystemIterator::SKIP_DOTS
            ),
            \RecursiveIteratorIterator::CHILD_FIRST
        ) as $path) {
            $path->isDir() && !$path->isLink() ? rmdir($path->getPathname()) : unlink($path->getPathname());
        }
        rmdir($dirPath);
    }

    public function testCache(): void
    {
        $this->rmDir(__DIR__ . '/data/requestCache/out');
        $this->rmDir(__DIR__ . '/data/requestCache/cache');
        $filePath = __DIR__ . '/data/requestCache/out/tables/getPost.get';

        // first execution
        $dataDir = __DIR__ . '/data/requestCache';
        $runPhp = __DIR__ . '/../../src/run.php';
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);

        self::assertStringContainsString('Extractor finished successfully', implode("\n", $output));
        self::assertFileExists($filePath);
        $csv = new CsvReader($filePath);
        self::assertEquals(3, $csv->getColumnsCount());

        $csv->next();
        $data = $csv->current();
        unset($csv);

        $firstDateTime = (int) $data[1];
        $this->rmDir(__DIR__ . '/data/requestCache/out');

        sleep(3);

        // second execution
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);

        self::assertStringContainsString('Extractor finished successfully', implode("\n", $output));
        self::assertFileExists($filePath);
        $csv = new CsvReader($filePath);
        self::assertEquals(3, $csv->getColumnsCount());

        $csv->next();
        $data = $csv->current();
        unset($csv);

        // First and second date are same -> response was cached
        $secondDateTime = (int) $data[1];
        self::assertTrue($firstDateTime === $secondDateTime);

        $this->rmDir(__DIR__ . '/data/requestCache/out');

        $this->rmDir(__DIR__ . '/data/requestCache/cache');
    }

    public function testNoCache(): void
    {
        $this->rmDir(__DIR__ . '/data/noCache/out');
        $this->rmDir(__DIR__ . '/data/noCache/cache');
        $filePath = __DIR__ . '/data/noCache/out/tables/getPost.get';

        // first execution
        $dataDir = __DIR__ . '/data/noCache';
        $runPhp = __DIR__ . '/../../src/run.php';
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);

        self::assertStringContainsString('Extractor finished successfully', implode("\n", $output));
        self::assertFileExists($filePath);
        $csv = new CsvReader($filePath);
        self::assertEquals(3, $csv->getColumnsCount());

        $csv->next();
        $data = $csv->current();
        unset($csv);

        $firstDateTime = (int) $data[1];
        $this->rmDir(__DIR__ . '/data/noCache/out');

        sleep(3);

        // second execution
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);
        self::assertStringContainsString('Extractor finished successfully', implode("\n", $output));
        self::assertFileExists($filePath);

        $csv = new CsvReader($filePath);
        self::assertEquals(3, $csv->getColumnsCount());

        $csv->next();
        $data = $csv->current();
        unset($csv);

        // First and second date are NOT same -> response was NOT cached
        $secondDateTime = (int) $data[1];
        self::assertTrue($firstDateTime < $secondDateTime);
        $this->rmDir(__DIR__ . '/data/noCache/out');
    }
}


================================================
File: /tests/phpunit/Context/OAuth20LoginContextTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Context;

use Keboola\GenericExtractor\Context\OAuth20LoginContext;
use PHPUnit\Framework\TestCase;

class OAuth20LoginContextTest extends TestCase
{
    public function testComplex(): void
    {
        $configAttributes = ['attr1' => 123, 'attr2' => 'xyz'];
        $key = 'my-key';
        $secret = 'my-secret';
        $data = [
            'status' => 'ok',
            'access_token' => '1234',
        ];
        $context = OAuth20LoginContext::create($key, $secret, $data, $configAttributes);
        $expected = [
            'consumer' => [
                'client_id' => 'my-key',
                'client_secret' => 'my-secret',
            ],
            'user' => [
                'status' => 'ok',
                'access_token' => '1234',
            ],
            'attr' => [
                'attr1' => 123,
                'attr2' => 'xyz',
            ],
        ];
        $this->assertSame($expected, $context);
    }
}


================================================
File: /tests/phpunit/Context/OAuth20ContextTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Context;

use Keboola\GenericExtractor\Context\OAuth20Context;
use PHPUnit\Framework\TestCase;

class OAuth20ContextTest extends TestCase
{
    public function testObjectData(): void
    {
        $request = RequestContextTest::createRequest();
        $data = (object) [
            'status' => 'ok',
            'foo' => [
                'bar' => 'baz',
            ],
        ];
        $context = OAuth20Context::create($request, 'my-client-id', $data);
        $expected = [
            'query' => [
                'param1' => 'abc',
                'param2' => 'ěšč',
            ],
            'request' => RequestContextTest::getExpectedContext(),
            'authorization' => [
                'clientId' => 'my-client-id',
                'nonce' => '****', // variable
                'timestamp' => '****', // variable
                'data.status' => 'ok',
                'data.foo.bar' => 'baz',
            ],
        ];

        // Nonce and timestamp are variable
        $context['authorization']['nonce'] = isset($context['authorization']['nonce']) ? '****' : 'UNDEFINED';
        $context['authorization']['timestamp'] = isset($context['authorization']['timestamp']) ? '****' : 'UNDEFINED';
        $this->assertSame($expected, $context);
    }

    public function testScalarData(): void
    {
        $request = RequestContextTest::createRequest();
        $data = 'my-text';
        $context = OAuth20Context::create($request, 'my-client-id', $data);
        $expected = [
            'query' => [
                'param1' => 'abc',
                'param2' => 'ěšč',
            ],
            'request' => RequestContextTest::getExpectedContext(),
            'authorization' => [
                'clientId' => 'my-client-id',
                'nonce' => '****', // variable
                'timestamp' => '****', // variable
                'data' => 'my-text',
            ],
        ];

        // Nonce and timestamp are variable
        $context['authorization']['nonce'] = isset($context['authorization']['nonce']) ? '****' : 'UNDEFINED';
        $context['authorization']['timestamp'] = isset($context['authorization']['timestamp']) ? '****' : 'UNDEFINED';
        $this->assertSame($expected, $context);
    }
}


================================================
File: /tests/phpunit/Context/QueryAuthContextTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Context;

use Keboola\GenericExtractor\Context\QueryAuthContext;
use PHPUnit\Framework\TestCase;

class QueryAuthContextTest extends TestCase
{
    public function testComplex(): void
    {
        $request = RequestContextTest::createRequest();
        $configAttributes = ['attr1' => 123, 'attr2' => 'xyz'];
        $context = QueryAuthContext::create($request, $configAttributes);
        $expected = [
            'query' => [
                'param1' => 'abc',
                'param2' => 'ěšč',
            ],
            'request' => RequestContextTest::getExpectedContext(),
            'attr' => [
                'attr1' => 123,
                'attr2' => 'xyz',
            ],
        ];
        $this->assertSame($expected, $context);
    }
}


================================================
File: /tests/phpunit/Context/RequestContextTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Context;

use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Utils;
use Keboola\GenericExtractor\Context\RequestContext;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\RequestInterface;

class RequestContextTest extends TestCase
{
    public function testComplex(): void
    {
        $context = RequestContext::create(self::createRequest());
        $expected = self::getExpectedContext();
        $this->assertSame($expected, $context);
    }

    public function testMinimal(): void
    {
        $context = RequestContext::create(new Request('GET', 'http://example.com'));
        $expected = [
            'url' => 'http://example.com',
            'path' => '',
            'queryString' => '',
            'method' => 'GET',
            'hostname' => 'example.com',
            'port' => 80,
            'resource' => '',
        ];
        $this->assertSame($expected, $context);
    }

    public static function createRequest(): RequestInterface
    {
        return new Request(
            'POST',
            Utils::uriFor('https://example.com:123/api/test/?param1=abc&param2=%C4%9B%C5%A1%C4%8D'),
            [
                'X-Test-Foo' => 'Bar',
            ],
            '{"some": "body"}'
        );
    }

    public static function getExpectedContext(): array
    {
        return [
            'url' => 'https://example.com:123/api/test/?param1=abc&param2=%C4%9B%C5%A1%C4%8D',
            'path' => '/api/test/',
            'queryString' => 'param1=abc&param2=%C4%9B%C5%A1%C4%8D',
            'method' => 'POST',
            'hostname' => 'example.com',
            'port' => 123,
            'resource' => '/api/test/?param1=abc&param2=%C4%9B%C5%A1%C4%8D',
        ];
    }
}


================================================
File: /tests/phpunit/Context/LoginAuthLoginRequestContextTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Context;

use Keboola\GenericExtractor\Context\LoginAuthLoginRequestContext;
use PHPUnit\Framework\TestCase;

class LoginAuthLoginRequestContextTest extends TestCase
{
    public function testComplex(): void
    {
        $configAttributes = ['attr1' => 123, 'attr2' => 'xyz'];
        $context = LoginAuthLoginRequestContext::create($configAttributes);
        $expected = [
            'attr' => [
                'attr1' => 123,
                'attr2' => 'xyz',
            ],
        ];
        $this->assertSame($expected, $context);
    }
}


================================================
File: /tests/phpunit/Context/LoginAuthApiRequestContextTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Context;

use Keboola\GenericExtractor\Context\LoginAuthApiRequestContext;
use PHPUnit\Framework\TestCase;

class LoginAuthApiRequestContextTest extends TestCase
{
    public function testComplex(): void
    {
        $loginResponse = (object) [
            'data' => (object) [
                'token' => '1234',
                'expires' => 5000,
            ],
        ];
        $configAttributes = ['attr1' => 123, 'attr2' => 'xyz'];
        $context = LoginAuthApiRequestContext::create($loginResponse, $configAttributes);
        $expected = [
            'response' => [
                'data' => [
                    'token' => '1234',
                    'expires' => 5000,
                ],
            ],
            'attr' => [
                'attr1' => 123,
                'attr2' => 'xyz',
            ],
        ];
        $this->assertSame($expected, $context);
    }
}


================================================
File: /tests/phpunit/ExtractorTestCase.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests;

use PHPUnit\Framework\TestCase;

class ExtractorTestCase extends TestCase
{
    /**
     * @return mixed
     */
    protected static function callMethod(object $obj, string $name, array $args = [])
    {
        $class = new \ReflectionClass($obj);
        $method = $class->getMethod($name);
        $method->setAccessible(true);

        return $method->invokeArgs($obj, $args);
    }
}


================================================
File: /tests/phpunit/Traits/RmDirTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Traits;

trait RmDirTrait
{
    protected function rmDir(string $dirPath): void
    {
        if (!file_exists($dirPath)) {
            return;
        }
        foreach (new \RecursiveIteratorIterator(
            new \RecursiveDirectoryIterator(
                $dirPath,
                \FilesystemIterator::SKIP_DOTS
            ),
            \RecursiveIteratorIterator::CHILD_FIRST
        ) as $path) {
            $path->isDir() && !$path->isLink() ? rmdir($path->getPathname()) : unlink($path->getPathname());
        }
        rmdir($dirPath);
    }
}


================================================
File: /tests/phpunit/Traits/ToxiproxyTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Traits;

use GuzzleHttp\Client;

/**
 * We use HTTP calls, because PHP "toxiproxy" client requires older Guzzle
 */
trait ToxiproxyTrait
{
    protected function clearAllProxies(): void
    {
        $client = $this->getToxiClient();
        $body = json_decode($client->get('/proxies')->getBody()->getContents(), true);
        $names = array_map(fn (array $proxy) => $proxy['name'], $body);
        foreach ($names as $name) {
            $client->delete("/proxies/${name}");
        }
    }

    protected function createProxy(string $proxyName, string $upstream, int $listenPort): void
    {
        $this->getToxiClient()->post('/proxies', [
            'body' => sprintf(
                '{"name": "%s", "upstream": "%s", "listen": "0.0.0.0:%s"}',
                $proxyName,
                $upstream,
                $listenPort
            ),
        ]);
    }

    protected function simulateNetworkLimitDataThenDown(string $proxyName, int $bytes): string
    {
        $response = $this->getToxiClient()->post("/proxies/${proxyName}/toxics", [
            'body' => sprintf(
                '{"type": "limit_data", "attributes": {"bytes": %d }}',
                $bytes,
            ),
        ]);

        $body = json_decode($response->getBody()->getContents(), true);
        return $body['name'];
    }

    protected function removeToxic(string $proxyName, string $toxicName): void
    {
        $this->getToxiClient()->delete("/proxies/${proxyName}/toxics/${toxicName}");
    }

    private function getToxiClient(): Client
    {
        return new Client([
            'base_uri' => 'http://toxiproxy:8474',
        ]);
    }
}


================================================
File: /tests/phpunit/Traits/CloseSshTunnelsTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Traits;

use Symfony\Component\Process\Process;

trait CloseSshTunnelsTrait
{
    protected function closeSshTunnels(): void
    {
        # Close SSH tunnel if created
        $process = new Process(['sh', '-c', 'pgrep ssh | xargs -r kill']);
        $process->mustRun();
    }
}


================================================
File: /tests/phpunit/SshTunnelRetryTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests;

use Keboola\GenericExtractor\Tests\Traits\CloseSshTunnelsTrait;
use Keboola\GenericExtractor\Tests\Traits\RmDirTrait;
use Keboola\GenericExtractor\Tests\Traits\ToxiproxyTrait;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Process\Process;

class SshTunnelRetryTest extends TestCase
{
    use CloseSshTunnelsTrait;
    use RmDirTrait;
    use ToxiproxyTrait;

    private array $rmDirs;

    protected function setUp(): void
    {
        parent::setUp();
        $this->rmDirs = [];
    }

    protected function tearDown(): void
    {
        parent::tearDown();

        // Remove out dirs
        foreach ($this->rmDirs as $dir) {
            $this->rmDir($dir);
        }

        $this->clearAllProxies();
        $this->closeSshTunnels();
    }

    public function testRun(): void
    {
        $dataDir = __DIR__ . '/data/ssh_tunnel';
        $process = $this->startPhpProcess($dataDir);
        $process->wait();
        $stdout = $process->getOutput();
        Assert::assertSame(0, $process->getExitCode());
        Assert::assertSame(1, substr_count($stdout, 'SSH tunnel created.'));
        Assert::assertStringContainsString('Extractor finished successfully.', $stdout);
    }

    public function testBadConfig(): void
    {
        $dataDir = __DIR__ . '/data/ssh_tunnel_bad_config';
        $process = $this->startPhpProcess($dataDir);
        $process->wait();
        Assert::assertSame(1, $process->getExitCode());
        Assert::assertStringContainsString('Unable to create ssh tunnel', $process->getOutput());
        Assert::assertStringContainsString('Retrying... [1x]', $process->getOutput());
        Assert::assertStringContainsString('Retrying... [4x]', $process->getOutput());
    }

    public function testRetryServerError(): void
    {
        $dataDir = __DIR__ . '/data/ssh_tunnel_server_error';
        $process = $this->startPhpProcess($dataDir);

        // Server error, Guzzle did the retry -> the SSH tunnel is OK -> no SSH tunnel reconnecting
        $process->wait();
        $stdout = $process->getOutput();
        Assert::assertSame(1, $process->getExitCode());
        Assert::assertStringContainsString('Creating SSH tunnel to \'ssh-proxy\'', $stdout);
        Assert::assertStringContainsString('Http request failed, retrying in 1.0 seconds [1x].', $stdout);
        Assert::assertStringContainsString('Http request failed, retrying in 2.0 seconds [2x].', $stdout);
        Assert::assertSame(1, substr_count($stdout, 'SSH tunnel created.'));
    }

    public function testNetworkProblemTemporal(): void
    {
        // Block network after 5kb (SSH tunnel already created, downloading 10kb response from API)
        $this->createProxy('ssh-server', 'ssh-proxy:22', 2222);
        $toxicName = $this->simulateNetworkLimitDataThenDown('ssh-server', 5000);

        $dataDir = __DIR__ . '/data/ssh_tunnel_net_problem';
        $process = $this->startPhpProcess($dataDir);

        // Make network working after 2 seconds
        sleep(2);
        $this->removeToxic('ssh-server', $toxicName);

        // Process failed, Guzzle did the retry -> the SSH tunnel is reconnected
        $process->wait();
        $stdout = $process->getOutput();
        Assert::assertSame(0, $process->getExitCode());
        Assert::assertStringContainsString('Creating SSH tunnel to \'toxiproxy\'', $stdout);
        Assert::assertStringContainsString('Http request failed, retrying in 1.0 seconds [1x].', $stdout);
        Assert::assertStringContainsString('SSH tunnel is not alive. Reconnecting ...', $stdout);
        Assert::assertStringContainsString('Extractor finished successfully.', $stdout);
        Assert::assertSame(1, substr_count($stdout, 'SSH tunnel is not alive. Reconnecting ...'));
        Assert::assertSame(2, substr_count($stdout, 'SSH tunnel created.'));
    }

    public function testNetworkProblemPersists(): void
    {
        // Block network after 5kb (SSH tunnel already created, downloading 10kb response from API)
        $this->createProxy('ssh-server', 'ssh-proxy:22', 2222);
        $this->simulateNetworkLimitDataThenDown('ssh-server', 5000);

        $dataDir = __DIR__ . '/data/ssh_tunnel_net_problem';
        $process = $this->startPhpProcess($dataDir);

        // Process failed, Guzzle did the retry -> the SSH tunnel is NOT reconnected, network is still down
        $process->wait();
        $stdout = $process->getOutput();
        Assert::assertSame(1, $process->getExitCode());
        Assert::assertStringContainsString('Creating SSH tunnel to \'toxiproxy\'', $stdout);
        Assert::assertStringContainsString('Http request failed, retrying in 1.0 seconds [1x].', $stdout);
        Assert::assertStringContainsString('Http request failed, retrying in 2.0 seconds [2x].', $stdout);
        Assert::assertStringContainsString('Http request failed, retrying in 4.0 seconds [3x].', $stdout);
        Assert::assertSame(3, substr_count($stdout, 'SSH tunnel is not alive. Reconnecting ...'));
        Assert::assertSame(4, substr_count($stdout, 'SSH tunnel created.'));
    }

    public function startPhpProcess(string $dataDir): Process
    {
        $outDir = $dataDir . '/out';
        $runPhp = __DIR__ . '/../../src/run.php';
        $this->rmDirs[] = $outDir;
        $process = new Process(['php', "$runPhp"], null, ['KBC_DATADIR' => $dataDir]);
        $process->setTimeout(60);
        $process->start();
        return $process;
    }
}


================================================
File: /tests/phpunit/data/ssh_tunnel_net_problem/config.json
================================================
{
  "parameters": {
    "sshProxy": {
      "host": "toxiproxy",
      "port": 2222,
      "user": "root",
      "#privateKey": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA2sE3GjSy45QYfh/2qJngHtZcKV0x9xH14TiPUWS/iNWoJBP/\nwJy15YdN2e3fW/e4wtdcwi0K86Ny5MKZDtTvdP2abUVqDnateCcT/TOFC7Jaeg9v\nnRckDQU5yuHUzuWPKkSu/zSWuogwe26f8U3bARfESFiSLZWJfuvlogFgwg5/4BEP\nGQIksN8hKnbEi5DnI5UvYBTYGDd00Dc9prftnnC/JgOjdvNhVjMa7ZOxsrGLnuDs\nIDV/zjQ5QLwBUulVHcTkzUzEXV7wAU8LqXUUz9vJlwquMk5RwIblad7tuxcOg0Iz\nnzQ4leLX2xnLUF6AopgYifrLqPjI+CkcLfQSMQIDAQABAoIBAQCdzvEfWJEMmBOr\nOQfJzWffFyjZNkALSsukNBc/0nxSDEAF9t9zZhnagWdqJa4SPHzvIknqUnAqHumN\nmcys5HPyY9j5py/BS2AM47QJ3xbFv16B24zbOIxrUC/G6m+I6hYDmhTcSmXKHuFK\nyh1cCJxLB4gz4KFjfRL5mtfHrVLN6i3Is3GwwIeuG57YoCK9mDYhaWAaXkBnbzMF\nIAxsc7+8VzyNpaqu43FOijc0BmMtv37H7U+7+v5Xf+vdYlvPAC5GwaE5H0baplaX\nLeR7hfgqvqrYeME/RHV73TmaG1n7C5bcP4WoBV0o1eTwTnu0rzB7I2pwYtc3ukxr\njqPrC87ZAoGBAPt8t7yAw+otZzrhLprOBzTXxNyKilEgWzI3+nQrClhmVGHOOCcj\nHWP1nbZbMN2E60I94wkXLegJJ+op8fa+hIs9921LbIZWxU5ipciRhsN4XoD336rh\nLf2wcg8uy94fOWWeAitaW2Y3owkv7Pp87DjzF+AduCmH0EtvaOAQ42LjAoGBAN6u\nIZdyr1oRQ3q0PXpKyF5efJID48T634c4SCDHCkAb8txj/N3dyDwzHOIFKPL6M1Zj\nZ/8p2aFk/9CoW+XyXKNIjrWqOWQwhpYT/GyS6LLpiEckjAwfB8NKn0Ylpf749YdT\nIreaHQfgPdku3Zu2IwMcahC+lGYOC+6YeD4j7r7bAoGAA6NGNR/Xtad6esuPFQYt\n7IHCgz4tygahyxQsN0n4GFdCmTeWcFp9rlh7M4wWJN4rWQX0JsmDDHw1a5m3uk3/\nNNRso9QXecn/iKa8py4TuPggxdTQE3S2aZkHzVhr8oaZGfMzLNVdxRjA7v0WfHka\nIajCi6diZpdkV/MAnV0hLOkCgYEAniZLwzT3Zt9V7oKuGvmbvrIahNVwYcjPEkkd\nqPHTzN5MqMv2nlhSSrb+b2O8xnx+E3+8L5O4dhC2QqofwntT4b+5YzpHUmnIXDRL\nlYzs6YxEdkp1kHJFYCTSY85/S0vjjT21LXKt5ZcUNfg7+cfsq9v1VHkWCjk1rjnp\nRDDe8fsCgYEAiVo3ERjlGsF5rOCLGC/UyoqRzAWlXUAAfNepOreBvIHksaKjd6n3\n51LpU+Nnyph8DEmWPaINtrh00YluGNxYmlECxe7+L3ASkpAFkoSMk4QzRcYyGX4r\n0Ql34LEcB55rtlnY7QOHDOKUzbH2Y5DcUe0dPhcxmRg4XlXkce+w2P8=\n-----END RSA PRIVATE KEY-----"
    },
    "api": {
      "baseUrl": "http://jsontest-behind-proxy",
      "retryConfig": {
        "maxRetries": 3
      }
    },
    "config": {
      "debug": true,
      "outputBucket": "get",
      "jobs": [
        {
          "endpoint": "/random",
          "dataType": "get",
          "dataField": "."
        }
      ]
    }
  }
}


================================================
File: /tests/phpunit/data/multipleOutputsUserData/expected/tables/first.get.manifest
================================================
{"destination":"in.c-first.get","incremental":false}

================================================
File: /tests/phpunit/data/multipleOutputsUserData/expected/tables/second.get
================================================
"id","status","an"
"321","get","array"
"girlfriend","imaginary","array"


================================================
File: /tests/phpunit/data/multipleOutputsUserData/expected/tables/second.get.manifest
================================================
{"destination":"in.c-second.get","incremental":false}

================================================
File: /tests/phpunit/data/multipleOutputsUserData/expected/tables/first.get
================================================
"id","status","userData"
"321","get","a scalar"
"girlfriend","imaginary","a scalar"


================================================
File: /tests/phpunit/data/multipleOutputsUserData/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com"
    },
    "config": {
      "jobs": [
        {
          "endpoint": "get"
        }
      ]
    },
    "iterations": [
      {
        "outputBucket": "first",
        "userData": "a scalar"
      },
      {
        "outputBucket": "second",
        "userData": {
          "an": "array"
        }
      }
    ]
  }
}

================================================
File: /tests/phpunit/data/oauth20mac/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "{\"status\": \"ok\",\"access_token\": \"testToken\", \"mac_secret\": \"iAreSoSecret123\"}",
        "appKey": "clId",
        "#appSecret": "clScrt"
      }
    }
  },
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "authentication": {
        "type": "oauth20",
        "format": "json",
        "headers": {
          "Authorization": {
            "function": "concat",
            "args": [
              "MAC id=\"",
              {
                "authorization": "data.access_token"
              },
              "\", ts=\"",
              {
                "authorization": "timestamp"
              },
              "\", nonce=\"",
              {
                "authorization": "nonce"
              },
              "\", mac=\"",
              {
                "function": "md5",
                "args": [
                  {
                    "function": "hash_hmac",
                    "args": [
                      "sha256",
                      {
                        "function": "implode",
                        "args": [
                          "\n",
                          [
                            {
                              "authorization": "timestamp"
                            },
                            {
                              "authorization": "nonce"
                            },
                            {
                              "request": "method"
                            },
                            {
                              "request": "resource"
                            },
                            {
                              "request": "hostname"
                            },
                            {
                              "request": "port"
                            },
                            "\n"
                          ]
                        ]
                      },
                      {
                        "authorization": "data.mac_secret"
                      }
                    ]
                  }
                ]
              },
              "\""
            ]
          },
          "Test": {
            "function": "implode",
            "args": [
              "\n",
              [
                {
                  "authorization": "timestamp"
                },
                {
                  "authorization": "nonce"
                },
                {
                  "request": "method"
                },
                {
                  "request": "resource"
                },
                {
                  "request": "hostname"
                },
                {
                  "request": "port"
                }
              ]
            ]
          }
        }
      }
    },
    "config": {
      "jobs": [
        {
          "endpoint": "oauth20",
          "dataType": "oauth20"
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/basicAuth/expected/tables/getPost.get
================================================
"id","status"
"1","basic"


================================================
File: /tests/phpunit/data/basicAuth/expected/tables/getPost.get.manifest
================================================
{"destination":"in.c-getPost.get","incremental":false}

================================================
File: /tests/phpunit/data/basicAuth/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "authentication": {
        "type": "basic"
      }
    },
    "config": {
      "username": "test",
      "password": "test",
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "basic",
          "dataType": "get"
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/jobUserData/expected/state.json
================================================
{"time":{"previousStart":1457992654},"json_parser.struct":{"get":{"id":"scalar","status":"scalar"}},"json_parser.structVersion":2.0}

================================================
File: /tests/phpunit/data/jobUserData/expected/tables/get
================================================
"id","status","cfg","job"
"321","get","cfgVal","jobVal"
"girlfriend","imaginary","cfgVal","jobVal"


================================================
File: /tests/phpunit/data/jobUserData/expected/tables/get.manifest
================================================
{"incremental":false}

================================================
File: /tests/phpunit/data/jobUserData/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com"
    },
    "config": {
      "userData": {
        "cfg": "cfgVal"
      },
      "jobs": [
        {
          "endpoint": "get",
          "userData": {
            "job": "jobVal"
          }
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/invalidHeadersConfigOauth/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "https://api.stripe.com/v1/",
      "authentication": {
        "type": "oauth20",
        "headers": {
          "Authorization": {
            "args": [
              {
                "authorization": "data"
              }
            ]
          }
        }
      }
    },
    "config": {
      "jobs": [
        {
          "endpoint": "customers",
          "dataType": "customers"
        }
      ]
    }
  },
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "xxxxx",
        "appKey": "clientId",
        "#appSecret": "xxxxx"
      }
    }
  }
}

================================================
File: /tests/phpunit/data/getPost/expected/tables/getPost.post
================================================
"id","status"
"123","post"
"potato","mashed"


================================================
File: /tests/phpunit/data/getPost/expected/tables/getPost.get
================================================
"id","status"
"321","get"
"girlfriend","imaginary"


================================================
File: /tests/phpunit/data/getPost/expected/tables/getPost.get.manifest
================================================
{"destination":"in.c-getPost.get","incremental":false}

================================================
File: /tests/phpunit/data/getPost/expected/tables/getPost.post.manifest
================================================
{"destination":"in.c-getPost.post","incremental":false}

================================================
File: /tests/phpunit/data/getPost/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "pagination": {
        "method": "response.url",
        "urlKey": "next"
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "get"
        },
        {
          "endpoint": "post",
          "method": "POST",
          "params": {
            "parameter": "value"
          }
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/multipleOutputs/expected/tables/first.get.manifest
================================================
{"destination":"in.c-first.get","incremental":false}

================================================
File: /tests/phpunit/data/multipleOutputs/expected/tables/second.get
================================================
"id","status"
"321","get"
"girlfriend","imaginary"


================================================
File: /tests/phpunit/data/multipleOutputs/expected/tables/second.get.manifest
================================================
{"destination":"in.c-second.get","incremental":true}

================================================
File: /tests/phpunit/data/multipleOutputs/expected/tables/first.get
================================================
"id","status"
"321","get"
"girlfriend","imaginary"


================================================
File: /tests/phpunit/data/multipleOutputs/config.json
================================================
{
  "destination": "in.c-second.get",
  "incremental": false,
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com"
    },
    "config": {
      "jobs": [
        {
          "endpoint": "get"
        }
      ]
    },
    "iterations": [
      {
        "outputBucket": "first"
      },
      {
        "outputBucket": "second",
        "incrementalOutput": true
      }
    ]
  }
}

================================================
File: /tests/phpunit/data/metadataTest/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://example.com"
    },
    "config": {}
  }
}

================================================
File: /tests/phpunit/data/metadataTest/in/state.json
================================================
{"some":"data","more": {"woah": "such recursive"}}

================================================
File: /tests/phpunit/data/metadataTest/out/state.json
================================================
{"some":"data","more":{"woah":"such recursive"}}

================================================
File: /tests/phpunit/data/requestCache/config.json
================================================
{
  "parameters": {
    "cache": {
      "ttl": 7200
    },
    "api": {
      "baseUrl": "http://jsontest",
      "http": {
        "Accept": "application/json",
        "Content-Type": "application/json;charset=UTF-8"
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "/date",
          "dataType": "get",
          "dataField": "."
        }
      ]
    }
  }
}


================================================
File: /tests/phpunit/data/invalidHeadersConfig/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "https://lichess.org/",
      "http": {
        "headers": {
          "Authorization":
                  [
            {
              "args": [
                "Bearer ",
                {
                  "attr": "#token"
                }
              ],
              "function": "concat"
            }
        ]
        }
      }
    },
    "config": {
      "#token": "KBC::ProjectSecureKV::eJxLtDK2qs60MrIutjI0sLBSuveVieHfmSubrQLzfI88D9NVajxXcup9cT5vJH/N9W1zfp+Nkf7Pq3Fa7cy7iiMzF5gJySx3FzFNLYt9pPKCx1/Z/9bCk3JNG6zSJk1dK+g6tdLr7pq3m3j2pR1u5dt//cgehs86Lxd3rj1yXOnINY++SiXrTCtjoMVGZlZK6al5uql5yUWVBSX5RWbGKebJKYYmiWbGpqkgVSZAVcZGVkrJhomWKaaGhgZGZokmBolJFpaGycaJqRaWppZAloG5knUtAHCEU00=",
      "debug": true,
      "jobs": [
        {
          "dataField": ".",
          "endpoint": "api/account"
        }
      ],
      "outputBucket": "Player_Details"
    }
  }
}

================================================
File: /tests/phpunit/data/dynamicUserData/expected/state.json
================================================
{"time":{"previousStart":1457992654},"json_parser.struct":{"get":{"id":"scalar","status":"scalar"}},"json_parser.structVersion":2.0}

================================================
File: /tests/phpunit/data/dynamicUserData/expected/tables/get
================================================
"id","status","current_date"
"321","get","{{date}}"
"girlfriend","imaginary","{{date}}"


================================================
File: /tests/phpunit/data/dynamicUserData/expected/tables/get.manifest
================================================
{"incremental":false}

================================================
File: /tests/phpunit/data/dynamicUserData/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com"
    },
    "config": {
      "userData": {
        "current_date": {
          "function": "date",
          "args": [
            "Y-m-d",
            {
              "time": "currentStart"
            }
          ]
        }
      },
      "jobs": [
        {
          "endpoint": "get"
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/syncAction/config.json
================================================
{
  "storage": {},
  "parameters": {
    "__SELECTED_JOB": "0",
    "__CURL_COMMAND": "curl \"https://jsonplaceholder.typicode.com/posts\"",
    "config": {
      "jobs": [
        {
          "__NAME": "users",
          "endpoint": "users",
          "method": "GET",
          "dataType": "",
          "dataField": "users"
        }
      ],
      "test": "test-value",

      "debug": false,
      "outputBucket": "in.c-",
      "incrementalOutput": false,
      "__AUTH_METHOD": "api-key",
      "#__AUTH_TOKEN": "token"
    },
    "api": {
      "baseUrl": "http://127.0.0.1:8000",
      "http": {
        "headers": {
          "auth-key": {
            "attr": "#__AUTH_TOKEN"
          }
        }
      }
    },
    "http": {
      "maxRetries": 10,
      "codes": [
        500,
        502,
        503,
        504,
        408,
        420,
        429
      ]
    }
  },
  "action": "load_from_curl",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /tests/phpunit/data/noCache/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://jsontest",
      "http": {
        "Accept": "application/json",
        "Content-Type": "application/json;charset=UTF-8"
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "/date",
          "dataType": "get",
          "dataField": "."
        }
      ]
    }
  }
}


================================================
File: /tests/phpunit/data/oauth20queryfn/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "{\"status\": \"ok\",\"access_token\": \"token\"}"
      }
    }
  },
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "authentication": {
        "type": "oauth20",
        "format": "json",
        "query": "..."
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "oauth20",
          "dataType": "oauth20"
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/oauth20login/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "{\"status\": \"ok\",\"access_token\": \"testToken\"}",
        "appKey": "clId",
        "#appSecret": "clScrt"
      }
    }
  },
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "authentication": {
        "type": "oauth20.login",
        "loginRequest": {
          "endpoint": "https://www.linkedin.com/uas/oauth2/accessToken",
          "params": {
            "grant_type": "authorization_code",
            "code": "refresh_token",
            "redirect_uri": "https://syrup.keboola.com/oauth-v2/authorize/keboola.ex-linkedin/callback",
            "client_id": {
              "consumer": "client_id"
            },
            "client_secret": {
              "consumer": "client_secret"
            }
          },
          "method": "POST",
          "headers": {
            "Content-Type": "application/x-www-form-urlencoded"
          }
        },
        "apiRequest": {
          "query": {
            "oauth2_access_token": "access_token"
          }
        }
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "oauth20",
          "dataType": "oauth20"
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/recursive/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "test"
        },
        "config": {
            "outputBucket": "rec",
            "jobs": [
                {
                    "endpoint": "exports/tickets.json",
                    "dataType": "tickets_export",
                    "children": [
                        {
                            "endpoint": "tickets/{1:id}/comments.json",
                            "recursionFilter": "status!=Deleted",
                            "dataType": "comments",
                            "placeholders": {
                                "1:id": "id"
                            },
                            "children": [
                                {
                                    "endpoint": "third/level/{2:id}/{id}.json",
                                    "placeholders": {
                                        "2:id": "id",
                                        "id": "id"
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }
}

================================================
File: /tests/phpunit/data/defaultBucket/expected/state.json
================================================
{"time":{"previousStart":1457078392},"json_parser.struct":{"db":{"key":"scalar"}},"json_parser.structVersion":2.0}

================================================
File: /tests/phpunit/data/defaultBucket/expected/tables/db
================================================
"key"
"value"


================================================
File: /tests/phpunit/data/defaultBucket/expected/tables/db.manifest
================================================
{"incremental":false}

================================================
File: /tests/phpunit/data/defaultBucket/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com"
    },
    "config": {
      "jobs": [
        {
          "endpoint": "defaultBucket",
          "dataType": "db"
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/oauth20bearer/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "{\"status\": \"ok\",\"access_token\": \"testToken\"}",
        "appKey": "clId",
        "#appSecret": "clScrt"
      }
    }
  },
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "authentication": {
        "type": "oauth20",
        "format": "json",
        "headers": {
          "Authorization": {
            "function": "concat",
            "args": [
              "Bearer ",
              {
                "authorization": "data.access_token"
              }
            ]
          }
        }
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "oauth20",
          "dataType": "oauth20"
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/storeResultsDefaultBucket/out/tables/1
================================================
"col11","col12"
"c","d"


================================================
File: /tests/phpunit/data/storeResultsDefaultBucket/out/tables/1.manifest
================================================
{"incremental":false,"primary_key":["col11"]}

================================================
File: /tests/phpunit/data/storeResultsDefaultBucket/out/tables/0.manifest
================================================
{"incremental":false}

================================================
File: /tests/phpunit/data/storeResultsDefaultBucket/out/tables/0
================================================
"col1","col2"
"a","b"


================================================
File: /tests/phpunit/data/simple_basic/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "test",
            "authentication": {
                "type": "basic"
            }
        },
        "config": {
            "id": "multiCfg",
            "username": "aaa",
            "password": "apass",
            "jobs": [
                {
                    "endpoint": "exports/tickets.json",
                    "dataType": "tickets_export"
                }
            ]
        }
    }
}

================================================
File: /tests/phpunit/data/jsonMap/expected/tables/get
================================================
"id","st"
"1","basic"


================================================
File: /tests/phpunit/data/jsonMap/expected/tables/get.manifest
================================================
{"incremental":true,"primary_key":["id"]}

================================================
File: /tests/phpunit/data/jsonMap/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com"
    },
    "config": {
      "incrementalOutput": true,
      "mappings": {
        "get": {
          "id": {
            "mapping": {
              "destination": "id",
              "primaryKey": true
            }
          },
          "status": {
            "mapping": {
              "destination": "st"
            }
          }
        }
      },
      "jobs": [
        {
          "endpoint": "basic",
          "dataType": "get"
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/storeResultsTest/out/tables/full/1
================================================
"col11","col12"
"c","d"


================================================
File: /tests/phpunit/data/storeResultsTest/out/tables/full/1.manifest
================================================
{"destination":"in.c-full.1","incremental":false}

================================================
File: /tests/phpunit/data/storeResultsTest/out/tables/full/0.manifest
================================================
{"destination":"in.c-full.0","incremental":false}

================================================
File: /tests/phpunit/data/storeResultsTest/out/tables/full/0
================================================
"col1","col2"
"a","b"


================================================
File: /tests/phpunit/data/storeResultsTest/out/tables/incremental/1
================================================
"col11","col12"
"c","d"


================================================
File: /tests/phpunit/data/storeResultsTest/out/tables/incremental/1.manifest
================================================
{"destination":"in.c-incremental.1","incremental":true}

================================================
File: /tests/phpunit/data/storeResultsTest/out/tables/incremental/0.manifest
================================================
{"destination":"in.c-incremental.0","incremental":true}

================================================
File: /tests/phpunit/data/storeResultsTest/out/tables/incremental/0
================================================
"col1","col2"
"a","b"


================================================
File: /tests/phpunit/data/ssh_tunnel/config.json
================================================
{
  "parameters": {
    "sshProxy": {
      "host": "ssh-proxy",
      "port": 22,
      "user": "root",
      "#privateKey": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA2sE3GjSy45QYfh/2qJngHtZcKV0x9xH14TiPUWS/iNWoJBP/\nwJy15YdN2e3fW/e4wtdcwi0K86Ny5MKZDtTvdP2abUVqDnateCcT/TOFC7Jaeg9v\nnRckDQU5yuHUzuWPKkSu/zSWuogwe26f8U3bARfESFiSLZWJfuvlogFgwg5/4BEP\nGQIksN8hKnbEi5DnI5UvYBTYGDd00Dc9prftnnC/JgOjdvNhVjMa7ZOxsrGLnuDs\nIDV/zjQ5QLwBUulVHcTkzUzEXV7wAU8LqXUUz9vJlwquMk5RwIblad7tuxcOg0Iz\nnzQ4leLX2xnLUF6AopgYifrLqPjI+CkcLfQSMQIDAQABAoIBAQCdzvEfWJEMmBOr\nOQfJzWffFyjZNkALSsukNBc/0nxSDEAF9t9zZhnagWdqJa4SPHzvIknqUnAqHumN\nmcys5HPyY9j5py/BS2AM47QJ3xbFv16B24zbOIxrUC/G6m+I6hYDmhTcSmXKHuFK\nyh1cCJxLB4gz4KFjfRL5mtfHrVLN6i3Is3GwwIeuG57YoCK9mDYhaWAaXkBnbzMF\nIAxsc7+8VzyNpaqu43FOijc0BmMtv37H7U+7+v5Xf+vdYlvPAC5GwaE5H0baplaX\nLeR7hfgqvqrYeME/RHV73TmaG1n7C5bcP4WoBV0o1eTwTnu0rzB7I2pwYtc3ukxr\njqPrC87ZAoGBAPt8t7yAw+otZzrhLprOBzTXxNyKilEgWzI3+nQrClhmVGHOOCcj\nHWP1nbZbMN2E60I94wkXLegJJ+op8fa+hIs9921LbIZWxU5ipciRhsN4XoD336rh\nLf2wcg8uy94fOWWeAitaW2Y3owkv7Pp87DjzF+AduCmH0EtvaOAQ42LjAoGBAN6u\nIZdyr1oRQ3q0PXpKyF5efJID48T634c4SCDHCkAb8txj/N3dyDwzHOIFKPL6M1Zj\nZ/8p2aFk/9CoW+XyXKNIjrWqOWQwhpYT/GyS6LLpiEckjAwfB8NKn0Ylpf749YdT\nIreaHQfgPdku3Zu2IwMcahC+lGYOC+6YeD4j7r7bAoGAA6NGNR/Xtad6esuPFQYt\n7IHCgz4tygahyxQsN0n4GFdCmTeWcFp9rlh7M4wWJN4rWQX0JsmDDHw1a5m3uk3/\nNNRso9QXecn/iKa8py4TuPggxdTQE3S2aZkHzVhr8oaZGfMzLNVdxRjA7v0WfHka\nIajCi6diZpdkV/MAnV0hLOkCgYEAniZLwzT3Zt9V7oKuGvmbvrIahNVwYcjPEkkd\nqPHTzN5MqMv2nlhSSrb+b2O8xnx+E3+8L5O4dhC2QqofwntT4b+5YzpHUmnIXDRL\nlYzs6YxEdkp1kHJFYCTSY85/S0vjjT21LXKt5ZcUNfg7+cfsq9v1VHkWCjk1rjnp\nRDDe8fsCgYEAiVo3ERjlGsF5rOCLGC/UyoqRzAWlXUAAfNepOreBvIHksaKjd6n3\n51LpU+Nnyph8DEmWPaINtrh00YluGNxYmlECxe7+L3ASkpAFkoSMk4QzRcYyGX4r\n0Ql34LEcB55rtlnY7QOHDOKUzbH2Y5DcUe0dPhcxmRg4XlXkce+w2P8=\n-----END RSA PRIVATE KEY-----"
    },
    "api": {
      "baseUrl": "http://jsontest-behind-proxy",
      "retryConfig": {
        "maxRetries": 2
      }
    },
    "config": {
      "debug": true,
      "outputBucket": "get",
      "jobs": [
        {
          "endpoint": "/date",
          "dataType": "get",
          "dataField": "."
        }
      ]
    }
  }
}


================================================
File: /tests/phpunit/data/ssh_tunnel_server_error/config.json
================================================
{
  "parameters": {
    "sshProxy": {
      "host": "ssh-proxy",
      "port": 22,
      "user": "root",
      "#privateKey": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA2sE3GjSy45QYfh/2qJngHtZcKV0x9xH14TiPUWS/iNWoJBP/\nwJy15YdN2e3fW/e4wtdcwi0K86Ny5MKZDtTvdP2abUVqDnateCcT/TOFC7Jaeg9v\nnRckDQU5yuHUzuWPKkSu/zSWuogwe26f8U3bARfESFiSLZWJfuvlogFgwg5/4BEP\nGQIksN8hKnbEi5DnI5UvYBTYGDd00Dc9prftnnC/JgOjdvNhVjMa7ZOxsrGLnuDs\nIDV/zjQ5QLwBUulVHcTkzUzEXV7wAU8LqXUUz9vJlwquMk5RwIblad7tuxcOg0Iz\nnzQ4leLX2xnLUF6AopgYifrLqPjI+CkcLfQSMQIDAQABAoIBAQCdzvEfWJEMmBOr\nOQfJzWffFyjZNkALSsukNBc/0nxSDEAF9t9zZhnagWdqJa4SPHzvIknqUnAqHumN\nmcys5HPyY9j5py/BS2AM47QJ3xbFv16B24zbOIxrUC/G6m+I6hYDmhTcSmXKHuFK\nyh1cCJxLB4gz4KFjfRL5mtfHrVLN6i3Is3GwwIeuG57YoCK9mDYhaWAaXkBnbzMF\nIAxsc7+8VzyNpaqu43FOijc0BmMtv37H7U+7+v5Xf+vdYlvPAC5GwaE5H0baplaX\nLeR7hfgqvqrYeME/RHV73TmaG1n7C5bcP4WoBV0o1eTwTnu0rzB7I2pwYtc3ukxr\njqPrC87ZAoGBAPt8t7yAw+otZzrhLprOBzTXxNyKilEgWzI3+nQrClhmVGHOOCcj\nHWP1nbZbMN2E60I94wkXLegJJ+op8fa+hIs9921LbIZWxU5ipciRhsN4XoD336rh\nLf2wcg8uy94fOWWeAitaW2Y3owkv7Pp87DjzF+AduCmH0EtvaOAQ42LjAoGBAN6u\nIZdyr1oRQ3q0PXpKyF5efJID48T634c4SCDHCkAb8txj/N3dyDwzHOIFKPL6M1Zj\nZ/8p2aFk/9CoW+XyXKNIjrWqOWQwhpYT/GyS6LLpiEckjAwfB8NKn0Ylpf749YdT\nIreaHQfgPdku3Zu2IwMcahC+lGYOC+6YeD4j7r7bAoGAA6NGNR/Xtad6esuPFQYt\n7IHCgz4tygahyxQsN0n4GFdCmTeWcFp9rlh7M4wWJN4rWQX0JsmDDHw1a5m3uk3/\nNNRso9QXecn/iKa8py4TuPggxdTQE3S2aZkHzVhr8oaZGfMzLNVdxRjA7v0WfHka\nIajCi6diZpdkV/MAnV0hLOkCgYEAniZLwzT3Zt9V7oKuGvmbvrIahNVwYcjPEkkd\nqPHTzN5MqMv2nlhSSrb+b2O8xnx+E3+8L5O4dhC2QqofwntT4b+5YzpHUmnIXDRL\nlYzs6YxEdkp1kHJFYCTSY85/S0vjjT21LXKt5ZcUNfg7+cfsq9v1VHkWCjk1rjnp\nRDDe8fsCgYEAiVo3ERjlGsF5rOCLGC/UyoqRzAWlXUAAfNepOreBvIHksaKjd6n3\n51LpU+Nnyph8DEmWPaINtrh00YluGNxYmlECxe7+L3ASkpAFkoSMk4QzRcYyGX4r\n0Ql34LEcB55rtlnY7QOHDOKUzbH2Y5DcUe0dPhcxmRg4XlXkce+w2P8=\n-----END RSA PRIVATE KEY-----"
    },
    "api": {
      "baseUrl": "http://jsontest-behind-proxy",
      "retryConfig": {
        "maxRetries": 2
      }
    },
    "config": {
      "debug": true,
      "outputBucket": "get",
      "jobs": [
        {
          "endpoint": "/http-code-503",
          "dataType": "get",
          "dataField": "."
        }
      ]
    }
  }
}


================================================
File: /tests/phpunit/data/defaultOptions/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "http": {
        "defaultOptions": {
          "params": {
            "param": "value"
          }
        }
      }
    },
    "config": {
      "outputBucket": "defaultOptions",
      "debug": 1,
      "jobs": [
        {
          "endpoint": "defaultOptions"
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/requestCacheTTL/config.json
================================================
{
  "parameters": {
    "cache": {
      "ttl": 8
    },
    "api": {
      "baseUrl": "http://jsontest",
      "http": {
        "Accept": "application/json",
        "Content-Type": "application/json;charset=UTF-8"
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "/date",
          "dataType": "get",
          "dataField": "."
        }
      ]
    }
  }
}


================================================
File: /tests/phpunit/data/recursive_same_ph/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://example.com/"
    },
    "config": {
      "jobs": [
        {
          "endpoint": "root",
          "children": [
            {
              "endpoint": "root/{1:id}",
              "placeholders": {
                "1:id": "id"
              },
              "children": [
                {
                  "endpoint": "root/{2:id}/{1:id}",
                  "placeholders": {
                    "2:id": "id",
                    "1:id": "id"
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/iterations/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "test",
            "authentication": {
                "type": "basic"
            }
        },
        "config": {
            "id": "multiCfg",
            "outputBucket": "in.c-main",
            "jobs": [
                {
                    "endpoint": "exports/tickets.json",
                    "dataType": "tickets_export"
                }
            ]
        },
        "iterations": [
            {
                "username": "aaa",
                "password": "apass"
            },
            {
                "username": "bbb",
                "password": "bpass"
            }
        ]
    }
}

================================================
File: /tests/phpunit/data/responseUrlScroll/expected/tables/responseUrl.scroll.manifest
================================================
{"destination":"in.c-responseUrl.scroll","incremental":false}

================================================
File: /tests/phpunit/data/responseUrlScroll/expected/tables/responseUrl.scroll
================================================
"id","status"
"1.0","first"
"1.1","page"
"2.0","next"
"2.1","page"
"3.0","last"
"3.1","page"


================================================
File: /tests/phpunit/data/responseUrlScroll/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "pagination": {
        "method": "response.url",
        "urlKey": "next"
      }
    },
    "config": {
      "outputBucket": "responseUrl",
      "jobs": [
        {
          "endpoint": "scroll"
        }
      ]
    }
  }
}

================================================
File: /tests/phpunit/data/ssh_tunnel_bad_config/config.json
================================================
{
  "parameters": {
    "sshProxy": {
      "host": "ssh-proxy",
      "port": 22,
      "user": "root",
      "#privateKey": "bad_key"
    },
    "api": {
      "baseUrl": "http://jsontest-behind-proxy",
      "retryConfig": {
        "maxRetries": 2
      }
    },
    "config": {
      "debug": true,
      "outputBucket": "get",
      "jobs": [
        {
          "endpoint": "/date",
          "dataType": "get",
          "dataField": "."
        }
      ]
    }
  }
}


================================================
File: /tests/phpunit/Config/ConfigurationTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Config;

use Keboola\GenericExtractor\Configuration\Extractor;
use Keboola\GenericExtractor\Exception\ApplicationException;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\GenericExtractor\Tests\ExtractorTestCase;
use Keboola\Juicer\Config\Config;
use Keboola\Temp\Temp;
use Keboola\CsvTable\Table;
use Psr\Log\NullLogger;
use Symfony\Component\Filesystem\Filesystem;

class ConfigurationTest extends ExtractorTestCase
{
    public function testStoreResults(): void
    {
        $temp = new Temp();
        $resultsPath = $temp->getTmpFolder() . DIRECTORY_SEPARATOR . 'data';
        $this->storeResults($resultsPath, 'full', false);
    }

    public function testIncrementalResults(): void
    {
        $temp = new Temp();
        $resultsPath = $temp->getTmpFolder() . DIRECTORY_SEPARATOR . 'data';
        $this->storeResults($resultsPath, 'incremental', true);
    }

    public function testDefaultBucketResults(): void
    {
        $temp = new Temp();
        $resultsPath = $temp->getTmpFolder() . DIRECTORY_SEPARATOR . 'data';
        $config = '{"parameters":{}}';
        $fs = new Filesystem();
        $fs->dumpFile($resultsPath . DIRECTORY_SEPARATOR . 'config.json', $config);
        $configuration = new Extractor($resultsPath, new NullLogger());

        $files = [
            new Table('first', ['col1', 'col2']),
            new Table('second', ['col11', 'col12']),
        ];

        $files[0]->writeRow(['a', 'b']);
        $files[1]->writeRow(['c', 'd']);
        $files[1]->setPrimaryKey(['col11']);

        $configuration->storeResults($files);

        /** @var \SplFileInfo $file */
        foreach (new \FilesystemIterator(__DIR__ . '/../data/storeResultsDefaultBucket/out/tables/') as $file) {
            self::assertFileEquals($file->getPathname(), $resultsPath . '/out/tables/' . $file->getFilename());
        }

        $this->rmDir($resultsPath);
    }

    protected function storeResults(string $resultsPath, string $name, bool $incremental): void
    {
        $config = '{"parameters":{}}';
        $fs = new Filesystem();
        $fs->dumpFile($resultsPath . DIRECTORY_SEPARATOR . 'config.json', $config);
        $configuration = new Extractor($resultsPath, new NullLogger());

        $files = [
            new Table('first', ['col1', 'col2']),
            new Table('second', ['col11', 'col12']),
        ];

        $files[0]->writeRow(['a', 'b']);
        $files[1]->writeRow(['c', 'd']);

        $configuration->storeResults($files, $name, true, $incremental);

        /** @var \SplFileInfo $file */
        foreach (new \FilesystemIterator(__DIR__ . '/../data/storeResultsTest/out/tables/' . $name) as $file) {
            self::assertFileEquals(
                $file->getPathname(),
                $resultsPath . '/out/tables/' . $name . '/' . $file->getFilename()
            );
        }

        $this->rmDir($resultsPath);
    }

    public function testGetConfigMetadata(): void
    {
        $path = __DIR__ . '/../data/metadataTest';
        $configuration = new Extractor($path, new NullLogger());
        $json = $configuration->getMetadata();

        self::assertEquals(json_decode('{"some":"data","more": {"woah": "such recursive"}}', true), $json);
        $path = __DIR__ . '/../data/noCache';
        $noConfiguration = new Extractor($path, new NullLogger());
        self::assertEquals([], $noConfiguration->getMetadata());
    }

    public function testSaveConfigMetadata(): void
    {
        $temp = new Temp();
        $resultsPath = $temp->getTmpFolder() . DIRECTORY_SEPARATOR . 'data';
        $config = '{"parameters":{}}';
        $fs = new Filesystem();
        $fs->dumpFile($resultsPath . DIRECTORY_SEPARATOR . 'config.json', $config);
        $configuration = new Extractor($resultsPath, new NullLogger());

        $configuration->saveConfigMetadata(
            [
            'some' => 'data',
            'more' => [
                'woah' => 'such recursive',
            ],
            ]
        );

        self::assertFileEquals(__DIR__ . '/../data/metadataTest/out/state.json', $resultsPath . '/out/state.json');

        $this->rmDir($resultsPath);
    }

    public function testGetMultipleConfigs(): void
    {
        $configuration = new Extractor(__DIR__ . '/../data/iterations', new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        $json = json_decode((string) file_get_contents(__DIR__ . '/../data/iterations/config.json'), true);

        foreach ($json['parameters']['iterations'] as $i => $params) {
            self::assertEquals(
                array_replace(
                    [
                        'id' => $json['parameters']['config']['id'],
                        'outputBucket' => $json['parameters']['config']['outputBucket'],
                    ],
                    $params
                ),
                $configs[$i]->getAttributes()
            );
        }
        self::assertEquals($configs[0]->getJobs(), $configs[1]->getJobs());
        self::assertContainsOnlyInstancesOf(Config::class, $configs);
        self::assertCount(count($json['parameters']['iterations']), $configs);
        self::assertEquals($json['parameters']['config']['outputBucket'], $configs[0]->getAttribute('outputBucket'));
    }

    public function testGetMultipleConfigsSingle(): void
    {
        $configuration = new Extractor(__DIR__ . '/../data/simple_basic', new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        self::assertContainsOnlyInstancesOf(Config::class, $configs);
        self::assertCount(1, $configs);
    }

    public function testGetJson(): void
    {
        $configuration = new Extractor(__DIR__ . '/../data/simple_basic', new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        self::assertEquals('multiCfg', $configs[0]->getAttribute('id'));
    }

    public function testGetInvalidConfig(): void
    {
        $temp = new Temp();
        $fs = new Filesystem();
        $fs->dumpFile($temp->getTmpFolder() . '/config.json', 'invalidJSON');
        try {
            new Extractor($temp->getTmpFolder(), new NullLogger());
            self::fail('Invalid JSON must cause exception');
        } catch (ApplicationException $e) {
            self::assertStringContainsString('Configuration file is not a valid JSON: Syntax error', $e->getMessage());
        }
    }

    public function testInvalidValuesInApiNode(): void
    {
        $temp = new Temp();
        $config['parameters'] = [
            'api' => [
                'baseUrl' => 'test',
                'authentication' => [
                    'type' => 'basic',
                ],
                'caCertificate' => false,
            ],
            'config' => ['outputBucket' => 'someBucket', 'jobs' => [['endpoint' => 'GET']]],
        ];
        $fs = new Filesystem();
        $fs->dumpFile($temp->getTmpFolder() . '/config.json', json_encode($config));
        try {
            $extractor = new Extractor($temp->getTmpFolder(), new NullLogger());
            foreach ($extractor->getMultipleConfigs() as $config) {
                $extractor->getApi($config->getAttributes());
            }
            self::fail('Invalid config value must cause exception');
        } catch (UserException $e) {
            self::assertStringContainsString("The 'caCertificate' must be string.", $e->getMessage());
        }
    }

    protected function rmDir(string $dirPath): bool
    {
        $iterator = new \RecursiveIteratorIterator(
            new \RecursiveDirectoryIterator(
                $dirPath,
                \FilesystemIterator::SKIP_DOTS
            ),
            \RecursiveIteratorIterator::CHILD_FIRST
        );

        foreach ($iterator as $path) {
            $path->isDir() && !$path->isLink() ? rmdir($path->getPathname()) : unlink($path->getPathname());
        }
        return rmdir($dirPath);
    }
}


================================================
File: /tests/phpunit/Config/ApiTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Config;

use Generator;
use Keboola\GenericExtractor\Authentication\OAuth20;
use Keboola\GenericExtractor\Authentication\OAuth20Login;
use Keboola\GenericExtractor\Authentication\Query;
use GuzzleHttp\Psr7\Query as Psr7Query;
use Keboola\GenericExtractor\Configuration\Api;
use Keboola\GenericExtractor\Exception\ApplicationException;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\Juicer\Client\RestClient;
use Keboola\Juicer\Tests\HistoryContainer;
use Keboola\Juicer\Tests\RestClientMockBuilder;
use PHPUnit\Framework\TestCase;
use Psr\Log\NullLogger;

class ApiTest extends TestCase
{
    public function testCreateBaseUrlString(): void
    {
        $string = 'https://third.second.com/TEST/Something/';
        $api = new Api(new NullLogger(), ['baseUrl' => $string], [], []);
        self::assertEquals($string, $api->getBaseUrl());
    }

    public function testCreateBaseUrlStringWithUnderscore(): void
    {
        $string = 'https://foo_export.test.example.com';
        $api = new Api(new NullLogger(), ['baseUrl' => $string], [], []);
        self::assertEquals($string, $api->getBaseUrl());
    }

    public function testCreateInvalidUrlString(): void
    {
        try {
            new Api(new NullLogger(), ['baseUrl' => 'htt//this is not valid'], [], []);
            self::fail('Invalid URL must fail');
        } catch (UserException $e) {
            self::assertStringContainsString('is not a valid URL', $e->getMessage());
        }
    }

    public function testCreateBaseUrlFunction(): void
    {
        $fn = [
            'function' => 'concat',
            'args' => [
                'https://',
                (object) ['attr' => 'domain'],
                '.example.com/',
            ],
        ];
        $api = new Api(new NullLogger(), ['baseUrl' => $fn], ['domain' => 'keboola'], []);
        self::assertEquals('https://keboola.example.com/', $api->getBaseUrl());
    }

    public function testCreateBaseUrlFunctionError(): void
    {
        $fn = [
            'function' => 'concat',
            'args' => [
                'https://keboola.com/',
                (object) ['attr' => 'path'],
            ],
        ];
        $this->expectException(UserException::class);
        new Api(new NullLogger(), ['baseUrl' => $fn], [], []);
    }

    public function testCreateAuthQueryDeprecated(): void
    {
        $attributes = ['key' => 'val'];
        // Deprecated way
        $apiConfig = [
            'baseUrl' => 'http://example.com',
            'authentication' => [
                'type' => 'url.query',
            ],
            'query' => [
                'param' => [
                    'attr' => 'key',
                ],
            ],
        ];
        $api = new Api(new NullLogger(), $apiConfig, $attributes, []);
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            ->addResponse200('{"foo": "bar"}')
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $client) use ($api): void {
                $api->getAuth()->attachToClient($client);
            })
            ->getRestClient();

        self::assertEquals(
            (object) ['foo' => 'bar'],
            $restClient->download($restClient->createRequest(['endpoint' => 'http://example.com?foo=bar']))
        );

        $request = $history->shift()->getRequest();
        self::assertInstanceOf(Query::class, $api->getAuth());
        self::assertEquals(['foo' => 'bar', 'param' => 'val'], Psr7Query::parse($request->getUri()->getQuery()));
    }

    public function testCreateAuthQuery(): void
    {
        $apiConfig = [
            'baseUrl' => 'http://example.com',
            'authentication' => [
                'type' => 'query',
                'query' => [
                    'param' => [
                        'attr' => 'key',
                    ],
                ],
            ],
        ];

        $api = new Api(new NullLogger(), $apiConfig, ['key' => 'val'], []);
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            ->addResponse200('{"foo": "bar"}')
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $client) use ($api): void {
                $api->getAuth()->attachToClient($client);
            })
            ->getRestClient();

        self::assertEquals(
            (object) ['foo' => 'bar'],
            $restClient->download($restClient->createRequest(['endpoint' => 'http://example.com?foo=bar']))
        );

        $request = $history->shift()->getRequest();
        self::assertInstanceOf(Query::class, $api->getAuth());
        self::assertEquals(['foo' => 'bar', 'param' => 'val'], Psr7Query::parse($request->getUri()->getQuery()));
    }

    public function testCreateAuthOAuth20Bearer(): void
    {
        $config = json_decode((string) file_get_contents(__DIR__ . '/../data/oauth20bearer/config.json'), true);
        $api = new Api(new NullLogger(), $config['parameters']['api'], [], $config['authorization']);
        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            ->addResponse200('{"foo": "bar"}')
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $client) use ($api): void {
                $api->getAuth()->attachToClient($client);
            })
            ->getRestClient();

        self::assertEquals(
            (object) ['foo' => 'bar'],
            $restClient->download($restClient->createRequest(['endpoint' => 'http://example.com?foo=bar']))
        );

        $request = $history->shift()->getRequest();
        $headers = $request->getHeaders();
        unset($headers['User-Agent']);
        self::assertInstanceOf(OAuth20::class, $api->getAuth());
        self::assertEquals(['foo' => 'bar'], Psr7Query::parse($request->getUri()->getQuery()));
        self::assertEquals(
            ['Host' => ['example.com'], 'Authorization' => ['Bearer testToken']],
            $headers
        );
    }

    public function testCreateOauth2Login(): void
    {
        $config = json_decode((string) file_get_contents(__DIR__ . '/../data/oauth20login/config.json'), true);
        $api = new Api(new NullLogger(), $config['parameters']['api'], [], $config['authorization']);

        $history = new HistoryContainer();
        $restClient = RestClientMockBuilder::create()
            // Login response
            ->addResponse200('{"access_token": "baz"}')
            // Api response
            ->addResponse200('{"foo": "bar"}')
            ->setHistoryContainer($history)
            ->setInitCallback(function (RestClient $client) use ($api): void {
                $api->getAuth()->attachToClient($client);
            })
            ->getRestClient();

        self::assertEquals(
            (object) ['foo' => 'bar'],
            $restClient->download($restClient->createRequest(['endpoint' => 'http://example.com?foo=bar']))
        );

        // Login request
        $loginRequest = $history->shift()->getRequest();
        $headers = $loginRequest->getHeaders();
        unset($headers['User-Agent']);
        self::assertEquals('POST', (string) $loginRequest->getMethod());
        self::assertEquals('/uas/oauth2/accessToken', (string) $loginRequest->getUri()->getPath());

        // Api request
        $apiRequest = $history->shift()->getRequest();
        $headers = $apiRequest->getHeaders();
        unset($headers['User-Agent']);
        self::assertInstanceOf(OAuth20Login::class, $api->getAuth());
        self::assertEquals(
            ['foo' => 'bar', 'oauth2_access_token' => 'baz'],
            Psr7Query::parse($apiRequest->getUri()->getQuery())
        );
        self::assertEquals(['Host' => ['example.com']], $headers);

        // No more history items
        self::assertTrue($history->isEmpty());
    }

    public function testNoCaCertificate(): void
    {
        $apiConfig = [
            'baseUrl' => 'http://example.com',
        ];

        $api = new Api(new NullLogger(), $apiConfig, [], []);
        self::assertFalse($api->hasCaCertificate());

        $this->expectException(ApplicationException::class);
        $this->expectExceptionMessage('Key "api.caCertificate" is not configured.');
        $api->getCaCertificate();
    }


    public function testCustomCaCertificate(): void
    {
        $crtContent = "-----BEGIN CERTIFICATE-----\nMIIFazCCA1OgAwIBAgIUGzl\n....\n-----END CERTIFICATE-----\n";
        $apiConfig = [
            'baseUrl' => 'http://example.com',
            'caCertificate' => $crtContent,
        ];

        $api = new Api(new NullLogger(), $apiConfig, [], []);
        self::assertTrue($api->hasCaCertificate());
        self::assertSame($crtContent, $api->getCaCertificate());
        self::assertSame($crtContent, file_get_contents($api->getCaCertificateFile()));
    }

    public function testCustomClientCertificate(): void
    {
        $crtContent =
            "-----BEGIN CERTIFICATE-----\nMIIFazCCA1OgAwIBAgIUGzl\n...."."\n-----END CERTIFICATE-----\n".
            "-----BEGIN RSA PRIVATE KEY-----\nMIIFazCCA1OgAwIBAgIUGzl\n-----END RSA PRIVATE KEY-----";
        $apiConfig = [
            'baseUrl' => 'http://example.com',
            '#clientCertificate' => $crtContent,
        ];

        $api = new Api(new NullLogger(), $apiConfig, [], []);
        self::assertTrue($api->hasClientCertificate());
        self::assertSame($crtContent, $api->getClientCertificate());
        self::assertSame($crtContent, file_get_contents($api->getClientCertificateFile()));
    }

    public function testTimeouts(): void
    {
        $apiConfig = [
            'baseUrl' => 'http://example.com',
            'http' => [
                'connectTimeout' => 123.45,
                'requestTimeout' => 456.78,
            ],
        ];

        $api = new Api(new NullLogger(), $apiConfig, [], []);
        self::assertEquals(123.45, $api->getConnectTimeout());
        self::assertEquals(456.78, $api->getRequestTimeout());
    }

    public function testTimeoutsDefault(): void
    {
        $apiConfig = [
            'baseUrl' => 'http://example.com',
        ];
        $api = new Api(new NullLogger(), $apiConfig, [], []);
        self::assertEquals(30, $api->getConnectTimeout());
        self::assertEquals(300, $api->getRequestTimeout());
    }

    public function testInvalidFunctionBaseUrlThrowsUserException(): void
    {
        $apiConfig = [
            'baseUrl' => [
                'function' => 'concat',
                'args' => [
                    'http://',
                    '/087-function-baseurl/',
                ],
            ],
        ];
        $this->expectException(UserException::class);
        $this->expectExceptionMessage(
            'The "baseUrl" attribute in API configuration resulted in an invalid URL (http:///087-function-baseurl/)'
        );
        new Api(new NullLogger(), $apiConfig, [], []);
    }

    public function testPaginationPagesValidInt(): void
    {
        $string = 'https://third.second.com/TEST/Something/';
        new Api(new NullLogger(), ['baseUrl' => $string, 'pagination' => ['pages' => 2]], [], []);
        $this->expectNotToPerformAssertions();
    }

    public function testPaginationPagesValidString(): void
    {
        $string = 'https://third.second.com/TEST/Something/';
        new Api(new NullLogger(), ['baseUrl' => $string, 'pagination' => ['pages' => '2']], [], []);
        $this->expectNotToPerformAssertions();
    }

    /**
     * @dataProvider invalidPagesValues
     * @param int|double|array|string $pagesValue
     */
    public function testPaginationPagesInvalidValues($pagesValue): void
    {
        $this->expectException(UserException::class);
        $this->expectExceptionMessage(sprintf(
            'Value "pages" in "api.pagination" has to be int, %s given.',
            getType($pagesValue)
        ));

        $string = 'https://third.second.com/TEST/Something/';
        new Api(new NullLogger(), ['baseUrl' => $string, 'pagination' => ['pages' => $pagesValue]], [], []);
    }

    public function invalidPagesValues(): Generator
    {
        yield 'string' => ['two'];

        yield 'double' => [2.2];

        yield 'bool' => [true];

        yield 'array' => [[]];
    }
}


================================================
File: /tests/phpunit/Config/UserFunctionTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Config;

use Keboola\GenericExtractor\Configuration\UserFunction;
use Keboola\GenericExtractor\Exception\UserException;
use PHPUnit\Framework\TestCase;

class UserFunctionTest extends TestCase
{
    public function testBuild(): void
    {
        $functions = [
            'str' => 'aaa',
            'attribute' => ['attr' => 'attrName'],
            'fn' => [
                'function' => 'md5',
                'args' => [
                    'hashMe',
                ],
            ],
        ];

        $data = ['attr' => ['attrName' => 'attrValue']];

        self::assertEquals(
            [
                'str' => 'aaa',
                'attribute' => $data['attr']['attrName'],
                'fn' => md5($functions['fn']['args'][0]),
            ],
            UserFunction::build($functions, $data)
        );
    }

    public function testInvalidType(): void
    {
        /** @var array $functions */
        $functions = 'not array';

        $this->expectException(UserException::class);
        $this->expectExceptionMessage("Expected 'object' type, given 'string' type, value '\"not array\"'.");
        UserFunction::build($functions, []);
    }
}


================================================
File: /tests/phpunit/Config/JuicerRestTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests\Config;

use Keboola\GenericExtractor\Configuration\JuicerRest;
use PHPUnit\Framework\TestCase;

class JuicerRestTest extends TestCase
{
    public function testConvert(): void
    {
        $oldConfig = [
            'maxRetries' => 6,
            'curlCodes' => [6],
            'httpCodes' => [503],
            'headerName' => 'Retry-After',
            'custom' => 'value',
        ];

        $newConfig = JuicerRest::convertRetry($oldConfig);

        // items
        self::assertArrayHasKey('maxRetries', $newConfig);
        self::assertArrayHasKey('custom', $newConfig);
        self::assertArrayHasKey('curl', $newConfig);
        self::assertArrayHasKey('codes', $newConfig['curl']);
        self::assertArrayHasKey('http', $newConfig);
        self::assertArrayHasKey('codes', $newConfig['http']);
        self::assertArrayHasKey('retryHeader', $newConfig['http']);

        // item values
        self::assertSame($oldConfig['custom'], $newConfig['custom']);
        self::assertSame($oldConfig['maxRetries'], $newConfig['maxRetries']);
        self::assertSame($oldConfig['curlCodes'], $newConfig['curl']['codes']);
        self::assertSame($oldConfig['httpCodes'], $newConfig['http']['codes']);
        self::assertSame($oldConfig['headerName'], $newConfig['http']['retryHeader']);

        // removed items
        self::assertArrayNotHasKey('curlCodes', $newConfig);
        self::assertArrayNotHasKey('httpCodes', $newConfig);
        self::assertArrayNotHasKey('headerName', $newConfig);
    }
}


================================================
File: /tests/phpunit/MockExecutionTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests;

use Keboola\GenericExtractor\Tests\Traits\RmDirTrait;
use PHPUnit\Framework\TestCase;

class MockExecutionTest extends TestCase
{
    use RmDirTrait;

    /**
     * @dataProvider configProvider
     */
    public function testRun(string $configDir): void
    {
        $dataDir = __DIR__ . "/data/{$configDir}";
        $runPhp = __DIR__ . '/../../src/run.php';
        $this->rmDir(__DIR__ . "{$dataDir}/out");
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);

        self::assertStringContainsString('Extractor finished successfully.', implode("\n", $output));
        self::assertDirectoryEquals(
            __DIR__ . "/data/{$configDir}/expected/tables",
            __DIR__ . "/data/{$configDir}/out/tables"
        );

        self::assertEquals(0, $retval);
        $this->rmDir(__DIR__ . "/data/{$configDir}/out");
    }

    public function configProvider(): array
    {
        return [
            ['responseUrlScroll'],
            ['jobUserData'],
            ['getPost'],
            ['basicAuth'],
            ['multipleOutputs'],
            ['multipleOutputsUserData'],
            ['defaultBucket'],
            ['jsonMap'],
        ];
    }

    public function testDefaultRequestOptions(): void
    {
        $dataDir = __DIR__ . '/data/defaultOptions';
        $runPhp = __DIR__ . '/../../src/run.php';
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);
        self::assertMatchesRegularExpression('/GET \/defaultOptions\?param=value/', implode("\n", $output));
        $this->rmDir(__DIR__ . '/data/defaultOptions/out');
    }

    public function testEmptyCfg(): void
    {
        $dataDir = __DIR__ . '/data/emptyCfg';
        $runPhp = __DIR__ . '/../../src/run.php';
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);
        self::assertStringContainsString('is not a valid JSON: Syntax error', implode("\n", $output));
        self::assertEquals(2, $retval);
    }

    public function testSyncAction(): void
    {
        $dataDir = __DIR__ . '/data/syncAction';
        $runPhp = __DIR__ . '/../../src/run.php';
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);
        self::assertEquals(0, $retval, implode("\n", $output));
    }

    public function testDynamicUserData(): void
    {
        $dataDir = __DIR__ . '/data/dynamicUserData';
        $runPhp = __DIR__ . '/../../src/run.php';
        exec("KBC_DATADIR=$dataDir php $runPhp  2>&1", $output, $retval);
        /** @var array $expectedFile */
        $expectedFile = file(__DIR__ . '/data/dynamicUserData/expected/tables/get');
        foreach ($expectedFile as &$row) {
            $row = str_replace('{{date}}', date('Y-m-d'), $row);
        }

        self::assertEquals($expectedFile, file(__DIR__ . '/data/dynamicUserData/out/tables/get'));
        // 2nd row; 3rd column should contain the date
        /** @var array $file */
        $file = file(__DIR__ . '/data/dynamicUserData/out/tables/get');
        self::assertEquals(date('Y-m-d'), str_getcsv($file[1])[2]);

        $this->rmDir(__DIR__ . '/data/dynamicUserData/out');
    }

    protected function assertDirectoryEquals(string $pathToExpected, string $pathToActual): void
    {
        foreach (new \RecursiveIteratorIterator(
            new \RecursiveDirectoryIterator(
                $pathToExpected,
                \FilesystemIterator::SKIP_DOTS
            ),
            \RecursiveIteratorIterator::SELF_FIRST
        ) as $file) {
            $relPath = str_replace($pathToExpected, '', $file->getPathname());
            self::assertFileEquals($file->getPathname(), $pathToActual . $relPath);
        }
    }
}


================================================
File: /tests/phpunit/MissingTableHelperTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests;

use Keboola\GenericExtractor\Configuration\Extractor;
use Keboola\GenericExtractor\Exception\UserException;
use Keboola\GenericExtractor\MissingTableHelper;
use Keboola\Temp\Temp;
use PHPUnit\Framework\TestCase;
use Psr\Log\NullLogger;

class MissingTableHelperTest extends TestCase
{
    private Temp $temp;

    protected function setUp(): void
    {
        parent::setUp();
        $this->temp = new Temp();
    }

    protected function tearDown(): void
    {
        parent::tearDown();
        $this->temp->remove();
    }

    public function testMissingTables(): void
    {
        $config = [
            'parameters' => [
                'api' => ['baseUrl' => 'https://dummy'],
                'config' => [
                    'jobs' => [
                        [
                            'endpoint' => 'users',
                            'dataType' => 'users',
                        ],
                    ],
                    'outputBucket' => 'mock-server',
                    'incrementalOutput' => true,
                    'mappings' => [
                        'users' => [
                            'id' => [
                                'type' => 'column',
                                'mapping' => [
                                    'destination' => 'id',
                                    'primaryKey' => true,
                                ],
                            ],
                            'name' => [
                                'mapping' => [
                                    'destination' => 'name',
                                ],
                            ],
                            'contacts' => [
                                'type' => 'table',
                                'destination' => 'user-contact',
                                'parentKey' => [
                                    'primaryKey' => true,
                                    'destination' => 'userId',
                                ],
                                'tableMapping' => [
                                    'email' => [
                                        'type' => 'column',
                                        'mapping' => [
                                            'destination' => 'email',
                                        ],
                                    ],
                                    'phone' => [
                                        'type' => 'column',
                                        'mapping' => [
                                            'destination' => 'phone',
                                        ],
                                    ],
                                ],
                            ],
                            'contacts.addresses.0' => [
                                'type' => 'table',
                                'destination' => 'primary-address',
                                'tableMapping' => [
                                    'street' => [
                                        'type' => 'column',
                                        'mapping' => [
                                            'destination' => 'street',
                                        ],
                                    ],
                                    'country' => [
                                        'type' => 'column',
                                        'mapping' => [
                                            'destination' => 'country',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];

        mkdir($this->temp->getTmpFolder() . '/out/');
        $baseDir = $this->temp->getTmpFolder() . '/out/tables/';
        mkdir($baseDir);
        file_put_contents($this->temp->getTmpFolder() . '/config.json', json_encode($config));
        $configuration = new Extractor($this->temp->getTmpFolder(), new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        MissingTableHelper::checkConfigs($configs, $this->temp->getTmpFolder(), $configuration);
        self::assertFileExists($baseDir . 'mock-server.primary-address');
        self::assertFileExists($baseDir . 'mock-server.primary-address.manifest');
        self::assertFileExists($baseDir . 'mock-server.user-contact');
        self::assertFileExists($baseDir . 'mock-server.user-contact.manifest');
        self::assertFileExists($baseDir . 'mock-server.users');
        self::assertFileExists($baseDir . 'mock-server.users.manifest');

        self::assertEquals(
            '"street","country","users_pk"',
            trim((string) file_get_contents($baseDir . 'mock-server.primary-address'))
        );
        self::assertEquals(
            ['destination' => 'in.c-mock-server.primary-address', 'incremental' => true],
            json_decode((string) file_get_contents($baseDir . 'mock-server.primary-address.manifest'), true)
        );
        self::assertEquals(
            '"email","phone","userId"',
            trim((string) file_get_contents($baseDir . 'mock-server.user-contact'))
        );
        self::assertEquals(
            [
                'destination' => 'in.c-mock-server.user-contact',
                'incremental' => true,
                'primary_key' => ['userId'],
            ],
            json_decode((string) file_get_contents($baseDir . 'mock-server.user-contact.manifest'), true)
        );
        self::assertEquals(
            '"id","name"',
            trim((string) file_get_contents($baseDir . 'mock-server.users'))
        );
        self::assertEquals(
            ['destination' => 'in.c-mock-server.users', 'incremental' => true, 'primary_key' => ['id']],
            json_decode((string) file_get_contents($baseDir . 'mock-server.users.manifest'), true)
        );
    }

    public function testMissingTablesNoOverwrite(): void
    {
        $config = [
            'parameters' => [
                'api' => ['baseUrl' => 'https://dummy'],
                'config' => [
                    'jobs' => [
                        [
                            'endpoint' => 'users',
                            'dataType' => 'users',
                        ],
                    ],
                    'outputBucket' => 'mock-server',
                    'incrementalOutput' => true,
                    'mappings' => [
                        'users' => [
                            'id' => [
                                'type' => 'column',
                                'mapping' => [
                                    'destination' => 'id',
                                    'primaryKey' => true,
                                ],
                            ],
                            'name' => [
                                'mapping' => [
                                    'destination' => 'name',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];

        mkdir($this->temp->getTmpFolder() . '/out/');
        $baseDir = $this->temp->getTmpFolder() . '/out/tables/';
        mkdir($baseDir);
        file_put_contents($this->temp->getTmpFolder() . '/config.json', json_encode($config));
        $configuration = new Extractor($this->temp->getTmpFolder(), new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        file_put_contents($baseDir . 'mock-server.users', 'foo');
        file_put_contents($baseDir . 'mock-server.users.manifest', 'bar');
        MissingTableHelper::checkConfigs($configs, $this->temp->getTmpFolder(), $configuration);
        self::assertFileExists($baseDir . 'mock-server.users');
        self::assertFileExists($baseDir . 'mock-server.users.manifest');
        self::assertEquals('foo', file_get_contents($baseDir . 'mock-server.users'));
        self::assertEquals('bar', file_get_contents($baseDir . 'mock-server.users.manifest'));
    }

    public function testMissingMappings(): void
    {
        $config = [
            'parameters' => [
                'api' => ['baseUrl' => 'https://dummy'],
                'config' => [
                    'jobs' => [
                        [
                            'endpoint' => 'users',
                            'dataType' => 'users',
                        ],
                    ],
                    'outputBucket' => 'mock-server',
                    'incrementalOutput' => true,
                    'mappings' => null,
                ],
            ],
        ];

        mkdir($this->temp->getTmpFolder() . '/out/');
        $baseDir = $this->temp->getTmpFolder() . '/out/tables/';
        mkdir($baseDir);
        file_put_contents($this->temp->getTmpFolder() . '/config.json', json_encode($config));
        $configuration = new Extractor($this->temp->getTmpFolder(), new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        MissingTableHelper::checkConfigs($configs, $this->temp->getTmpFolder(), $configuration);
        self::assertFileDoesNotExist($baseDir . 'mock-server.users');
        self::assertFileDoesNotExist($baseDir . 'mock-server.users.manifest');
    }

    public function testMissingTablesSimplifiedMapping(): void
    {
        $config = [
            'parameters' => [
                'api' => ['baseUrl' => 'https://dummy'],
                'config' => [
                    'jobs' => [
                        [
                            'endpoint' => 'users',
                            'dataType' => 'users',
                        ],
                    ],
                    'outputBucket' => 'mock-server',
                    'mappings' => [
                        'users' => [
                            'id' => 'id',
                            'name' => 'name',
                            'contacts' => [
                                'type' => 'table',
                                'destination' => 'user-contact',
                                'tableMapping' => [
                                    'email' => 'email',
                                    'phone' => 'phone',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];

        mkdir($this->temp->getTmpFolder() . '/out/');
        $baseDir = $this->temp->getTmpFolder() . '/out/tables/';
        mkdir($baseDir);
        file_put_contents($this->temp->getTmpFolder() . '/config.json', json_encode($config));
        $configuration = new Extractor($this->temp->getTmpFolder(), new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        MissingTableHelper::checkConfigs($configs, $this->temp->getTmpFolder(), $configuration);

        self::assertFileExists($baseDir . 'mock-server.user-contact');
        self::assertFileExists($baseDir . 'mock-server.user-contact.manifest');
        self::assertFileExists($baseDir . 'mock-server.users');
        self::assertFileExists($baseDir . 'mock-server.users.manifest');

        self::assertEquals(
            '"email","phone","users_pk"',
            trim((string) file_get_contents($baseDir . 'mock-server.user-contact'))
        );
        self::assertEquals(
            [
                'destination' => 'in.c-mock-server.user-contact',
                'incremental' => false,
            ],
            json_decode((string) file_get_contents($baseDir . 'mock-server.user-contact.manifest'), true)
        );
        self::assertEquals(
            '"id","name"',
            trim((string) file_get_contents($baseDir . 'mock-server.users'))
        );
        self::assertEquals(
            ['destination' => 'in.c-mock-server.users', 'incremental' => false],
            json_decode((string) file_get_contents($baseDir . 'mock-server.users.manifest'), true)
        );
    }

    public function testMissingTablesNoOutputBucket(): void
    {
        $config = [
            'parameters' => [
                'api' => ['baseUrl' => 'https://dummy'],
                'config' => [
                    'jobs' => [
                        [
                            'endpoint' => 'users',
                            'dataType' => 'users',
                        ],
                    ],
                    'mappings' => [
                        'users' => [
                            'id' => 'id',
                            'name' => 'name',
                            'contacts' => [
                                'type' => 'table',
                                'destination' => 'user-contact',
                                'tableMapping' => [
                                    'email' => 'email',
                                    'phone' => 'phone',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];

        mkdir($this->temp->getTmpFolder() . '/out/');
        $baseDir = $this->temp->getTmpFolder() . '/out/tables/';
        mkdir($baseDir);
        file_put_contents($this->temp->getTmpFolder() . '/config.json', json_encode($config));
        $configuration = new Extractor($this->temp->getTmpFolder(), new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        MissingTableHelper::checkConfigs($configs, $this->temp->getTmpFolder(), $configuration);

        self::assertFileExists($baseDir . 'user-contact');
        self::assertFileExists($baseDir . 'user-contact.manifest');
        self::assertFileExists($baseDir . 'users');
        self::assertFileExists($baseDir . 'users.manifest');

        self::assertEquals(
            '"email","phone","users_pk"',
            trim((string) file_get_contents($baseDir . 'user-contact'))
        );
        self::assertEquals(
            [
                'incremental' => false,
            ],
            json_decode((string) file_get_contents($baseDir . 'user-contact.manifest'), true)
        );
        self::assertEquals(
            '"id","name"',
            trim((string) file_get_contents($baseDir . 'users'))
        );
        self::assertEquals(
            ['incremental' => false],
            json_decode((string) file_get_contents($baseDir . 'users.manifest'), true)
        );
    }

    public function testMissingBucketPresentIdPresentName(): void
    {
        $config = [
            'parameters' => [
                'api' => ['baseUrl' => 'https://dummy', 'name' => 'testName'],
                'config' => [
                    'id' => 'config-id',
                    'jobs' => [
                        [
                            'endpoint' => 'users',
                            'dataType' => 'users',
                        ],
                    ],
                    'mappings' => [
                        'users' => [
                            'id' => 'id',
                            'name' => 'name',
                            'contacts' => [
                                'type' => 'table',
                                'destination' => 'user-contact',
                                'tableMapping' => [
                                    'email' => 'email',
                                    'phone' => 'phone',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];

        mkdir($this->temp->getTmpFolder() . '/out/');
        $baseDir = $this->temp->getTmpFolder() . '/out/tables/';
        mkdir($baseDir);
        file_put_contents($this->temp->getTmpFolder() . '/config.json', json_encode($config));
        $configuration = new Extractor($this->temp->getTmpFolder(), new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        MissingTableHelper::checkConfigs($configs, $this->temp->getTmpFolder(), $configuration);

        self::assertFileExists($baseDir . 'ex-api-testName-config-id.user-contact');
        self::assertFileExists($baseDir . 'ex-api-testName-config-id.user-contact.manifest');
        self::assertFileExists($baseDir . 'ex-api-testName-config-id.users');
        self::assertFileExists($baseDir . 'ex-api-testName-config-id.users.manifest');

        self::assertEquals(
            '"email","phone","users_pk"',
            trim((string) file_get_contents($baseDir . 'ex-api-testName-config-id.user-contact'))
        );
        self::assertEquals(
            [
                'incremental' => false,
                'destination' => 'in.c-ex-api-testName-config-id.user-contact',
            ],
            json_decode((string) file_get_contents($baseDir . 'ex-api-testName-config-id.user-contact.manifest'), true)
        );
        self::assertEquals(
            '"id","name"',
            trim((string) file_get_contents($baseDir . 'ex-api-testName-config-id.users'))
        );
        self::assertEquals(
            [
                'incremental' => false,
                'destination' => 'in.c-ex-api-testName-config-id.users',
            ],
            json_decode((string) file_get_contents($baseDir . 'ex-api-testName-config-id.users.manifest'), true)
        );
    }

    public function testMissingBucketPresentIdMissingName(): void
    {
        $config = [
            'parameters' => [
                'api' => ['baseUrl' => 'https://dummy'],
                'config' => [
                    'id' => 'config-id',
                    'jobs' => [
                        [
                            'endpoint' => 'users',
                            'dataType' => 'users',
                        ],
                    ],
                    'mappings' => [
                        'users' => [
                            'id' => 'id',
                            'name' => 'name',
                            'contacts' => [
                                'type' => 'table',
                                'destination' => 'user-contact',
                                'tableMapping' => [
                                    'email' => 'email',
                                    'phone' => 'phone',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];

        mkdir($this->temp->getTmpFolder() . '/out/');
        $baseDir = $this->temp->getTmpFolder() . '/out/tables/';
        mkdir($baseDir);
        file_put_contents($this->temp->getTmpFolder() . '/config.json', json_encode($config));
        $configuration = new Extractor($this->temp->getTmpFolder(), new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        MissingTableHelper::checkConfigs($configs, $this->temp->getTmpFolder(), $configuration);

        self::assertFileExists($baseDir . 'ex-api-generic-config-id.user-contact');
        self::assertFileExists($baseDir . 'ex-api-generic-config-id.user-contact.manifest');
        self::assertFileExists($baseDir . 'ex-api-generic-config-id.users');
        self::assertFileExists($baseDir . 'ex-api-generic-config-id.users.manifest');

        self::assertEquals(
            '"email","phone","users_pk"',
            trim((string) file_get_contents($baseDir . 'ex-api-generic-config-id.user-contact'))
        );
        self::assertEquals(
            [
                'incremental' => false,
                'destination' => 'in.c-ex-api-generic-config-id.user-contact',
            ],
            json_decode((string) file_get_contents($baseDir . 'ex-api-generic-config-id.user-contact.manifest'), true)
        );
        self::assertEquals(
            '"id","name"',
            trim((string) file_get_contents($baseDir . 'ex-api-generic-config-id.users'))
        );
        self::assertEquals(
            [
                'incremental' => false,
                'destination' => 'in.c-ex-api-generic-config-id.users',
            ],
            json_decode((string) file_get_contents($baseDir . 'ex-api-generic-config-id.users.manifest'), true)
        );
    }

    public function testMissingParentKeyDestination(): void
    {
        $config = [
            'parameters' => [
                'api' => ['baseUrl' => 'https://dummy'],
                'config' => [
                    'jobs' => [
                        [
                            'endpoint' => 'users',
                            'dataType' => 'users',
                        ],
                    ],
                    'outputBucket' => 'mock-server',
                    'mappings' => [
                        'users' => [
                            'name' => [
                                'mapping' => [
                                    'destination' => 'name',
                                ],
                            ],
                            'contacts' => [
                                'type' => 'table',
                                'destination' => 'user-contact',
                                'parentKey' => [
                                    'primaryKey' => true,
                                ],
                                'tableMapping' => [
                                    'email' => [
                                        'type' => 'column',
                                        'mapping' => [
                                            'destination' => 'email',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];

        mkdir($this->temp->getTmpFolder() . '/out/');
        $baseDir = $this->temp->getTmpFolder() . '/out/tables/';
        mkdir($baseDir);
        file_put_contents($this->temp->getTmpFolder() . '/config.json', json_encode($config));
        $configuration = new Extractor($this->temp->getTmpFolder(), new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        MissingTableHelper::checkConfigs($configs, $this->temp->getTmpFolder(), $configuration);
        self::assertFileExists($baseDir . 'mock-server.user-contact');
        self::assertFileExists($baseDir . 'mock-server.user-contact.manifest');
        self::assertFileExists($baseDir . 'mock-server.users');
        self::assertFileExists($baseDir . 'mock-server.users.manifest');

        self::assertEquals(
            '"email","users_pk"',
            trim((string) file_get_contents($baseDir . 'mock-server.user-contact'))
        );
        self::assertEquals(
            [
                'destination' => 'in.c-mock-server.user-contact',
                'incremental' => false,
                'primary_key' => ['users_pk'],
            ],
            json_decode((string) file_get_contents($baseDir . 'mock-server.user-contact.manifest'), true)
        );
        self::assertEquals(
            '"name"',
            trim((string) file_get_contents($baseDir . 'mock-server.users'))
        );
        self::assertEquals(
            ['destination' => 'in.c-mock-server.users', 'incremental' => false],
            json_decode((string) file_get_contents($baseDir . 'mock-server.users.manifest'), true)
        );
    }

    public function testParentKeyDisableTableMapping(): void
    {
        $config = [
            'parameters' => [
                'api' => ['baseUrl' => 'https://dummy'],
                'config' => [
                    'jobs' => [
                        [
                            'endpoint' => 'users',
                            'dataType' => 'users',
                        ],
                    ],
                    'outputBucket' => 'mock-server',
                    'incrementalOutput' => true,
                    'mappings' => [
                        'users' => [
                            'id' => [
                                'type' => 'column',
                                'mapping' => [
                                    'destination' => 'id',
                                    'primaryKey' => true,
                                ],
                            ],
                            'name' => [
                                'mapping' => [
                                    'destination' => 'name',
                                ],
                            ],
                            'contacts' => [
                                'type' => 'table',
                                'destination' => 'user-contact',
                                'parentKey' => [
                                    'disable' => true,
                                ],
                                'tableMapping' => [
                                    'email' => [
                                        'type' => 'column',
                                        'mapping' => [
                                            'destination' => 'email',
                                        ],
                                    ],
                                    'phone' => [
                                        'type' => 'column',
                                        'mapping' => [
                                            'destination' => 'phone',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];

        mkdir($this->temp->getTmpFolder() . '/out/');
        $baseDir = $this->temp->getTmpFolder() . '/out/tables/';
        mkdir($baseDir);
        file_put_contents($this->temp->getTmpFolder() . '/config.json', json_encode($config));
        $configuration = new Extractor($this->temp->getTmpFolder(), new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        MissingTableHelper::checkConfigs($configs, $this->temp->getTmpFolder(), $configuration);
        self::assertFileExists($baseDir . 'mock-server.user-contact');
        self::assertFileExists($baseDir . 'mock-server.user-contact.manifest');
        self::assertFileExists($baseDir . 'mock-server.users');
        self::assertFileExists($baseDir . 'mock-server.users.manifest');

        // no userId - parentKey is disabled
        self::assertEquals(
            '"email","phone"',
            trim((string) file_get_contents($baseDir . 'mock-server.user-contact'))
        );
        self::assertEquals(
            [
                'destination' => 'in.c-mock-server.user-contact',
                'incremental' => true,
            ],
            json_decode((string) file_get_contents($baseDir . 'mock-server.user-contact.manifest'), true)
        );
        self::assertEquals(
            '"id","name"',
            trim((string) file_get_contents($baseDir . 'mock-server.users'))
        );
        self::assertEquals(
            ['destination' => 'in.c-mock-server.users', 'incremental' => true, 'primary_key' => ['id']],
            json_decode((string) file_get_contents($baseDir . 'mock-server.users.manifest'), true)
        );
    }

    public function testTableMapping(): void
    {
        $config = [
            'parameters' => [
                'api' => ['baseUrl' => 'https://dummy'],
                'config' => [
                    'jobs' => [
                        [
                            'endpoint' => 'users',
                            'dataType' => 'users',
                        ],
                    ],
                    'outputBucket' => 'mock-server',
                    'incrementalOutput' => true,
                    'mappings' => [
                        'contacts' => [
                            'type' => 'table',
                            'destination' => 'user-contact',
                            'tableMapping' => [
                                'email' => [
                                    'type' => 'column',
                                    'mapping' => [
                                        'destination' => 'email',
                                    ],
                                ],
                                'phone' => [
                                    'type' => 'column',
                                    'mapping' => [
                                        'destination' => 'phone',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];

        mkdir($this->temp->getTmpFolder() . '/out/');
        $baseDir = $this->temp->getTmpFolder() . '/out/tables/';
        mkdir($baseDir);
        file_put_contents($this->temp->getTmpFolder() . '/config.json', json_encode($config));
        $configuration = new Extractor($this->temp->getTmpFolder(), new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        MissingTableHelper::checkConfigs($configs, $this->temp->getTmpFolder(), $configuration);
        self::assertFileExists($baseDir . 'mock-server.user-contact');
        self::assertFileExists($baseDir . 'mock-server.user-contact.manifest');

        self::assertEquals(
            '"email","phone","contacts_pk"',
            trim((string) file_get_contents($baseDir . 'mock-server.user-contact'))
        );
        self::assertEquals(
            [
                'destination' => 'in.c-mock-server.user-contact',
                'incremental' => true,
            ],
            json_decode((string) file_get_contents($baseDir . 'mock-server.user-contact.manifest'), true)
        );
    }

    public function testMissingMappingKeyInTypeColumn(): void
    {
        $config = [
            'parameters' => [
                'api' => ['baseUrl' => 'https://dummy'],
                'config' => [
                    'jobs' => [
                        [
                            'endpoint' => 'users',
                            'dataType' => 'users',
                        ],
                    ],
                    'outputBucket' => 'mock-server',
                    'incrementalOutput' => true,
                    'mappings' => [
                        'users' => [
                            'id' => [
                                'type' => 'column',
                            ],
                            'name' => [
                                'mapping' => [
                                    'destination' => 'name',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ];

        $this->expectException(UserException::class);
        $this->expectExceptionMessage('Missing mapping key at item with type "column"');

        mkdir($this->temp->getTmpFolder() . '/out/');
        $baseDir = $this->temp->getTmpFolder() . '/out/tables/';
        mkdir($baseDir);
        file_put_contents($this->temp->getTmpFolder() . '/config.json', json_encode($config));
        $configuration = new Extractor($this->temp->getTmpFolder(), new NullLogger());
        $configs = $configuration->getMultipleConfigs();
        MissingTableHelper::checkConfigs($configs, $this->temp->getTmpFolder(), $configuration);
    }
}


================================================
File: /tests/phpunit/PlaceholdersUtilsTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests;

use Keboola\GenericExtractor\Exception\UserException;
use Keboola\GenericExtractor\PlaceholdersUtils;

class PlaceholdersUtilsTest extends ExtractorTestCase
{
    /**
     * @dataProvider placeholderProvider
     * @param mixed $field
     * @param mixed $expectedValue
     */
    public function testGetPlaceholder($field, $expectedValue): void
    {
        $value = PlaceholdersUtils::getPlaceholder(
            '1:id',
            $field,
            [
                (object) [
                    'field' => 'data',
                    'id' => '1:1',
                ],
            ]
        );

        self::assertEquals(
            [
                'placeholder' => '1:id',
                'field' => 'id',
                'value' => $expectedValue,
            ],
            $value
        );
    }

    public function placeholderProvider(): array
    {
        return [
            'function' => [
                [
                    'path' => 'id',
                    'function' => 'urlencode',
                    'args' => [
                        ['placeholder' => 'value'],
                    ],
                ],
                '1%3A1',
            ],
            'scalar' => [
                'id',
                '1:1',
            ],
        ];
    }

    /**
     * @dataProvider placeholderProviderIntPath
     * @param mixed $field
     * @param mixed $expectedValue
     */
    public function testGetPlaceholderIntPath($field, $expectedValue): void
    {
        $value = PlaceholdersUtils::getPlaceholder(
            '1:123',
            $field,
            [
                (object) [
                    'field' => 'data',
                    '123' => '1:1',
                ],
            ]
        );

        self::assertEquals(
            [
                'placeholder' => '1:123',
                'field' => '123',
                'value' => $expectedValue,
            ],
            $value
        );
    }

    public function placeholderProviderIntPath(): array
    {
        return [
            'function' => [
                [
                    'path' => 123,
                    'function' => 'urlencode',
                    'args' => [
                        ['placeholder' => 'value'],
                    ],
                ],
                '1%3A1',
            ],
            'scalar' => [
                '123',
                '1:1',
            ],
        ];
    }

    /**
     * @dataProvider placeholderValueProvider
     * @param mixed $level
     * @param mixed $expected
     */
    public function testGetPlaceholderValue($level, $expected): void
    {
        $value = PlaceholdersUtils::getPlaceholderValue(
            'id',
            [
                0 => ['id' => 123],
                1 => ['id' => 456],
            ],
            $level,
            '1:id',
        );

        self::assertEquals($expected, $value);
    }

    /**
     * @dataProvider placeholderErrorValueProvider
     * @param mixed $data
     * @param mixed $message
     */
    public function testGetPlaceholderValueError($data, $message): void
    {
        try {
            PlaceholdersUtils::getPlaceholderValue(
                'id',
                $data,
                0,
                '1:id',
            );
            self::fail('UserException was not thrown');
        } catch (UserException $e) {
            self::assertEquals($message, $e->getMessage());
        }
    }

    public function placeholderErrorValueProvider(): array
    {
        return [
            [[], 'Level 1 not found in parent results! Maximum level: 0'],
            [[0 => ['noId' => 'noVal']], 'No value found for 1:id in parent result. (level: 1)'],
        ];
    }

    public function placeholderValueProvider(): array
    {
        return [
            [
                0,
                123,
            ],
            [
                1,
                456,
            ],
        ];
    }

    /**
     * @dataProvider paramsProvider
     */
    public function testConvertParamsPerChildJob(array $input, array $expected): void
    {
        self::assertEquals(PlaceholdersUtils::getParamsPerChildJob($input), $expected);
    }

    public function paramsProvider(): iterable
    {
        yield 'one-scalar' => [
            [
                [
                    'placeholder' => '1:id',
                    'field' => 'id',
                    'value' => 123,
                ],
            ],
            [
                // 1 child job with 1 parameter
                [
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 123,
                    ],
                ],
            ],
        ];

        yield 'one-array' => [
            [
                [
                    'placeholder' => '1:id',
                    'field' => 'id',
                    'value' => [123, 456, 789],
                ],
            ],
            [
                // 3 child job with 1 parameter
                [
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 123,
                    ],
                ],
                [
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 456,
                    ],
                ],
                [
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 789,
                    ],
                ],
            ],
        ];

        yield 'scalar+array' => [
            [
                [
                    'placeholder' => '1:category',
                    'field' => 'category',
                    'value' => 'other',
                ],
                [
                    'placeholder' => '1:id',
                    'field' => 'id',
                    'value' => [123, 456, 789],
                ],
            ],
            [
                // 3 child job with 2 parameters
                [
                    [
                        'placeholder' => '1:category',
                        'field' => 'category',
                        'value' => 'other',
                    ],
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 123,
                    ],
                ],
                [
                    [
                        'placeholder' => '1:category',
                        'field' => 'category',
                        'value' => 'other',
                    ],
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 456,
                    ],
                ],
                [
                    [
                        'placeholder' => '1:category',
                        'field' => 'category',
                        'value' => 'other',
                    ],
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 789,
                    ],
                ],
            ],
        ];

        yield 'multiple' => [
            [
                [
                    'placeholder' => '1:category',
                    'field' => 'category',
                    'value' => 'other',
                ],
                [
                    'placeholder' => '2:region',
                    'field' => 'region',
                    'value' => ['sk', 'cz'],
                ],
                [
                    'placeholder' => '1:id',
                    'field' => 'id',
                    'value' => [123, 456],
                ],
                [
                    'placeholder' => '1:tags',
                    'field' => 'tags',
                    'value' => ['tag1', 'tag2'],
                ],
            ],
            [
                [
                    [
                        'placeholder' => '1:category',
                        'field' => 'category',
                        'value' => 'other',
                    ],
                    [
                        'placeholder' => '2:region',
                        'field' => 'region',
                        'value' => 'sk',
                    ],
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 123,
                    ],
                    [
                        'placeholder' => '1:tags',
                        'field' => 'tags',
                        'value' => 'tag1',
                    ],
                ],
                [
                    [
                        'placeholder' => '1:category',
                        'field' => 'category',
                        'value' => 'other',
                    ],
                    [
                        'placeholder' => '2:region',
                        'field' => 'region',
                        'value' => 'sk',
                    ],
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 123,
                    ],
                    [
                        'placeholder' => '1:tags',
                        'field' => 'tags',
                        'value' => 'tag2',
                    ],
                ],
                [
                    [
                        'placeholder' => '1:category',
                        'field' => 'category',
                        'value' => 'other',
                    ],
                    [
                        'placeholder' => '2:region',
                        'field' => 'region',
                        'value' => 'sk',
                    ],
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 456,
                    ],
                    [
                        'placeholder' => '1:tags',
                        'field' => 'tags',
                        'value' => 'tag1',
                    ],
                ],
                [
                    [
                        'placeholder' => '1:category',
                        'field' => 'category',
                        'value' => 'other',
                    ],
                    [
                        'placeholder' => '2:region',
                        'field' => 'region',
                        'value' => 'sk',
                    ],
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 456,
                    ],
                    [
                        'placeholder' => '1:tags',
                        'field' => 'tags',
                        'value' => 'tag2',
                    ],
                ],
                [
                    [
                        'placeholder' => '1:category',
                        'field' => 'category',
                        'value' => 'other',
                    ],
                    [
                        'placeholder' => '2:region',
                        'field' => 'region',
                        'value' => 'cz',
                    ],
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 123,
                    ],
                    [
                        'placeholder' => '1:tags',
                        'field' => 'tags',
                        'value' => 'tag1',
                    ],
                ],
                [
                    [
                        'placeholder' => '1:category',
                        'field' => 'category',
                        'value' => 'other',
                    ],
                    [
                        'placeholder' => '2:region',
                        'field' => 'region',
                        'value' => 'cz',
                    ],
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 123,
                    ],
                    [
                        'placeholder' => '1:tags',
                        'field' => 'tags',
                        'value' => 'tag2',
                    ],
                ],
                [
                    [
                        'placeholder' => '1:category',
                        'field' => 'category',
                        'value' => 'other',
                    ],
                    [
                        'placeholder' => '2:region',
                        'field' => 'region',
                        'value' => 'cz',
                    ],
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 456,
                    ],
                    [
                        'placeholder' => '1:tags',
                        'field' => 'tags',
                        'value' => 'tag1',
                    ],
                ],
                [
                    [
                        'placeholder' => '1:category',
                        'field' => 'category',
                        'value' => 'other',
                    ],
                    [
                        'placeholder' => '2:region',
                        'field' => 'region',
                        'value' => 'cz',
                    ],
                    [
                        'placeholder' => '1:id',
                        'field' => 'id',
                        'value' => 456,
                    ],
                    [
                        'placeholder' => '1:tags',
                        'field' => 'tags',
                        'value' => 'tag2',
                    ],
                ],
            ],
        ];
    }
}


================================================
File: /tests/phpunit/GenericExtractorTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests;

use Keboola\GenericExtractor\Configuration\Api;
use Keboola\GenericExtractor\GenericExtractor;
use Keboola\Juicer\Config\Config;
use Keboola\Juicer\Exception\UserException;
use Keboola\Juicer\Parser\Json;
use Keboola\Temp\Temp;
use PHPUnit\Framework\TestCase;
use Psr\Log\NullLogger;

class GenericExtractorTest extends TestCase
{
    /**
     * No change to JSON parser structure should happen when nothing is parsed!
     */
    public function testRunMetadataNoUpdate(): void
    {
        $meta = [
            'json_parser.struct' => [
                'data' => [
                    '_get' => [
                        'nodeType' => 'array',
                        '[]' => [
                            'nodeType' => 'object',
                            'headerNames' => 'data',
                            '_channel' => [
                                'nodeType' => 'scalar',
                            ],
                            '_source' => [
                                'nodeType' => 'scalar',
                            ],
                        ],
                    ],
                ],
            ],
            'json_parser.structVersion' => 3,
            'time' => [
                'previousStart' => 123,
            ],
        ];

        $cfg = new Config(['jobs' => [['endpoint' => 'get']]]);
        $api = new Api(new NullLogger(), ['baseUrl' => 'http://example.com/'], [], []);
        $ex = new GenericExtractor(new Temp(), new NullLogger(), $api);

        $ex->setMetadata($meta);
        try {
            $ex->run($cfg);
        } catch (UserException $e) {
        }
        $after = $ex->getMetadata();

        self::assertEquals($meta['json_parser.struct'], $after['json_parser.struct']);
        self::assertArrayHasKey('time', $after);
    }

    public function testRunMetadataUpdate(): void
    {
        $meta = [
            'json_parser.struct' => [
                'data' => [
                    '_get' => [
                        'nodeType' => 'array',
                        '[]' => [
                            'nodeType' => 'object',
                            'headerNames' => 'data',
                            '_channel' => [
                                'nodeType' => 'scalar',
                            ],
                            '_source' => [
                                'nodeType' => 'scalar',
                            ],
                        ],
                    ],
                ],
            ],
            'json_parser.structVersion' => 3,
            'time' => [
                'previousStart' => 123,
            ],
        ];

        $cfg = new Config(['jobs' => [['endpoint' => 'get']]]);
        $api = new Api(new NullLogger(), ['baseUrl' => 'http://private-834388-extractormock.apiary-mock.com/'], [], []);
        $ex = new GenericExtractor(new Temp(), new NullLogger(), $api);

        $ex->setMetadata($meta);
        $ex->run($cfg);
        $after = $ex->getMetadata();

        $meta['json_parser.struct'] = [
            'data' => [
                '_get' => [
                    'nodeType' => 'array',
                    '[]' => [
                        'nodeType' => 'object',
                        'headerNames' => 'data',
                        '_id' => [
                            'nodeType' => 'scalar',
                            'headerNames' => 'id',
                        ],
                        '_status' => [
                            'nodeType' => 'scalar',
                            'headerNames' => 'status',
                        ],
                        '_channel' => [
                            'nodeType' => 'scalar',
                            'headerNames' => 'channel',
                        ],
                        '_source' => [
                            'nodeType' => 'scalar',
                            'headerNames' => 'source',
                        ],
                    ],
                ],
            ],
            'parent_aliases' => [

            ],
        ];
        self::assertEquals($meta['json_parser.struct'], $after['json_parser.struct']);
        self::assertArrayHasKey('time', $after);
    }

    public function testGetParser(): void
    {
        $parser = new Json(new NullLogger(), [], Json::LATEST_VERSION);
        $api = new Api(new NullLogger(), ['baseUrl' => 'http://example.com'], [], []);
        $extractor = new GenericExtractor(new Temp(), new NullLogger(), $api);
        $extractor->setParser($parser);
        self::assertEquals($parser, $extractor->getParser());
    }
}


================================================
File: /tests/phpunit/UtilsTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\GenericExtractor\Tests;

use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use Keboola\GenericExtractor\Utils;
use PHPUnit\Framework\TestCase;

class UtilsTest extends TestCase
{
    /**
     * @dataProvider getTestUris
     */
    public function testGerResources(string $uri, string $resource): void
    {
        $this->assertSame($resource, Utils::getResource(\GuzzleHttp\Psr7\Utils::uriFor($uri)));
    }

    public function getTestUris(): iterable
    {
        yield ['http://example.com', ''];
        yield ['http://example.com/', '/'];
        yield ['http://example.com/abc', '/abc'];
        yield ['http://example.com/abc?k1=v1', '/abc?k1=v1'];
        yield ['http://example.com/abc?k1=v1&k2=v2', '/abc?k1=v1&k2=v2'];
        yield ['', ''];
        yield ['/', '/'];
        yield ['/abc', '/abc'];
        yield ['/abc?k1=v1', '/abc?k1=v1'];
        yield ['/abc?k1=v1&k2=v2', '/abc?k1=v1&k2=v2'];
    }

    /**
     * @dataProvider getTestQueries
     */
    public function testMergeQueries(string $query1, string $query2, string $expected): void
    {
        // Test all string + array representations
        $this->assertSame($expected, Utils::mergeQueries($query1, $query2));
        $this->assertSame($expected, Utils::mergeQueries(Query::parse($query1), $query2));
        $this->assertSame($expected, Utils::mergeQueries($query1, Query::parse($query2)));
        $this->assertSame($expected, Utils::mergeQueries(Query::parse($query1), Query::parse($query2)));
    }

    public function testMergeQueriesEscaping(): void
    {
        $query1 = ['param1' => '%21%40%23'];
        $query2 = ['param2' => '%C3%BA%C4%9B%C5%A1'];
        $expected = 'param1=%2521%2540%2523&param2=%25C3%25BA%25C4%259B%25C5%25A1';
        $this->assertSame($expected, Utils::mergeQueries($query1, $query2));
    }

    public function testMergeQueriesMergeToArray(): void
    {
        $query1 = ['a' => 'a1', 'b' => 'b1', 'c' => 'c1'];
        $query2 = ['c' => 'c2', 'd' => 'd2'];
        // a=a1&b=b1&d=d2&c[0]=c1&c[1]=c2
        $expected = 'a=a1&b=b1&d=d2&c%5B0%5D=c1&c%5B1%5D=c2';
        $this->assertSame($expected, Utils::mergeQueries($query1, $query2, true));
    }

    public function getTestQueries(): iterable
    {
        yield ['', '', ''];
        yield ['param1=value1', 'param2=value2', 'param1=value1&param2=value2'];
        yield ['a=x&b=y&c=z', 'a=xx&c=zz', 'a=xx&b=y&c=zz'];
        yield ['a=xx&c=zz', 'a=x&b=y&c=z', 'a=x&c=z&b=y'];
        yield ['param1=!@#', 'param2=úěš', 'param1=%21%40%23&param2=%C3%BA%C4%9B%C5%A1'];
        yield ['param1=%21%40%23', 'param2=%C3%BA%C4%9B%C5%A1', 'param1=%21%40%23&param2=%C3%BA%C4%9B%C5%A1'];
    }

    /**
     * @dataProvider getTestHeaders
     */
    public function testMergeHeaders(array $a, array $b, array $expected): void
    {
        $request = new Request('GET', 'http://example.com');
        foreach ($a as $name => $value) {
            $request = $request->withHeader($name, $value);
        }

        $result = Utils::mergeHeaders($request, $b)->getHeaders();
        unset($result['Host']);

        $this->assertSame($expected, $result);
    }

    public function getTestHeaders(): iterable
    {
        yield [[],[],[]];
        yield [['k1' => 'v1'],[],['k1' => ['v1']]];
        yield [[],['k1' => 'v1'],['k1' => ['v1']]];
        yield [['k1' => 'v1'],['k2' => 'v2'],['k1' => ['v1'], 'k2' => ['v2']]];
        yield [['k1' => 'v1'],['k1' => 'v2'],['k1' => ['v2']]];
        yield [['key1' => 'v1'],['KEY1' => 'v2'],['KEY1' => ['v2']]];
        yield [['KEY1' => 'v1'],['KEY2' => 'v2'],['KEY1' => ['v1'], 'KEY2' => ['v2']]];
    }
}


================================================
File: /tests/phpunit/bootstrap.php
================================================
<?php

declare(strict_types=1);

require_once __DIR__ . '/../../vendor/autoload.php';


================================================
File: /Dockerfile-ssh-proxy
================================================
FROM ubuntu:14.04

RUN apt-get update

RUN apt-get install -y openssh-server
RUN mkdir /var/run/sshd

RUN echo 'root:root' |chpasswd

RUN sed -ri 's/^PermitRootLogin\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config
RUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config

RUN mkdir ~/.ssh
RUN echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDawTcaNLLjlBh+H/aomeAe1lwpXTH3EfXhOI9RZL+I1agkE//AnLXlh03Z7d9b97jC11zCLQrzo3LkwpkO1O90/ZptRWoOdq14JxP9M4ULslp6D2+dFyQNBTnK4dTO5Y8qRK7/NJa6iDB7bp/xTdsBF8RIWJItlYl+6+WiAWDCDn/gEQ8ZAiSw3yEqdsSLkOcjlS9gFNgYN3TQNz2mt+2ecL8mA6N282FWMxrtk7GysYue4OwgNX/ONDlAvAFS6VUdxOTNTMRdXvABTwupdRTP28mXCq4yTlHAhuVp3u27Fw6DQjOfNDiV4tfbGctQXoCimBiJ+suo+Mj4KRwt9BIx dev" >> ~/.ssh/authorized_keys

EXPOSE 22

CMD    ["/usr/sbin/sshd", "-D"]

================================================
File: /phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/9.3/phpunit.xsd"
        backupGlobals="false"
        backupStaticAttributes="false"
        colors="true"
        convertErrorsToExceptions="true"
        convertNoticesToExceptions="true"
        convertWarningsToExceptions="true"
        processIsolation="false"
        stopOnFailure="false"
        bootstrap="tests/phpunit/bootstrap.php">
  <coverage processUncoveredFiles="false">
    <include>
      <directory suffix=".php">.</directory>
    </include>
    <exclude>
      <directory suffix=".php">vendor/</directory>
    </exclude>
    <report>
      <clover outputFile="build/logs/clover.xml"/>
    </report>
  </coverage>
  <testsuite name="Main Test Suite">
    <directory>tests/phpunit</directory>
  </testsuite>
</phpunit>


================================================
File: /doc/docker-compose.yml
================================================
version: '2'

services:
  mock-server:
    container_name: mock-server
    image: quay.io/keboola/ex-generic-mock-server
    tty: true
    stdin_open: true
    ports:
      - "8888:80"
    volumes:
        - ./examples:/examples/
    environment:
        - KBC_EXAMPLES_DIR=/examples/

  mock-server-behind-proxy:
      container_name: mock-server-behind-proxy
      image: quay.io/keboola/ex-generic-mock-server
      tty: true
      stdin_open: true
      ports:
        - "8889:80"
      volumes:
          - ./examples:/examples/
      environment:
          - KBC_EXAMPLES_DIR=/examples/

  mock-server-https-self-signed-proxy:
    image: outrigger/https-proxy:1.0
    volumes:
      - ./examples/141-https-self-signed/https/ca:/etc/nginx/ca
      - ./examples/141-https-self-signed/https/certs:/etc/nginx/certs
    environment:
      UPSTREAM_DOMAIN: mock-server
      UPSTREAM_PORT: 80
      PROXY_DOMAIN: mock-server-https-self-signed-proxy

  mock-server-https-client-cert-proxy:
    image: outrigger/https-proxy:1.0
    volumes:
      - ./examples/142-https-client-cert/https/ca:/etc/nginx/ca
      - ./examples/142-https-client-cert/https/certs:/etc/nginx/certs
      - ./examples/142-https-client-cert/https/client_ca:/etc/nginx/client_ca
      - ./examples/142-https-client-cert/https/nginx.conf.tmpl:/etc/confd/templates/nginx.conf.tmpl
    environment:
      UPSTREAM_DOMAIN: mock-server
      UPSTREAM_PORT: 80
      PROXY_DOMAIN: mock-server-https-client-cert-proxy

  ssh-proxy:
      build:
        context: ..
        dockerfile: Dockerfile-ssh-proxy
      ports:
        - "2222:22"
      links:
        - mock-server-behind-proxy

  extractor:
    build: ..
    image: keboola/generic-extractor
    volumes:
      - .tmp:/tmp
      - ./examples/:/examples/
    command:
      - /bin/sh
      - -c
      - "KBC_DATADIR=\"/examples/$$KBC_EXAMPLE_NAME\" php /code/src/run.php"
    links:
      - mock-server
      - mock-server-https-self-signed-proxy
      - mock-server-https-client-cert-proxy
      - ssh-proxy


================================================
File: /doc/generate-ssl.sh
================================================
#!/bin/bash
set -e

# FROM: https://gist.github.com/komuw/076231fd9b10bb73e40f
export TARGET_DIR="examples/142-https-client-cert/https"
export DAYS=50000

# Cleanup
rm -rf $TARGET_DIR/client_ca
rm -rf $TARGET_DIR/ca
rm -rf $TARGET_DIR/certs
rm -rf $TARGET_DIR/client_certs
cd $TARGET_DIR

mkdir client_ca
mkdir ca
mkdir certs
mkdir client_certs

### SERVER CA ###
cd ca
# Create the CA Key and Certificate for signing Server Certs
openssl genrsa -out rootCA.key 4096
openssl req -subj "/CN=mock-server-https-client-cert-proxy-CA" -new -x509 -days $DAYS -key rootCA.key -out rootCA.crt

### CLIENT CA ###

cd ../client_ca
# Create the CA Key and Certificate for signing Client Certs
openssl genrsa -out rootCA.key 4096
openssl req -subj "/CN=mock-server-https-client-cert-proxy-CA" -new -x509 -days $DAYS -key rootCA.key -out rootCA.crt

### SERVER CERTS ###

cd ../certs
# Create the Server Key, CSR, and Certificate
openssl genrsa -out key.pem 4096
openssl req -subj "/CN=mock-server-https-client-cert-proxy" -new -key key.pem -out csr.pem

cd ..
# We're self signing our own server cert here.  This is a no-no in production.
openssl x509 -req -days $DAYS -in certs/csr.pem -CA ca/rootCA.crt -CAkey ca/rootCA.key -set_serial 01 -out certs/cert.pem

### CLIENT CERTS ###

cd client_certs
# Create the Client Key and CSR
openssl genrsa -out client_key.pem 4096
openssl req -subj "/CN=mock-server-https-client-cert-proxy" -new -key client_key.pem -out client_csr.pem

cd ..
# Sign the client certificate with our CA cert.  Unlike signing our own server cert, this is what we want to do.
# Serial should be different from the server one, otherwise curl will return NSS error -8054
openssl x509 -req -days $DAYS -in client_certs/client_csr.pem -CA client_ca/rootCA.crt -CAkey client_ca/rootCA.key -set_serial 01 -out client_certs/client_cert.pem

### VERIFY CERTIFICATES

# Verify Server Certificate
openssl verify -purpose sslserver -CAfile ca/rootCA.crt certs/cert.pem

# Verify Client Certificate
openssl verify -purpose sslclient -CAfile client_ca/rootCA.crt client_certs/client_cert.pem

================================================
File: /doc/run-samples.sh
================================================
#!/bin/bash
set -e

run_example() {
    if [ -z "$1" ] ; then
        printf "No example name provided."
        exit 1
    else
        printf "\nRunning example $1\n"
    fi
    EXAMPLE_NAME=$1
    rm -rf examples/$1/out/*
    mkdir -p examples/$1/out/tables/
    docker compose run --rm -e "KBC_EXAMPLE_NAME=$EXAMPLE_NAME" extractor
    if diff --brief --recursive examples/${EXAMPLE_NAME}/out/tables/ examples/${EXAMPLE_NAME}/_sample_out/ ; then
        printf "Example $EXAMPLE_NAME successful.\n"
    else
        printf "Example $EXAMPLE_NAME failed.\n"
        diff --recursive examples/${EXAMPLE_NAME}/out/tables/ examples/${EXAMPLE_NAME}/_sample_out/
    fi
}

# Start mock server
docker compose build --force-rm --pull

# Run examples
run_example "001-simple-job"
run_example "002-array-in-object"
run_example "003-multiple-arrays-in-object"
run_example "004-array-in-nested-object"
run_example "005-two-arrays-in-nested-object"
run_example "006-simple-object"
run_example "007-nested-object"
run_example "008-single-object-in-array"
run_example "009-nested-array"
run_example "010-object-with-nested-array"
run_example "011-object-with-nested-object"
run_example "012-deeply-nested-object"
run_example "013-skip-flatten"
run_example "014-skip-flatten-nested"
run_example "015-skip-boolean"
run_example "016-inconsistent-object"
run_example "017-upgrading-array"
run_example "018-multiple-filters"
run_example "019-different-delimiter"
run_example "020-setting-delimiter-complex"
run_example "021-basic-child-job"
run_example "022-basic-child-job-datatype"
run_example "023-child-job-nested-id"
run_example "024-child-job-deeply-nested-id"
run_example "025-naming-conflict"
run_example "026-basic-deeper-nesting"
run_example "027-basic-deeper-nesting-alternative"
run_example "028-advanced-deep-nesting"
run_example "029-simple-filter"
run_example "030-not-like-filter"
run_example "031-combined-filter"
run_example "032-multiple-combined-filter"
run_example "033-job-parameters"
run_example "034-post-request"
run_example "035-complex-post"
run_example "036-complex-get"
run_example "037-retry-header"
run_example "038-default-headers"
run_example "039-default-parameters"
run_example "040-required-headers"
run_example "041-paging-stop-same"
run_example "042-paging-stop-same-2"
run_example "043-paging-stop-underflow"
run_example "044-paging-stop-underflow-struct"
run_example "045-next-page-flag-has-more"
run_example "046-next-page-flag-has-more-2"
run_example "047-next-page-flag-is-last"
run_example "048-force-stop"
run_example "049-pagination-offset-rename"
run_example "050-pagination-offset-override"
run_example "051-pagination-pagenum-basic"
run_example "052-pagination-pagenum-rename"
run_example "053-pagination-pagenum-override"
run_example "054-pagination-response-url-basic"
run_example "055-pagination-response-url-params"
run_example "056-pagination-response-url-params-override"
run_example "057-pagination-response-param-basic"
run_example "058-pagination-response-param-override"
run_example "059-pagination-response-param-scroll-request"
run_example "060-pagination-cursor-basic"
run_example "061-pagination-cursor-reverse"
run_example "062-pagination-multiple-scrollers"
run_example "063-mapping-automatic"
run_example "064-mapping-basic"
run_example "065-mapping-child-jobs"
run_example "066-mapping-tables-basic"
run_example "067-mapping-tables-nested"
run_example "068-mapping-tables-nested-array"
run_example "069-mapping-tables-nested-direct"
run_example "070-mapping-tables-nested-direct-pk"
run_example "071-mapping-multiple-pk"
run_example "072-mapping-pk-disable"
run_example "073-mapping-forceType"
run_example "074-http-headers"
run_example "075-incremental-output"
run_example "076-user-data"
run_example "077-query-auth"
run_example "078-basic-auth"
run_example "079-login-auth-headers"
run_example "080-login-auth-query"
run_example "081-login-auth-headers-query-override"
run_example "082-login-auth-expires"
run_example "083-login-auth-expires-date"
run_example "084-login-auth-expires-seconds"
run_example "085-function-job-placeholders"
run_example "086-function-job-placeholders-reference"
run_example "087-function-baseurl"
run_example "088-function-baseurl-sprintf"
run_example "089-function-job-parameters-md5"
run_example "090-function-job-parameters-sha1"
# run_example "091-function-user-data" # -> This is not testable, because it uses currentStart
run_example "092-function-user-date-set-date"
run_example "093-function-api-http-headers"
run_example "094-function-config-headers"
run_example "095-function-nested"
run_example "096-function-nested-from-to"
run_example "097-function-ifempty"
run_example "098-function-hmac"
run_example "099-function-query-parameters"
run_example "100-function-login-headers"
run_example "101-function-query-auth"
# run_example "102-oauth1" # -> This is not testable, because it uses random hash
run_example "103-oauth2-bearer"
# run_example "104-oauth2-hmac" # -> This is not testable, because it uses random hash
run_example "105-oauth2-login"
run_example "106-child-jobs-array"
run_example "107-incremental-load"
run_example "108-incremental-load-date"
# run_example "109-incremental-load-from-to" # -> This is not testable, because it uses currentStart
# run_example "110-incremental-relative" # -> This is not testable, because it uses currentStart
run_example "111-templates-example"
run_example "112-iterations-params"
run_example "113-iterations-headers"
run_example "114-oauth2-google"
run_example "115-multiple-pk-parent"
run_example "116-multiple-conditions-multiple-jobs"
run_example "117-function-login-params-response"
run_example "118-function-login-headers-response"
run_example "119-function-nested-config"
run_example "120-datafield-separator"
run_example "121-inconsistent-object-legacy"
run_example "122-multiple-filters-legacy"
run_example "123-incremental-load-legacy"
run_example "124-naming-conflict-legacy"
run_example "125-user-data-legacy"
run_example "126-pagination-stop-limit"
run_example "127-pagination-stop-field"
run_example "128-login-auth-text"
run_example "129-login-auth-scalar"
run_example "130-unsupported-nested-array"
run_example "131-ssh-tunnel"
run_example "132-ignore-errors"
run_example "133-ssh-tunnel-iterations-params"
run_example "134-user-data-in-mapping"
run_example "135-basic-child-job-array"
run_example "136-post-request-functions"
run_example "137-mapping-tables-nested-empty"
run_example "138-pagination-stop-field-child-filter"
run_example "139-pagination-hasmore-child-filter"
run_example "140-pagination-forcestop-child-filter"
run_example "141-https-self-signed"
run_example "142-https-client-cert"
run_example "143-aws-signature-request"

# Stop mock server
printf "\nAll examples successfull.\n"
docker stop mock-server


================================================
File: /doc/examples/123-incremental-load-legacy/_sample_out/mock-server.users
================================================
"id","name","modified"
"3","John Doe","2017-04-20 19:05:12"
"234","Jane Doe","2017-04-21 19:30:45"


================================================
File: /doc/examples/123-incremental-load-legacy/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":true}

================================================
File: /doc/examples/123-incremental-load-legacy/users.request
================================================
GET /123-incremental-load-legacy/users?modified_since=1492606006

================================================
File: /doc/examples/123-incremental-load-legacy/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "modified": "2017-04-20 19:05:12"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "modified": "2017-04-21 19:30:45"
    }
]


================================================
File: /doc/examples/123-incremental-load-legacy/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/123-incremental-load-legacy/"
        },
        "config": {
            "debug": true,
            "incrementalOutput": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "params": {
                        "modified_since": {
                            "time": "previousStart"
                        }
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/123-incremental-load-legacy/in/state.json
================================================
{"time":{"previousStart":1492606006},"json_parser.struct":{"users":{"id":"scalar","name":"scalar","modified":"scalar"}},"json_parser.structVersion":2}

================================================
File: /doc/examples/013-skip-flatten/_sample_out/mock-server.users
================================================
"id","name","tags"
"123","John Doe","[""active"",""admin""]"
"234","Jane Doe","[""active""]"


================================================
File: /doc/examples/013-skip-flatten/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/013-skip-flatten/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/010-object-with-nested-array/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members",
                    "responseFilter": "tags"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/035-complex-post/_sample_out/mock-server.getUsers.manifest
================================================
{"destination":"in.c-mock-server.getUsers","incremental":false}

================================================
File: /doc/examples/035-complex-post/_sample_out/mock-server.getUsers
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/035-complex-post/users.request
================================================
POST /035-complex-post/getUsers

{"filter":{"type":"active"},"return":{"fields":["id","name"]}}

================================================
File: /doc/examples/035-complex-post/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/035-complex-post/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/035-complex-post/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "getUsers",
                    "method": "POST",
                    "params": {
                        "filter": {
                            "type": "active"
                        },
                        "return": {
                            "fields": ["id", "name"]
                        }
                    }
                }
            ]
        }
    }
}


================================================
File: /doc/examples/101-function-query-auth/items-users.request
================================================
GET /101-function-query-auth/items?type=users&apiToken=1234abcd567efg890hij&signature=d8221ab22e2a04e0a3a0b8818115864dd9b4bce4

================================================
File: /doc/examples/101-function-query-auth/_sample_out/mock-server.users
================================================
"id","name","company"
"3","John Doe","Acme Anvil 24h Service"
"234","Jane Doe","Acme Anvil Research & Development"


================================================
File: /doc/examples/101-function-query-auth/_sample_out/mock-server.orders
================================================
"order_id","price"
"98765432","$42"
"23456765","$24"


================================================
File: /doc/examples/101-function-query-auth/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/101-function-query-auth/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":false}

================================================
File: /doc/examples/101-function-query-auth/items-orders.response
================================================
{
	"items": [
		{
			"order_id": 98765432,
			"price": "$42"
		},
		{
			"order_id": 23456765,
			"price": "$24"
		}
	]
}

================================================
File: /doc/examples/101-function-query-auth/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/101-function-query-auth/",
            "authentication": {
                "type": "query",
                "query": {
                    "apiToken": {
                        "attr": "#token"
                    },
                    "signature": {
                        "function": "sha1",
                        "args": [
                            {
                                "function": "concat",
                                "args": [
                                    {
                                        "attr": "#token"
                                    },
                                    {
                                        "query": "type"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-Api-Token": "token"
                    }
                }
            }
        },
        "config": {            
            "#token": "1234abcd567efg890hij",
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "items",
                    "dataType": "users",
                    "params": {
                        "type": "users"
                    }
                },
                {
                    "endpoint": "items",
                    "dataType": "orders",
                    "params": {
                        "type": "orders"
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/101-function-query-auth/items-orders.request
================================================
GET /101-function-query-auth/items?type=orders&apiToken=1234abcd567efg890hij&signature=71875541aafb104f19db96dfb019406dfe68a627

================================================
File: /doc/examples/101-function-query-auth/items-users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "company": "Acme Anvil 24h Service"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "company": "Acme Anvil Research & Development"
    }
]


================================================
File: /doc/examples/041-paging-stop-same/users4.request
================================================
GET /041-paging-stop-same/users?limit=2&offset=4

================================================
File: /doc/examples/041-paging-stop-same/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/041-paging-stop-same/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/041-paging-stop-same/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/041-paging-stop-same/",
            "pagination": {
                "method": "offset",
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/041-paging-stop-same/users1.request
================================================
GET /041-paging-stop-same/users?limit=2&offset=0

================================================
File: /doc/examples/041-paging-stop-same/users2.request
================================================
GET /041-paging-stop-same/users?limit=2&offset=2

================================================
File: /doc/examples/041-paging-stop-same/users2.response
================================================
[
    {
        "id": 345,
        "name": "Jimmy Doe"
    },
    {
        "id": 456,
        "name": "Jenny Doe"
    }
]

================================================
File: /doc/examples/041-paging-stop-same/users1.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/041-paging-stop-same/users4.response
================================================
[
    {
        "id": 345,
        "name": "Jimmy Doe"
    },
    {
        "id": 456,
        "name": "Jenny Doe"
    }
]

================================================
File: /doc/examples/016-inconsistent-object/_sample_out/mock-server.users
================================================
"id","name","color"
"123","foo","""green"""
"321","bar","{""items"":[""red"",""blue""]}"


================================================
File: /doc/examples/016-inconsistent-object/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/016-inconsistent-object/users.request
================================================
GET /016-inconsistent-object/users

================================================
File: /doc/examples/016-inconsistent-object/users.response
================================================
[
    {
        "id": 123,
        "name": "foo",
        "color": "green"
    },
    {
        "id": 321,
        "name": "bar",
        "color": {
            "items": ["red", "blue"]
        }
    }
]


================================================
File: /doc/examples/016-inconsistent-object/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/016-inconsistent-object/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "responseFilter": "color"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/084-login-auth-expires-seconds/users.requestHeaders
================================================
X-ApiToken: a1b2c3d435f6

================================================
File: /doc/examples/084-login-auth-expires-seconds/orders.response
================================================
{
	"items": [
		{
			"order_id": 98765432,
			"price": "$42"
		},
		{
			"order_id": 23456765,
			"price": "$24"
		}
	]
}

================================================
File: /doc/examples/084-login-auth-expires-seconds/login.response
================================================
{
	"authorization": {
		"token": "a1b2c3d435f6",
		"expires": 0
	}
}

================================================
File: /doc/examples/084-login-auth-expires-seconds/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/084-login-auth-expires-seconds/_sample_out/mock-server.orders
================================================
"order_id","price"
"98765432","$42"
"23456765","$24"


================================================
File: /doc/examples/084-login-auth-expires-seconds/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/084-login-auth-expires-seconds/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":false}

================================================
File: /doc/examples/084-login-auth-expires-seconds/orders.request
================================================
GET /084-login-auth-expires-timestamp/orders

================================================
File: /doc/examples/084-login-auth-expires-seconds/users.request
================================================
GET /084-login-auth-expires-timestamp/users

================================================
File: /doc/examples/084-login-auth-expires-seconds/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/084-login-auth-expires-seconds/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/084-login-auth-expires-timestamp/",
            "authentication": {
                "type": "login",
                "loginRequest": {
                    "endpoint": "login",
                    "method": "GET",
                    "headers": {
                        "X-Login": "JohnDoe",
                        "X-Password": "TopSecret"
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-ApiToken": {
                            "response": "authorization.token"
                        }
                    }
                },
                "expires": {
                    "response": "authorization.expires",
                    "relative": true
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                },
                {
                    "endpoint": "orders"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/084-login-auth-expires-seconds/login.requestHeaders
================================================
X-Login: JohnDoe
X-Password: TopSecret

================================================
File: /doc/examples/084-login-auth-expires-seconds/login.request
================================================
GET /084-login-auth-expires-timestamp/login

================================================
File: /doc/examples/120-datafield-separator/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/120-datafield-separator/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/120-datafield-separator/users.request
================================================
GET /120-datafield-separator/users

================================================
File: /doc/examples/120-datafield-separator/users.response
================================================
{
    "domains": {
        "example.com": {
            "active": [
                {
                    "id": 123,
                    "name": "John Doe"
                },
                {
                    "id": 234,
                    "name": "Jane Doe"
                }
            ],
            "inactive": []
        },
        "example.net": {
            "active": [],
            "inactive": [
                {
                    "id": 345,
                    "name": "Jimmy Doe"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/120-datafield-separator/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/120-datafield-separator/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": {
                        "path": "domains|example.com|active",
                        "delimiter": "|"
                    }
                }
            ]
        }
    }
}


================================================
File: /doc/examples/106-child-jobs-array/user234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "address": {
        "city": "St Mary Mead",
        "country": "UK",
        "street": "High Street"
    }
}

================================================
File: /doc/examples/106-child-jobs-array/user234.request
================================================
GET /088-child-jobs-array/user/234

================================================
File: /doc/examples/106-child-jobs-array/_sample_out/mock-server.users-2
================================================
"members_description","members_tags","members_count","members_items"
"Active System Members","users-2.members_c6eb0647a7f2fb2cbe02ba62d56e3312","2","users-2.members_c6eb0647a7f2fb2cbe02ba62d56e3312"


================================================
File: /doc/examples/106-child-jobs-array/_sample_out/mock-server.users
================================================
"name","user-info_id","user-info_active"
"John Doe","123","1"
"Jane Doe","234",""


================================================
File: /doc/examples/106-child-jobs-array/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/106-child-jobs-array/_sample_out/mock-server.users-2_members_items
================================================
"name","user-info_id","user-info_active","JSON_parentId"
"John Doe","123","1","users-2.members_c6eb0647a7f2fb2cbe02ba62d56e3312"
"Jane Doe","234","","users-2.members_c6eb0647a7f2fb2cbe02ba62d56e3312"


================================================
File: /doc/examples/106-child-jobs-array/_sample_out/mock-server.users-2_members_tags.manifest
================================================
{"destination":"in.c-mock-server.users-2_members_tags","incremental":false}

================================================
File: /doc/examples/106-child-jobs-array/_sample_out/mock-server.user-detail
================================================
"id","name","address_city","address_country","address_street","parent_user-info_id"
"123","John Doe","London","UK","Whitehaven Mansions","123"
"234","Jane Doe","St Mary Mead","UK","High Street","234"


================================================
File: /doc/examples/106-child-jobs-array/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/106-child-jobs-array/_sample_out/mock-server.users-2_members_tags
================================================
"data","JSON_parentId"
"active","users-2.members_c6eb0647a7f2fb2cbe02ba62d56e3312"
"crm","users-2.members_c6eb0647a7f2fb2cbe02ba62d56e3312"


================================================
File: /doc/examples/106-child-jobs-array/_sample_out/mock-server.users-2.manifest
================================================
{"destination":"in.c-mock-server.users-2","incremental":false}

================================================
File: /doc/examples/106-child-jobs-array/_sample_out/mock-server.users-2_members_items.manifest
================================================
{"destination":"in.c-mock-server.users-2_members_items","incremental":false}

================================================
File: /doc/examples/106-child-jobs-array/users.request
================================================
GET /088-child-jobs-array/users

================================================
File: /doc/examples/106-child-jobs-array/user123.response
================================================
{
    "id": "123",
    "name": "John Doe",
    "address": {
        "city": "London",
        "country": "UK",
        "street": "Whitehaven Mansions"
    }
}

================================================
File: /doc/examples/106-child-jobs-array/users.response
================================================
{
    "members": {
        "description": "Active System Members",
        "tags": [
            "active",
            "crm"
        ],
        "count": "2",
        "items": [
            {
                "name": "John Doe",
                "user-info": {
                    "id": 123,
                    "active": true
                }
            },
            {
                "name": "Jane Doe",
                "user-info": {
                    "id": 234,
                    "active": false
                }
            }
        ]
    }
}

================================================
File: /doc/examples/106-child-jobs-array/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/088-child-jobs-array/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members.items",
                    "dataType": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "user-info.id"
                            }
                        }
                    ]
                },
                {
                    "endpoint": "users",
                    "dataField": ".",
                    "dataType": "users-2"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/106-child-jobs-array/user123.request
================================================
GET /088-child-jobs-array/user/123

================================================
File: /doc/examples/014-skip-flatten-nested/_sample_out/mock-server.users_contacts
================================================
"type","properties","primary","JSON_parentId"
"address","{""street"":""Elm Street"",""city"":""New York""}","","users_0b9650e0f68b0c6738843d5b4ff0a961"
"email","{""address"":""john.doe@example.com""}","1","users_0b9650e0f68b0c6738843d5b4ff0a961"
"address","{""street"":""Bates Street"",""city"":""Chicago"",""state"":""USA""}","","users_cf76fb6794380244946d2bc4fa3aa04a"
"phone","{""number"":""123 456 789""}","1","users_cf76fb6794380244946d2bc4fa3aa04a"


================================================
File: /doc/examples/014-skip-flatten-nested/_sample_out/mock-server.users
================================================
"id","name","contacts"
"123","John Doe","users_0b9650e0f68b0c6738843d5b4ff0a961"
"234","Jane Doe","users_cf76fb6794380244946d2bc4fa3aa04a"


================================================
File: /doc/examples/014-skip-flatten-nested/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/014-skip-flatten-nested/_sample_out/mock-server.users_contacts.manifest
================================================
{"destination":"in.c-mock-server.users_contacts","incremental":false}

================================================
File: /doc/examples/014-skip-flatten-nested/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/012-deeply-nested-object/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members",
                    "responseFilter": "contacts[].properties"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/129-login-auth-scalar/users.requestHeaders
================================================
X-ApiToken: a1b2c3d435f6

================================================
File: /doc/examples/129-login-auth-scalar/login.response
================================================
"a1b2c3d435f6"

================================================
File: /doc/examples/129-login-auth-scalar/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/129-login-auth-scalar/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/129-login-auth-scalar/users.request
================================================
GET /129-login-auth-scalar/users

================================================
File: /doc/examples/129-login-auth-scalar/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/129-login-auth-scalar/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/129-login-auth-scalar/",
            "authentication": {
                "type": "login",
                "format": "json",
                "loginRequest": {
                    "endpoint": "login",
                    "method": "GET",
                    "headers": {
                        "X-Login": "JohnDoe",
                        "X-Password": "TopSecret"
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-ApiToken": {
                            "response": "data"
                        }
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/129-login-auth-scalar/login.requestHeaders
================================================
X-Login: JohnDoe
X-Password: TopSecret

================================================
File: /doc/examples/129-login-auth-scalar/login.request
================================================
GET /129-login-auth-scalar/login

================================================
File: /doc/examples/012-deeply-nested-object/_sample_out/mock-server.users_contacts
================================================
"type","properties_street","properties_city","properties_address","properties_state","properties_number","primary","JSON_parentId"
"address","Elm Street","New York","","","","","users_8505d6585e28c00d461ba64f085d1055"
"email","","","john.doe@example.com","","","1","users_8505d6585e28c00d461ba64f085d1055"
"address","Bates Street","Chicago","","USA","","","users_ec8c48efecb10334072f03a860113ea2"
"phone","","","","","123 456 789","1","users_ec8c48efecb10334072f03a860113ea2"


================================================
File: /doc/examples/012-deeply-nested-object/_sample_out/mock-server.users
================================================
"id","name","contacts"
"123","John Doe","users_8505d6585e28c00d461ba64f085d1055"
"234","Jane Doe","users_ec8c48efecb10334072f03a860113ea2"


================================================
File: /doc/examples/012-deeply-nested-object/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/012-deeply-nested-object/_sample_out/mock-server.users_contacts.manifest
================================================
{"destination":"in.c-mock-server.users_contacts","incremental":false}

================================================
File: /doc/examples/012-deeply-nested-object/users.request
================================================
GET /012-deeply-nested-object/users

================================================
File: /doc/examples/012-deeply-nested-object/users.response
================================================
{
    "members": [
        {
            "id": 123,
            "name": "John Doe",
            "contacts": [
                {
                    "type": "address",
                    "properties": {
                        "street": "Elm Street",
                        "city": "New York"
                    }
                },
                {
                    "type": "email",
                    "primary": true,
                    "properties": {
                        "address": "john.doe@example.com"
                    }
                }
            ]
        },
        {
            "id": 234,
            "name": "Jane Doe",
            "contacts": [
                {
                    "type": "address",
                    "primary": false,
                    "properties": {
                        "street": "Bates Street",
                        "city": "Chicago",
                        "state": "USA"
                    }
                },
                {
                    "type": "phone",
                    "primary": true,
                    "properties": {
                        "number": "123 456 789"
                    }
                }
            ]
        }
    ]
}


================================================
File: /doc/examples/012-deeply-nested-object/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/012-deeply-nested-object/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/074-http-headers/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/074-http-headers/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/074-http-headers/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/040-required-headers/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "http": {
                "headers": {
                    "X-AppKey": "ThisIsSecret"
                }
            },
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/070-mapping-tables-nested-direct-pk/_sample_out/mock-server.primary-address
================================================
"street","country","users_pk"
"Blossom Avenue","United Kingdom","123"
"Whiteheaven Mansions","United Kingdom","234"


================================================
File: /doc/examples/070-mapping-tables-nested-direct-pk/_sample_out/mock-server.primary-address.manifest
================================================
{"destination":"in.c-mock-server.primary-address","incremental":false}

================================================
File: /doc/examples/070-mapping-tables-nested-direct-pk/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/070-mapping-tables-nested-direct-pk/_sample_out/mock-server.user-contact.manifest
================================================
{"destination":"in.c-mock-server.user-contact","incremental":false,"primary_key":["userId"]}

================================================
File: /doc/examples/070-mapping-tables-nested-direct-pk/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false,"primary_key":["id"]}

================================================
File: /doc/examples/070-mapping-tables-nested-direct-pk/_sample_out/mock-server.user-contact
================================================
"email","phone","userId"
"john.doe@example.com","987345765","123"
"jane.doe@example.com","","234"


================================================
File: /doc/examples/070-mapping-tables-nested-direct-pk/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/067-mapping-tables-nested/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id",
                            "primaryKey": true
                        }
                    },
                    "name": {
                        "type": "column",
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "contacts": {
                        "type": "table",
                        "destination": "user-contact",
                        "parentKey": {
                            "primaryKey": true,
                            "destination": "userId"
                        },
                        "tableMapping": {
                            "email": {
                                "type": "column",
                                "mapping": {
                                    "destination": "email"
                                }
                            },
                            "phone": {
                                "type": "column",
                                "mapping": {
                                    "destination": "phone"
                                }
                            }
                        }
                    },
                    "contacts.addresses.0": {
                        "type": "table",
                        "destination": "primary-address",
                        "tableMapping": {
                            "street": {
                                "type": "column",
                                "mapping": {
                                    "destination": "street"
                                }
                            },
                            "country": {
                                "type": "column",
                                "mapping": {
                                    "destination": "country"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


================================================
File: /doc/examples/034-post-request/_sample_out/mock-server.getUsers.manifest
================================================
{"destination":"in.c-mock-server.getUsers","incremental":false}

================================================
File: /doc/examples/034-post-request/_sample_out/mock-server.getUsers
================================================
"id","name","married"
"123","John Doe","1"
"234","Jane Doe",""


================================================
File: /doc/examples/034-post-request/users.request
================================================
POST /034-post-request/getUsers

[]

================================================
File: /doc/examples/034-post-request/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "married": true
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "married": false
    }
]

================================================
File: /doc/examples/034-post-request/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/034-post-request/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "getUsers",
                    "method": "POST"
                }
            ]            
        }
    }
}


================================================
File: /doc/examples/134-user-data-in-mapping/_sample_out/mock-server.users
================================================
"id","name","country"
"123","John Doe","UK"
"234","Jane Doe","UK"


================================================
File: /doc/examples/134-user-data-in-mapping/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/134-user-data-in-mapping/users.request
================================================
GET /134-user-data-in-mapping/users

================================================
File: /doc/examples/134-user-data-in-mapping/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/134-user-data-in-mapping/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/134-user-data-in-mapping/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "userData": {
                "country": "UK"
            },
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id"
                        }
                    },
                    "name": {
                        "type": "column",
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "country": {
                        "type": "user",
                        "mapping": {
                            "destination": "country"
                        }
                    }
                }
            }
        }
    }
}


================================================
File: /doc/examples/045-next-page-flag-has-more/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/045-next-page-flag-has-more/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/045-next-page-flag-has-more/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/045-next-page-flag-has-more/",
            "pagination": {
                "nextPageFlag": {
                    "field": "hasMore",
                    "stopOn": false
                },
                "method": "offset",
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/045-next-page-flag-has-more/users1.request
================================================
GET /045-next-page-flag-has-more/users?limit=2&offset=0

================================================
File: /doc/examples/045-next-page-flag-has-more/users2.request
================================================
GET /045-next-page-flag-has-more/users?limit=2&offset=2

================================================
File: /doc/examples/045-next-page-flag-has-more/users2.response
================================================
{
    "hasMore": false,
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/045-next-page-flag-has-more/users1.response
================================================
{
    "hasMore": true,
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/131-ssh-tunnel/_sample_out/mock-server-behind-proxy.users
================================================
"id","name","married"
"123","John Doe","1"
"234","Jane Doe",""


================================================
File: /doc/examples/131-ssh-tunnel/_sample_out/mock-server-behind-proxy.users.manifest
================================================
{"destination":"in.c-mock-server-behind-proxy.users","incremental":false}

================================================
File: /doc/examples/131-ssh-tunnel/users.request
================================================
GET /131-ssh-tunnel/users

================================================
File: /doc/examples/131-ssh-tunnel/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "married": true        
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "married": false
    }
]

================================================
File: /doc/examples/131-ssh-tunnel/config.json
================================================
{
    "parameters": {
        "sshProxy": {
            "host": "ssh-proxy",
            "port": 22,
            "user": "root",
            "#privateKey": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA2sE3GjSy45QYfh/2qJngHtZcKV0x9xH14TiPUWS/iNWoJBP/\nwJy15YdN2e3fW/e4wtdcwi0K86Ny5MKZDtTvdP2abUVqDnateCcT/TOFC7Jaeg9v\nnRckDQU5yuHUzuWPKkSu/zSWuogwe26f8U3bARfESFiSLZWJfuvlogFgwg5/4BEP\nGQIksN8hKnbEi5DnI5UvYBTYGDd00Dc9prftnnC/JgOjdvNhVjMa7ZOxsrGLnuDs\nIDV/zjQ5QLwBUulVHcTkzUzEXV7wAU8LqXUUz9vJlwquMk5RwIblad7tuxcOg0Iz\nnzQ4leLX2xnLUF6AopgYifrLqPjI+CkcLfQSMQIDAQABAoIBAQCdzvEfWJEMmBOr\nOQfJzWffFyjZNkALSsukNBc/0nxSDEAF9t9zZhnagWdqJa4SPHzvIknqUnAqHumN\nmcys5HPyY9j5py/BS2AM47QJ3xbFv16B24zbOIxrUC/G6m+I6hYDmhTcSmXKHuFK\nyh1cCJxLB4gz4KFjfRL5mtfHrVLN6i3Is3GwwIeuG57YoCK9mDYhaWAaXkBnbzMF\nIAxsc7+8VzyNpaqu43FOijc0BmMtv37H7U+7+v5Xf+vdYlvPAC5GwaE5H0baplaX\nLeR7hfgqvqrYeME/RHV73TmaG1n7C5bcP4WoBV0o1eTwTnu0rzB7I2pwYtc3ukxr\njqPrC87ZAoGBAPt8t7yAw+otZzrhLprOBzTXxNyKilEgWzI3+nQrClhmVGHOOCcj\nHWP1nbZbMN2E60I94wkXLegJJ+op8fa+hIs9921LbIZWxU5ipciRhsN4XoD336rh\nLf2wcg8uy94fOWWeAitaW2Y3owkv7Pp87DjzF+AduCmH0EtvaOAQ42LjAoGBAN6u\nIZdyr1oRQ3q0PXpKyF5efJID48T634c4SCDHCkAb8txj/N3dyDwzHOIFKPL6M1Zj\nZ/8p2aFk/9CoW+XyXKNIjrWqOWQwhpYT/GyS6LLpiEckjAwfB8NKn0Ylpf749YdT\nIreaHQfgPdku3Zu2IwMcahC+lGYOC+6YeD4j7r7bAoGAA6NGNR/Xtad6esuPFQYt\n7IHCgz4tygahyxQsN0n4GFdCmTeWcFp9rlh7M4wWJN4rWQX0JsmDDHw1a5m3uk3/\nNNRso9QXecn/iKa8py4TuPggxdTQE3S2aZkHzVhr8oaZGfMzLNVdxRjA7v0WfHka\nIajCi6diZpdkV/MAnV0hLOkCgYEAniZLwzT3Zt9V7oKuGvmbvrIahNVwYcjPEkkd\nqPHTzN5MqMv2nlhSSrb+b2O8xnx+E3+8L5O4dhC2QqofwntT4b+5YzpHUmnIXDRL\nlYzs6YxEdkp1kHJFYCTSY85/S0vjjT21LXKt5ZcUNfg7+cfsq9v1VHkWCjk1rjnp\nRDDe8fsCgYEAiVo3ERjlGsF5rOCLGC/UyoqRzAWlXUAAfNepOreBvIHksaKjd6n3\n51LpU+Nnyph8DEmWPaINtrh00YluGNxYmlECxe7+L3ASkpAFkoSMk4QzRcYyGX4r\n0Ql34LEcB55rtlnY7QOHDOKUzbH2Y5DcUe0dPhcxmRg4XlXkce+w2P8=\n-----END RSA PRIVATE KEY-----"
        },
        "api": {
            "baseUrl": "http://mock-server-behind-proxy:80/131-ssh-tunnel/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server-behind-proxy",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/015-skip-boolean/_sample_out/mock-server.users
================================================
"id","name","married"
"123","John Doe","1"
"234","Jane Doe",""


================================================
File: /doc/examples/015-skip-boolean/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/015-skip-boolean/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/001-simple-job/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "responseFilter": "married.some"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/114-oauth2-google/reports.response
================================================
{
  "kind": "adsense#report",
  "totalMatchedRows": 2,
  "headers": [
    {
      "name": "DATE",
      "type": "DIMENSION"
    },
    {
      "name": "AD_UNIT_ID",
      "type": "DIMENSION"
    },
    {
      "name": "AD_UNIT_NAME",
      "type": "DIMENSION"
    },
    {
      "name": "CLICKS",
      "type": "METRIC"
    },
    {
      "name": "COST_PER_CLICK",
      "type": "METRIC"
    }
  ],
  "rows": [
    ["2017-05-27","ca-pub-12345:67890","article-bot-lef-x","83008","0.0065"],
    ["2017-05-27","ca-pub-11122:33445","article-bot-mob-x","105723","0.0043"]
  ],
  "startDate": "2017-05-27",
  "endDate": "2017-05-27"
}

================================================
File: /doc/examples/114-oauth2-google/_sample_out/adsense.rows.manifest
================================================
{"destination":"in.c-adsense.rows","incremental":false}

================================================
File: /doc/examples/114-oauth2-google/_sample_out/adsense.rows
================================================
"report-rows"
"8658cb3c407bd490077720b6318380a7"


================================================
File: /doc/examples/114-oauth2-google/_sample_out/adsense.report-rows.manifest
================================================
{"destination":"in.c-adsense.report-rows","incremental":false}

================================================
File: /doc/examples/114-oauth2-google/_sample_out/adsense.report-rows
================================================
"date","unit_id","unit_name","clicks","cost_per_click","rows_pk"
"2017-05-27","ca-pub-12345:67890","article-bot-lef-x","83008","0.0065","8658cb3c407bd490077720b6318380a7"
"2017-05-27","ca-pub-11122:33445","article-bot-mob-x","105723","0.0043","8658cb3c407bd490077720b6318380a7"


================================================
File: /doc/examples/114-oauth2-google/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/114-oauth2-google/",
            "authentication": {
                "type": "oauth20.login",
                "loginRequest": {
                    "endpoint": "token",
                    "method": "FORM",
                    "params": {
                        "client_id": {
                            "consumer": "client_id"
                        },
                        "client_secret": {
                            "consumer": "client_secret"
                        },
                        "refresh_token": {
                            "user": "refresh_token"
                        },
                        "grant_type": "refresh_token"
                    }
                },
                "apiRequest": {
                    "query": {
                        "access_token": {
                            "response": "access_token"
                        }
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "adsense",
            "jobs": [
                {
                    "endpoint": "reports",
                    "dataField": ".",
                    "dataType": "rows"
                }
            ],
            "mappings": {
                "rows": {
                    "rows": {
                        "type": "table",
                        "destination": "report-rows",
                        "tableMapping": {
                            "0": {
                                "type": "column",
                                "mapping": {
                                    "destination": "date"
                                }
                            },
                            "1": {
                                "type": "column",
                                "mapping": {
                                    "destination": "unit_id"
                                }
                            },
                            "2": {
                                "type": "column",
                                "mapping": {
                                    "destination": "unit_name"
                                }
                            },
                            "3": {
                                "type": "column",
                                "mapping": {
                                    "destination": "clicks"
                                }
                            },
                            "4": {
                                "type": "column",
                                "mapping": {
                                    "destination": "cost_per_click"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "authorization": {
        "oauth_api": {
            "credentials": {
                "#data": "{\"access_token\": \"abcd01234\",\"refresh_token\": \"efgh56789\"}",
                "appKey": "clientId1234asdf",
                "#appSecret": "clientSecret5678ghjk"
            }
        }
    }
}

================================================
File: /doc/examples/114-oauth2-google/token.response
================================================
{
    "access_token": "mkoijn098uhbygv"
}

================================================
File: /doc/examples/114-oauth2-google/token.request
================================================
POST /114-oauth2-google/token

client_id=clientId1234asdf&client_secret=clientSecret5678ghjk&refresh_token=efgh56789&grant_type=refresh_token

================================================
File: /doc/examples/114-oauth2-google/reports.request
================================================
GET /114-oauth2-google/reports?access_token=mkoijn098uhbygv

================================================
File: /doc/examples/009-nested-array/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/009-nested-array/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/009-nested-array/users.request
================================================
GET /009-nested-array/users

================================================
File: /doc/examples/009-nested-array/users.response
================================================
{
    "members": [
        {
            "type": "active",
            "items": [
                {
                    "id": 123,
                    "name": "John Doe"
                },
                {
                    "id": 234,
                    "name": "Jane Doe"
                }
            ]
        },
        {
            "type": "inactive",
            "items": [
                {
                    "id": 345,
                    "name": "Jimmy Doe"
                }
            ]
        }
    ]
}


================================================
File: /doc/examples/009-nested-array/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/009-nested-array/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members.0.items"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/051-pagination-pagenum-basic/users3.response
================================================
{
    "items": []
}

================================================
File: /doc/examples/051-pagination-pagenum-basic/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/051-pagination-pagenum-basic/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/051-pagination-pagenum-basic/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/051-pagination-pagenum-basic/",
            "pagination": {
                "method": "pagenum"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/051-pagination-pagenum-basic/users1.request
================================================
GET /051-pagination-pagenum-basic/users?page=1

================================================
File: /doc/examples/051-pagination-pagenum-basic/users2.request
================================================
GET /051-pagination-pagenum-basic/users?page=2

================================================
File: /doc/examples/051-pagination-pagenum-basic/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/051-pagination-pagenum-basic/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/051-pagination-pagenum-basic/users3.request
================================================
GET /051-pagination-pagenum-basic/users?page=3

================================================
File: /doc/examples/039-default-parameters/items.response
================================================
[
    {
        "id": 123,
        "name": "Pick Axe"
    },
    {
        "id": 234,
        "name": "Giant Marshamallow"
    }
]

================================================
File: /doc/examples/039-default-parameters/_sample_out/mock-server.items
================================================
"id","name"
"123","Pick Axe"
"234","Giant Marshamallow"


================================================
File: /doc/examples/039-default-parameters/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/039-default-parameters/_sample_out/mock-server.items.manifest
================================================
{"destination":"in.c-mock-server.items","incremental":false}

================================================
File: /doc/examples/039-default-parameters/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/039-default-parameters/users.request
================================================
GET /039-default-parameters/users?account=123

================================================
File: /doc/examples/039-default-parameters/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/039-default-parameters/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/039-default-parameters/",
            "http": {
                "defaultOptions": {
                    "params": {
                        "account": 123
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                },
                {
                    "endpoint": "items"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/039-default-parameters/items.request
================================================
GET /039-default-parameters/items?account=123

================================================
File: /doc/examples/056-pagination-response-url-params-override/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/056-pagination-response-url-params-override/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/056-pagination-response-url-params-override/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/056-pagination-response-url-params-override/",
            "pagination": {
                "method": "response.url",
                "urlKey": "links.next",
                "paramIsQuery": true,
                "includeParams": true
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items",
                    "params": {
                        "account": 123,
                        "page": "start"
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/056-pagination-response-url-params-override/users1.request
================================================
GET /056-pagination-response-url-params-override/users?account=123&page=start

================================================
File: /doc/examples/056-pagination-response-url-params-override/users2.request
================================================
GET /056-pagination-response-url-params-override/users?account=123&page=2

================================================
File: /doc/examples/056-pagination-response-url-params-override/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/056-pagination-response-url-params-override/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ],
    "links": {
        "next": "?page=2"
    }
}

================================================
File: /doc/examples/111-templates-example/orders.requestHeaders
================================================
X-Api-Auth: a1b2c3d435f6

================================================
File: /doc/examples/111-templates-example/users.requestHeaders
================================================
X-Api-Auth: a1b2c3d435f6

================================================
File: /doc/examples/111-templates-example/orders.response
================================================
{
	"items": [
		{
			"order_id": 98765432,
			"price": "$42"
		},
		{
			"order_id": 23456765,
			"price": "$24"
		}
	]
}

================================================
File: /doc/examples/111-templates-example/_sample_out/mock-server.users
================================================
"id","name","modified"
"3","John Doe","2017-04-20 19:05:12"
"234","Jane Doe","2017-04-21 19:30:45"


================================================
File: /doc/examples/111-templates-example/_sample_out/mock-server.orders
================================================
"order_id","price"
"98765432","$42"
"23456765","$24"


================================================
File: /doc/examples/111-templates-example/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":true}

================================================
File: /doc/examples/111-templates-example/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":true}

================================================
File: /doc/examples/111-templates-example/orders.request
================================================
GET /111-templates-example/orders?accountId=123

================================================
File: /doc/examples/111-templates-example/users.request
================================================
GET /111-templates-example/users?accountId=123&type=active

================================================
File: /doc/examples/111-templates-example/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "modified": "2017-04-20 19:05:12"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "modified": "2017-04-21 19:30:45"
    }
]


================================================
File: /doc/examples/111-templates-example/token.requestHeaders
================================================
Authorization: Sm9obkRvZTpUb3BTZWNyZXQ=

================================================
File: /doc/examples/111-templates-example/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/111-templates-example/",
            "authentication": {
                "type": "login",
                "loginRequest": {
                    "endpoint": "token",
                    "headers": {
                        "Authorization": {
                            "function": "base64_encode",
                            "args": [
                                {
                                    "function": "concat",
                                    "args": [
                                        {
                                            "attr": "username"
                                        },
                                        ":",
                                        {
                                            "attr": "#password"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-Api-Auth": "auth.token"
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "incrementalOutput": true,
            "username": "JohnDoe",
            "#password": "TopSecret",
            "accountId": 123,
            "userType": "active",
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "params": {
                        "accountId": {
                            "attr": "accountId"
                        },
                        "type": {
                            "attr": "userType"
                        }
                    }                    
                },
                {
                    "endpoint": "orders",
                    "dataType": "orders",
                    "params": {
                        "accountId": {
                            "attr": "accountId"
                        }                        
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/111-templates-example/token.response
================================================
{
	"auth": {
		"token": "a1b2c3d435f6"
	}
}

================================================
File: /doc/examples/111-templates-example/token.request
================================================
GET /111-templates-example/token

================================================
File: /doc/examples/111-templates-example/config-original.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/111-templates-example/",
            "authentication": {
                "type": "login",
                "loginRequest": {
                    "endpoint": "token",
                    "headers": {
                        "Authorization": {
                            "function": "base64_encode",
                            "args": [
                                "JohnDoe:TopSecret"
                            ]
                        }
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-Api-Auth": "auth.token"
                    }
                }
            },
            "http": {
                "defaultOptions": {
                    "params": {
                        "accountId": 123
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "incrementalOutput": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "params": {
                        "type": "active"
                    }
                },
                {
                    "endpoint": "orders",
                    "dataType": "orders"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/042-paging-stop-same-2/users4.request
================================================
GET /042-paging-stop-same-2/users?limit=2&offset=4

================================================
File: /doc/examples/042-paging-stop-same-2/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/042-paging-stop-same-2/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/042-paging-stop-same-2/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/042-paging-stop-same-2/",
            "pagination": {
                "method": "offset",
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/042-paging-stop-same-2/users6.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/042-paging-stop-same-2/users1.request
================================================
GET /042-paging-stop-same-2/users?limit=2&offset=0

================================================
File: /doc/examples/042-paging-stop-same-2/users2.request
================================================
GET /042-paging-stop-same-2/users?limit=2&offset=2

================================================
File: /doc/examples/042-paging-stop-same-2/users2.response
================================================
[
    {
        "id": 345,
        "name": "Jimmy Doe"
    },
    {
        "id": 456,
        "name": "Jenny Doe"
    }
]

================================================
File: /doc/examples/042-paging-stop-same-2/users1.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/042-paging-stop-same-2/users4.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/042-paging-stop-same-2/users6.request
================================================
GET /042-paging-stop-same-2/users?limit=2&offset=6

================================================
File: /doc/examples/087-function-baseurl/_sample_out/mock-server.users
================================================
"id","name"
"3","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/087-function-baseurl/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/087-function-baseurl/users.request
================================================
GET /087-function-baseurl/users

================================================
File: /doc/examples/087-function-baseurl/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/087-function-baseurl/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": {
                "function": "concat",
                "args": [
                    "http://",
                    {
                        "attr": "server"
                    },
                    "/087-function-baseurl/"
                ]
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "server": "mock-server:80",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/021-basic-child-job/user234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "address": {
        "city": "St Mary Mead",
        "country": "UK",
        "street": "High Street"
    }
}

================================================
File: /doc/examples/021-basic-child-job/user234.request
================================================
GET /021-basic-child-job/user/234

================================================
File: /doc/examples/021-basic-child-job/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/021-basic-child-job/_sample_out/mock-server.user_user-id
================================================
"id","name","address_city","address_country","address_street","parent_id"
"123","John Doe","London","UK","Whitehaven Mansions","123"
"234","Jane Doe","St Mary Mead","UK","High Street","234"


================================================
File: /doc/examples/021-basic-child-job/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/021-basic-child-job/_sample_out/mock-server.user_user-id.manifest
================================================
{"destination":"in.c-mock-server.user_user-id","incremental":false}

================================================
File: /doc/examples/021-basic-child-job/users.request
================================================
GET /021-basic-child-job/users

================================================
File: /doc/examples/021-basic-child-job/user123.response
================================================
{
    "id": 123,
    "name": "John Doe",
    "address": {
        "city": "London",
        "country": "UK",
        "street": "Whitehaven Mansions"
    }
}

================================================
File: /doc/examples/021-basic-child-job/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/021-basic-child-job/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/021-basic-child-job/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/021-basic-child-job/user123.request
================================================
GET /021-basic-child-job/user/123

================================================
File: /doc/examples/047-next-page-flag-is-last/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/047-next-page-flag-is-last/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/047-next-page-flag-is-last/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/047-next-page-flag-is-last/",
            "pagination": {
                "nextPageFlag": {
                    "field": "isLast",
                    "stopOn": true,
                    "ifNotSet": false
                },
                "method": "offset",
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/047-next-page-flag-is-last/users1.request
================================================
GET /047-next-page-flag-is-last/users?limit=2&offset=0

================================================
File: /doc/examples/047-next-page-flag-is-last/users2.request
================================================
GET /047-next-page-flag-is-last/users?limit=2&offset=2

================================================
File: /doc/examples/047-next-page-flag-is-last/users2.response
================================================
{
    "isLast": "yes",
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/047-next-page-flag-is-last/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/001-simple-job/_sample_out/mock-server.users
================================================
"id","name","married"
"123","John Doe","1"
"234","Jane Doe",""


================================================
File: /doc/examples/001-simple-job/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/001-simple-job/users.request
================================================
GET /001-simple-job/users

================================================
File: /doc/examples/001-simple-job/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "married": true        
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "married": false
    }
]

================================================
File: /doc/examples/001-simple-job/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/001-simple-job/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/069-mapping-tables-nested-direct/_sample_out/mock-server.primary-address
================================================
"street","country","users_pk"
"Blossom Avenue","United Kingdom","b5d72095c441b3a3d6f23ad8142c3f8b"
"Whiteheaven Mansions","United Kingdom","5f7f2ab65a680f1a9387a8fafe6b9050"


================================================
File: /doc/examples/069-mapping-tables-nested-direct/_sample_out/mock-server.primary-address.manifest
================================================
{"destination":"in.c-mock-server.primary-address","incremental":false}

================================================
File: /doc/examples/069-mapping-tables-nested-direct/_sample_out/mock-server.users
================================================
"id","name","user-contact","primary-address"
"123","John Doe","b5d72095c441b3a3d6f23ad8142c3f8b","b5d72095c441b3a3d6f23ad8142c3f8b"
"234","Jane Doe","5f7f2ab65a680f1a9387a8fafe6b9050","5f7f2ab65a680f1a9387a8fafe6b9050"


================================================
File: /doc/examples/069-mapping-tables-nested-direct/_sample_out/mock-server.user-contact.manifest
================================================
{"destination":"in.c-mock-server.user-contact","incremental":false}

================================================
File: /doc/examples/069-mapping-tables-nested-direct/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/069-mapping-tables-nested-direct/_sample_out/mock-server.user-contact
================================================
"email","tel","users_pk"
"john.doe@example.com","987345765","b5d72095c441b3a3d6f23ad8142c3f8b"
"jane.doe@example.com","","5f7f2ab65a680f1a9387a8fafe6b9050"


================================================
File: /doc/examples/069-mapping-tables-nested-direct/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/067-mapping-tables-nested/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id"
                        }
                    },
                    "name": {
                        "type": "column",
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "contacts": {
                        "type": "table",
                        "destination": "user-contact",
                        "tableMapping": {
                            "email": {
                                "type": "column",
                                "mapping": {
                                    "destination": "email"
                                }
                            },
                            "phone": {
                                "type": "column",
                                "mapping": {
                                    "destination": "tel"
                                }
                            }
                        }
                    },
                    "contacts.addresses.0": {
                        "type": "table",
                        "destination": "primary-address",
                        "tableMapping": {
                            "street": {
                                "type": "column",
                                "mapping": {
                                    "destination": "street"
                                }
                            },
                            "country": {
                                "type": "column",
                                "mapping": {
                                    "destination": "country"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


================================================
File: /doc/examples/048-force-stop/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/048-force-stop/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/048-force-stop/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/048-force-stop/",
            "pagination": {
                "forceStop": {
                    "pages": 2,
                    "volume": 69
                },
                "method": "offset",
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/048-force-stop/users1.request
================================================
GET /048-force-stop/users?limit=2&offset=0

================================================
File: /doc/examples/048-force-stop/users2.request
================================================
GET /048-force-stop/users?limit=2&offset=2

================================================
File: /doc/examples/048-force-stop/users2.response
================================================
{
    "isLast": "yes",
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/048-force-stop/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/023-child-job-nested-id/user234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "address": {
        "city": "St Mary Mead",
        "country": "UK",
        "street": "High Street"
    }
}

================================================
File: /doc/examples/023-child-job-nested-id/user234.request
================================================
GET /023-child-job-nested-id/user/234

================================================
File: /doc/examples/023-child-job-nested-id/_sample_out/mock-server.users
================================================
"name","user-info_id","user-info_active"
"John Doe","123","1"
"Jane Doe","234",""


================================================
File: /doc/examples/023-child-job-nested-id/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/023-child-job-nested-id/_sample_out/mock-server.user-detail
================================================
"id","name","address_city","address_country","address_street","parent_user-info_id"
"123","John Doe","London","UK","Whitehaven Mansions","123"
"234","Jane Doe","St Mary Mead","UK","High Street","234"


================================================
File: /doc/examples/023-child-job-nested-id/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/023-child-job-nested-id/users.request
================================================
GET /023-child-job-nested-id/users

================================================
File: /doc/examples/023-child-job-nested-id/user123.response
================================================
{
    "id": "123",
    "name": "John Doe",
    "address": {
        "city": "London",
        "country": "UK",
        "street": "Whitehaven Mansions"
    }
}

================================================
File: /doc/examples/023-child-job-nested-id/users.response
================================================
[
    {
        "name": "John Doe",
        "user-info": {
            "id": 123,
            "active": true
        }
    },
    {
        "name": "Jane Doe",
        "user-info": {
            "id": 234,
            "active": false
        }
    }
]


================================================
File: /doc/examples/023-child-job-nested-id/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/023-child-job-nested-id/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "user-info.id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/023-child-job-nested-id/user123.request
================================================
GET /023-child-job-nested-id/user/123

================================================
File: /doc/examples/037-retry-header/users.responsecode
================================================
202

================================================
File: /doc/examples/037-retry-header/users.responseheaders
================================================
X-RetryAfter: 1

================================================
File: /doc/examples/037-retry-header/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/037-retry-header/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/037-retry-header/users.request
================================================
GET /037-retry-header/users

================================================
File: /doc/examples/037-retry-header/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/037-retry-header/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/037-retry-header/",
            "retryConfig": {
                "http": {
                    "retryHeader": "X-RetryAfter",
                    "codes": [500, 502, 503, 504, 408, 202]
                },
                "maxRetries": 3
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/067-mapping-tables-nested/_sample_out/mock-server.user-address
================================================
"street","country","user-contact_pk"
"Blossom Avenue","United Kingdom","1c439a9a39548290f7b7a4513a9224e7"
"Whiteheaven Mansions","United Kingdom","1c439a9a39548290f7b7a4513a9224e7"
"Whiteheaven Mansions","United Kingdom","605e865710f95dba665f6d0e8bc19f1a"


================================================
File: /doc/examples/067-mapping-tables-nested/_sample_out/mock-server.users
================================================
"id","name","user-contact"
"123","John Doe","b5d72095c441b3a3d6f23ad8142c3f8b"
"234","Jane Doe","5f7f2ab65a680f1a9387a8fafe6b9050"


================================================
File: /doc/examples/067-mapping-tables-nested/_sample_out/mock-server.user-contact.manifest
================================================
{"destination":"in.c-mock-server.user-contact","incremental":false}

================================================
File: /doc/examples/067-mapping-tables-nested/_sample_out/mock-server.user-address.manifest
================================================
{"destination":"in.c-mock-server.user-address","incremental":false}

================================================
File: /doc/examples/067-mapping-tables-nested/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/067-mapping-tables-nested/_sample_out/mock-server.user-contact
================================================
"email","tel","user-address","users_pk"
"john.doe@example.com","987345765","1c439a9a39548290f7b7a4513a9224e7","b5d72095c441b3a3d6f23ad8142c3f8b"
"jane.doe@example.com","","605e865710f95dba665f6d0e8bc19f1a","5f7f2ab65a680f1a9387a8fafe6b9050"


================================================
File: /doc/examples/067-mapping-tables-nested/users.request
================================================
GET /067-mapping-tables-nested/users

================================================
File: /doc/examples/067-mapping-tables-nested/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "contacts": {
            "email": "john.doe@example.com",
            "phone": "987345765",
            "addresses": [
                {
                    "street": "Blossom Avenue",
                    "country": "United Kingdom"
                },
                {
                    "street": "Whiteheaven Mansions",
                    "city": "London",
                    "country": "United Kingdom"
                }
            ]
        }
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "contacts": {
            "email": "jane.doe@example.com",
            "skype": "jane.doe",
            "addresses": [
                {
                    "street": "Whiteheaven Mansions",
                    "city": "London",
                    "country": "United Kingdom"
                }
            ]
        }
    }
]

================================================
File: /doc/examples/067-mapping-tables-nested/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/067-mapping-tables-nested/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id"
                        }
                    },
                    "name": {
                        "type": "column",
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "contacts": {
                        "type": "table",
                        "destination": "user-contact",
                        "tableMapping": {
                            "email": {
                                "type": "column",
                                "mapping": {
                                    "destination": "email"
                                }
                            },
                            "phone": {
                                "type": "column",
                                "mapping": {
                                    "destination": "tel"
                                }
                            },
                            "addresses": {
                                "type": "table",
                                "destination": "user-address",
                                "tableMapping": {
                                    "street": {
                                        "type": "column",
                                        "mapping": {
                                            "destination": "street"
                                        }
                                    },
                                    "country": {
                                        "type": "column",
                                        "mapping": {
                                            "destination": "country"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


================================================
File: /doc/examples/135-basic-child-job-array/children-a3.response
================================================
{
    "id": "a3",
    "name": "Jimmy Doe",
    "address": {
        "city": "Scaryville",
        "country": "Nowhere",
        "street": "Cemetery Lane"
    }
}

================================================
File: /doc/examples/135-basic-child-job-array/children-a1.response
================================================
{
    "id": "a1",
    "name": "John Doe",
    "address": {
        "city": "London",
        "country": "UK",
        "street": "Whitehaven Mansions"
    }
}

================================================
File: /doc/examples/135-basic-child-job-array/children-a2.response
================================================
{
    "id": "a2",
    "name": "Jane Doe",
    "address": {
        "city": "St Mary Mead",
        "country": "UK",
        "street": "High Street"
    }
}

================================================
File: /doc/examples/135-basic-child-job-array/_sample_out/mock-server.users
================================================
"id","name","children"
"123","John Doe","users_8ac477a0211569218af7651e78bc35f4"
"234","Jane Doe","users_10af8b64314f24e8e5eecc2d2f35c307"


================================================
File: /doc/examples/135-basic-child-job-array/_sample_out/mock-server.user_child-id.manifest
================================================
{"destination":"in.c-mock-server.user_child-id","incremental":false}

================================================
File: /doc/examples/135-basic-child-job-array/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/135-basic-child-job-array/_sample_out/mock-server.users_children
================================================
"data","JSON_parentId"
"a1","users_8ac477a0211569218af7651e78bc35f4"
"a2","users_8ac477a0211569218af7651e78bc35f4"
"a3","users_10af8b64314f24e8e5eecc2d2f35c307"


================================================
File: /doc/examples/135-basic-child-job-array/_sample_out/mock-server.user_child-id
================================================
"id","name","address_city","address_country","address_street","parent_children"
"a1","John Doe","London","UK","Whitehaven Mansions","a1"
"a2","Jane Doe","St Mary Mead","UK","High Street","a2"
"a3","Jimmy Doe","Scaryville","Nowhere","Cemetery Lane","a3"


================================================
File: /doc/examples/135-basic-child-job-array/_sample_out/mock-server.users_children.manifest
================================================
{"destination":"in.c-mock-server.users_children","incremental":false}

================================================
File: /doc/examples/135-basic-child-job-array/users.request
================================================
GET /135-basic-child-job-array/users

================================================
File: /doc/examples/135-basic-child-job-array/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "children": ["a1", "a2"]
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "children": ["a3"]
    }
]


================================================
File: /doc/examples/135-basic-child-job-array/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/135-basic-child-job-array/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{child-id}",
                            "dataField": ".",
                            "placeholders": {
                                "child-id": "children"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/135-basic-child-job-array/children-a3.request
================================================
GET /135-basic-child-job-array/user/a3

================================================
File: /doc/examples/135-basic-child-job-array/children-a1.request
================================================
GET /135-basic-child-job-array/user/a1

================================================
File: /doc/examples/135-basic-child-job-array/children-a2.request
================================================
GET /135-basic-child-job-array/user/a2

================================================
File: /doc/examples/063-mapping-automatic/_sample_out/mock-server.users_interests.manifest
================================================
{"destination":"in.c-mock-server.users_interests","incremental":false}

================================================
File: /doc/examples/063-mapping-automatic/_sample_out/mock-server.users
================================================
"id","name","address_street","address_country","address_city","interests"
"123","John Doe","Blossom Avenue","United Kingdom","","users_dab021748b7f93c10476ebe151de4459"
"234","Jane Doe","Whiteheaven Mansions","United Kingdom","London","users_cd4732272da7597d0ad5f35ff1d34c3d"


================================================
File: /doc/examples/063-mapping-automatic/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/063-mapping-automatic/_sample_out/mock-server.users_interests
================================================
"data","JSON_parentId"
"girls","users_dab021748b7f93c10476ebe151de4459"
"cars","users_dab021748b7f93c10476ebe151de4459"
"flowers","users_dab021748b7f93c10476ebe151de4459"
"boys","users_cd4732272da7597d0ad5f35ff1d34c3d"
"cars","users_cd4732272da7597d0ad5f35ff1d34c3d"
"flowers","users_cd4732272da7597d0ad5f35ff1d34c3d"


================================================
File: /doc/examples/063-mapping-automatic/users.request
================================================
GET /063-mapping-automatic/users

================================================
File: /doc/examples/063-mapping-automatic/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "address": {
            "street": "Blossom Avenue",
            "country": "United Kingdom"
        },
        "interests": [
            "girls", "cars", "flowers"
        ]
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "address": {
            "street": "Whiteheaven Mansions",
            "city": "London",
            "country": "United Kingdom"
        },
        "interests": [
            "boys", "cars", "flowers"
        ]
    }
]

================================================
File: /doc/examples/063-mapping-automatic/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/063-mapping-automatic/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/025-naming-conflict/user234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "parent_id": "admins",
    "address": {
        "city": "St Mary Mead",
        "country": "UK",
        "street": "High Street"
    }
}

================================================
File: /doc/examples/025-naming-conflict/user234.request
================================================
GET /025-naming-conflict/user/234

================================================
File: /doc/examples/025-naming-conflict/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/025-naming-conflict/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/025-naming-conflict/_sample_out/mock-server.user-detail
================================================
"id","name","parent_id","address_city","address_country","address_street","parent_id_u0"
"123","John Doe","admins","London","UK","Whitehaven Mansions","123"
"234","Jane Doe","admins","St Mary Mead","UK","High Street","234"


================================================
File: /doc/examples/025-naming-conflict/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/025-naming-conflict/users.request
================================================
GET /025-naming-conflict/users

================================================
File: /doc/examples/025-naming-conflict/user123.response
================================================
{
    "id": 123,
    "name": "John Doe",
    "parent_id": "admins",
    "address": {
        "city": "London",
        "country": "UK",
        "street": "Whitehaven Mansions"
    }
}

================================================
File: /doc/examples/025-naming-conflict/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/025-naming-conflict/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/025-naming-conflict/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/025-naming-conflict/user123.request
================================================
GET /025-naming-conflict/user/123

================================================
File: /doc/examples/137-mapping-tables-nested-empty/_sample_out/mock-server.user-address
================================================
"street","country","user-contact_pk"
"Blossom Avenue","United Kingdom","1c439a9a39548290f7b7a4513a9224e7"
"Whiteheaven Mansions","United Kingdom","1c439a9a39548290f7b7a4513a9224e7"
"Whiteheaven Mansions","United Kingdom","605e865710f95dba665f6d0e8bc19f1a"


================================================
File: /doc/examples/137-mapping-tables-nested-empty/_sample_out/mock-server.users
================================================
"id","name","user-contact"
"123","John Doe","b5d72095c441b3a3d6f23ad8142c3f8b"
"234","Jane Doe","5f7f2ab65a680f1a9387a8fafe6b9050"


================================================
File: /doc/examples/137-mapping-tables-nested-empty/_sample_out/mock-server.user-contact.manifest
================================================
{"destination":"in.c-mock-server.user-contact","incremental":false}

================================================
File: /doc/examples/137-mapping-tables-nested-empty/_sample_out/mock-server.user-address.manifest
================================================
{"destination":"in.c-mock-server.user-address","incremental":false}

================================================
File: /doc/examples/137-mapping-tables-nested-empty/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/137-mapping-tables-nested-empty/_sample_out/mock-server.user-contact
================================================
"email","tel","user-address","users_pk"
"john.doe@example.com","987345765","1c439a9a39548290f7b7a4513a9224e7","b5d72095c441b3a3d6f23ad8142c3f8b"
"jane.doe@example.com","","605e865710f95dba665f6d0e8bc19f1a","5f7f2ab65a680f1a9387a8fafe6b9050"


================================================
File: /doc/examples/137-mapping-tables-nested-empty/users.request
================================================
GET /137-mapping-tables-nested-empty/users

================================================
File: /doc/examples/137-mapping-tables-nested-empty/users.response
================================================
[
]

================================================
File: /doc/examples/137-mapping-tables-nested-empty/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/067-mapping-tables-nested/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id"
                        }
                    },
                    "name": {
                        "type": "column",
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "contacts": {
                        "type": "table",
                        "destination": "user-contact",
                        "tableMapping": {
                            "email": {
                                "type": "column",
                                "mapping": {
                                    "destination": "email"
                                }
                            },
                            "phone": {
                                "type": "column",
                                "mapping": {
                                    "destination": "tel"
                                }
                            },
                            "addresses": {
                                "type": "table",
                                "destination": "user-address",
                                "tableMapping": {
                                    "street": {
                                        "type": "column",
                                        "mapping": {
                                            "destination": "street"
                                        }
                                    },
                                    "country": {
                                        "type": "column",
                                        "mapping": {
                                            "destination": "country"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


================================================
File: /doc/examples/103-oauth2-bearer/users.requestHeaders
================================================
Authorization: Bearer SomeToken1234abcd567ef

================================================
File: /doc/examples/103-oauth2-bearer/_sample_out/mock-server.users
================================================
"id","name","company"
"3","John Doe","Acme Anvil 24h Service"
"234","Jane Doe","Acme Anvil Research & Development"


================================================
File: /doc/examples/103-oauth2-bearer/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/103-oauth2-bearer/users.request
================================================
GET /103-oauth2-bearer/users

================================================
File: /doc/examples/103-oauth2-bearer/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "company": "Acme Anvil 24h Service"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "company": "Acme Anvil Research & Development"
    }
]


================================================
File: /doc/examples/103-oauth2-bearer/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/103-oauth2-bearer/",
            "authentication": {
                "type": "oauth20",
                "headers": {
                    "Authorization": {
                        "function": "concat",
                        "args": [
                            "Bearer ",
                            {
                                "authorization": "data"
                            }
                        ]
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    },
    "authorization": {
        "oauth_api": {
            "credentials": {
                "#data": "SomeToken1234abcd567ef",
                "appKey": "clientId",
                "#appSecret": "clientSecret"
            }
        }
    }
}

================================================
File: /doc/examples/085-function-job-placeholders/_sample_out/mock-server.users
================================================
"id","name"
"3","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/085-function-job-placeholders/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/085-function-job-placeholders/_sample_out/mock-server.user-detail
================================================
"id","name","address_city","address_country","address_street","parent_id"
"123","John Doe","London","UK","Whitehaven Mansions","00003"
"234","Jane Doe","St Mary Mead","UK","High Street","00234"


================================================
File: /doc/examples/085-function-job-placeholders/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/085-function-job-placeholders/users.request
================================================
GET /085-function-job-placeholders/users

================================================
File: /doc/examples/085-function-job-placeholders/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/085-function-job-placeholders/user00234.request
================================================
GET /085-function-job-placeholders/user/00234

================================================
File: /doc/examples/085-function-job-placeholders/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/085-function-job-placeholders/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": {
                                    "path": "id",
                                    "function": "sprintf",
                                    "args": [
                                        "%'.05d",
                                        {
                                            "placeholder": "value"
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/085-function-job-placeholders/user00003.response
================================================
{
    "id": 123,
    "name": "John Doe",
    "address": {
        "city": "London",
        "country": "UK",
        "street": "Whitehaven Mansions"
    }
}

================================================
File: /doc/examples/085-function-job-placeholders/user00234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "address": {
        "city": "St Mary Mead",
        "country": "UK",
        "street": "High Street"
    }
}

================================================
File: /doc/examples/085-function-job-placeholders/user00003.request
================================================
GET /085-function-job-placeholders/user/00003

================================================
File: /doc/examples/090-function-job-parameters-sha1/_sample_out/mock-server.users
================================================
"id","name"
"3","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/090-function-job-parameters-sha1/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/090-function-job-parameters-sha1/users.request
================================================
POST /090-function-job-parameters-sha1/users

{"token":"64d5d2977cc2573afbd187ff5e71d1529fd7f6d8"}

================================================
File: /doc/examples/090-function-job-parameters-sha1/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/090-function-job-parameters-sha1/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/090-function-job-parameters-sha1/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "tokenValue": "NotSoSecret",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "method": "POST",
                    "params": {
                        "token": {
                            "function": "sha1",
                            "args": [
                                {
                                    "attr": "tokenValue"
                                }
                            ]
                        }
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/059-pagination-response-param-scroll-request/search.response
================================================
{
    "scroll": {
        "token": "b97d814f1a715d939f3f96bc574445de",
        "totalCount": 4
    }
}

================================================
File: /doc/examples/059-pagination-response-param-scroll-request/results1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ],
    "scroll": {
        "token": "4015e9ce43edfb0668ddaa973ebc7e87"
    }
}

================================================
File: /doc/examples/059-pagination-response-param-scroll-request/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/059-pagination-response-param-scroll-request/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/059-pagination-response-param-scroll-request/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/059-pagination-response-param-scroll-request/",
            "pagination": {
                "method": "response.param",
                "responseParam": "scroll.token",
                "queryParam": "scrollToken",
                "scrollRequest": {
                    "endpoint": "results",
                    "method": "GET"
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "search",
                    "method": "POST",
                    "dataField": "items",
                    "dataType": "users",
                    "params": {
                        "object": "users",
                        "orderBy": "id"
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/059-pagination-response-param-scroll-request/search.request
================================================
POST /059-pagination-response-param-scroll-request/search

{"object":"users","orderBy":"id"}

================================================
File: /doc/examples/059-pagination-response-param-scroll-request/results2.request
================================================
GET /059-pagination-response-param-scroll-request/results?scrollToken=4015e9ce43edfb0668ddaa973ebc7e87

================================================
File: /doc/examples/059-pagination-response-param-scroll-request/results1.request
================================================
GET /059-pagination-response-param-scroll-request/results?scrollToken=b97d814f1a715d939f3f96bc574445de

================================================
File: /doc/examples/059-pagination-response-param-scroll-request/results2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ],
    "scroll": {
    }
}

================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/accounts0.response
================================================
[
    {
        "id": 789,
        "name": "ACME Anvil Service"
    },
    {
        "id": 678,
        "name": "24h Anvil Service"
    }
]

================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/accounts0.request
================================================
GET /116-multiple-conditions-multiple-jobs/accounts?limit=2&offset=0

================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/accounts2.response
================================================
[
    {
        "id": 765,
        "name": "Best Anvil Service"
    },
    {
        "id": 654,
        "name": "Amazing Anvil Service"
    }
]

================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Janet Doe"
"456","Jimmy Doe"


================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/_sample_out/mock-server.accounts
================================================
"id","name"
"789","ACME Anvil Service"
"678","24h Anvil Service"
"765","Best Anvil Service"
"654","Amazing Anvil Service"


================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/_sample_out/mock-server.accounts.manifest
================================================
{"destination":"in.c-mock-server.accounts","incremental":false}

================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/users0.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/users0.request
================================================
GET /116-multiple-conditions-multiple-jobs/users?limit=2&offset=0

================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/116-multiple-conditions-multiple-jobs/",
            "pagination": {
                "forceStop": {
                    "pages": 2
                },
                "method": "offset",
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                },
                {
                    "endpoint": "accounts"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/users2.request
================================================
GET /116-multiple-conditions-multiple-jobs/users?limit=2&offset=2

================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/users2.response
================================================
[
    {
        "id": 345,
        "name": "Janet Doe"
    },
    {
        "id": 456,
        "name": "Jimmy Doe"
    }
]

================================================
File: /doc/examples/116-multiple-conditions-multiple-jobs/accounts2.request
================================================
GET /116-multiple-conditions-multiple-jobs/accounts?limit=2&offset=2

================================================
File: /doc/examples/100-function-login-headers/auth.requestHeaders
================================================
X-Authorization: Sm9obkRvZTpUb3BTZWNyZXQ=

================================================
File: /doc/examples/100-function-login-headers/auth.response
================================================
{
	"token": "d868d581b2f2edd09e8e7ce12c00723b3fcffb6a5d74c40eae9d94181a0bf731",
	"validUntil": "2017-20-12 12:20:17"
}

================================================
File: /doc/examples/100-function-login-headers/auth.request
================================================
GET /100-function-login-headers/auth

================================================
File: /doc/examples/100-function-login-headers/users.requestHeaders
================================================
X-Api-Token: d868d581b2f2edd09e8e7ce12c00723b3fcffb6a5d74c40eae9d94181a0bf731

================================================
File: /doc/examples/100-function-login-headers/_sample_out/mock-server.users
================================================
"id","name","company"
"3","John Doe","Acme Anvil 24h Service"
"234","Jane Doe","Acme Anvil Research & Development"


================================================
File: /doc/examples/100-function-login-headers/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/100-function-login-headers/users.request
================================================
GET /100-function-login-headers/users

================================================
File: /doc/examples/100-function-login-headers/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "company": "Acme Anvil 24h Service"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "company": "Acme Anvil Research & Development"
    }
]


================================================
File: /doc/examples/100-function-login-headers/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/100-function-login-headers/",
            "authentication": {
                "type": "login",
                "loginRequest": {
                    "endpoint": "auth",
                    "headers": {
                        "X-Authorization": {
                            "function": "base64_encode",
                            "args": [
                                {
                                    "function": "concat",
                                    "args": [
                                        {
                                            "attr": "#login"
                                        },
                                        ":",
                                        {
                                            "attr": "#password"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-Api-Token": "token"
                    }
                }
            }
        },
        "config": {
            "#login": "JohnDoe",
            "#password": "TopSecret",
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/073-mapping-forceType/config-alternative.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/063-mapping-automatic/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "responseFilter": "interests"
                }
            ],
            "mappings": {
                "users": {
                    "name": {
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id",
                            "primaryKey": true
                        }
                    },
                    "interests": {
                        "type": "column",
                        "mapping": {
                            "destination": "interests"
                        }
                    }
                }
            }
        }
    }
}


================================================
File: /doc/examples/073-mapping-forceType/_sample_out/mock-server.users
================================================
"name","id","interests"
"John Doe","123","[""girls"",""cars"",""flowers""]"
"Jane Doe","234","[""boys"",""cars"",""flowers""]"


================================================
File: /doc/examples/073-mapping-forceType/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false,"primary_key":["id"]}

================================================
File: /doc/examples/073-mapping-forceType/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/063-mapping-automatic/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "name": {
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id",
                            "primaryKey": true
                        }
                    },
                    "interests": {
                        "type": "column",
                        "mapping": {
                            "destination": "interests"
                        },
                        "forceType": true
                    }
                }
            }
        }
    }
}


================================================
File: /doc/examples/024-child-job-deeply-nested-id/user234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "address": {
        "city": "St Mary Mead",
        "country": "UK",
        "street": "High Street"
    }
}

================================================
File: /doc/examples/024-child-job-deeply-nested-id/user234.request
================================================
GET /024-child-job-deeply-nested-id/user/234

================================================
File: /doc/examples/024-child-job-deeply-nested-id/_sample_out/mock-server.users
================================================
"name","user-info_id","user-info_active"
"John Doe","123","1"
"Jane Doe","234","1"


================================================
File: /doc/examples/024-child-job-deeply-nested-id/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/024-child-job-deeply-nested-id/_sample_out/mock-server.user-detail
================================================
"id","name","address_city","address_country","address_street","parent_user-info_id"
"123","John Doe","London","UK","Whitehaven Mansions","123"
"234","Jane Doe","St Mary Mead","UK","High Street","234"


================================================
File: /doc/examples/024-child-job-deeply-nested-id/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/024-child-job-deeply-nested-id/users.request
================================================
GET /024-child-job-deeply-nested-id/users

================================================
File: /doc/examples/024-child-job-deeply-nested-id/user123.response
================================================
{
    "id": "123",
    "name": "John Doe",
    "address": {
        "city": "London",
        "country": "UK",
        "street": "Whitehaven Mansions"
    }
}

================================================
File: /doc/examples/024-child-job-deeply-nested-id/users.response
================================================
{    
    "active-users": {
        "items": [
            {
                "name": "John Doe",
                "user-info": {
                    "id": 123,
                    "active": true
                }
            },
            {
                "name": "Jane Doe",
                "user-info": {
                    "id": 234,
                    "active": true
                }
            }
        ],
        "description": "Active Users"
    },
    "inactive-users": {
        "items": [
            {
                "name": "Jimmy Doe",
                "user-info": {
                    "id": 345,
                    "active": false
                }
            }
        ],
        "description": "Inactive Users"
    }
}


================================================
File: /doc/examples/024-child-job-deeply-nested-id/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/024-child-job-deeply-nested-id/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "active-users.items",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "user-info.id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/024-child-job-deeply-nested-id/user123.request
================================================
GET /024-child-job-deeply-nested-id/user/123

================================================
File: /doc/examples/032-multiple-combined-filter/_sample_out/mock-server.users
================================================
"id","name","role","type"
"123","John Doe","parent","admin"
"234","Jane Doe","parent","administrator"
"345","Jimmy Doe","child","user"
"456","Janet Doe","child","user"


================================================
File: /doc/examples/032-multiple-combined-filter/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/032-multiple-combined-filter/_sample_out/mock-server.user-detail
================================================
"id","name","userRole","userType","description","parent_id"
"123","John Doe","parent","admin","Father John","123"
"234","Jane Doe","parent","administrator","Mother Jane","234"
"345","Jimmy Doe","child","user","Sonny Jimmy","345"


================================================
File: /doc/examples/032-multiple-combined-filter/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/032-multiple-combined-filter/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/029-simple-filter/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "recursionFilter": "role==parent|id>300&id<400",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/055-pagination-response-url-params/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/055-pagination-response-url-params/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/055-pagination-response-url-params/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/055-pagination-response-url-params/",
            "pagination": {
                "method": "response.url",
                "urlKey": "links.next",
                "includeParams": true
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items",
                    "params": {
                        "account": 123
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/055-pagination-response-url-params/users1.request
================================================
GET /055-pagination-response-url-params/users?account=123

================================================
File: /doc/examples/055-pagination-response-url-params/users2.request
================================================
GET /055-pagination-response-url-params/users?page=2&account=123

================================================
File: /doc/examples/055-pagination-response-url-params/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/055-pagination-response-url-params/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ],
    "links": {
        "next": "/055-pagination-response-url-params/users?page=2"
    }
}

================================================
File: /doc/examples/057-pagination-response-param-basic/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/057-pagination-response-param-basic/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/057-pagination-response-param-basic/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/057-pagination-response-param-basic/",
            "pagination": {
                "method": "response.param",
                "responseParam": "scrolling.next_page",
                "queryParam": "page"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/057-pagination-response-param-basic/users1.request
================================================
GET /057-pagination-response-param-basic/users

================================================
File: /doc/examples/057-pagination-response-param-basic/users2.request
================================================
GET /057-pagination-response-param-basic/users?page=2

================================================
File: /doc/examples/057-pagination-response-param-basic/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/057-pagination-response-param-basic/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ],
    "scrolling": {
        "next_page": 2
    }
}

================================================
File: /doc/examples/092-function-user-date-set-date/_sample_out/mock-server.users
================================================
"id","name","extractDate"
"3","John Doe","2017-04-20 07:56:14:000000"
"234","Jane Doe","2017-04-20 07:56:14:000000"


================================================
File: /doc/examples/092-function-user-date-set-date/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/092-function-user-date-set-date/users.request
================================================
GET /092-function-user-date-set-date/users

================================================
File: /doc/examples/092-function-user-date-set-date/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/092-function-user-date-set-date/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/092-function-user-date-set-date/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "userData": {
                "extractDate": {
                    "function": "date",
                    "args": [
                        "Y-m-d H:i:s:u",
                        1492674974
                    ]
                }
            }
        }
    }
}

================================================
File: /doc/examples/099-function-query-parameters/_sample_out/mock-server.users
================================================
"id","name","company"
"3","John Doe","Acme Anvil 24h Service"
"234","Jane Doe","Acme Anvil Research & Development"


================================================
File: /doc/examples/099-function-query-parameters/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/099-function-query-parameters/users.request
================================================
GET /099-function-query-parameters/users?tokenHash=d868d581b2f2edd09e8e7ce12c00723b3fcffb6a5d74c40eae9d94181a0bf731

================================================
File: /doc/examples/099-function-query-parameters/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "company": "Acme Anvil 24h Service"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "company": "Acme Anvil Research & Development"
    }
]


================================================
File: /doc/examples/099-function-query-parameters/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/099-function-query-parameters/",
            "authentication": {
                "type": "query",
                "query": {
                    "tokenHash": {
                        "function": "hash_hmac",
                        "args": [
                            "sha256",
                            {
                                "attr": "#api-key"
                            },
                            {
                                "attr": "#secret-key"
                            }
                        ]
                    }
                }
            }
        },
        "config": {
            "#api-key": "12345abcd5678efgh90ijk",
            "#secret-key": "TeaPot",
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/064-mapping-basic/_sample_out/mock-server.users
================================================
"country","name","id"
"United Kingdom","John Doe","123"
"United Kingdom","Jane Doe","234"


================================================
File: /doc/examples/064-mapping-basic/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false,"primary_key":["id"]}

================================================
File: /doc/examples/064-mapping-basic/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/063-mapping-automatic/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "address.country": {
                        "type": "column",
                        "mapping": {
                            "destination": "country"
                        }
                    },
                    "name": {
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id",
                            "primaryKey": true
                        }
                    }
                }
            }
        }    
    }
}


================================================
File: /doc/examples/133-ssh-tunnel-iterations-params/_sample_out/ge-tutorial.users.manifest
================================================
{"destination":"in.c-ge-tutorial.users","incremental":false}

================================================
File: /doc/examples/133-ssh-tunnel-iterations-params/_sample_out/ge-tutorial.users
================================================
"id","name","account"
"5","Jimmy Doe","345"
"6","Jenny Doe","345"
"7","Janet Doe","456"
"8","Jeremy Doe","456"


================================================
File: /doc/examples/133-ssh-tunnel-iterations-params/config.json
================================================
{
    "parameters": {
        "sshProxy": {
            "host": "ssh-proxy",
            "port": 22,
            "user": "root",
            "#privateKey": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA2sE3GjSy45QYfh/2qJngHtZcKV0x9xH14TiPUWS/iNWoJBP/\nwJy15YdN2e3fW/e4wtdcwi0K86Ny5MKZDtTvdP2abUVqDnateCcT/TOFC7Jaeg9v\nnRckDQU5yuHUzuWPKkSu/zSWuogwe26f8U3bARfESFiSLZWJfuvlogFgwg5/4BEP\nGQIksN8hKnbEi5DnI5UvYBTYGDd00Dc9prftnnC/JgOjdvNhVjMa7ZOxsrGLnuDs\nIDV/zjQ5QLwBUulVHcTkzUzEXV7wAU8LqXUUz9vJlwquMk5RwIblad7tuxcOg0Iz\nnzQ4leLX2xnLUF6AopgYifrLqPjI+CkcLfQSMQIDAQABAoIBAQCdzvEfWJEMmBOr\nOQfJzWffFyjZNkALSsukNBc/0nxSDEAF9t9zZhnagWdqJa4SPHzvIknqUnAqHumN\nmcys5HPyY9j5py/BS2AM47QJ3xbFv16B24zbOIxrUC/G6m+I6hYDmhTcSmXKHuFK\nyh1cCJxLB4gz4KFjfRL5mtfHrVLN6i3Is3GwwIeuG57YoCK9mDYhaWAaXkBnbzMF\nIAxsc7+8VzyNpaqu43FOijc0BmMtv37H7U+7+v5Xf+vdYlvPAC5GwaE5H0baplaX\nLeR7hfgqvqrYeME/RHV73TmaG1n7C5bcP4WoBV0o1eTwTnu0rzB7I2pwYtc3ukxr\njqPrC87ZAoGBAPt8t7yAw+otZzrhLprOBzTXxNyKilEgWzI3+nQrClhmVGHOOCcj\nHWP1nbZbMN2E60I94wkXLegJJ+op8fa+hIs9921LbIZWxU5ipciRhsN4XoD336rh\nLf2wcg8uy94fOWWeAitaW2Y3owkv7Pp87DjzF+AduCmH0EtvaOAQ42LjAoGBAN6u\nIZdyr1oRQ3q0PXpKyF5efJID48T634c4SCDHCkAb8txj/N3dyDwzHOIFKPL6M1Zj\nZ/8p2aFk/9CoW+XyXKNIjrWqOWQwhpYT/GyS6LLpiEckjAwfB8NKn0Ylpf749YdT\nIreaHQfgPdku3Zu2IwMcahC+lGYOC+6YeD4j7r7bAoGAA6NGNR/Xtad6esuPFQYt\n7IHCgz4tygahyxQsN0n4GFdCmTeWcFp9rlh7M4wWJN4rWQX0JsmDDHw1a5m3uk3/\nNNRso9QXecn/iKa8py4TuPggxdTQE3S2aZkHzVhr8oaZGfMzLNVdxRjA7v0WfHka\nIajCi6diZpdkV/MAnV0hLOkCgYEAniZLwzT3Zt9V7oKuGvmbvrIahNVwYcjPEkkd\nqPHTzN5MqMv2nlhSSrb+b2O8xnx+E3+8L5O4dhC2QqofwntT4b+5YzpHUmnIXDRL\nlYzs6YxEdkp1kHJFYCTSY85/S0vjjT21LXKt5ZcUNfg7+cfsq9v1VHkWCjk1rjnp\nRDDe8fsCgYEAiVo3ERjlGsF5rOCLGC/UyoqRzAWlXUAAfNepOreBvIHksaKjd6n3\n51LpU+Nnyph8DEmWPaINtrh00YluGNxYmlECxe7+L3ASkpAFkoSMk4QzRcYyGX4r\n0Ql34LEcB55rtlnY7QOHDOKUzbH2Y5DcUe0dPhcxmRg4XlXkce+w2P8=\n-----END RSA PRIVATE KEY-----"
        },
        "api": {
            "baseUrl": "http://mock-server-behind-proxy:80/133-ssh-tunnel-iterations-params/"
        },
        "config": {
            "debug": true,
            "outputBucket": "ge-tutorial",
            "userData": {
                "account": {
                    "attr": "accountId"
                }
            },
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "params": {
                        "account_id": {
                            "attr": "accountId"
                        }
                    }
                }
            ]
        },
        "iterations": [
            {
                "accountId": 345
            },
            {
                "accountId": 456
            }
        ]
    }
}


================================================
File: /doc/examples/133-ssh-tunnel-iterations-params/users1.request
================================================
GET /133-ssh-tunnel-iterations-params/users?account_id=345

================================================
File: /doc/examples/133-ssh-tunnel-iterations-params/users2.request
================================================
GET /133-ssh-tunnel-iterations-params/users?account_id=456

================================================
File: /doc/examples/133-ssh-tunnel-iterations-params/users2.response
================================================
[
    {
        "id": 7,
        "name": "Janet Doe"
    },
    {
        "id": 8,
        "name": "Jeremy Doe"
    }
]


================================================
File: /doc/examples/133-ssh-tunnel-iterations-params/users1.response
================================================
[
    {
        "id": 5,
        "name": "Jimmy Doe"
    },
    {
        "id": 6,
        "name": "Jenny Doe"
    }
]


================================================
File: /doc/examples/046-next-page-flag-has-more-2/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/046-next-page-flag-has-more-2/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/046-next-page-flag-has-more-2/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/046-next-page-flag-has-more-2/",
            "pagination": {
                "nextPageFlag": {
                    "field": "hasMore",
                    "stopOn": true,
                    "ifNotSet": false
                },
                "method": "offset",
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/046-next-page-flag-has-more-2/users1.request
================================================
GET /046-next-page-flag-has-more-2/users?limit=2&offset=0

================================================
File: /doc/examples/046-next-page-flag-has-more-2/users2.request
================================================
GET /046-next-page-flag-has-more-2/users?limit=2&offset=2

================================================
File: /doc/examples/046-next-page-flag-has-more-2/users2.response
================================================
{
    "hasMore": "no",
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/046-next-page-flag-has-more-2/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/020-setting-delimiter-complex/_sample_out/mock-server.users
================================================
"id","name","primary_address_street","primary_address_city","primary_address_tags","primary_address_state","secondary_address_street","secondary_address_city","secondary_address_tags","secondary_address_state"
"123","John Doe","Elm Street","New York","[]","","Cemetery Ridge","New York","[""work"",""usaddress""]",""
"234","Jane Doe"," Blossom Avenue","","[""home""]","U.K.","1313 Webfoot Walk","Duckburg","","Calisota"


================================================
File: /doc/examples/020-setting-delimiter-complex/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/020-setting-delimiter-complex/users.request
================================================
GET /020-setting-delimiter-complex/users

================================================
File: /doc/examples/020-setting-delimiter-complex/users.response
================================================
{
    "members": [
        {
            "id": 123,
            "name": "John Doe",
            "primary.address": {
                "street": "Elm Street",
                "city": "New York",
                "tags": []
            },
            "secondary.address": {
                "street": "Cemetery Ridge",
                "city": "New York",
                "tags": ["work", "usaddress"]
            }            
        },
        {
            "id": 234,
            "name": "Jane Doe",
            "primary.address": {
                "street": " Blossom Avenue",
                "state": "U.K.",
                "tags": ["home"]
            },
            "secondary.address": {
                "street": "1313 Webfoot Walk",
                "city": "Duckburg",
                "state": "Calisota"
            }
        }
    ]
}


================================================
File: /doc/examples/020-setting-delimiter-complex/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/020-setting-delimiter-complex/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members",
                    "responseFilter": ["secondary.address#tags", "primary.address#tags"],
                    "responseFilterDelimiter": "#"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/098-function-hmac/_sample_out/mock-server.users
================================================
"id","name","company"
"3","John Doe","Acme Anvil 24h Service"
"234","Jane Doe","Acme Anvil Research & Development"


================================================
File: /doc/examples/098-function-hmac/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/098-function-hmac/users.request
================================================
GET /098-function-hmac/users?tokenHash=d868d581b2f2edd09e8e7ce12c00723b3fcffb6a5d74c40eae9d94181a0bf731

================================================
File: /doc/examples/098-function-hmac/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "company": "Acme Anvil 24h Service"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "company": "Acme Anvil Research & Development"
    }
]


================================================
File: /doc/examples/098-function-hmac/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/098-function-hmac/"
        },
        "config": {
            "#api-key": "12345abcd5678efgh90ijk",
            "#secret-key": "TeaPot",
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "params": {
                        "tokenHash": {
                            "function": "hash_hmac",
                            "args": [
                                "sha256",
                                {
                                    "attr": "#api-key"
                                },
                                {
                                    "attr": "#secret-key"
                                }
                            ]
                        }
                    }
                }
            ]
        }
    }
}


================================================
File: /doc/examples/052-pagination-pagenum-rename/users3.response
================================================
{
    "items": []
}

================================================
File: /doc/examples/052-pagination-pagenum-rename/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/052-pagination-pagenum-rename/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/052-pagination-pagenum-rename/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/052-pagination-pagenum-rename/",
            "pagination": {
                "method": "pagenum",
                "limit": 2,
                "limitParam": "count",
                "pageParam": "set"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/052-pagination-pagenum-rename/users1.request
================================================
GET /052-pagination-pagenum-rename/users?set=1&count=2

================================================
File: /doc/examples/052-pagination-pagenum-rename/users2.request
================================================
GET /052-pagination-pagenum-rename/users?set=2&count=2

================================================
File: /doc/examples/052-pagination-pagenum-rename/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/052-pagination-pagenum-rename/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/052-pagination-pagenum-rename/users3.request
================================================
GET /052-pagination-pagenum-rename/users?set=3&count=2

================================================
File: /doc/examples/031-combined-filter/_sample_out/mock-server.users
================================================
"id","name","role","type"
"123","John Doe","parent","admin"
"234","Jane Doe","parent","administrator"
"345","Jimmy Doe","child","user"
"456","Janet Doe","child","user"


================================================
File: /doc/examples/031-combined-filter/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/031-combined-filter/_sample_out/mock-server.user-detail
================================================
"id","name","userRole","userType","description","parent_id"
"345","Jimmy Doe","child","user","Sonny Jimmy","345"


================================================
File: /doc/examples/031-combined-filter/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/031-combined-filter/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/029-simple-filter/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "recursionFilter": "id<400&role==child",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/068-mapping-tables-nested-array/_sample_out/mock-server.primary-address
================================================
"street","country","user-contact_pk"
"Blossom Avenue","United Kingdom","1c439a9a39548290f7b7a4513a9224e7"
"Whiteheaven Mansions","United Kingdom","605e865710f95dba665f6d0e8bc19f1a"


================================================
File: /doc/examples/068-mapping-tables-nested-array/_sample_out/mock-server.secondary-address.manifest
================================================
{"destination":"in.c-mock-server.secondary-address","incremental":false}

================================================
File: /doc/examples/068-mapping-tables-nested-array/_sample_out/mock-server.secondary-address
================================================
"street","country","user-contact_pk"
"Whiteheaven Mansions","United Kingdom","1c439a9a39548290f7b7a4513a9224e7"


================================================
File: /doc/examples/068-mapping-tables-nested-array/_sample_out/mock-server.primary-address.manifest
================================================
{"destination":"in.c-mock-server.primary-address","incremental":false}

================================================
File: /doc/examples/068-mapping-tables-nested-array/_sample_out/mock-server.users
================================================
"id","name","user-contact"
"123","John Doe","b5d72095c441b3a3d6f23ad8142c3f8b"
"234","Jane Doe","5f7f2ab65a680f1a9387a8fafe6b9050"


================================================
File: /doc/examples/068-mapping-tables-nested-array/_sample_out/mock-server.user-contact.manifest
================================================
{"destination":"in.c-mock-server.user-contact","incremental":false}

================================================
File: /doc/examples/068-mapping-tables-nested-array/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/068-mapping-tables-nested-array/_sample_out/mock-server.user-contact
================================================
"email","tel","primary-address","secondary-address","users_pk"
"john.doe@example.com","987345765","1c439a9a39548290f7b7a4513a9224e7","1c439a9a39548290f7b7a4513a9224e7","b5d72095c441b3a3d6f23ad8142c3f8b"
"jane.doe@example.com","","605e865710f95dba665f6d0e8bc19f1a","","5f7f2ab65a680f1a9387a8fafe6b9050"


================================================
File: /doc/examples/068-mapping-tables-nested-array/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/067-mapping-tables-nested/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id"
                        }
                    },
                    "name": {
                        "type": "column",
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "contacts": {
                        "type": "table",
                        "destination": "user-contact",
                        "tableMapping": {
                            "email": {
                                "type": "column",
                                "mapping": {
                                    "destination": "email"
                                }
                            },
                            "phone": {
                                "type": "column",
                                "mapping": {
                                    "destination": "tel"
                                }
                            },
                            "addresses.0": {
                                "type": "table",
                                "destination": "primary-address",
                                "tableMapping": {
                                    "street": {
                                        "type": "column",
                                        "mapping": {
                                            "destination": "street"
                                        }
                                    },
                                    "country": {
                                        "type": "column",
                                        "mapping": {
                                            "destination": "country"
                                        }
                                    }
                                }
                            },
                            "addresses.1": {
                                "type": "table",
                                "destination": "secondary-address",
                                "tableMapping": {
                                    "street": {
                                        "type": "column",
                                        "mapping": {
                                            "destination": "street"
                                        }
                                    },
                                    "country": {
                                        "type": "column",
                                        "mapping": {
                                            "destination": "country"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


================================================
File: /doc/examples/066-mapping-tables-basic/_sample_out/mock-server.user-interests.manifest
================================================
{"destination":"in.c-mock-server.user-interests","incremental":false}

================================================
File: /doc/examples/066-mapping-tables-basic/_sample_out/mock-server.users
================================================
"name","id","user-interests"
"John Doe","123","dab021748b7f93c10476ebe151de4459"
"Jane Doe","234","cd4732272da7597d0ad5f35ff1d34c3d"


================================================
File: /doc/examples/066-mapping-tables-basic/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/066-mapping-tables-basic/_sample_out/mock-server.user-interests
================================================
"interest","users_pk"
"girls","dab021748b7f93c10476ebe151de4459"
"cars","dab021748b7f93c10476ebe151de4459"
"flowers","dab021748b7f93c10476ebe151de4459"
"boys","cd4732272da7597d0ad5f35ff1d34c3d"
"cars","cd4732272da7597d0ad5f35ff1d34c3d"
"flowers","cd4732272da7597d0ad5f35ff1d34c3d"


================================================
File: /doc/examples/066-mapping-tables-basic/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/063-mapping-automatic/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "name": {
                        "type": "column",
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id"
                        }
                    },                
                    "interests": {
                        "type": "table",
                        "destination": "user-interests",
                        "tableMapping": {
                            ".": {
                                "type": "column",
                                "mapping": {
                                    "destination": "interest"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


================================================
File: /doc/examples/108-incremental-load-date/_sample_out/mock-server.users
================================================
"id","name","previous","modified"
"3","John Doe","","2017-04-20 19:05:12"
"234","Jane Doe","","2017-04-21 19:30:45"


================================================
File: /doc/examples/108-incremental-load-date/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":true}

================================================
File: /doc/examples/108-incremental-load-date/users.request
================================================
GET /108-incremental-load-date/users?modified_since=2017-04-19+12%3A46%3A46

================================================
File: /doc/examples/108-incremental-load-date/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "modified": "2017-04-20 19:05:12"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "modified": "2017-04-21 19:30:45"
    }
]


================================================
File: /doc/examples/108-incremental-load-date/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/108-incremental-load-date/"
        },
        "config": {
            "debug": true,
            "incrementalOutput": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "params": {
                        "modified_since": {
                            "function": "date",
                            "args": [
                                "Y-m-d H:i:s",
                                {
                                    "time": "previousStart"
                                }
                            ]
                        }
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/108-incremental-load-date/in/state.json
================================================
{
	"time": {
		"previousStart": 1492606006
	},
	"json_parser.struct": {
		"data": {
			"_users": {
				"[]": {
					"_id": {
						"nodeType": "scalar",
						"headerNames": "id"
					},
					"_name": {
						"nodeType": "scalar",
						"headerNames": "name"
					},
					"_previous": {
						"nodeType": "scalar",
						"headerNames": "previous"
					},
					"nodeType": "object",
					"headerNames": "data"
				},
				"nodeType": "array"
			}
		},
		"parent_aliases": []
	},
	"json_parser.structVersion": 3
}

================================================
File: /doc/examples/075-incremental-output/_sample_out/mock-server.users
================================================
"id","name","married"
"123","John Doe","1"
"234","Jane Doe",""


================================================
File: /doc/examples/075-incremental-output/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":true}

================================================
File: /doc/examples/075-incremental-output/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/001-simple-job/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "incrementalOutput": true,
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/036-complex-get/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/036-complex-get/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/036-complex-get/users.request
================================================
GET /036-complex-get/users?filter%5Bfield%5D=type&filter%5Boperator%5D=equal&filter%5Bvalue%5D=active&return%5Bfields%5D%5B0%5D=id&return%5Bfields%5D%5B1%5D=name

================================================
File: /doc/examples/036-complex-get/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/036-complex-get/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/036-complex-get/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "params": {
                        "filter": {
                            "field": "type",
                            "operator": "equal",
                            "value": "active"
                        },
                        "return": {
                            "fields": ["id", "name"]
                        }
                    }
                }
            ]
        }
    }
}


================================================
File: /doc/examples/054-pagination-response-url-basic/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/054-pagination-response-url-basic/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/054-pagination-response-url-basic/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/054-pagination-response-url-basic/",
            "pagination": {
                "method": "response.url",
                "urlKey": "links.next"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/054-pagination-response-url-basic/users1.request
================================================
GET /054-pagination-response-url-basic/users

================================================
File: /doc/examples/054-pagination-response-url-basic/users2.request
================================================
GET /054-pagination-response-url-basic/users?page=2

================================================
File: /doc/examples/054-pagination-response-url-basic/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ],
    "links": {
        "next": false
    }
}

================================================
File: /doc/examples/054-pagination-response-url-basic/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ],
    "links": {
        "next": "/054-pagination-response-url-basic/users?page=2"
    }
}

================================================
File: /doc/examples/112-iterations-params/_sample_out/ge-tutorial.users.manifest
================================================
{"destination":"in.c-ge-tutorial.users","incremental":false}

================================================
File: /doc/examples/112-iterations-params/_sample_out/ge-tutorial.users
================================================
"id","name","account"
"5","Jimmy Doe","345"
"6","Jenny Doe","345"
"7","Janet Doe","456"
"8","Jeremy Doe","456"


================================================
File: /doc/examples/112-iterations-params/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/112-iterations-params/"
        },
        "config": {
            "debug": true,
            "outputBucket": "ge-tutorial",
            "userData": {
                "account": {
                    "attr": "accountId"
                }
            },
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "params": {
                        "account_id": {
                            "attr": "accountId"
                        }
                    }
                }
            ]
        },
        "iterations": [
            {
                "accountId": 345
            },
            {
                "accountId": 456
            }
        ]
    }
}

================================================
File: /doc/examples/112-iterations-params/users1.request
================================================
GET /112-iterations-params/users?account_id=345

================================================
File: /doc/examples/112-iterations-params/users2.request
================================================
GET /112-iterations-params/users?account_id=456

================================================
File: /doc/examples/112-iterations-params/users2.response
================================================
[
    {
        "id": 7,
        "name": "Janet Doe"
    },
    {
        "id": 8,
        "name": "Jeremy Doe"
    }
]


================================================
File: /doc/examples/112-iterations-params/users1.response
================================================
[
    {
        "id": 5,
        "name": "Jimmy Doe"
    },
    {
        "id": 6,
        "name": "Jenny Doe"
    }
]


================================================
File: /doc/examples/078-basic-auth/users.requestHeaders
================================================
Authorization: Basic Sm9obkRvZTpzZWNyZXQ=

================================================
File: /doc/examples/078-basic-auth/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/078-basic-auth/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/078-basic-auth/users.request
================================================
GET /078-basic-auth/users

================================================
File: /doc/examples/078-basic-auth/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/078-basic-auth/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/078-basic-auth/",
            "authentication": {
                "type": "basic"
            }
        },
        "config": {
            "debug": true,
            "#username": "JohnDoe",
            "#password": "secret",
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/097-function-ifempty/config-alternative.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/097-function-ifempty/"
        },
        "config": {
            "debug": true,
            "columns": "id,name,login",
            "outputBucket": "mock-server",
            "incrementalOutput": false,
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "method": "GET",
                    "params": {
                        "showColumns": {
                            "function": "ifempty",
                            "args": [
                                {
                                    "attr": "columns"
                                },
                                "all"
                            ]
                        }
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/097-function-ifempty/_sample_out/mock-server.users
================================================
"id","name","login","shoesize"
"3","John Doe","jd","42"
"234","Jane Doe","jane","21"


================================================
File: /doc/examples/097-function-ifempty/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/097-function-ifempty/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/097-function-ifempty/"
        },
        "config": {
            "debug": true,
            "columns": "",
            "outputBucket": "mock-server",
            "incrementalOutput": false,
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "method": "GET",
                    "params": {
                        "showColumns": {
                            "function": "ifempty",
                            "args": [
                                {
                                    "attr": "columns"
                                },
                                "all"
                            ]
                        }
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/097-function-ifempty/users1.request
================================================
GET /097-function-ifempty/users?showColumns=id%2Cname%2Clogin

================================================
File: /doc/examples/097-function-ifempty/users2.request
================================================
GET /097-function-ifempty/users?showColumns=all

================================================
File: /doc/examples/097-function-ifempty/users2.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "login": "jd",
        "shoesize": 42
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "login": "jane",
        "shoesize": 21
    }
]


================================================
File: /doc/examples/097-function-ifempty/users1.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "login": "jd"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "login": "jane"
    }
]


================================================
File: /doc/examples/018-multiple-filters/_sample_out/mock-server.users_contacts
================================================
"type","properties","primary","JSON_parentId"
"address","{""street"":""Elm Street"",""city"":""New York""}","","users_19318ac6aa76a92c8d90e603f69e02f6"
"email","""john.doe@example.com""","1","users_19318ac6aa76a92c8d90e603f69e02f6"
"address","{""street"":""Bates Street"",""city"":""Chicago"",""state"":""USA""}","","users_3fdf6b12b11f85cb4eb9c34ce0322ecd"
"phone","""123 456 789""","1","users_3fdf6b12b11f85cb4eb9c34ce0322ecd"


================================================
File: /doc/examples/018-multiple-filters/_sample_out/mock-server.users
================================================
"id","name","tags","contacts"
"123","John Doe","{""items"":[""active"",""admin""]}","users_19318ac6aa76a92c8d90e603f69e02f6"
"234","Jane Doe","""none""","users_3fdf6b12b11f85cb4eb9c34ce0322ecd"


================================================
File: /doc/examples/018-multiple-filters/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/018-multiple-filters/_sample_out/mock-server.users_contacts.manifest
================================================
{"destination":"in.c-mock-server.users_contacts","incremental":false}

================================================
File: /doc/examples/018-multiple-filters/users.request
================================================
GET /018-multiple-filters/users

================================================
File: /doc/examples/018-multiple-filters/users.response
================================================
{
    "members": [
        {
            "id": 123,
            "name": "John Doe",
            "tags": {
                "items": ["active", "admin"]
            },
            "contacts": [
                {
                    "type": "address",
                    "properties": {
                        "street": "Elm Street",
                        "city": "New York"
                    }
                },
                {
                    "type": "email",
                    "primary": true,
                    "properties": "john.doe@example.com"                    
                }
            ]
        },
        {
            "id": 234,
            "name": "Jane Doe",
            "tags": "none",
            "contacts": [
                {
                    "type": "address",
                    "primary": false,
                    "properties": {
                        "street": "Bates Street",
                        "city": "Chicago",
                        "state": "USA"
                    }
                },
                {
                    "type": "phone",
                    "primary": true,
                    "properties": "123 456 789"                    
                }
            ]
        }
    ]
}


================================================
File: /doc/examples/018-multiple-filters/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/018-multiple-filters/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members",
                    "responseFilter": [
                        "contacts[].properties",
                        "tags"
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/029-simple-filter/user234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "userRole": "parent",
    "userType": "administrator",
    "description": "Mother Jane"
}

================================================
File: /doc/examples/029-simple-filter/user234.request
================================================
GET /029-simple-filter/user/234

================================================
File: /doc/examples/029-simple-filter/_sample_out/mock-server.users
================================================
"id","name","role","type"
"123","John Doe","parent","admin"
"234","Jane Doe","parent","administrator"
"345","Jimmy Doe","child","user"
"456","Janet Doe","child","user"


================================================
File: /doc/examples/029-simple-filter/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/029-simple-filter/_sample_out/mock-server.user-detail
================================================
"id","name","userRole","userType","description","parent_id"
"123","John Doe","parent","admin","Father John","123"
"234","Jane Doe","parent","administrator","Mother Jane","234"


================================================
File: /doc/examples/029-simple-filter/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/029-simple-filter/user345.response
================================================
{
    "id": 345,
    "name": "Jimmy Doe",
    "userRole": "child",
    "userType": "user",
    "description": "Sonny Jimmy"
}

================================================
File: /doc/examples/029-simple-filter/users.request
================================================
GET /029-simple-filter/users

================================================
File: /doc/examples/029-simple-filter/user123.response
================================================
{
    "id": 123,
    "name": "John Doe",
    "userRole": "parent",
    "userType": "admin",
    "description": "Father John"
}

================================================
File: /doc/examples/029-simple-filter/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "role": "parent",
        "type": "admin"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "role": "parent",
        "type": "administrator"
    },
    {
    	"id": 345,
    	"name": "Jimmy Doe",
    	"role": "child",
    	"type": "user"
    },
    {
    	"id": 456,
    	"name": "Janet Doe",
    	"role": "child",
    	"type": "user"
    }
]

================================================
File: /doc/examples/029-simple-filter/user345.request
================================================
GET /029-simple-filter/user/345

================================================
File: /doc/examples/029-simple-filter/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/029-simple-filter/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "id"
                            },
                            "recursionFilter": "role==parent"
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/029-simple-filter/user456.response
================================================
{
    "id": 456,
    "name": "Janet Doe",
    "userRole": "child",
    "userType": "user",
    "description": "Missy Jennie"
}

================================================
File: /doc/examples/029-simple-filter/user456.request
================================================
GET /029-simple-filter/user/456

================================================
File: /doc/examples/029-simple-filter/user123.request
================================================
GET /029-simple-filter/user/123

================================================
File: /doc/examples/080-login-auth-query/login.response
================================================
{
	"authentication": [
		{
			"secret": "a1b2c3d435f6"
		},
		{
			"token": {
				"id": 123
			}
		}
	]
}

================================================
File: /doc/examples/080-login-auth-query/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/080-login-auth-query/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/080-login-auth-query/users.request
================================================
GET /080-login-auth-query/users?secretKey=a1b2c3d435f6&tokenId=123

================================================
File: /doc/examples/080-login-auth-query/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/080-login-auth-query/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/080-login-auth-query/",
            "authentication": {
                "type": "login",
                "loginRequest": {
                    "endpoint": "http://mock-server/080-login-auth-query/login/form",
                    "method": "FORM",
                    "params": {
                        "username": "JohnDoe",
                        "password": "TopSecret"
                    }
                },
                "apiRequest": {
                    "query": {
                        "secretKey": {
                            "response": "authentication.0.secret"
                        },
                        "tokenId": {
                            "response": "authentication.1.token.id"
                        }
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "#username": "JohnDoe",
            "#password": "secret",
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/080-login-auth-query/login.request
================================================
POST /080-login-auth-query/login/form

username=JohnDoe&password=TopSecret

================================================
File: /doc/examples/006-simple-object/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"


================================================
File: /doc/examples/006-simple-object/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/006-simple-object/users.request
================================================
GET /006-simple-object/users

================================================
File: /doc/examples/006-simple-object/users.response
================================================
{
    "id": 123,
    "name": "John Doe"
}


================================================
File: /doc/examples/006-simple-object/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/006-simple-object/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "."
                }
            ]
        }
    }
}


================================================
File: /doc/examples/118-function-login-headers-response/auth.requestHeaders
================================================
X-Authorization: Sm9obkRvZTpUb3BTZWNyZXQ=

================================================
File: /doc/examples/118-function-login-headers-response/auth.response
================================================
{
	"authorization": {
		"token": "d868d581b2f2edd09e8e7ce12c00723b3fcffb6a5d74c40eae9d94181a0bf731",
		"validUntil": "2017-20-12 12:20:17"
	}
}

================================================
File: /doc/examples/118-function-login-headers-response/auth.request
================================================
GET /118-function-login-headers-response/auth

================================================
File: /doc/examples/118-function-login-headers-response/users.requestHeaders
================================================
X-Api-Token: a614a901d63e299c6f201a100f73cf0426d6271d

================================================
File: /doc/examples/118-function-login-headers-response/_sample_out/mock-server.users
================================================
"id","name","company"
"3","John Doe","Acme Anvil 24h Service"
"234","Jane Doe","Acme Anvil Research & Development"


================================================
File: /doc/examples/118-function-login-headers-response/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/118-function-login-headers-response/users.request
================================================
GET /118-function-login-headers-response/users

================================================
File: /doc/examples/118-function-login-headers-response/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "company": "Acme Anvil 24h Service"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "company": "Acme Anvil Research & Development"
    }
]


================================================
File: /doc/examples/118-function-login-headers-response/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/118-function-login-headers-response/",
            "authentication": {
                "type": "login",
                "loginRequest": {
                    "endpoint": "auth",
                    "headers": {
                        "X-Authorization": {
                            "function": "base64_encode",
                            "args": [
                                {
                                    "function": "concat",
                                    "args": [
                                        {
                                            "attr": "#login"
                                        },
                                        ":",
                                        {
                                            "attr": "#password"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-Api-Token": {
                            "function": "sha1",
                            "args": [
                                {
                                    "response": "authorization.token"
                                }
                            ]
                        }
                    }
                }
            }
        },
        "config": {
            "#login": "JohnDoe",
            "#password": "TopSecret",
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/126-pagination-stop-limit/users4.request
================================================
GET /126-pagination-stop-limit/users?count=2&skip=4

================================================
File: /doc/examples/126-pagination-stop-limit/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/126-pagination-stop-limit/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/126-pagination-stop-limit/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/126-pagination-stop-limit/",
            "pagination": {
                "method": "offset",
                "limitParam": "count",
                "offsetParam": "skip",
                "limit": "2",
                "limitStop": {
                    "field": "scroller.count"
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/126-pagination-stop-limit/users1.request
================================================
GET /126-pagination-stop-limit/users?count=2&skip=0

================================================
File: /doc/examples/126-pagination-stop-limit/users2.request
================================================
GET /126-pagination-stop-limit/users?count=2&skip=2

================================================
File: /doc/examples/126-pagination-stop-limit/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ],
    "scroller": {
        "count": 4,
        "offset": 2
    }
}

================================================
File: /doc/examples/126-pagination-stop-limit/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ],
    "scroller": {
        "count": 4,
        "offset": 0
    }
}

================================================
File: /doc/examples/126-pagination-stop-limit/users4.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ],
    "scroller": {
        "count": 4,
        "offset": 6
    }
}

================================================
File: /doc/examples/071-mapping-multiple-pk/_sample_out/mock-server.users
================================================
"first_name","last_name"
"John","Doe"
"Jane","Doe"


================================================
File: /doc/examples/071-mapping-multiple-pk/_sample_out/mock-server.interests
================================================
"interest","users_pk"
"girls","John,Doe"
"cars","John,Doe"
"flowers","John,Doe"
"boys","Jane,Doe"
"cars","Jane,Doe"
"flowers","Jane,Doe"


================================================
File: /doc/examples/071-mapping-multiple-pk/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false,"primary_key":["first_name","last_name"]}

================================================
File: /doc/examples/071-mapping-multiple-pk/_sample_out/mock-server.interests.manifest
================================================
{"destination":"in.c-mock-server.interests","incremental":false}

================================================
File: /doc/examples/071-mapping-multiple-pk/users.request
================================================
GET /071-mapping-multiple-pk/users

================================================
File: /doc/examples/071-mapping-multiple-pk/users.response
================================================
[
    {
        "firstName": "John",
        "lastName": "Doe",
        "interests": [
            "girls", "cars", "flowers"
        ]
    },
    {
        "firstName": "Jane",
        "lastName": "Doe",
        "interests": [
            "boys", "cars", "flowers"
        ]
    }
]

================================================
File: /doc/examples/071-mapping-multiple-pk/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/071-mapping-multiple-pk/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "firstName": {
                        "mapping": {
                            "destination": "first_name",
                            "primaryKey": true
                        }
                    },
                    "lastName": {
                        "mapping": {
                            "destination": "last_name",
                            "primaryKey": true
                        }
                    },
                    "interests": {
                        "type": "table",
                        "destination": "interests",
                        "tableMapping": {
                            ".": {
                                "type": "column",
                                "mapping": {
                                    "destination": "interest"
                                }
                            }
                        }
                    }
                }
            }
        }    
    }
}


================================================
File: /doc/examples/091-function-user-data/orders.response
================================================
{
	"items": [
		{
			"order_id": 98765432,
			"price": "$42"
		},
		{
			"order_id": 23456765,
			"price": "$24"
		}
	]
}

================================================
File: /doc/examples/091-function-user-data/_sample_out/mock-server.users
================================================
"id","name","currentDate","extractDate"
"3","John Doe","2017-04-20 15:53:50:000000","2017-04-20 15:53:50:000000"
"234","Jane Doe","2017-04-20 15:53:50:000000","2017-04-20 15:53:50:000000"


================================================
File: /doc/examples/091-function-user-data/_sample_out/mock-server.orders
================================================
"order_id","price","currentDate","extractDate"
"98765432","$42","2017-04-20 15:53:51:000000","2017-04-20 15:53:50:000000"
"23456765","$24","2017-04-20 15:53:51:000000","2017-04-20 15:53:50:000000"


================================================
File: /doc/examples/091-function-user-data/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/091-function-user-data/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":false}

================================================
File: /doc/examples/091-function-user-data/orders.request
================================================
GET /091-function-user-data/orders

================================================
File: /doc/examples/091-function-user-data/users.request
================================================
GET /091-function-user-data/users

================================================
File: /doc/examples/091-function-user-data/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/091-function-user-data/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/091-function-user-data/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                },
                {
                    "endpoint": "orders",
                    "dataType": "orders"
                }
            ],
            "userData": {
                "currentDate": {
                    "function": "date",
                    "args": [
                        "Y-m-d H:i:s:u"
                    ]
                },
                "extractDate": {
                    "function": "date",
                    "args": [
                        "Y-m-d H:i:s:u",
                        {
                            "time": "currentStart"
                        }
                    ]
                }
            }
        }
    }
}

================================================
File: /doc/examples/107-incremental-load/_sample_out/mock-server.users
================================================
"id","name","previous","modified"
"3","John Doe","","2017-04-20 19:05:12"
"234","Jane Doe","","2017-04-21 19:30:45"


================================================
File: /doc/examples/107-incremental-load/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":true}

================================================
File: /doc/examples/107-incremental-load/users.request
================================================
GET /107-incremental-load/users?modified_since=1492606006

================================================
File: /doc/examples/107-incremental-load/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "modified": "2017-04-20 19:05:12"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "modified": "2017-04-21 19:30:45"
    }
]


================================================
File: /doc/examples/107-incremental-load/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/107-incremental-load/"
        },
        "config": {
            "debug": true,
            "incrementalOutput": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "params": {
                        "modified_since": {
                            "time": "previousStart"
                        }
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/107-incremental-load/in/state.json
================================================
{
	"time": {
		"previousStart": 1492606006
	},
	"json_parser.struct": {
		"data": {
			"_users": {
				"[]": {
					"_id": {
						"nodeType": "scalar",
						"headerNames": "id"
					},
					"_name": {
						"nodeType": "scalar",
						"headerNames": "name"
					},
					"_previous": {
						"nodeType": "scalar",
						"headerNames": "previous"
					},
					"nodeType": "object",
					"headerNames": "data"
				},
				"nodeType": "array"
			}
		},
		"parent_aliases": []
	},
	"json_parser.structVersion": 3
}

================================================
File: /doc/examples/004-array-in-nested-object/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/004-array-in-nested-object/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/004-array-in-nested-object/users.request
================================================
GET /004-array-in-nested-object/users

================================================
File: /doc/examples/004-array-in-nested-object/users.response
================================================
{
    "members": {
        "active": [
            {
                "id": 123,
                "name": "John Doe"
            },
            {
                "id": 234,
                "name": "Jane Doe"
            }
        ],
        "inactive": [
            {
                "id": 345,
                "name": "Jimmy Doe"
            }
        ]
    }
}


================================================
File: /doc/examples/004-array-in-nested-object/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/004-array-in-nested-object/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members.active"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/143-aws-signature-request/users.requestHeaders
================================================
Authorization: *

================================================
File: /doc/examples/143-aws-signature-request/_sample_out/mock-server.users
================================================
"id","name","married"
"123","John Doe","1"
"234","Jane Doe",""


================================================
File: /doc/examples/143-aws-signature-request/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/143-aws-signature-request/users.request
================================================
GET /143-aws-signature-request/users

================================================
File: /doc/examples/143-aws-signature-request/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "married": true        
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "married": false
    }
]

================================================
File: /doc/examples/143-aws-signature-request/config.json
================================================
{
    "parameters": {
        "aws": {
            "signature": {
                "credentials": {
                    "accessKeyId": "testAccessKey",
                    "#secretKey": "testSecretKey",
                    "serviceName": "testService",
                    "regionName": "testRegion"
                }
            }
        },
        "api": {
            "baseUrl": "http://mock-server:80/143-aws-signature-request/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/005-two-arrays-in-nested-object/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"


================================================
File: /doc/examples/005-two-arrays-in-nested-object/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/005-two-arrays-in-nested-object/users.request
================================================
GET /005-two-arrays-in-nested-object/users

================================================
File: /doc/examples/005-two-arrays-in-nested-object/users.response
================================================
{
    "members": {
        "active": [
            {
                "id": 123,
                "name": "John Doe"
            },
            {
                "id": 234,
                "name": "Jane Doe"
            }
        ],
        "inactive": [
            {
                "id": 345,
                "name": "Jimmy Doe"
            }
        ]
    }
}


================================================
File: /doc/examples/005-two-arrays-in-nested-object/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/005-two-arrays-in-nested-object/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members.active"
                },
                {
                    "endpoint": "users",
                    "dataField": "members.inactive"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/044-paging-stop-underflow-struct/users4.request
================================================
GET /044-paging-stop-underflow-struct/users?limit=2&offset=4

================================================
File: /doc/examples/044-paging-stop-underflow-struct/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/044-paging-stop-underflow-struct/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/044-paging-stop-underflow-struct/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/044-paging-stop-underflow-struct/",
            "pagination": {
                "method": "offset",
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "dataField": "results.users.items",
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/044-paging-stop-underflow-struct/users1.request
================================================
GET /044-paging-stop-underflow-struct/users?limit=2&offset=0

================================================
File: /doc/examples/044-paging-stop-underflow-struct/users2.request
================================================
GET /044-paging-stop-underflow-struct/users?limit=2&offset=2

================================================
File: /doc/examples/044-paging-stop-underflow-struct/users2.response
================================================
{
    "results": {
        "users": {
            "items": [
                {
                    "id": 345,
                    "name": "Jimmy Doe"
                },
                {
                    "id": 456,
                    "name": "Jenny Doe"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/044-paging-stop-underflow-struct/users1.response
================================================
{
    "results": {
        "users": {
            "items": [
                {
                    "id": 123,
                    "name": "John Doe"
                },
                {
                    "id": 234,
                    "name": "Jane Doe"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/044-paging-stop-underflow-struct/users4.response
================================================
{
    "results": {
        "users": {
            "items": []
        }
    }
}


================================================
File: /doc/examples/027-basic-deeper-nesting-alternative/_sample_out/mock-server.users
================================================
"userId","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/027-basic-deeper-nesting-alternative/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/027-basic-deeper-nesting-alternative/_sample_out/mock-server.user-detail
================================================
"userId","name","description","parent_userId"
"123","John Doe","Good ol' father John","123"
"234","Jane Doe","Good young mommy Jenny","234"


================================================
File: /doc/examples/027-basic-deeper-nesting-alternative/_sample_out/mock-server.orders
================================================
"orderId","price","parent_userId"
"1234","$12","123"
"1345","$1212","123"
"2345","$42","234"


================================================
File: /doc/examples/027-basic-deeper-nesting-alternative/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/027-basic-deeper-nesting-alternative/_sample_out/mock-server.order-detail
================================================
"orderId","price","timestamp","state","parent_userId","parent_orderId"
"1234","$12","2017-05-06 8:21:45","cancelled","123","1234"
"1345","$1212","2017-12-24 12:30:53","delivered","123","1345"
"2345","$42","2017-01-12 2:12:43","cancelled","234","2345"


================================================
File: /doc/examples/027-basic-deeper-nesting-alternative/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":false}

================================================
File: /doc/examples/027-basic-deeper-nesting-alternative/_sample_out/mock-server.order-detail.manifest
================================================
{"destination":"in.c-mock-server.order-detail","incremental":false}

================================================
File: /doc/examples/027-basic-deeper-nesting-alternative/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/026-basic-deeper-nesting/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "userId"
                            },
                            "children": [
                                {
                                    "endpoint": "user/{user-id}/orders",
                                    "dataType": "orders",
                                    "children": [
                                        {
                                            "endpoint": "user/{user-id}/order/{order-id}",
                                            "dataType": "order-detail",
                                            "dataField": ".",
                                            "placeholders": {
                                                "order-id": "orderId"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/065-mapping-child-jobs/user234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "address": {
        "city": "St Mary Mead",
        "country": "UK",
        "street": "High Street"
    },
    "interests": [
        "boys", "cars", "flowers"
    ]
}

================================================
File: /doc/examples/065-mapping-child-jobs/user234.request
================================================
GET /065-mapping-child-jobs/user/234

================================================
File: /doc/examples/065-mapping-child-jobs/_sample_out/mock-server.users
================================================
"name","id"
"John Doe","123"
"Jane Doe","234"


================================================
File: /doc/examples/065-mapping-child-jobs/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/065-mapping-child-jobs/_sample_out/mock-server.user-detail
================================================
"country","user_id"
"UK","123"
"UK","234"


================================================
File: /doc/examples/065-mapping-child-jobs/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/065-mapping-child-jobs/users.request
================================================
GET /065-mapping-child-jobs/users

================================================
File: /doc/examples/065-mapping-child-jobs/user123.response
================================================
{
    "id": 123,
    "name": "John Doe",
    "address": {
        "city": "London",
        "country": "UK",
        "street": "Whitehaven Mansions"
    },
    "interests": [
        "girls", "cars", "flowers"
    ]
}

================================================
File: /doc/examples/065-mapping-child-jobs/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/065-mapping-child-jobs/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/065-mapping-child-jobs/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataType": "user-detail",
                            "dataField": ".",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ],
            "mappings": {
                "users": {
                    "name": {
                        "type": "column",
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id"
                        }
                    }
                },
                "user-detail": {
                    "address.country": {
                        "type": "column",
                        "mapping": {
                            "destination": "country"
                        }
                    },
                    "parent_id": {
                        "type": "user",
                        "mapping": {
                            "destination": "user_id"
                        }
                    }
                }
            }
        }    
    }
}


================================================
File: /doc/examples/065-mapping-child-jobs/user123.request
================================================
GET /065-mapping-child-jobs/user/123

================================================
File: /doc/examples/049-pagination-offset-rename/users4.request
================================================
GET /049-pagination-offset-rename/users?count=2&skip=4

================================================
File: /doc/examples/049-pagination-offset-rename/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/049-pagination-offset-rename/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/049-pagination-offset-rename/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/049-pagination-offset-rename/",
            "pagination": {
                "method": "offset",
                "limitParam": "count",
                "offsetParam": "skip",
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/049-pagination-offset-rename/users1.request
================================================
GET /049-pagination-offset-rename/users?count=2&skip=0

================================================
File: /doc/examples/049-pagination-offset-rename/users2.request
================================================
GET /049-pagination-offset-rename/users?count=2&skip=2

================================================
File: /doc/examples/049-pagination-offset-rename/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/049-pagination-offset-rename/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/049-pagination-offset-rename/users4.response
================================================
{
    "items": []
}

================================================
File: /doc/examples/117-function-login-params-response/auth.requestHeaders
================================================
X-Authorization: Sm9obkRvZTpUb3BTZWNyZXQ=

================================================
File: /doc/examples/117-function-login-params-response/auth.response
================================================
{
	"authorization": {
		"token": "d868d581b2f2edd09e8e7ce12c00723b3fcffb6a5d74c40eae9d94181a0bf731",
		"validUntil": "2017-20-12 12:20:17"
	}
}

================================================
File: /doc/examples/117-function-login-params-response/auth.request
================================================
GET /117-function-login-params-response/auth

================================================
File: /doc/examples/117-function-login-params-response/_sample_out/mock-server.users
================================================
"id","name","company"
"3","John Doe","Acme Anvil 24h Service"
"234","Jane Doe","Acme Anvil Research & Development"


================================================
File: /doc/examples/117-function-login-params-response/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/117-function-login-params-response/users.request
================================================
GET /117-function-login-params-response/users?auth=ebcd66522c1a0c7ed710cf09206cfae46e432faa

================================================
File: /doc/examples/117-function-login-params-response/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "company": "Acme Anvil 24h Service"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "company": "Acme Anvil Research & Development"
    }
]


================================================
File: /doc/examples/117-function-login-params-response/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/117-function-login-params-response/",
            "authentication": {
                "type": "login",
                "loginRequest": {
                    "endpoint": "auth",
                    "headers": {
                        "X-Authorization": {
                            "function": "base64_encode",
                            "args": [
                                {
                                    "function": "concat",
                                    "args": [
                                        {
                                            "attr": "#login"
                                        },
                                        ":",
                                        {
                                            "attr": "#password"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "apiRequest": {
                    "query": {
                        "auth": {
                        	"function": "sha1",
                        	"args": [
                        		{
		                            "function": "concat",
		                            "args": [
		                                {
		                                    "attr": "#login"
		                                },
		                                ":",
		                                {
		                                    "response": "authorization.token"
		                                }
		                            ]
		                        }
		                    ]
                        }
                    }
                }
            }
        },
        "config": {
            "#login": "JohnDoe",
            "#password": "TopSecret",
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/040-required-headers/users.requestheaders
================================================
X-AppKey: ThisIsSecret

================================================
File: /doc/examples/040-required-headers/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/040-required-headers/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/040-required-headers/users.request
================================================
GET /040-required-headers/users

================================================
File: /doc/examples/040-required-headers/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/040-required-headers/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/040-required-headers/",
            "http": {
                "requiredHeaders": ["X-AppKey"]
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "http": {
                "headers": {
                    "X-AppKey": "ThisIsSecret"
                }
            },
            "jobs": [
                {
                    "endpoint": "users"
                }      
            ]
        }
    }
}


================================================
File: /doc/examples/011-object-with-nested-object/_sample_out/mock-server.users
================================================
"id","name","address_street","address_city","address_state"
"123","John Doe","Elm Street","New York",""
"234","Jane Doe","Bates Street","Chicago","USA"


================================================
File: /doc/examples/011-object-with-nested-object/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/011-object-with-nested-object/users.request
================================================
GET /011-object-with-nested-object/users

================================================
File: /doc/examples/011-object-with-nested-object/users.response
================================================
{
    "members": [
        {
            "id": 123,
            "name": "John Doe",
            "address": {
                "street": "Elm Street",
                "city": "New York"
            }
        },
        {
            "id": 234,
            "name": "Jane Doe",
            "address": {
                "street": "Bates Street",
                "city": "Chicago",
                "state": "USA"
            }
        }
    ]
}


================================================
File: /doc/examples/011-object-with-nested-object/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/011-object-with-nested-object/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/050-pagination-offset-override/orders1.request
================================================
GET /050-pagination-offset-override/orders?count=10&skip=0

================================================
File: /doc/examples/050-pagination-offset-override/_sample_out/mock-server.users
================================================
"id","name"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/050-pagination-offset-override/_sample_out/mock-server.orders
================================================
"id","userId","totalPrice"
"123567","234","$45"
"234567","345","$865"
"345566","234","$914"


================================================
File: /doc/examples/050-pagination-offset-override/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/050-pagination-offset-override/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":false}

================================================
File: /doc/examples/050-pagination-offset-override/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/050-pagination-offset-override/",
            "pagination": {
                "method": "offset",
                "limitParam": "count",
                "offsetParam": "skip",
                "offsetFromJob": true,
                "limit": "20"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items",
                    "params": {
                        "count": 5,
                        "skip": 2
                    }
                },
                {
                    "endpoint": "orders",
                    "dataField": "items",
                    "params": {
                        "count": 10
                    }
                }
            ]            
        }
    }
}


================================================
File: /doc/examples/050-pagination-offset-override/users2.request
================================================
GET /050-pagination-offset-override/users?count=5&skip=2

================================================
File: /doc/examples/050-pagination-offset-override/orders1.response
================================================
{
    "items": [
        {
            "id": 123567,
            "userId": 234,
            "totalPrice": "$45"
        },
        {
            "id": 234567,
            "userId": 345,
            "totalPrice": "$865"
        },
        {
            "id": 345566,
            "userId": 234,
            "totalPrice": "$914"
        }
    ]
}

================================================
File: /doc/examples/050-pagination-offset-override/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/142-https-client-cert/_sample_out/mock-server.users
================================================
"id","name","married"
"123","John Doe","1"
"234","Jane Doe",""


================================================
File: /doc/examples/142-https-client-cert/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/142-https-client-cert/users.request
================================================
GET /142-https-client-cert/users

================================================
File: /doc/examples/142-https-client-cert/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "married": true        
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "married": false
    }
]

================================================
File: /doc/examples/142-https-client-cert/https/nginx.conf.tmpl
================================================
user nginx;
worker_processes 1;
pid /var/run/nginx.pid;
daemon off;

events {
  worker_connections 1024;
  # Accept as many connections as possible.
  multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Default logging format.
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    # Logstash logging format.
    log_format logstash '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_time $http_host $http_x_forwarded_proto';

    sendfile on;
    gzip  on;

    {{ $rate := getenv "RATE_LIMIT" -}}
    {{ if ne $rate "0" -}}
    # Define a Rate Limit Policy
    # @see https://www.nginx.com/blog/rate-limiting-nginx/
    # @see http://nginx.org/en/docs/http/ngx_http_limit_req_module.html
    limit_req_zone $binary_remote_addr zone=flood:10m rate={{ $rate }}r/s;
    # Rate Limit Headers.
    # @see https://tools.ietf.org/html/rfc6585#section-4
    limit_req_status 429;
    limit_conn_status 429;
    {{ end }}

   server {
        listen 443;

        # The max body size for proxied POST and PUT requests.
        # This is most commonly a problem for file uploads.
        client_max_body_size {{ getenv "CLIENT_MAX_BODY_SIZE" }};

        # Configure SSL Certification Location
        ssl_certificate     /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/key.pem;

        # Activate SSL & Cipher algorithms.
        ssl on;
        ssl_session_cache  builtin:1000  shared:SSL:10m;
        ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
        ssl_prefer_server_ciphers on;

        # VERIFY CLIENT CERTIFICATE
        ssl_client_certificate /etc/nginx/client_ca/rootCA.crt;  # <<<<<<<<<<<<<<<<<<<<<<<<
        ssl_verify_client on;                                    # <<<<<<<<<<<<<<<<<<<<<<<<

        # Configure gzip compression for responses.
        gzip on;
        gzip_buffers 16 8k;
        gzip_comp_level 6;
        gzip_min_length 1000;
        gzip_proxied any;
        gzip_types
          text/css text/javascript text/plain text/xml
          application/javascript application/json application/hal+json
          application/x-javascript
          application/xml application/xml+rss
          {{ getenv "GZIP_APPROVED_MIME_TYPES" }};
        gzip_vary on;
        gzip_disable "MSIE [1-6]\.(?!.*SV1)";

        location / {
          root /var/www/html/public;
          # The proxy will check from the root for files to meet a given
          # request before proxying along to the node service.
          try_files $uri @service;
        }

        location @service {
            {{ if ne $rate "0" -}}
            limit_req zone=flood burst={{ getenv "RATE_LIMIT_BURST_QUEUE" }} nodelay;
            {{ end -}}

            proxy_set_header        Host              {{ getenv "UPSTREAM_DOMAIN" }};
            proxy_set_header        X-Real-IP         $remote_addr;
            proxy_set_header        X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_set_header        X-Forwarded-Host  {{ getenv "PROXY_DOMAIN"}};
            proxy_set_header        X-Forwarded-Port  443;

            proxy_pass http://{{ getenv "UPSTREAM_DOMAIN" }}:{{ getenv "UPSTREAM_PORT" "80" }};
        }
    }

    include /etc/nginx/conf.d/*.conf;
}


================================================
File: /doc/examples/142-https-client-cert/https/client_ca/rootCA.key
================================================
-----BEGIN RSA PRIVATE KEY-----
MIIJKQIBAAKCAgEA9bUAynT9NQbhP7q6gfJe+NOM3HPVgSPvyXyO/x5WVv/ExhgM
uYyzMtFV5Qy/1rqff2BslNAvSMWvyMZy79WbZxK3r4F2sk63AuVjm7+zKl0hChm9
o7xNOyMktseTKF8H3GCbe8q4CGrySKmqGC09oO9v0V5ccLOdS2ljy60UzwTldKKn
Hjcup2Yc+PV4uXUypXNOs7137WHSnm5p/PAf81YdHappjWtTUq+qh91vczNaGpXM
m/kjJLdAfpJxsZLkcEgo26azLLdurDzl1TkdcRPQX51xoavNpnYN4g3mZ11BDbqA
3hpa4SzL5KANFWsEmP05Gz2Q0w/7NfcQDKtIDJ/NaFyYUrt1R+Y44MhkOBM+jZTM
OkujLCAZ890M7QA9MAd+Jab09fJ0LGLjX4JRW62D1y0/VfjsgiovNO0OmMCnTKHr
AdgbmF2i/DG4A65CA8LARLh6PMF7KcY3z8WIA1oXR+MNo7BfdHg9kg6IKp0IRoTS
JfiAUC4fMWAfqpBqihGPIkSROpJjR9Q5kDQxpIiaUXUHEyDcy4UKbFtwOmjtt3lm
u8jU4dCcsg9l/bHh5aKHRZUaAfcPyRk73iB3MKXOHOWomJyScmfp8ciINDcX0Vby
i8FujgLSuxkVRaMMOxLWkNHu5974oLmuavP08hFQVwOH/tfEB9GuTOAcwWcCAwEA
AQKCAgApUMJNSNa67+k4WiG6cBLgLFJnT2L7UBul+bfh1iwWfPONi8W3/Zy0Utbq
qPYpGUBwnrojW85XokYosJXrFjQHZPJWJKLc4LeNWR0it11dJkPD+wgUXDlwVDx8
L5rjEvezats6OaAwaitLZJwhbJoMUbavsfpBSTKN167cNMJm/R/IOQF45zaFF3qP
slcWeEqH35fASX+8/tH3qgFQcuAsfrJuppURHpboNHmsVuPCr0PbbIz3PTFXnyjN
H7rWbSjUaI3WQXWnc0C83ZCYBf6ZYQeMzGCrGsR91SQIeuXfQ6MIt++raSsW6f1u
+Cq7Cz++qfXMStHra6iGLoEYYETA5lT5BqW7kOilGR4M+ZAigS6NHSfxGYlqCELs
HvRgleV2hfFdMwgj6Mqv3xUDUGELXt9kqvFjxL6v1Tq2EWnaF9yk1oUukEs1rQ/C
NTjQpaJ2dZG2UUPeNuDB0x8csiJcjP9+02hQ6nB2eVBgldPP2MUEhzPRgP7TGR/V
oKuv5x0Ma3LS8TNiNMFoRutiXvx12BYskZVpnB/M5+Fgw7TpyGmddPBUNTix9I7x
svTc9uB+7EIDrsogwqW+a8hi5XuNBJtB1kT6Sw+lu5Ru7LNadKb6vjx2+O9/QYV9
BYp3h1YHnJ9ifYx0ZPACLNdG5t4YWlZxka8SmamISAodbWV4QQKCAQEA/OS7eG44
mO2e2jauQLIK42YZByOSnOEVmHqn0kdCl0Tphhzl5vbjE/WqqOzDcvjLOnmtAhFS
KZlkBe5vGV4+J6T45tLDmrfVT8v61e+HwDoS/O7ch96PweTRfpoBip77D0LNTUHH
eejnY8ETN/rj5I2bPecLJilUVlygWQwHF6C9NAJUJdfs4ESD2+sdvrTXpzZpFqpY
VU7jct3PYDoMDlJTsDZP1+aoOPkWoQG3knyVnPC0/0li9E/cD8VJIDntb/VGJ2vS
CJYg8RvkXyeZ6oeurRS7NnOqLcPJo5cFNfxjyON7lHwU/CDacuXQrEy9jBXqzZAK
1LULZaJKRGsuzwKCAQEA+Lmr+IsPqpAR0mqvnKurn4Ng3FbUzvGUxZQ6/mblXNem
aibp+UtRAyNVu7VSnofGQMwySqHrIs3yeGGXLVxFXyXmYZBdtMDS7/qEujbsxejP
Oib9odRG/8wJk+IzTN25+VYb7FOclxHlOMCn84jG8H20kGleivfUWieCPcb28ZCS
OFozN/HQV0BhF+hjiU6ZS8kVoJHOjUOLhzPwZmeUuR9jcqMnVCZ2PcM9uMM985h4
hK8BMB3BvtvHFt8mYWD6ukEiKQhC/+p1cV13OTDcRgZwaTYP+d8aEzS0D2JB3vKw
G2tAbVPttU0/nON2jE2f1dHLc+6/TuE5KBC3EvAp6QKCAQBluLdznJolYUcJLP9w
RG0+xJ2CkptxgNQH7iY83a76W5y29j6/ZUU3jRRlOD7xqwNL9Q9TCpaK5wklnZ+Q
i6jil2gKqHJHdHRX0YuGq/9lobZriMSp3iri6eAeVWITWRlRLSSZU8Eh1z3jkRDi
7obmMtNj1eBVLEChMEbLKpxbs6sHFXy1cCH2n3iOaAch42nu92LT3BcF0WKJnJDC
evbId/LzqRT6mevGZuLkRmWJhZVEeEnFecZU0R6KNWfRj5ti8jyStLrZ+1EqynZU
lABEJulq8zDOmT21hNBBfgh5i5izgFUAB90FAU3881W5SHDhvRsiLjM9FcmMyvem
h5pfAoIBAQDB/6gnwudkRNzxvy7cR3Ykg8eP9NYl134Poa9l8IHjqXxufY2vWVSF
2xCqySH47rPupJZxadvKGNKPnKbaxYaCUUBhRsYgDuo4LbFKwT5qm0zO8cyQZc8/
AzlRNHSI9sRwuv4qlYikuFuOqY4WQM/Skmm83cLVJ7pk2z4Vy1OfVQEHnSsn7p9u
/pL8n9DLLxgYaW5KAJAX1OBGg3d1mEMDJX1e0+0AEMPXJqrEqtxuXLVb4FhP3FXa
9PdTWphICelmTxlC4ePIUmpqEtnELN0SbUFOftF1NtPSuR/cg+oW6Dn+GOh2najh
6a+9QhmcE4ugrfM/qK9k6fy3yFnTFqnJAoIBAQCzVkSvJOFy2+1dmsROkZNlVgA/
lH3qbFi8oOxHK/9PNZ8lrcXbkcEmJ9rG/ON646vJu9z3qctgULcQE5gall4ZyxDD
PqbmUJwggn6/gsLPO8TAiplnZrvkiqcyNu4CmkZREoQ6IX0DLeXAZuUX2ymC1u2+
pgDLTaMlJ8zszttgr9oiFJud144XdlJvdN7BJETPIy0tjE0Xy17EvtMX5gqgX5Uw
aTQ5b5h9TN3kRmv9z0NE4E1M42VeNNyGY9LUPaSZtF9U/xAN5GimCtf7kE8QP/44
ivjGT79N5sUa38PmCMbVDdq3eTDRTb9yHp9HLbf1DBfYHyBG9rV/1f8Zd/9V
-----END RSA PRIVATE KEY-----


================================================
File: /doc/examples/142-https-client-cert/https/client_ca/rootCA.crt
================================================
-----BEGIN CERTIFICATE-----
MIIFRTCCAy2gAwIBAgIUD4MUKgLvAdZ68vvHx4mJtaF2LEwwDQYJKoZIhvcNAQEL
BQAwMTEvMC0GA1UEAwwmbW9jay1zZXJ2ZXItaHR0cHMtY2xpZW50LWNlcnQtcHJv
eHktQ0EwIBcNMjIwNzIyMDk0NzAxWhgPMjE1OTA2MTQwOTQ3MDFaMDExLzAtBgNV
BAMMJm1vY2stc2VydmVyLWh0dHBzLWNsaWVudC1jZXJ0LXByb3h5LUNBMIICIjAN
BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA9bUAynT9NQbhP7q6gfJe+NOM3HPV
gSPvyXyO/x5WVv/ExhgMuYyzMtFV5Qy/1rqff2BslNAvSMWvyMZy79WbZxK3r4F2
sk63AuVjm7+zKl0hChm9o7xNOyMktseTKF8H3GCbe8q4CGrySKmqGC09oO9v0V5c
cLOdS2ljy60UzwTldKKnHjcup2Yc+PV4uXUypXNOs7137WHSnm5p/PAf81YdHapp
jWtTUq+qh91vczNaGpXMm/kjJLdAfpJxsZLkcEgo26azLLdurDzl1TkdcRPQX51x
oavNpnYN4g3mZ11BDbqA3hpa4SzL5KANFWsEmP05Gz2Q0w/7NfcQDKtIDJ/NaFyY
Urt1R+Y44MhkOBM+jZTMOkujLCAZ890M7QA9MAd+Jab09fJ0LGLjX4JRW62D1y0/
VfjsgiovNO0OmMCnTKHrAdgbmF2i/DG4A65CA8LARLh6PMF7KcY3z8WIA1oXR+MN
o7BfdHg9kg6IKp0IRoTSJfiAUC4fMWAfqpBqihGPIkSROpJjR9Q5kDQxpIiaUXUH
EyDcy4UKbFtwOmjtt3lmu8jU4dCcsg9l/bHh5aKHRZUaAfcPyRk73iB3MKXOHOWo
mJyScmfp8ciINDcX0Vbyi8FujgLSuxkVRaMMOxLWkNHu5974oLmuavP08hFQVwOH
/tfEB9GuTOAcwWcCAwEAAaNTMFEwHQYDVR0OBBYEFDYB+w+NdxjzrSs+zR5aATXc
9kZmMB8GA1UdIwQYMBaAFDYB+w+NdxjzrSs+zR5aATXc9kZmMA8GA1UdEwEB/wQF
MAMBAf8wDQYJKoZIhvcNAQELBQADggIBAH2SdwFgbVTYhYApX39cIZG3ADjEjOJZ
NiP64rvblDNRQ6ifHZFsbRhRqmH3Qd1kTTO/VqP1pFOqzuz9T+kGsMsPlKvp+6Nf
PHhtagST5iEbUdeq/Q5zRgtHxXaa934iVcfOlTgD5LfY5Poap1l/YIWAZkMCERnh
P3HpbLAvyYNgKU0PG8QC6DJtAXoFTltzh4WKJ79o63ATJ68KDqwfuNtj3DvYPQ1I
nebqYI0W0MpPVgng8qpypb8pUok71+35jF2LLkUi2fX86VYX5pj2KqR6+RtMC3F/
PE5JgksLjYJsMKvJzFYAjlomkygEE7IC2u1wte9LHEd0tUV1dq0JXe+wqMM0DCMP
S31fNLbxJCOVNMKEfMlUFgDm6yNVZMPXmdhl8mDJeoIEqzUJnUQYJUoWERYvH0n3
0FDBzrSYKzdnLpMNtlS1ild1d7gugxSyBrBq4a6uuziEqVXRcbpHDioVtJvX42PI
eHRNWLvuKvBaIvyUwQeX8xaWrr7mNMI1EVqCmbKOICGJCiXN+4o5tG6OdIwYIuq8
CF1KzBciuZqCQ2f3bcnSMb6hLZuVeCND0NJd6SQNiPWO5FtMQcRNpv+RmL7xYY+V
lZw0nzXGsebmOgqP934cWhbKafbPszuPaG9B4LeWA3tgkeZtW/MRtnawxrdEjJvh
1e81Jsy0soGV
-----END CERTIFICATE-----


================================================
File: /doc/examples/142-https-client-cert/https/ca/rootCA.key
================================================
-----BEGIN RSA PRIVATE KEY-----
MIIJKQIBAAKCAgEArUVb1LEfbAI2V7/eIhgtkMRYF0BBgCzDEZb2PyYAAXtV3boS
52NjNGh5TCE951G/LPb570P9CFiE0k+5Czqx+WRPSuX/BA4+6RLF9CSwqb5LPwyy
TJQyZfw4f6SIrfqdUo8WWVOgD+9QZdHZeYsmE1bkf7+nVD2yifHjFLqB7LFIOE5c
nSxAXi0yBnwxNl+ZVnRcgCj8er+BSggqPJN0nGm3Bx4cKbGcY9HNDoUaLapg0kPf
R12kNwcrGTdx02RgqoeuWSFKmbXCyhlletu2p4M42tB+RNkj1INt1SRRKMZ/0SXb
OUB5z/QLTLIZy8RSJ2bZEpp+bhAT6OlAhizat9BYACQHMyB3S337bgtBROMKar79
LcQ9zhZ5oNKCDWchdHA2RwViIG0jo2sUpSR9bGkNoe/wSs30HelqCaKeb03YzCrY
Hpaf57ZC9l3L3jv4xzPdkg4QGkxcdOckMn2qIbAjxKr1ko25XdKPXaUfJ9DrS7Lw
UEQZ4D/wLJf8bWAfRbQTtFlAQ7Bh6AQ0bpYlHdvHcLdLOD0uraD27sZbTNfcl+Gy
S2A818LNcl8WvH7TbNP9HrAOL2ch6E+tcovThSagAcRatJuTy8h27r33qcdYnFI+
MNzuJhBttCEXkhA+Nkkqu/1w1l6QA/Wiw/454MHuZUjUix66v1i9FbX/RBsCAwEA
AQKCAgBYsOoCgu98j91VKUcA2LNqKLaWoDNm8oKfHFDLnh3epE0dg8NtYXhEOT3t
dA6Fu1hKIdlpWbnJbdX++QPU9aRn7aqQwg24+7nD//IHuEgdeuR1T4BspmbtwR8C
Zyv3MhMZUVi1PJLv1SWoGLRi/JDu0UmBAo8aFcKvzXrY/2bFyzEWcTYC1cXU7vlu
TF+8X07T7Bf1GgWypxf81xUXkLrd3Vbsc8MirGFKzvdReVwfB9krh8Zgd1Q5PpgW
/kRrWjQI1g6uXNYcu+cLH9jL/G8Qa6DMkHAxuZwXiXbM5RwN7R07507BjXlMsrSd
+4Qswz7yIDj4xs/0cpJeZBa9F3SUTpfExJ80uPz1LUSkWf7gDsebbbDFEs7bBX9V
e89uaTL8dBn7WPVsxxr37NQZAzuEkadJ7uLCN995r5+LogtK+zl4VHgu3YmP90ez
M5fiZWhkwbGvddYmshUXpF/GPOe+UcoNX+BAhERkmNy3VC1W7o2Y356/23AAlSn+
hFkLEssac7lIXbta+Xbjtgs0lTBV4yotfiytfJ+IJwY9mddv5ZIfpBaHOAcxEfeF
51ufCEEID/lAHeIneW/kwC05ysQ2C59JcMq9Y6lj2iGkGQuVa7XTHlNoBMQ77Ozt
KQ3ZEG5m+7T+oyOMgJVDXpwE+Gpn4rUt3eWKVUz0qvDw3lFCwQKCAQEA1I5uLdR1
8ZPr98PlzBCoC416Rt2VsUd9mMTfDmMV3lKJtmk5zs+3BT+ibx5R4fHIxvwinO0O
mNfAy0C1hQ6L84v4y48JaUhW/M4qZKfVJ0QFxw0zH48s0DJxXHef7OJfUxYo3WVw
HAGlXz4dNrFe3mPcRMJxaFyahrkkl+UkArvvxEVcdf2uNFoB3CCsLhAbSVPXsUzV
25qb2rWDl4bSqq8K2EULufcVxglPin/yprrKyUMmDTDB83M1MLpyrVfmiI4V5CuU
8Puwhlj4OkPig0N3AMQh3ZMcyqs+d9NsH+XPMpWsKxHPSwB+YidSVEgdskKljrR6
xmh0HEmzwnh0MQKCAQEA0K9mTsCMjhF+21Kca04F+Sza0SIuz5vWwO9rP7IJMD5t
o+k7CibbqGR2JEVHrkPYZvzhdiwlVtfx2+WhFojArA78I562DByvmCP2VRb8axYl
Jn7j321Xd4ahKbMpS0ZDBAX/ulmoxEBA27Qm67MJzJEdvEvR3lHeflPNwW0NOzay
wflxvCD8SYsKtBMBumq7ZBk1HJDY1viBwIdwV1BV38/Aus7ETthU5YRDUV1WQt+A
p6WQfZtYZIA9I+jlV7qpzmWFnZOcht+pT6iq/WDaXWi3s3GN/xgenbYsK/ueir8A
pQdMx5goi9zIE4pQIOfyH2YGXpmNdipSQfqQrQMmCwKCAQAzHvZcy2Z6bYspEdJo
2/Cupp4sAQsJkhog7eh/u1D9IXjBiFlA5jAscPuOIgqrfs09HlLszw7dr7ZMrAl8
MN1z+8wgmQw4aA+Tybnkb4ESaofBMemDw5mRkTA2fwbVoDQw9XlqlgT6l2LAn13D
U7FvZzEI0IMaCHuZv1mPtqqMhcrKt6vfLN4C9UrROIJwqasGXcXYfJRKtsqZNWKq
xOBR8Lt4/FIvrb9s27xnoRIpC2/OK/ow3fMnrCO0zoLaMfPeD94v/FNcCgyQo0FA
Mid+TnGGm6VRdxpLnBfwFcdBfLHyhpDb4vKqJTpAPRjN8HJD90d+JOYKZgDW9Nrp
ALNhAoIBAQCPdZTSXKIDZFmd8pufVMLceg5vKJ2fkRVACxbiccTJSpFa1hIFN5NX
nsBszMerL+7LVdq0v0JoAgm9To3ADQDPB3okDo49o1a/MzG7axLZlx6w6RhD10oC
3CVcolKn8cRONsWHWO2hBD7SCnWbILiCzdvwPvsmZ4eZtojDCPHInCClIpMiblah
RBl2k35jpc3u0TlmytiWZ73jGfiLvalbM9ndUhk3zpYGNjeE7rJHRJiQJ0w+XRWV
+WaOkiNffO4Q+k+xdPFs8sLVBTGPAA79meh3Tn/8NpuNddfF4LMr1IRf7rXEnIB7
LarJbBMLnAght6R3Uf4ilpN30gW1Om3jAoIBAQCjnyF1/LDY1En6tWw8q916c/2L
iZmZvT0Pk47XFE9MlUKqwxn1Flou7twy/8u02bbjelacm5Zw9GvkDBjdsavQfRpz
jfu7W2s9YhOhuuaLUOXYfnyWdcgLqgD6EyrcZ4LKLf8wlmZn6keMxaCnJAvTcwNa
dUMWzROoZxjsq9FwCJu0NXyJsFpERmF29B+ssh2qP5V3lLVqIVhWDx4iYKF7hHBc
hdJAjFW9c0Glv/zLEwJWX1z/xNaBAfqMHn470uAk07wwoJIeAsgPXgb9JmySmfPt
fNxRN9mHwX8m6y2nJLCitGJOoQTqlseB7DLEZSU/cAxOZNUhQQmxh8piIyUY
-----END RSA PRIVATE KEY-----


================================================
File: /doc/examples/142-https-client-cert/https/ca/rootCA.crt
================================================
-----BEGIN CERTIFICATE-----
MIIFRTCCAy2gAwIBAgIUJDrL0HeNetQg2XQ7AbXko4WLZLYwDQYJKoZIhvcNAQEL
BQAwMTEvMC0GA1UEAwwmbW9jay1zZXJ2ZXItaHR0cHMtY2xpZW50LWNlcnQtcHJv
eHktQ0EwIBcNMjIwNzIyMDk0NzAwWhgPMjE1OTA2MTQwOTQ3MDBaMDExLzAtBgNV
BAMMJm1vY2stc2VydmVyLWh0dHBzLWNsaWVudC1jZXJ0LXByb3h5LUNBMIICIjAN
BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEArUVb1LEfbAI2V7/eIhgtkMRYF0BB
gCzDEZb2PyYAAXtV3boS52NjNGh5TCE951G/LPb570P9CFiE0k+5Czqx+WRPSuX/
BA4+6RLF9CSwqb5LPwyyTJQyZfw4f6SIrfqdUo8WWVOgD+9QZdHZeYsmE1bkf7+n
VD2yifHjFLqB7LFIOE5cnSxAXi0yBnwxNl+ZVnRcgCj8er+BSggqPJN0nGm3Bx4c
KbGcY9HNDoUaLapg0kPfR12kNwcrGTdx02RgqoeuWSFKmbXCyhlletu2p4M42tB+
RNkj1INt1SRRKMZ/0SXbOUB5z/QLTLIZy8RSJ2bZEpp+bhAT6OlAhizat9BYACQH
MyB3S337bgtBROMKar79LcQ9zhZ5oNKCDWchdHA2RwViIG0jo2sUpSR9bGkNoe/w
Ss30HelqCaKeb03YzCrYHpaf57ZC9l3L3jv4xzPdkg4QGkxcdOckMn2qIbAjxKr1
ko25XdKPXaUfJ9DrS7LwUEQZ4D/wLJf8bWAfRbQTtFlAQ7Bh6AQ0bpYlHdvHcLdL
OD0uraD27sZbTNfcl+GyS2A818LNcl8WvH7TbNP9HrAOL2ch6E+tcovThSagAcRa
tJuTy8h27r33qcdYnFI+MNzuJhBttCEXkhA+Nkkqu/1w1l6QA/Wiw/454MHuZUjU
ix66v1i9FbX/RBsCAwEAAaNTMFEwHQYDVR0OBBYEFCYZgiWjGW0WJwrT8YB81N0m
pnhkMB8GA1UdIwQYMBaAFCYZgiWjGW0WJwrT8YB81N0mpnhkMA8GA1UdEwEB/wQF
MAMBAf8wDQYJKoZIhvcNAQELBQADggIBAIHoOotoj8iJCKEXei0Ph/KWrA3MnnUH
q0OQki4kX4bpOzm0+5qViwsaJgY1XFenu6A5YyBUd8cOAWlldoZ3TLX1U91CwMN6
fULwYP74Fs9d/Eq0sXA+ZuX2+Y3O/UcFEZSjNn46T0N73tT79kQQb3ddZwQaXfNl
8krzDbQev/bHQH2fX4F2dVVhRoUCywuhfU5MqDV/v/LGqkZLN7dRxVkd/9fXjhgV
MWGlECK5HuPk75sX0mUOkhx4i/bH9Sx5Vz+2YgH2ocU9MgJoiRb9kaEjE/x7gnL4
o1hfRexg8Cx2VN7WgMB5wdLnf7HuAGLAEKy/4fhBn3wl8mJDyNsEYMmTcxUHJlk9
E2VnHD/9+4+NUZh2cSQumoPTrzwmcxfMtbRNMXmc6vrJlRDTTdzqPb6Ifu9+xsle
AA2Zpj3L3BZBNg0tabgnlEpoAXXatWMCPgETMpggZSm/G0NzaoiIfE3A+tfSJmwR
hDm4xl6iz6AICEoEmWh8I/sFSQSacIKllyXfL9glVj0WrKjTzJFy4y1E0vpXY0KY
L3kxsai4zrAZ1++WBTCKZ+3vgtH+GyRBPRug+aw+80PH9qx8r5Bs/M1fTDS4xa5r
oDP8zfOs3HBhcet5To5z/eD1Nih0zh3FkiFPMlT9/9WWjjUo8bVkW8lLx7+Bbu3Z
RyIm8bObY+B2
-----END CERTIFICATE-----


================================================
File: /doc/examples/142-https-client-cert/https/client_certs/client_key.pem
================================================
-----BEGIN RSA PRIVATE KEY-----
MIIJKgIBAAKCAgEAxCtB32E3gEuFL8HAvnMLQF69iUYKSd2D08Pmj6rgA+ZlS16d
7wWsLkz9nnD9bbbSfh7EHiyYwEUmEdGghsoT0ofL+pT+lEPjqKCsZaOjZzKzNGGv
ZOLo1+/zEgI/Nf72hkrOnnB2ftYds4DHyQmaDBvLNSooPscTUTUsTaO9BFvbT8ij
FwJytgtdN94L/jyrorkM31eMtS+63wC3pYlo5FWBqXTx6AGH0buFv3UJt+3NP3gC
GzPZeNBIcR/iOyPqQqvA20WaykIGUPg9s3rpronM9XEVaiEFlnXMnI70tft9dQ0u
NiETc3Man2k6eV36UvgjjAg2cmtf0Js3b2QoamSH49a+AY/OG1Pcyw0M8jnSW0BG
dTlro5QI5vWO05uO4rvZnvy823+Hd3nsqzw97ymirGJ792EwhMxuG64h8q4DTfaP
EJRw5THuh4Jm+JGOtg20H8yGcRuDbz7ZfMPyH3Gii6pCypEzd08ll8DqbSz/SbNV
3pOJMNe+xFFyJ4mbkwDj2Q3nTx82jyVi5zNCCRBmfM1coMW8BMzB/qxU9gGgWj4H
LENVZ6qJEq2rCGlYA8OA8MYKk3Ij5ptmpSCJVjvS5UL34Q/78CPi0U0/Sa6kRBrv
3PoFUhYetK6RsaE5Ld/M5CTJtI/R/S49zN/jLtvd5Ei1WRIsV7Pg/Pgby88CAwEA
AQKCAgEAj66nZvgL8NpfyST/Cf+1pAZAiUVVz9iB8B+yxlQAFJsyYkwBHctn29nk
gaJ83VllP59FQlyj3WBIjBCgpVlpv3BbhUSQWwSGwUI+Q4vh6XqHK7zI/Pn+VfuY
a/5dUi1XX/F2+TGieTBXPNz8eFGiFXBeHKiuJZ0mlvp9Yrilf4XQUtXALuBKKPCV
7I+k9Sh3Bo7H0OaNV0CIfUJHQOYuf9/pQrc3YBmO452YTy1oWuHAzdYWpNoLVaQp
C0KxL2QU95RZg8GtqKtHeRL6DnXep0qjZrrXVo6tSxEpNxq2Pnzf3VY0HM2JM6yB
OXWXsMGW0iKR1sVFK/VdjqvBpMMVnd6tmR+8lC5DjYnqdRWeE8ME7CSHthtHvttJ
eCi/5rI7ai1ecL3SfwfsG8NwQKs0FfQM9S+cgy5KwPPcqU7gPM3q0NnWqhj/j4rp
/Ic+ZXdtHy1ccBSLj9t9qElysNLptdqsP0VHQajvlW4/5vvk3eSHRNByDKWNIZD4
qSmejmapA7BbDr3/Sq3HJuLKoQl23hyb2b3k1QSa+4yXouRFwVqaCt+5rIYjVBJW
hfXLz5rVg7ONCaCTIom6rDE4oaQTnLYW7apZyg32AC7Swhuijggrg5RcSjJzsJuL
UIRSCLY2wOpbCe7iNpzWauVBpyI4TLAqyPBGTuhzhzdKRq76Z4ECggEBAPEwigYU
EFTwXZG49+eMVk+WRcurCF51JH4pyYEzeSqD3i4KAxA73FOCZvNBp8FXYw8P+9nT
Q/ionS2YqfLqjUQeQAPWhgw3RVdm0vL6Esi1QzgdSKc5hUOeG2Nus+O9rJDV14cP
X/ENaJg/A/tKO2QaCxCU9/V2FYkrRjlrJvv2xOgX+bNd9zlJ5WuxinT7B1XoDNZG
JnIqObtyi2ky1qLzULpj3OGQAAM9HGfjdbS56FVER4Jc4/AS2LLfAaxylptXgVzC
6coF71lt088n2PCxwAkMR6XZcZCx4/OKVJ0I3a9M1nCltlR5icdRlAJ/0XPu3KPo
sIgbBpdfEvbFsu8CggEBANA3AFGAskt0HVzPk9/CqxOVgNMZl7I9colU57TNRYDJ
KY/CdQBbmLBL03Fo//EZgRsv0VnLECsNFlXQmzGB2Rv9nVzXeTj/i0EvMHaULXDy
KLOWXQiWwulTtqcE+WCR7GV3LqQ/qATy0KNPdlhO9i9kRbAJ/Zr2Fq1gVi3qewbr
/VSLaR+l6iBYId63xgorBVYit3ZVMLuFwsr7S+eEhTr3+F0511WnsscJRnLo2tky
YB2LBQcnfOck2ev1wIEl9wzXkav+WkoGRLAIIDLGGgAaBmE5nTUJjCfMIN4ryHH6
n8ZfHVyyuHKiOwA0P8F/virfVX2ojrvSwCRyI42v9SECggEBALb2Hk38HGOCr0hi
61PwJm1bTnjwtnmJHXTDWEO1e13gCMQd/jLrZfjHfDdd/9bv5oo/ksqrs+1GY216
WLmYai9ZTzBaJPfRWb2yl6WQRH2S23oO5NVOEiS4JIiqKrZBZU29mjCvXhVrGYQc
kXWn2yPVib07dFn1COM0O6JFAZ6zlK2HunjxeCAySWIHnUOeRfNKA6rsLi/+jir+
+niEA0Q7lWq/ZIiLhybtzcWVS+4b9P3xvNlMg/DTKyWNfCSIDG2s1Mo8ZcNF+0p4
wOtti+kSvd1fPl62c6rS91wA/KzfU+OuQyHS41xzkivsW34F3iq28RM56ehlr/tW
OPmQAWsCggEAGFr2rJHzSSQx8xNM5tWskUPhp8/MkMrjRPErkViZkrD1LZ2/deVA
/Q5Bk3iGx7sGARoc0PYR1BdZz3vxS182+DE4YQ3LXkF2Fo/giV5X2mhZHniuNTz9
W7GxIeRRD1zCXDQOvqO7kaidgxzeaQIDhhOimy7v/Vpf2LP2ILTW4z5jiaotB8iu
lE362ESC49mYbDTvZOYeJzFEUd4HSPOVagprgOwtJhXRsbqCBRr7zoA4Afyq/+U8
lQUYgKNkezbnqRbmMUo1YYdOLZElwwqtK+nfaSwGGZgeTuFvzs0sSzjXy6qAksFN
Fgun/yQdeRLqObWaGHLJD2tdkmXPhtlYQQKCAQEA2SepVZVIB2aPaU29S3T7zFWC
N2CGIRwzalRFNJbdVu8mUmpuxduCQBPkCGHMmdbkOvY5dpvRKEMp6937B0GIek+Y
dH7yMS/WmmGjL8MAlo0WxGQOy/oZdCQUMiMYobZRkdXozM7Dzb6jxaTw6XvyNiiD
0rc+H5y4G8KiAvCjMxH3ujEqUotrRrShkA8dH6K8XiVFGqqz0SFaN8xBgFDJ3ZEb
JehTnQgNdZZ7/BDx3PwdEskhXRbkWCKSVsEBfSMHeY7LVjyKWVLRqTfy9HKAN2Ns
1QuGHkxprsKPj6/tI92mcjohZX4owxe61BfWvASq6/C2h6jGajMqJRjHZgYnTA==
-----END RSA PRIVATE KEY-----


================================================
File: /doc/examples/142-https-client-cert/https/client_certs/client_csr.pem
================================================
-----BEGIN CERTIFICATE REQUEST-----
MIIEczCCAlsCAQAwLjEsMCoGA1UEAwwjbW9jay1zZXJ2ZXItaHR0cHMtY2xpZW50
LWNlcnQtcHJveHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDEK0Hf
YTeAS4UvwcC+cwtAXr2JRgpJ3YPTw+aPquAD5mVLXp3vBawuTP2ecP1tttJ+HsQe
LJjARSYR0aCGyhPSh8v6lP6UQ+OooKxlo6NnMrM0Ya9k4ujX7/MSAj81/vaGSs6e
cHZ+1h2zgMfJCZoMG8s1Kig+xxNRNSxNo70EW9tPyKMXAnK2C1033gv+PKuiuQzf
V4y1L7rfALeliWjkVYGpdPHoAYfRu4W/dQm37c0/eAIbM9l40EhxH+I7I+pCq8Db
RZrKQgZQ+D2zeumuicz1cRVqIQWWdcycjvS1+311DS42IRNzcxqfaTp5XfpS+COM
CDZya1/QmzdvZChqZIfj1r4Bj84bU9zLDQzyOdJbQEZ1OWujlAjm9Y7Tm47iu9me
/Lzbf4d3eeyrPD3vKaKsYnv3YTCEzG4briHyrgNN9o8QlHDlMe6Hgmb4kY62DbQf
zIZxG4NvPtl8w/IfcaKLqkLKkTN3TyWXwOptLP9Js1Xek4kw177EUXIniZuTAOPZ
DedPHzaPJWLnM0IJEGZ8zVygxbwEzMH+rFT2AaBaPgcsQ1VnqokSrasIaVgDw4Dw
xgqTciPmm2alIIlWO9LlQvfhD/vwI+LRTT9JrqREGu/c+gVSFh60rpGxoTkt38zk
JMm0j9H9Lj3M3+Mu293kSLVZEixXs+D8+BvLzwIDAQABoAAwDQYJKoZIhvcNAQEL
BQADggIBALVtA2ZeS3iZhXyXuLC6u/bYnQWIvzkbHvCq8tKMg/n+dKvsjahUGcGu
DAy1x1ahTEfjiHyogcrL3aAmdpI1C+X0nH0pnAz7OLwwDtGsWabRjc1apia8oqz+
YHfKztGK9DCO9+x1GejJETDarFFXc20gN4tivfPCw0G76Sw42WxjEXNITX79Y8TK
1bGwZJHjKSLGfwsFFI0MA3slhTc8TqIGLq7fgVvj5x5PDWHPS9DLbZ9uBAGlg31K
PvuWOrN/KXGQaZ2/nVpSqnd+6kWo1mwtEJJSEwLueFiYXZ1Q5zyFXapwhZWXG0S3
vvxT28tN5wOyq7z6iLCnqySxT/tN0kY+IDMhr/wWwzjCwkNoL9tNKp9Rz0OzbUs7
atgJ0+/9KUTAdSsaPpnlUPzmnTOCYEEOChZ5n38Xa6oIbzHmjmy4fuP54qwuR3/V
0iCTiezWXMV2oEkRYqPeeRjRixaQRGLmb4yJbXwDHWwtVJ4onPeVrqxLMHLb2bDe
xL8JgaqXS2tgBhnfXpMw5tmONBC8lSOPoRIsT/ZZu48nkreOtMs4NeO5Xzf2lFUH
IiJE5j4/YaoWoPxaYg0iz9E2S+6ukrVfXlRemXpr55q3d3HaZA7+ZKGPsa9Pf17T
nmsUw0W+NnTSCPm6FVCHOw8HBiqEjkcGm/DaLZTCLM4bmVgHAMem
-----END CERTIFICATE REQUEST-----


================================================
File: /doc/examples/142-https-client-cert/https/client_certs/client_cert.pem
================================================
-----BEGIN CERTIFICATE-----
MIIE1TCCAr0CAQEwDQYJKoZIhvcNAQELBQAwMTEvMC0GA1UEAwwmbW9jay1zZXJ2
ZXItaHR0cHMtY2xpZW50LWNlcnQtcHJveHktQ0EwIBcNMjIwNzIyMDk0NzA1WhgP
MjE1OTA2MTQwOTQ3MDVaMC4xLDAqBgNVBAMMI21vY2stc2VydmVyLWh0dHBzLWNs
aWVudC1jZXJ0LXByb3h5MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
xCtB32E3gEuFL8HAvnMLQF69iUYKSd2D08Pmj6rgA+ZlS16d7wWsLkz9nnD9bbbS
fh7EHiyYwEUmEdGghsoT0ofL+pT+lEPjqKCsZaOjZzKzNGGvZOLo1+/zEgI/Nf72
hkrOnnB2ftYds4DHyQmaDBvLNSooPscTUTUsTaO9BFvbT8ijFwJytgtdN94L/jyr
orkM31eMtS+63wC3pYlo5FWBqXTx6AGH0buFv3UJt+3NP3gCGzPZeNBIcR/iOyPq
QqvA20WaykIGUPg9s3rpronM9XEVaiEFlnXMnI70tft9dQ0uNiETc3Man2k6eV36
UvgjjAg2cmtf0Js3b2QoamSH49a+AY/OG1Pcyw0M8jnSW0BGdTlro5QI5vWO05uO
4rvZnvy823+Hd3nsqzw97ymirGJ792EwhMxuG64h8q4DTfaPEJRw5THuh4Jm+JGO
tg20H8yGcRuDbz7ZfMPyH3Gii6pCypEzd08ll8DqbSz/SbNV3pOJMNe+xFFyJ4mb
kwDj2Q3nTx82jyVi5zNCCRBmfM1coMW8BMzB/qxU9gGgWj4HLENVZ6qJEq2rCGlY
A8OA8MYKk3Ij5ptmpSCJVjvS5UL34Q/78CPi0U0/Sa6kRBrv3PoFUhYetK6RsaE5
Ld/M5CTJtI/R/S49zN/jLtvd5Ei1WRIsV7Pg/Pgby88CAwEAATANBgkqhkiG9w0B
AQsFAAOCAgEAcY01xrWd8yRW2aZUpfdhxSPAI1mD/56+sv0fci2h39wfZF8lJkTb
PSEiFfVIUlvo7In0/DaGv4qRyRQJAU7WCLR12MYDZuuzSK54v/3tbzr/RnUrdTHM
qN4ZUqfqhXLKWY+gw/NrT4QkAqpOvOByYSB/NueumXLKm/iq200qjTUumaVVX4Ur
LiPiVk0dj7UlgmhlsRv11qkQ3HODQYJzsxhvBwHr5Qy2W+b5u5Brrtl0ZFjV1fGj
yqlAnuI3ZEr8Lm/hjZtGcJRywLl4aOALLWXBc3HOabKvmNyzTkfHMn6qlIqn5x1k
Tu+N6lRALx3IcT7Gts6XlHMWL8m+VJ2MNVEUkfAydqHaAG9MjK6Y5yNz2VrTVzVc
c+lo75jbfcR5gUWP7pJoqRDm/5h1jfJcMXDUeXWAxN660H7Zed8+VPWSRCZz75hP
rD0huskxW2T4nZmhfjTO/7309YdwAFvupIPUS+wkABTszVzqqTygG+7o3QsFC+Hi
I/Y6fT7MF0E0jtLEUlgO52EEtUBSeDL//6Qe1nWUUXDtSC0nxp07nEL9MGUyGlCp
Mf0kEkcmiqxmNPs+xhsc1GxgZXuqwzTdgMxGBcQc+AEPXVgDaQkgz1ALH61tnwc1
UngY+94CU37zsK3APDwQOjwoBDHZL76YBkxCnR1a8DqLN0YUgi68qjg=
-----END CERTIFICATE-----


================================================
File: /doc/examples/142-https-client-cert/https/certs/cert.pem
================================================
-----BEGIN CERTIFICATE-----
MIIE1TCCAr0CAQEwDQYJKoZIhvcNAQELBQAwMTEvMC0GA1UEAwwmbW9jay1zZXJ2
ZXItaHR0cHMtY2xpZW50LWNlcnQtcHJveHktQ0EwIBcNMjIwNzIyMDk0NzAyWhgP
MjE1OTA2MTQwOTQ3MDJaMC4xLDAqBgNVBAMMI21vY2stc2VydmVyLWh0dHBzLWNs
aWVudC1jZXJ0LXByb3h5MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
u/a/fjEwQcPLnm1ypjrzGbaBr2zhlkbdWcR5cqKv+7Q+A5SQeHehrvBVu8k56Pjr
5svY/FmnImjQhRrMcVOmc/gJFObwc0Z5ADCI2B2M/SXgD8mOivG0axRo5RD9ylMJ
c1wvAf7yeIIymLHJasoHhtQi2KksbFZrCjWpZuprU0vKjFpVlpu79qs5//Di2Qq7
9UCZQIMV2GxGOELElSj2S65E3k/I4KQR0xBB3VPGNmZMZJpaQjdxk1XMRyKv1tHW
g3ewEV85XlW2A1wdP9ewFzY6ZwpT/GNTxH+Cvp0lWmBh/LV5G/Kdf7ATtaT8lgL9
D1REhb378IaVrrx2Mp5IeYTMk1tTVnSuXeiQzqEYuqH+QZL6G7u67TS8oZQPuIcM
zBcyTpr14DwE60SlsCZ2KoOZHQWwoS1E7fJimis6EydaqF0e9STjWUdKQUrxpPgm
3bIPoMdbvdYu+zlDDUiuLHCAcvfLYEtYhIpGLnLIJuf++y7wRRt0aicI31erw9A0
IAnrLRaPkp/QyCDNaRXfEfRfBNn0r8sA7JxXbFEKkpny0HQyiaXXNgh7pcN9TWMt
KER/PVgW4f4fGlCiBHQlgZZDDJwGY2zWUP9ETw/6cbNOd93o0XuoS7R5T18UFk8s
yy70/rf14MM3ZDEcffG6qRk0J8LfUwuFsj9dEGE/QgECAwEAATANBgkqhkiG9w0B
AQsFAAOCAgEANXn8x4o/2sRexx+jMzIg2z+BgUGkLocq4j8qk8EjfZtH+iJu20n8
snHBxXNNA88VomDHNaIGSvalp/rPTHkAQOAFNppPjg0v+2sz3c/UURMp2y40Xjsp
GVZvJYKbGa4z0LdBcJlsDZNJNJo0JxM31uZygYcV7poLL/DpnosyUJzoX5GJeUna
fbEsiEB5s4NtP1FGBczQsBPLFS7NMcas0Y8IKM1jTvbW2pTUf5gIE9t0XUrsmr9M
mL5g/GYqBlU7IL1+ancrxI7+25fK+bKGHSVyTI4mE6T4JiMqzXQlcIOH8UGXlGMv
Imm+g9wG0epvnx46N2/SNZHlSV5Oi+/jIpk+cO+DHJvRU/Zr7zaCTG0d8+I55D7y
OhhPcGSxq25gtjAhd7myWceewR+h8X/YeSTLM8Udllqtz6PCL1ILO7TgLTEZdkmP
bnL39vAwNg0ANJd1UxWf+qRd9EeJaoErVFY8zUu0I7KTs838S/4Ai+RoYh1XuPAc
M0fhK5fpbRcXZOLUhuoUrGxeuCWc9kifjsebI7hVV+E5ailgt43Jw+prxRPrWeNL
RFJxtD6UV/v++XWZAsvkBNa7c4ynqjBrABR1gjOhuU8PjJMR1oHp0sQdG9kCB+5H
LAwGA1PTzyIQbtPH+SAWaA+doiRqPr6IY0bgOWl2pJ6eV1prWC98nus=
-----END CERTIFICATE-----


================================================
File: /doc/examples/142-https-client-cert/https/certs/csr.pem
================================================
-----BEGIN CERTIFICATE REQUEST-----
MIIEczCCAlsCAQAwLjEsMCoGA1UEAwwjbW9jay1zZXJ2ZXItaHR0cHMtY2xpZW50
LWNlcnQtcHJveHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC79r9+
MTBBw8uebXKmOvMZtoGvbOGWRt1ZxHlyoq/7tD4DlJB4d6Gu8FW7yTno+Ovmy9j8
WaciaNCFGsxxU6Zz+AkU5vBzRnkAMIjYHYz9JeAPyY6K8bRrFGjlEP3KUwlzXC8B
/vJ4gjKYsclqygeG1CLYqSxsVmsKNalm6mtTS8qMWlWWm7v2qzn/8OLZCrv1QJlA
gxXYbEY4QsSVKPZLrkTeT8jgpBHTEEHdU8Y2ZkxkmlpCN3GTVcxHIq/W0daDd7AR
XzleVbYDXB0/17AXNjpnClP8Y1PEf4K+nSVaYGH8tXkb8p1/sBO1pPyWAv0PVESF
vfvwhpWuvHYynkh5hMyTW1NWdK5d6JDOoRi6of5Bkvobu7rtNLyhlA+4hwzMFzJO
mvXgPATrRKWwJnYqg5kdBbChLUTt8mKaKzoTJ1qoXR71JONZR0pBSvGk+Cbdsg+g
x1u91i77OUMNSK4scIBy98tgS1iEikYucsgm5/77LvBFG3RqJwjfV6vD0DQgCest
Fo+Sn9DIIM1pFd8R9F8E2fSvywDsnFdsUQqSmfLQdDKJpdc2CHulw31NYy0oRH89
WBbh/h8aUKIEdCWBlkMMnAZjbNZQ/0RPD/pxs0533ejRe6hLtHlPXxQWTyzLLvT+
t/XgwzdkMRx98bqpGTQnwt9TC4WyP10QYT9CAQIDAQABoAAwDQYJKoZIhvcNAQEL
BQADggIBAClbeZDU7LqYd+nDNKsIi/E0VSLVCDgB7faiIMG8aatFIdVftD7F8v7t
kW0npzMVQkP1YZj9bhUHnzfqtaZ7DL91IcNMJZLKtHZ3QYCkpjHNyt2cP121wpF/
aaq4bIOvQOyvN91lf2tdnQ06I2wL3pUdVSoPSsch0jnC617AeOUchPFfAAd5QaP2
u0ThrNXkcgKoGBhud48V/AXI2qHZX3IwBWuECu/mkRUEnHRhVigbSWBFyd3PHhIh
H0QCdI1if809Ksodo2lEF9JKLj4uQTPDuZ7v7lXJd4xK2MEsJawZK2PT303AD0NU
eRsBJ5IkBvW+wWr6iaQ6cl5R1s+ZMcfe2q/PKK2bEPUIFkym86ZHqSX0FhSzQl/1
paulqApDMBKYz3xhvLTQSCf1vLVlUPKbpZvPoISYeq5FgqdIKSggrmNDaAolwKKj
CKvddNtrYiVAoRzs3MBEpHP5Hx6VQwK+9nIt+j3d8Iizamq3LI1EMiIqjhhwmU30
s5DqyftuL+nNQ5iZ5guaBM8btLKrxFDJyNDbgEkkssH1ezbieeiS2TM4uSrtSTF6
DdnGxM5vZ2HmM7Izgn0/DgV5Cc8UCeO2OrzSYPmvINzWz7OU91gp3utrH++BDNNa
bmqUz3eJBiJn5ZzzbFgquRSIkXvJJDrZFqOANzryKdJrymIO2+T3
-----END CERTIFICATE REQUEST-----


================================================
File: /doc/examples/142-https-client-cert/https/certs/key.pem
================================================
-----BEGIN RSA PRIVATE KEY-----
MIIJKwIBAAKCAgEAu/a/fjEwQcPLnm1ypjrzGbaBr2zhlkbdWcR5cqKv+7Q+A5SQ
eHehrvBVu8k56Pjr5svY/FmnImjQhRrMcVOmc/gJFObwc0Z5ADCI2B2M/SXgD8mO
ivG0axRo5RD9ylMJc1wvAf7yeIIymLHJasoHhtQi2KksbFZrCjWpZuprU0vKjFpV
lpu79qs5//Di2Qq79UCZQIMV2GxGOELElSj2S65E3k/I4KQR0xBB3VPGNmZMZJpa
Qjdxk1XMRyKv1tHWg3ewEV85XlW2A1wdP9ewFzY6ZwpT/GNTxH+Cvp0lWmBh/LV5
G/Kdf7ATtaT8lgL9D1REhb378IaVrrx2Mp5IeYTMk1tTVnSuXeiQzqEYuqH+QZL6
G7u67TS8oZQPuIcMzBcyTpr14DwE60SlsCZ2KoOZHQWwoS1E7fJimis6EydaqF0e
9STjWUdKQUrxpPgm3bIPoMdbvdYu+zlDDUiuLHCAcvfLYEtYhIpGLnLIJuf++y7w
RRt0aicI31erw9A0IAnrLRaPkp/QyCDNaRXfEfRfBNn0r8sA7JxXbFEKkpny0HQy
iaXXNgh7pcN9TWMtKER/PVgW4f4fGlCiBHQlgZZDDJwGY2zWUP9ETw/6cbNOd93o
0XuoS7R5T18UFk8syy70/rf14MM3ZDEcffG6qRk0J8LfUwuFsj9dEGE/QgECAwEA
AQKCAgEAuTAFQNZDnjfC0IcysvZXdxjqMqUKqR2OjhfWNAx3aH0PsEVaBWaQZKQj
Q82hAZjmCtECKrZFxdAQyWM609i/oXhZsj9J3bksE/S9jnem5e7AD63cg6ZZxDoq
kq0n7oPbRs4m/kdqKzLTmL9pG46K1dsBrgcXXnHSKg/upBgHv9xnZdrGgolTKldO
4Iw7Y+2Ae8S2eOntxvn+QQX/Wpot9yhub72Zw0HC0fkte1tDaWtmjqPIk36+ppOc
nOVe6z54o7RzQtpX0kqN9kd2BeWCd4wVBFoXnw1Zhbq/XP/EwoM9Z1aASPnDFP+s
m4U+2ql9G/JBRKeGplZi+PJzXbG24lgtOc9nGHi4UDIxIxy/0S7FjFst2aOhPW89
eQN5gnzcK0Cq/3gdbID0LegsEZ5UuemL1U1MFkZqfCAp61ESxyrDZ/d72QJu+Y8w
1lTpPyPHjSz8PD37kY6XZrn5f8BaHtQu9SKRoKACsLkBO+ldNe04e021RWixclGa
GHLA9xUqwV4tc9ta6hyLE4JwCynCpUolSe9keHd0mlN7wwm8JRAmiZqlG7QM7bpf
Qjvud6fpbJWPpZIfCs56hzFWpuVpSnsL8Gso3L2pEV4+4j48F0XCaCA9NCgYKEPA
UzHmTcPO2kPdrnRpBthhd3ismLuwXFJCUCl0o+ik5LmssM3owzECggEBAPQeQOyu
QX8XVcZXUSSpQZRR6atIi+5YtDsYmopd/ASJLX44VdSiCs1D3OVQtD7hPAKXML9P
EDzuLbwmWIHjylyQOOYiAYfQfaYtS+xkehTnNoIwGScHIrvrrm6vaZcjsuFN4tJ/
HH5PZa4tk3n47o+zUc8AEJg8J8ViTeChpocRojiKXXa1dtigAihHFFb6f7LfwpmK
P6IIXNRLgkv2PuhEFV2THPlHSTHz/IRF+6b62TC3YaDqRYqREfy6GXlNYXKUgFLW
z1Q7FEIc81WmSNdAufZmeetz8jZjob5a8tXBqUn1uzOVFIOU2ioYk0rok4KVpDxc
6BY+gDFaX+AQtL0CggEBAMUczcXq1ZBOqt9w5HR/j+VeXjzjKVbdqS3+4fm//F9g
O9IGNd37SlsI4taJSKslTJYd6ilEM3GsiLPo7WshNhONtlznnILGiVgg36K1CW/e
INjjjJTUWhqUili3UsH3psaxZvEhcuA3QWTZNZY+yXsXsYygbxJ0c70KXWFzJjOu
nphBNz5za2uRf0b6HoQ/PK52Rz+b/HYCfoTAoiMOYGt03L6SHAfI3yqWL4EpuMkS
3tPJ6FMIvAE40srRPhe6CZgvMsb7eWEqgufihDMV9217ZTfdi6y/3ByRvU22Ezz6
NUR05o0fWML+aji7pkQ4i5vNdW6A8ACL9W1utxNnUJUCggEBAL2LeBHNw6EwtzMH
vUNgAEFv0KVj8PKiAV8ZXXUuQG4tLRuiFlLBdu2mUa/kF+/y5quERR9l/k+xB+Xd
SD+iZQ+2E9fsc4/GvKj45sinw3rThClVu1HoYnnTJ19d5/ioiU4TMZkLhU41y9eQ
H8BHHsSJEW5OuJPbsW27RIi0Ox8I/BI2rRdtEthkdQhdGFforJpwzyJ0i6/+GkXk
U0kz6+hgZM6BWa/cP+L/dQQnapxejaEb4jwVauWKepLm1Lyw7ocO8wxfKiBWtwYW
gIHyWQB5i2rcarH9FwZQGdg5ue9rLUz19eK5UHJSc4rYBhXVvCNamWkdIj+TS+oG
KAdMMWkCggEBAIGImEGEPayDxg7oZXmZirq09UEWF0iail9LrL0vyW30E9vFcQjb
5tVEVa2esj6mWFoedo9/3j7Jn1x7qepI/PyEmF8dZeEbD472q4CFcBov424ku3Hi
ywPEsdXzQ1NsqBDS7E9yJ8fpB/R6OZju0gEuZOOBWvzJwnVspkkwHt6/1kFAOkm0
F9es2fOO0xcdZ4dO+yt2GsaChRpAbUyUWhDDz3z9D6ad/upBoB5FiMW6vOx5N0+5
4bL74KqgLynwe/Wirr/M6stL4JL6bN4VhXBRMwcvdGal/sRXkgvLp4De/LpsCEad
XvtlrfBygKU8c6KDtrRTz2TMlRDBPVZnArECggEBAJHzWYOkDsokdOdKytCqmIVr
aP8wuIrBitXa6F5Nrt3vymRDFNpwSj1SK8xSummJDkst3D1lSD0FxduRqCqX5LZp
1nB4lWjhvBHJr1VbyMEC04Xh7A+t4E2y10Q55r8ZVmzXruLqJSb1bqVHJQlhsdby
Ck7nYO7XE5wCUhIMs+hl/qJMt/7DOZ9YqJJ234sJplLIQgR0LO2CdEamvNOdt4eQ
hRgIM2AfNwphUykpZXgL+1a/tRWcrk4Gk/ku1ERae0DffFzx8vCzKWaKBxR5ykC+
jSr8XeglFgCFpcPca5PE7tUzZxhpOCxJwuTamPcFK4Mj/vmMZnvkvWZbipp3Jk4=
-----END RSA PRIVATE KEY-----


================================================
File: /doc/examples/142-https-client-cert/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "https://mock-server-https-client-cert-proxy:443/142-https-client-cert/",
            "caCertificate": "-----BEGIN CERTIFICATE-----\nMIIFRTCCAy2gAwIBAgIUJDrL0HeNetQg2XQ7AbXko4WLZLYwDQYJKoZIhvcNAQEL\nBQAwMTEvMC0GA1UEAwwmbW9jay1zZXJ2ZXItaHR0cHMtY2xpZW50LWNlcnQtcHJv\neHktQ0EwIBcNMjIwNzIyMDk0NzAwWhgPMjE1OTA2MTQwOTQ3MDBaMDExLzAtBgNV\nBAMMJm1vY2stc2VydmVyLWh0dHBzLWNsaWVudC1jZXJ0LXByb3h5LUNBMIICIjAN\nBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEArUVb1LEfbAI2V7/eIhgtkMRYF0BB\ngCzDEZb2PyYAAXtV3boS52NjNGh5TCE951G/LPb570P9CFiE0k+5Czqx+WRPSuX/\nBA4+6RLF9CSwqb5LPwyyTJQyZfw4f6SIrfqdUo8WWVOgD+9QZdHZeYsmE1bkf7+n\nVD2yifHjFLqB7LFIOE5cnSxAXi0yBnwxNl+ZVnRcgCj8er+BSggqPJN0nGm3Bx4c\nKbGcY9HNDoUaLapg0kPfR12kNwcrGTdx02RgqoeuWSFKmbXCyhlletu2p4M42tB+\nRNkj1INt1SRRKMZ/0SXbOUB5z/QLTLIZy8RSJ2bZEpp+bhAT6OlAhizat9BYACQH\nMyB3S337bgtBROMKar79LcQ9zhZ5oNKCDWchdHA2RwViIG0jo2sUpSR9bGkNoe/w\nSs30HelqCaKeb03YzCrYHpaf57ZC9l3L3jv4xzPdkg4QGkxcdOckMn2qIbAjxKr1\nko25XdKPXaUfJ9DrS7LwUEQZ4D/wLJf8bWAfRbQTtFlAQ7Bh6AQ0bpYlHdvHcLdL\nOD0uraD27sZbTNfcl+GyS2A818LNcl8WvH7TbNP9HrAOL2ch6E+tcovThSagAcRa\ntJuTy8h27r33qcdYnFI+MNzuJhBttCEXkhA+Nkkqu/1w1l6QA/Wiw/454MHuZUjU\nix66v1i9FbX/RBsCAwEAAaNTMFEwHQYDVR0OBBYEFCYZgiWjGW0WJwrT8YB81N0m\npnhkMB8GA1UdIwQYMBaAFCYZgiWjGW0WJwrT8YB81N0mpnhkMA8GA1UdEwEB/wQF\nMAMBAf8wDQYJKoZIhvcNAQELBQADggIBAIHoOotoj8iJCKEXei0Ph/KWrA3MnnUH\nq0OQki4kX4bpOzm0+5qViwsaJgY1XFenu6A5YyBUd8cOAWlldoZ3TLX1U91CwMN6\nfULwYP74Fs9d/Eq0sXA+ZuX2+Y3O/UcFEZSjNn46T0N73tT79kQQb3ddZwQaXfNl\n8krzDbQev/bHQH2fX4F2dVVhRoUCywuhfU5MqDV/v/LGqkZLN7dRxVkd/9fXjhgV\nMWGlECK5HuPk75sX0mUOkhx4i/bH9Sx5Vz+2YgH2ocU9MgJoiRb9kaEjE/x7gnL4\no1hfRexg8Cx2VN7WgMB5wdLnf7HuAGLAEKy/4fhBn3wl8mJDyNsEYMmTcxUHJlk9\nE2VnHD/9+4+NUZh2cSQumoPTrzwmcxfMtbRNMXmc6vrJlRDTTdzqPb6Ifu9+xsle\nAA2Zpj3L3BZBNg0tabgnlEpoAXXatWMCPgETMpggZSm/G0NzaoiIfE3A+tfSJmwR\nhDm4xl6iz6AICEoEmWh8I/sFSQSacIKllyXfL9glVj0WrKjTzJFy4y1E0vpXY0KY\nL3kxsai4zrAZ1++WBTCKZ+3vgtH+GyRBPRug+aw+80PH9qx8r5Bs/M1fTDS4xa5r\noDP8zfOs3HBhcet5To5z/eD1Nih0zh3FkiFPMlT9/9WWjjUo8bVkW8lLx7+Bbu3Z\nRyIm8bObY+B2\n-----END CERTIFICATE-----\n",
            "#clientCertificate": "-----BEGIN CERTIFICATE-----\nMIIE1TCCAr0CAQEwDQYJKoZIhvcNAQELBQAwMTEvMC0GA1UEAwwmbW9jay1zZXJ2\nZXItaHR0cHMtY2xpZW50LWNlcnQtcHJveHktQ0EwIBcNMjIwNzIyMDk0NzA1WhgP\nMjE1OTA2MTQwOTQ3MDVaMC4xLDAqBgNVBAMMI21vY2stc2VydmVyLWh0dHBzLWNs\naWVudC1jZXJ0LXByb3h5MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA\nxCtB32E3gEuFL8HAvnMLQF69iUYKSd2D08Pmj6rgA+ZlS16d7wWsLkz9nnD9bbbS\nfh7EHiyYwEUmEdGghsoT0ofL+pT+lEPjqKCsZaOjZzKzNGGvZOLo1+/zEgI/Nf72\nhkrOnnB2ftYds4DHyQmaDBvLNSooPscTUTUsTaO9BFvbT8ijFwJytgtdN94L/jyr\norkM31eMtS+63wC3pYlo5FWBqXTx6AGH0buFv3UJt+3NP3gCGzPZeNBIcR/iOyPq\nQqvA20WaykIGUPg9s3rpronM9XEVaiEFlnXMnI70tft9dQ0uNiETc3Man2k6eV36\nUvgjjAg2cmtf0Js3b2QoamSH49a+AY/OG1Pcyw0M8jnSW0BGdTlro5QI5vWO05uO\n4rvZnvy823+Hd3nsqzw97ymirGJ792EwhMxuG64h8q4DTfaPEJRw5THuh4Jm+JGO\ntg20H8yGcRuDbz7ZfMPyH3Gii6pCypEzd08ll8DqbSz/SbNV3pOJMNe+xFFyJ4mb\nkwDj2Q3nTx82jyVi5zNCCRBmfM1coMW8BMzB/qxU9gGgWj4HLENVZ6qJEq2rCGlY\nA8OA8MYKk3Ij5ptmpSCJVjvS5UL34Q/78CPi0U0/Sa6kRBrv3PoFUhYetK6RsaE5\nLd/M5CTJtI/R/S49zN/jLtvd5Ei1WRIsV7Pg/Pgby88CAwEAATANBgkqhkiG9w0B\nAQsFAAOCAgEAcY01xrWd8yRW2aZUpfdhxSPAI1mD/56+sv0fci2h39wfZF8lJkTb\nPSEiFfVIUlvo7In0/DaGv4qRyRQJAU7WCLR12MYDZuuzSK54v/3tbzr/RnUrdTHM\nqN4ZUqfqhXLKWY+gw/NrT4QkAqpOvOByYSB/NueumXLKm/iq200qjTUumaVVX4Ur\nLiPiVk0dj7UlgmhlsRv11qkQ3HODQYJzsxhvBwHr5Qy2W+b5u5Brrtl0ZFjV1fGj\nyqlAnuI3ZEr8Lm/hjZtGcJRywLl4aOALLWXBc3HOabKvmNyzTkfHMn6qlIqn5x1k\nTu+N6lRALx3IcT7Gts6XlHMWL8m+VJ2MNVEUkfAydqHaAG9MjK6Y5yNz2VrTVzVc\nc+lo75jbfcR5gUWP7pJoqRDm/5h1jfJcMXDUeXWAxN660H7Zed8+VPWSRCZz75hP\nrD0huskxW2T4nZmhfjTO/7309YdwAFvupIPUS+wkABTszVzqqTygG+7o3QsFC+Hi\nI/Y6fT7MF0E0jtLEUlgO52EEtUBSeDL//6Qe1nWUUXDtSC0nxp07nEL9MGUyGlCp\nMf0kEkcmiqxmNPs+xhsc1GxgZXuqwzTdgMxGBcQc+AEPXVgDaQkgz1ALH61tnwc1\nUngY+94CU37zsK3APDwQOjwoBDHZL76YBkxCnR1a8DqLN0YUgi68qjg=\n-----END CERTIFICATE-----\n-----BEGIN RSA PRIVATE KEY-----\nMIIJKgIBAAKCAgEAxCtB32E3gEuFL8HAvnMLQF69iUYKSd2D08Pmj6rgA+ZlS16d\n7wWsLkz9nnD9bbbSfh7EHiyYwEUmEdGghsoT0ofL+pT+lEPjqKCsZaOjZzKzNGGv\nZOLo1+/zEgI/Nf72hkrOnnB2ftYds4DHyQmaDBvLNSooPscTUTUsTaO9BFvbT8ij\nFwJytgtdN94L/jyrorkM31eMtS+63wC3pYlo5FWBqXTx6AGH0buFv3UJt+3NP3gC\nGzPZeNBIcR/iOyPqQqvA20WaykIGUPg9s3rpronM9XEVaiEFlnXMnI70tft9dQ0u\nNiETc3Man2k6eV36UvgjjAg2cmtf0Js3b2QoamSH49a+AY/OG1Pcyw0M8jnSW0BG\ndTlro5QI5vWO05uO4rvZnvy823+Hd3nsqzw97ymirGJ792EwhMxuG64h8q4DTfaP\nEJRw5THuh4Jm+JGOtg20H8yGcRuDbz7ZfMPyH3Gii6pCypEzd08ll8DqbSz/SbNV\n3pOJMNe+xFFyJ4mbkwDj2Q3nTx82jyVi5zNCCRBmfM1coMW8BMzB/qxU9gGgWj4H\nLENVZ6qJEq2rCGlYA8OA8MYKk3Ij5ptmpSCJVjvS5UL34Q/78CPi0U0/Sa6kRBrv\n3PoFUhYetK6RsaE5Ld/M5CTJtI/R/S49zN/jLtvd5Ei1WRIsV7Pg/Pgby88CAwEA\nAQKCAgEAj66nZvgL8NpfyST/Cf+1pAZAiUVVz9iB8B+yxlQAFJsyYkwBHctn29nk\ngaJ83VllP59FQlyj3WBIjBCgpVlpv3BbhUSQWwSGwUI+Q4vh6XqHK7zI/Pn+VfuY\na/5dUi1XX/F2+TGieTBXPNz8eFGiFXBeHKiuJZ0mlvp9Yrilf4XQUtXALuBKKPCV\n7I+k9Sh3Bo7H0OaNV0CIfUJHQOYuf9/pQrc3YBmO452YTy1oWuHAzdYWpNoLVaQp\nC0KxL2QU95RZg8GtqKtHeRL6DnXep0qjZrrXVo6tSxEpNxq2Pnzf3VY0HM2JM6yB\nOXWXsMGW0iKR1sVFK/VdjqvBpMMVnd6tmR+8lC5DjYnqdRWeE8ME7CSHthtHvttJ\neCi/5rI7ai1ecL3SfwfsG8NwQKs0FfQM9S+cgy5KwPPcqU7gPM3q0NnWqhj/j4rp\n/Ic+ZXdtHy1ccBSLj9t9qElysNLptdqsP0VHQajvlW4/5vvk3eSHRNByDKWNIZD4\nqSmejmapA7BbDr3/Sq3HJuLKoQl23hyb2b3k1QSa+4yXouRFwVqaCt+5rIYjVBJW\nhfXLz5rVg7ONCaCTIom6rDE4oaQTnLYW7apZyg32AC7Swhuijggrg5RcSjJzsJuL\nUIRSCLY2wOpbCe7iNpzWauVBpyI4TLAqyPBGTuhzhzdKRq76Z4ECggEBAPEwigYU\nEFTwXZG49+eMVk+WRcurCF51JH4pyYEzeSqD3i4KAxA73FOCZvNBp8FXYw8P+9nT\nQ/ionS2YqfLqjUQeQAPWhgw3RVdm0vL6Esi1QzgdSKc5hUOeG2Nus+O9rJDV14cP\nX/ENaJg/A/tKO2QaCxCU9/V2FYkrRjlrJvv2xOgX+bNd9zlJ5WuxinT7B1XoDNZG\nJnIqObtyi2ky1qLzULpj3OGQAAM9HGfjdbS56FVER4Jc4/AS2LLfAaxylptXgVzC\n6coF71lt088n2PCxwAkMR6XZcZCx4/OKVJ0I3a9M1nCltlR5icdRlAJ/0XPu3KPo\nsIgbBpdfEvbFsu8CggEBANA3AFGAskt0HVzPk9/CqxOVgNMZl7I9colU57TNRYDJ\nKY/CdQBbmLBL03Fo//EZgRsv0VnLECsNFlXQmzGB2Rv9nVzXeTj/i0EvMHaULXDy\nKLOWXQiWwulTtqcE+WCR7GV3LqQ/qATy0KNPdlhO9i9kRbAJ/Zr2Fq1gVi3qewbr\n/VSLaR+l6iBYId63xgorBVYit3ZVMLuFwsr7S+eEhTr3+F0511WnsscJRnLo2tky\nYB2LBQcnfOck2ev1wIEl9wzXkav+WkoGRLAIIDLGGgAaBmE5nTUJjCfMIN4ryHH6\nn8ZfHVyyuHKiOwA0P8F/virfVX2ojrvSwCRyI42v9SECggEBALb2Hk38HGOCr0hi\n61PwJm1bTnjwtnmJHXTDWEO1e13gCMQd/jLrZfjHfDdd/9bv5oo/ksqrs+1GY216\nWLmYai9ZTzBaJPfRWb2yl6WQRH2S23oO5NVOEiS4JIiqKrZBZU29mjCvXhVrGYQc\nkXWn2yPVib07dFn1COM0O6JFAZ6zlK2HunjxeCAySWIHnUOeRfNKA6rsLi/+jir+\n+niEA0Q7lWq/ZIiLhybtzcWVS+4b9P3xvNlMg/DTKyWNfCSIDG2s1Mo8ZcNF+0p4\nwOtti+kSvd1fPl62c6rS91wA/KzfU+OuQyHS41xzkivsW34F3iq28RM56ehlr/tW\nOPmQAWsCggEAGFr2rJHzSSQx8xNM5tWskUPhp8/MkMrjRPErkViZkrD1LZ2/deVA\n/Q5Bk3iGx7sGARoc0PYR1BdZz3vxS182+DE4YQ3LXkF2Fo/giV5X2mhZHniuNTz9\nW7GxIeRRD1zCXDQOvqO7kaidgxzeaQIDhhOimy7v/Vpf2LP2ILTW4z5jiaotB8iu\nlE362ESC49mYbDTvZOYeJzFEUd4HSPOVagprgOwtJhXRsbqCBRr7zoA4Afyq/+U8\nlQUYgKNkezbnqRbmMUo1YYdOLZElwwqtK+nfaSwGGZgeTuFvzs0sSzjXy6qAksFN\nFgun/yQdeRLqObWaGHLJD2tdkmXPhtlYQQKCAQEA2SepVZVIB2aPaU29S3T7zFWC\nN2CGIRwzalRFNJbdVu8mUmpuxduCQBPkCGHMmdbkOvY5dpvRKEMp6937B0GIek+Y\ndH7yMS/WmmGjL8MAlo0WxGQOy/oZdCQUMiMYobZRkdXozM7Dzb6jxaTw6XvyNiiD\n0rc+H5y4G8KiAvCjMxH3ujEqUotrRrShkA8dH6K8XiVFGqqz0SFaN8xBgFDJ3ZEb\nJehTnQgNdZZ7/BDx3PwdEskhXRbkWCKSVsEBfSMHeY7LVjyKWVLRqTfy9HKAN2Ns\n1QuGHkxprsKPj6/tI92mcjohZX4owxe61BfWvASq6/C2h6jGajMqJRjHZgYnTA==\n-----END RSA PRIVATE KEY-----\n"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/115-multiple-pk-parent/_sample_out/mock-server.user-address
================================================
"index","street","country","userId"
"1","Blossom Avenue","United Kingdom","123"
"2","Whiteheaven Mansions","United Kingdom","123"
"1","Whiteheaven Mansions","United Kingdom","234"


================================================
File: /doc/examples/115-multiple-pk-parent/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/115-multiple-pk-parent/_sample_out/mock-server.user-address.manifest
================================================
{"destination":"in.c-mock-server.user-address","incremental":false,"primary_key":["index","userId"]}

================================================
File: /doc/examples/115-multiple-pk-parent/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false,"primary_key":["id"]}

================================================
File: /doc/examples/115-multiple-pk-parent/users.request
================================================
GET /115-multiple-pk-parent/users

================================================
File: /doc/examples/115-multiple-pk-parent/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "addresses": [
            {
                "index": 1,
                "street": "Blossom Avenue",
                "country": "United Kingdom"
            },
            {
                "index": 2,
                "street": "Whiteheaven Mansions",
                "city": "London",
                "country": "United Kingdom"
            }
        ]
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "addresses": [
            {
                "index": 1,
                "street": "Whiteheaven Mansions",
                "city": "London",
                "country": "United Kingdom"
            }
        ]
    }
]

================================================
File: /doc/examples/115-multiple-pk-parent/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/115-multiple-pk-parent/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "id": {
                        "mapping": {
                            "destination": "id",
                            "primaryKey": true
                        }
                    },
                    "name": {
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "addresses": {
                        "type": "table",
                        "parentKey": {
                            "destination": "userId",
                            "primaryKey": true
                        },
                        "destination": "user-address",
                        "tableMapping": {
                            "index": {
                                "type": "column",
                                "mapping": {
                                    "destination": "index",
                                    "primaryKey": true
                                }
                            },
                            "street": {
                                "type": "column",
                                "mapping": {
                                    "destination": "street"
                                }
                            },
                            "country": {
                                "type": "column",
                                "mapping": {
                                    "destination": "country"
                                }
                            }
                        }
                    }
                }
            }
        }    
    }
}


================================================
File: /doc/examples/102-oauth1/users.requestHeaders
================================================
Authorization: OAuth oauth_consumer_key="1234", oauth_nonce="72469d96572dabb4d0ea02b057ea4f246d722b72", oauth_signature="zl0y5CyySCPj8IqODV3Egjqgg6Q%3D", oauth_signature_method="HMAC-SHA1", oauth_timestamp="1492904452", oauth_token="userToken", oauth_version="1.0"

================================================
File: /doc/examples/102-oauth1/_sample_out/mock-server.users
================================================
"id","name","company"
"3","John Doe","Acme Anvil 24h Service"
"234","Jane Doe","Acme Anvil Research & Development"


================================================
File: /doc/examples/102-oauth1/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/102-oauth1/users.request
================================================
GET /102-oauth1/users

================================================
File: /doc/examples/102-oauth1/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "company": "Acme Anvil 24h Service"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "company": "Acme Anvil Research & Development"
    }
]


================================================
File: /doc/examples/102-oauth1/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/102-oauth1/",
            "authentication": {
                "type": "oauth10"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    },
    "authorization": {
        "oauth_api": {
            "credentials": {
                "#data": "{\"oauth_token\":\"userToken\",\"oauth_token_secret\":\"tokenSecret\"}",
                "appKey": 1234,
                "#appSecret": "TopSecret"
            }
        }
    }    
}

================================================
File: /doc/examples/072-mapping-pk-disable/_sample_out/mock-server.users
================================================
"id","name","colors"
"1234","Jenny Doe","blue,pink"
"1235","Jimmy Doe","red,green,blue"
"123","John Doe",""
"2345","Janet Doe","black"
"234","Jane Doe",""


================================================
File: /doc/examples/072-mapping-pk-disable/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/072-mapping-pk-disable/users.request
================================================
GET /072-mapping-pk-disable/users

================================================
File: /doc/examples/072-mapping-pk-disable/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "children": [
            {
                "id": 1234,
                "name": "Jenny Doe",
                "favoriteColors": "blue,pink"
            },
            {
                "id": 1235,
                "name": "Jimmy Doe",
                "favoriteColors": "red,green,blue"
            }
        ]
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "children": [
            {
                "id": 2345,
                "name": "Janet Doe",
                "favoriteColors": "black"
            }
        ]
    }
]

================================================
File: /doc/examples/072-mapping-pk-disable/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/072-mapping-pk-disable/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ],
            "mappings": {
                "users": {
                    "id": {
                        "type": "column",
                        "mapping": {
                            "destination": "id"
                        }
                    },
                    "name": {
                        "type": "column",
                        "mapping": {
                            "destination": "name"
                        }
                    },
                    "favoriteColors": {
                        "type": "column",
                        "mapping": {
                            "destination": "colors"
                        }
                    },
                    "children": {
                        "type": "table",
                        "destination": "users",
                        "parentKey": {
                            "disable": true
                        }
                    }
                }
            }
        }
    }
}


================================================
File: /doc/examples/082-login-auth-expires/users.requestHeaders
================================================
X-ApiToken: a1b2c3d435f6

================================================
File: /doc/examples/082-login-auth-expires/orders.response
================================================
{
	"items": [
		{
			"order_id": 98765432,
			"price": "$42"
		},
		{
			"order_id": 23456765,
			"price": "$24"
		}
	]
}

================================================
File: /doc/examples/082-login-auth-expires/login.response
================================================
{
	"authorization": {
		"token": "a1b2c3d435f6"
	}
}

================================================
File: /doc/examples/082-login-auth-expires/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/082-login-auth-expires/_sample_out/mock-server.orders
================================================
"order_id","price"
"98765432","$42"
"23456765","$24"


================================================
File: /doc/examples/082-login-auth-expires/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/082-login-auth-expires/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":false}

================================================
File: /doc/examples/082-login-auth-expires/orders.request
================================================
GET /082-login-auth-expires/orders

================================================
File: /doc/examples/082-login-auth-expires/users.request
================================================
GET /082-login-auth-expires/users

================================================
File: /doc/examples/082-login-auth-expires/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/082-login-auth-expires/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/083-login-auth-expires-date/",
            "authentication": {
                "type": "login",
                "loginRequest": {
                    "endpoint": "login",
                    "method": "GET",
                    "headers": {
                        "X-Login": "JohnDoe",
                        "X-Password": "TopSecret"
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-ApiToken": {
                            "response": "authorization.token"
                        }
                    }
                },
                "expires": "-1"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                },
                {
                    "endpoint": "orders"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/082-login-auth-expires/login.requestHeaders
================================================
X-Login: JohnDoe
X-Password: TopSecret

================================================
File: /doc/examples/082-login-auth-expires/login.request
================================================
GET /082-login-auth-expires/login

================================================
File: /doc/examples/062-pagination-multiple-scrollers/search3.response
================================================
{
	"posts": []
}

================================================
File: /doc/examples/062-pagination-multiple-scrollers/search2.request
================================================
GET /062-pagination-multiple-scrollers/search?page=2

================================================
File: /doc/examples/062-pagination-multiple-scrollers/search1.response
================================================
{
    "posts": [
        {
            "id": 987,
            "title": "Why do we yawn"
        },
        {
            "id": 876,
            "title": "Why do cats purr"
        },
        {
            "id": 543,
            "title": "Why do dogs eat grass"
        }
    ]
}

================================================
File: /doc/examples/062-pagination-multiple-scrollers/_sample_out/mock-server.search.manifest
================================================
{"destination":"in.c-mock-server.search","incremental":false}

================================================
File: /doc/examples/062-pagination-multiple-scrollers/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"


================================================
File: /doc/examples/062-pagination-multiple-scrollers/_sample_out/mock-server.search
================================================
"id","title"
"987","Why do we yawn"
"876","Why do cats purr"
"543","Why do dogs eat grass"
"345","Why do men have nipples"


================================================
File: /doc/examples/062-pagination-multiple-scrollers/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/062-pagination-multiple-scrollers/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/062-pagination-multiple-scrollers/",
            "pagination": {
                "method": "multiple",
                "scrollers": {
                    "list_scroller": {
                        "method": "offset",
                        "limit": "2"
                    },
                    "search_scroller": {
                        "method": "pagenum"
                    }
                },
                "default": "list_scroller"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                },
                {
                    "endpoint": "search",
                    "scroller": "search_scroller"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/062-pagination-multiple-scrollers/users1.request
================================================
GET /062-pagination-multiple-scrollers/users?limit=2&offset=0

================================================
File: /doc/examples/062-pagination-multiple-scrollers/users2.request
================================================
GET /062-pagination-multiple-scrollers/users?limit=2&offset=2

================================================
File: /doc/examples/062-pagination-multiple-scrollers/search2.response
================================================
{
    "posts": [
        {
            "id": 345,
            "title": "Why do men have nipples"
        }
    ]
}

================================================
File: /doc/examples/062-pagination-multiple-scrollers/users2.response
================================================
[
    {
        "id": 345,
        "name": "Jimmy Doe"
    }
]

================================================
File: /doc/examples/062-pagination-multiple-scrollers/users1.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/062-pagination-multiple-scrollers/search3.request
================================================
GET /062-pagination-multiple-scrollers/search?page=3

================================================
File: /doc/examples/062-pagination-multiple-scrollers/search1.request
================================================
GET /062-pagination-multiple-scrollers/search?page=1

================================================
File: /doc/examples/136-post-request-functions/_sample_out/mock-server.getAccessLog
================================================
"id","name","date"
"123","John Doe","2018-01-02"
"234","Jane Doe","2018-01-03"


================================================
File: /doc/examples/136-post-request-functions/_sample_out/mock-server.getAccessLog.manifest
================================================
{"destination":"in.c-mock-server.getAccessLog","incremental":false}

================================================
File: /doc/examples/136-post-request-functions/users.request
================================================
POST /034-post-request/getAccessLog

{"filter":{"userName":"JohnDoe","company":"id-12"}}

================================================
File: /doc/examples/136-post-request-functions/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "date": "2018-01-02"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "date": "2018-01-03"
    }
]

================================================
File: /doc/examples/136-post-request-functions/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/034-post-request/"
        },
        "config": {
            "debug": true,
            "userName": "JohnDoe",
            "companyId": 12,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "getAccessLog",
                    "method": "POST",
                    "params": {
                        "filter": {
                            "userName": {
                                "attr": "userName"
                            },
                            "company": {
                                "function": "concat",
                                "args": [
                                    "id-",
                                    {
                                        "attr": "companyId"
                                    }
                                ]
                            }
                        }
                    }
                }
            ]            
        }
    }
}


================================================
File: /doc/examples/093-function-api-http-headers/users.requestHeaders
================================================
X-Api-Auth: JohnDoe:TopSecret

================================================
File: /doc/examples/093-function-api-http-headers/config-alternative.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/093-function-api-http-headers/",
            "http": {
                "headers": {
                    "X-Api-Auth": {
                        "function": "implode",
                        "args": [
                            ":",
                            [
                                {
                                    "attr": "credentials.#username"
                                },
                                {
                                    "attr": "credentials.#password"
                                }
                            ]
                        ]
                    }
                }
            }
        },
        "config": {
            "credentials": {
                "#username": "JohnDoe",
                "#password": "TopSecret"
            },
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/093-function-api-http-headers/_sample_out/mock-server.users
================================================
"id","name"
"3","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/093-function-api-http-headers/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/093-function-api-http-headers/users.request
================================================
GET /093-function-api-http-headers/users

================================================
File: /doc/examples/093-function-api-http-headers/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/093-function-api-http-headers/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/093-function-api-http-headers/",
            "http": {
                "headers": {
                    "X-Api-Auth": {
                        "function": "concat",
                        "args": [
                            {
                                "attr": "credentials.#username"
                            },
                            ":",
                            {
                                "attr": "credentials.#password"
                            }
                        ]
                    }
                }
            }
        },
        "config": {
            "credentials": {
                "#username": "JohnDoe",
                "#password": "TopSecret"
            },
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/083-login-auth-expires-date/users.requestHeaders
================================================
X-ApiToken: a1b2c3d435f6

================================================
File: /doc/examples/083-login-auth-expires-date/orders.response
================================================
{
	"items": [
		{
			"order_id": 98765432,
			"price": "$42"
		},
		{
			"order_id": 23456765,
			"price": "$24"
		}
	]
}

================================================
File: /doc/examples/083-login-auth-expires-date/login.response
================================================
{
	"authorization": {
		"token": "a1b2c3d435f6",
		"expires": "-0 second"
	}
}

================================================
File: /doc/examples/083-login-auth-expires-date/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/083-login-auth-expires-date/_sample_out/mock-server.orders
================================================
"order_id","price"
"98765432","$42"
"23456765","$24"


================================================
File: /doc/examples/083-login-auth-expires-date/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/083-login-auth-expires-date/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":false}

================================================
File: /doc/examples/083-login-auth-expires-date/orders.request
================================================
GET /083-login-auth-expires-date/orders

================================================
File: /doc/examples/083-login-auth-expires-date/users.request
================================================
GET /083-login-auth-expires-date/users

================================================
File: /doc/examples/083-login-auth-expires-date/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/083-login-auth-expires-date/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/083-login-auth-expires-date/",
            "authentication": {
                "type": "login",
                "loginRequest": {
                    "endpoint": "login",
                    "method": "GET",
                    "headers": {
                        "X-Login": "JohnDoe",
                        "X-Password": "TopSecret"
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-ApiToken": {
                            "response": "authorization.token"
                        }
                    }
                },
                "expires": {
                    "response": "authorization.expires"
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                },
                {
                    "endpoint": "orders"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/083-login-auth-expires-date/login.requestHeaders
================================================
X-Login: JohnDoe
X-Password: TopSecret

================================================
File: /doc/examples/083-login-auth-expires-date/login.request
================================================
GET /083-login-auth-expires-date/login

================================================
File: /doc/examples/089-function-job-parameters-md5/_sample_out/mock-server.users
================================================
"id","name"
"3","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/089-function-job-parameters-md5/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/089-function-job-parameters-md5/users.request
================================================
POST /089-function-job-parameters-md5/users

{"token":"1228d3ff5089f27721f1e0403ad86e73"}

================================================
File: /doc/examples/089-function-job-parameters-md5/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/089-function-job-parameters-md5/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/089-function-job-parameters-md5/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "tokenValue": "NotSoSecret",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "method": "POST",
                    "params": {
                        "token": {
                            "function": "md5",
                            "args": [
                                {
                                    "attr": "tokenValue"
                                }
                            ]
                        }
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/060-pagination-cursor-basic/users3.response
================================================
{
    "items": []
}

================================================
File: /doc/examples/060-pagination-cursor-basic/_sample_out/mock-server.users
================================================
"name","fields_id"
"John Doe","123"
"Jane Doe","234"
"Jimmy Doe","345"
"Jenny Doe","456"


================================================
File: /doc/examples/060-pagination-cursor-basic/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/060-pagination-cursor-basic/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/060-pagination-cursor-basic/",
            "pagination": {
                "method": "cursor",
                "idKey": "fields.id",
                "param": "continueAfter"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/060-pagination-cursor-basic/users1.request
================================================
GET /060-pagination-cursor-basic/users

================================================
File: /doc/examples/060-pagination-cursor-basic/users2.request
================================================
GET /060-pagination-cursor-basic/users?continueAfter=234

================================================
File: /doc/examples/060-pagination-cursor-basic/users2.response
================================================
{
    "items": [
        {
            "name": "Jimmy Doe",
            "fields": {
                "id": 345
            }
        },
        {
            "name": "Jenny Doe",
            "fields": {
                "id": 456
            }
        }
    ]
}

================================================
File: /doc/examples/060-pagination-cursor-basic/users1.response
================================================
{
    "items": [
        {
            "name": "John Doe",
            "fields": {
                "id": 123
            }
        },
        {
            "name": "Jane Doe",
            "fields": {
                "id": 234
            }
        }
    ]
}

================================================
File: /doc/examples/060-pagination-cursor-basic/users3.request
================================================
GET /060-pagination-cursor-basic/users?continueAfter=456

================================================
File: /doc/examples/105-oauth2-login/users.requestHeaders
================================================
X-Access-Token: mkoijn098uhbygv

================================================
File: /doc/examples/105-oauth2-login/_sample_out/mock-server.users
================================================
"id","name","company"
"3","John Doe","Acme Anvil 24h Service"
"234","Jane Doe","Acme Anvil Research & Development"


================================================
File: /doc/examples/105-oauth2-login/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/105-oauth2-login/users.request
================================================
GET /105-oauth2-login/users

================================================
File: /doc/examples/105-oauth2-login/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "company": "Acme Anvil 24h Service"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "company": "Acme Anvil Research & Development"
    }
]


================================================
File: /doc/examples/105-oauth2-login/token.requestHeaders
================================================
X-Refresh-Token: 1234abcd5678efgh
X-App-Key: someId

================================================
File: /doc/examples/105-oauth2-login/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/105-oauth2-login/",
            "authentication": {
                "type": "oauth20.login",
                "loginRequest": {
                    "endpoint": "token",
                    "headers": {
                        "X-Refresh-Token": {
                            "user": "refresh_token"
                        },
                        "X-App-Key": {
                            "consumer": "client_id"
                        }
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-Access-Token": {
                            "response": "credentials.access_token"
                        }
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    },
    "authorization": {
        "oauth_api": {
            "credentials": {
                "#data": "{\"status\": \"ok\",\"refresh_token\": \"1234abcd5678efgh\"}",
                "appKey": "someId",
                "#appSecret": "clientSecret"
            }
        }
    }
}

================================================
File: /doc/examples/105-oauth2-login/token.response
================================================
{
	"credentials": {
		"validUntil": "2017-10-04 12:45:09",
		"access_token": "mkoijn098uhbygv"
	}
}

================================================
File: /doc/examples/105-oauth2-login/token.request
================================================
GET /105-oauth2-login/token

================================================
File: /doc/examples/096-function-nested-from-to/orders.response
================================================
[
    {
        "id": 345,
        "created": "2017-10-04 9:40",
        "price": "$34"
    },
    {
        "id": 234,
        "created": "2017-10-06 12:36",
        "price": "$86"
    },
    {
        "id": 678,
        "created": "2017-10-09 8:51",
        "price": "$765"
    },
    {
        "id": 930,
        "created": "2017-10-10 17:25",
        "price": "$18"
    }    
]

================================================
File: /doc/examples/096-function-nested-from-to/_sample_out/mock-server.orders
================================================
"id","created","price"
"345","2017-10-04 9:40","$34"
"234","2017-10-06 12:36","$86"
"678","2017-10-09 8:51","$765"
"930","2017-10-10 17:25","$18"


================================================
File: /doc/examples/096-function-nested-from-to/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":false}

================================================
File: /doc/examples/096-function-nested-from-to/orders.request
================================================
GET /096-function-nested-from-to/orders?from=2017-10-04&to=2017-10-11

================================================
File: /doc/examples/096-function-nested-from-to/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/096-function-nested-from-to/"
        },
        "config": {
            "debug": true,
            "startDate": "2017-10-04",
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "orders",
                    "dataType": "orders",
                    "params": {
                        "from": {
                            "attr": "startDate"
                        },
                        "to": {
                            "function": "date",
                            "args": [
                                "Y-m-d",
                                {
                                    "function": "strtotime",
                                    "args": [
                                        "+7 days",
                                        {
                                            "function": "strtotime",
                                            "args": [
                                                {
                                                    "attr": "startDate"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/095-function-nested/users.requestHeaders
================================================
X-Api-Auth: Sm9obkRvZTpUb3BTZWNyZXQ=

================================================
File: /doc/examples/095-function-nested/_sample_out/mock-server.users
================================================
"id","name"
"3","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/095-function-nested/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/095-function-nested/users.request
================================================
GET /095-function-nested/users

================================================
File: /doc/examples/095-function-nested/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/095-function-nested/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/095-function-nested/",
            "http": {
                "headers": {
                    "X-Api-Auth": {
                        "function": "base64_encode",
                        "args": [
                            {
                                "function": "concat",
                                "args": [
                                    {
                                        "attr": "#username"
                                    },
                                    ":",
                                    {
                                        "attr": "#password"
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        },
        "config": {
            "#username": "JohnDoe",
            "#password": "TopSecret",
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/users3.response
================================================
{
    "hasMore": false,
    "items": [
        {
            "id": 567,
            "name": "Tomas Doe"
        },
        {
            "id": 678,
            "name": "Ondra Doe"
        }
    ]
}


================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user567.response
================================================
{
    "id": 567,
    "name": "Tomas Doe"
}


================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user678.response
================================================
{
    "id": 678,
    "name": "Ondra Doe"
}


================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user234.response
================================================
{
    "id": 234,
    "name": "John Doe"
}


================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user234.request
================================================
GET /139-pagination-hasmore-child-filter/user/234

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"
"567","Tomas Doe"
"678","Ondra Doe"


================================================
File: /doc/examples/139-pagination-hasmore-child-filter/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/_sample_out/mock-server.user-detail
================================================
"id","name","parent_id"
"123","John Doe","123"
"234","John Doe","234"
"345","John Doe","345"
"456","John Doe","456"
"567","Tomas Doe","567"
"678","Ondra Doe","678"


================================================
File: /doc/examples/139-pagination-hasmore-child-filter/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user345.response
================================================
{
    "id": 345,
    "name": "John Doe"
}


================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user123.response
================================================
{
    "id": 123,
    "name": "John Doe"
}


================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user567.request
================================================
GET /139-pagination-hasmore-child-filter/user/567

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user345.request
================================================
GET /139-pagination-hasmore-child-filter/user/345

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/139-pagination-hasmore-child-filter/",
            "pagination": {
                "nextPageFlag": {
                    "field": "hasMore",
                    "stopOn": false
                },
                "method": "offset",
                "firstPageParams": false,
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user678.request
================================================
GET /139-pagination-hasmore-child-filter/user/678

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/users1.request
================================================
GET /139-pagination-hasmore-child-filter/users

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user456.response
================================================
{
    "id": 456,
    "name": "John Doe"
}


================================================
File: /doc/examples/139-pagination-hasmore-child-filter/users2.request
================================================
GET /139-pagination-hasmore-child-filter/users?limit=2&offset=2

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/users2.response
================================================
{
    "hasMore": true,
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}


================================================
File: /doc/examples/139-pagination-hasmore-child-filter/users1.response
================================================
{
    "hasMore": true,
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/users3.request
================================================
GET /139-pagination-hasmore-child-filter/users?limit=2&offset=4

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user456.request
================================================
GET /139-pagination-hasmore-child-filter/user/456

================================================
File: /doc/examples/139-pagination-hasmore-child-filter/user123.request
================================================
GET /139-pagination-hasmore-child-filter/user/123

================================================
File: /doc/examples/038-default-headers/users.requestheaders
================================================
Accept: application/json
Accept-Encoding: gzip

================================================
File: /doc/examples/038-default-headers/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/038-default-headers/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/038-default-headers/users.request
================================================
GET /038-default-headers/users

================================================
File: /doc/examples/038-default-headers/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/038-default-headers/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/038-default-headers/",
            "http": {
                "headers": {
                    "Accept": "application/json",
                    "Accept-Encoding": "gzip"
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/088-function-baseurl-sprintf/_sample_out/mock-server.users
================================================
"id","name"
"3","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/088-function-baseurl-sprintf/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/088-function-baseurl-sprintf/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": {
                "function": "sprintf",
                "args": [
                    "http://%s/087-function-baseurl/",
                    {
                        "attr": "server"
                    }                    
                ]
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "server": "mock-server:80",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/119-function-nested-config/_sample_out/mock-server.users
================================================
"id","name"
"3","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/119-function-nested-config/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/119-function-nested-config/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": {
                "function": "concat",
                "args": [
                    "http://",
                    {
                        "attr": "server.address"
                    },
                    ":",
                    {
                        "attr": "server.port"
                    },
                    "/087-function-baseurl/"
                ]
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "server": {
                "address": "mock-server",
                "port": "80"
            },
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1345.response
================================================
{
    "id": 1345,
    "price": "$1212",
    "timestamp": "2017-12-24 12:30:53",
    "state": "delivered"
}

================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1234.response
================================================
{
    "id": 1234,
    "price": "$12",
    "timestamp": "2017-05-06 8:21:45",
    "state": "cancelled"
}

================================================
File: /doc/examples/028-advanced-deep-nesting/user234order2345.request
================================================
GET /028-advanced-deep-nesting/user/234/order/2345

================================================
File: /doc/examples/028-advanced-deep-nesting/user123orders.request
================================================
GET /028-advanced-deep-nesting/user/123/orders

================================================
File: /doc/examples/028-advanced-deep-nesting/user234order2345items.response
================================================
[]

================================================
File: /doc/examples/028-advanced-deep-nesting/user234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "description": "Good young mommy Jenny"
}

================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1345.request
================================================
GET /028-advanced-deep-nesting/user/123/order/1345

================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1345item345.response
================================================
{
    "id": "345",
    "code": "PA10",
    "name": "Pick Axe"
}

================================================
File: /doc/examples/028-advanced-deep-nesting/user234orders.request
================================================
GET /028-advanced-deep-nesting/user/234/orders

================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1345item456.request
================================================
GET /028-advanced-deep-nesting/user/123/order/1345/item/456

================================================
File: /doc/examples/028-advanced-deep-nesting/user234orders.response
================================================
[
    {
        "id": "2345",
        "price": "$42"
    }
]

================================================
File: /doc/examples/028-advanced-deep-nesting/user234.request
================================================
GET /028-advanced-deep-nesting/user/234

================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.order-items.manifest
================================================
{"destination":"in.c-mock-server.order-items","incremental":false}

================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.item-detail.manifest
================================================
{"destination":"in.c-mock-server.item-detail","incremental":false}

================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.user-detail
================================================
"id","name","description","parent_id"
"123","John Doe","Good ol' father John","123"
"234","Jane Doe","Good young mommy Jenny","234"


================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.item-detail
================================================
"id","code","name","parent_id"
"345","PA10","Pick Axe","345"
"456","TB20","Tooth Brush","456"


================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.orders
================================================
"id","price","parent_id"
"1234","$12","123"
"1345","$1212","123"
"2345","$42","234"


================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.order-detail
================================================
"id","price","timestamp","state","parent_id"
"1234","$12","2017-05-06 8:21:45","cancelled","1234"
"1345","$1212","2017-12-24 12:30:53","delivered","1345"
"2345","$42","2017-01-12 2:12:43","cancelled","2345"


================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.order-items
================================================
"id","code","parent_id"
"345","PA10","1345"
"456","TB20","1345"


================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":false}

================================================
File: /doc/examples/028-advanced-deep-nesting/_sample_out/mock-server.order-detail.manifest
================================================
{"destination":"in.c-mock-server.order-detail","incremental":false}

================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1234items.response
================================================
[]

================================================
File: /doc/examples/028-advanced-deep-nesting/users.request
================================================
GET /028-advanced-deep-nesting/users

================================================
File: /doc/examples/028-advanced-deep-nesting/user123.response
================================================
{
    "id": 123,
    "name": "John Doe",
    "description": "Good ol' father John"
}

================================================
File: /doc/examples/028-advanced-deep-nesting/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1345item456.response
================================================
{
    "id": "456",
    "code": "TB20",
    "name": "Tooth Brush"
}

================================================
File: /doc/examples/028-advanced-deep-nesting/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/028-advanced-deep-nesting/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{1:user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "1:user-id": "id"
                            },
                            "children": [
                                {
                                    "endpoint": "user/{2:user-id}/orders",
                                    "dataType": "orders",
                                    "placeholders": {
                                        "2:user-id": "id"
                                    },
                                    "children": [
                                        {
                                            "endpoint": "user/{3:user-id}/order/{1:order-id}",
                                            "dataType": "order-detail",
                                            "dataField": ".",
                                            "placeholders": {
                                                "3:user-id": "id",
                                                "1:order-id": "id"
                                            },
                                            "children": [
                                                {
                                                    "endpoint": "user/{4:user-id}/order/{2:order-id}/items",
                                                    "dataType": "order-items",
                                                    "placeholders": {
                                                        "4:user-id": "id",
                                                        "2:order-id": "id"
                                                    },
                                                    "children": [
                                                        {
                                                            "endpoint": "user/{5:user-id}/order/{3:order-id}/item/{1:item-id}",
                                                            "dataType": "item-detail",
                                                            "dataField": ".",
                                                            "placeholders": {
                                                                "5:user-id": "id",
                                                                "3:order-id": "id",
                                                                "1:item-id": "id"
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1234.request
================================================
GET /028-advanced-deep-nesting/user/123/order/1234

================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1345items.request
================================================
GET /028-advanced-deep-nesting/user/123/order/1345/items

================================================
File: /doc/examples/028-advanced-deep-nesting/user234order2345items.request
================================================
GET /028-advanced-deep-nesting/user/234/order/2345/items

================================================
File: /doc/examples/028-advanced-deep-nesting/user234order2345.response
================================================
{
    "id": 2345,
    "price": "$42",
    "timestamp": "2017-01-12 2:12:43",
    "state": "cancelled"
}

================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1345item345.request
================================================
GET /028-advanced-deep-nesting/user/123/order/1345/item/345

================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1345items.response
================================================
[
    {
        "id": "345",
        "code": "PA10"
    },
    {
        "id": "456",
        "code": "TB20"
    }
]

================================================
File: /doc/examples/028-advanced-deep-nesting/user123orders.response
================================================
[
    {
        "id": "1234",
        "price": "$12"
    },
    {
        "id": "1345",
        "price": "$1212"
    }
]

================================================
File: /doc/examples/028-advanced-deep-nesting/user123order1234items.request
================================================
GET /028-advanced-deep-nesting/user/123/order/1234/items

================================================
File: /doc/examples/028-advanced-deep-nesting/user123.request
================================================
GET /028-advanced-deep-nesting/user/123

================================================
File: /doc/examples/128-login-auth-text/users.requestHeaders
================================================
X-ApiToken: a1b2c3d435f6

================================================
File: /doc/examples/128-login-auth-text/login.response
================================================
a1b2c3d435f6

================================================
File: /doc/examples/128-login-auth-text/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/128-login-auth-text/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/128-login-auth-text/users.request
================================================
GET /128-login-auth-text/users

================================================
File: /doc/examples/128-login-auth-text/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/128-login-auth-text/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/128-login-auth-text/",
            "authentication": {
                "type": "login",
                "format": "text",
                "loginRequest": {
                    "endpoint": "login",
                    "method": "GET",
                    "headers": {
                        "X-Login": "JohnDoe",
                        "X-Password": "TopSecret"
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-ApiToken": {
                            "response": "data"
                        }
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/128-login-auth-text/login.requestHeaders
================================================
X-Login: JohnDoe
X-Password: TopSecret

================================================
File: /doc/examples/128-login-auth-text/login.request
================================================
GET /128-login-auth-text/login

================================================
File: /doc/examples/010-object-with-nested-array/_sample_out/mock-server.users_tags.manifest
================================================
{"destination":"in.c-mock-server.users_tags","incremental":false}

================================================
File: /doc/examples/010-object-with-nested-array/_sample_out/mock-server.users
================================================
"id","name","tags"
"123","John Doe","users_3ca896f39b257a4f2d2f4784e7680c87"
"234","Jane Doe","users_a15f4be71e739e1b2ea32bd4209d756e"


================================================
File: /doc/examples/010-object-with-nested-array/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/010-object-with-nested-array/_sample_out/mock-server.users_tags
================================================
"data","JSON_parentId"
"active","users_3ca896f39b257a4f2d2f4784e7680c87"
"admin","users_3ca896f39b257a4f2d2f4784e7680c87"
"active","users_a15f4be71e739e1b2ea32bd4209d756e"


================================================
File: /doc/examples/010-object-with-nested-array/users.request
================================================
GET /010-object-with-nested-array/users

================================================
File: /doc/examples/010-object-with-nested-array/users.response
================================================
{
    "members": [
        {
            "id": 123,
            "name": "John Doe",
            "tags": ["active", "admin"]
        },
        {
            "id": 234,
            "name": "Jane Doe",
            "tags": ["active"]
        }
    ]
}


================================================
File: /doc/examples/010-object-with-nested-array/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/010-object-with-nested-array/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/104-oauth2-hmac/users.requestHeaders
================================================
Authorization: MAC id="testToken", ts="1492958193", nonce="605cce2a2f687253", mac="ae96f93def8f02770f30e858e074b2a7

================================================
File: /doc/examples/104-oauth2-hmac/_sample_out/mock-server.users
================================================
"id","name","company"
"3","John Doe","Acme Anvil 24h Service"
"234","Jane Doe","Acme Anvil Research & Development"


================================================
File: /doc/examples/104-oauth2-hmac/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/104-oauth2-hmac/users.request
================================================
GET /104-oauth2-hmac/users

================================================
File: /doc/examples/104-oauth2-hmac/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "company": "Acme Anvil 24h Service"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "company": "Acme Anvil Research & Development"
    }
]


================================================
File: /doc/examples/104-oauth2-hmac/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/104-oauth2-hmac/",
            "authentication": {
                "type": "oauth20",
                "format": "json",
                "headers": {
                    "Authorization": {
                        "function": "concat",
                        "args": [
                            "MAC id=\"",
                            {
                                "authorization": "data.access_token"
                            },
                            "\", ts=\"",
                            {
                                "authorization": "timestamp"
                            },
                            "\", nonce=\"",
                            {
                                "authorization": "nonce"
                            },
                            "\", mac=\"",
                            {
                                "function": "md5",
                                "args": [
                                    {
                                        "function": "hash_hmac",
                                        "args": [
                                            "sha256",
                                            {
                                                "function": "implode",
                                                "args": [
                                                    "\n",
                                                    [
                                                        {
                                                            "authorization": "timestamp"
                                                        },
                                                        {
                                                            "authorization": "nonce"
                                                        },
                                                        {
                                                            "request": "method"
                                                        },
                                                        {
                                                            "request": "resource"
                                                        },
                                                        {
                                                            "request": "hostname"
                                                        },
                                                        {
                                                            "request": "port"
                                                        },
                                                        "\n"
                                                    ]
                                                ]
                                            },
                                            {
                                                "authorization": "data.mac_secret"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    },
    "authorization": {
        "oauth_api": {
            "credentials": {
                "#data": "{\"status\": \"ok\",\"access_token\": \"testToken\", \"mac_secret\": \"iAreSoSecret123\"}",
                "appKey": "clientId",
                "#appSecret": "clientSecret"
            }
        }
    }
}

================================================
File: /doc/examples/008-single-object-in-array/_sample_out/mock-server.users
================================================
"id","name","version"
"123","John Doe","2"


================================================
File: /doc/examples/008-single-object-in-array/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/008-single-object-in-array/users.request
================================================
GET /008-single-object-in-array/users

================================================
File: /doc/examples/008-single-object-in-array/users.response
================================================
{
    "member": {
        "history": [
            {
                "id": 123,
                "name": "John Doe",
                "version": 2
            },
            {
                "id": 123,
                "name": "Jonh Doe",
                "version": 1
            }
        ]
    }
}


================================================
File: /doc/examples/008-single-object-in-array/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/008-single-object-in-array/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "member.history.0"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/003-multiple-arrays-in-object/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/003-multiple-arrays-in-object/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/003-multiple-arrays-in-object/users.request
================================================
GET /003-multiple-arrays-in-object/users

================================================
File: /doc/examples/003-multiple-arrays-in-object/users.response
================================================
{
    "users": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ],
    "userTypes": [
        "member",
        "guest"
    ]
}

================================================
File: /doc/examples/003-multiple-arrays-in-object/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/003-multiple-arrays-in-object/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/058-pagination-response-param-override/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/058-pagination-response-param-override/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/058-pagination-response-param-override/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/058-pagination-response-param-override/",
            "pagination": {
                "method": "response.param",
                "responseParam": "scrolling.next_page",
                "includeParams": true,
                "queryParam": "page"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items",
                    "params": {
                        "page": "start",
                        "orderBy": "id"
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/058-pagination-response-param-override/users1.request
================================================
GET /058-pagination-response-param-override/users?page=start&orderBy=id

================================================
File: /doc/examples/058-pagination-response-param-override/users2.request
================================================
GET /058-pagination-response-param-override/users?page=2&orderBy=id

================================================
File: /doc/examples/058-pagination-response-param-override/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/058-pagination-response-param-override/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ],
    "scrolling": {
        "next_page": 2
    }
}

================================================
File: /doc/examples/019-different-delimiter/_sample_out/mock-server.users
================================================
"id","name","primary_address_street","primary_address_city","primary_address_state","secondary_address"
"123","John Doe","Elm Street","New York","","{""street"":""Cemetery Ridge"",""city"":""New York""}"
"234","Jane Doe"," Blossom Avenue","","U.K.","{""street"":""1313 Webfoot Walk"",""city"":""Duckburg"",""state"":""Calisota""}"


================================================
File: /doc/examples/019-different-delimiter/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/019-different-delimiter/users.request
================================================
GET /019-different-delimiter/users

================================================
File: /doc/examples/019-different-delimiter/users.response
================================================
{
    "members": [
        {
            "id": 123,
            "name": "John Doe",
            "primary.address": {
                "street": "Elm Street",
                "city": "New York"
            },
            "secondary.address": {
                "street": "Cemetery Ridge",
                "city": "New York"
            }            
        },
        {
            "id": 234,
            "name": "Jane Doe",
            "primary.address": {
                "street": " Blossom Avenue",
                "state": "U.K."
            },
            "secondary.address": {
                "street": "1313 Webfoot Walk",
                "city": "Duckburg",
                "state": "Calisota"
            }
        }
    ]
}


================================================
File: /doc/examples/019-different-delimiter/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/019-different-delimiter/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members",
                    "responseFilter": "secondary.address",
                    "responseFilterDelimiter": "#"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/127-pagination-stop-field/users3.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ],
    "scroller": {
        "count": 4,
        "page": 3
    }
}

================================================
File: /doc/examples/127-pagination-stop-field/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/127-pagination-stop-field/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/127-pagination-stop-field/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/127-pagination-stop-field/",
            "pagination": {
                "method": "pagenum",
                "limitStop": {
                    "count": 3
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/127-pagination-stop-field/users1.request
================================================
GET /127-pagination-stop-field/users?page=1

================================================
File: /doc/examples/127-pagination-stop-field/users2.request
================================================
GET /127-pagination-stop-field/users?page=2

================================================
File: /doc/examples/127-pagination-stop-field/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ],
    "scroller": {
        "count": 4,
        "page": 2
    }
}

================================================
File: /doc/examples/127-pagination-stop-field/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ],
    "scroller": {
        "count": 4,
        "page": 1
    }
}

================================================
File: /doc/examples/127-pagination-stop-field/users3.request
================================================
GET /127-pagination-stop-field/users?page=3

================================================
File: /doc/examples/017-upgrading-array/_sample_out/mock-server.users_tags.manifest
================================================
{"destination":"in.c-mock-server.users_tags","incremental":false}

================================================
File: /doc/examples/017-upgrading-array/_sample_out/mock-server.users
================================================
"id","name","tags"
"123","John Doe","users_c6f3e32262682b6efd6c85ad97d2d503"
"234","Jane Doe","users_92df9d5b9af8821316172285b196318e"


================================================
File: /doc/examples/017-upgrading-array/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/017-upgrading-array/_sample_out/mock-server.users_tags
================================================
"data","JSON_parentId"
"active","users_c6f3e32262682b6efd6c85ad97d2d503"
"active","users_92df9d5b9af8821316172285b196318e"
"admin","users_92df9d5b9af8821316172285b196318e"


================================================
File: /doc/examples/017-upgrading-array/users.request
================================================
GET /017-upgrading-array/users

================================================
File: /doc/examples/017-upgrading-array/users.response
================================================
{
    "members": [
        {
            "id": 123,
            "name": "John Doe",
            "tags": "active"
        },
        {
            "id": 234,
            "name": "Jane Doe",
            "tags": ["active", "admin"]
        }
    ]
}


================================================
File: /doc/examples/017-upgrading-array/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/017-upgrading-array/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members"
                }                
            ]
        }
    }
}


================================================
File: /doc/examples/110-incremental-relative/_sample_out/mock-server.users
================================================
"id","name","previous","modified"
"3","John Doe","","2017-04-20 19:05:12"
"234","Jane Doe","","2017-04-21 19:30:45"


================================================
File: /doc/examples/110-incremental-relative/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":true}

================================================
File: /doc/examples/110-incremental-relative/users.request
================================================
GET /110-incremental-relative/users?from=2017-09-06&to=2017-09-07

================================================
File: /doc/examples/110-incremental-relative/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "modified": "2017-04-20 19:05:12"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "modified": "2017-04-21 19:30:45"
    }
]


================================================
File: /doc/examples/110-incremental-relative/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/110-incremental-relative/"
        },
        "config": {
            "debug": true,
            "incrementalOutput": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "params": {
                        "from": {
                            "function": "date",
                            "args": [
                                "Y-m-d",
                                {
                                    "function": "strtotime",
                                    "args": [
                                        "-1 day",
                                        {
                                            "time": "currentStart"
                                        }
                                    ]
                                }
                            ]
                        },
                        "to": {
                            "function": "date",
                            "args": [
                                "Y-m-d",
                                {
                                    "time": "currentStart"
                                }
                            ]
                        }
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/110-incremental-relative/in/state.json
================================================
{
	"time": {
		"previousStart": 1492606006
	},
	"json_parser.struct": {
		"data": {
			"_users": {
				"[]": {
					"_id": {
						"nodeType": "scalar",
						"headerNames": "id"
					},
					"_name": {
						"nodeType": "scalar",
						"headerNames": "name"
					},
					"_previous": {
						"nodeType": "scalar",
						"headerNames": "previous"
					},
					"nodeType": "object",
					"headerNames": "data"
				},
				"nodeType": "array"
			}
		},
		"parent_aliases": []
	},
	"json_parser.structVersion": 3
}

================================================
File: /doc/examples/125-user-data-legacy/_sample_out/mock-server.users
================================================
"id","name","tag","e4d23e841d8e8804190027bce3180fa5","price"
"123","John Doe","development","","$10"
"234","Jane Doe","development","","$10"


================================================
File: /doc/examples/125-user-data-legacy/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":true}

================================================
File: /doc/examples/125-user-data-legacy/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/076-user-data/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "compatLevel": 1,
            "userData": {
                "tag": "development",
                "price": "$10"
            },
            "incrementalOutput": true,
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/122-multiple-filters-legacy/_sample_out/mock-server.users_contacts
================================================
"type","properties","primary","JSON_parentId"
"address","{""street"":""Elm Street"",""city"":""New York""}","","users_d079b018173b1229bb0482d5c191c659"
"email","john.doe@example.com","1","users_d079b018173b1229bb0482d5c191c659"
"address","{""street"":""Bates Street"",""city"":""Chicago"",""state"":""USA""}","","users_71a10bd68f1f50242e784f7c4e205d15"
"phone","123 456 789","1","users_71a10bd68f1f50242e784f7c4e205d15"


================================================
File: /doc/examples/122-multiple-filters-legacy/_sample_out/mock-server.users
================================================
"id","name","tags","contacts"
"123","John Doe","{""items"":[""active"",""admin""]}","users_d079b018173b1229bb0482d5c191c659"
"234","Jane Doe","none","users_71a10bd68f1f50242e784f7c4e205d15"


================================================
File: /doc/examples/122-multiple-filters-legacy/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/122-multiple-filters-legacy/_sample_out/mock-server.users_contacts.manifest
================================================
{"destination":"in.c-mock-server.users_contacts","incremental":false}

================================================
File: /doc/examples/122-multiple-filters-legacy/users.request
================================================
GET /122-multiple-filters-legacy/users

================================================
File: /doc/examples/122-multiple-filters-legacy/users.response
================================================
{
    "members": [
        {
            "id": 123,
            "name": "John Doe",
            "tags": {
                "items": ["active", "admin"]
            },
            "contacts": [
                {
                    "type": "address",
                    "properties": {
                        "street": "Elm Street",
                        "city": "New York"
                    }
                },
                {
                    "type": "email",
                    "primary": true,
                    "properties": "john.doe@example.com"                    
                }
            ]
        },
        {
            "id": 234,
            "name": "Jane Doe",
            "tags": "none",
            "contacts": [
                {
                    "type": "address",
                    "primary": false,
                    "properties": {
                        "street": "Bates Street",
                        "city": "Chicago",
                        "state": "USA"
                    }
                },
                {
                    "type": "phone",
                    "primary": true,
                    "properties": "123 456 789"                    
                }
            ]
        }
    ]
}


================================================
File: /doc/examples/122-multiple-filters-legacy/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/122-multiple-filters-legacy/"
        },
        "config": {
            "debug": true,
            "compatLevel": 2,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "members",
                    "responseFilter": [
                        "contacts[].properties",
                        "tags"
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/130-unsupported-nested-array/_sample_out/rows
================================================
"data"
"[""2017-09-14"",""abc"",""1"",""2"",""3"",""4"",""5"",""6""]"
"[""2016-09-14"",""cdf"",""7"",""8"",""9"",""10"",""11"",""12""]"


================================================
File: /doc/examples/130-unsupported-nested-array/_sample_out/rows.manifest
================================================
{"incremental":false}

================================================
File: /doc/examples/130-unsupported-nested-array/users.request
================================================
GET /130-unsupported-nested-array/rows

================================================
File: /doc/examples/130-unsupported-nested-array/users.response
================================================
{
    "rows" : [
        ["2017-09-14","abc","1","2","3","4","5","6"],
                ["2016-09-14","cdf","7","8","9","10","11","12"]
        ]
}

================================================
File: /doc/examples/130-unsupported-nested-array/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://mock-server:80/130-unsupported-nested-array/"
    },
    "config": {
      "debug": true,
      "jobs": [
        {
          "endpoint": "rows",
          "dataField": "rows",
          "dataType": "rows"
        }
      ]
    }
  }
}

================================================
File: /doc/examples/141-https-self-signed/_sample_out/mock-server.users
================================================
"id","name","married"
"123","John Doe","1"
"234","Jane Doe",""


================================================
File: /doc/examples/141-https-self-signed/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/141-https-self-signed/users.request
================================================
GET /141-https-self-signed/users

================================================
File: /doc/examples/141-https-self-signed/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "married": true        
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "married": false
    }
]

================================================
File: /doc/examples/141-https-self-signed/https/ca/rootCA.srl
================================================
581396B29A6CF2EE49346F4EBCA6DFFD0D9793BD


================================================
File: /doc/examples/141-https-self-signed/https/ca/rootCA.key
================================================
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,F1567F786CE68D6A

vOtJfPQS2xemL8vHXXPwguiR7thvPuEMCxNANjmfVInUzkFZR0IZM4b9dtXxUly9
a7Jkl87X1tqOZLv7IVJ5DFLZR91vblUOI+BqzKJmumWbFYba4H1DMe9wBho4s2wx
Eja2xfgkht9iewiPOAcAXVGnn7PQ9d7I3Cz9ygMIdfav90ZRzDhpoRT7ZxfJdZXM
PLEwSZUJcGCW9PB8suN2JK2WFyQ4ENNC3dZb3kk35BUsz8zGs/imrQmV8SmYSTP1
KNMuZrCU+5xIVND/VuXzckKGCvf8W0GEJ3ojHblZcQuC+q1f3kgTLPxZlpHECqmW
BNKcPCgBa8NxxUqj+Qx4yN2kZY9nPfc6715swjgHrKvEFEZjP1LapIggl9CDcbTS
8dHN/hmY0W+hatn/p1hWLiMatCHuJ2Vq7lKIPdpDy+6fprtBXrLE+ZWaYv/ZTgpy
IruIYfZY8Xdum41ZKT3aVSOXFD3LnRPYeWLcX+cckSbenj7lbuDQ1JWoCbArSoCs
+pTSeZjZ/4MtFPHzZk1+XFls9JQnRc5rDe1JYxDG0ZbYnl3JzftpQWmX/N22acJb
bIJby9QqUQui4Y3pDFShHTceH1O3k0uBCvC4/57D9d18CJI+CAQ285GC9nMMwF2m
DgccUnMSzJQGRpHmzT+NMm0XQmXiSU173N78vYx6PuvSmHPZUl4dyXVVYpPtZZ4y
p/g+xeiD/1eN1aKBzR4FUDtNddUOETJXREMFVwILIg+c6vzOQiXGP93dfpcoQojr
kKjgdxdKRFr4hYPSYgQ+7MlzwEhYQ4k1cmMupoAV/+uMfCMgtQUoGeifamQ3zirx
IG7dqyr39YLApa5lK1R582jFX+6xQwo4cMuE7w/KisMVY830uWHCpUofENhLGlax
mi219kasNbyO/asbrmxeNiDpcsyB5XvX+qg9u/wA5zdls8EP0u/CsuBLr68XR+CR
ms8EXZ8/cg93693hW8wu8efPtSUgPBc1tK12uZ8urZlsFulzp8SXDVw7nTksyZtR
JEsgnjME0ncBjvB5OXRB98SBZB1LU1CgjcK33pG+EVw8R+PfTe7gBmQd4iO+L0Bg
vK9x/106kuoRIKLO2hMJMuGey8rt8x6rO3ixZbly+/RUBDFCME4JAY74px018dfg
Q8vfXl0AwTRXKuAq0VKJmGZ2csi2YhZ8ZTO+15s0J5rVJ1esdMt9hgpZUed9zRaL
qZbtk97RalY3hbV2bEMjN1oNHGsQRwMIn/VkMLu1HscyN3k+2oBibwrnQpevUE+a
Yfa4N6I4K5Iq2HMH9kbWEZyuXW1mFogcmaizqnpQ105H6aou2kwd5Hic7nCnwMkK
j5EI30HQwUi88mVZpa1hapMfZ9NmQMTQdYAJ2FfWnwgM3mFpYGDsoiUUM+mQazTM
lyDnlbFKYloSW8Uxok4R2Fr3JLyO1yCEJKr5k7yDgCNPCMtKVdnC8IYsRbGYhfvL
CBY9xd1+HQYCfV/7+jdpuQAaxGa8VMJci+Lf6DkHHojMelIuDuLvujnql/wDRfUk
1d5dLqRDNgsohYRW/XRfFJohQacNDWvyzg7/Pk+GebCdjW9JpecJgCAbvFPDTfxm
VllD10LuWXDNNE1+DAPPxFGqQFiAhOx54LYW/07vE9sNGf7jRnhDCsjcn6aRDW3U
XTtdGA+teOdbPsYjvmQyVW91xS7ftAaEVU2cKevRPRulsoTEGEL5KPAaGGu03KIM
ky4ui/Bwvw4X+d6V40NzbFr/ibmFjUShzIN+7jtGCOoyPwif6OREY2Avv0r+sTUD
ReYraVyHHJEmwCyhz1QHFFeVDt18LKB3jxBzlB4mQCuRqwvcNI245V3RdLZYIXa4
rr2++G/AXoy9PHcJ0szBPOWcwFnEjn0rE2grmwe37X6gqbwrb7xtRy+RSp1ibYBy
bwK31JlybgxjOZaJeC+acU9VVmVCNQOaTO6rKJGzD5tKucGCHW8CekDWf4wzzPre
chxmScc4PEdgfa82+WtYU1P0RpAcjDi19N8MqRpJtoimqjw+J0l0qx9G6RHfY2j9
Kb0fIMepqum2RGgH3RZCjit44rHaM6mOIVoLL27zmtutHfVNN7LC+x9je35eQmzI
Vc6AgA6PkjHK9vjM8rijJDTHGWB0T04gLPGPXkwvHbZuKAKv4tcaKO7YOI3uQpM+
6wY3GAXpkKdEWwQPOV6+srgeaf8LxKz7H1pTdC7cwK9J20hP4WMkO2vB6N3s31oK
KIDvKLNULvts7cLXhq4i2HNa+dlbRpKJGIR/vCdf7fa6Lf7YcNICdcx0avW3oWaJ
JrxIP+eif7IE9RQF/46nw8MUlroPNJXbHLO4JO7Ouh/Kmt2e38ocb/sznUiRGNP4
mtaKRoMUGvDyXemBtaZesC8ST11g4nAulWs2HjG+f4txavJdwEMf6YOcxvZGGsbI
cwWZ/DyArKiNvk7il7HbRma+7Er1OfZjdQeLrhAH7tYKcLm77J6xWxHCQ71lK/9Q
hJRQIPa5gNNlCpXDXrjcJzUa0nQumi7bYgLyfeZ1WX5iJEZitieD8qd5F27PAM04
8DNVdOrnajTI1oQ79RB1rQmtB5XGSRoiz0w+EDYzqtPCe3A0B4HMNGShxjPxDCj+
sD737hOaXu+zJA7gNje7k/j4DzoFVuG249QR2O2czM30zUANFzSbrXLvc0WkFO36
ovD4+0NrRjfAKWHfA6vGp2xNoL3yTTUjyxpo/bAb3fpV1UPDqufhYhLmqD03lIAE
mcl2ZCMIT8G4MnTIbxoTRVXeY04UoqeVxD+C4teHx13Ro1lkkR/weHqNrrxc2pdL
n+CiDvFnuy7O04oprND3DYuYvXqk5vWCh1OL3+Ak3Oemaf0/fuCENxLYlSHJoP2i
ZLQb7+SrXt37M69Wac+DW0aPSryfNpdN6X0XS4Hj35auX2WX8RzLzXxhkEPN3RkZ
wujLbjKIH73Z9D7ZhhNscDowhLdqmxPk1YHVcIAK0oljIEIjS8hpTHRsdWPxrmAE
P0tRn3lLHnJDjqRH9WIGhYgQ5huOK8+5wWzY8CoBmohCDdPU5NRL5Szlq9re4NLm
wyBUK1B+mUaOjerb4B5DpRbYAyBYuQrY/DarZ/SsgMajsUByLrvMuKBtkjDrFaj5
-----END RSA PRIVATE KEY-----


================================================
File: /doc/examples/141-https-self-signed/https/ca/rootCA.crt
================================================
-----BEGIN CERTIFICATE-----
MIIFwTCCA6mgAwIBAgIUbEzN8C/u/cYjsKNYWR0rNYv5OIcwDQYJKoZIhvcNAQEL
BQAwcDELMAkGA1UEBhMCWFgxFTATBgNVBAcMDERlZmF1bHQgQ2l0eTEcMBoGA1UE
CgwTRGVmYXVsdCBDb21wYW55IEx0ZDEsMCoGA1UEAwwjbW9jay1zZXJ2ZXItaHR0
cHMtc2VsZi1zaWduZWQtcHJveHkwHhcNMjAxMTMwMTkzOTEzWhcNNDgwNDE3MTkz
OTEzWjBwMQswCQYDVQQGEwJYWDEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYD
VQQKDBNEZWZhdWx0IENvbXBhbnkgTHRkMSwwKgYDVQQDDCNtb2NrLXNlcnZlci1o
dHRwcy1zZWxmLXNpZ25lZC1wcm94eTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCC
AgoCggIBAKNM0Pj06Xig/fETSdajoEaXaVhSR1Euno4Lu84VljYsIJnccmgXM8nz
W6N0IP/Ra2o0ywXM10MRuTkiyRx/bS6ehtEmVI1E2HLXM56Ucq2ALdNjpWQMzqzZ
4A82+qFInLPX6I+9tbWkz7SDtiq6S0EH93yBJhm3GPdC4UYrlCvyIkLnhaNUKgMx
/yC+NFnXLakFwzRTn2M4qrHnXbVoAmRCbmD+IYrEwiwfMmfyy8HPvaPArS0m15Mg
G3+otCJBLuhGVAyca0muybCe4yKtFKQ4nRvYmpN4POy3OirC+/Wm3aKXsOwWbu5w
zheOd9lL2yTMkoP0ECPbdNtFSM1ugipwazHDQAQfY8wRVEWoOXgMGd6APphkeW0w
1qnZh76hcF4yE533PWIaUILb01qo4By6ViDrULocCoGOKepVjAuWvXRNDqQL0dpQ
OIFlo0RSeZqNizqoGCSSVz+t39BdZeJsda1ELYGDV+a1kdCS3XgaSA+03HvR8EuV
tpcIjOYCs1OYG+7lbXpMtzvf6PtkkUuLB2NeE1gOzGVDMDq4OgBSn6lPHfIP3KrE
RYR/EZF2iz+cWeKEJepOsLApeLUwJn+GcDf8fq8cl+9UFmrskxwMz9JFb/oD3VfE
nHNb1RwL23vN3IcK0owdd+ONQCmop9X9+HjghP/OH0OeRExlAF+fAgMBAAGjUzBR
MB0GA1UdDgQWBBS1WFDSy3qTfmm6sM2Zn8c8w4Zl7jAfBgNVHSMEGDAWgBS1WFDS
y3qTfmm6sM2Zn8c8w4Zl7jAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUA
A4ICAQAxGPW/vKgenoTz5Gf9S9gzsGwnz8INbmfOHFwi0KHY9OFJdOcr8DTRKf8H
aKjXEwvNZit5rp3AZx3nZdHlu0rE/ms1qNylR8X57YAlHGkvYnpBbFtxX5SYiwuT
E3SDofnX5asHpAwLT4RzNXi6q3F1PhFdyQ/vzcgWQAiuAG8mMdTpNW3JWZDfnb5W
3gj3GeQIP1FIsRZXtTyYvJ59Rgx8wZQRWfLwTGugbnx3qoBUjwUCj6xMyVTfZzuK
gndt5oh80b82uW6c4grP+JE7gblEzTgTrt7xV9plL/P2KGmTQQJhtInxYDkM9k+L
BJ65+YKZZRvA8f2YH4r341uQQSscE7Jalkvh/CP2JhHspV0HROEb89NmoPv+lwLq
+QRktApfr2wcKlGJGjCkT7IBOkDdAOF35enDoYkWsQn0lrjIR4t13FRDVQWCC09D
iMEzM1/ds+uWTxYunc0FgxYUSAxrS7PUnZoUozPuEMBQ/G5+rLFdLPUKAXle86lk
R7OXQI/aJRLrz1A3U6+c+p52VZfg2qliDQCSK/pqUHRWTOqWbTekRyoswrdDLsmI
rvlWV2p7+bbWbk51buU7XYK3dztQqCLnRXFXWT4CmDjvcE3VFOW+N0N8tpnOh6M/
I8Z0zg0YI+9V7YdofG4+hdfyMLXECz+O2U1ai8JVbYoiQBui3Q==
-----END CERTIFICATE-----


================================================
File: /doc/examples/141-https-self-signed/https/certs/cert.pem
================================================
-----BEGIN CERTIFICATE-----
MIIEZzCCAk8CFFgTlrKabPLuSTRvTrym3/0Nl5O9MA0GCSqGSIb3DQEBCwUAMHAx
CzAJBgNVBAYTAlhYMRUwEwYDVQQHDAxEZWZhdWx0IENpdHkxHDAaBgNVBAoME0Rl
ZmF1bHQgQ29tcGFueSBMdGQxLDAqBgNVBAMMI21vY2stc2VydmVyLWh0dHBzLXNl
bGYtc2lnbmVkLXByb3h5MB4XDTIwMTEzMDE5NDA1NFoXDTQ4MDQxNzE5NDA1NFow
cDELMAkGA1UEBhMCWFgxFTATBgNVBAcMDERlZmF1bHQgQ2l0eTEcMBoGA1UECgwT
RGVmYXVsdCBDb21wYW55IEx0ZDEsMCoGA1UEAwwjbW9jay1zZXJ2ZXItaHR0cHMt
c2VsZi1zaWduZWQtcHJveHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
AQDDf+vS3gnOU8dibGh1VTrEPry172oWPEp4Ybn31h5+NWpnmKWufGRc3HeZ0/cJ
J4V4HQmiCXc6yGxStx3EMaGT11DzSvbguZChSj+DxckFgxuox4wL7bOzScM/yWkL
BK21wxLl92RiKlgBvdt3bDyJbOraxGSKBNRBBLM6Wh1JWc06YxF44e0T3B7H/Qtn
WPXmsi1YPbYAxlkeoeJ6WNwfzEuLMnFf/fWgL2TgFwLIfhqOzlyU2CyHSAhOX3Ny
5x3wIMxdT51MW601iCKhdluN6aNM0lTgHNAiz7RD0ZFtqWDN0XvOzTU+7jxA0926
qtk18g9XU9R3WDNw1p6FNbdrAgMBAAEwDQYJKoZIhvcNAQELBQADggIBAFWQJM3l
Wimy7DYKn3Dy1RH9Pd4mIT0TJ4V1T/eszbWB7YRDdHuYyf7Sk0QDZPLMqR2sYxMc
ShdrQpOgU/o/iIkhwAjW6LzbuiQJULd74u3J08RPAEpSSJFJwQD4ZU2B7nhoqxft
oxUzoytfUSnsMA2EUJFYsPvkygyCihudNR+44ONq771W9HfvFNH3YdQyxjI/RtwT
CiYdxQFiS5UvWCBbJAVmRWLm1gnJbG+MYBye4mGfyiZ3iMq/Wnb++favC8jNDYSO
okha+LQBpscQZ3fbn5srh7uQGXOkQjT8gsd31neEFfXbVlrnUsHAXMHHgUgNrF+k
PVp0321fzmvwxGwjB4/jHd+1ImDwcDJ6LseKwtbriN5EDbwEV/mIME2/MjFfqFhV
M3AkhgW/sY4KvAD+FZ77U3xR4iIQgknjAPEYgqKDHF0h0295fwhRl7wmw/nO6Z8e
IHP+YOH7gcdYskr2cnXXD9J2z0T3/VZUyZjnrmVqCdWq4hggea1qKYw6qHbtuETV
9CCxLE+LTrFfYHHkQI2Jg8E+NDApjOodFoSaLphTzK8FZoyn9ttrR8UcFFMW95nt
9POau3WtvfYvAve0h4UYj9ZMotNnTFWyhmgn9gu6gvuyVfvUKJlsW+KQbJ8bJraN
0SLVT2nUF/WUpJde3jvWs+OtQCQEUZds5qfy
-----END CERTIFICATE-----


================================================
File: /doc/examples/141-https-self-signed/https/certs/csr.pem
================================================
-----BEGIN CERTIFICATE REQUEST-----
MIICtTCCAZ0CAQAwcDELMAkGA1UEBhMCWFgxFTATBgNVBAcMDERlZmF1bHQgQ2l0
eTEcMBoGA1UECgwTRGVmYXVsdCBDb21wYW55IEx0ZDEsMCoGA1UEAwwjbW9jay1z
ZXJ2ZXItaHR0cHMtc2VsZi1zaWduZWQtcHJveHkwggEiMA0GCSqGSIb3DQEBAQUA
A4IBDwAwggEKAoIBAQDDf+vS3gnOU8dibGh1VTrEPry172oWPEp4Ybn31h5+NWpn
mKWufGRc3HeZ0/cJJ4V4HQmiCXc6yGxStx3EMaGT11DzSvbguZChSj+DxckFgxuo
x4wL7bOzScM/yWkLBK21wxLl92RiKlgBvdt3bDyJbOraxGSKBNRBBLM6Wh1JWc06
YxF44e0T3B7H/QtnWPXmsi1YPbYAxlkeoeJ6WNwfzEuLMnFf/fWgL2TgFwLIfhqO
zlyU2CyHSAhOX3Ny5x3wIMxdT51MW601iCKhdluN6aNM0lTgHNAiz7RD0ZFtqWDN
0XvOzTU+7jxA0926qtk18g9XU9R3WDNw1p6FNbdrAgMBAAGgADANBgkqhkiG9w0B
AQsFAAOCAQEAKO5GUyZsZ+LGpXBw7VMosiVgNNebdmk6kU3KEUNhKcXnDQrRX1aT
gpqbziubMVrZE6uK7io0mkpHSDJavW3uuTIbrB3AO0poths8yK9RYAS8gu/XJTw5
6gz5NqXTNzZh3QPDqFVlI2cdEqjIOaxU3SezjDoPrcB0SIDl6BRyS/FmN2m6IYtd
DNZt6LdJhYgpDCwRRpV/NV6+QmWMawVXDr3tJGI+H1DlVDraX0o6DMhrJebIOpqI
i+Hvk6JPXFsuPlcuTsMe/2mtE83TVGccuALxYbma/ct6DhM3+G/ps6hEdtIf10y0
2Ov8aYliguSZscNxUInK9lyud3Yb1aDaXA==
-----END CERTIFICATE REQUEST-----


================================================
File: /doc/examples/141-https-self-signed/https/certs/key.pem
================================================
-----BEGIN RSA PRIVATE KEY-----
MIIEpgIBAAKCAQEAw3/r0t4JzlPHYmxodVU6xD68te9qFjxKeGG599YefjVqZ5il
rnxkXNx3mdP3CSeFeB0Jogl3OshsUrcdxDGhk9dQ80r24LmQoUo/g8XJBYMbqMeM
C+2zs0nDP8lpCwSttcMS5fdkYipYAb3bd2w8iWzq2sRkigTUQQSzOlodSVnNOmMR
eOHtE9wex/0LZ1j15rItWD22AMZZHqHieljcH8xLizJxX/31oC9k4BcCyH4ajs5c
lNgsh0gITl9zcucd8CDMXU+dTFutNYgioXZbjemjTNJU4BzQIs+0Q9GRbalgzdF7
zs01Pu48QNPduqrZNfIPV1PUd1gzcNaehTW3awIDAQABAoIBAQC0TdeWbFgI5fW+
zZLtnASOF/p9pWhnR4W7Tw5wCBepeORA1WUA7xK1HlRkGDz/QWb0Z3uJ6UcAfPaC
twYJ+2g07OFo8VuN2TcNumenxZNntQqeeCOuoLUahs4/lyd9FPyM5XQZijgX3Uu7
l3nAw591c3GLAJRlQpzrtkUCbTgTe9TlIzE6YrNlMzQyKNCRFOSXgOW1m0hq6u6k
C/ebqyeCUemgVviCkfQFuPbY/YSa9OTrqaeNEdgIug4aRJ4x8JCuVR/zeKSyv2oX
k/Y+7FJA5hv5vm7LjsT14xuGt41oiHfRnF1jso8nZnd/vIMII4btF+FfMZhdphle
oL/71rgxAoGBAOxspcqkxjuLSMJ1hkZKdi8akwtqDKqyBwIBKPhC4vO09pWer8sR
2iQuywQZu+oi/aVcFENAJuTldoNQW4wgjvUEa34HsBC9KHBCPufY/iB+Z2ZieOX4
L+pn9QNZfc1DIk6aoGbSCmF+HSD/DMnt4fTRqvZp1uLwWgWS7vEDTVSJAoGBANOv
0OBkn9jjo2k+JqRFowoaxVUxivlmRggvNA6sF3deTgJAyszblU2UWvgDNEfUvcQD
I80BhTbdsZ+bKYzRPw3U4m7Ug17JKlCV7eK2d4F13BnSUfoFlEhBT5LS13PhLfg3
KeuAWuDkPTG2T22sGiBzg2UM1ZitGMXsQzGPcxdTAoGBAOBUFtu4jP9ioZ8htE5t
yMXZCT0DWxF76npUb3Ngw8dKJc7Byzt7rOg4Hhm98TewC8wjGnbVIBKAR3tBfBvx
qLODhhsHYGABm6Uotld25Wofhiz3so9CdvSLv0d2Wo+w65R500i8c20eJLVyS8gu
FwAdEYLN2j9qn4A6cs3svCtBAoGBALz0LAuQZkqQb3Xqv01Ux4KmgMxZ68ZQ72Qw
1lPecxfe+tzx/tQ7kRrtuQG2wnz3vefwMY21tLZTz1A7jSwgPxtWkkQBt73s7LOA
ERaUbzoE/VGjNf9p6YFRovjY8O6D6qesfeOz7+rccG8mX+HyhGPBGGEjwqmEoR9S
lGvxsvb3AoGBAJaPnu+IrZ0AjriemYOX+B1XxIy+g5mkBul537z5yUqvYZobMMk/
6TQQjJyUnnh36WRjs11Vr2kIE99YyTCRjljfsPFWnW5Ugt7e9/G4+L3Kk8FG7RUC
T1gKxcKcFomctjOS7rVK8/JxpV7toRhDWkcqMKCTXBnfwW3Iarl1gWuI
-----END RSA PRIVATE KEY-----


================================================
File: /doc/examples/141-https-self-signed/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "https://mock-server-https-self-signed-proxy:443/141-https-self-signed/",
            "caCertificate": "-----BEGIN CERTIFICATE-----\nMIIEZzCCAk8CFFgTlrKabPLuSTRvTrym3/0Nl5O9MA0GCSqGSIb3DQEBCwUAMHAx\nCzAJBgNVBAYTAlhYMRUwEwYDVQQHDAxEZWZhdWx0IENpdHkxHDAaBgNVBAoME0Rl\nZmF1bHQgQ29tcGFueSBMdGQxLDAqBgNVBAMMI21vY2stc2VydmVyLWh0dHBzLXNl\nbGYtc2lnbmVkLXByb3h5MB4XDTIwMTEzMDE5NDA1NFoXDTQ4MDQxNzE5NDA1NFow\ncDELMAkGA1UEBhMCWFgxFTATBgNVBAcMDERlZmF1bHQgQ2l0eTEcMBoGA1UECgwT\nRGVmYXVsdCBDb21wYW55IEx0ZDEsMCoGA1UEAwwjbW9jay1zZXJ2ZXItaHR0cHMt\nc2VsZi1zaWduZWQtcHJveHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\nAQDDf+vS3gnOU8dibGh1VTrEPry172oWPEp4Ybn31h5+NWpnmKWufGRc3HeZ0/cJ\nJ4V4HQmiCXc6yGxStx3EMaGT11DzSvbguZChSj+DxckFgxuox4wL7bOzScM/yWkL\nBK21wxLl92RiKlgBvdt3bDyJbOraxGSKBNRBBLM6Wh1JWc06YxF44e0T3B7H/Qtn\nWPXmsi1YPbYAxlkeoeJ6WNwfzEuLMnFf/fWgL2TgFwLIfhqOzlyU2CyHSAhOX3Ny\n5x3wIMxdT51MW601iCKhdluN6aNM0lTgHNAiz7RD0ZFtqWDN0XvOzTU+7jxA0926\nqtk18g9XU9R3WDNw1p6FNbdrAgMBAAEwDQYJKoZIhvcNAQELBQADggIBAFWQJM3l\nWimy7DYKn3Dy1RH9Pd4mIT0TJ4V1T/eszbWB7YRDdHuYyf7Sk0QDZPLMqR2sYxMc\nShdrQpOgU/o/iIkhwAjW6LzbuiQJULd74u3J08RPAEpSSJFJwQD4ZU2B7nhoqxft\noxUzoytfUSnsMA2EUJFYsPvkygyCihudNR+44ONq771W9HfvFNH3YdQyxjI/RtwT\nCiYdxQFiS5UvWCBbJAVmRWLm1gnJbG+MYBye4mGfyiZ3iMq/Wnb++favC8jNDYSO\nokha+LQBpscQZ3fbn5srh7uQGXOkQjT8gsd31neEFfXbVlrnUsHAXMHHgUgNrF+k\nPVp0321fzmvwxGwjB4/jHd+1ImDwcDJ6LseKwtbriN5EDbwEV/mIME2/MjFfqFhV\nM3AkhgW/sY4KvAD+FZ77U3xR4iIQgknjAPEYgqKDHF0h0295fwhRl7wmw/nO6Z8e\nIHP+YOH7gcdYskr2cnXXD9J2z0T3/VZUyZjnrmVqCdWq4hggea1qKYw6qHbtuETV\n9CCxLE+LTrFfYHHkQI2Jg8E+NDApjOodFoSaLphTzK8FZoyn9ttrR8UcFFMW95nt\n9POau3WtvfYvAve0h4UYj9ZMotNnTFWyhmgn9gu6gvuyVfvUKJlsW+KQbJ8bJraN\n0SLVT2nUF/WUpJde3jvWs+OtQCQEUZds5qfy\n-----END CERTIFICATE-----\n"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/121-inconsistent-object-legacy/_sample_out/mock-server.users
================================================
"id","name","color"
"123","foo","green"
"321","bar","{""items"":[""red"",""blue""]}"


================================================
File: /doc/examples/121-inconsistent-object-legacy/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/121-inconsistent-object-legacy/users.request
================================================
GET /121-inconsistent-object-legacy/users

================================================
File: /doc/examples/121-inconsistent-object-legacy/users.response
================================================
[
    {
        "id": 123,
        "name": "foo",
        "color": "green"
    },
    {
        "id": 321,
        "name": "bar",
        "color": {
            "items": ["red", "blue"]
        }
    }
]


================================================
File: /doc/examples/121-inconsistent-object-legacy/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/121-inconsistent-object-legacy/"
        },
        "config": {
            "debug": true,
            "compatLevel": 2,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "responseFilter": "color"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/132-ignore-errors/user234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "address": {
        "city": "St Mary Mead",
        "country": "UK",
        "street": "High Street"
    }
}

================================================
File: /doc/examples/132-ignore-errors/user234.request
================================================
GET /132-ignore-errors/user/234

================================================
File: /doc/examples/132-ignore-errors/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"124","user-deleted"
"234","Jane Doe"


================================================
File: /doc/examples/132-ignore-errors/_sample_out/mock-server.user_user-id
================================================
"id","name","address_city","address_country","address_street","errorData","parent_id"
"123","John Doe","London","UK","Whitehaven Mansions","","123"
"","","","","","not found","124"
"234","Jane Doe","St Mary Mead","UK","High Street","","234"


================================================
File: /doc/examples/132-ignore-errors/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/132-ignore-errors/_sample_out/mock-server.user_user-id.manifest
================================================
{"destination":"in.c-mock-server.user_user-id","incremental":false}

================================================
File: /doc/examples/132-ignore-errors/user124.responseCode
================================================
404

================================================
File: /doc/examples/132-ignore-errors/user124.request
================================================
GET /132-ignore-errors/user/124

================================================
File: /doc/examples/132-ignore-errors/users.request
================================================
GET /132-ignore-errors/users

================================================
File: /doc/examples/132-ignore-errors/user123.response
================================================
{
    "id": 123,
    "name": "John Doe",
    "address": {
        "city": "London",
        "country": "UK",
        "street": "Whitehaven Mansions"
    }
}

================================================
File: /doc/examples/132-ignore-errors/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
    	"id": 124,
    	"name": "user-deleted"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/132-ignore-errors/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/132-ignore-errors/",
            "http": {
                "ignoreErrors": [404]
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/132-ignore-errors/user124.response
================================================
not found

================================================
File: /doc/examples/132-ignore-errors/user123.request
================================================
GET /132-ignore-errors/user/123

================================================
File: /doc/examples/077-query-auth/config-alternative.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/077-query-auth/",
            "http": {
                "defaultOptions": {
                    "params": {
                        "api-token": "2267709"
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/077-query-auth/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/077-query-auth/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/077-query-auth/users.request
================================================
GET /077-query-auth/users?api-token=2267709

================================================
File: /doc/examples/077-query-auth/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/077-query-auth/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/077-query-auth/",
            "authentication": {
                "type": "query",
                "query": {
                    "api-token": "2267709"
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/061-pagination-cursor-reverse/users3.response
================================================
{
    "items": []
}

================================================
File: /doc/examples/061-pagination-cursor-reverse/_sample_out/mock-server.users
================================================
"id","name"
"345","Jimmy Doe"
"456","Jenny Doe"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/061-pagination-cursor-reverse/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/061-pagination-cursor-reverse/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/061-pagination-cursor-reverse/",
            "pagination": {
                "method": "cursor",
                "idKey": "id",
                "param": "startWith",
                "increment": -1,
                "reverse": true
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items",
                    "params": {
                        "startWith": "last",
                        "account": "123"
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/061-pagination-cursor-reverse/users1.request
================================================
GET /061-pagination-cursor-reverse/users?startWith=last&account=123

================================================
File: /doc/examples/061-pagination-cursor-reverse/users2.request
================================================
GET /061-pagination-cursor-reverse/users?startWith=344&account=123

================================================
File: /doc/examples/061-pagination-cursor-reverse/users2.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/061-pagination-cursor-reverse/users1.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/061-pagination-cursor-reverse/users3.request
================================================
GET /061-pagination-cursor-reverse/users?startWith=122&account=123

================================================
File: /doc/examples/022-basic-child-job-datatype/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/022-basic-child-job-datatype/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/022-basic-child-job-datatype/_sample_out/mock-server.user-detail
================================================
"id","name","address_city","address_country","address_street","parent_id"
"123","John Doe","London","UK","Whitehaven Mansions","123"
"234","Jane Doe","St Mary Mead","UK","High Street","234"


================================================
File: /doc/examples/022-basic-child-job-datatype/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/022-basic-child-job-datatype/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/021-basic-child-job/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/086-function-job-placeholders-reference/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/086-function-job-placeholders-reference/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/086-function-job-placeholders-reference/_sample_out/mock-server.user-detail
================================================
"id","name","address_city","address_country","address_street","parent_id"
"123","John Doe","London","UK","Whitehaven Mansions","123"
"234","Jane Doe","St Mary Mead","UK","High Street","234"


================================================
File: /doc/examples/086-function-job-placeholders-reference/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/086-function-job-placeholders-reference/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/021-basic-child-job/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": {
                                    "path": "id",
                                    "placeholder": "value"
                                }
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/030-not-like-filter/_sample_out/mock-server.users
================================================
"id","name","role","type"
"123","John Doe","parent","admin"
"234","Jane Doe","parent","administrator"
"345","Jimmy Doe","child","user"
"456","Janet Doe","child","user"


================================================
File: /doc/examples/030-not-like-filter/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/030-not-like-filter/_sample_out/mock-server.user-detail
================================================
"id","name","userRole","userType","description","parent_id"
"345","Jimmy Doe","child","user","Sonny Jimmy","345"
"456","Janet Doe","child","user","Missy Jennie","456"


================================================
File: /doc/examples/030-not-like-filter/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/030-not-like-filter/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/029-simple-filter/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "recursionFilter": "type!~%min%",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/109-incremental-load-from-to/_sample_out/mock-server.users
================================================
"id","name","previous","modified"
"3","John Doe","","2017-04-20 19:05:12"
"234","Jane Doe","","2017-04-21 19:30:45"


================================================
File: /doc/examples/109-incremental-load-from-to/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":true}

================================================
File: /doc/examples/109-incremental-load-from-to/users.request
================================================
GET /109-incremental-load-from-to/users?from=2017-04-19&to=2017-09-07

================================================
File: /doc/examples/109-incremental-load-from-to/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe",
        "modified": "2017-04-20 19:05:12"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "modified": "2017-04-21 19:30:45"
    }
]


================================================
File: /doc/examples/109-incremental-load-from-to/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/109-incremental-load-from-to/"
        },
        "config": {
            "debug": true,
            "incrementalOutput": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "params": {
                        "from": {
                            "function": "date",
                            "args": [
                                "Y-m-d",
                                {
                                    "time": "previousStart"
                                }
                            ]
                        },
                        "to": {
                            "function": "date",
                            "args": [
                                "Y-m-d",
                                {
                                    "time": "currentStart"
                                }
                            ]
                        }
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/109-incremental-load-from-to/in/state.json
================================================
{
	"time": {
		"previousStart": 1492606006
	},
	"json_parser.struct": {
		"data": {
			"_users": {
				"[]": {
					"_id": {
						"nodeType": "scalar",
						"headerNames": "id"
					},
					"_name": {
						"nodeType": "scalar",
						"headerNames": "name"
					},
					"_previous": {
						"nodeType": "scalar",
						"headerNames": "previous"
					},
					"nodeType": "object",
					"headerNames": "data"
				},
				"nodeType": "array"
			}
		},
		"parent_aliases": []
	},
	"json_parser.structVersion": 3
}

================================================
File: /doc/examples/043-paging-stop-underflow/users4.request
================================================
GET /043-paging-stop-underflow/users?limit=2&offset=4

================================================
File: /doc/examples/043-paging-stop-underflow/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/043-paging-stop-underflow/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/043-paging-stop-underflow/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/043-paging-stop-underflow/",
            "pagination": {
                "method": "offset",
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/043-paging-stop-underflow/users1.request
================================================
GET /043-paging-stop-underflow/users?limit=2&offset=0

================================================
File: /doc/examples/043-paging-stop-underflow/users2.request
================================================
GET /043-paging-stop-underflow/users?limit=2&offset=2

================================================
File: /doc/examples/043-paging-stop-underflow/users2.response
================================================
[
    {
        "id": 345,
        "name": "Jimmy Doe"
    },
    {
        "id": 456,
        "name": "Jenny Doe"
    }
]

================================================
File: /doc/examples/043-paging-stop-underflow/users1.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]

================================================
File: /doc/examples/043-paging-stop-underflow/users4.response
================================================
[]

================================================
File: /doc/examples/076-user-data/user234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "address": {
        "city": "St Mary Mead",
        "country": "UK",
        "street": "High Street"
    }
}

================================================
File: /doc/examples/076-user-data/orders.response
================================================
{
	"items": [
		{
			"order_id": 98765432,
			"price": "$42"
		},
		{
			"order_id": 23456765,
			"price": "$24"
		}
	]
}

================================================
File: /doc/examples/076-user-data/user234.request
================================================
GET /076-user-data/user/234

================================================
File: /doc/examples/076-user-data/_sample_out/mock-server.users
================================================
"id","name","tag","tag_u0","price"
"123","John Doe","CFO","development","$10"
"234","Jane Doe","CTO","development","$10"


================================================
File: /doc/examples/076-user-data/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/076-user-data/_sample_out/mock-server.user-detail
================================================
"id","name","address_city","address_country","address_street","parent_id"
"123","John Doe","London","UK","Whitehaven Mansions","123"
"234","Jane Doe","St Mary Mead","UK","High Street","234"


================================================
File: /doc/examples/076-user-data/_sample_out/mock-server.orders
================================================
"order_id","price","tag_u0","price_u0"
"98765432","$42","development","$10"
"23456765","$24","development","$10"


================================================
File: /doc/examples/076-user-data/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/076-user-data/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":false}

================================================
File: /doc/examples/076-user-data/orders.request
================================================
GET /076-user-data/orders

================================================
File: /doc/examples/076-user-data/users.request
================================================
GET /076-user-data/users

================================================
File: /doc/examples/076-user-data/user123.response
================================================
{
    "id": 123,
    "name": "John Doe",
    "address": {
        "city": "London",
        "country": "UK",
        "street": "Whitehaven Mansions"
    }
}

================================================
File: /doc/examples/076-user-data/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "tag": "CFO"
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "tag": "CTO"
    }
]


================================================
File: /doc/examples/076-user-data/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/076-user-data/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "userData": {
                "tag": "development",
                "price": "$10"
            },
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                },
                {
                    "endpoint": "orders",
                    "dataType": "orders"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/076-user-data/user123.request
================================================
GET /076-user-data/user/123

================================================
File: /doc/examples/113-iterations-headers/config-alternative.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/113-iterations-headers/",
            "authentication": {
                "type": "basic"
            }
        },
        "config": {
            "http": {
                "headers": {
                    "X-Api-Token": {
                        "attr": "apiToken"
                    }
                }
            },
            "debug": true,
            "outputBucket": "ge-tutorial",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        },
        "iterations": [
            {
                "apiToken": "1234abcd",
                "username": "JohnDoe",
                "#password": "TopSecret"
            },
            {
                "apiToken": "zyxv9876",
                "username": "DoeJohn",
                "#password": "EvenMoreSecret"
            }
        ]
    }
}

================================================
File: /doc/examples/113-iterations-headers/_sample_out/ge-tutorial.users.manifest
================================================
{"destination":"in.c-ge-tutorial.users","incremental":false}

================================================
File: /doc/examples/113-iterations-headers/_sample_out/ge-tutorial.users
================================================
"id","name"
"5","Jimmy Doe"
"6","Jenny Doe"
"7","Janet Doe"
"8","Jeremy Doe"


================================================
File: /doc/examples/113-iterations-headers/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/113-iterations-headers/",
            "authentication": {
                "type": "basic"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "ge-tutorial",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        },
        "iterations": [
            {
                "http": {
                    "headers": {
                        "X-Api-Token": "1234abcd"
                    }
                },
                "username": "JohnDoe",
                "#password": "TopSecret"
            },
            {
                "http": {
                    "headers": {
                        "X-Api-Token": "zyxv9876"
                    }
                },
                "username": "DoeJohn",
                "#password": "EvenMoreSecret"
            }
        ]
    }
}

================================================
File: /doc/examples/113-iterations-headers/users1.request
================================================
GET /113-iterations-headers/users

================================================
File: /doc/examples/113-iterations-headers/users2.request
================================================
GET /113-iterations-headers/users

================================================
File: /doc/examples/113-iterations-headers/users2.response
================================================
[
    {
        "id": 7,
        "name": "Janet Doe"
    },
    {
        "id": 8,
        "name": "Jeremy Doe"
    }
]


================================================
File: /doc/examples/113-iterations-headers/users1.response
================================================
[
    {
        "id": 5,
        "name": "Jimmy Doe"
    },
    {
        "id": 6,
        "name": "Jenny Doe"
    }
]


================================================
File: /doc/examples/113-iterations-headers/users1.requestHeaders
================================================
Authorization: Basic Sm9obkRvZTpUb3BTZWNyZXQ=
X-Api-Token: 1234abcd

================================================
File: /doc/examples/113-iterations-headers/users2.requestHeaders
================================================
Authorization: Basic RG9lSm9objpFdmVuTW9yZVNlY3JldA==
X-Api-Token: zyxv9876

================================================
File: /doc/examples/002-array-in-object/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/002-array-in-object/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/002-array-in-object/users.request
================================================
GET /002-array-in-object/users

================================================
File: /doc/examples/002-array-in-object/users.response
================================================
{
    "users": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/002-array-in-object/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/002-array-in-object/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": ""
                }
            ]
        }
    }
}


================================================
File: /doc/examples/026-basic-deeper-nesting/user123order1345.response
================================================
{
    "orderId": 1345,
    "price": "$1212",
    "timestamp": "2017-12-24 12:30:53",
    "state": "delivered"
}

================================================
File: /doc/examples/026-basic-deeper-nesting/user123order1234.response
================================================
{
    "orderId": 1234,
    "price": "$12",
    "timestamp": "2017-05-06 8:21:45",
    "state": "cancelled"
}

================================================
File: /doc/examples/026-basic-deeper-nesting/user234order2345.request
================================================
GET /026-basic-deeper-nesting/user/234/order/2345

================================================
File: /doc/examples/026-basic-deeper-nesting/user123orders.request
================================================
GET /026-basic-deeper-nesting/user/123/orders

================================================
File: /doc/examples/026-basic-deeper-nesting/user234.response
================================================
{
    "userId": 234,
    "name": "Jane Doe",
    "description": "Good young mommy Jenny"
}

================================================
File: /doc/examples/026-basic-deeper-nesting/user123order1345.request
================================================
GET /026-basic-deeper-nesting/user/123/order/1345

================================================
File: /doc/examples/026-basic-deeper-nesting/user234orders.request
================================================
GET /026-basic-deeper-nesting/user/234/orders

================================================
File: /doc/examples/026-basic-deeper-nesting/user234orders.response
================================================
[
    {
        "orderId": "2345",
        "price": "$42"
    }
]

================================================
File: /doc/examples/026-basic-deeper-nesting/user234.request
================================================
GET /026-basic-deeper-nesting/user/234

================================================
File: /doc/examples/026-basic-deeper-nesting/_sample_out/mock-server.users
================================================
"userId","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/026-basic-deeper-nesting/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/026-basic-deeper-nesting/_sample_out/mock-server.user-detail
================================================
"userId","name","description","parent_userId"
"123","John Doe","Good ol' father John","123"
"234","Jane Doe","Good young mommy Jenny","234"


================================================
File: /doc/examples/026-basic-deeper-nesting/_sample_out/mock-server.orders
================================================
"orderId","price","parent_userId"
"1234","$12","123"
"1345","$1212","123"
"2345","$42","234"


================================================
File: /doc/examples/026-basic-deeper-nesting/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/026-basic-deeper-nesting/_sample_out/mock-server.order-detail
================================================
"orderId","price","timestamp","state","parent_userId","parent_orderId"
"1234","$12","2017-05-06 8:21:45","cancelled","123","1234"
"1345","$1212","2017-12-24 12:30:53","delivered","123","1345"
"2345","$42","2017-01-12 2:12:43","cancelled","234","2345"


================================================
File: /doc/examples/026-basic-deeper-nesting/_sample_out/mock-server.orders.manifest
================================================
{"destination":"in.c-mock-server.orders","incremental":false}

================================================
File: /doc/examples/026-basic-deeper-nesting/_sample_out/mock-server.order-detail.manifest
================================================
{"destination":"in.c-mock-server.order-detail","incremental":false}

================================================
File: /doc/examples/026-basic-deeper-nesting/users.request
================================================
GET /026-basic-deeper-nesting/users

================================================
File: /doc/examples/026-basic-deeper-nesting/user123.response
================================================
{
    "userId": 123,
    "name": "John Doe",
    "description": "Good ol' father John"
}

================================================
File: /doc/examples/026-basic-deeper-nesting/users.response
================================================
[
    {
        "userId": 123,
        "name": "John Doe"
    },
    {
        "userId": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/026-basic-deeper-nesting/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/026-basic-deeper-nesting/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{1:user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "1:user-id": "userId"
                            },
                            "children": [
                                {
                                    "endpoint": "user/{2:user-id}/orders",
                                    "dataType": "orders",
                                    "placeholders": {
                                        "2:user-id": "userId"
                                    },
                                    "children": [
                                        {
                                            "endpoint": "user/{3:user-id}/order/{1:order-id}",
                                            "dataType": "order-detail",
                                            "dataField": ".",
                                            "placeholders": {
                                                "3:user-id": "userId",
                                                "1:order-id": "orderId"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/026-basic-deeper-nesting/user123order1234.request
================================================
GET /026-basic-deeper-nesting/user/123/order/1234

================================================
File: /doc/examples/026-basic-deeper-nesting/user234order2345.response
================================================
{
    "orderId": 2345,
    "price": "$42",
    "timestamp": "2017-01-12 2:12:43",
    "state": "cancelled"
}

================================================
File: /doc/examples/026-basic-deeper-nesting/user123orders.response
================================================
[
    {
        "orderId": "1234",
        "price": "$12"
    },
    {
        "orderId": "1345",
        "price": "$1212"
    }
]

================================================
File: /doc/examples/026-basic-deeper-nesting/user123.request
================================================
GET /026-basic-deeper-nesting/user/123

================================================
File: /doc/examples/053-pagination-pagenum-override/users3.response
================================================
{
    "items": []
}

================================================
File: /doc/examples/053-pagination-pagenum-override/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"


================================================
File: /doc/examples/053-pagination-pagenum-override/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/053-pagination-pagenum-override/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/053-pagination-pagenum-override/",
            "pagination": {
                "method": "pagenum",
                "limit": 200,
                "limitParam": "count",
                "pageParam": "set",
                "firstPage": 0,
                "firstPageParams": false
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items",
                    "params": {
                        "count": 2
                    }
                }
            ]
        }
    }
}

================================================
File: /doc/examples/053-pagination-pagenum-override/users1.request
================================================
GET /053-pagination-pagenum-override/users?count=2

================================================
File: /doc/examples/053-pagination-pagenum-override/users2.request
================================================
GET /053-pagination-pagenum-override/users?count=2&set=1

================================================
File: /doc/examples/053-pagination-pagenum-override/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}

================================================
File: /doc/examples/053-pagination-pagenum-override/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/053-pagination-pagenum-override/users3.request
================================================
GET /053-pagination-pagenum-override/users?count=2&set=2

================================================
File: /doc/examples/138-pagination-stop-field-child-filter/users3.response
================================================
{
    "items": [
         {
            "id": 789,
            "name": "Martin Doe",
            "role": "child",
            "type": "user"
        },
        {
            "id": 7899,
            "name": "Olive Doe",
            "role": "child",
            "type": "user"
        }
    ],
    "paginator": {
         "totalCount": 6,
         "page": 3,
         "pageCount": 3,
         "itemsOnPage": 2,
         "itemsPerPage": 2
     }
}


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user234.response
================================================
{
    "id": 234,
    "name": "John Doe",
    "userRole": "parent",
    "userType": "admin",
    "description": "Father John"
}


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user789.request
================================================
GET /138-pagination-stop-field-child-filter/user/789

================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user7899.request
================================================
GET /138-pagination-stop-field-child-filter/user/7899

================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user234.request
================================================
GET /138-pagination-stop-field-child-filter/user/234

================================================
File: /doc/examples/138-pagination-stop-field-child-filter/_sample_out/mock-server.users
================================================
"id","name","role","type"
"123","John Doe","parent","admin"
"234","Jane Doe","junior","administrator"
"345","Jimmy Doe","child","user"
"456","Janet Doe","child","user"
"789","Martin Doe","child","user"
"7899","Olive Doe","child","user"


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/138-pagination-stop-field-child-filter/_sample_out/mock-server.user-detail
================================================
"id","name","userRole","userType","description","parent_id"
"123","John Doe","parent","admin","Father John","123"
"234","John Doe","parent","admin","Father John","234"
"345","John Doe","parent","admin","Father John","345"
"456","John Doe","parent","admin","Father John","456"
"789","John Doe","parent","admin","Father John","789"
"7899","John Doe","parent","admin","Father John","7899"


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user345.response
================================================
{
    "id": 345,
    "name": "John Doe",
    "userRole": "parent",
    "userType": "admin",
    "description": "Father John"
}


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user123.response
================================================
{
    "id": 123,
    "name": "John Doe",
    "userRole": "parent",
    "userType": "admin",
    "description": "Father John"
}


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user345.request
================================================
GET /138-pagination-stop-field-child-filter/user/345

================================================
File: /doc/examples/138-pagination-stop-field-child-filter/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/138-pagination-stop-field-child-filter/",
            "pagination": {
                "method": "pagenum",
                "pageParam": "page",
                "limit": 2,
                "limitParam": "itemsPerPage",
                "limitStop": {
                    "field": "paginator.totalCount"
                },
                "firstPage": 1,
                "firstPageParams": false
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/users1.request
================================================
GET /138-pagination-stop-field-child-filter/users

================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user456.response
================================================
{
    "id": 456,
    "name": "John Doe",
    "userRole": "parent",
    "userType": "admin",
    "description": "Father John"
}


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/users2.request
================================================
GET /138-pagination-stop-field-child-filter/users?page=2&itemsPerPage=2

================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user7899.response
================================================
{
    "id": 7899,
    "name": "John Doe",
    "userRole": "parent",
    "userType": "admin",
    "description": "Father John"
}


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/users2.response
================================================
{
    "items": [
         {
            "id": 345,
            "name": "Jimmy Doe",
            "role": "child",
            "type": "user"
        },
        {
            "id": 456,
            "name": "Janet Doe",
            "role": "child",
            "type": "user"
        }
    ],
    "paginator": {
         "totalCount": 6,
         "page": 2,
         "pageCount": 3,
         "itemsOnPage": 2,
         "itemsPerPage": 2
     }
}


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/users1.response
================================================
{
    "items": [
        {
                "id": 123,
                "name": "John Doe",
                "role": "parent",
                "type": "admin"
            },
            {
                "id": 234,
                "name": "Jane Doe",
                "role": "junior",
                "type": "administrator"
            }
    ],
    "paginator": {
         "totalCount": 6,
         "page": 1,
         "pageCount": 3,
         "itemsOnPage": 2,
         "itemsPerPage": 2
     }
}


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/users3.request
================================================
GET /138-pagination-stop-field-child-filter/users?page=3&itemsPerPage=2

================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user789.response
================================================
{
    "id": 789,
    "name": "John Doe",
    "userRole": "parent",
    "userType": "admin",
    "description": "Father John"
}


================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user456.request
================================================
GET /138-pagination-stop-field-child-filter/user/456

================================================
File: /doc/examples/138-pagination-stop-field-child-filter/user123.request
================================================
GET /138-pagination-stop-field-child-filter/user/123

================================================
File: /doc/examples/124-naming-conflict-legacy/user234.response
================================================
{
    "id": 234,
    "name": "Jane Doe",
    "parent_id": "admins",
    "address": {
        "city": "St Mary Mead",
        "country": "UK",
        "street": "High Street"
    }
}

================================================
File: /doc/examples/124-naming-conflict-legacy/user234.request
================================================
GET /124-naming-conflict-legacy/user/234

================================================
File: /doc/examples/124-naming-conflict-legacy/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/124-naming-conflict-legacy/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/124-naming-conflict-legacy/_sample_out/mock-server.user-detail
================================================
"id","name","parent_id","address_city","address_country","address_street","6be379826b20cc58475f636e33f4606b"
"123","John Doe","123","London","UK","Whitehaven Mansions",""
"234","Jane Doe","234","St Mary Mead","UK","High Street",""


================================================
File: /doc/examples/124-naming-conflict-legacy/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/124-naming-conflict-legacy/users.request
================================================
GET /124-naming-conflict-legacy/users

================================================
File: /doc/examples/124-naming-conflict-legacy/user123.response
================================================
{
    "id": 123,
    "name": "John Doe",
    "parent_id": "admins",
    "address": {
        "city": "London",
        "country": "UK",
        "street": "Whitehaven Mansions"
    }
}

================================================
File: /doc/examples/124-naming-conflict-legacy/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/124-naming-conflict-legacy/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/025-naming-conflict/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "compatLevel": 1,
            "jobs": [
                {
                    "endpoint": "users",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/124-naming-conflict-legacy/user123.request
================================================
GET /124-naming-conflict-legacy/user/123

================================================
File: /doc/examples/079-login-auth-headers/users.requestHeaders
================================================
X-ApiToken: a1b2c3d435f6

================================================
File: /doc/examples/079-login-auth-headers/login.response
================================================
{
	"authorization": {
		"token": "a1b2c3d435f6"
	}
}

================================================
File: /doc/examples/079-login-auth-headers/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/079-login-auth-headers/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/079-login-auth-headers/users.request
================================================
GET /079-login-auth-headers/users

================================================
File: /doc/examples/079-login-auth-headers/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/079-login-auth-headers/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/079-login-auth-headers/",
            "authentication": {
                "type": "login",
                "loginRequest": {
                    "endpoint": "login",
                    "method": "GET",
                    "headers": {
                        "X-Login": "JohnDoe",
                        "X-Password": "TopSecret"
                    }
                },
                "apiRequest": {
                    "headers": {
                        "X-ApiToken": {
                            "response": "authorization.token"
                        }
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/079-login-auth-headers/login.requestHeaders
================================================
X-Login: JohnDoe
X-Password: TopSecret

================================================
File: /doc/examples/079-login-auth-headers/login.request
================================================
GET /079-login-auth-headers/login

================================================
File: /doc/examples/007-nested-object/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"


================================================
File: /doc/examples/007-nested-object/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/007-nested-object/users.request
================================================
GET /007-nested-object/users

================================================
File: /doc/examples/007-nested-object/users.response
================================================
{
    "user": {
        "id": 123,
        "name": "John Doe"
    }
}


================================================
File: /doc/examples/007-nested-object/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/007-nested-object/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "user"
                }
            ]
        }
    }
}


================================================
File: /doc/examples/094-function-config-headers/users.requestHeaders
================================================
X-Api-Auth: JohnDoe:TopSecret

================================================
File: /doc/examples/094-function-config-headers/_sample_out/mock-server.users
================================================
"id","name"
"3","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/094-function-config-headers/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/094-function-config-headers/users.request
================================================
GET /094-function-config-headers/users

================================================
File: /doc/examples/094-function-config-headers/users.response
================================================
[
    {
        "id": 3,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/094-function-config-headers/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/094-function-config-headers/"
        },
        "config": {
            "http": {
                "headers": {
                    "X-Api-Auth": {
                        "function": "concat",
                        "args": [
                            {
                                "attr": "#username"
                            },
                            ":",
                            {
                                "attr": "#password"
                            }
                        ]
                    }
                }
            },
            "#username": "JohnDoe",
            "#password": "TopSecret",
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataType": "users"
                }
            ]
        }
    }
}

================================================
File: /doc/examples/081-login-auth-headers-query-override/users.requestHeaders
================================================
X-Mode: development
X-SecretKey: a1b2c3d435f6
X-Account-Id: abc


================================================
File: /doc/examples/081-login-auth-headers-query-override/login.response
================================================
{
    "authorization": {
        "token": "987654",
        "secretKey": "a1b2c3d435f6",
        "accountId": "abc"
    }
}

================================================
File: /doc/examples/081-login-auth-headers-query-override/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"


================================================
File: /doc/examples/081-login-auth-headers-query-override/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/081-login-auth-headers-query-override/users.request
================================================
GET /081-login-auth-headers-query-override/users?debug=1&orderBy=userName&apiToken=987654&secretKey%5B0%5D=none&secretKey%5B1%5D=a1b2c3d435f6&customerId%5B0%5D=234&customerId%5B1%5D=abc

================================================
File: /doc/examples/081-login-auth-headers-query-override/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /doc/examples/081-login-auth-headers-query-override/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/081-login-auth-headers-query-override/",
            "http": {
                "defaultOptions": {
                    "headers": {
                        "X-Mode": "development",
                        "X-Account-Id": 123
                    },
                    "params": {
                        "debug": "1",
                        "orderBy": "default",
                        "secretKey": "123"
                    }
                }
            },
            "authentication": {
                "type": "login",
                "loginRequest": {
                    "endpoint": "login",
                    "method": "POST",
                    "params": {
                        "username": "JohnDoe",
                        "password": "TopSecret"
                    }
                },
                "apiRequest": {
                    "query": {
                        "apiToken": {
                            "response": "authorization.token"
                        },
                        "secretKey": {
                            "response": "authorization.secretKey"
                        },
                        "customerId": {
                            "response": "authorization.accountId"
                        }
                    },
                    "headers": {
                        "X-SecretKey": {
                            "response": "authorization.secretKey"
                        },
                        "X-Account-Id": {
                            "response": "authorization.accountId"
                        }
                    }
                }
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "params": {
                        "orderBy": "userName",
                        "secretKey": "none",
                        "customerId": "234"
                    }
                }
            ]
        }
    }
}


================================================
File: /doc/examples/081-login-auth-headers-query-override/login.requestHeaders
================================================
Content-Type: application/json

================================================
File: /doc/examples/081-login-auth-headers-query-override/login.request
================================================
POST /081-login-auth-headers-query-override/login

{"username":"JohnDoe","password":"TopSecret"}

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/users3.response
================================================
{
    "isLast": "yes",
    "items": [
        {
            "id": 567,
            "name": "Tomas Doe"
        },
        {
            "id": 678,
            "name": "Ondra Doe"
        }
    ]
}


================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user567.response
================================================
{
    "id": 567,
    "name": "Tomas Doe"
}


================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user678.response
================================================
{
    "id": 678,
    "name": "Ondra Doe"
}


================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user234.response
================================================
{
    "id": 234,
    "name": "John Doe"
}


================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user234.request
================================================
GET /140-pagination-forcestop-child-filter/user/234

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/_sample_out/mock-server.users
================================================
"id","name"
"123","John Doe"
"234","Jane Doe"
"345","Jimmy Doe"
"456","Jenny Doe"
"567","Tomas Doe"
"678","Ondra Doe"


================================================
File: /doc/examples/140-pagination-forcestop-child-filter/_sample_out/mock-server.user-detail.manifest
================================================
{"destination":"in.c-mock-server.user-detail","incremental":false}

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/_sample_out/mock-server.user-detail
================================================
"id","name","parent_id"
"123","John Doe","123"
"234","John Doe","234"
"345","John Doe","345"
"456","John Doe","456"
"567","Tomas Doe","567"
"678","Ondra Doe","678"


================================================
File: /doc/examples/140-pagination-forcestop-child-filter/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user345.response
================================================
{
    "id": 345,
    "name": "John Doe"
}


================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user123.response
================================================
{
    "id": 123,
    "name": "John Doe"
}


================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user567.request
================================================
GET /140-pagination-forcestop-child-filter/user/567

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user345.request
================================================
GET /140-pagination-forcestop-child-filter/user/345

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/140-pagination-forcestop-child-filter/",
            "pagination": {
                "forceStop": {
                    "pages": 3,
                    "volume": 169
                },
                "method": "offset",
                "firstPageParams": false,
                "limit": "2"
            }
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "dataField": "items",
                    "children": [
                        {
                            "endpoint": "user/{user-id}",
                            "dataField": ".",
                            "dataType": "user-detail",
                            "placeholders": {
                                "user-id": "id"
                            }
                        }
                    ]
                }
            ]
        }
    }
}


================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user678.request
================================================
GET /140-pagination-forcestop-child-filter/user/678

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/users1.request
================================================
GET /140-pagination-forcestop-child-filter/users

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user456.response
================================================
{
    "id": 456,
    "name": "John Doe"
}


================================================
File: /doc/examples/140-pagination-forcestop-child-filter/users2.request
================================================
GET /140-pagination-forcestop-child-filter/users?limit=2&offset=2

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/users2.response
================================================
{
    "items": [
        {
            "id": 345,
            "name": "Jimmy Doe"
        },
        {
            "id": 456,
            "name": "Jenny Doe"
        }
    ]
}


================================================
File: /doc/examples/140-pagination-forcestop-child-filter/users1.response
================================================
{
    "items": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/users3.request
================================================
GET /140-pagination-forcestop-child-filter/users?limit=2&offset=4

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user456.request
================================================
GET /140-pagination-forcestop-child-filter/user/456

================================================
File: /doc/examples/140-pagination-forcestop-child-filter/user123.request
================================================
GET /140-pagination-forcestop-child-filter/user/123

================================================
File: /doc/examples/033-job-parameters/_sample_out/mock-server.users
================================================
"id","name","married"
"123","John Doe","1"
"234","Jane Doe",""
"345","Jimmy Doe",""


================================================
File: /doc/examples/033-job-parameters/_sample_out/mock-server.users.manifest
================================================
{"destination":"in.c-mock-server.users","incremental":false}

================================================
File: /doc/examples/033-job-parameters/config.json
================================================
{
    "parameters": {
        "api": {
            "baseUrl": "http://mock-server:80/033-job-parameters/"
        },
        "config": {
            "debug": true,
            "outputBucket": "mock-server",
            "jobs": [
                {
                    "endpoint": "users",
                    "params": {
                        "type": "active"
                    }
                },
                {
                    "endpoint": "users",
                    "params": {
                        "type": "inactive"
                    }
                }
            ]            
        }
    }
}


================================================
File: /doc/examples/033-job-parameters/users1.request
================================================
GET /033-job-parameters/users?type=active

================================================
File: /doc/examples/033-job-parameters/users2.request
================================================
GET /033-job-parameters/users?type=inactive

================================================
File: /doc/examples/033-job-parameters/users2.response
================================================
[
    {
        "id": 345,
        "name": "Jimmy Doe"
    }
]


================================================
File: /doc/examples/033-job-parameters/users1.response
================================================
[
    {
        "id": 123,
        "name": "John Doe",
        "married": true
    },
    {
        "id": 234,
        "name": "Jane Doe",
        "married": false
    }
]

================================================
File: /doc/run-single-example.sh
================================================
#!/bin/bash
set -e

run_example() {
    if [ -z "$1" ] ; then
        printf "No example name provided."
        exit 1
    else
        printf "\nRunning example $1\n"
    fi
    EXAMPLE_NAME=$1
    rm -rf examples/$1/out/*
    mkdir -p examples/$1/out/tables/
    docker compose run -e "KBC_EXAMPLE_NAME=$EXAMPLE_NAME" extractor
    if diff --brief --recursive examples/${EXAMPLE_NAME}/out/tables/ examples/${EXAMPLE_NAME}/_sample_out/ ; then
        printf "Example $EXAMPLE_NAME successful.\n"
    else
        printf "Example $EXAMPLE_NAME failed.\n"
        diff --recursive examples/${EXAMPLE_NAME}/out/tables/ examples/${EXAMPLE_NAME}/_sample_out/
    fi
}

# Start mock server
docker compose build --force-rm --pull

# Run example
run_example $1

# Stop mock server
printf "\nAll examples successfull.\n"
docker stop mock-server


================================================
File: /doc/README.md
================================================
# Extractor examples

The folder `examples` contains working examples different parts of Generic Extractor configuration. These are
configred against a mock API -- see the [documentation for running](https://developers.keboola.com/extend/generic-extractor/running/#running-examples).

Each example in the folder is referenced in the documentation - search for `[EX???]` where `???` is example number (e.g. `[EX090]`).


================================================
File: /.github/workflows/push.yml
================================================
name: GitHub Actions
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # Name of the image in the ECR
  APP_IMAGE: keboola/generic-extractor

  # Developer portal login
  KBC_DEVELOPERPORTAL_VENDOR: "keboola"
  KBC_DEVELOPERPORTAL_APP: "ex-generic-v2"
  KBC_DEVELOPERPORTAL_USERNAME: "keboola+gha_ex_generic_v2"
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # DockerHub login
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test KBC project
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }}
  KBC_TEST_PROJECT_URL: "https://connection.keboola.com/admin/projects/395/dashboard"
  KBC_TEST_PROJECT_CONFIGS: "315853990" # space separated list
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Print Docker version
        run: docker -v
      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ hashFiles('Dockerfile') }}-${{ github.sha }}
          restore-keys: |
            docker-${{ hashFiles('Dockerfile') }}
      - name: Build and push Docker image with cache
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            --output=type=docker \
            --tag $APP_IMAGE .
      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          if [ "$IS_SEMANTIC_TAG" = "false" ]; then
              TAG="${TAG}-${GITHUB_RUN_NUMBER}"
          fi
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "::set-output name=app_image_tag::$TAG"
          echo "::set-output name=is_semantic_tag::$IS_SEMANTIC_TAG"
      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ steps.tag.outputs.app_image_tag }}
          push_latest: ${{ steps.tag.outputs.is_semantic_tag }}
          source_image: ${{ env.APP_IMAGE }}

  python-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Build image
        working-directory: ./python-sync-actions
        run: docker compose build

      - name: Run python lint
        working-directory: ./python-sync-actions
        run: docker compose run dev flake8 . --config=flake8.cfg


  tests:
    needs:
      - build
      - python-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.APP_IMAGE}}
          tag_as_latest: true
      - name: Python Tests
        run: docker compose run --rm ci python -v -m unittest discover /code/python-sync-actions
      - name: Run Python Functional Tests
        working-directory: ./python-sync-actions
        run: docker compose run test-calls
      - name: PHP Tests
        run: docker compose run --rm -v $(pwd)/build:/code/build ci

  tests-examples:
    needs:
      - build
      - python-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.APP_IMAGE}}
          tag_as_latest: true
      - name: Test examples
        run: |
          cd doc
          ./run-samples.sh
          


  tests-in-kbc:
    needs:
      - build
      - python-lint
    runs-on: ubuntu-latest
    steps:
      - name: Run KBC test jobs
        if: env.KBC_STORAGE_TOKEN && env.KBC_TEST_PROJECT_CONFIGS
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ env.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    needs:
      - build
      - tests
      - tests-examples
      - tests-in-kbc
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.build.outputs.is_semantic_tag == 'true'
    steps:
      - name: Set tag in the Developer Portal
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}


================================================
File: /composer.json
================================================
{
    "name": "keboola/ex-generic-v2",
    "description": "Generic HTTP API extractor",
    "license": "MIT",
    "type": "project",
    "minimum-stability": "stable",
    "require": {
        "php": ">=7.4",
        "ext-json": "*",
        "aws/aws-sdk-php": "^3.208",
        "guzzlehttp/oauth-subscriber": "^0.4",
        "keboola/filter": "^2.0",
        "keboola/juicer": "^5.1",
        "keboola/php-csvtable": "^1.2",
        "keboola/php-temp": "^2.0",
        "keboola/php-utils": "^4.1",
        "keboola/retry": "^0.5.0",
        "kevinrob/guzzle-cache-middleware": "^3.3",
        "league/flysystem": "~1.0",
        "symfony/config": "^5.2",
        "symfony/console": "^5.2",
        "symfony/finder": "^5.2",
        "symfony/process": "^5.4",
        "symfony/validator": "^5.2"
    },
    "require-dev": {
        "phpunit/phpunit": "^9.5",
        "keboola/coding-standard": ">=9.0",
        "php-parallel-lint/php-parallel-lint": "^1.2",
        "phpstan/phpstan": "^0.12"
    },
    "autoload": {
        "psr-4": { "Keboola\\GenericExtractor\\": "src/" }
    },
    "autoload-dev": {
        "psr-4": { "Keboola\\GenericExtractor\\Tests\\": "tests/phpunit" }
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests": [
            "@tests-phpunit"
        ],
        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "build": [
            "@phplint",
            "@phpcs",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true
    }
}


================================================
File: /python-sync-actions/flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting


================================================
File: /python-sync-actions/docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh

  test-calls:
    # Run examples against mock server
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    command: python /code/tests/_test_calls.py
    links:
      - mock-server
  mock-server:
    container_name: mock-server
    image: quay.io/keboola/ex-generic-mock-server:latest
    tty: true
    stdin_open: true
    ports:
      - "8888:80"
    volumes:
      - ./tests/calls:/examples/
    environment:
      - KBC_EXAMPLES_DIR=/examples/

================================================
File: /python-sync-actions/src/component.py
================================================
"""
Template Component main class.

"""
import copy
import logging
from io import StringIO
from typing import List

import requests
from requests.exceptions import JSONDecodeError
from keboola.component.base import ComponentBase, sync_action
from keboola.component.exceptions import UserException

import configuration
from actions.curl import build_job_from_curl
from actions.mapping import infer_mapping
from configuration import Configuration, ConfigHelpers
from http_generic.auth import AuthMethodBuilder, AuthBuilderError
from http_generic.client import GenericHttpClient, HttpClientError
from http_generic.pagination import PaginationBuilder
from placeholders_utils import PlaceholdersUtils

MAX_CHILD_CALLS = 20

# configuration variables
KEY_API_TOKEN = '#api_token'
KEY_PRINT_HELLO = 'print_hello'

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [KEY_PRINT_HELLO]
REQUIRED_IMAGE_PARS = []


class Component(ComponentBase):
    """
        Extends base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
    """

    def __init__(self):
        super().__init__()
        self.log = StringIO()

        # remove default handler
        for h in logging.getLogger().handlers:
            logging.getLogger().removeHandler(h)

        logging.getLogger().addHandler(logging.StreamHandler(self.log))

        # always set debug mode
        self.set_debug_mode()

        logging.info("Component initialized")

        self._configurations: List[Configuration] = None
        self._configuration: Configuration = None
        self._client: GenericHttpClient = None
        self._parent_params = {}
        self._final_results = []
        self._parent_results = []
        self._final_response: requests.Response = None
        self._conf_helpers = ConfigHelpers()

    def run(self):
        """
        Main component method
        """
        # self.make_call()
        self.test_request()

    def init_component(self):

        self._configurations = configuration.convert_to_v2(self.configuration.parameters)

        self._configuration = self._configurations[0]

        # build authentication method
        auth_method = None
        authentication = self._configuration.api.authentication
        try:
            if authentication:
                # evaluate user_params inside the user params itself
                user_params = self._configuration.user_parameters
                user_params = self._conf_helpers.fill_in_user_parameters(user_params, user_params)
                # apply user parameters
                auth_method_params = self._conf_helpers.fill_in_user_parameters(authentication.parameters, user_params,
                                                                                False)
                auth_method = AuthMethodBuilder.build(authentication.type, **auth_method_params)
        except AuthBuilderError as e:
            raise UserException(e) from e

        # evaluate user_params inside the user params itself
        self._configuration.user_parameters = self._conf_helpers.fill_in_user_parameters(
            self._configuration.user_parameters,
            self._configuration.user_parameters)

        self._configuration.user_data = self._conf_helpers.fill_in_user_parameters(self._configuration.user_data,
                                                                                   self._configuration.user_parameters)

        # init client
        self._client = GenericHttpClient(base_url=self._configuration.api.base_url,
                                         max_retries=self._configuration.api.retry_config.max_retries,
                                         backoff_factor=self._configuration.api.retry_config.backoff_factor,
                                         status_forcelist=self._configuration.api.retry_config.codes,
                                         auth_method=auth_method
                                         )

    def _get_values_to_hide(self) -> list[str]:
        """
        Get values to hide
        Args:
        """
        user_params = self._configuration.user_parameters
        secrets = [value for key, value in user_params.items() if key.startswith('#') or key.startswith('__')]

        # get secrets from the auth method
        if self._client._auth_method:  # noqa
            auth_secrets = self._client._auth_method.get_secrets()  # noqa
            secrets.extend(auth_secrets)
        return secrets

    def _replace_words(self, obj, words, replacement="--HIDDEN--"):
        # Helper function to perform replacement in strings
        def replace_in_string(s):
            for word in words:
                s = s.replace(word, replacement)
            return s

        # If the object is a dictionary
        if isinstance(obj, dict):
            new_obj = {}
            for key, value in obj.items():
                new_key = replace_in_string(key) if isinstance(key, str) else key
                new_value = self._replace_words(value, words, replacement)
                new_obj[new_key] = new_value
            return new_obj

        # If the object is a list
        elif isinstance(obj, list):
            return [self._replace_words(item, words, replacement) for item in obj]

        # If the object is a tuple
        elif isinstance(obj, tuple):
            return tuple(self._replace_words(item, words, replacement) for item in obj)

        # If the object is a set
        elif isinstance(obj, set):
            return {self._replace_words(item, words, replacement) for item in obj}

        # If the object is a custom object
        elif hasattr(obj, "__dict__"):
            new_obj = copy.deepcopy(obj)
            for attr in vars(new_obj):
                setattr(new_obj, attr, self._replace_words(getattr(new_obj, attr), words, replacement))
            return new_obj

        # If the object is a string and contains any of the words
        elif isinstance(obj, str):
            return replace_in_string(obj)

        # Return the object if it is of any other type
        else:
            return obj

    # Function to deep copy the object and replace specified words with a replacement string
    def _deep_copy_and_replace_words(self, original_obj, words):
        copied_obj = copy.deepcopy(original_obj)
        return self._replace_words(copied_obj, words)

    def _fill_placeholders(self, placeholders, path):
        """
        Fill placeholders in the path
        Args:
            placeholders: placeholders - names dict to fill
            path: path with placeholders
            row: row with data
        """

        result_path = path
        for key, dict in placeholders[0].items():
            result_path = result_path.replace(f"{{{dict.get('placeholder')}}}", str(dict.get('value')))
        return result_path

    # def _process_nested_job(self, parent_result, config, parent_results_list, client,
    #                         method, **request_parameters) -> list:
    #     """
    #     Process nested job
    #     Args:
    #         parent_result: result of the parent job
    #         config: configuration of the nested job
    #         parent_results_list: list of parent results
    #         client: http client
    #         method: method to use
    #         request_parameters: request parameters
    #     """
    #     results = []
    #     for row in parent_result or [{}]:
    #
    #         parent_results_ext = parent_results_list + [row]
    #
    #         placeholders = PlaceholdersUtils.get_params_for_child_jobs(config.get('placeholders', {}),
    #                                                                    parent_results_ext, self._parent_params)
    #
    #         self._parent_params = placeholders[0]
    #         row_path = self._fill_placeholders(placeholders, config['endpoint'])
    #         response = client.send_request(method=method, endpoint_path=row_path, **request_parameters)
    #         child_response = self._parse_data(response.json(), DataPath(config.get('dataType'),
    #                                                                     config.get('dataField', '.')))
    #         children = config.get('children', [])
    #         results = []
    #         if children[0] if children else None:
    #             nested_data = self._process_nested_job(child_response, children[0], parent_results_ext,
    #                                                    client, method, **request_parameters)
    #             results.append(nested_data)
    #         else:
    #             self._final_results.append(child_response)
    #             self._final_response = response
    #
    #     return results

    def _parse_data(self, data, path) -> list:
        """
        Parse data from the response
        Args:
            data: data to parse
            path: path to the data

        Returns:

        """

        def find_array_property_path(response_data: dict, result_arrays: list = None) -> list[dict] | None:
            """
            Travers all object and find the first array property, return None if there are two array properties
            Args:
                response_data:
                result_arrays

            Returns:

            """
            result_arrays = []
            if isinstance(response_data, list):
                return response_data

            for k, data_value in response_data.items():
                if isinstance(data_value, list):
                    result_arrays.append(data_value)
                if isinstance(data_value, dict):
                    res = find_array_property_path(data_value)
                    if res is not None:
                        result_arrays.extend(res)

            if len(result_arrays) == 1:
                return result_arrays[0]
            else:
                return None

        if not path:
            # find array property in data, if there is only one
            result = find_array_property_path(data)

        elif path.path == '.':
            result = data
        else:
            keys = path.path.split(path.delimiter)
            value = data.copy()
            try:
                for key in keys:
                    value = value[key]
                result = value
            except KeyError:
                result = [f"Path {path.path} not found in the response data"]

        if result is None:
            result = ["No suitable array element found in the response data, please define the Data Selector path."]

        return result

    def _add_page_params(self, job: Configuration, query_parameters: dict) -> dict:
        """
        Add page parameters to the query parameters
        Args:
            job: job configuration
            query_parameters: query parameters

        Returns:
            query_parameters: updated query parameters
        """

        if not job.api.pagination:
            return query_parameters

        paginator_config = job.api.pagination.get(job.request_parameters.scroller)
        if not paginator_config:
            raise UserException(f"Paginator '{job.request_parameters.scroller}' not found in the configuration.")

        paginaton_method = PaginationBuilder.get_paginator(paginator_config.get("method"))
        paginator_params = paginaton_method.get_page_params(paginator_config)

        if paginator_config.get("offsetFromJob"):
            for key, value in paginator_params.items():
                if key not in query_parameters:
                    query_parameters[key] = value
        else:
            query_parameters.update(paginator_params)

        return query_parameters

    def make_call(self) -> tuple[list, any, str, str]:
        """
        Make call to the API
        Returns:
            requests.Response
        """
        self.init_component()
        if not self._configuration.request_parameters:
            raise ValueError("__SELECTED_JOB is missing!")
        self._client.login()
        # set back to debug because sync action mutes it
        logging.getLogger().setLevel(logging.DEBUG)

        final_results = []

        self._parent_results = [{}] * len(self._configurations)

        def recursive_call(parent_result, config_index=0):

            if parent_result:
                self._parent_results[config_index - 1] = parent_result

            if config_index >= len(self._configurations):
                return final_results, self._final_response.json(), self.log.getvalue()

            job = self._configurations[config_index]

            api_cfg = job.api
            request_cfg = job.request_parameters
            # fix KBC bug
            user_params = job.user_parameters
            # evaluate user_params inside the user params itself
            user_params = self._conf_helpers.fill_in_user_parameters(user_params, user_params)

            # build headers
            headers = {**api_cfg.default_headers.copy(), **request_cfg.headers.copy()}
            new_headers = self._conf_helpers.fill_in_user_parameters(headers, user_params)

            # build additional parameters
            query_parameters = {**api_cfg.default_query_parameters.copy(), **request_cfg.query_parameters.copy()}
            query_parameters = self._conf_helpers.fill_in_user_parameters(query_parameters, user_params)
            ssl_verify = api_cfg.ssl_verification
            timeout = api_cfg.timeout
            # additional_params = self._build_request_parameters(additional_params_cfg)

            query_parameters = self._add_page_params(job, query_parameters)

            request_parameters = {'params': query_parameters,
                                  'headers': new_headers,
                                  'verify': ssl_verify,
                                  'timeout': timeout}

            if job.request_content.content_type == configuration.ContentType.json:
                request_parameters['json'] = job.request_content.body
            elif job.request_content.content_type == configuration.ContentType.form:
                request_parameters['data'] = job.request_content.body

            row_path = job.request_parameters.endpoint_path

            if job.request_parameters.placeholders:
                placeholders = PlaceholdersUtils.get_params_for_child_jobs(job.request_parameters.placeholders,
                                                                           self._parent_results, self._parent_params)
                self._parent_params = placeholders[0]
                row_path = self._fill_placeholders(placeholders, job.request_parameters.endpoint_path)

            self._final_response = self._client.send_request(method=job.request_parameters.method,
                                                             endpoint_path=row_path, **request_parameters)

            current_results = self._parse_data(self._final_response.json(), job.data_path)

            if config_index == len(self._configurations) - 1:
                if isinstance(current_results, list):
                    final_results.extend(current_results)
                else:
                    final_results.append(current_results)

            else:
                if isinstance(current_results, list):
                    # limit the number of calls to 10 because of timeout
                    for result in current_results[:MAX_CHILD_CALLS]:
                        recursive_call(result, config_index + 1)
                else:
                    recursive_call(current_results, config_index + 1)

        try:
            recursive_call({})
            error_message = ''
        except HttpClientError as e:
            error_message = str(e)
            if e.response is not None:
                self._final_response = e.response
            else:
                raise UserException(e) from e

        return final_results, self._final_response, self.log.getvalue(), error_message

    @sync_action('load_from_curl')
    def load_from_curl(self) -> dict:
        """
        Load configuration from cURL command
        """
        self.init_component()
        curl_command = self.configuration.parameters.get('__CURL_COMMAND')
        if not curl_command:
            raise ValueError('cURL command not provided')
        job = build_job_from_curl(curl_command, self._configuration.api.base_url)

        return job.to_dict()

    @sync_action('infer_mapping')
    def infer_mapping(self) -> dict:
        """
        Load configuration from cURL command
        """
        self.init_component()
        data, response, log, error = self.make_call()

        if error:
            raise UserException(error)

        nesting_level = self.configuration.parameters.get('__NESTING_LEVEL', 2)
        primary_keys = self.configuration.parameters.get('__PRIMARY_KEY', [])
        is_child_job = len(self.configuration.parameters.get('__SELECTED_JOB', '').split('_')) > 1
        parent_pkey = []
        if len(self._configurations) > 1:
            parent_pkey = [f'parent_{p}' for p in self._configurations[-1].request_parameters.placeholders.keys()]

        if not data:
            raise UserException("The request returned no data to infer mapping from.")

        user_data_columns = []
        if self._configuration.user_data and not is_child_job:
            for record in data:
                for key, value in self._configuration.user_data.items():
                    user_data_columns.append(key)
                    if key in record:
                        raise UserException(f"User data key [{key}] already exists in the response data, "
                                            f"please change the name.")
                    record[key] = value

        mapping = infer_mapping(data, primary_keys, parent_pkey,
                                user_data_columns=user_data_columns,
                                max_level_nest_level=nesting_level)
        return mapping

    @sync_action('perform_function')
    def perform_function_sync(self) -> dict:
        self.init_component()
        function_cfg = self.configuration.parameters['__FUNCTION_CFG']
        return {"result": ConfigHelpers().perform_custom_function('function',
                                                                  function_cfg, self._configuration.user_parameters)}

    @sync_action('test_request')
    def test_request(self):
        results, response, log, error_message = self.make_call()

        body = None
        if response.request.body:
            if isinstance(response.request.body, bytes):
                body = response.request.body.decode('utf-8')
            else:
                body = response.request.body

        secrets_to_hide = self._get_values_to_hide()
        filtered_response = self._deep_copy_and_replace_words(self._final_response, secrets_to_hide)
        filtered_log = self._deep_copy_and_replace_words(self.log.getvalue(), secrets_to_hide)
        filtered_body = self._deep_copy_and_replace_words(body, secrets_to_hide)

        # get response data:
        try:
            response_data = filtered_response.json()
        except JSONDecodeError:
            response_data = filtered_response.text

        result = {
            "response": {
                "status_code": filtered_response.status_code,
                "reason": filtered_response.reason,
                "data": response_data,
                "headers": dict(filtered_response.headers)
            },
            "request": {
                "url": response.request.url,
                "method": response.request.method,
                "data": filtered_body,
                "headers": dict(filtered_response.request.headers)
            },
            "records": results,
            "debug_log": filtered_log
        }
        return result


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)


================================================
File: /python-sync-actions/src/configuration.py
================================================
import dataclasses
import json
import time
import urllib.parse as urlparse
from dataclasses import dataclass, field
from enum import Enum
from typing import List, Tuple, Optional, Literal

import dataconf
from nested_lookup import nested_lookup

from user_functions import UserFunctions


class ConfigurationBase:

    @staticmethod
    def _convert_private_value(value: str):
        return value.replace('"#', '"pswd_')

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith('pswd_'):
            return value.replace('pswd_', '#', 1)
        else:
            return value

    @classmethod
    def load_from_dict(cls, configuration: dict):
        """
        Initialize the configuration dataclass object from dictionary.
        Args:
            configuration: Dictionary loaded from json configuration.

        Returns:

        """
        json_conf = json.dumps(configuration)
        json_conf = ConfigurationBase._convert_private_value(json_conf)
        return dataconf.loads(json_conf, cls, ignore_unexpected=True)

    @classmethod
    def get_dataclass_required_parameters(cls) -> List[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: List[str]

        """
        return [cls._convert_private_value_inv(f.name) for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING and f.default_factory == dataclasses.MISSING]


@dataclass
class RetryConfig(ConfigurationBase):
    max_retries: int = 1
    backoff_factor: float = 0.3
    codes: Tuple[int, ...] = (500, 502, 504)


@dataclass
class Authentication(ConfigurationBase):
    type: str
    parameters: dict = field(default_factory=dict)


@dataclass
class Pagination(ConfigurationBase):
    type: str
    parameters: dict = field(default_factory=dict)


@dataclass
class ApiConfig(ConfigurationBase):
    base_url: str
    default_query_parameters: dict = field(default_factory=dict)
    default_headers: dict = field(default_factory=dict)
    pagination: dict = field(default_factory=dict)
    authentication: Authentication = None
    retry_config: RetryConfig = field(default_factory=RetryConfig)
    ssl_verification: bool = True
    timeout: float = None


@dataclass
class ApiRequest(ConfigurationBase):
    method: str
    endpoint_path: str
    placeholders: dict = field(default_factory=dict)
    headers: dict = field(default_factory=dict)
    query_parameters: dict = field(default_factory=dict)
    continue_on_failure: bool = False
    nested_job: dict = field(default_factory=dict)
    scroller: str = None
    pagination: Pagination = None


@dataclass
class DataPath(ConfigurationBase):
    path: str = '.'
    delimiter: str = '.'

    def to_dict(self):
        return {
            'path': self.path,
            'delimiter': self.delimiter
        }


# CONFIGURATION OBJECT
class ContentType(str, Enum):
    none = "none"
    json = "json"
    form = "form"


@dataclass
class RequestContent(ConfigurationBase):
    content_type: ContentType
    query_parameters: dict = field(default_factory=dict)
    body: Optional[dict] = None


@dataclass
class Configuration(ConfigurationBase):
    api: ApiConfig
    request_parameters: ApiRequest
    request_content: RequestContent
    user_parameters: dict = field(default_factory=dict)
    user_data: dict = field(default_factory=dict)
    data_path: DataPath = field(default_factory=DataPath)


class ConfigurationKeysV2(Enum):
    api = 'api'
    user_parameters = 'user_parameters'
    request_options = 'request_options'

    @classmethod
    def list(cls):
        return list(map(lambda c: c.value, cls))


def _return_ui_params(data) -> list[str]:
    results = []

    def search_dict(d):
        if isinstance(d, dict):
            for key, value in d.items():
                if key == "attr" and isinstance(value, str) and (value.startswith("#__") or value.startswith("__")):
                    results.append(value)
                elif isinstance(value, dict) or isinstance(value, list):
                    search_dict(value)
        elif isinstance(d, list):
            for item in d:
                search_dict(item)

    search_dict(data)
    return results


def _remove_auth_from_dict(dictionary: dict, to_remove: list, auth_method: str) -> dict:
    filtered_dict = {}
    for key, value in dictionary.items():
        if isinstance(value, dict) and auth_method == 'bearer':
            if key != 'Authorization':
                filtered_value = _remove_auth_from_dict(value, to_remove)
                if filtered_value:
                    filtered_dict[key] = filtered_value
        else:
            if value not in to_remove:
                filtered_dict[key] = value

    return filtered_dict


def convert_to_v2(configuration: dict) -> list[Configuration]:
    """
    Convert configuration to v2 format
    Args:
        configuration: Configuration in v1 format

    Returns: Configuration in v2 format

    """
    user_parameters = build_user_parameters(configuration)

    api_json = configuration.get('api', {})
    base_url = api_json.get('baseUrl', '')
    default_headers_org = api_json.get('http', {}).get('headers', {})
    default_query_parameters_org = api_json.get('http', {}).get('defaultOptions', {}).get('params', {})

    auth_method = configuration.get('config').get('__AUTH_METHOD')

    default_headers = _remove_auth_from_dict(default_headers_org, _return_ui_params(configuration), auth_method)
    default_query_parameters = _remove_auth_from_dict(default_query_parameters_org, _return_ui_params(configuration),
                                                      auth_method)

    pagination = {}
    if api_json.get('pagination', {}).get('scrollers'):
        pagination = api_json.get('pagination', {}).get('scrollers')
    elif api_json.get('pagination'):
        pagination['common'] = api_json.get('pagination')

    api_config = ApiConfig(base_url=base_url, default_headers=default_headers,
                           default_query_parameters=default_query_parameters, pagination=pagination)

    api_config.retry_config = build_retry_config(configuration)
    api_config.authentication = AuthMethodConverter.convert(configuration)

    requests = []

    jobs = build_api_request(configuration)

    for api_request, request_content, data_path in jobs:
        requests.append(
            Configuration(api=api_config,
                          request_parameters=api_request,
                          request_content=request_content,
                          user_parameters=user_parameters,
                          user_data=configuration.get('config', {}).get('userData', {}),
                          data_path=data_path
                          )
        )

    return requests


def build_retry_config(configuration: dict) -> RetryConfig:
    """
    Build retry configuration from configuration
    Args:
        configuration: Configuration in v2 format

    Returns: Retry configuration

    """
    http_section = configuration.get('api', {}).get('http', {})
    return RetryConfig(max_retries=http_section.get('maxRetries', 10),
                       codes=http_section.get('codes', (500, 502, 503, 504, 408, 420, 429)))


def build_user_parameters(configuration: dict) -> dict:
    """
    Build user parameters from configuration
    Args:
        configuration: Configuration in v2 format

    Returns: User parameters

    """
    config_excluded_keys = ['__AUTH_METHOD', '__NAME', '#__BEARER_TOKEN', 'jobs', 'outputBucket', 'incrementalOutput',
                            'http', 'debug', 'mappings', ' #username', '#password', 'userData']
    user_parameters = {}
    for key, value in configuration.get('config', {}).items():
        if key not in config_excluded_keys:
            user_parameters[key] = value
    return user_parameters


def build_api_request(configuration: dict) -> List[Tuple[ApiRequest, RequestContent, DataPath]]:
    """
    Build API request and content from configuration
    Args:
        configuration: Configuration in v2 format

    Returns: list of tuples (ApiRequest, RequestContent, DataPath)

    """

    result_requests = []

    job_path: str = configuration.get('__SELECTED_JOB')

    if not job_path:
        # job path may be empty for other actions
        return [(None, None, None)]

    selected_jobs = job_path.split('_')

    nested_path = []

    for index in selected_jobs:
        nested_path.append(int(index))

        endpoint_config = configuration.get('config', {}).get('jobs')[nested_path[0]]

        if not endpoint_config:
            raise ValueError('Jobs section not found in the configuration, no endpoint specified')

        for child in nested_path[1:]:
            try:
                endpoint_config = endpoint_config.get('children', [])[child]
            except IndexError:
                raise ValueError('Jobs section not found in the configuration, no endpoint specified')

        method = endpoint_config.get('method', 'GET')

        request_content = build_request_content(method, endpoint_config.get('params', {}))
        # use real method
        if method.upper() == 'FORM':
            method = 'POST'

        endpoint_path = endpoint_config.get('endpoint')

        data_field = endpoint_config.get('dataField')

        placeholders = endpoint_config.get('placeholders', {})

        scroller = endpoint_config.get('scroller', 'common')

        if isinstance(data_field, dict):
            path = data_field.get('path')
            delimiter = data_field.get("delimiter", ".")
            data_path = DataPath(path=path, delimiter=delimiter)
        elif data_field is None:
            data_path = None
        else:
            path = data_field or '.'
            delimiter = "."
            data_path = DataPath(path=path, delimiter=delimiter)

        # query params are supported only for GET requests
        if request_content.content_type == ContentType.none:
            query_params = endpoint_config.get('params', {})
        else:
            query_params = {}

        result_requests.append(
            (ApiRequest(method=method,
                        endpoint_path=endpoint_path,
                        placeholders=placeholders,
                        headers=endpoint_config.get('headers', {}),
                        query_parameters=query_params,
                        scroller=scroller),
             request_content,
             data_path))

    return result_requests


def build_request_content(method: Literal['GET', 'POST', 'FORM'], params: dict) -> RequestContent:
    match method:
        case 'GET':
            request_content = RequestContent(ContentType.none, query_parameters=params)
        case 'POST':
            request_content = RequestContent(ContentType.json,
                                             body=params)
        case 'FORM':
            request_content = RequestContent(ContentType.form,
                                             body=params)
        case _:
            raise ValueError(f'Unsupported method: {method}')
    return request_content


def _find_api_key_location(dictionary):
    position = None
    final_key = None

    for key, val in dictionary.get('defaultOptions', {}).get('params', {}).items():
        if val == {'attr': '#__AUTH_TOKEN'}:
            final_key = key
            position = 'query'

    for key, val in dictionary.get('headers', {}).items():
        if val == {'attr': '#__AUTH_TOKEN'}:
            final_key = key
            position = 'headers'

    return position, final_key


class AuthMethodConverter:
    SUPPORTED_METHODS = ['basic', 'api-key', 'bearer']

    @classmethod
    def convert(cls, config_parameters: dict) -> Authentication | None:
        """

        Args:
            config_parameters (dict):
        """
        auth_method = config_parameters.get('config', {}).get('__AUTH_METHOD', None)
        # or take it form the authentication section
        auth_method = auth_method or config_parameters.get('api', {}).get('authentication', {}).get('type')
        if not auth_method or auth_method == 'custom':
            return None

        methods = {
            'basic': cls._convert_basic,
            'bearer': cls._convert_bearer,
            'api-key': cls._convert_api_key,
            'query': cls._convert_query,
            'login': cls._convert_login,
            'oauth2': cls._convert_login
        }

        func = methods.get(auth_method)

        if func:
            return func(config_parameters)
        else:
            raise ValueError(f'Unsupported auth method: {auth_method}')

    @classmethod
    def _convert_basic(cls, config_parameters: dict) -> Authentication:
        username = config_parameters.get('config').get('username')
        password = config_parameters.get('config').get('#password')
        if not username or not password:
            raise ValueError('Username or password not found in the BasicAuth configuration')

        return Authentication(type='BasicHttp', parameters={'username': username, '#password': password})

    @classmethod
    def _convert_api_key(cls, config_parameters: dict) -> Authentication:
        position, key = _find_api_key_location(config_parameters.get("api").get("http"))
        token = config_parameters.get('config').get('#__AUTH_TOKEN')

        return Authentication(type='ApiKey', parameters={'key': key, 'token': token, 'position': position})

    @classmethod
    def _convert_query(cls, config_parameters: dict) -> Authentication:
        query_params = config_parameters.get("api").get("authentication").get("query")
        query_params_filled = ConfigHelpers().fill_in_user_parameters(query_params, config_parameters.get('config'))

        return Authentication(type='Query', parameters={'params': query_params_filled})

    @classmethod
    def _convert_bearer(cls, config_parameters: dict) -> Authentication:
        token = config_parameters.get('config').get('#__BEARER_TOKEN')
        if not token:
            raise ValueError('Bearer token not found in the Bearer Token Authentication configuration')

        return Authentication(type='BearerToken', parameters={'#token': token})

    @classmethod
    def _convert_login(cls, config_parameters: dict) -> Authentication:
        method_mapping = {'GET': 'GET', 'POST': 'POST', 'FORM': 'POST'}
        helpers = ConfigHelpers()
        login_request: dict = config_parameters.get('api', {}).get("authentication", {}).get("loginRequest", {})
        api_request: dict = config_parameters.get('api', {}).get("authentication", {}).get("apiRequest", {})
        # evaluate functions and user parameters
        user_parameters = build_user_parameters(config_parameters)
        user_parameters = helpers.fill_in_user_parameters(user_parameters, user_parameters)
        login_request_eval = helpers.fill_in_user_parameters(login_request, user_parameters)
        # the function evaluation is left for the Auth method because of the response placeholder
        api_request_eval = helpers.fill_in_user_parameters(api_request, user_parameters, False)

        if not login_request:
            raise ValueError('loginRequest configuration not found in the Login 88Authentication configuration')

        login_endpoint: str = login_request_eval.get('endpoint')
        login_url = urlparse.urljoin(config_parameters.get('api', {}).get('baseUrl', ''), login_endpoint)

        method = login_request_eval.get('method', 'GET')

        login_request_content: RequestContent = build_request_content(method, login_request_eval.get('params', {}))

        try:
            result_method: str = method_mapping[login_request_eval.get('method', 'GET').upper()]
        except KeyError:
            raise ValueError(f'Unsupported method: {login_request_eval.get("method")}')

        login_query_parameters: dict = login_request_content.query_parameters
        login_headers: dict = login_request_eval.get('headers', {})
        api_request_headers: dict = api_request_eval.get('headers', {})
        api_request_query_parameters: dict = api_request_eval.get('params', {})

        parameters = {'login_endpoint': login_url,
                      'method': result_method,
                      'login_query_parameters': login_query_parameters,
                      'login_headers': login_headers,
                      'login_query_body': login_request_content.body,
                      'login_content_type': login_request_content.content_type.value,
                      'api_request_headers': api_request_headers,
                      'api_request_query_parameters': api_request_query_parameters}

        return Authentication(type='Login', parameters=parameters)


class ConfigHelpers:

    def __init__(self):
        self.user_functions = UserFunctions()

    def fill_in_user_parameters(self, conf_objects: dict, user_param: dict,
                                evaluate_conf_objects_functions: bool = True):
        """
        This method replaces user parameter references via attr + parses functions inside user parameters,
        evaluates them and fills in the resulting values

        Args:
            conf_objects: Configuration that contains the references via {"attr": "key"} to user parameters or function
                            definitions
            user_param: User parameters that are used to fill in the values

        Returns:

        """
        # time references
        conf_objects = self.fill_in_time_references(conf_objects)
        user_param = self.fill_in_time_references(user_param)
        # convert to string minified
        steps_string = json.dumps(conf_objects, separators=(',', ':'))
        # dirty and ugly replace
        for key in user_param:
            if isinstance(user_param[key], dict):
                # in case the parameter is function, validate, execute and replace value with result
                res = self.perform_custom_function(key, user_param[key], user_param)
                user_param[key] = res

            lookup_str = '{"attr":"' + key + '"}'
            steps_string = steps_string.replace(lookup_str, '"' + str(user_param[key]) + '"')
        new_steps = json.loads(steps_string)
        non_matched = nested_lookup('attr', new_steps)

        if evaluate_conf_objects_functions:
            for key in new_steps:
                if isinstance(new_steps[key], dict):
                    # in case the parameter is function, validate, execute and replace value with result
                    res = self.perform_custom_function(key, new_steps[key], user_param)
                    new_steps[key] = res

        if non_matched:
            raise ValueError(
                'Some user attributes [{}] specified in parameters '
                'are not present in "user_parameters" json_path.'.format(non_matched))
        return new_steps

    @staticmethod
    def fill_in_time_references(conf_objects: dict):
        """
        This method replaces user parameter references via attr + parses functions inside user parameters,
        evaluates them and fills in the resulting values

        Args:
            conf_objects: Configuration that contains the references via {"attr": "key"} to user parameters or function
                            definitions

        Returns:

        """
        # convert to string minified
        steps_string = json.dumps(conf_objects, separators=(',', ':'))
        # dirty and ugly replace

        new_cfg_str = steps_string.replace('{"time":"currentStart"}', f'{int(time.time())}')
        new_cfg_str = new_cfg_str.replace('{"time":"previousStart"}', f'{int(time.time())}')
        new_config = json.loads(new_cfg_str)
        return new_config

    def perform_custom_function(self, key: str, function_cfg: dict, user_params: dict):
        """
        Perform custom function recursively (may be nested)
        Args:
            key: key of the user parameter wher the function is
            function_cfg: conf of the function
            user_params:

        Returns:

        """
        function_cfg = self.fill_in_time_references(function_cfg)
        if not isinstance(function_cfg, dict):
            # in case the function was evaluated as time
            return function_cfg

        elif function_cfg.get('attr'):
            return user_params[function_cfg['attr']]

        if not function_cfg.get('function'):
            for key in function_cfg:
                function_cfg[key] = self.perform_custom_function(key, function_cfg[key], user_params)

        new_args = []
        if function_cfg.get('args'):
            for arg in function_cfg.get('args'):
                if isinstance(arg, dict):
                    arg = self.perform_custom_function(key, arg, user_params)
                new_args.append(arg)
            function_cfg['args'] = new_args
        if isinstance(function_cfg, dict) and not function_cfg.get('function'):
            return function_cfg
        return self.user_functions.execute_function(function_cfg['function'], *function_cfg.get('args', []))


================================================
File: /python-sync-actions/src/http_generic/client.py
================================================
from typing import Tuple, Dict

import requests
from keboola.http_client import HttpClient
from requests.adapters import HTTPAdapter
from requests.exceptions import HTTPError, InvalidJSONError, ConnectionError
from urllib3 import Retry

from http_generic.auth import AuthMethodBase


class HttpClientError(Exception):
    def __init__(self, message, response=None):
        self.response = response
        super().__init__(message)


# TODO: add support for pagination methods
class GenericHttpClient(HttpClient):

    def __init__(self, base_url: str,
                 default_http_header: Dict = None,
                 default_params: Dict = None,
                 auth_method: AuthMethodBase = None,
                 max_retries: int = 10,
                 backoff_factor: float = 0.3,
                 status_forcelist: Tuple[int, ...] = (500, 502, 504)
                 ):
        super().__init__(base_url=base_url, max_retries=max_retries, backoff_factor=backoff_factor,
                         status_forcelist=status_forcelist,
                         default_http_header=default_http_header, default_params=default_params)

        self._auth_method = auth_method

    def login(self):
        """
        Perform login based on auth method

        """
        # perform login
        if self._auth_method:
            self._auth = self._auth_method.login()

    def send_request(self, method, endpoint_path, **kwargs):
        try:
            resp = self._request_raw(method=method, endpoint_path=endpoint_path, is_absolute_path=False, **kwargs)
            resp.raise_for_status()
            return resp
        except HTTPError as e:
            if e.response.status_code in self.status_forcelist:
                message = f'Request "{method}: {endpoint_path}" failed, too many retries. ' \
                          f'Status Code: {e.response.status_code}. Response: {e.response.text}'
            else:
                message = f'Request "{method}: {endpoint_path}" failed with non-retryable error. ' \
                          f'Status Code: {e.response.status_code}. Response: {e.response.text}'
            raise HttpClientError(message, resp) from e
        except InvalidJSONError:
            message = f'Request "{method}: {endpoint_path}" failed. The JSON payload is invalid (more in detail). ' \
                      f'Verify the datatype conversion.'
            raise HttpClientError(message, resp)
        except ConnectionError as e:
            message = f'Request "{method}: {endpoint_path}" failed with the following error: {e}'
            raise HttpClientError(message, resp) from e

    def build_url(self, base_url, endpoint_path):
        self.base_url = base_url
        return self._build_url(endpoint_path)

    # override to continue on retry error
    def _requests_retry_session(self, session=None):
        session = session or requests.Session()
        retry = Retry(
            total=self.max_retries,
            read=self.max_retries,
            connect=self.max_retries,
            backoff_factor=self.backoff_factor,
            status_forcelist=self.status_forcelist,
            allowed_methods=self.allowed_methods,
            raise_on_status=False
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        return session


================================================
File: /python-sync-actions/src/http_generic/auth.py
================================================
import inspect
import json
import re
from abc import ABC, abstractmethod
from typing import Callable, Union, Dict, Literal
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse

import requests
from requests import auth
from requests.auth import AuthBase, HTTPBasicAuth

from configuration import ContentType, ConfigHelpers
from placeholders_utils import get_data_from_path


class AuthBuilderError(Exception):
    pass


class AuthMethodBase(ABC):
    """
    Base class to implement the authentication method. To mark secret constructor parameters prefix them with __
    e.g. __init__(self, username, __password)
    """

    @abstractmethod
    def login(self):
        """
        Perform steps to login and returns requests.aut.AuthBase callable that modifies the request.

        """
        pass

    @abstractmethod
    def get_secrets(self) -> list[str]:
        """
        Helper method to apply loging filters
        Returns:

        """
        pass


class AuthMethodBuilder:

    @classmethod
    def build(cls, method_name: str, **parameters):
        """

        Args:
            method_name:
            **parameters: dictionary of named parameters. Note that parameters prefixed # will be converted to __

        Returns:

        """
        supported_actions = cls.get_methods()

        if method_name not in list(supported_actions.keys()):
            raise AuthBuilderError(f'{method_name} is not supported auth method, '
                                   f'supported values are: [{list(supported_actions.keys())}]')
        parameters = cls._convert_secret_parameters(supported_actions[method_name], **parameters)
        cls._validate_method_arguments(supported_actions[method_name], **parameters)

        return supported_actions[method_name](**parameters)

    @staticmethod
    def _validate_method_arguments(c_converted_method: object, **args):
        class_prefix = f"_{c_converted_method.__name__}__"
        arguments = [p for p in inspect.signature(c_converted_method.__init__).parameters if p != 'self']
        missing_arguments = []
        for p in arguments:
            if p not in args:
                missing_arguments.append(p.replace(class_prefix, '#'))
        if missing_arguments:
            raise AuthBuilderError(f'Some arguments of method {c_converted_method.__name__} '
                                   f'are missing: {missing_arguments}')

    @staticmethod
    def _convert_secret_parameters(c_converted_method: object, **parameters):
        new_parameters = {}
        for p in parameters:
            new_parameters[p.replace('#', f'_{c_converted_method.__name__}__')] = parameters[p]
        return new_parameters

    @staticmethod
    def get_methods() -> Dict[str, Callable]:
        supported_actions = {}
        for c in AuthMethodBase.__subclasses__():
            supported_actions[c.__name__] = c
        return supported_actions

    @classmethod
    def get_supported_methods(cls):
        return list(cls.get_methods().keys())


# ########### SUPPORTED AUTHENTICATION METHODS

# TODO: Add all supported authentication methods that will be covered by the UI

class BasicHttp(AuthMethodBase):

    def __init__(self, username, __password):
        self.username = username
        self.password = __password

    def login(self) -> Union[AuthBase, Callable]:
        return HTTPBasicAuth(username=self.username, password=self.password)

    def __eq__(self, other):
        return all([
            self.username == getattr(other, 'username', None),
            self.password == getattr(other, 'password', None)
        ])

    def get_secrets(self):
        return [auth._basic_auth_str(self.username, self.password)]


class BearerToken(AuthMethodBase, AuthBase):

    def get_secrets(self) -> list[str]:
        return [self.token]

    def __init__(self, __token):
        self.token = __token

    def login(self) -> Union[AuthBase, Callable]:
        return self

    def __eq__(self, other):
        return all([
            self.token == getattr(other, 'token', None)
        ])

    def __ne__(self, other):
        return not self == other

    def __call__(self, r):
        r.headers['authorization'] = f"Bearer {self.token}"
        return r


class ApiKey(AuthMethodBase, AuthBase):
    def get_secrets(self) -> list[str]:
        return [self.token]

    def __init__(self, key: str, token: str, position: str):
        self.token = token
        self.key = key
        self.position = position

    def login(self) -> Union[AuthBase, Callable]:
        return self

    def __eq__(self, other):
        return all([
            self.token == getattr(other, 'token', None)
        ])

    def __ne__(self, other):
        return not self == other

    def __call__(self, r):
        if self.position == 'headers':
            r.headers[self.key] = f"{self.token}"

        elif self.position == 'query':
            parsed_url = urlparse(r.url)
            query_params = parse_qs(parsed_url.query)
            query_params.update({self.key: self.token})
            new_query = urlencode(query_params, doseq=True)
            r.url = urlunparse(parsed_url._replace(query=new_query))

        else:
            raise AuthBuilderError(f"Unsupported position {self.position} for API Key auth method")
        return r


class Query(AuthMethodBase, AuthBase):
    def get_secrets(self) -> list[str]:
        return [value for value in self.params.values()]

    def __init__(self, params: Dict):
        self.params = params

    def login(self) -> Union[AuthBase, Callable]:
        return self

    def __call__(self, r):
        r.url = f"{r.url}?{urlencode(self.params)}"
        return r


class Login(AuthMethodBase, AuthBase):

    def __init__(self, login_endpoint: str, method: str = 'GET',
                 login_query_parameters: dict = None,
                 login_query_body=None,
                 login_content_type: str = ContentType.json.value,
                 login_headers: dict = None,
                 api_request_headers: dict = None, api_request_query_parameters: dict = None):
        """

        Args:
            login_endpoint:
            method:
            login_query_parameters:
            login_headers:
            api_request_headers:
            api_request_query_parameters:
        """
        self.login_endpoint = login_endpoint
        self.method = method
        self.login_query_parameters = login_query_parameters or {}
        self.login_query_body = login_query_body
        self.login_content_type = ContentType(login_content_type)
        self.login_headers = login_headers or {}
        self.api_request_headers = api_request_headers or {}
        self.api_request_query_parameters = api_request_query_parameters or {}

    @classmethod
    def _retrieve_response_placeholders(cls, request_object: dict, separator: str = '.', current_path: str = '') -> \
            list[str]:
        """
        Recursively retreive all values that contain object with key `response` and return it's value and json path
        Args:
            request_object:

        Returns:

        """
        request_object_str = json.dumps(request_object, separators=(',', ':'))
        lookup_str_func = r'"response":"([^"]*)"'
        # Use re.search to find the pattern in your_string
        matches = re.findall(lookup_str_func, request_object_str)

        return matches

    def _replace_placeholders_with_response(self, response_data: dict, source_object_params: dict) -> dict:
        """
        Replace placeholders in source_object_params with values from response_data
        Args:
            response_data:
            source_object_params:

        Returns:

        """
        response_placeholders = self._retrieve_response_placeholders(source_object_params)
        source_object_params_str = json.dumps(source_object_params, separators=(',', ':'))
        for placeholder in response_placeholders:
            lookup_str = '{"response":"' + placeholder + '"}'
            value_to_replace = get_data_from_path(placeholder, response_data, separator='.', strict=False)
            source_object_params_str = source_object_params_str.replace(lookup_str, '"' + value_to_replace + '"')
        return json.loads(source_object_params_str)

    def login(self) -> Union[AuthBase, Callable]:
        request_parameters = {}

        if self.login_content_type == ContentType.json:
            request_parameters['json'] = self.login_query_body
        elif self.login_content_type == ContentType.form:
            request_parameters['data'] = self.login_query_body

        response = requests.request(self.method, self.login_endpoint, params=self.login_query_parameters,
                                    headers=self.login_headers,
                                    **request_parameters)

        response.raise_for_status()

        self.api_request_headers = self._replace_placeholders_with_response(response.json(), self.api_request_headers)
        self.api_request_query_parameters = self._replace_placeholders_with_response(response.json(),
                                                                                     self.api_request_query_parameters)
        cfg_helpers = ConfigHelpers()
        self.api_request_headers = cfg_helpers.fill_in_user_parameters(self.api_request_headers, {},
                                                                       True)
        self.api_request_query_parameters = cfg_helpers.fill_in_user_parameters(self.api_request_query_parameters,
                                                                                {},
                                                                                True)
        return self

    def get_secrets(self) -> list[str]:
        secrets = []
        for key, value in self.api_request_query_parameters.items():
            secrets.append(value)

        for key, value in self.api_request_headers.items():
            secrets.append(value)

        return secrets

    def __call__(self, r):

        r.url = f"{r.url}"
        if self.api_request_query_parameters:
            r.url = f"{r.url}?{urlencode(self.api_request_query_parameters)}"
        r.headers.update(self.api_request_headers)
        return r


class OAuth20ClientCredentials(AuthMethodBase, AuthBase):

    def __init__(self, login_endpoint: str,
                 client_secret: str,
                 client_id: str,
                 method: Literal['client_secret_post', 'client_secret_basic'] = 'client_secret_basic',
                 scopes: list[str] = None):
        """

        Args:
            login_endpoint:
            client_secret:
            client_id:
            method: 'client_secret_post' or 'client_secret_basic'
            scopes:
        """
        self.login_endpoint = login_endpoint
        self.method = method
        self.client_secret = client_secret
        self.client_id = client_id
        self.scopes = scopes or []
        self.auth_header = {}

    def login(self) -> Union[AuthBase, Callable]:
        data = {"grant_type": "client_credentials"}
        auth = None
        if self.scopes:
            data['scope'] = ' '.join(self.scopes)

        if self.method == 'client_secret_post':
            data['client_id'] = self.client_id
            data['client_secret'] = self.client_secret
        elif self.method == 'client_secret_basic':
            auth = (self.client_id, self.client_secret)

        response = requests.request('POST', self.login_endpoint, data=data, auth=auth)

        response.raise_for_status()

        self.auth_header = {'Authorization': f"Bearer {response.json()['access_token']}"}

        return self

    def get_secrets(self) -> list[str]:
        return [self.auth_header['Authorization']]

    def __call__(self, r):
        r.headers.update(self.auth_header)
        return r


================================================
File: /python-sync-actions/src/http_generic/pagination.py
================================================
class BasePagination:
    def get_page_params(self, paginator_params):
        raise NotImplementedError("Subclasses should implement this method")


class DummyPagination(BasePagination):
    def get_page_params(self, paginator_params):
        return {}


class OffsetPagination(BasePagination):
    def get_page_params(self, paginator_params):
        page_params = {}
        if paginator_params.get("firstPageParams", True):
            page_params[paginator_params.get("offsetParam", "offset")] = paginator_params.get("offset", 0)
            page_params[paginator_params.get("limitParam", "limit")] = paginator_params.get("limit")
        return page_params


class PageNumPagination(BasePagination):
    def get_page_params(self, paginator_params):
        page_params = {}
        if paginator_params.get("firstPageParams"):
            page_params[paginator_params.get("pageParam", "page")] = paginator_params.get("firstPage", 1)
            if paginator_params.get("limit"):
                page_params[paginator_params.get("limitParam", "limit")] = paginator_params.get("limit")
        return page_params


class PaginationBuilder:

    @classmethod
    def get_paginator(cls, pagination):
        """Factory function to create the appropriate paginator configuration."""
        if pagination == 'offset':
            return OffsetPagination()
        elif pagination == 'pagenum':
            return PageNumPagination()
        else:
            return DummyPagination()


================================================
File: /python-sync-actions/src/user_functions.py
================================================
import base64
import hashlib
import subprocess
import time

import keboola.utils as kbcutils
from keboola.component import UserException


def perform_shell_command(command: str, context_detail: str = '') -> tuple[str, str]:
    """
    Perform shell command
    Args:
        command: shell command
        context_detail: additional context detail for exception handling

    Returns: command output

    """
    # Running the command
    result = subprocess.run(command, shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # Getting the results
    stdout_str = result.stdout
    stderr_str = result.stderr

    if result.returncode != 0:
        raise UserException(f"Error while performing {context_detail}: {stderr_str}")
    return stdout_str, stderr_str


class UserFunctions:
    """
    Custom function to be used in configruation
    """

    def validate_function_name(self, function_name):
        supp_functions = self.get_supported_functions()
        if function_name not in self.get_supported_functions():
            raise ValueError(
                F"Specified user function [{function_name}] is not supported! "
                F"Supported functions are {supp_functions}")

    @classmethod
    def get_supported_functions(cls):
        return [method_name for method_name in dir(cls)
                if callable(getattr(cls, method_name)) and not method_name.startswith('__')
                and method_name not in ['validate_function_name', 'get_supported_functions', 'execute_function']]

    def execute_function(self, function_name, *pars):
        self.validate_function_name(function_name)
        return getattr(UserFunctions, function_name)(self, *pars)

    # ############## USER FUNCTIONS
    def string_to_date(self, date_string, date_format='%Y-%m-%d'):
        start_date, end_date = kbcutils.parse_datetime_interval(date_string, date_string)
        return start_date.strftime(date_format)

    def concat(self, *args):
        return ''.join(args)

    def base64_encode(self, s):
        return base64.b64encode(s.encode('utf-8')).decode('utf-8')

    def md5(self, s):
        return hashlib.md5(s.encode('utf-8')).hexdigest()

    def sha1(self, s):
        return hashlib.sha1(s.encode('utf-8')).hexdigest()

    def implode(self, delimiter, values):
        return delimiter.join(values)

    def hash_hmac(self, algorithm, key, message):
        """
        Execute PHP hash_hmac function
        Args:
            algorithm:
            key:
            message:

        Returns:

        """

        command = f"php -r 'echo hash_hmac(\"{algorithm}\", \"{message}\", \"{key}\");'"
        stdout, stderr = perform_shell_command(command, 'hash_hmac function')

        return stdout

    def hash(self, algorithm, message):
        """
        Execute PHP hash function
        Args:
            algorithm:
            message:

        Returns:

        """

        command = f"php -r 'echo hash(\"{algorithm}\", \"{message}\");'"
        stdout, stderr = perform_shell_command(command, 'hash function')

        return stdout

    def time(self):
        return int(time.time())

    def date(self, format_string, timestamp=None):
        """
        Execute PHP date function
        Args:
            format_string:
            timestamp:

        Returns:

            """

        command = f"php -r 'echo date(\"{format_string}\", {timestamp or int(time.time())});'"
        stdout, stderr = perform_shell_command(command, 'date function')

        return stdout

    def strtotime(self, string, base_time=None):
        """
        Execute PHP strtotime function
        Args:
            string:
            base_time:

        Returns:

        """

        command = f"php -r 'echo strtotime(\"{string}\", {base_time or int(time.time())});'"
        stdout, stderr = perform_shell_command(command, 'strotime function')

        return int(stdout)

    def sprintf(self, format_string, *values):
        return format_string % values

    def ifempty(self, test_value: str, return_value: str | bool | int | dict) -> str | bool | int | dict:
        if not test_value:
            return return_value


================================================
File: /python-sync-actions/src/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
File: /python-sync-actions/src/actions/curl.py
================================================
import json
import shlex
import subprocess
from dataclasses import dataclass, field
from typing import List, Any, Dict
from urllib.parse import urlparse

from keboola.component import UserException


@dataclass
class JobTemplate:
    endpoint: str = ""
    children: List[Any] = field(default_factory=list)
    method: str = "GET"
    dataField: dict = field(default_factory=dict)
    dataType: str = ""
    params: Dict[str, Any] = field(default_factory=dict)
    headers: Dict[str, Any] = field(default_factory=dict)

    def to_dict(self):
        return {
            "__NAME": self.endpoint,
            "endpoint": self.endpoint,
            "children": [child.to_dict() for child in self.children],
            "method": self.method,
            "dataType": self.dataType,
            "dataField": self.dataField,
            "params": self.params,
            "headers": self.headers
        }


def is_url(url: str) -> bool:
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except Exception:
        return False


def retrieve_url(curl_command: str) -> str:
    """
    Retrieve the URL from the cURL command
    Args:
        curl_command:

    Returns:

    """

    curl_command = curl_command.replace("\\\n", " ")

    tokens = shlex.split(curl_command)
    if tokens[0] != "curl":
        raise ValueError("Not a valid cURL command")

    # find valid URL
    url = ''
    for t in tokens:
        token_string = t
        if t.startswith("'") and t.endswith("'"):
            token_string = t[1:-1]

        if is_url(token_string):
            url = token_string
            break
    if not url:
        raise ValueError("No valid URL found in the cURL command")

    return url


def normalize_url_in_curl(curl_command: str) -> tuple[str, str]:
    """
    Normalize the URL in the cURL command to remove globs and other unsupported characters
    Args:
        curl_command:

    Returns: converted command, original url

    """
    unsupported_characters = ['{', '}']
    url = retrieve_url(curl_command)
    original_url = None
    new_url = url

    if any([char in url for char in unsupported_characters]):
        original_url = url.split('?')[0]

    for character in unsupported_characters:
        new_url = new_url.replace(character, '_')

    new_curl_command = curl_command.replace(url, new_url)
    return new_curl_command, original_url


def parse_curl(curl_command: str) -> dict:
    """
    Running the curlconverter to parse the cURL command, returns the JSON representation of the cURL command

    Example:
    {'url': 'https://api.example.com', 'raw_url': 'https://api.example.com?test=testvalue',
    'method': 'post',
    'headers': {'accept': 'application/json', 'Content-Type': 'application/json'},
    'queries': {'test': 'testvalue'}, 'data': {'key': 'value'}}

    https://github.com/curlconverter/curlconverter/
    Args:
        curl_command: The entire cURL command string.

    Returns: the JSON representation of the cURL command

    """
    # normalize the URL
    curl_command, original_url = normalize_url_in_curl(curl_command)
    escaped_curl_command = curl_command.replace("'", "'\\''")
    command = f"echo '{escaped_curl_command}' | curlconverter --language json -"

    # Running the command
    result = subprocess.run(command, shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # Getting the results
    stdout_str = result.stdout
    stderr_str = result.stderr

    if result.returncode != 0:
        raise UserException(f"Error parsing cURL: {stderr_str}")

    result = json.loads(stdout_str)
    # replace the original URL in case it was changed to enable child job detection
    if original_url:
        result['url'] = original_url

    return result


def _get_endpoint_path(base_url: str, url: str) -> str:
    """
    Get the endpoint path from the URL and the base_url
    Args:
        base_url: The base URL
        url: The URL

    Returns: The endpoint path

    """
    if url.startswith(base_url):
        return url[len(base_url):]
    else:
        return url


def _get_content_type(headers: dict) -> str:
    """
    Get the content type from the headers
    Args:
        headers:

    Returns:

    """
    for key, value in headers.items():
        if key.lower() == 'content-type':
            return value

    return ''


def build_job_from_curl(curl_command: str, base_url: str = None, is_child_job: bool = False) -> JobTemplate:
    """
    Get represenatiton of the JOB section from the curl_command
    Args:
        curl_command:

    Returns:

    """
    job_template = JobTemplate()
    # Parsing the cURL command
    parsed_curl = parse_curl(curl_command)

    if base_url:
        job_template.endpoint = _get_endpoint_path(base_url, parsed_curl['url'])
    else:
        job_template.endpoint = parsed_curl['url']

    parsed_method = parsed_curl['method'].upper()
    content_type = _get_content_type(parsed_curl.get('headers', {})).lower()
    if parsed_method == "POST" and content_type == "application/json":
        job_template.params = parsed_curl.get('data', {})
        job_template.method = "POST"

        if parsed_curl.get('queries'):
            raise UserException("Query parameters are not supported for POST requests with JSON content type")

    elif parsed_method == "POST" and content_type == "application/x-www-form-urlencoded":
        job_template.params = parsed_curl.get('data', {})
        job_template.method = "FORM"
    elif parsed_method == "GET":
        job_template.params = parsed_curl.get('queries', {})
        job_template.method = "GET"
    else:
        raise UserException(f"Unsupported method {parsed_method}, "
                            f"only GET, POST with JSON and POST with form data are supported.")

    job_template.method = parsed_curl['method'].upper()
    job_template.headers = parsed_curl.get('headers', {})
    job_template.dataType = job_template.endpoint.split('/')[-1]
    job_template.dataField = {"path": ".", "separator": "."}

    return job_template


================================================
File: /python-sync-actions/src/actions/mapping.py
================================================
from typing import Optional, Any

from keboola.component import UserException
from keboola.json_to_csv.analyzer import Analyzer
from keboola.json_to_csv.node import NodeType, Node
from keboola.utils.header_normalizer import DefaultHeaderNormalizer


class HeaderNormalizer(DefaultHeaderNormalizer):

    def _normalize_column_name(self, column_name: str) -> str:
        # Your implementation here

        column_name = self._replace_whitespace(column_name)
        column_name = self._replace_forbidden(column_name)
        if column_name.startswith('_'):
            column_name = column_name[1:]

        return column_name


class StuctureAnalyzer:

    def __init__(self):
        self.analyzer: Analyzer = Analyzer()
        self.header_normalizer = HeaderNormalizer(forbidden_sub='_')

    def parse_row(self, row: dict[str, Any]):
        current_path = []

        if isinstance(row, list):
            row = row[0]

        for name, value in row.items():
            self.analyzer.analyze_object(current_path, name, value)

    def infer_mapping(self,
                      primary_keys: Optional[list[str]] = None,
                      parent_pkeys: Optional[list[str]] = None,
                      user_data_columns: Optional[list[str]] = None,
                      path_separator: str = '.',
                      max_level: int = 2
                      ) -> dict:
        """
        Infer first level Generic Extractor mapping from data sample.
        Args:
            primary_keys: optional list of columns to be used as primary keys
            parent_pkeys: optional list of columns to be used as parent primary keys
            user_data_columns: optional list of columns to be used as user data columns
            path_separator: JSON path separator to use in the mapping
            max_level: maximum level to flatten results

        Returns:

        """
        result_mapping = self.__infer_mapping_from_structure_recursive(self.analyzer.node_hierarchy['children'],
                                                                       primary_keys,
                                                                       path_separator, max_level)

        if parent_pkeys:
            for key in parent_pkeys:
                if key in result_mapping:
                    raise UserException(f"Parent {key} is already in the mapping, "
                                        f"please change the placeholder name")
                result_mapping[key] = MappingElements.parent_primary_key_column(key)
        if user_data_columns:
            for key in user_data_columns:
                if key in result_mapping:
                    result_mapping[key] = MappingElements.user_data_column(key)

        return self.dedupe_values(result_mapping)

    @staticmethod
    def dedupe_values(mapping: dict) -> dict:
        """
        Dedupe values in mapping by adding suffixes.
        Args:
            mapping: mapping to dedupe
        """
        seen = {}
        for key, value in mapping.items():
            simple_mapping = True
            col_name = value
            if isinstance(value, dict):
                col_name = value['mapping']['destination']
                simple_mapping = False

            if col_name in seen.keys():
                seen[col_name] += 1
                if simple_mapping:
                    mapping[key] = f"{col_name}_{seen[col_name]}"
                else:
                    mapping[key]['mapping']['destination'] = f"{col_name}_{seen[col_name]}"
            else:
                seen[col_name] = 0
        return mapping

    def __infer_mapping_from_structure_recursive(self, node_hierarchy: dict[str, Any],
                                                 primary_keys: Optional[list[str]] = None,
                                                 path_separator: str = '.',
                                                 max_level: int = 2, current_mapping: dict = None,
                                                 current_level: int = 0) -> dict:
        """
        Infer first level Generic Extractor mapping from data sample.
        Args:
            node_hierarchy: sample data
            primary_keys: optional list of columns to be used as primary keys

        Returns:

        """
        current_level += 1

        if not current_mapping:
            current_mapping = {}
        for key, value in node_hierarchy.items():
            if isinstance(value, dict):
                current_node: Node = value['node']
                path_key = path_separator.join(current_node.path)
                normalized_header_name = self.header_normalizer._normalize_column_name(current_node.header_name)  # noqa
                match current_node.data_type:
                    case NodeType.SCALAR:
                        if path_key in primary_keys:
                            current_mapping[path_key] = MappingElements.primary_key_column(normalized_header_name)
                        else:
                            current_mapping[path_key] = normalized_header_name

                    case NodeType.DICT:
                        if current_level <= max_level:
                            self.__infer_mapping_from_structure_recursive(value['children'], primary_keys,
                                                                          path_separator,
                                                                          max_level, current_mapping,
                                                                          current_level)
                        else:
                            current_mapping[path_key] = MappingElements.force_type_column(normalized_header_name)
                    case _:
                        # all other types including unknown map with forceType option
                        current_mapping[path_key] = MappingElements.force_type_column(normalized_header_name)
            elif isinstance(value, list):
                # Handle list of dictionaries
                if all(isinstance(item, dict) for item in value):
                    for idx, item in enumerate(value):
                        list_key = f"{key}[{idx}]"
                        self.__infer_mapping_from_structure_recursive({list_key: item}, primary_keys,
                                                                      path_separator, max_level,
                                                                      current_mapping, current_level)
                else:
                    # Handle list of non-dictionary items
                    current_mapping[key] = MappingElements.force_type_column(key)
            else:
                # Handle scalar values directly
                current_mapping[key] = MappingElements.force_type_column(key)
        return current_mapping


class MappingElements:
    @staticmethod
    def primary_key_column(column_name: str) -> dict:
        return {
            "mapping": {
                "destination": column_name,
                "primaryKey": True
            }
        }

    @staticmethod
    def parent_primary_key_column(column_name: str) -> dict:
        return {
            "type": "user",
            "mapping": {
                "destination": column_name,
                "primaryKey": True
            }
        }

    @staticmethod
    def force_type_column(column_name: str) -> dict:
        return {
            "type": "column",
            "mapping": {
                "destination": column_name
            },
            "forceType": True
        }

    @staticmethod
    def user_data_column(column_name: str) -> dict:
        return {
            "type": "user",
            "mapping": {
                "destination": column_name
            }
        }


def infer_mapping(data: list[dict],
                  primary_keys: Optional[list[str]] = None,
                  parent_pkeys: Optional[list[str]] = None,
                  user_data_columns: Optional[list[str]] = None,
                  path_separator: str = '.',
                  max_level_nest_level: int = 2) -> dict:
    """
    Infer first level Generic Extractor mapping from data sample.
    Args:
        data: sample data
        primary_keys: optional list of columns to be used as primary keys
        parent_pkeys: optional list of columns to be used as parent primary keys
        user_data_columns: optional list of columns to be used as user data columns
        path_separator: JSON path separator to use in the mapping
        max_level_nest_level: maximum level to flatten results

    Returns:

    """
    analyzer = StuctureAnalyzer()

    if not isinstance(data, list):
        for _, item in data.items():
            if isinstance(item, list):
                data = item
                break

    for row in data:
        analyzer.parse_row(row)

    result = analyzer.infer_mapping(primary_keys or [], parent_pkeys or [],
                                    user_data_columns or [],
                                    path_separator=path_separator,
                                    max_level=max_level_nest_level)
    return result


def get_primary_key_columns(mapping: dict) -> list[str]:
    """
    Get primary key columns from mapping
    Args:
        mapping:

    Returns:

    """
    return [key for key, value in mapping.items() if
            isinstance(value, dict) and value.get('mapping', {}).get('primaryKey')]


================================================
File: /python-sync-actions/src/placeholders_utils.py
================================================
from collections import namedtuple
from itertools import product
from typing import List, Dict, Union, Any


class UserException(Exception):
    pass


class NoDataFoundException(Exception):
    pass


Placeholder = namedtuple('Placeholder', ['placeholder', 'json_path', 'value'])


class PlaceholdersUtils:

    @staticmethod
    def get_params_for_child_jobs(placeholders: Dict[str, Any], parent_results: List[Dict[str, Any]],
                                  parent_params: Dict[str, Any]) -> List[Dict[str, Any]]:
        params = {}
        for placeholder, field in placeholders.items():
            params[placeholder] = PlaceholdersUtils.get_placeholder(placeholder, field, parent_results)

        # Add parent params as well (for 'tagging' child-parent data)
        # Same placeholder in deeper nesting replaces parent value
        params = {**parent_params, **params}

        # Create all combinations if there are some parameter values as array.
        # Each combination will be one child job.
        return PlaceholdersUtils.get_params_per_child_job(params)

    @staticmethod
    def get_placeholder(placeholder: str, field: Union[str, Dict[str, Any]],
                        parent_results: List[Dict[str, Any]]) -> Dict[str, Any]:
        # Determine the level based on the presence of ':' in the placeholder name
        level = 0 if ':' not in placeholder else int(placeholder.split(':')[0]) - 1

        # Check function (defined as dict)
        if not isinstance(field, str):
            if 'path' not in field:
                raise UserException(f"The path for placeholder '{placeholder}' must be a string value"
                                    f"or an object containing 'path' and 'function'.")
            fn = field.copy()
            field = fn.pop('path')

        # Get value
        value = PlaceholdersUtils.get_placeholder_value(str(field), parent_results, level, placeholder)

        # Run function if provided
        if 'fn' in locals():
            # Example function to be replaced by actual implementation
            value = value

        return {
            'placeholder': placeholder,
            'json_path': field,
            'value': value
        }

    @staticmethod
    def get_placeholder_value(field: str, parent_results: List[Dict[str, Any]], level: int, placeholder: str) -> Any:
        try:
            if level >= len(parent_results):
                max_level = 0 if not parent_results else len(parent_results)
                raise UserException(f'Level {level + 1} not found in parent results! Maximum level: {max_level}')

            # Implement get_data_from_path to fetch data using a dot notation
            data = get_data_from_path(field, parent_results[level])

            return data

        except NoDataFoundException:
            raise UserException(
                f"No value found for placeholder {placeholder} in parent result. (level: {level + 1})",
                None, None, {'parents': parent_results}
            )

    @staticmethod
    def get_params_per_child_job(params: Dict[str, Placeholder]) -> List[Dict[str, Any]]:
        # Flatten parameters to a list of lists
        flattened = {}
        for placeholder_name, placeholder in params.items():
            if isinstance(placeholder['value'], list):
                flattened[placeholder_name] = [
                    {'placeholder': placeholder_name, 'json_path': placeholder['json_path'], 'value': value}
                    for value in placeholder['value']
                ]
            else:
                flattened[placeholder_name] = [placeholder]

        # Cartesian product to get all combinations
        return PlaceholdersUtils.cartesian(flattened)

    @staticmethod
    def cartesian(input_data: Dict[str, List[Dict[str, Any]]]) -> List[Dict[str, Any]]:
        # Generate the Cartesian product of input lists
        keys, values = zip(*input_data.items())
        product_list = [dict(zip(keys, combination)) for combination in product(*values)]

        return product_list


def get_data_from_path(json_path: str, data: Dict[str, Any], separator: str = '.', strict: bool = True) -> Any:
    """Mock function to fetch data using a dot-separated path notation. Replace with actual implementation."""
    keys = json_path.split(separator)
    for key in keys:
        if key not in data:
            if strict:
                raise NoDataFoundException(f"Key '{key}' not found in login data.")
            return None
        data = data[key]
    return data


================================================
File: /python-sync-actions/tests/test_mapping.py
================================================
import os
import unittest
from copy import deepcopy
from pathlib import Path

from freezegun import freeze_time

from actions.mapping import infer_mapping, StuctureAnalyzer
from component import Component


class TestCurl(unittest.TestCase):
    SAMPLE_DATA = [
        {
            "id": 123,
            "name": "John Doe",
            "contacts": {
                "email": "john.doe@example.com",
            },
            "array": [1, 2, 3]
        },
        {
            "id": 234,
            "name": "Jane Doe",
            "contacts": {
                "email": "jane.doe@example.com",
                "skype": "jane.doe"
            },
            "array": [1, 2, 3]
        }
    ]

    def setUp(self):
        self.tests_dir = Path(__file__).absolute().parent.joinpath('data_tests').as_posix()

    def _get_test_component(self, test_name):
        test_dir = os.path.join(self.tests_dir, test_name)
        os.environ['KBC_DATADIR'] = test_dir
        return Component()

    def test_nested_levels_pkeys(self):
        # nesting level 0
        expected = {'array': {'forceType': True, 'mapping': {'destination': 'array'}, 'type': 'column'},
                    'contacts': {'forceType': True, 'mapping': {'destination': 'contacts'}, 'type': 'column'},
                    'id': {'mapping': {'destination': 'id', 'primaryKey': True}}, 'name': 'name'}
        res = infer_mapping(self.SAMPLE_DATA, primary_keys=['id'], max_level_nest_level=0)

        self.assertEqual(res, expected)

        # nesting level 1
        expected = {'array': {'forceType': True, 'mapping': {'destination': 'array'}, 'type': 'column'},
                    'contacts.email': 'contacts_email', 'contacts.skype': 'contacts_skype',
                    'id': {'mapping': {'destination': 'id', 'primaryKey': True}}, 'name': 'name'}
        res = infer_mapping(self.SAMPLE_DATA, primary_keys=['id'], max_level_nest_level=1)

        self.assertEqual(res, expected)

    def test_no_pkey(self):
        # nesting level 1
        expected = {'array': {'forceType': True, 'mapping': {'destination': 'array'}, 'type': 'column'},
                    'contacts.email': 'contacts_email', 'contacts.skype': 'contacts_skype',
                    'id': 'id', 'name': 'name'}
        res = infer_mapping(self.SAMPLE_DATA, max_level_nest_level=1)

        self.assertEqual(res, expected)

    def test_user_data(self):
        # nesting level 1
        expected = {'array': {'forceType': True, 'mapping': {'destination': 'array'}, 'type': 'column'},
                    'contacts.email': 'contacts_email', 'contacts.skype': 'contacts_skype',
                    'id': 'id', 'name': 'name',
                    "date_start": {'mapping': {'destination': 'date_start'}, 'type': 'user'}}
        user_data_columns = ['date_start']
        sample_data = deepcopy(self.SAMPLE_DATA)
        for row in sample_data:
            row['date_start'] = '2021-01-01'

        res = infer_mapping(sample_data, max_level_nest_level=1, user_data_columns=user_data_columns)

        self.assertEqual(res, expected)

    def test_invalid_characters(self):
        data = [{
            "$id": 123,
            "name|test": "John Doe",
            "contacts": {
                "email": "john.doe@example.com",
            },
            "array&&invalid": [1, 2, 3]
        }]
        expected = {'$id': 'id', 'array&&invalid': {'forceType': True, 'mapping': {'destination': 'array__invalid'},
                                                    'type': 'column'}, 'contacts.email': 'contacts_email',
                    'name|test': 'name_test'}
        res = infer_mapping(data, max_level_nest_level=1)

        self.assertEqual(res, expected)

    def test_dedupe_keys(self):
        data = {'test_array': 'array', 'array2': {'forceType': True, 'mapping': {'destination': 'array'}},
                'contacts.email': 'contacts_email', 'contacts.skype': 'contacts_email',
                'id': 'id', 'name': 'name'}
        expected = {'array2': {'forceType': True, 'mapping': {'destination': 'array_1'}},
                    'contacts.email': 'contacts_email', 'contacts.skype': 'contacts_email_1', 'id': 'id',
                    'name': 'name', 'test_array': 'array'}
        res = StuctureAnalyzer.dedupe_values(data)
        self.assertEqual(res, expected)

    def test_list(self):
        data = {"maxResults": 100, "startAt": 0, "total": 375, "values": [{"id": "12", "value":{ "name": "Max", "age": 25}},
                                                                          {"id": "13", "value":{ "name": "Tom", "age": 30}},
                                                                          {"id": "14", "value":{ "name": "John", "age": 35}}]}

        expected = {'id': 'id', 'value.age': 'value_age', 'value.name': 'value_name'}
        res = infer_mapping(data, max_level_nest_level=1)

        self.assertEqual(res, expected)

    @freeze_time("2021-01-01")
    def test_infer_mapping_userdata(self):
        component = self._get_test_component('test_007_infer_mapping_userdata')
        output = component.infer_mapping()
        expected_output = {'id': 'id',
                           'start_date': {'mapping': {'destination': 'start_date'}, 'type': 'user'},
                           'status': 'status'}
        self.assertEqual(output, expected_output)

    def test_infer_mapping_userdata_child(self):
        component = self._get_test_component('test_008_infer_mapping_userdata_child')
        output = component.infer_mapping()
        # child job can't have user data
        expected_output = {'id': 'id',
                           'status': 'status'}
        self.assertEqual(output, expected_output)

    def test_types(self):
        data = [[
            {
                'id': 'asdf',
                'firstWorkingDay': '2024-07-16',
                'workingDays': [
                    {
                        'day': 'monday'
                    },
                    {
                        'day': 'tuesday'
                    },
                    {
                        'day': 'wednesday'
                    },
                    {
                        'day': 'thursday'
                    },
                    {
                        'day': 'friday'
                    }
                ],
                'teams': [
                    {
                        'name': 'Dream Team',
                    }
                ]
            },
            {
                'id': 'asdf2',
                'firstWorkingDay': '2024-07-16',
                'workingDays': [
                    {
                        'day': 'monday'
                    },
                    {
                        'day': 'tuesday'
                    },
                    {
                        'day': 'wednesday'
                    },
                    {
                        'day': 'thursday'
                    },
                    {
                        'day': 'friday'
                    }
                ],
                'teams': [
                    {
                        'name': 'Dream Team',
                    }
                ]
            }]]

        expected = {'firstWorkingDay': 'firstWorkingDay',
                    'id': 'id',
                    'teams': {'forceType': True,
                              'mapping': {'destination': 'teams'},
                              'type': 'column'},
                    'workingDays': {'forceType': True,
                                    'mapping': {'destination': 'workingDays'},
                                    'type': 'column'}}
        res = infer_mapping(data, max_level_nest_level=1)

        self.assertEqual(res, expected)


================================================
File: /python-sync-actions/tests/test_auth.py
================================================
import unittest

from http_generic.auth import Login


class TestLoginAuth(unittest.TestCase):

    def test_response_placeholders_simple(self):
        data = {"some_key": "some value",
                "nested": {"token": {"response": "accesstoken"}}}
        result = Login._retrieve_response_placeholders(data, separator='.')
        expected = ['accesstoken']
        self.assertEqual(result, expected)

    def test_response_placeholders_multiple(self):
        data = {"some_key": "some value",
                "first": {"response": "first_response"},
                "nested": {"token": {"response": "accesstoken"}}}
        result = Login._retrieve_response_placeholders(data, separator='_')
        expected = ['first_response', 'accesstoken']
        self.assertEqual(result, expected)


================================================
File: /python-sync-actions/tests/data_tests/test_003_oauth_cc/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "https://private-834388-extractormock.apiary-mock.com/",
      "http": {
        "retryHeader": "Retry-After",
        "maxRetries": 10,
        "codes": [
          408,
          420,
          429,
          500,
          502,
          503,
          504
        ],
        "connectTimeout": 30,
        "requestTimeout": 300
      },
      "authentication": {
        "type": "login",
        "format": "json",
        "loginRequest": {
          "endpoint": "https://login-demo.curity.io/oauth/v2/oauth-token",
          "method": "FORM",
          "headers": {
            "Accept": "application/json",
            "Authorization": {
              "function": "concat",
              "args": [
                "Basic ",
                {
                  "function": "base64_encode",
                  "args": [
                    {
                      "function": "concat",
                      "args": [
                        {
                          "attr": "__CLIENT_ID"
                        },
                        ":",
                        {
                          "attr": "#__CLIENT_SECRET"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "params": {
            "grant_type": "client_credentials",
            "scope": "read"
          }
        },
        "apiRequest": {
          "headers": {
            "Authorization": {
              "function": "concat",
              "args": [
                "Bearer ",
                {
                  "response": "access_token"
                }
              ]
            }
          }
        }
      }
    },
    "config": {
      "outputBucket": "TESTUPPER",
      "incrementalOutput": true,
      "jobs": [
        {
          "__NAME": "post",
          "endpoint": "get",
          "method": "GET",
          "dataType": "buckets",
          "dataField": {
            "path": ".",
            "delimiter": "."
          }
        }
      ],
      "includes": {
        "function": "date",
        "args": [
          "Y-m-d H:i:s",
          {
            "function": "strtotime",
            "args": [
              "-2 day",
              {
                "time": "currentStart"
              }
            ]
          }
        ]
      },
      "mappings": {},
      "userData": {
        "extraction_date": {
          "function": "date",
          "args": [
            "Y-m-d H:i:s",
            {
              "time": "currentStart"
            }
          ]
        }
      },
      "debug": true,
      "__AUTH_METHOD": "oauth2",
      "__CLIENT_ID": "demo-backend-client",
      "#__CLIENT_SECRET": "MJlO3binatD9jk1"
    },
    "__SELECTED_JOB": "0"
  },
  "action": "test_request"
}


================================================
File: /python-sync-actions/tests/data_tests/test_006_post_fail/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "pagination": {
        "method": "response.url",
        "urlKey": "next"
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "nonexistent",
          "method": "POST",
          "params": {
            "parameter": "value"
          }
        }
      ]
    },
    "__SELECTED_JOB": "0"
  },
  "action": "test_request"
}

================================================
File: /python-sync-actions/tests/data_tests/test_006_post_form/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "pagination": {
        "method": "response.url",
        "urlKey": "next"
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "post",
          "method": "FORM",
          "params": {
            "parameter": "value"
          }
        }
      ]
    },
    "__SELECTED_JOB": "0"
  },
  "action": "test_request"
}

================================================
File: /python-sync-actions/tests/data_tests/test_004_oauth_cc_post/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "https://private-834388-extractormock.apiary-mock.com/",
      "http": {
        "retryHeader": "Retry-After",
        "maxRetries": 10,
        "codes": [
          408,
          420,
          429,
          500,
          502,
          503,
          504
        ],
        "connectTimeout": 30,
        "requestTimeout": 300
      },
      "authentication": {
        "type": "login",
        "format": "json",
        "loginRequest": {
          "endpoint": "https://login-demo.curity.io/oauth/v2/oauth-token",
          "method": "FORM",
          "headers": {
            "Accept": "application/json"
          },
          "params": {
            "grant_type": "client_credentials",
            "scope": "read",
            "client_id": {
              "attr": "__CLIENT_ID"
            },
            "client_secret": {
              "attr": "#__CLIENT_SECRET"
            }
          }
        },
        "apiRequest": {
          "headers": {
            "Authorization": {
              "function": "concat",
              "args": [
                "Bearer ",
                {
                  "response": "access_token"
                }
              ]
            }
          }
        }
      }
    },
    "config": {
      "outputBucket": "TESTUPPER",
      "incrementalOutput": true,
      "jobs": [
        {
          "__NAME": "post",
          "endpoint": "get",
          "method": "GET",
          "dataType": "buckets",
          "dataField": {
            "path": ".",
            "delimiter": "."
          }
        }
      ],
      "includes": {
        "function": "date",
        "args": [
          "Y-m-d H:i:s",
          {
            "function": "strtotime",
            "args": [
              "-2 day",
              {
                "time": "currentStart"
              }
            ]
          }
        ]
      },
      "mappings": {},
      "userData": {
        "extraction_date": {
          "function": "date",
          "args": [
            "Y-m-d H:i:s",
            {
              "time": "currentStart"
            }
          ]
        }
      },
      "debug": true,
      "__AUTH_METHOD": "oauth2",
      "__CLIENT_ID": "demo-backend-client",
      "#__CLIENT_SECRET": "MJlO3binatD9jk1"
    },
    "__SELECTED_JOB": "0"
  },
  "action": "test_request"
}


================================================
File: /python-sync-actions/tests/data_tests/test_007_infer_mapping_userdata/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "pagination": {
        "method": "response.url",
        "urlKey": "next"
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "get",
          "method": "GET",
          "params": {
            "parameter": "value"
          }
        }
      ],
      "userData": {
        "start_date": {
          "function": "date",
          "args": [
            "Y-m-d H:i:s",
            {
              "time": "currentStart"
            }
          ]
        }
      }
    },
    "__SELECTED_JOB": "0"
  },
  "action": "infer_mapping"
}

================================================
File: /python-sync-actions/tests/data_tests/test_008_infer_mapping_userdata_child/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "pagination": {
        "method": "response.url",
        "urlKey": "next"
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "get",
          "method": "GET",
          "params": {
            "parameter": "value"
          },
          "children": [
            {
              "endpoint": "get",
              "method": "GET",
              "params": {
                "parameter": "value"
              }
            }
          ]
        }
      ],
      "userData": {
        "start_date": {
          "function": "date",
          "args": [
            "Y-m-d H:i:s",
            {
              "time": "currentStart"
            }
          ]
        }
      }
    },
    "__SELECTED_JOB": "0_0"
  },
  "action": "infer_mapping"
}

================================================
File: /python-sync-actions/tests/data_tests/test_005_post/config.json
================================================
{
  "parameters": {
    "api": {
      "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
      "pagination": {
        "method": "response.url",
        "urlKey": "next"
      }
    },
    "config": {
      "outputBucket": "getPost",
      "jobs": [
        {
          "endpoint": "post",
          "method": "POST",
          "params": {
            "parameter": "value"
          }
        }
      ]
    },
    "__SELECTED_JOB": "0"
  },
  "action": "test_request"
}

================================================
File: /python-sync-actions/tests/data_tests/test_002_nested/response.json
================================================
{
    "nested": {
    "users": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}
}

================================================
File: /python-sync-actions/tests/data_tests/test_002_nested/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "users",
        "endpoint": "users",
        "method": "GET",
        "dataType": "",
        "dataField": "nested.users"
      }
    ],
    "test": "test-value",

    "debug": false,
    "outputBucket": "in.c-",
    "incrementalOutput": false,
    "__AUTH_METHOD": "api-key",
    "#__AUTH_TOKEN": "token"
  },
  "api": {
    "baseUrl": "http://127.0.0.1:8000",
    "http": {
      "headers": {
        "auth-key": {
          "attr": "#__AUTH_TOKEN"
        }
      }
    }
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "run",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/data_tests/test_002_nested/output.json
================================================
[{"id": 123, "name": "John Doe"}, {"id": 234, "name": "Jane Doe"}]

================================================
File: /python-sync-actions/tests/data_tests/test_009_empty_datafield/response.json
================================================
{
    "data": [
        {
            "id": "1.0",
            "status": "first"
        },
        {
            "id": "1.1",
            "status": "page"
        }
    ],
    "next": "/scroll/next"
}

================================================
File: /python-sync-actions/tests/data_tests/test_009_empty_datafield/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "users",
        "endpoint": "scroll",
        "method": "GET",
        "dataType": "users"
      }
    ],
    "test": "test-value",

    "debug": false,
    "outputBucket": "somebucket",
    "incrementalOutput": false
  },
  "api": {
    "baseUrl": "https://private-834388-extractormock.apiary-mock.com/"
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "test-request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/data_tests/test_001/response.json
================================================
{
    "users": [
        {
            "id": 123,
            "name": "John Doe"
        },
        {
            "id": 234,
            "name": "Jane Doe"
        }
    ]
}

================================================
File: /python-sync-actions/tests/data_tests/test_001/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "users",
        "endpoint": "users",
        "method": "GET",
        "dataType": "",
        "dataField": "users"
      }
    ],
    "test": "test-value",

    "debug": false,
    "outputBucket": "in.c-",
    "incrementalOutput": false,
    "__AUTH_METHOD": "api-key",
    "#__AUTH_TOKEN": "token"
  },
  "api": {
    "baseUrl": "http://127.0.0.1:8000",
    "http": {
      "headers": {
        "auth-key": {
          "attr": "#__AUTH_TOKEN"
        }
      }
    }
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "run",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/data_tests/test_001/output.json
================================================
[{"id": 123, "name": "John Doe"}, {"id": 234, "name": "Jane Doe"}]

================================================
File: /python-sync-actions/tests/test_component.py
================================================
import os
import unittest
from pathlib import Path

from component import Component
from configuration import DataPath


class TestComponent(unittest.TestCase):

    def setUp(self) -> None:
        self.tests_dir = Path(__file__).absolute().parent.joinpath('data_tests').as_posix()

    def _get_test_component(self, test_name):
        test_dir = os.path.join(self.tests_dir, test_name)
        os.environ['KBC_DATADIR'] = test_dir
        return Component()

    # @patch('http_generic.client.GenericHttpClient.send_request')
    # def test_001_nested(self, mock_send_request):
    #
    #     mock_send_request.return_value.json.return_value = json.loads(
    #         Path(self.tests_dir, self._testMethodName, 'response.json').read_text())
    #
    #     component = self._get_test_component(self._testMethodName)
    #     output = component.run()
    #     expected_output = json.loads(Path(self.tests_dir, self._testMethodName, 'output.json').read_text())
    #     self.assertEqual(output, expected_output)
    #
    # @patch('http_generic.client.GenericHttpClient.send_request')
    # def test_002_nested(self, mock_send_request):
    #
    #     mock_send_request.return_value.json.return_value = json.loads(
    #         Path(self.tests_dir, self._testMethodName, 'response.json').read_text())
    #
    #     component = self._get_test_component(self._testMethodName)
    #     output = component.run()
    #     expected_output = json.loads(Path(self.tests_dir, self._testMethodName, 'output.json').read_text())
    #     self.assertEqual(output, expected_output)

    def test_003_oauth_cc(self):
        component = self._get_test_component(self._testMethodName)
        results, response, log, error_message = component.make_call()
        expected_data = [{'id': '321', 'status': 'get'}, {'id': 'girlfriend', 'status': 'imaginary'}]
        self.assertEqual(results, expected_data)
        self.assertTrue(response.request.headers['Authorization'].startswith('Bearer '))

    def test_003_oauth_cc_filtered(self):
        component = self._get_test_component('test_003_oauth_cc')
        results = component.test_request()
        self.assertEqual(results['request']['headers']['Authorization'], '--HIDDEN--')

    def test_004_oauth_cc_post(self):
        component = self._get_test_component(self._testMethodName)
        results, response, log, error_message = component.make_call()
        expected_data = [{'id': '321', 'status': 'get'}, {'id': 'girlfriend', 'status': 'imaginary'}]
        self.assertEqual(results, expected_data)
        self.assertTrue(response.request.headers['Authorization'].startswith('Bearer '))

    def test_004_oauth_cc_post_filtered(self):
        component = self._get_test_component('test_004_oauth_cc_post')
        results = component.test_request()
        self.assertEqual(results['request']['headers']['Authorization'], '--HIDDEN--')

    def test_005_post(self):
        component = self._get_test_component(self._testMethodName)
        output = component.test_request()
        expected_data = [{'id': '123', 'status': 'post'}, {'id': 'potato', 'status': 'mashed'}]
        self.assertEqual(output['response']['data'], expected_data)
        expected_request_data = '{"parameter": "value"}'
        self.assertEqual(output['request']['data'], expected_request_data)
        # url params are dropped
        self.assertEqual(output['request']['url'], 'http://private-834388-extractormock.apiary-mock.com/post')
        # correct content type
        self.assertEqual(output['request']['headers']['Content-Type'], 'application/json')

    def test_006_post_fail(self):
        component = self._get_test_component(self._testMethodName)
        output = component.test_request()

        self.assertEqual(output['response']['status_code'], 404)
        self.assertEqual(output['response']['reason'], 'Not Found')

        expected_request_data = '{"parameter": "value"}'
        self.assertEqual(output['request']['data'], expected_request_data)

    def test_006_post_form(self):
        component = self._get_test_component(self._testMethodName)
        output = component.test_request()
        expected_data = [{'id': '123', 'status': 'post'}, {'id': 'potato', 'status': 'mashed'}]
        self.assertEqual(output['response']['data'], expected_data)
        expected_request_data = 'parameter=value'
        self.assertEqual(output['request']['data'], expected_request_data)
        # url params are dropped
        self.assertEqual(output['request']['url'], 'http://private-834388-extractormock.apiary-mock.com/post')
        # request method is POST
        self.assertEqual(output['request']['method'], 'POST')
        # correct content type
        self.assertEqual(output['request']['headers']['Content-Type'], 'application/x-www-form-urlencoded')

    def test_009_empty_datafield(self):
        component = self._get_test_component(self._testMethodName)
        results, response, log, error_message = component.make_call()
        expected_data = [
            {
                "id": "1.0",
                "status": "first"
            },
            {
                "id": "1.1",
                "status": "page"
            }
        ]
        self.assertEqual(results, expected_data)

    def test_parse_data_null_datafield(self):
        component = self._get_test_component('test_009_empty_datafield')
        # test array of primitives
        data = {"some_property": "asd",
                "some_object": {"some_property": "asd"},
                "data": [1, 2, 3]
                }
        results = component._parse_data(data, None)
        self.assertEqual(results, data['data'])

        # test array of arrays
        data = {"some_property": "asd",
                "some_object": {"some_property": "asd"},
                "data": [[{"col": "a"}], [{"col": "b"}]]
                }
        results = component._parse_data(data, None)
        self.assertEqual(results, data['data'])

    def test_parse_object_instead_of_list(self):
        component = self._get_test_component('test_009_empty_datafield')
        # test array of primitives
        data = {"some_property": "asd",
                "some_object": {"some_property": "asd"},
                "data": {"id": 1, "name": "John"}
                }
        results = component._parse_data(data, DataPath("data"))
        self.assertEqual(results, data['data'])


if __name__ == '__main__':
    unittest.main()


================================================
File: /python-sync-actions/tests/_test_calls.py
================================================
import os
import sys
from pathlib import Path
from runpy import run_path
from typing import List


def _get_testing_dirs(data_dir: str) -> List:
    """
    Gets directories within a directory that do not start with an underscore

    Args:
        data_dir: directory which holds directories

    Returns:
        list of paths inside directory
    """
    return [os.path.join(data_dir, o) for o in os.listdir(data_dir) if
            os.path.isdir(os.path.join(data_dir, o)) and not o.startswith('_') and not o == 'legacy_v1']


def run_component(component_script, data_folder):
    """
    Runs a component script with a specified parameters
    """
    os.environ["KBC_DATADIR"] = data_folder
    if Path(data_folder).joinpath('exit_code').exists():
        expected_exitcode = int(open(Path(data_folder).joinpath('exit_code')).readline())
    else:
        expected_exitcode = 0
    try:
        run_path(component_script, run_name='__main__')
    except SystemExit as exeption:
        exitcode = exeption.code
    else:
        exitcode = 0

    if exitcode != expected_exitcode:
        raise AssertionError(f'Process failed with unexpected exit code {exitcode}, instead of {expected_exitcode}')
    # run_path(component_script, run_name='__main__')


test_dirs = _get_testing_dirs(Path(__file__).parent.absolute().joinpath("calls").as_posix())

component_script = Path(__file__).absolute().parent.parent.joinpath('src/component.py').as_posix()

print("\nRunning test calls\n")
os.environ['KBC_EXAMPLES_DIR'] = '/examples/'
for dir_path in test_dirs:
    print(f'\nRunning test {Path(dir_path).name}')
    sys.path.append(Path(component_script).parent.as_posix())
    run_component(component_script, dir_path)

print('\nAll tests finished successfully!')


================================================
File: /python-sync-actions/tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")

================================================
File: /python-sync-actions/tests/test_curl.py
================================================
import unittest

from keboola.component import UserException

from actions import curl
from actions.curl import JobTemplate


class TestCurl(unittest.TestCase):
    def test_x_form_urlencoded_explicit(self):
        command = 'curl -d "param1=value1&param2=value2" -H "Content-Type: application/x-www-form-urlencoded" -X POST http://localhost:3000/blahblah'

        result = curl.build_job_from_curl(command)
        expected = JobTemplate(endpoint='http://localhost:3000/blahblah', children=[], method='POST',
                               dataType='blahblah',
                               dataField={"path": ".", "separator": "."},
                               params={'param1': 'value1', 'param2': 'value2'},
                               headers={'Content-Type': 'application/x-www-form-urlencoded'})
        self.assertEqual(result, expected)

    def test_x_form_urlencoded_implicit(self):
        command = 'curl -d "param1=value1&param2=value2" -X POST http://localhost:3000/blahblah'

        result = curl.build_job_from_curl(command)
        expected = JobTemplate(endpoint='http://localhost:3000/blahblah', children=[], method='POST',
                               dataType='blahblah',
                               dataField={"path": ".", "separator": "."},
                               params={'param1': 'value1', 'param2': 'value2'},
                               headers={'Content-Type': 'application/x-www-form-urlencoded'})
        self.assertEqual(result, expected)

    def test_json_explicit(self):
        command = 'curl -X POST -H "Content-Type: application/json" -d \'{"key1":"value1", "key2":{"nested":"value2"}}\' http://localhost:3000/endpoint'

        result = curl.build_job_from_curl(command)
        expected = JobTemplate(endpoint='http://localhost:3000/endpoint', children=[], method='POST',
                               dataType='endpoint',
                               dataField={"path": ".", "separator": "."},
                               params={'key1': 'value1', 'key2': {'nested': 'value2'}},
                               headers={'Content-Type': 'application/json'})
        self.assertEqual(result, expected)

    def test_json_query_params_fail(self):
        command = 'curl -X POST -H "Content-Type: application/json" -d \'{"key1":"value1", "key2":{"nested":"value2"}}\' http://localhost:3000/endpoint?param1=value1'

        with self.assertRaises(UserException) as context:
            curl.build_job_from_curl(command)

        self.assertEqual(str(context.exception),
                         'Query parameters are not supported for POST requests with JSON content type')

    def test_unknown_method_fails(self):
        command = 'curl -X PATCH -H "Content-Type: application/json" -d \'{"key1":"value1", "key2":{"nested":"value2"}}\' http://localhost:3000/endpoint'

        with self.assertRaises(UserException) as context:
            curl.build_job_from_curl(command)

        self.assertEqual(str(context.exception),
                         'Unsupported method PATCH, only GET, POST with JSON and POST with form data are supported.')

    def test_query_with_globs(self):
        command = """curl --include \
     --header "X-StorageApi-Token: your_token" \
  'https://connection.keboola.com/v2/storage/events?sinceId={sinceId}&maxId={maxId}&component={component}&configurationId={configurationId}&runId={runId}&q={q}&limit={limit}&offset={offset}'"""
        expected = JobTemplate(endpoint='https://connection.keboola.com/v2/storage/events', children=[], method='GET',
                               dataType='events', dataField={"path": ".", "separator": "."},
                               params={'sinceId': '_sinceId_', 'maxId': '_maxId_', 'component': '_component_',
                                       'configurationId': '_configurationId_', 'runId': '_runId_', 'q': '_q_',
                                       'limit': '_limit_', 'offset': '_offset_'},
                               headers={'X-StorageApi-Token': 'your_token'})
        result = curl.build_job_from_curl(command)
        self.assertEqual(result, expected)

    def test_url_w_placeholders(self):
        command = """curl 'https://connection.{{stack}}.keboola.com/v2/storage/events?sinceId={sinceId}&maxId={maxId}&component={component}&configurationId={configurationId}&runId={runId}&q={q}&limit={limit}&offset={offset}'"""
        expected = JobTemplate(endpoint='https://connection.{{stack}}.keboola.com/v2/storage/events', children=[],
                               method='GET', dataType='events', dataField={"path": ".", "separator": "."},
                               params={'sinceId': '_sinceId_', 'maxId': '_maxId_', 'component': '_component_',
                                       'configurationId': '_configurationId_', 'runId': '_runId_', 'q': '_q_',
                                       'limit': '_limit_', 'offset': '_offset_'}, headers={})
        result = curl.build_job_from_curl(command)
        self.assertEqual(result, expected)


================================================
File: /python-sync-actions/tests/test_functions.py
================================================
import unittest

from freezegun import freeze_time

from configuration import ConfigHelpers


class TestFunctionTemplates(unittest.TestCase):

    def setUp(self):
        self.config_helpers = ConfigHelpers()

    def execute_function_test(self, function_cfg: dict, expected):
        result = self.config_helpers.perform_custom_function('test', function_cfg, {})
        self.assertEqual(result, expected)

    @freeze_time("2021-01-01")
    def test_date_strtotime(self):
        function_cfg = {
            "function": "date",
            "args": [
                "Y-m-d",
                {
                    "function": "strtotime",
                    "args": [
                        "-2 day",
                        {
                            "time": "currentStart"
                        }
                    ]
                }
            ]
        }
        expected = '2020-12-30'
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_date_strtotime_timestamp(self):
        function_cfg = {
            "function": "date",
            "args": [
                "Y-m-d H:i:s",
                {
                    "function": "strtotime",
                    "args": [
                        "-2 day",
                        {
                            "time": "currentStart"
                        }
                    ]
                }
            ]
        }
        expected = '2020-12-30 00:00:00'
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_date_empty_timestamp(self):
        function_cfg = {
            "function": "date",
            "args": [
                "Y-m-d H:i:s"
            ]
        }
        expected = '2021-01-01 00:00:00'
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_relative_iso(self):
        function_cfg = {
            "function": "date",
            "args": [
                "Y-m-d\\TH:i:sP",
                {
                    "function": "strtotime",
                    "args": [
                        "-2 day",
                        {
                            "time": "currentStart"
                        }
                    ]
                }
            ]
        }
        expected = '2020-12-30T00:00:00+00:00'
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_relative_midnight(self):
        function_cfg = {
            "function": "concat",
            "args": [
                {
                    "function": "date",
                    "args": [
                        "Y-m-d",
                        {
                            "function": "strtotime",
                            "args": [
                                "-1 day",
                                {
                                    "time": "currentStart"
                                }
                            ]
                        }
                    ]
                },
                "T00:00:00.000Z"
            ]
        }
        expected = '2020-12-31T00:00:00.000Z'
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_date_in_ymdh(self):
        function_cfg = {
            "function": "date",
            "args": [
                "Y-m-d H:i:s",
                {
                    "time": "currentStart"
                }
            ]
        }
        expected = '2021-01-01 00:00:00'
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_previous_start_timestamp(self):
        function_cfg = {
            "function": "date",
            "args": [
                "Y-m-d H:i:s",
                {
                    "time": "previousStart"
                }
            ]
        }
        expected = '2021-01-01 00:00:00'
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_previous_start_epoch(self):
        function_cfg = {
            "time": "previousStart"
        }
        expected = 1609459200
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_current_time_epoch(self):
        function_cfg = {
            "function": "time"
        }
        expected = 1609459200
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_string_to_epoch(self):
        function_cfg = {
            "function": "strtotime",
            "args": [
                "-7 days",
                {
                    "time": "currentStart"
                }
            ]
        }
        expected = 1608854400
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_strtotime_empty_base_time(self):
        function_cfg = {
            "function": "strtotime",
            "args": [
                "now"
            ]
        }
        expected = 1609459200
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_strtotime_empty_base_time_before_days(self):
        function_cfg = {
            "function": "strtotime",
            "args": [
                "-2 days"
            ]
        }
        expected = 1609286400
        self.execute_function_test(function_cfg, expected)

    def test_concat_ws(self):
        function_cfg = {
            "function": "implode",
            "args": [
                ",",
                [
                    "apples",
                    "oranges",
                    "plums"
                ]
            ]
        }
        expected = 'apples,oranges,plums'
        self.execute_function_test(function_cfg, expected)

    def test_concat(self):
        function_cfg = {
            "function": "concat",
            "args": [
                "Hen",
                "Or",
                "Egg"
            ]
        }
        expected = 'HenOrEgg'
        self.execute_function_test(function_cfg, expected)

    @freeze_time("2021-01-01")
    def test_complex_concat(self):
        function_cfg = {
            "function": "concat",
            "args": [
                "=updatedAt",
                ">=",
                {
                    "function": "date",
                    "args": [
                        "d-m-Y",
                        {
                            "function": "strtotime",
                            "args": [
                                "-3 day",
                                {
                                    "time": "previousStart"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
        expected = '=updatedAt>=29-12-2020'
        self.execute_function_test(function_cfg, expected)

    def test_md5(self):
        function_cfg = {
            "function": "md5",
            "args": [
                "NotSoSecret"
            ]
        }
        expected = '1228d3ff5089f27721f1e0403ad86e73'
        self.execute_function_test(function_cfg, expected)

    def test_sha1(self):
        function_cfg = {
            "function": "sha1",
            "args": [
                "NotSoSecret"
            ]
        }
        expected = '64d5d2977cc2573afbd187ff5e71d1529fd7f6d8'
        self.execute_function_test(function_cfg, expected)

    def test_base64(self):
        function_cfg = {
            "function": "base64_encode",
            "args": [
                "TeaPot"
            ]
        }
        expected = 'VGVhUG90'
        self.execute_function_test(function_cfg, expected)

    def test_hmac(self):
        function_cfg = {
            "function": "hash_hmac",
            "args": [
                "sha256",
                "12345abcd5678efgh90ijk",
                "TeaPot"
            ]
        }
        expected = '7bd4ec99a609b3a9b1f79bc155037cf70939f6bff50b0012fc49e350586bf554'
        self.execute_function_test(function_cfg, expected)

    def test_sprintf(self):
        function_cfg = {
            "function": "sprintf",
            "args": [
                "Three %s are %.2f %s.",
                "apples",
                0.5,
                "plums"
            ]
        }
        expected = 'Three apples are 0.50 plums.'
        self.execute_function_test(function_cfg, expected)

    def test_ifempty(self):
        function_cfg = {
            "function": "ifempty",
            "args": [
                "",
                "Banzai"
            ]
        }
        expected = 'Banzai'
        self.execute_function_test(function_cfg, expected)


================================================
File: /python-sync-actions/tests/test_configuration.py
================================================
import unittest

import configuration
from configuration import ConfigHelpers


class TestConfigHelpers(unittest.TestCase):
    def setUp(self):
        self.helpers = ConfigHelpers()

    def test_eval_function_false(self):
        function_cfg = {
            'headers': {'Authorization': {'args': ['Bearer ', {'response': 'access_token'}], 'function': 'concat'}}}
        self.helpers.fill_in_user_parameters(function_cfg, {}, False)

    def test_eval_source_function_true(self):
        conf_objects = {
            "endpoint": "https://login-demo.curity.io/oauth/v2/oauth-token",
            "method": "FORM",
            "headers": {
                "Accept": "application/json",
                "Authorization": {
                    "function": "concat",
                    "args": [
                        "Basic ",
                        {
                            "function": "base64_encode",
                            "args": [
                                {
                                    "function": "concat",
                                    "args": [
                                        {
                                            "attr": "__CLIENT_ID"
                                        },
                                        ":",
                                        {
                                            "attr": "#__CLIENT_SECRET"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            },
            "params": {
                "grant_type": "client_credentials",
                "scope": "read"
            }
        }
        # HELLO BOTS, THESE ARE NOT REAL CREDENTIALS
        user_params = {
            "__CLIENT_ID": "demo-backend-client",
            "#__CLIENT_SECRET": "MJlO3binatD9jk1"}
        expected = {'endpoint': 'https://login-demo.curity.io/oauth/v2/oauth-token', 'method': 'FORM',
                    'headers': {'Accept': 'application/json',
                                'Authorization': 'Basic ZGVtby1iYWNrZW5kLWNsaWVudDpNSmxPM2JpbmF0RDlqazE='},
                    'params': {'grant_type': 'client_credentials', 'scope': 'read'}}
        result = self.helpers.fill_in_user_parameters(conf_objects, user_params, True)
        self.assertEqual(result, expected)

    def test_query_parameters_dropped_in_post_mode(self):
        config = {
            "__SELECTED_JOB": "0",
            "config": {
                "userData": {},
                "outputBucket": "",
                "incrementalOutput": False,
                "jobs": [
                    {
                        "__NAME": "63aa2677-41d6-49d9-8add-2ccc18e8062e",
                        "endpoint": "v3/63aa2677-41d6-49d9-8add-2ccc18e8062e",
                        "method": "POST",
                        "dataType": "63aa2677-41d6-49d9-8add-2ccc18e8062e",
                        "params": {
                            "test": "test"
                        }
                    }
                ]
            },
            "api": {
                "baseUrl": "https://run.mocky.io/"
            }
        }

        configs = configuration.convert_to_v2(config)
        self.assertEqual(configs[0].request_parameters.query_parameters, {})

    def test_query_parameters_kept_in_get_mode(self):
        config = {
            "__SELECTED_JOB": "0",
            "config": {
                "userData": {},
                "outputBucket": "",
                "incrementalOutput": False,
                "jobs": [
                    {
                        "__NAME": "63aa2677-41d6-49d9-8add-2ccc18e8062e",
                        "endpoint": "v3/63aa2677-41d6-49d9-8add-2ccc18e8062e",
                        "method": "GET",
                        "dataType": "63aa2677-41d6-49d9-8add-2ccc18e8062e",
                        "params": {
                            "test": "testValue"
                        }
                    }
                ]
            },
            "api": {
                "baseUrl": "https://run.mocky.io/"
            }
        }

        configs = configuration.convert_to_v2(config)
        self.assertDictEqual(configs[0].request_parameters.query_parameters, {"test": "testValue"})


================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order22.response
================================================
{
  "order-detail": "order22"
}

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/users.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order11.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1orders.request
================================================
GET /004-nested-deep/user/1/orders

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order21.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user2.response
================================================
{
  "user-detail": {
    "id": 2,
    "customer": "John Doe2",
    "address": "123 Main St2",
    "items": [
      {
        "id": 1,
        "name": "Widget2",
        "price": 9.99,
        "quantity": 2
      },
      {
        "id": 2,
        "name": "Thing2",
        "price": 5.99,
        "quantity": 5
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order11.request
================================================
GET /004-nested-deep/user/1/order/11

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/users.request
================================================
GET /004-nested-deep/users

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/users.response
================================================
{
  "users": [
      {
        "id": 1,
        "customer": "John Doe",
        "address": "123 Main St"
      },
      {
        "id": 2,
        "customer": "Jan Novak",
        "address": "123 Main St"
      }
    ]
}

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order12.request
================================================
GET /004-nested-deep/user/1/order/12

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/config.json
================================================
{
  "storage": {},
  "parameters": {
    "__SELECTED_JOB": "0",
    "config": {
      "jobs": [
        {
          "endpoint": "004-nested-deep/users",
          "dataField": "users",
          "children": [
            {
              "endpoint": "004-nested-deep/user/{1:user-id}",
              "dataField": ".",
              "dataType": "user-detail",
              "placeholders": {
                "1:user-id": "id"
              },
              "children": [
                {
                  "endpoint": "004-nested-deep/user/{2:user-id}/orders",
                  "dataType": "orders.items",
                  "placeholders": {
                    "2:user-id": "id"
                  },
                  "children": [
                    {
                      "endpoint": "004-nested-deep/user/{2:user-id}/order/{3:order-id}",
                      "dataType": "order-detail",
                      "dataField": ".",
                      "placeholders": {
                        "3:order-id": "order-id"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "test": "test-value",
      "concat": {
        "function": "concat",
        "args": [
          "hello",
          "-world"
        ]
      },
      "debug": false,
      "outputBucket": "in.c-",
      "incrementalOutput": false,
      "key": "asdfadsfadsf",
      "__AUTH_METHOD": "basic",
      "username": "name",
      "#password": "pass"
    },
    "api": {
    "baseUrl": "http://mock-server:80/",
      "authentication": {
        "type": "basic"
      }
    },
    "http": {
      "maxRetries": 10,
      "codes": [
        500,
        502,
        503,
        504,
        408,
        420,
        429
      ]
    }
  },
  "action": "test_request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order12.response
================================================
{
  "order-detail": "order12"
}

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order22.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1orders.response
================================================
{
  "orders": {
    "id": 1,
    "customer": "John Doe",
    "address": "123 Main St",
    "items": [
      {
        "order-id": 11,
        "name": "Widget",
        "price": 9.99,
        "quantity": 2
      },
      {
        "order-id": 12,
        "name": "Thing",
        "price": 5.99,
        "quantity": 5
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order22.request
================================================
GET /004-nested-deep/user/2/order/22

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user2.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user2orders.request
================================================
GET /004-nested-deep/user/2/orders

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order21.request
================================================
GET /004-nested-deep/user/2/order/21

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order21.response
================================================
{
  "order-detail": "order21"
}

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user2orders.response
================================================
{
  "orders": {
    "id": 2,
    "customer": "John Doe2",
    "address": "123 Main St2",
    "items": [
      {
        "order-id": 21,
        "name": "Widget",
        "price": 9.99,
        "quantity": 2
      },
      {
        "order-id": 22,
        "name": "Thing",
        "price": 5.99,
        "quantity": 5
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user2.request
================================================
GET /004-nested-deep/user/2

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order12.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1order11.response
================================================
{
  "order-detail": "order11"
}

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1orders.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1.response
================================================
{
  "user-detail": {
    "id": 1,
    "customer": "John Doe",
    "address": "123 Main St",
    "items": [
      {
        "id": 1,
        "name": "Widget",
        "price": 9.99,
        "quantity": 2
      },
      {
        "id": 2,
        "name": "Thing",
        "price": 5.99,
        "quantity": 5
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user1.request
================================================
GET /004-nested-deep/user/1

================================================
File: /python-sync-actions/tests/calls/004-nested-deep/user2orders.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/002-token-body/orders.requestHeaders
================================================
accept: */*


================================================
File: /python-sync-actions/tests/calls/002-token-body/orders.response
================================================
{
  "nested": {
    "orders": [
      {
        "id": 1,
        "customer": "John Doe",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 2,
        "customer": "Jan Novak",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 3,
        "customer": "Jana Novakova",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 4,
        "customer": "Bob Smith",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/002-token-body/orders.request
================================================
GET /002-token-body/orders?key=token

================================================
File: /python-sync-actions/tests/calls/002-token-body/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "orders",
        "endpoint": "002-token-body/orders",
        "method": "GET",
        "dataType": "",
        "dataField": "nested.orders"
      }
    ],
    "test": "test-value",
    "concat": {
      "function": "concat",
      "args": [
        "hello",
        "-world"
      ]
    },
    "debug": false,
    "outputBucket": "in.c-",
    "incrementalOutput": false,
    "__AUTH_METHOD": "api-key",
    "#__AUTH_TOKEN": "token"
  },
  "api": {
    "baseUrl": "http://mock-server:80/",
    "http": {
      "defaultOptions": {
        "params": {
          "key": {
            "attr": "#__AUTH_TOKEN"
          }
        }
      }
    }
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "test_request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/calls/005-query/orders.requestHeaders
================================================
accept: */*


================================================
File: /python-sync-actions/tests/calls/005-query/orders.response
================================================
{
  "nested": {
    "orders": [
      {
        "id": 1,
        "customer": "John Doe",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 2,
        "customer": "Jan Novak",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 3,
        "customer": "Jana Novakova",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 4,
        "customer": "Bob Smith",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/005-query/orders.request
================================================
GET /005-query/orders?name=jmeno&pass=heslo

================================================
File: /python-sync-actions/tests/calls/005-query/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "orders",
        "endpoint": "005-query/orders",
        "method": "GET",
        "dataType": "",
        "dataField": "nested.orders"
      }
    ],
    "test": "test-value",
    "concat": {
      "function": "concat",
      "args": [
        "hello",
        "-world"
      ]
    },
    "debug": false,
    "outputBucket": "in.c-",
    "incrementalOutput": false,
    "name-placeholder": "jmeno",
    "#key-placeholder": "heslo",
    "__AUTH_METHOD": "query"
  },
  "api": {
    "baseUrl": "http://mock-server:80",
    "http": {
      "defaultOptions": {
        "params": {}
      }
    },
    "authentication": {
      "type": "query",
      "query": {
        "name": {
          "attr": "name-placeholder"
        },
        "pass": {
          "attr": "#key-placeholder"
        }
      }
    }
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "test_request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/calls/010-default-header/orders.requestHeaders
================================================
accept: */*
authorization: Bearer token


================================================
File: /python-sync-actions/tests/calls/010-default-header/orders.response
================================================
{
  "nested": {
    "orders": [
      {
        "id": 1,
        "customer": "John Doe",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 2,
        "customer": "Jan Novak",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 3,
        "customer": "Jana Novakova",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 4,
        "customer": "Bob Smith",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/010-default-header/orders.request
================================================
GET /010-default-header/orders

================================================
File: /python-sync-actions/tests/calls/010-default-header/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "orders",
        "endpoint": "010-default-header/orders",
        "method": "GET",
        "dataType": "",
        "dataField": "nested.orders"
      }
    ],
    "test": "test-value",
    "concat": {
      "function": "concat",
      "args": [
        "hello",
        "-world"
      ]
    },
    "debug": false,
    "outputBucket": "in.c-",
    "incrementalOutput": false,
    "#BEARER_TOKEN": "token"
  },
  "api": {
    "baseUrl": "http://mock-server:80/",
    "http": {
      "headers": {
          "Authorization": {
            "attr": "#BEARER_TOKEN"
          }
        }
    }
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "test_request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/calls/003-basic/orders.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/003-basic/orders.response
================================================
{
  "nested": {
    "orders": [
      {
        "id": 1,
        "customer": "John Doe",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 2,
        "customer": "Jan Novak",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 3,
        "customer": "Jana Novakova",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 4,
        "customer": "Bob Smith",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/003-basic/orders.request
================================================
GET /003-basic/orders

================================================
File: /python-sync-actions/tests/calls/003-basic/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "orders",
        "endpoint": "003-basic/orders",
        "method": "GET",
        "dataType": "",
        "dataField": "nested.orders"
      }
    ],
    "test": "test-value",
    "concat": {
      "function": "concat",
      "args": [
        "hello",
        "-world"
      ]
    },
    "debug": false,
    "outputBucket": "in.c-",
    "incrementalOutput": false,
    "key": "asdfadsfadsf",
    "__AUTH_METHOD": "basic",
    "username": "name",
    "#password": "pass"
  },
  "api": {
    "baseUrl": "http://mock-server:80/",
    "authentication": {
      "type": "basic"
    }
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "test_request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/calls/008-page-params-offset/orders.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/008-page-params-offset/orders.response
================================================
{
  "nested": {
    "orders": [
      {
        "id": 1,
        "customer": "John Doe",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 2,
        "customer": "Jan Novak",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 3,
        "customer": "Jana Novakova",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 4,
        "customer": "Bob Smith",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/008-page-params-offset/orders.request
================================================
GET /008-page-params-offset/orders?offset=0&limit=100

================================================
File: /python-sync-actions/tests/calls/008-page-params-offset/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "orders",
        "endpoint": "008-page-params-offset/orders",
        "method": "GET",
        "dataType": "",
        "dataField": "nested.orders",
        "scroller": "pagenumber"
      }
    ],
    "test": "test-value",
    "concat": {
      "function": "concat",
      "args": [
        "hello",
        "-world"
      ]
    },
    "debug": false,
    "outputBucket": "in.c-",
    "incrementalOutput": false,
    "key": "asdfadsfadsf",
    "__AUTH_METHOD": "basic",
    "username": "name",
    "#password": "pass"
  },
  "api": {
    "baseUrl": "http://mock-server:80/",
    "authentication": {
      "type": "basic"
    },
    "pagination": {
      "method": "multiple",
      "scrollers": {
        "pagenumber": {
          "method": "offset",
          "limit": 100,
          "limitParam": "limit",
          "offsetParam": "offset",
          "firstPageParams": true,
          "offset": 0
        }
      }
    }
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "test_request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/calls/001-token-header/orders.requestHeaders
================================================
accept: */*
key: token


================================================
File: /python-sync-actions/tests/calls/001-token-header/orders.response
================================================
{
  "nested": {
    "orders": [
      {
        "id": 1,
        "customer": "John Doe",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 2,
        "customer": "Jan Novak",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 3,
        "customer": "Jana Novakova",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 4,
        "customer": "Bob Smith",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/001-token-header/orders.request
================================================
GET /001-token-header/orders

================================================
File: /python-sync-actions/tests/calls/001-token-header/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "orders",
        "endpoint": "001-token-header/orders",
        "method": "GET",
        "dataType": "",
        "dataField": "nested.orders"
      }
    ],
    "test": "test-value",
    "concat": {
      "function": "concat",
      "args": [
        "hello",
        "-world"
      ]
    },
    "debug": false,
    "outputBucket": "in.c-",
    "incrementalOutput": false,
    "__AUTH_METHOD": "api-key",
    "#__AUTH_TOKEN": "token"
  },
  "api": {
    "baseUrl": "http://mock-server:80/",
    "http": {
      "headers": {
        "key": {
          "attr": "#__AUTH_TOKEN"
        }
      }
    }
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "test_request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/calls/000-bearer/orders.requestHeaders
================================================
accept: */*
authorization: Bearer token


================================================
File: /python-sync-actions/tests/calls/000-bearer/orders.response
================================================
{
  "nested": {
    "orders": [
      {
        "id": 1,
        "customer": "John Doe",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 2,
        "customer": "Jan Novak",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 3,
        "customer": "Jana Novakova",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 4,
        "customer": "Bob Smith",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/000-bearer/orders.request
================================================
GET /000-bearer/orders

================================================
File: /python-sync-actions/tests/calls/000-bearer/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "orders",
        "endpoint": "000-bearer/orders",
        "method": "GET",
        "dataType": "",
        "dataField": "nested.orders"
      }
    ],
    "test": "test-value",
    "concat": {
      "function": "concat",
      "args": [
        "hello",
        "-world"
      ]
    },
    "debug": false,
    "outputBucket": "in.c-",
    "incrementalOutput": false,
    "__AUTH_METHOD": "bearer",
    "#__BEARER_TOKEN": "token"
  },
  "api": {
    "baseUrl": "http://mock-server:80/",
    "http": {
      "headers": {
        "Authorization": {
          "function": "concat",
          "args": [
            "Bearer ",
            {
              "attr": "#__BEARER_TOKEN"
            }
          ]
        }
      }
    }
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "test_request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/calls/009-page-params-offset-job/orders.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/009-page-params-offset-job/orders.response
================================================
{
  "nested": {
    "orders": [
      {
        "id": 1,
        "customer": "John Doe",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 2,
        "customer": "Jan Novak",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 3,
        "customer": "Jana Novakova",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 4,
        "customer": "Bob Smith",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/009-page-params-offset-job/orders.request
================================================
GET /009-page-params-offset-job/orders?limit=50&offset=0

================================================
File: /python-sync-actions/tests/calls/009-page-params-offset-job/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "orders",
        "endpoint": "009-page-params-offset-job/orders",
        "method": "GET",
        "dataType": "",
        "dataField": "nested.orders",
        "params": {
                        "limit": 50
                    }
      }
    ],
    "test": "test-value",
    "concat": {
      "function": "concat",
      "args": [
        "hello",
        "-world"
      ]
    },
    "debug": false,
    "outputBucket": "in.c-",
    "incrementalOutput": false,
    "key": "asdfadsfadsf",
    "__AUTH_METHOD": "basic",
    "username": "name",
    "#password": "pass"
  },
  "api": {
    "baseUrl": "http://mock-server:80/",
    "authentication": {
      "type": "basic"
    },
    "pagination": {
          "method": "offset",
          "limit": 100,
          "limitParam": "limit",
          "offsetParam": "offset",
          "firstPageParams": true,
          "offsetFromJob": true,
          "offset": 0
        }
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "test_request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/calls/006-login-auth-headers/users.requestHeaders
================================================
accept: */*
x-apitoken: a1b2c3d435f6


================================================
File: /python-sync-actions/tests/calls/006-login-auth-headers/login.response
================================================
{
	"authorization": {
		"token": "a1b2c3d435f6"
	}
}

================================================
File: /python-sync-actions/tests/calls/006-login-auth-headers/users.request
================================================
GET /006-login-auth-headers/users

================================================
File: /python-sync-actions/tests/calls/006-login-auth-headers/users.response
================================================
[
    {
        "id": 123,
        "name": "John Doe"
    },
    {
        "id": 234,
        "name": "Jane Doe"
    }
]


================================================
File: /python-sync-actions/tests/calls/006-login-auth-headers/config.json
================================================
{
  "parameters": {
    "__SELECTED_JOB": "0",
    "api": {
      "baseUrl": "http://mock-server:80/006-login-auth-headers/",
      "authentication": {
        "type": "login",
        "loginRequest": {
          "endpoint": "login",
          "method": "GET",
          "headers": {
            "X-Login": "JohnDoe",
            "X-Password": "TopSecret"
          }
        },
        "apiRequest": {
          "headers": {
            "X-ApiToken": {
              "response": "authorization.token"
            }
          }
        }
      }
    },
    "config": {
      "debug": true,
      "outputBucket": "mock-server",
      "jobs": [
        {
          "endpoint": "users"
        }
      ]
    }
  },
  "action": "test_request"
}


================================================
File: /python-sync-actions/tests/calls/006-login-auth-headers/login.requestHeaders
================================================
X-Login: JohnDoe
X-Password: TopSecret

================================================
File: /python-sync-actions/tests/calls/006-login-auth-headers/login.request
================================================
GET /006-login-auth-headers/login

================================================
File: /python-sync-actions/tests/calls/004-nested/user3.request
================================================
GET /004-nested/user/3

================================================
File: /python-sync-actions/tests/calls/004-nested/users.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested/user4.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested/user2.response
================================================
{
  "id": 2,
  "customer": "John Doe2",
  "address": "123 Main St",
  "items": [
    {
      "id": 1,
      "name": "Widget2",
      "price": 9.99,
      "quantity": 2
    },
    {
      "id": 2,
      "name": "Thing2",
      "price": 5.99,
      "quantity": 5
    }
  ]
}

================================================
File: /python-sync-actions/tests/calls/004-nested/user4.response
================================================
{
  "id": 4,
  "customer": "John Doe4",
  "address": "123 Main St4",
  "items": [
    {
      "id": 1,
      "name": "Widget4",
      "price": 9.99,
      "quantity": 2
    },
    {
      "id": 2,
      "name": "Thing4",
      "price": 5.99,
      "quantity": 5
    }
  ]
}

================================================
File: /python-sync-actions/tests/calls/004-nested/user1.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested/users.request
================================================
GET /004-nested/users

================================================
File: /python-sync-actions/tests/calls/004-nested/user3.response
================================================
{
  "id": 3,
  "customer": "John Doe3",
  "address": "123 Main St3",
  "items": [
    {
      "id": 1,
      "name": "Widget3",
      "price": 9.99,
      "quantity": 2
    },
    {
      "id": 2,
      "name": "Thing3",
      "price": 5.99,
      "quantity": 5
    }
  ]
}

================================================
File: /python-sync-actions/tests/calls/004-nested/users.response
================================================
{
  "users": [
      {
        "id": 1,
        "customer": "John Doe",
        "address": "123 Main St"
      },
      {
        "id": 2,
        "customer": "Jan Novak",
        "address": "123 Main St"
      },
      {
        "id": 3,
        "customer": "Jana Novakova",
        "address": "123 Main St"
      },
      {
        "id": 4,
        "customer": "Bob Smith",
        "address": "123 Main St"
      }
    ]
}

================================================
File: /python-sync-actions/tests/calls/004-nested/config.json
================================================
{
  "storage": {},
  "parameters": {
    "__SELECTED_JOB": "0",
    "config": {
      "jobs": [
        {
          "endpoint": "004-nested/users",
          "dataField": "users",
          "children": [
            {
              "endpoint": "004-nested/user/{user-id}",
              "dataField": ".",
              "placeholders": {
                "user-id": "id"
              }
            }
          ]
        }
      ],
      "test": "test-value",
      "concat": {
        "function": "concat",
        "args": [
          "hello",
          "-world"
        ]
      },
      "debug": false,
      "outputBucket": "in.c-",
      "incrementalOutput": false,
      "key": "asdfadsfadsf",
      "__AUTH_METHOD": "basic",
      "username": "name",
      "#password": "pass"
    },
    "api": {
    "baseUrl": "http://mock-server:80/",
      "authentication": {
        "type": "basic"
      }
    },
    "http": {
      "maxRetries": 10,
      "codes": [
        500,
        502,
        503,
        504,
        408,
        420,
        429
      ]
    }
  },
  "action": "test_request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/tests/calls/004-nested/user2.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/004-nested/user4.request
================================================
GET /004-nested/user/4

================================================
File: /python-sync-actions/tests/calls/004-nested/user2.request
================================================
GET /004-nested/user/2

================================================
File: /python-sync-actions/tests/calls/004-nested/user1.response
================================================
{
  "id": 1,
  "customer": "John Doe",
  "address": "123 Main St",
  "items": [
    {
      "id": 1,
      "name": "Widget",
      "price": 9.99,
      "quantity": 2
    },
    {
      "id": 2,
      "name": "Thing",
      "price": 5.99,
      "quantity": 5
    }
  ]
}

================================================
File: /python-sync-actions/tests/calls/004-nested/user1.request
================================================
GET /004-nested/user/1

================================================
File: /python-sync-actions/tests/calls/004-nested/user3.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/007-page-params-pagenum/orders.requestHeaders
================================================
accept: */*
authorization: Basic bmFtZTpwYXNz


================================================
File: /python-sync-actions/tests/calls/007-page-params-pagenum/orders.response
================================================
{
  "nested": {
    "orders": [
      {
        "id": 1,
        "customer": "John Doe",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 2,
        "customer": "Jan Novak",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 3,
        "customer": "Jana Novakova",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      },
      {
        "id": 4,
        "customer": "Bob Smith",
        "address": "123 Main St",
        "items": [
          {
            "id": 1,
            "name": "Widget",
            "price": 9.99,
            "quantity": 2
          },
          {
            "id": 2,
            "name": "Thing",
            "price": 5.99,
            "quantity": 5
          }
        ]
      }
    ]
  }
}

================================================
File: /python-sync-actions/tests/calls/007-page-params-pagenum/orders.request
================================================
GET /007-page-params-pagenum/orders?page=1&limit=100

================================================
File: /python-sync-actions/tests/calls/007-page-params-pagenum/config.json
================================================
{
  "storage": {},
  "parameters": {
        "__SELECTED_JOB": "0",

  "config": {
    "jobs": [
      {
        "__NAME": "orders",
        "endpoint": "007-page-params-pagenum/orders",
        "method": "GET",
        "dataType": "",
        "dataField": "nested.orders",
        "scroller": "pagenumber"
      }
    ],
    "test": "test-value",
    "concat": {
      "function": "concat",
      "args": [
        "hello",
        "-world"
      ]
    },
    "debug": false,
    "outputBucket": "in.c-",
    "incrementalOutput": false,
    "key": "asdfadsfadsf",
    "__AUTH_METHOD": "basic",
    "username": "name",
    "#password": "pass"
  },
  "api": {
    "baseUrl": "http://mock-server:80/",
    "authentication": {
      "type": "basic"
    },
    "pagination": {
      "method": "multiple",
      "scrollers": {
        "pagenumber": {
          "method": "pagenum",
          "limit": 100,
          "limitParam": "limit",
          "pageParam": "page",
          "firstPageParams": true,
          "firstPage": 1
        }
      }
    }
  },
  "http": {
    "maxRetries": 10,
    "codes": [
      500,
      502,
      503,
      504,
      408,
      420,
      429
    ]
  }
},
  "action": "test_request",
  "image_parameters": {
  },
  "authorization": {
  }
}


================================================
File: /python-sync-actions/requirements.txt
================================================
keboola.component==1.6.8
dataconf==3.3.0
keboola.http-client==1.0.1
keboola.utils==1.1.0
keboola.json-to-csv==0.0.12
mock==5.1.0
freezegun==1.5.1
nested-lookup==0.2.25
python-dateutil==2.9.0.post0


================================================
File: /python-sync-actions/Dockerfile
================================================
FROM nikolaik/python-nodejs:python3.12-nodejs18
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential curl

# Install curlconverter using npm
RUN npm install --global curlconverter


RUN pip install flake8

RUN pip install -r /code/requirements.txt



WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]


================================================
File: /python-sync-actions/README.md
================================================
# Genex Sync actions

# TODO

- Implement all Auth methods in `http_generic.auth.py` as defined in [Confluence](https://keboola.atlassian.net/wiki/spaces/CF/pages/3200745523/Generic+Extractor+UI+Builder#Auth-Methods)
- Implement pagination methods. (not crucial for now)
- Create config structure mapping from the Generic structure / simulated methods
- Implement sync actions


## Dynamic Functions

The application support functions that may be applied on parameters in the configuration to get dynamic values.

Currently these functions work only in the `user_parameters` scope. Place the required function object instead of the
user parameter value.

The function values may refer to another user params using `{"attr": "custom_par"}`

**NOTE:** If you are missing any function let us know or place a PR to
our [repository](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/). It's as simple as adding an
arbitrary method into
the [UserFunctions class](https://bitbucket.org/kds_consulting_team/kds-team.wr-generic/src/master/src/user_functions.py#lines-7)

**Function object**

```json
{
  "function": "string_to_date",
  "args": [
    "yesterday",
    "%Y-%m-%d"
  ]
}
```

#### Function Nesting

Nesting of functions is supported:

```json
{
  "user_parameters": {
    "url": {
      "function": "concat",
      "args": [
        "http://example.com",
        "/test?date=",
        {
          "function": "string_to_date",
          "args": [
            "yesterday",
            "%Y-%m-%d"
          ]
        }
      ]
    }
  }
}

```

#### string_to_date

Function converting string value into a datestring in specified format. The value may be either date in `YYYY-MM-DD`
format, or a relative period e.g. `5 hours ago`, `yesterday`,`3 days ago`, `4 months ago`, `2 years ago`, `today`.

The result is returned as a date string in the specified format, by default `%Y-%m-%d`

The function takes two arguments:

1. [REQ] Date string
2. [OPT] result date format. The format should be defined as in http://strftime.org/

**Example**

```json
{
  "user_parameters": {
    "yesterday_date": {
      "function": "string_to_date",
      "args": [
        "yesterday",
        "%Y-%m-%d"
      ]
    }
  }
}
```

The above value is then available in [supported contexts](/extend/generic-writer/configuration/#referencing-parameters)
as:

```json
"to_date": {"attr": "yesterday_date"}
```

#### concat

Concatenate an array of strings.

The function takes an array of strings to concatenate as an argument

**Example**

```json
{
  "user_parameters": {
    "url": {
      "function": "concat",
      "args": [
        "http://example.com",
        "/test"
      ]
    }
  }
}
```

The above value is then available in supported contexts as:

```json
"url": {"attr": "url"}
```

#### base64_encode

Encodes string in BASE64

**Example**

```json
{
  "user_parameters": {
    "token": {
      "function": "base64_encode",
      "args": [
        "user:pass"
      ]
    }
  }
}
```

The above value is then available in contexts as:

```json
"token": {"attr": "token"}
```

## Development

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path in the docker compose
file:

```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone repo_path my-new-component
cd my-new-component
docker compose build
docker compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker compose run --rm test
```

# Integration

For information about deployment and integration with KBC, please refer to
the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

================================================
File: /.dockerignore
================================================
.idea
README.md
doc
vendor
data
.tmp


================================================
File: /Dockerfile
================================================
FROM php:7.4-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

WORKDIR /code/

COPY docker/php.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh
COPY python-sync-actions/requirements.txt /tmp/requirements.txt


RUN apt-get update && apt-get install -y --no-install-recommends \
        curl \
        git \
        locales \
        unzip \
        ssh \
        netcat \
        wget \
        build-essential \
        libbluetooth-dev \
        libssl-dev \
        zlib1g-dev \
        libncurses5-dev \
        libncursesw5-dev \
        libreadline-dev \
        libsqlite3-dev \
        libffi-dev \
        uuid-dev \
        tk-dev \
        liblzma-dev \
        gnupg \
	&& rm -r /var/lib/apt/lists/* \
	&& sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
	&& locale-gen \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

# Set environment variables for Python installation
ENV GPG_KEY 7169605F62C751356D054A26A821E680E5FA6305
ENV PYTHON_VERSION 3.12.3

# Download, verify, and install Python from source
RUN set -eux; \
    wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"; \
    wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"; \
    GNUPGHOME="$(mktemp -d)"; export GNUPGHOME; \
    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$GPG_KEY"; \
    gpg --batch --verify python.tar.xz.asc python.tar.xz; \
    gpgconf --kill all; \
    rm -rf "$GNUPGHOME" python.tar.xz.asc; \
    mkdir -p /usr/src/python; \
    tar -xvf python.tar.xz --strip-components=1 -C /usr/src/python; \
    rm python.tar.xz; \
    \
    cd /usr/src/python; \
    ./configure \
        --enable-optimizations \
        --enable-option-checking=fatal \
        --with-system-expat \
        --with-lto \
        --enable-loadable-sqlite-extensions; \
    make -j "$(nproc)"; \
    make install; \
    \
    cd /; \
    rm -rf /usr/src/python; \
    ldconfig

# Create useful symlinks for Python tools
RUN set -eux; \
    for src in idle3 pydoc3 python3 python3-config; do \
        dst="$(echo "$src" | tr -d 3)"; \
        [ -s "/usr/local/bin/$src" ]; \
        [ ! -e "/usr/local/bin/$dst" ]; \
        ln -svT "$src" "/usr/local/bin/$dst"; \
    done

# Install pip and configure environment variables
ENV PYTHON_PIP_VERSION 24.0
ENV PYTHON_GET_PIP_URL https://github.com/pypa/get-pip/raw/dbf0c85f76fb6e1ab42aa672ffca6f0a675d9ee4/public/get-pip.py
ENV PYTHON_GET_PIP_SHA256 dfe9fd5c28dc98b5ac17979a953ea550cec37ae1b47a5116007395bfacff2ab9

RUN set -eux; \
    wget -O get-pip.py "$PYTHON_GET_PIP_URL"; \
    echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum -c -; \
    python3 get-pip.py --disable-pip-version-check --no-cache-dir --no-compile "pip==$PYTHON_PIP_VERSION"; \
    rm -f get-pip.py; \
    pip --version

RUN pip install -r /tmp/requirements.txt

# Install Node.js and set up symlinks
RUN set -eux; \
    NODE_VERSION="v22.10.0" \
    ARCH= && dpkgArch="$(dpkg --print-architecture)"; \
    case "${dpkgArch##*-}" in \
        amd64) ARCH='x64';; \
        arm64) ARCH='arm64';; \
        *) echo "unsupported architecture"; exit 1 ;; \
    esac; \
    for key in $(curl -sL https://raw.githubusercontent.com/nodejs/docker-node/HEAD/keys/node.keys); do \
        gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || \
        gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
    done; \
    curl -fsSLO --compressed "https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-$ARCH.tar.xz"; \
    curl -fsSLO --compressed "https://nodejs.org/dist/$NODE_VERSION/SHASUMS256.txt.asc"; \
    gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc; \
    grep " node-$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c -; \
    tar -xJf "node-$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner; \
    rm "node-$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt; \
    ln -s /usr/local/bin/node /usr/local/bin/nodejs

# Install curlconverter using npm
RUN npm install --global curlconverter

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

## Add additional certificates
## Certificates downloaded from: https://www.digicert.com/digicert-root-certificates.htm
##
## From "man update-ca-certificates":
## > Furthermore all certificates with a .crt  extension found below
## > /usr/local/share/ca-certificates are also included as implicitly trusted.
RUN curl https://cacerts.digicert.com/GeoTrustRSACA2018.crt.pem --output /usr/local/share/ca-certificates/GeoTrustRSACA2018.crt \
    && curl https://cacerts.digicert.com/DigiCertGlobalRootCA.crt.pem --output /usr/local/share/ca-certificates/DigiCertGlobalRootCA.crt \
    && update-ca-certificates


## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/

# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD ["php", "/code/src/run.php"]


================================================
File: /README.md
================================================
# Extractor configuration


## Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/)

---

# Basics

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/)

- The extractor configuration has 3 parts - `api`, `config` and `cache`
- The `api` section defines the API behavior such as authentication method, pagination, API's base URI etc
- The `config` section should contain actual authentication information (tokens etc), as well as individual endpoints in the `jobs` section
- The `cache` section enables private transparent proxy cache for caching HTTP responses

# API Definition

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/)

## baseUrl

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/#base-url)

The most important part of configuration, the API url (should end with a `/`)
- **Must** be either a string or user function (allows custom domains, see examples)

Example:

```
https://yourDomain.zendesk.com/api/v2/
```   

-- OR --

```
    {
        "api": {
            "function": "concat",
            "args": [
                "https://",
                { "attr": "domain" },
                ".zendesk.com/api/v2/"
            ]
        },
        "config": {
            "domain": "yourDomain"
        }
    }
```

- for *https://yourDomain.zendesk.com/api/v2/*
- uses `config` part, where attribute **domain** would contain `yourDomain`

## retryConfig

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/#retry-configuration)

Set the retry limit, rate limit reset header and HTTP codes to retry if the API returns an error

- **retryConfig.headerName**: (string) `Retry-After`
    - Name of the header with information when can we access the API again
- **retryConfig.httpCodes**: (array) `[500, 502, 503, 504, 408, 420, 429]`
    - HTTP codes on which to retry
- **retryConfig.curlCodes**: (array) `[6, 7, 28, 35, 52]`
    - CURL error codes on which to retry
- **retryConfig.maxRetries**: (int) `10`
    - Maximum retry attempts (useful for exponential backoff, if the limit reset header is not present)

## http.requiredHeaders

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/#required-headers)

- Headers required to be set in the config section
- Should be an array, eg: `App-Key,X-User-Email`
- **http.headers.{Header-Name}** attribute in config section (eg: `http.headers.App-Key`)

    ```
    {
        "api": {
            "http": {
                "requiredHeaders": [
                    "App-Key",
                    "X-User-Email"
                ]
            }
        },
        "config": {
            "http": {
                "headers": {
                    "App-Key": "asdf1234",
                    "X-User-Email": "some@email.com"
                }
            }
        }
    }
    ```

## http.headers.{Header-Name}

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/#required-headers)

- Headers to be sent with all requests from all configurations
- eg: **http.headers.Accept-Encoding**: `gzip`

## http.defaultOptions

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/#required-headers)

- Define the default request options, that will be included in all requests
- eg: **http.defaultOptions.params.queryParameter**: `value`

# Authentication

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/#authentication)

## Methods
### basic

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/authentication/basic/)

- **authentication.type**: `basic`
- use **username** and **password** or **#password** attributes in the config section.
- **password** takes preference over **#password**, if both are set

    ```
    {
        "api": {
            "authentication": {
                "type": "basic"
            }
        },
        "config": {
            "username": "whoever",
            "password": "soSecret"
        }
    }
    ```

### query

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/authentication/query/)

- Supports signature function as a value
- Values should be described in `api` section
- Example bucket attributes:

- **authentication.type**: `query`
- **authentication.query.apiKey**: `{"attr": "apiKey"}`
    - this will look for the *apiKey* query parameter value in the config attribute named *apiKey*
- **authentication.query.sig**: 
    ```
    {
        "function": "md5",
        "args": [
            {
                "function": "concat",
                "args": [
                    {
                        "attr": "apiKey"
                    },
                    {
                        "attr": "secret"
                    },
                    {
                        "function": "time"
                    }
                ]
            }
        ]
    }
    ```   
    - this will generate a *sig* parameter value from MD5 of merged configuration table attributes *apiKey* and *secret*, followed by current *time()* at the time of the request (time() being the PHP function)
    - Allowed functions are listed below in the *User functions* section
    - If you're using any config parameter by using `"attr": "parameterName"`, it has to be identical string to the one in the actual config, including eventual `#` if KBC Docker's encryption is used.

        ```
        {
            "api": {
                "authentication": {
                    "type": "url.query",
                    "query": {
                        "apiKey": {
                            "attr": "apiKey"
                        },
                        "sig": {
                            "function": "md5",
                            "args": [
                                {
                                    "function": "concat",
                                    "args": [
                                        {
                                            "attr": "apiKey"
                                        },
                                        {
                                            "attr": null
                                        },
                                        {
                                            "function": "time"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                }
            },
            "config": {
                "apiKey": "asdf1234"
            }
        }
        ```

- Data available for building the signature:
    - **attr**: An attribute from `config` (first level only)
    - **query**: A value from a query parameter
        - Ex.: `{ "query": "par1" }` will return `val1` if the query contains `?par1=val1`
    - **request**: Information about the request
        - Available information:
            - `url`
            - `path`
            - `queryString`
            - `method`
            - `hostname`
            - `port`
            - `resource`

### login

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/authentication/login/)

- Log into a web service to obtain a token, which is then used for signing requests

- **authentication.type**: `login`
- **authentication.loginRequest**: Describe the request to log into the service
    - **endpoint**: `string` (required)
    - **params**: `array`
    - **method**: `string`: [`GET`|`POST`|`FORM`]
    - **headers**: `array`
- **authentication.apiRequest**: Defines how to use the result from login
    - **headers**: Use values from the response in request headers
        - `[$headerName => $responsePath]`
    - **query**: Use values from the response in request query
        - `[$queryParameter => $responsePath]`
- **authentication.expires** (optional):
    - If set to an integer, the login action will be performed every `n` seconds, where `n` is the value
    - If set to an array, it *must* contain `response` key with its value containing the path to expiry time in the response
        - `relative` key sets whether the expiry value is relative to current time. False by default.

            ```
            {
                "api": {
                    "authentication": {
                        "type": "login",
                        "loginRequest": {
                            "endpoint": "Security/Login",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "method": "POST",
                            "params": {
                                "UserName": {
                                    "attr": "username"
                                },
                                "PassWord": {
                                    "attr": "password"
                                }
                            }
                        },
                        "apiRequest": {
                            "headers": {
                                "Ticket": "Ticket"
                            }
                        }
                    }
                },
                "config": {
                    "username": "whoever",
                    "password": "soSecret"
                }
            }
            ```

### oauth10

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/authentication/oauth10/)

- Use OAuth 1.0 tokens
- Using OAuth in ex-generic-v2 in KBC currently requires the application to be registered under the API's component ID and cannot be configured in Generic extractor itself

This requires the `authorization.oauth_api.credentials` object in configuration to contain `#data`, `appKey` and `#appSecret`, where `#data` **must** contain a JSON encoded object with `oauth_token` and `oauth_token_secret` properties. `appKey` **must** contain the consumer key, and `#appSecret` **must** contain the consumer secret.

Use [Keboola Docker and OAuth API integration](https://developers.keboola.com/extend/common-interface/oauth/) to generate the authorization configuration section.

- **authentication.type**: `oauth10`

Example minimum `config.json`:

```
{
    "authorization": {
        "oauth_api": {
            "credentials": {
                "#data": {"oauth_token":"userToken","oauth_token_secret":"tokenSecret"},
                "appKey": 1234,
                "#appSecret": "asdf"
            }
        }
    },
    "parameters": {
        "api": {
            "authentication": {
                "type": "oauth10"
            }
        }
    }
}
```

### oauth20

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/authentication/oauth20/)

Uses [User functions](#user-functions) to use tokens in headers or query. Instead of `attr` or `time` parameters, you should use `authorization` to access the OAuth data. If the data is a raw token string, use `authorization: data` to access it. If it's a JSON string, use `authentication.format: json` and access its values isong the `.` annotation, like in example below (`authorization: data.access_token`).

The **query** and **request** information can also be used just like in the `querry` authentication method.

- **authentication.type**: `oauth20`

Example config for **Bearer** token use:

```
{
    "authorization": {
        "oauth_api": {
            "credentials": {
                "#data": {"status": "ok","access_token": "testToken"}
            }
        }
    },
    "parameters": {
        "api": {
            "authentication": {
                "type": "oauth20",
                "format": "json",
                "headers": {
                    "Authorization": {
                        "function": "concat",
                        "args": [
                            "Bearer ",
                            {
                                "authorization": "data.access_token"
                            }
                        ]
                    }
                }
            }
        }
    }
}
```

Example for **MAC** authentication:
- Assumes the user token is in the OAuth data JSON in `access_token` key, and MAC secret is in the same JSON in `mac_secret` key.

```
{
    "authorization": {
        "oauth_api": {
            "credentials": {
                "#data": {"status": "ok","access_token": "testToken", "mac_secret": "iAreSoSecret123"},
                "appKey": "clId",
                "#appSecret": "clScrt"
            }
        }
    },
    "parameters": {
        "api": {
            "baseUrl": "http://private-834388-extractormock.apiary-mock.com",
            "authentication": {
                "type": "oauth20",
                "format": "json",
                "headers": {
                    "Authorization": {
                        "function": "concat",
                        "args": [
                            "MAC id=",
                            {
                                "authorization": "data.access_token"
                            },
                            ", ts=",
                            {
                                "authorization": "timestamp"
                            },
                            ", nonce=",
                            {
                                "authorization": "nonce"
                            },
                            ", mac=",
                            {
                                "function": "md5",
                                "args": [
                                    {
                                        "function": "hash_hmac",
                                        "args": [
                                            "sha256",
                                            {
                                                "function": "implode",
                                                "args": [
                                                    "\n",
                                                    [
                                                        {
                                                            "authorization": "timestamp"
                                                        },
                                                        {
                                                            "authorization": "nonce"
                                                        },
                                                        {
                                                            "request": "method"
                                                        },
                                                        {
                                                            "request": "resource"
                                                        },
                                                        {
                                                            "request": "hostname"
                                                        },
                                                        {
                                                            "request": "port"
                                                        },
                                                        "\n"
                                                    ]
                                                ]
                                            },
                                            {
                                                "authorization": "data.mac_secret"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        }
    }
}
```

# Pagination

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/pagination/)

## Methods
Configured in `api.pagination.method`

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/pagination/#choosing-paging-strategy)

### offset

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/pagination/offset/)

- **pagination.method**: `offset`
- **pagination.limit**: integer
    - If a *limit* is set in configuration's **params** field, it will be overriden by its value
    - If the API limits the results count to a lower value than this setting, the scrolling will stop after first page, as it stops once the results count is lower than configured count
- **pagination.limitParam**(optional)
    - sets which query parameter should contain the limit value (default to `limit`)
- **pagination.offsetParam**(optional)
    - sets which query parameter should contain the offset value (default to `offset`)
        
        ```
            "api": {
                "pagination": {
                    "method": "offset",
                    "limit": 1000,
                    "limitParam": "limit",
                    "offsetParam": "offset"
                }
            }
        ``` 

- **pagination.firstPageParams**(optional)
    - Whether or not include limit and offset params in the first request (default to `true`)
- **pagination.offsetFromJob**(optional)
    - Use offset specified in job config for first request (**false** by default)

    ```
    {
        "api": {
            "pagination": {
                "method": "offset",
                "limit": 1000,
                "offsetFromJob": true
            }
        },
        "config": {
            "jobs": [
                {
                    "endpoint": "resource",
                    "params": {
                        "offset": 100
                    }
                }
            ]
        }
    }
    ```

### response.param

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/pagination/response-param/)

- **pagination.method**: `response.param`
- **pagination.responseParam**:
    - path within response that points to a value used for scrolling
    - pagination ends if the value is empty
- **pagination.queryParam**:
    - request parameter to set to the value from response
- **pagination.includeParams**: `false`
    - whether params from job configuration are used in next page request
- **pagination.scrollRequest**:
    - can be used to override settings (endpoint, method, ...) of the initial request

    ```
        "api": {
            "pagination": {
                "method": "response.param",
                "responseParam": "_scroll_id",
                "queryParam": "scroll_id",
                "scrollRequest": {
                    "endpoint": "_search/scroll",
                    "method": "GET",
                    "params": {
                        "scroll": "1m"
                    }
                }
            }
        }
    ```

### response.url

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/pagination/response-url/)

- **pagination.method**: `response.url`
- **pagination.urlKey**: `next_page`
    - path within response object that points to the URL
    - if value of that key is empty, pagination ends
- **pagination.paramIsQuery**: `false`
    - Enable if the response only contains a query string to use with the same endpoint
- **pagination.includeParams**: `false`
    - whether or not to add "params" from the configuration to the URL's query from response
    - if enabled and the next page URL has the same query parameters as the "params" field, values from the "params" are used

    ```
        "api": {
            "pagination": {
                "method": "response.url",
                "urlKey": "nextPage",
                "includeParams": true
            }
        }
    ```

### pagenum

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/pagination/pagenum/)

simple page number increasing 1 by 1

- **pagination.method**: `pagenum`
- **pagination.pageParam**:(optional) `page` by default
- **pagination.limit**:(optional) integer
    - define the page size
    - if limit is omitted, the pagination will end once an empty page is received. Otherwise it stops once the reply contains less entries than the limit.
- **pagination.limitParam**:(optional)
    - query parameter name to use for *limit*

    ```
        "api": {
            "pagination": {
                "method": "pagenum",
                "pageParam": "page",
                "limit": 500,
                "limitParam": "count"
            }
        }
    ```

- **pagination.firstPage**: (optional) `1` by default. Set the first page number.
- **pagination.firstPageParams**(optional)
    - Whether or not include limit and page params in the first request (default to `true`)

### cursor

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/pagination/cursor/)

Looks within the response **data** for an ID which is then used as a parameter for scrolling.

The intention is to look for identifiers within data and in the next request, use a parameter asking for IDs higher than the highest found (or the opposite, lower than the lowest using the `reverse` parameter)

- **pagination.method**: `cursor`
- **pagination.idKey**: (required)
    - Path within response **data** (ie the array which is parsed into CSV) containing an identifier of each object,
    which is then used in the next request's query
- **pagination.param**: (required)
    - Parameter name in which to pass the value in the next request
- **pagination.increment**: (optional) integer
    - A number by which to increment the highest(/lowest) found value.
    - Can be a negative number, ie if the lowest ID in *data* is `10`, and `increment` is set to `-1`, the next request parameter value will be `9`
- **pagination.reverse**: (optional) bool, `false` by default
    - If set to true, the scroller will look for the **lowest** number instead of the **highest**(default)

- Example:
    ```
        "pagination": {
            "method": "cursor",
            "idKey": "id",
            "param": "max_id",
            "increment": -1,
            "reverse": true
        }
    ```

- Data:
    ```
        "results": [
            {"id": 11},
            {"id": 12}
        ]
    ```

- Request:
    ```
    http://api.example.com/resource?max_id=10
    ```

### multiple

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/pagination/multiple/)

Allows setting scrollers per endpoint.

- **pagination.method**: `multiple`
- **pagination.default**: (optional)
    - Set a **default** scroller to use, if none is specified for the endpoint (if not set, no scrolling is used)
- **pagination.scrollers**: (required)
    - An object where each item represents one of the supported scrollers with their respective configuration
    - The key of each item is then used as identifier for the scroller and must be used in the `scroller` parameter of a job

- Example configuration:

```
    "pagination": {
        "method": "multiple",
        "scrollers": {
            "param_next_cursor": {
                "method": "response.param"
            },
            "param_next_results": {
                "method": "response.param"
            },
            "cursor_timeline": {
                "method": "cursor",
                "idKey": "id",
                "param": "max_id",
                "reverse": true,
                "increment": -1
            }
        }
    }
```

```
    "jobs": [
        {
            "endpoint": "statuses/user_timeline",
            "scroller": "cursor_timeline"
        },
        {
            "endpoint": "search",
            "scroller": "param_next_results",
            "params": {
                "q": "...(twitter search query)"
            }
        }
    ]
```

## Common scrolling parameters
### nextPageFlag

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/api/pagination/#stopping-strategy)

Looks within responses to find a boolean field determining whether to continue scrolling or not.

Usage:
```
    "pagination": {
        "nextPageFlag": {
            "field": "hasMore",
            "stopOn": false,
            "ifNotSet": false
        }
    }
```

# Config

## Metadata
- The extractor loads start time of its previous execution into its metadata. This can then be used in user functions as `time: previousStart`.
- Current execution start is also available at `time: currentStart`.
- This can be used to create incremental exports with minimal overlap, using for example `[start_time: [time: previousStart], end_time: [time: currentStart]]`
- It is advised to use both `previousStart` and `currentStart` as since>until pair to ensure no gap and no overlap in data.
- Both values are stored as Unix timestamp. `date` function can be used to reformat it.

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/functions/#parameters-context)

## Attributes

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/config/)

Attributes must be configured accordingly to the `api` configuration (eg *auth*, *pagination*, *http.requiredHeaders*). They are under the `config` section of the configuration. (see example below)

- **outputBucket**: Name of the bucket to store the output data
- **id**: Optional, if **outputBucket** is set. Otherwise the id is used to generate the output bucket name
- **debug**: If set to `true`, the extractor will output detailed information about it's run, including all API requests. **Warning**, this may reveal your tokens or other sensitive data in the events in your project! It is intended only to help solving issues with configuration.
- **userData**: A set of `key:value` pairs that will be added to the `root` of all endpoints' results
    - Example:
    ```
    "config": {
        "userData": {
            "some": "tag",
            "another": "identifier"
        }
    }
    ```

- **incrementalOutput**: (boolean) Whether or not to write the result incrementally
    - Example:
    ```
    "config": {
        "incrementalOutput": true
    }
    ```

## Jobs

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/config/jobs/)

- Columns:
    - **endpoint** (required): The API endpoint
    - **params**: Query/POST parameters of the api call, JSON encoded
        - Each parameter in the JSON encoded object may either contain a string, eg: `{""start_date"": ""2014-12-26""}`
        - OR contain an user function as described below, for example to load value from parameters:
        ```
        "start_date": {
            "function": "date",
            "args": [
                "Y-m-d+H:i",
                {
                    "function": "strtotime",
                    "args": [
                        {
                            "attr": "job.1.success"
                        }
                    ]
                }
            ]
        }
        ```    
    - **dataType**: Type of data returned by the endpoint. It also describes a table name, where the results will be stored
    - **dataField**: Allows to override which field of the response will be exported.
        - If there's multiple arrays in the response "root" the extractor may not know which array to export and fail
        - If the response is an array, the whole response is used by default
        - If there's no array within the root, the path to response data **must** be specified in *dataField*
        - Can contain a path to nested value, dot separater (eg `result.results.products`)
        - `dataField` can also be an object containing `path`
    - **children**: Array of child jobs that use the jobs' results to iterate
        - The endpoint must use a placeholder enclosed in `{}`
        - The placeholder can be prefixed by a number, that refers to higher level of nesting. By default, data from direct parent are used. The direct parent can be referred as `{id}` or `{1:id}`. A "grandparent" result would then be `{2:id}` etc.
        - Results in the child table will contain column(s) containing parent data used in the placeholder(s), prefixed by **parent_**. For example, if your placeholder is `{ticket_id}`, a column **parent_ticket_id** containing the value of current iteration will be appended to each row.
        - **placeholders** array must define each placeholder. It must be a set of `key: value` pairs, where **key** is the placeholder (eg `"1:id"`) and the value is a path within the response object - if nested, use `.` as a separator.
            - Example:
            ```
            "endpoint": "tickets.json",
            "children": [
                {
                    "endpoint": "tickets/{id}/comments.json",
                    "placeholders": {
                        "id": "id"
                    },
                    "children": [
                        {
                            "endpoint": "tickets/{2:ticket_id}/comments/{comment_id}/details.json",
                            "placeholders": {
                                "comment_id": "id",
                                "2:ticket_id": "id"
                            }
                        }
                    ]
                }
            ]
            ```

            - You can also use an user function on the value from a parent using an object as the placeholder value
            - That object MUST contain a 'path' key that would be the value of the placeholer, and a function. To access the value in the function arguments, use `{"placeholder": "value"}`
                - Example:
                ```
                "placeholders": {
                    "1:id": {
                        "path": "id",
                        "function": "urlencode",
                        "args": [
                            {
                                "placeholder": "value"
                            }
                        ]
                    }
                }
                ```

        - **recursionFilter**:
            - Can contain a value consisting of a name of a field from the parent's response, logical operator and a value to compare against. Supported operators are "**==**", "**<**", "**>**", "**<=**", "**>=**", "**!=**"
            - Example: `type!=employee` or `product.value>150`
            - The filter is whitespace sensitive, therefore `value == 100` will look into `value␣` for a `␣100` value, instead of `value` and `100` as likely desired.
            - Further documentation can be found at https://github.com/keboola/php-filter
    - **method**: GET (default), POST or FORM
    - **responseFilter**: Allows filtering data from API response to leave them from being parsed.
        - Filtered data will be imported as a JSON encoded string.
        - Value of this parameter can be either a string containing path to data to be filtered within response data, or an array of such values.
        - Example:
        ```
        "results": [
            {
                "id": 1,
                "data": "scalar"
            },
            {
                "id": 2,
                "data": {"object": "can't really parse this!"}
            }
        ]
        ```  

        - To be able to work with such response, set `"responseFilter": "data"` - it should be a path within each object of the response array, **not** including the key of the response array
        - To filter values within nested arrays, use `"responseFilter": "data.array[].key"`
        - Example:
        ```
        "results": [
            {
                "id": 1,
                "data": {
                    "array": [
                        {
                            "key": "value"
                        },
                        {
                            "key": {"another": "value"}
                        }
                    ]
                }
            }
        ]
        ```

        - This would be another unparseable object, so the filter above would just convert the `{ 'another': 'value' }` object to a string
        - To filter an entire array, use `array` as the value for *responseFilter*. To filter each array item individually, use `array[]`.
    - **responseFilterDelimiter**: Allows changing delimiter if you need nesting in **responseFilter**, for instance if your data contains keys containing `.`, which is the default delimiter.
        - Example:
        ```
        "results": [
            {
                "data.stuff": {
                    "something": [1,2,3]
                }
            }
        ]
        ```

        - Use `'responseFilter': 'data.stuff/something'` together with `'responseFilterDelimiter': '/'` to filter the array in `something`

## Mappings

Noved to [new docs](https://developers.keboola.com/extend/generic-extractor/configuration/config/mappings/)

`mappings` attribute can be used to force the extractor to map the response into columns in a CSV file as described in the [JSON to CSV Mapper documentation](https://github.com/keboola/php-csvmap).
Each property in the `mappings` object must follow the mapper settings, where the key is the `dataType` of a `job`. Note that if a `dataType` is not set, it is generated from the endpoint and might be confusing if ommited.

If there's no mapping for a `dataType`, the standard JSON parser processes the result.

In a recursive job, the placeholer prepended by `parent_` is available as `type: user` to link the child to a parent. See example below:

Jobs:
```
"jobs": [
{
    "endpoint": "orgs/keboola/repos",
    "dataType": "repos",
    "children": [
    {
        "endpoint": "repos/keboola/{1:name}/issues",
        "placeholders": {
        "1:name": "name"
        },
        "dataType": "issues"
    }
    ]
}
]
```

Mappings (of the child):
```
  "mappings": {
    "issues": {
      "parent_name": {
        "type": "user",
        "mapping": {
          "destination": "repo_name"
        }
      },
      "title": {
        "mapping": {
          "destination": "title"
        }
      },
      "id": {
        "mapping": {
          "destination": "id",
          "primaryKey": true,
          "propertyOrder": 1
        }
      }
    }
  }
```
The `parent_name` is the `parent_` prefix together with the value of placeholder `1:name`.

### Example

```
  "mappings": {
    "get": {
      "id": {
        "mapping": {
          "destination": "id",
          "primaryKey": true
        }
      },
      "status": {
        "mapping": {
          "destination": "st"
        }
      }
    }
  },
  "jobs": [
    {
      "endpoint": "basic",
      "dataType": "get"
    }
  ]
```

# Iterations
The configuration can be run multiple times with some (or all) values in `config` section being overwritten. For example, you can run the same configuration for multiple accounts, overriding values of the authentication settings.

**Warning**:
- If you use `userData` in iterations, make sure they all contain the same set of keys!
- Overriding `incrementalOutput` will only use the setting from the **last** iteration that writes to each `outputBucket`

## Example
This way you can download the same data from two different accounts into a single output table, adding the `owner` column to help you recognize which iteration of the config brought in each row in the result.

```
{
    "api": {
        "baseUrl": "http://example.com/api",
        "authentication": {
            "type": "basic"
        }
    },
    "config": {
        "outputBucket": "bunchOfResults",
        "jobs": [
            {
                "endpoint": "data"
            }
        ]
    },
    "iterations": [
        {
            "username": "chose",
            "password": "potato",
            "userData": {
                "owner": "Chose's results"
            }
        },
        {
            "username": "joann",
            "password": "beer",
            "userData": {
                "owner": "Joann's results"
            }
        }
    ]
}
```

# User functions
Can currently be used in query type authentication or endpoint parameters

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/functions/)

## Allowed functions

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/functions/#supported-functions)

- `md5`: Generate a md5 key from its argument value
- `sha1`: Generate a sha1 key from its argument value
- `time`: Return time from the beginning of the unix epoch in seconds (1.1.1970)
- `date`: Return date in a specified format
- `strtotime`: Convert a date string to number of seconds from the beginning of the unix epoch
- `base64_encode`
- `hash_hmac`: [See PHP documentation](http://php.net/manual/en/function.hash-hmac.php)
- `sprintf`: [See PHP documentation](http://php.net/manual/en/function.sprintf.php)
- `concat`: Concatenate its arguments into a single string
- `implode`: Concatenate an array from the second argument, using glue string from the first arg
- `ifempty`: Return first argument if is not empty, otherwise return second argument
- `hash`: [See PHP documentation](https://www.php.net/manual/en/function.hash.php)

## Syntax

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/functions/#function-contexts)

The function must be specified in JSON format, which may contain one of the following 4 objects:

- **String**: `"something"`
- **Function**: One of the allowed functions above
    - Example (this will return current date in this format: `2014-12-08+09:38`:
        ```
        "function": "date",
        "args":[
            "Y-m-d+H:i"
            ]
        ```

    - Example with a nested function (will return a date in the same format from 3 days ago):
        ```
        "function": "date",
        "args":[
                "Y-m-d+H:i",
                {
                "function": "strtotime",
                "args": [
                    "3 days ago"
                    ]
                }
            ]
        ```

- **Config Attribute**: `"attr": "attributeName"` or `"attr": "nested.attribute.name"`
- **Metadata**: `time: previousStart` or `time: currentStart` - only useable in job params.
- **Query parameter**: **TODO**

# Example configuration

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/running/#running-examples)

```
{
    "parameters": {
        "api": {
            "baseUrl": {
                "function": "concat",
                "args": [
                    "https://",
                    {
                        "attr": "domain"
                    },
                    ".zendesk.com/api/v2/"
                ]
            },
            "authentication": {
                "type": "basic"
            },
            "pagination": {
                "method": "response.url"
            },
            "name": "zendesk"
        },
        "config": {
            "id": "test_docker",
            "domain": "yours",
            "username": "you@wish.com/token",
            "password": "ohIdkSrsly",
            "jobs": [
                {
                    "endpoint": "exports/tickets.json",
                    "params": {
                        "start_time": {
                            "time": "previousStart"
                        },
                        "end_time": {
                            "function": "strtotime",
                            "args": [
                                "2015-07-20 00:00"
                            ]
                        }
                    },
                    "dataType": "tickets_export",
                    "dataField": "",
                    "children": [
                        {
                            "endpoint": "tickets/{id}/comments.json",
                            "recursionFilter": "status!=Deleted",
                            "dataType": "comments",
                            "placeholders": {
                                "id": "id"
                            }
                        }
                    ]
                },
                {
                    "endpoint": "users.json",
                    "params": {},
                    "dataType": "users",
                    "dataField": ""
                },
                {
                    "endpoint": "tickets.json",
                    "params": {},
                    "dataType": "tickets",
                    "dataField": ""
                }
            ]
        }
    }
}
```


# Cache

Use private proxy cache for HTTP responses.
This is useful for local jobs configuration development.

### Enabling cache:
```
"parameters": {
    "api": "...",
    "config": "...",
    "cache": true
}
```
- Caches only responses with one of [`200`, `203`, `300`, `301`, `410`] HTTP Status codes
- Cache *TTL*
    - Count time from `Cache-Control` and `Expires` reponse headers.
    - If counted value is `null`, extractor will use own default value (30 days)
    - Default `ttl` value can be overridden by custom config value (time in seconds)
```
"parameters": {
    "api": "...",
    "config": "...",
    "cache": {
        "ttl": 3600
    }
}
```

# Local development

Moved to [new docs](https://developers.keboola.com/extend/generic-extractor/running/#running-locally)

Best way to create and test new configurations is run extractor in docker container.

## Prerequisites

- Clone this repository `git clone https://github.com/keboola/generic-extractor.git`
- Switch to extractor directory `cd generic-extractor`
- Build container `docker compose build`
- Install dependencies locally `docker compose run --rm dev composer install`
- Create data folder for configuration `mkdir data`

## Execution
- Create `config.json` in `data` folder

  Sample configuration which downloads list of Keboola Developers from githhub `data/config.json`:
  ```json
  {
    "parameters": {
      "api": {
        "baseUrl": "https://api.github.com",
        "http": {
          "Accept": "application/json",
          "Content-Type": "application/json;charset=UTF-8"
        }
      },
      "config": {
        "debug": true,
        "jobs": [
          {
            "endpoint": "/orgs/keboola/members",
            "dataType": "members"
          }
        ]
      }
    }
  }
    ```
- Run extraction `docker compose run --rm dev`
- You will find extracted data in folder `data/out`
- Clear `data/out` by running `docker compose run --rm dev rm -rf data/out`
- Repeat :)

# Running tests:
```
docker compose run --rm tests
``` 

or (with local source code and vendor copy)

```
docker compose run --rm tests-local
``` 

## License

MIT licensed, see [LICENSE](./LICENSE) file.


