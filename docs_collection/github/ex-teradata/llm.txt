Directory structure:
└── keboola-ex-teradata/
    ├── README.md
    ├── composer.json
    ├── composer.lock
    ├── docker-compose.yml
    ├── Dockerfile
    ├── driver-s3.template.json
    ├── LICENSE
    ├── phpcs.xml
    ├── phpstan.neon
    ├── phpunit.xml.dist
    ├── .dockerignore
    ├── .env.dist
    ├── docker/
    │   ├── composer-install.sh
    │   ├── odbc.ini
    │   ├── odbcinst.ini
    │   └── php-prod.ini
    ├── src/
    │   ├── ActionComponent.php
    │   ├── CoreComponent.php
    │   ├── ExceptionHandler.php
    │   ├── Extractor.php
    │   ├── ExtractorHelper.php
    │   ├── MessageTransformation.php
    │   ├── run.php
    │   ├── Config/
    │   │   ├── BaseConfigDefinition.php
    │   │   ├── ActionComponent/
    │   │   │   ├── Config.php
    │   │   │   └── ConfigDefinition.php
    │   │   └── CoreComponent/
    │   │       ├── Config.php
    │   │       └── ConfigDefinition.php
    │   ├── Factories/
    │   │   ├── ConnectionFactory.php
    │   │   └── CsvWriterFactory.php
    │   └── Response/
    │       ├── Column.php
    │       └── Table.php
    ├── tests/
    │   ├── functional/
    │   │   ├── DatadirTest.php
    │   │   ├── aggregated-data/
    │   │   │   ├── config.json
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── .gitkeep
    │   │   ├── basic-data/
    │   │   │   ├── config.json
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── .gitkeep
    │   │   ├── basic-data-byte-column/
    │   │   │   ├── config.json
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── .gitkeep
    │   │   ├── basic-data-czech-chars/
    │   │   │   ├── config.json
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── .gitkeep
    │   │   ├── basic-data-escaping/
    │   │   │   ├── config.json
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── .gitkeep
    │   │   ├── basic-data-export-one-column/
    │   │   │   ├── config.json
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── .gitkeep
    │   │   ├── empty-data/
    │   │   │   ├── config.json
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── .gitkeep
    │   │   ├── empty-table/
    │   │   │   ├── config.json
    │   │   │   └── source/
    │   │   │       └── data/
    │   │   │           └── .gitkeep
    │   │   └── get-tables/
    │   │       ├── config.json
    │   │       └── source/
    │   │           └── data/
    │   │               └── .gitkeep
    │   └── phpunit/
    │       ├── bootstrap.php
    │       ├── ConfigTest.php
    │       ├── ExceptionHandlerTest.php
    │       ├── ExtractorHelperTest.php
    │       └── ExtractorTest.php
    └── .github/
        └── workflows/
            └── push.yml

================================================
FILE: README.md
================================================
# Teradata Extractor

Keboola Connection Extractor for [Teradata](https://www.teradata.com/)

# Configuration

## Options

The configuration requires a `db` node with the following properties: 

- `host` - string (required): IP address or Hostname of Teradata server
- `port` - integer (optional): Database port (default port is 1025)
- `user` - string (required): User with correct access rights
- `#password` - string (required): Password for given User
- `database` - string (required): Database name

There are 2 possible types of table extraction.  
1. A table defined by `schema` and `tableName`, this option can also include a columns list.
2. A `query` which is the SQL SELECT statement to be executed to produce the result table.

The extraction has the following configuration options:

- `query`: string (optional, but required if `table` not present)
- `table`: array (optional, but required if `query` not present)
  - `schema`: string
  - `tableName`: string
- `columns`: array of strings (only for `table` type configurations)
- `outputTable`: string (required)
- `incremental`: boolean (optional)
- `primaryKey`: array of strings (optional)

## Example
Configuration with custom query:

```json
{
    "parameters": {
        "db": {
            "host": "100.200.30.40",
            "user": "tduser",
            "#password": "tdpassword",
            "database": "tddatabase"
        },
        "name": "tablename",
        "query": "SELECT COUNT(*) c, column1 FROM tddatabase.tablename GROUP BY column1",
        "outputTable": "out.c-main.tablename",
        "incremental": false,
        "primaryKey": null
    }
}
``` 

Configuration with defined table:

```json
{
	"parameters": {
		"db": {
		    "host": "100.200.30.40",
		    "user": "tduser",
		    "#password": "tdpassword",
		    "database": "tddatabase"
		},
		"name": "test_1",
		"outputTable": "out.c-main.test-1",
		"incremental": false,
		"primaryKey": null,
		"table": {
			"schema": "tddatabase",
			"tableName": "test_1"
		}
	}
}
```


Configuration with defined columns:

```json
{
	"parameters": {
		"db": {
		    "host": "100.200.30.40",
		    "user": "tduser",
		    "#password": "tdpassword",
		    "database": "tddatabase"
		},
		"name": "test_1",
		"outputTable": "out.c-main.test-1",
		"incremental": false,
		"primaryKey": null,
		"table": {
			"schema": "tddatabase",
			"tableName": "test_1"
		},
		"columns": [
			"column1"
		]
	}
}
```

# Development
 
Clone this repository and init the workspace with following command:

```
git clone https://github.com/keboola/ex-teradata
cd ex-teradata
docker-compose build
docker-compose run --rm dev composer install --no-scripts
```

Generate AWS credentials for drivers download:

```
docker run --rm -i \
--volume $HOME/.aws/:/root/.aws/ \
quay.io/keboola/aws-cli:latest sts get-session-token
```

Create `.env` file:
```
TERADATA_HOST=100.200.30.40
TERADATA_PORT=1025
TERADATA_USERNAME=user
TERADATA_PASSWORD=password
TERADATA_DATABASE=database_name

# Drivers download
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_SESSION_TOKEN=
```

Build the image:
```
docker-compose build dev
```

## Tools

- Tests: `docker-compose run --rm dev composer tests`
  - Unit tests: `docker-compose run --rm dev composer tests-phpunit`
  - Datadir tests: `docker-compose run --rm dev composer tests-datadir`
- Code sniffer: `docker-compose run --rm dev composer phpcs`
- Static analysis: `docker-compose run --rm dev composer phpstan`

 
# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 

## License

MIT licensed, see [LICENSE](./LICENSE) file.



================================================
FILE: composer.json
================================================
{
    "name": "keboola/ex-teradata",
    "description": "Teradata database extractor",
    "license": "MIT",
    "require": {
        "php": "^7.1",
        "dibi/dibi": "^4.0",
        "keboola/csv": "^2.0",
        "keboola/php-component": "^5.0"
    },
    "require-dev": {
        "dg/bypass-finals": "^1.1",
        "jakub-onderka/php-parallel-lint": "^1.0",
        "keboola/coding-standard": "^6.0",
        "keboola/datadir-tests": "^2.2",
        "keboola/php-temp": "^1.0",
        "mockery/mockery": "^1.1",
        "phpstan/phpstan-mockery": "^0.10",
        "phpstan/phpstan-shim": "^0.10",
        "phpunit/phpunit": "^7.0",
        "symfony/process": "^4.0"
    },
    "autoload": {
        "psr-4": {
            "Keboola\\ExTeradata\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Keboola\\ExTeradata\\Tests\\Unit\\": "tests/phpunit/",
            "Keboola\\ExTeradata\\Tests\\Functional\\": "tests/functional/"
        }
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests-datadir": "phpunit tests/functional",
        "tests": [
            "@tests-phpunit"
        ],

        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "build": [
            "@phplint",
            "@phpcs",
            "@phpstan",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true,
        "allow-plugins": {
            "dealerdirect/phpcodesniffer-composer-installer": true
        }
    }
}



================================================
FILE: composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
        "This file is @generated automatically"
    ],
    "content-hash": "bcbbd9ee65ba7c90c88650aab6e41016",
    "packages": [
        {
            "name": "dibi/dibi",
            "version": "v4.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/dg/dibi.git",
                "reference": "811974139eb2b8f16fd0aa6ff104de1d416b8b35"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/dg/dibi/zipball/811974139eb2b8f16fd0aa6ff104de1d416b8b35",
                "reference": "811974139eb2b8f16fd0aa6ff104de1d416b8b35",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "replace": {
                "dg/dibi": "*"
            },
            "require-dev": {
                "nette/tester": "~2.0",
                "tracy/tracy": "~2.2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause",
                "GPL-2.0",
                "GPL-3.0"
            ],
            "authors": [
                {
                    "name": "David Grudl",
                    "homepage": "https://davidgrudl.com"
                }
            ],
            "description": "Dibi is Database Abstraction Library for PHP",
            "homepage": "https://dibiphp.com",
            "keywords": [
                "access",
                "database",
                "dbal",
                "mssql",
                "mysql",
                "odbc",
                "oracle",
                "pdo",
                "postgresql",
                "sqlite",
                "sqlsrv"
            ],
            "time": "2018-09-17T11:50:54+00:00"
        },
        {
            "name": "keboola/csv",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csv.git",
                "reference": "d46e83e973aeec11dbebe55deb6eb9c0f14cd271"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csv/zipball/d46e83e973aeec11dbebe55deb6eb9c0f14cd271",
                "reference": "d46e83e973aeec11dbebe55deb6eb9c0f14cd271",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "^0.4",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Csv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola CSV reader and writer",
            "homepage": "http://keboola.com",
            "keywords": [
                "csv",
                "rfc4180"
            ],
            "time": "2018-05-18T09:12:21+00:00"
        },
        {
            "name": "keboola/php-component",
            "version": "5.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-component.git",
                "reference": "264a7a5b7ebab3724ccb7d7202bc1344b58d3543"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-component/zipball/264a7a5b7ebab3724ccb7d7202bc1344b58d3543",
                "reference": "264a7a5b7ebab3724ccb7d7202bc1344b58d3543",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "monolog/monolog": "^1.23",
                "php": "^7.1",
                "symfony/config": "^4.0",
                "symfony/filesystem": "^4.0",
                "symfony/finder": "^4.0",
                "symfony/serializer": "^4.0"
            },
            "require-dev": {
                "devedge/sami-github": "^1.0",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^4.0",
                "keboola/php-temp": "^1.0",
                "phpstan/phpstan-shim": "^0.9.1",
                "phpunit/phpunit": "^7.1"
            },
            "type": "project",
            "autoload": {
                "psr-4": {
                    "Keboola\\Component\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Helper classes for developing Keboola PHP components",
            "keywords": [
                "component",
                "docker",
                "keboola"
            ],
            "time": "2018-10-23T14:20:29+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "1.23.0",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "fd8c787753b3a2ad11bc60c063cff1358a32a3b4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/fd8c787753b3a2ad11bc60c063cff1358a32a3b4",
                "reference": "fd8c787753b3a2ad11bc60c063cff1358a32a3b4",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0",
                "psr/log": "~1.0"
            },
            "provide": {
                "psr/log-implementation": "1.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "graylog2/gelf-php": "~1.0",
                "jakub-onderka/php-parallel-lint": "0.9",
                "php-amqplib/php-amqplib": "~2.4",
                "php-console/php-console": "^3.1.3",
                "phpunit/phpunit": "~4.5",
                "phpunit/phpunit-mock-objects": "2.3.0",
                "ruflin/elastica": ">=0.90 <3.0",
                "sentry/sentry": "^0.13",
                "swiftmailer/swiftmailer": "^5.3|^6.0"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-mongo": "Allow sending log messages to a MongoDB server",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server via PHP Driver",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "php-console/php-console": "Allow sending log messages to Google Chrome",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server",
                "sentry/sentry": "Allow sending log messages to a Sentry server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "http://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "http://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "time": "2017-06-19T01:22:40+00:00"
        },
        {
            "name": "psr/log",
            "version": "1.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "4ebe3a8bf773a19edfe0a84b6585ba3d401b724d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/4ebe3a8bf773a19edfe0a84b6585ba3d401b724d",
                "reference": "4ebe3a8bf773a19edfe0a84b6585ba3d401b724d",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "Psr/Log/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "time": "2016-10-10T12:19:37+00:00"
        },
        {
            "name": "symfony/config",
            "version": "v4.1.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/config.git",
                "reference": "b3d4d7b567d7a49e6dfafb6d4760abc921177c96"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/config/zipball/b3d4d7b567d7a49e6dfafb6d4760abc921177c96",
                "reference": "b3d4d7b567d7a49e6dfafb6d4760abc921177c96",
                "shasum": ""
            },
            "require": {
                "php": "^7.1.3",
                "symfony/filesystem": "~3.4|~4.0",
                "symfony/polyfill-ctype": "~1.8"
            },
            "conflict": {
                "symfony/finder": "<3.4"
            },
            "require-dev": {
                "symfony/dependency-injection": "~3.4|~4.0",
                "symfony/event-dispatcher": "~3.4|~4.0",
                "symfony/finder": "~3.4|~4.0",
                "symfony/yaml": "~3.4|~4.0"
            },
            "suggest": {
                "symfony/yaml": "To use the yaml reference dumper"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.1-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Config\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Config Component",
            "homepage": "https://symfony.com",
            "time": "2018-09-08T13:24:10+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v4.1.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "596d12b40624055c300c8b619755b748ca5cf0b5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/596d12b40624055c300c8b619755b748ca5cf0b5",
                "reference": "596d12b40624055c300c8b619755b748ca5cf0b5",
                "shasum": ""
            },
            "require": {
                "php": "^7.1.3",
                "symfony/polyfill-ctype": "~1.8"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.1-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Filesystem Component",
            "homepage": "https://symfony.com",
            "time": "2018-10-02T12:40:59+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v4.1.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "1f17195b44543017a9c9b2d437c670627e96ad06"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/1f17195b44543017a9c9b2d437c670627e96ad06",
                "reference": "1f17195b44543017a9c9b2d437c670627e96ad06",
                "shasum": ""
            },
            "require": {
                "php": "^7.1.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.1-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Finder Component",
            "homepage": "https://symfony.com",
            "time": "2018-10-03T08:47:56+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.9.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "e3d826245268269cd66f8326bd8bc066687b4a19"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/e3d826245268269cd66f8326bd8bc066687b4a19",
                "reference": "e3d826245268269cd66f8326bd8bc066687b4a19",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.3"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.9-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                },
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "time": "2018-08-06T14:22:27+00:00"
        },
        {
            "name": "symfony/serializer",
            "version": "v4.1.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/serializer.git",
                "reference": "2704442b2b85429b95659fdce1696cb8f009385f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/serializer/zipball/2704442b2b85429b95659fdce1696cb8f009385f",
                "reference": "2704442b2b85429b95659fdce1696cb8f009385f",
                "shasum": ""
            },
            "require": {
                "php": "^7.1.3",
                "symfony/polyfill-ctype": "~1.8"
            },
            "conflict": {
                "phpdocumentor/type-resolver": "<0.2.1",
                "symfony/dependency-injection": "<3.4",
                "symfony/property-access": "<3.4",
                "symfony/property-info": "<3.4",
                "symfony/yaml": "<3.4"
            },
            "require-dev": {
                "doctrine/annotations": "~1.0",
                "doctrine/cache": "~1.0",
                "phpdocumentor/reflection-docblock": "^3.0|^4.0",
                "symfony/cache": "~3.4|~4.0",
                "symfony/config": "~3.4|~4.0",
                "symfony/dependency-injection": "~3.4|~4.0",
                "symfony/http-foundation": "~3.4|~4.0",
                "symfony/property-access": "~3.4|~4.0",
                "symfony/property-info": "~3.4|~4.0",
                "symfony/validator": "~3.4|~4.0",
                "symfony/yaml": "~3.4|~4.0"
            },
            "suggest": {
                "doctrine/annotations": "For using the annotation mapping. You will also need doctrine/cache.",
                "doctrine/cache": "For using the default cached annotation reader and metadata cache.",
                "psr/cache-implementation": "For using the metadata cache.",
                "symfony/config": "For using the XML mapping loader.",
                "symfony/http-foundation": "To use the DataUriNormalizer.",
                "symfony/property-access": "For using the ObjectNormalizer.",
                "symfony/property-info": "To deserialize relations.",
                "symfony/yaml": "For using the default YAML mapping loader."
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.1-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Serializer\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Serializer Component",
            "homepage": "https://symfony.com",
            "time": "2018-10-02T12:40:59+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "dg/bypass-finals",
            "version": "v1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/dg/bypass-finals.git",
                "reference": "10658aeefaa9e458fa55c184f6846aa95eabe135"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/dg/bypass-finals/zipball/10658aeefaa9e458fa55c184f6846aa95eabe135",
                "reference": "10658aeefaa9e458fa55c184f6846aa95eabe135",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "nette/tester": "^2.0.2"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause",
                "GPL-2.0",
                "GPL-3.0"
            ],
            "authors": [
                {
                    "name": "David Grudl",
                    "homepage": "https://davidgrudl.com"
                }
            ],
            "description": "Removes final keyword from source code on-the-fly and allows mocking of final methods and classes",
            "keywords": [
                "finals",
                "mocking",
                "phpunit",
                "testing",
                "unit"
            ],
            "time": "2018-07-20T09:34:06+00:00"
        },
        {
            "name": "doctrine/instantiator",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/instantiator.git",
                "reference": "185b8868aa9bf7159f5f953ed5afb2d7fcdc3bda"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/185b8868aa9bf7159f5f953ed5afb2d7fcdc3bda",
                "reference": "185b8868aa9bf7159f5f953ed5afb2d7fcdc3bda",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "require-dev": {
                "athletic/athletic": "~0.1.8",
                "ext-pdo": "*",
                "ext-phar": "*",
                "phpunit/phpunit": "^6.2.3",
                "squizlabs/php_codesniffer": "^3.0.2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com",
                    "homepage": "http://ocramius.github.com/"
                }
            ],
            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
            "homepage": "https://github.com/doctrine/instantiator",
            "keywords": [
                "constructor",
                "instantiate"
            ],
            "time": "2017-07-22T11:58:36+00:00"
        },
        {
            "name": "hamcrest/hamcrest-php",
            "version": "v2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/hamcrest/hamcrest-php.git",
                "reference": "776503d3a8e85d4f9a1148614f95b7a608b046ad"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/hamcrest/hamcrest-php/zipball/776503d3a8e85d4f9a1148614f95b7a608b046ad",
                "reference": "776503d3a8e85d4f9a1148614f95b7a608b046ad",
                "shasum": ""
            },
            "require": {
                "php": "^5.3|^7.0"
            },
            "replace": {
                "cordoval/hamcrest-php": "*",
                "davedevelopment/hamcrest-php": "*",
                "kodova/hamcrest-php": "*"
            },
            "require-dev": {
                "phpunit/php-file-iterator": "1.3.3",
                "phpunit/phpunit": "~4.0",
                "satooshi/php-coveralls": "^1.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "hamcrest"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD"
            ],
            "description": "This is the PHP port of Hamcrest Matchers",
            "keywords": [
                "test"
            ],
            "time": "2016-01-20T08:20:44+00:00"
        },
        {
            "name": "jakub-onderka/php-parallel-lint",
            "version": "v1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/JakubOnderka/PHP-Parallel-Lint.git",
                "reference": "04fbd3f5fb1c83f08724aa58a23db90bd9086ee8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/JakubOnderka/PHP-Parallel-Lint/zipball/04fbd3f5fb1c83f08724aa58a23db90bd9086ee8",
                "reference": "04fbd3f5fb1c83f08724aa58a23db90bd9086ee8",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.3"
            },
            "require-dev": {
                "jakub-onderka/php-console-highlighter": "~0.3",
                "nette/tester": "~1.3",
                "squizlabs/php_codesniffer": "~2.7"
            },
            "suggest": {
                "jakub-onderka/php-console-highlighter": "Highlight syntax in code snippet"
            },
            "bin": [
                "parallel-lint"
            ],
            "type": "library",
            "autoload": {
                "classmap": [
                    "./"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Jakub Onderka",
                    "email": "ahoj@jakubonderka.cz"
                }
            ],
            "description": "This tool check syntax of PHP files about 20x faster than serial check.",
            "homepage": "https://github.com/JakubOnderka/PHP-Parallel-Lint",
            "time": "2018-02-24T15:31:20+00:00"
        },
        {
            "name": "keboola/coding-standard",
            "version": "6.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "4c247e4ecf8f9c134efc6b7efe30593923415655"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/4c247e4ecf8f9c134efc6b7efe30593923415655",
                "reference": "4c247e4ecf8f9c134efc6b7efe30593923415655",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "4.4.6",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "time": "2018-09-03T10:12:38+00:00"
        },
        {
            "name": "keboola/datadir-tests",
            "version": "2.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/datadir-tests.git",
                "reference": "b26f103117f84bb62edae514924c6c29b0c32828"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/datadir-tests/zipball/b26f103117f84bb62edae514924c6c29b0c32828",
                "reference": "b26f103117f84bb62edae514924c6c29b0c32828",
                "shasum": ""
            },
            "require": {
                "keboola/php-temp": "^1.0",
                "php": "^7.1",
                "phpunit/phpunit": "^7.0",
                "symfony/filesystem": "^4.0",
                "symfony/finder": "^4.0",
                "symfony/process": "^4.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^2.0",
                "phpstan/phpstan-shim": "^0.9.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DatadirTests\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Tool for functional testing of Keboola Connection components",
            "time": "2018-10-21T09:04:11+00:00"
        },
        {
            "name": "keboola/php-temp",
            "version": "1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "2e3c2fc4cce8536a84cbad2a1586eb2eaebe5d3b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/2e3c2fc4cce8536a84cbad2a1586eb2eaebe5d3b",
                "reference": "2e3c2fc4cce8536a84cbad2a1586eb2eaebe5d3b",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.3",
                "symfony/filesystem": ">2.1.0"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "dev-master",
                "phpunit/phpunit": "^5.2"
            },
            "type": "library",
            "autoload": {
                "psr-0": {
                    "Keboola\\Temp": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Miro Cillik",
                    "email": "miro@keboola.cz"
                },
                {
                    "name": "Ondrej Vana",
                    "email": "kachna@keboola.cz"
                }
            ],
            "description": "Temp service - handles application's temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "time": "2017-11-13T13:02:19+00:00"
        },
        {
            "name": "mockery/mockery",
            "version": "1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/mockery/mockery.git",
                "reference": "100633629bf76d57430b86b7098cd6beb996a35a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/mockery/mockery/zipball/100633629bf76d57430b86b7098cd6beb996a35a",
                "reference": "100633629bf76d57430b86b7098cd6beb996a35a",
                "shasum": ""
            },
            "require": {
                "hamcrest/hamcrest-php": "~2.0",
                "lib-pcre": ">=7.0",
                "php": ">=5.6.0"
            },
            "require-dev": {
                "phpunit/phpunit": "~5.7.10|~6.5|~7.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-0": {
                    "Mockery": "library/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Pádraic Brady",
                    "email": "padraic.brady@gmail.com",
                    "homepage": "http://blog.astrumfutura.com"
                },
                {
                    "name": "Dave Marshall",
                    "email": "dave.marshall@atstsolutions.co.uk",
                    "homepage": "http://davedevelopment.co.uk"
                }
            ],
            "description": "Mockery is a simple yet flexible PHP mock object framework",
            "homepage": "https://github.com/mockery/mockery",
            "keywords": [
                "BDD",
                "TDD",
                "library",
                "mock",
                "mock objects",
                "mockery",
                "stub",
                "test",
                "test double",
                "testing"
            ],
            "time": "2018-10-02T21:52:37+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.8.1",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "3e01bdad3e18354c3dce54466b7fbe33a9f9f7f8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/3e01bdad3e18354c3dce54466b7fbe33a9f9f7f8",
                "reference": "3e01bdad3e18354c3dce54466b7fbe33a9f9f7f8",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "replace": {
                "myclabs/deep-copy": "self.version"
            },
            "require-dev": {
                "doctrine/collections": "^1.0",
                "doctrine/common": "^2.6",
                "phpunit/phpunit": "^7.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                },
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "time": "2018-06-11T23:09:50+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "1.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "7761fcacf03b4d4f16e7ccb606d4879ca431fcf4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/7761fcacf03b4d4f16e7ccb606d4879ca431fcf4",
                "reference": "7761fcacf03b4d4f16e7ccb606d4879ca431fcf4",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-phar": "*",
                "phar-io/version": "^2.0",
                "php": "^5.6 || ^7.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "time": "2018-07-08T19:23:20+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "45a2ec53a73c70ce41d55cedef9063630abaf1b6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/45a2ec53a73c70ce41d55cedef9063630abaf1b6",
                "reference": "45a2ec53a73c70ce41d55cedef9063630abaf1b6",
                "shasum": ""
            },
            "require": {
                "php": "^5.6 || ^7.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "time": "2018-07-08T19:19:57+00:00"
        },
        {
            "name": "phpdocumentor/reflection-common",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionCommon.git",
                "reference": "21bdeb5f65d7ebf9f43b1b25d404f87deab5bfb6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/21bdeb5f65d7ebf9f43b1b25d404f87deab5bfb6",
                "reference": "21bdeb5f65d7ebf9f43b1b25d404f87deab5bfb6",
                "shasum": ""
            },
            "require": {
                "php": ">=5.5"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.6"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": [
                        "src"
                    ]
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jaap van Otterdijk",
                    "email": "opensource@ijaap.nl"
                }
            ],
            "description": "Common reflection classes used by phpdocumentor to reflect the code structure",
            "homepage": "http://www.phpdoc.org",
            "keywords": [
                "FQSEN",
                "phpDocumentor",
                "phpdoc",
                "reflection",
                "static analysis"
            ],
            "time": "2017-09-11T18:02:19+00:00"
        },
        {
            "name": "phpdocumentor/reflection-docblock",
            "version": "4.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
                "reference": "94fd0001232e47129dd3504189fa1c7225010d08"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/94fd0001232e47129dd3504189fa1c7225010d08",
                "reference": "94fd0001232e47129dd3504189fa1c7225010d08",
                "shasum": ""
            },
            "require": {
                "php": "^7.0",
                "phpdocumentor/reflection-common": "^1.0.0",
                "phpdocumentor/type-resolver": "^0.4.0",
                "webmozart/assert": "^1.0"
            },
            "require-dev": {
                "doctrine/instantiator": "~1.0.5",
                "mockery/mockery": "^1.0",
                "phpunit/phpunit": "^6.4"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": [
                        "src/"
                    ]
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                }
            ],
            "description": "With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.",
            "time": "2017-11-30T07:14:17+00:00"
        },
        {
            "name": "phpdocumentor/type-resolver",
            "version": "0.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/TypeResolver.git",
                "reference": "9c977708995954784726e25d0cd1dddf4e65b0f7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/9c977708995954784726e25d0cd1dddf4e65b0f7",
                "reference": "9c977708995954784726e25d0cd1dddf4e65b0f7",
                "shasum": ""
            },
            "require": {
                "php": "^5.5 || ^7.0",
                "phpdocumentor/reflection-common": "^1.0"
            },
            "require-dev": {
                "mockery/mockery": "^0.9.4",
                "phpunit/phpunit": "^5.2||^4.8.24"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": [
                        "src/"
                    ]
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                }
            ],
            "time": "2017-07-14T14:27:02+00:00"
        },
        {
            "name": "phpspec/prophecy",
            "version": "1.8.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpspec/prophecy.git",
                "reference": "4ba436b55987b4bf311cb7c6ba82aa528aac0a06"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpspec/prophecy/zipball/4ba436b55987b4bf311cb7c6ba82aa528aac0a06",
                "reference": "4ba436b55987b4bf311cb7c6ba82aa528aac0a06",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.0.2",
                "php": "^5.3|^7.0",
                "phpdocumentor/reflection-docblock": "^2.0|^3.0.2|^4.0",
                "sebastian/comparator": "^1.1|^2.0|^3.0",
                "sebastian/recursion-context": "^1.0|^2.0|^3.0"
            },
            "require-dev": {
                "phpspec/phpspec": "^2.5|^3.2",
                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.5 || ^7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.8.x-dev"
                }
            },
            "autoload": {
                "psr-0": {
                    "Prophecy\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Konstantin Kudryashov",
                    "email": "ever.zet@gmail.com",
                    "homepage": "http://everzet.com"
                },
                {
                    "name": "Marcello Duarte",
                    "email": "marcello.duarte@gmail.com"
                }
            ],
            "description": "Highly opinionated mocking framework for PHP 5.3+",
            "homepage": "https://github.com/phpspec/prophecy",
            "keywords": [
                "Double",
                "Dummy",
                "fake",
                "mock",
                "spy",
                "stub"
            ],
            "time": "2018-08-05T17:53:17+00:00"
        },
        {
            "name": "phpstan/phpstan-mockery",
            "version": "0.10.2",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan-mockery.git",
                "reference": "14d568b6b56c957c9ae5330603303a367b21f0e9"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan-mockery/zipball/14d568b6b56c957c9ae5330603303a367b21f0e9",
                "reference": "14d568b6b56c957c9ae5330603303a367b21f0e9",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.0",
                "php": "~7.1",
                "phpstan/phpdoc-parser": "^0.3",
                "phpstan/phpstan": "^0.10.3"
            },
            "require-dev": {
                "consistence/coding-standard": "^3.0.1",
                "dealerdirect/phpcodesniffer-composer-installer": "^0.4.4",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "mockery/mockery": "^1.1",
                "phing/phing": "^2.16.0",
                "phpstan/phpstan-phpunit": "^0.10",
                "phpstan/phpstan-strict-rules": "^0.10",
                "phpunit/phpunit": "^7.2",
                "slevomat/coding-standard": "^4.6.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.10-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PHPStan\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan Mockery extension",
            "time": "2018-09-09T15:22:28+00:00"
        },
        {
            "name": "phpstan/phpstan-shim",
            "version": "0.10.5",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan-shim.git",
                "reference": "a274185548d140a7f48cc1eed5b94f3a9068c674"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan-shim/zipball/a274185548d140a7f48cc1eed5b94f3a9068c674",
                "reference": "a274185548d140a7f48cc1eed5b94f3a9068c674",
                "shasum": ""
            },
            "require": {
                "php": "~7.1"
            },
            "replace": {
                "nikic/php-parser": "^4.0.2",
                "phpstan/phpdoc-parser": "^0.3",
                "phpstan/phpstan": "self.version"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.10-dev"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan Phar distribution",
            "time": "2018-10-20T17:45:03+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "6.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "b097681a19a48e52706f57e47a09594bac4f7cab"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/b097681a19a48e52706f57e47a09594bac4f7cab",
                "reference": "b097681a19a48e52706f57e47a09594bac4f7cab",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-xmlwriter": "*",
                "php": "^7.1",
                "phpunit/php-file-iterator": "^2.0",
                "phpunit/php-text-template": "^1.2.1",
                "phpunit/php-token-stream": "^3.0",
                "sebastian/code-unit-reverse-lookup": "^1.0.1",
                "sebastian/environment": "^3.1 || ^4.0",
                "sebastian/version": "^2.0.1",
                "theseer/tokenizer": "^1.1"
            },
            "require-dev": {
                "phpunit/phpunit": "^7.0"
            },
            "suggest": {
                "ext-xdebug": "^2.6.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "6.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "time": "2018-10-18T09:01:38+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "050bedf145a257b1ff02746c31894800e5122946"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/050bedf145a257b1ff02746c31894800e5122946",
                "reference": "050bedf145a257b1ff02746c31894800e5122946",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "require-dev": {
                "phpunit/phpunit": "^7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "time": "2018-09-13T20:33:42+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "1.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "31f8b717e51d9a2afca6c9f046f5d69fc27c8686"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/31f8b717e51d9a2afca6c9f046f5d69fc27c8686",
                "reference": "31f8b717e51d9a2afca6c9f046f5d69fc27c8686",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.3"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "time": "2015-06-21T13:50:34+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "8b8454ea6958c3dee38453d3bd571e023108c91f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/8b8454ea6958c3dee38453d3bd571e023108c91f",
                "reference": "8b8454ea6958c3dee38453d3bd571e023108c91f",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "require-dev": {
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "time": "2018-02-01T13:07:23+00:00"
        },
        {
            "name": "phpunit/php-token-stream",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-token-stream.git",
                "reference": "21ad88bbba7c3d93530d93994e0a33cd45f02ace"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/21ad88bbba7c3d93530d93994e0a33cd45f02ace",
                "reference": "21ad88bbba7c3d93530d93994e0a33cd45f02ace",
                "shasum": ""
            },
            "require": {
                "ext-tokenizer": "*",
                "php": "^7.1"
            },
            "require-dev": {
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Wrapper around PHP's tokenizer extension.",
            "homepage": "https://github.com/sebastianbergmann/php-token-stream/",
            "keywords": [
                "tokenizer"
            ],
            "time": "2018-02-01T13:16:43+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "7.4.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "c5a120ade60992bd671a912188ee9ee9f8083bbd"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/c5a120ade60992bd671a912188ee9ee9f8083bbd",
                "reference": "c5a120ade60992bd671a912188ee9ee9f8083bbd",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.1",
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "myclabs/deep-copy": "^1.7",
                "phar-io/manifest": "^1.0.2",
                "phar-io/version": "^2.0",
                "php": "^7.1",
                "phpspec/prophecy": "^1.7",
                "phpunit/php-code-coverage": "^6.0.7",
                "phpunit/php-file-iterator": "^2.0.1",
                "phpunit/php-text-template": "^1.2.1",
                "phpunit/php-timer": "^2.0",
                "sebastian/comparator": "^3.0",
                "sebastian/diff": "^3.0",
                "sebastian/environment": "^3.1 || ^4.0",
                "sebastian/exporter": "^3.1",
                "sebastian/global-state": "^2.0",
                "sebastian/object-enumerator": "^3.0.3",
                "sebastian/resource-operations": "^2.0",
                "sebastian/version": "^2.0.1"
            },
            "conflict": {
                "phpunit/phpunit-mock-objects": "*"
            },
            "require-dev": {
                "ext-pdo": "*"
            },
            "suggest": {
                "ext-soap": "*",
                "ext-xdebug": "*",
                "phpunit/php-invoker": "^2.0"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "7.4-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "time": "2018-10-18T09:02:52+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "4419fcdb5eabb9caa61a27c7a1db532a6b55dd18"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/4419fcdb5eabb9caa61a27c7a1db532a6b55dd18",
                "reference": "4419fcdb5eabb9caa61a27c7a1db532a6b55dd18",
                "shasum": ""
            },
            "require": {
                "php": "^5.6 || ^7.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^5.7 || ^6.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "time": "2017-03-04T06:30:41+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "5de4fc177adf9bce8df98d8d141a7559d7ccf6da"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/5de4fc177adf9bce8df98d8d141a7559d7ccf6da",
                "reference": "5de4fc177adf9bce8df98d8d141a7559d7ccf6da",
                "shasum": ""
            },
            "require": {
                "php": "^7.1",
                "sebastian/diff": "^3.0",
                "sebastian/exporter": "^3.1"
            },
            "require-dev": {
                "phpunit/phpunit": "^7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "time": "2018-07-12T15:12:46+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "3.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "366541b989927187c4ca70490a35615d3fef2dce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/366541b989927187c4ca70490a35615d3fef2dce",
                "reference": "366541b989927187c4ca70490a35615d3fef2dce",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "require-dev": {
                "phpunit/phpunit": "^7.0",
                "symfony/process": "^2 || ^3.3 || ^4"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "time": "2018-06-10T07:54:39+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "3.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "cd0871b3975fb7fc44d11314fd1ee20925fce4f5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/cd0871b3975fb7fc44d11314fd1ee20925fce4f5",
                "reference": "cd0871b3975fb7fc44d11314fd1ee20925fce4f5",
                "shasum": ""
            },
            "require": {
                "php": "^7.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^6.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.1.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "http://www.github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "time": "2017-07-01T08:51:00+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "3.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "234199f4528de6d12aaa58b612e98f7d36adb937"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/234199f4528de6d12aaa58b612e98f7d36adb937",
                "reference": "234199f4528de6d12aaa58b612e98f7d36adb937",
                "shasum": ""
            },
            "require": {
                "php": "^7.0",
                "sebastian/recursion-context": "^3.0"
            },
            "require-dev": {
                "ext-mbstring": "*",
                "phpunit/phpunit": "^6.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.1.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "http://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "time": "2017-04-03T13:19:02+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "e8ba02eed7bbbb9e59e43dedd3dddeff4a56b0c4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/e8ba02eed7bbbb9e59e43dedd3dddeff4a56b0c4",
                "reference": "e8ba02eed7bbbb9e59e43dedd3dddeff4a56b0c4",
                "shasum": ""
            },
            "require": {
                "php": "^7.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^6.0"
            },
            "suggest": {
                "ext-uopz": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "http://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "time": "2017-04-27T15:39:26+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "7cfd9e65d11ffb5af41198476395774d4c8a84c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/7cfd9e65d11ffb5af41198476395774d4c8a84c5",
                "reference": "7cfd9e65d11ffb5af41198476395774d4c8a84c5",
                "shasum": ""
            },
            "require": {
                "php": "^7.0",
                "sebastian/object-reflector": "^1.1.1",
                "sebastian/recursion-context": "^3.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^6.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "time": "2017-08-03T12:35:26+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "1.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "773f97c67f28de00d397be301821b06708fca0be"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/773f97c67f28de00d397be301821b06708fca0be",
                "reference": "773f97c67f28de00d397be301821b06708fca0be",
                "shasum": ""
            },
            "require": {
                "php": "^7.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^6.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "time": "2017-03-29T09:07:27+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "5b0cd723502bac3b006cbf3dbf7a1e3fcefe4fa8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/5b0cd723502bac3b006cbf3dbf7a1e3fcefe4fa8",
                "reference": "5b0cd723502bac3b006cbf3dbf7a1e3fcefe4fa8",
                "shasum": ""
            },
            "require": {
                "php": "^7.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^6.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "http://www.github.com/sebastianbergmann/recursion-context",
            "time": "2017-03-03T06:23:57+00:00"
        },
        {
            "name": "sebastian/resource-operations",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/resource-operations.git",
                "reference": "4d7a795d35b889bf80a0cc04e08d77cedfa917a9"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/4d7a795d35b889bf80a0cc04e08d77cedfa917a9",
                "reference": "4d7a795d35b889bf80a0cc04e08d77cedfa917a9",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides a list of PHP built-in functions that operate on resources",
            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
            "time": "2018-10-04T04:07:39+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "99732be0ddb3361e16ad77b68ba41efc8e979019"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/99732be0ddb3361e16ad77b68ba41efc8e979019",
                "reference": "99732be0ddb3361e16ad77b68ba41efc8e979019",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "time": "2016-10-03T07:35:21+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "4.4.6",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "861e7b55d348c81a9dd0b3655dbbc83076d60c05"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/861e7b55d348c81a9dd0b3655dbbc83076d60c05",
                "reference": "861e7b55d348c81a9dd0b3655dbbc83076d60c05",
                "shasum": ""
            },
            "require": {
                "php": "^7.1",
                "squizlabs/php_codesniffer": "^3.0.2"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "0.9.2",
                "phing/phing": "2.16",
                "phpstan/phpstan": "0.9.2",
                "phpstan/phpstan-phpunit": "0.9.4",
                "phpstan/phpstan-strict-rules": "0.9",
                "phpunit/php-code-coverage": "6.0.1",
                "phpunit/phpunit": "7.0.0"
            },
            "type": "phpcodesniffer-standard",
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "time": "2018-02-15T17:13:28+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.3.2",
            "source": {
                "type": "git",
                "url": "https://github.com/squizlabs/PHP_CodeSniffer.git",
                "reference": "6ad28354c04b364c3c71a34e4a18b629cc3b231e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/6ad28354c04b364c3c71a34e4a18b629cc3b231e",
                "reference": "6ad28354c04b364c3c71a34e4a18b629cc3b231e",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0"
            },
            "bin": [
                "bin/phpcs",
                "bin/phpcbf"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "lead"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "http://www.squizlabs.com/php-codesniffer",
            "keywords": [
                "phpcs",
                "standards"
            ],
            "time": "2018-09-23T23:08:17+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v4.1.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "ee33c0322a8fee0855afcc11fff81e6b1011b529"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/ee33c0322a8fee0855afcc11fff81e6b1011b529",
                "reference": "ee33c0322a8fee0855afcc11fff81e6b1011b529",
                "shasum": ""
            },
            "require": {
                "php": "^7.1.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.1-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Process Component",
            "homepage": "https://symfony.com",
            "time": "2018-10-02T12:40:59+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "cb2f008f3f05af2893a87208fe6a6c4985483f8b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/cb2f008f3f05af2893a87208fe6a6c4985483f8b",
                "reference": "cb2f008f3f05af2893a87208fe6a6c4985483f8b",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "time": "2017-04-07T12:08:54+00:00"
        },
        {
            "name": "webmozart/assert",
            "version": "1.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/webmozart/assert.git",
                "reference": "0df1908962e7a3071564e857d86874dad1ef204a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/webmozart/assert/zipball/0df1908962e7a3071564e857d86874dad1ef204a",
                "reference": "0df1908962e7a3071564e857d86874dad1ef204a",
                "shasum": ""
            },
            "require": {
                "php": "^5.3.3 || ^7.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.6",
                "sebastian/version": "^1.0.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.3-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Webmozart\\Assert\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Assertions to validate method input/output with nice error messages.",
            "keywords": [
                "assert",
                "check",
                "validate"
            ],
            "time": "2018-01-29T19:49:41+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": "^7.1"
    },
    "platform-dev": []
}



================================================
FILE: docker-compose.yml
================================================
version: '2'
services:
  dev:
    build:
      context: .
      args:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_SESSION_TOKEN
    image: keboola/ex_teradata
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - TERADATA_HOST
      - TERADATA_PORT
      - TERADATA_USERNAME
      - TERADATA_PASSWORD
      - TERADATA_DATABASE



================================================
FILE: Dockerfile
================================================
FROM quay.io/keboola/aws-cli
ARG AWS_SECRET_ACCESS_KEY
ARG AWS_ACCESS_KEY_ID
ARG AWS_SESSION_TOKEN
RUN /usr/bin/aws s3 cp s3://keboola-drivers/teradata/tdodbc1710-17.10.00.17-1.x86_64.deb /tmp/teradata/tdodbc.deb


FROM php:7-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update && apt-get install -y \
        git \
        locales \
        unzip \
        lib32stdc++6 \
        unixodbc \
        unixodbc-dev \
        libonig-dev

RUN chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

RUN curl -sSLf \
        -o /usr/local/bin/install-php-extensions \
        https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions && \
    chmod +x /usr/local/bin/install-php-extensions

# Teradata ODBC
COPY --from=0 /tmp/teradata/tdodbc.deb /tmp/teradata/tdodbc.deb
COPY docker/odbc.ini /tmp/teradata/odbc_td.ini
COPY docker/odbcinst.ini /tmp/teradata/odbcinst_td.ini

RUN dpkg -i /tmp/teradata/tdodbc.deb \
    && cat /tmp/teradata/odbc_td.ini >> /etc/odbc.ini \
    && cat /tmp/teradata/odbcinst_td.ini >> /etc/odbcinst.ini \
    && rm -r /tmp/teradata \
    && docker-php-ext-configure pdo_odbc --with-pdo-odbc=unixODBC,/usr \
    && install-php-extensions pdo_odbc odbc \
    && docker-php-source delete

ENV ODBCHOME=/opt/teradata/client/ODBC_64/
ENV ODBCINI=/opt/teradata/client/ODBC_64/odbc.ini
ENV ODBCINST=/opt/teradata/client/ODBC_64/odbcinst.ini
ENV LD_LIBRARY_PATH=/opt/teradata/client/ODBC_64/lib

ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV LANGUAGE=en_US.UTF-8
RUN printf 'en_US.UTF-8 UTF-8\n' >> /etc/locale.gen \
    && locale-gen

RUN set -x \
    && docker-php-source extract \
    && cd /usr/src/php/ext/odbc \
    && phpize \
    && sed -ri 's@^ *test +"\$PHP_.*" *= *"no" *&& *PHP_.*=yes *$@#&@g' configure \
    && ./configure --with-unixODBC=shared,/usr \
    && docker-php-ext-install odbc \
    && docker-php-source delete

RUN docker-php-ext-install mbstring

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/
# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader
# copy rest of the app
COPY . /code/
# run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD ["php", "/code/src/run.php"]



================================================
FILE: driver-s3.template.json
================================================
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Teradata drivers storage and permissions",
  "Resources": {
    "DriversS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "DriversDownloadPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Teradata Drivers Download",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:ListBucket",
                "s3:GetObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DriversS3Bucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DriversS3Bucket"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "DriversDownloadGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "ManagedPolicyArns": [
          {
            "Ref": "DriversDownloadPolicy"
          }
        ]
      }
    }
  }
}



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) Keboola :(){:|:&};: s.r.o.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>



================================================
FILE: phpstan.neon
================================================
parameters:
    ignoreErrors:
        - '#Calling method end\(\) on possibly null value of type Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface|null.#'
includes:
	- vendor/phpstan/phpstan-mockery/extension.neon



================================================
FILE: phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         bootstrap="tests/phpunit/bootstrap.php">
    <testsuite name="Main Test Suite">
        <directory>tests/phpunit</directory>
    </testsuite>
    <filter>
        <whitelist>
            <directory suffix=".php">src</directory>
        </whitelist>
    </filter>
</phpunit>



================================================
FILE: .dockerignore
================================================
vendor/



================================================
FILE: .env.dist
================================================
TERADATA_HOST=100.200.30.40
TERADATA_PORT=1025
TERADATA_USERNAME=user
TERADATA_PASSWORD=password
TERADATA_DATABASE=database_name

# Drivers download
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_SESSION_TOKEN=


================================================
FILE: docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT



================================================
FILE: docker/odbc.ini
================================================
[ODBC]
InstallDir=/opt/teradata/client/ODBC_64
Trace=0
TraceDll=/opt/teradata/client/ODBC_64/lib/odbctrac.so
TraceFile=/usr/odbcusr/trace.log
TraceAutoStop=0

[Teradata]
Driver = /opt/teradata/client/ODBC_64/lib/tdataodbc_sb64.so
UsageCount = 2
APILevel = CORE
ConnectFunctions = YYY
DriverODBCVer = 3.51
SQLLevel = 1



================================================
FILE: docker/odbcinst.ini
================================================
[ODBC DRIVERS]
Teradata=Installed

[Teradata]
Driver=/opt/teradata/client/ODBC_64/lib/tdataodbc_sb64.so
APILevel=CORE
ConnectFunctions=YYY
DriverODBCVer=3.51
SQLLevel=1



================================================
FILE: docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1



================================================
FILE: src/ActionComponent.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata;

use Dibi\Connection;
use Keboola\Component\BaseComponent;
use Keboola\ExTeradata\Config\ActionComponent\Config;
use Keboola\ExTeradata\Config\ActionComponent\ConfigDefinition;
use Keboola\ExTeradata\Factories\ConnectionFactory;
use Keboola\ExTeradata\Response\Column;
use Keboola\ExTeradata\Response\Table;

class ActionComponent extends BaseComponent
{
    public function run(): void
    {
        /** @var Config $config */
        $config = $this->getConfig();

        $connection = (new ConnectionFactory())->create(
            $config->getHost(),
            $config->getPort(),
            $config->getUser(),
            $config->getPassword()
        );

        switch ($config->getAction()) {
            case 'testConnection':
                $this->testConnection($connection);
                break;
            case 'getTables':
                $this->getTables($connection, $config->getDatabase());
                break;
        }
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        return ConfigDefinition::class;
    }

    private function testConnection(Connection $connection): void
    {
        $connection->query("SELECT 1");
        print json_encode(['status' => 'success'], JSON_PRETTY_PRINT);
    }

    private function getTables(Connection $connection, string $database): void
    {
        print json_encode(
            [
                'status' => 'success',
                'tables' => $this->getTablesResponse($connection, $database),
            ],
            JSON_PRETTY_PRINT
        );
    }

    private function getTablesResponse(Connection $connection, string $database): array
    {
        $sql = "SELECT TableName, ColumnName FROM DBC.ColumnsV
WHERE DatabaseName = ?
ORDER BY TableName, ColumnName";

        try {
            $rows = $connection->query($sql, $database)->fetchAll();
        } catch (\Throwable $exception) {
            throw (new ExceptionHandler())->createException($exception);
        }

        /** @var Table[] $tables */
        $tables = [];
        foreach ($rows as $row) {
            $tableName = $row['TableName'];
            if (!isset($tables[$tableName])) {
                $tables[$tableName] = new Table($database, $tableName);
            }
            $tables[$tableName]->addColumn(new Column($row['ColumnName']));
        }

        return array_values($tables);
    }
}



================================================
FILE: src/CoreComponent.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata;

use Keboola\Component\BaseComponent;
use Keboola\ExTeradata\Config\CoreComponent\Config;
use Keboola\ExTeradata\Config\CoreComponent\ConfigDefinition;
use Keboola\ExTeradata\Factories\ConnectionFactory;
use Keboola\ExTeradata\Factories\CsvWriterFactory;

class CoreComponent extends BaseComponent
{
    public function run(): void
    {
        /** @var Config $config */
        $config = $this->getConfig();

        $exceptionHandler = new ExceptionHandler();

        $connection = (new ConnectionFactory())->create(
            $config->getHost(),
            $config->getPort(),
            $config->getUser(),
            $config->getPassword()
        );

        $extractorHelper = new ExtractorHelper();
        $extractor = new Extractor(
            $connection,
            new CsvWriterFactory(),
            $exceptionHandler,
            $this->getLogger()
        );

        $query = $config->getQuery() ?? $extractorHelper->getExportSql(
            $config->getSchema(),
            $config->getTableName(),
            $config->getColumns()
        );
        $outputCsvFilePath = $this->getDataDir() . '/out/tables/' . $config->getOutputTable() . '.csv';

        $extractor->extractTable($query, $outputCsvFilePath);

        $manifestFileName = $outputCsvFilePath . '.manifest';
        $manifestData = [
            'incremental' => $config->getIncremental(),
            'primary_key' => $config->getPrimaryKey(),
        ];
        file_put_contents($manifestFileName, json_encode($manifestData, JSON_PRETTY_PRINT));

        $this->getLogger()->info(sprintf('Extracted table into: "%s".', $config->getOutputTable()));
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        return ConfigDefinition::class;
    }
}



================================================
FILE: src/ExceptionHandler.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata;

class ExceptionHandler
{
    /** @var MessageTransformation[] */
    private $messageTransformations = [];

    public function __construct()
    {
        $this->messageTransformations = [
            new MessageTransformation(
                '~Can\'t assign requested address 08S01~',
                'Cannot assign requested address.'
            ),
            new MessageTransformation(
                '~Network is unreachable 08S01~',
                'Network is unreachable.'
            ),
            new MessageTransformation(
                '~The Teradata server is not accepting connections 08004~',
                'The Teradata server is not accepting connections.'
            ),
            new MessageTransformation(
                '~No response received when attempting to connect to the Teradata server S1000~',
                'No response received when attempting to connect to the Teradata server.'
            ),
            new MessageTransformation(
                '~The Teradata server can\'t currently be reached over this network~',
                'The Teradata server can\'t currently be reached over this network.'
            ),
            new MessageTransformation(
                '~Please check Teradata Database Gateway configurations~',
                'The Teradata server can\'t currently be reached over this network.'
            ),
            new MessageTransformation(
                '~The UserId, Password or Account is invalid.~',
                'The User or Password is invalid.'
            ),
            new MessageTransformation(
                '~Object \'([^\']+)\.([^\']+)\' does not exist.~',
                'Table "%s" does not exist in database "%s".',
                [2, 1]
            ),
            new MessageTransformation(
                '~Database \'([^\']+)\' does not exist.~',
                'Database "%s" does not exist.',
                [1]
            ),
            new MessageTransformation(
                '~A non-numeric value encountered~',
                'You are probably trying to export one or more columns with data type "byte" which is not allowed.'
            ),
            new MessageTransformation(
                '~The user does not have ([\w]+) access to (.+)\.~',
                'The user does not have "%s" access to "%s".',
                [1, 2]
            ),
            new MessageTransformation(
                '~Teradata DatabaseFunction \'([^\']+)\' called with an ' .
                'invalid number or type of parameters~',
                'Teradata DatabaseFunction "%s" called with an ' .
                'invalid number or type of parameters.',
                [1]
            ),
            new MessageTransformation(
                '~Internal Error \(Exception\)~',
                'Teradata Internal Error.'
            ),
            new MessageTransformation(
                '~Logons are only enabled for user (.+)\.~',
                'Logons are only enabled for user %s.',
                [1]
            ),
        ];
    }

    public function createException(\Throwable $exception): \Throwable
    {
        foreach ($this->messageTransformations as $messageTransformation) {
            if (preg_match(
                $messageTransformation->getPattern(),
                $exception->getMessage(),
                $matches
            )) {
                return $messageTransformation->getUserException($matches);
            }
        }

        return $exception;
    }
}



================================================
FILE: src/Extractor.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata;

use Dibi\Connection;
use Dibi\Result;
use Dibi\Row;
use Keboola\ExTeradata\Factories\CsvWriterFactory;
use Psr\Log\LoggerInterface;

class Extractor
{
    /** @var Connection */
    private $connection;

    /** @var CsvWriterFactory */
    private $csvWriterFactory;

    /** @var ExceptionHandler */
    private $exceptionHandler;

    /** @var LoggerInterface */
    private $logger;

    public function __construct(
        Connection $connection,
        CsvWriterFactory $csvWriterFactory,
        ExceptionHandler $exceptionHandler,
        LoggerInterface $logger
    ) {
        $this->connection = $connection;
        $this->csvWriterFactory = $csvWriterFactory;
        $this->exceptionHandler = $exceptionHandler;
        $this->logger = $logger;
    }

    public function extractTable(string $query, string $outputCsvFilePath): void
    {
        try {
            $queryResult = $this->connection->nativeQuery($query);
        } catch (\Throwable $exception) {
            throw $this->exceptionHandler->createException($exception);
        }

        $csvWriter = $this->csvWriterFactory->create($outputCsvFilePath);
        $csvWriter->writeRow($queryResult->getInfo()->getColumnNames());

        $rowNumber = 0;
        foreach ($this->fetchTableRows($queryResult) as $tableRow) {
            $csvWriter->writeRow($tableRow->toArray());

            if ($rowNumber > 0 && $rowNumber % 1000000 === 0) {
                $this->logger->info(sprintf('%s queries fetched.', $rowNumber));
            }
            $rowNumber++;
        }
    }

    /**
     * @param Result $queryResult
     *
     * @return \Iterator|Row[]
     * @throws \Throwable
     */
    public function fetchTableRows(Result $queryResult): \Iterator
    {
        try {
            while ($row = $queryResult->fetch()) {
                yield $row;
            }
        } catch (\Throwable $exception) {
            throw $this->exceptionHandler->createException($exception);
        }
    }
}



================================================
FILE: src/ExtractorHelper.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata;

use Keboola\Component\UserException;

class ExtractorHelper
{
    public function validateObject(string $object): void
    {
        if (strpos($object, '"') !== false) {
            throw new UserException(sprintf('Object "%s" contain restricted character \'"\'.', $object));
        }
    }

    public function getExportSql(string $database, string $tableName, ?array $columns): string
    {
        $this->validateObject($database);
        $this->validateObject($tableName);

        $columns = array_map(
            function ($column) {
                $this->validateObject($column);
                return sprintf('"%s"', $column);
            },
            $columns
        );

        if ($columns) {
            $objects = implode(',', $columns);
        } else {
            $objects = '*';
        }

        return sprintf('SELECT %s FROM "%s"."%s"', $objects, $database, $tableName);
    }
}



================================================
FILE: src/MessageTransformation.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata;

use Keboola\Component\UserException;

class MessageTransformation
{
    /** @var string */
    private $pattern;

    /** @var string */
    private $message;

    /** @var array */
    private $argumentIndexes;

    public function __construct(string $pattern, string $message, array $argumentIndexes = [])
    {
        $this->pattern = $pattern;
        $this->message = $message;
        $this->argumentIndexes = $argumentIndexes;
    }

    public function getPattern(): string
    {
        return $this->pattern;
    }

    public function getUserException(array $arguments = []): UserException
    {
        $args = [];
        foreach ($this->argumentIndexes as $argumentIndex) {
            $args[] = $arguments[$argumentIndex];
        }

        return new UserException(vsprintf($this->message, $args));
    }
}



================================================
FILE: src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\Component\UserException;
use Keboola\Component\Logger;
use Keboola\ExTeradata\ActionComponent;
use Keboola\ExTeradata\CoreComponent;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
try {
    $dataDir = getenv('KBC_DATADIR') ?? '/data/';
    $configJson = file_get_contents($dataDir . DIRECTORY_SEPARATOR . 'config.json');
    $action = json_decode((string) $configJson, true)['action'] ?? 'run';

    switch ($action) {
        case 'run':
            $app = new CoreComponent($logger);
            break;
        default:
            $app = new ActionComponent($logger);
    }
    $app->run();
    exit(0);
} catch (UserException $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (\Throwable $e) {
    $logger->critical(
        get_class($e) . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => $e->getPrevious() ? get_class($e->getPrevious()) : '',
        ]
    );
    exit(2);
}



================================================
FILE: src/Config/BaseConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Config;

use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;

class BaseConfigDefinition extends \Keboola\Component\Config\BaseConfigDefinition
{
    protected function getDbNode(): ArrayNodeDefinition
    {
        $builder = new TreeBuilder();

        /** @var ArrayNodeDefinition $node */
        $node = $builder->root('db');

        // @formatter:off
        $node
            ->isRequired()
            ->addDefaultsIfNotSet()
            ->children()
                ->scalarNode('host')->isRequired()->cannotBeEmpty()->end()
                ->integerNode('port')->defaultValue(1025)->end()
                ->scalarNode('user')->isRequired()->cannotBeEmpty()->end()
                ->scalarNode('#password')->isRequired()->cannotBeEmpty()->end()
                ->scalarNode('database')->isRequired()->cannotBeEmpty()->end()
                ->arrayNode('ssh')
                    ->children()
                        ->booleanNode('enabled')->end()
                        ->arrayNode('keys')
                            ->children()
                                ->scalarNode('private')->end()
                                ->scalarNode('#private')->end()
                                ->scalarNode('public')->end()
                            ->end()
                        ->end()
                        ->scalarNode('sshHost')->end()
                        ->scalarNode('sshPort')->end()
                        ->scalarNode('remoteHost')->end()
                        ->scalarNode('remotePort')->end()
                        ->scalarNode('localPort')->end()
                        ->scalarNode('user')->end()
                    ->end()
                ->end()
            ->end();
        // @formatter:on

        return $node;
    }
}



================================================
FILE: src/Config/ActionComponent/Config.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Config\ActionComponent;

use Keboola\Component\Config\BaseConfig;

class Config extends BaseConfig
{
    public function getHost(): string
    {
        return $this->getValue(['parameters', 'db', 'host']);
    }

    public function getPort(): int
    {
        return $this->getValue(['parameters', 'db', 'port']);
    }

    public function getUser(): string
    {
        return $this->getValue(['parameters', 'db', 'user']);
    }

    public function getPassword(): string
    {
        return $this->getValue(['parameters', 'db', '#password']);
    }

    public function getDatabase(): string
    {
        return $this->getValue(['parameters', 'db', 'database']);
    }
}



================================================
FILE: src/Config/ActionComponent/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Config\ActionComponent;

use Keboola\ExTeradata\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class ConfigDefinition extends BaseConfigDefinition
{
    public function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->children()
                ->append($this->getDbNode());

        // @formatter:on
        return $parametersNode;
    }
}



================================================
FILE: src/Config/CoreComponent/Config.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Config\CoreComponent;

use Keboola\Component\Config\BaseConfig;

class Config extends BaseConfig
{
    public function getHost(): string
    {
        return $this->getValue(['parameters', 'db', 'host']);
    }

    public function getPort(): int
    {
        return $this->getValue(['parameters', 'db', 'port']);
    }

    public function getUser(): string
    {
        return $this->getValue(['parameters', 'db', 'user']);
    }

    public function getPassword(): string
    {
        return $this->getValue(['parameters', 'db', '#password']);
    }

    public function getOutputTable(): string
    {
        return $this->getValue(['parameters', 'outputTable']);
    }

    public function getQuery(): ?string
    {
        try {
            return $this->getValue(['parameters', 'query']);
        } catch (\InvalidArgumentException $exception) {
            return null;
        }
    }

    public function getSchema(): ?string
    {
        try {
            return $this->getValue(['parameters', 'table', 'schema']);
        } catch (\InvalidArgumentException $exception) {
            return null;
        }
    }

    public function getTableName(): ?string
    {
        try {
            return $this->getValue(['parameters', 'table', 'tableName']);
        } catch (\InvalidArgumentException $exception) {
            return null;
        }
    }

    public function getColumns(): array
    {
        return $this->getValue(['parameters', 'columns']);
    }

    public function getIncremental(): bool
    {
        return $this->getValue(['parameters', 'incremental']);
    }

    public function getPrimaryKey(): array
    {
        return $this->getValue(['parameters', 'primaryKey']);
    }
}



================================================
FILE: src/Config/CoreComponent/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Config\CoreComponent;

use Keboola\ExTeradata\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class ConfigDefinition extends BaseConfigDefinition
{
    public function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->children()
                ->append($this->getDbNode())
                ->scalarNode('query')
                ->end()
                ->arrayNode('table')
                    ->children()
                        ->scalarNode('schema')->end()
                        ->scalarNode('tableName')->end()
                    ->end()
                ->end()
                ->arrayNode('columns')
                    ->prototype('scalar')->end()
                ->end()
                ->scalarNode('outputTable')->isRequired()->cannotBeEmpty()->end()
                ->booleanNode('incremental')->defaultValue(false)->end()
                ->arrayNode('primaryKey')
                    ->prototype('scalar')->end()
                ->end()
                ->integerNode('retries')->min(1)->end()
                ->booleanNode('advancedMode')->end()
        ;

        $parametersNode->validate()
            ->ifTrue(function ($v) {
                return !isset($v['query'])
                    && (
                        !isset($v['table']['tableName'])
                        || !isset($v['table']['schema'])
                    );
            })
            ->thenInvalid('The \'query\' or \'table.schema\' with \'table.tableName\' option is required.')
            ->end();

        // @formatter:on
        return $parametersNode;
    }
}



================================================
FILE: src/Factories/ConnectionFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Factories;

use Dibi\Connection;
use Keboola\ExTeradata\ExceptionHandler;

class ConnectionFactory
{
    public function create(string $host, int $port, string $user, string $password): Connection
    {
        try {
            return new Connection([
                'dsn' => sprintf('DRIVER={Teradata};DBCName=%s;TDMSTPortNumber=%s;Charset=UTF8', $host, $port),
                'driver'   => 'odbc',
                'username' => $user,
                'password' => $password,
            ]);
        } catch (\Throwable $exception) {
            throw (new ExceptionHandler())->createException($exception);
        }
    }
}



================================================
FILE: src/Factories/CsvWriterFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Factories;

use Keboola\Csv\CsvWriter;

class CsvWriterFactory
{
    public function create(string $outputCsvFilePath): CsvWriter
    {
        return new CsvWriter($outputCsvFilePath);
    }
}



================================================
FILE: src/Response/Column.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Response;

class Column implements \JsonSerializable
{
    /** @var string */
    private $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    public function jsonSerialize(): array
    {
        return [
            'name' => $this->name,
        ];
    }
}



================================================
FILE: src/Response/Table.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Response;

class Table implements \JsonSerializable
{
    /** @var string */
    private $schema;

    /** @var string */
    private $tableName;

    /** @var array|\JsonSerializable[] */
    private $columns;

    // private $autoIncrement;

    // private $rowCount;

    public function __construct(
        string $schema,
        string $tableName,
        array $columns = []
        // int $autoIncrement,
        // int $rowCount
    ) {
        $this->schema = $schema;
        $this->tableName = $tableName;
        $this->columns = $columns;
        // $this->autoIncrement = $autoIncrement;
        // $this->rowCount = $rowCount;
    }

    public function addColumn(Column $column): void
    {
        $this->columns[] = $column;
    }

    public function jsonSerialize(): array
    {
        return [
            'schema' => $this->schema,
            'name' => $this->tableName,
            'columns' => $this->columns,
            // 'autoIncrement' => $this->autoIncrement,
            // 'rowCount' => $this->rowCount,
        ];
    }
}



================================================
FILE: tests/functional/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Tests\Functional;

use Dibi\Connection;
use Keboola\Component\JsonHelper;
use Keboola\DatadirTests\AbstractDatadirTestCase;
use Keboola\ExTeradata\Factories\ConnectionFactory;

class DatadirTest extends AbstractDatadirTestCase
{
    /** @var Connection */
    private $connection;

    public function setUp(): void
    {
        parent::setUp();
        $credentials = $this->getCredentials();
        $this->connection = (new ConnectionFactory())->create(
            $credentials['host'],
            $credentials['port'],
            $credentials['user'],
            $credentials['#password']
        );
    }

    private function getCredentials(): array
    {
        $requiredCredentials = ['TERADATA_HOST', 'TERADATA_USERNAME', 'TERADATA_PASSWORD', 'TERADATA_DATABASE'];
        foreach ($requiredCredentials as $requiredCredential) {
            if (empty(getenv($requiredCredential))) {
                throw new \Exception(sprintf(
                    'Variable \'%s\' must be set.',
                    $requiredCredential
                ));
            }
        }

        return [
            'host' => getenv('TERADATA_HOST'),
            'port' => (int) getenv('TERADATA_PORT'),
            'user' => getenv('TERADATA_USERNAME'),
            '#password' => getenv('TERADATA_PASSWORD'),
            'database' => getenv('TERADATA_DATABASE'),
        ];
    }

    public function tearDown(): void
    {
        parent::tearDown();

        $database = 'ex_teradata_test';
        try {
            $this->connection->query('DELETE DATABASE ' . $database);
            $this->connection->query('DROP DATABASE ' . $database);
        } catch (\Throwable $exception) {
            if (!preg_match(
                '~Database \'(.+)\' does not exist. S0002~',
                $exception->getMessage()
            )) {
                throw $exception;
            }
        }
    }

    private function createDatabase(string $database): void
    {
        try {
            $sql = sprintf('CREATE DATABASE %s AS PERMANENT=1e9', $database);
            $this->connection->query($sql);
        } catch (\Throwable $exception) {
            print $exception->getMessage();
        }
    }

    private function createTable(string $database, string $table): void
    {
        try {
            $sql = "CREATE TABLE $database.$table (column1 VARCHAR (32), column2 INTEGER)";
            $this->connection->query($sql);
        } catch (\Throwable $exception) {
            print $exception->getMessage();
        }
    }

    private function insertBasicData(string $database, string $table): void
    {
        try {
            $sql = "INSERT INTO $database.$table  VALUES ('row1', 1)";
            $this->connection->query($sql);

            $sql = "INSERT INTO $database.$table  VALUES ('row2', 2)";
            $this->connection->query($sql);
        } catch (\Throwable $exception) {
            print $exception->getMessage();
        }
    }

    private function insertAggregatedBasicData(string $database, string $table): void
    {
        try {
            $sql = "INSERT INTO $database.$table  VALUES ('row1', 1)";
            $this->connection->query($sql);

            $sql = "INSERT INTO $database.$table  VALUES ('row2', 2)";
            $this->connection->query($sql);

            $sql = "INSERT INTO $database.$table  VALUES ('row3', 1)";
            $this->connection->query($sql);

            $sql = "INSERT INTO $database.$table  VALUES ('row4', 1)";
            $this->connection->query($sql);
        } catch (\Throwable $exception) {
            print $exception->getMessage();
        }
    }

    private function getConfig(string $dataDir, array $customDbNode = []): array
    {
        $configuration = JsonHelper::readFile($dataDir . '/config.json');
        $configuration['parameters']['db'] = array_merge($this->getCredentials(), $customDbNode);
        return $configuration;
    }

    public function testActionGetTables(): void
    {
        $dataDir = __DIR__ . '/get-tables';
        $configuration = $this->getConfig($dataDir);
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $response = [
            'status' => 'success',
            'tables' => [
                [
                    'schema' => 'ex_teradata_test',
                    'name' => 'test_1',
                    'columns' => [
                        ['name' => 'column1'],
                        ['name' => 'column2'],
                    ],
                ],
            ],
        ];

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            0,
            JsonHelper::encode($response),
            null
        );
    }

    public function testInvalidHostname(): void
    {
        $dataDir = __DIR__ . '/empty-data';
        $configuration = $this->getConfig($dataDir, ['host' => 'invalid_hostname']);
        $configuration['parameters']['outputTable'] = 'test_1';
        $configuration['parameters']['query'] = 'SELECT 1';
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            1,
            null,
            'The Teradata server can\'t currently be reached over this network.' . PHP_EOL
        );
    }

    public function testInvalidUser(): void
    {
        $dataDir = __DIR__ . '/empty-data';
        $configuration = $this->getConfig($dataDir, ['user' => 'invalid_user']);
        $configuration['parameters']['outputTable'] = 'test_1';
        $configuration['parameters']['query'] = 'SELECT 1';
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            1,
            null,
            'The User or Password is invalid.' . PHP_EOL
        );
    }

    public function testInvalidPassword(): void
    {
        $dataDir = __DIR__ . '/empty-data';
        $configuration = $this->getConfig($dataDir, ['#password' => 'invalid_password']);
        $configuration['parameters']['outputTable'] = 'test_1';
        $configuration['parameters']['query'] = 'SELECT 1';
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            1,
            null,
            'The User or Password is invalid.' . PHP_EOL
        );
    }

    public function testWithoutCredentials(): void
    {
        $dataDir = __DIR__ . '/empty-data';
        $configuration = $this->getConfig($dataDir);
        unset($configuration['parameters']['db']);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            1,
            null,
            'The child node "db" at path "root.parameters" must be configured.' . PHP_EOL
        );
    }

    public function testWithoutSpecifiedTable(): void
    {
        $dataDir = __DIR__ . '/empty-data';
        $configuration = $this->getConfig($dataDir);
        $configuration['parameters']['outputTable'] = 'test';
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            1,
            null,
            'Invalid configuration for path "root.parameters": The \'query\' or'
            . ' \'table.schema\' with \'table.tableName\' option is required.' . PHP_EOL
        );
    }

    public function testExtractAllFromBasicData(): void
    {
        $dataDir = __DIR__ . '/basic-data';
        $configuration = $this->getConfig($dataDir);
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            0,
            'Extracted table into: "out.c-main.test-1".' . PHP_EOL,
            null
        );
    }

    public function testExtractEmptyDataWithRestrictedCharacterInDatabaseName(): void
    {
        $dataDir = __DIR__ . '/empty-data';
        $configuration = $this->getConfig($dataDir);
        $configuration['parameters']['outputTable'] = 'test_1';
        $configuration['parameters']['table'] = [
            'schema' => 'database"_name',
            'tableName' => 'test_1',
        ];
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            1,
            null,
            'Object "database"_name" contain restricted character \'"\'.' . PHP_EOL
        );
    }

    public function testExtractEmptyDataWithRestrictedCharacterInTableName(): void
    {
        $dataDir = __DIR__ . '/empty-data';
        $configuration = $this->getConfig($dataDir);
        $configuration['parameters']['outputTable'] = 'test_1';
        $configuration['parameters']['table'] = [
            'schema' => 'ex_teradata_test',
            'tableName' => 'te"st_1',
        ];
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            1,
            null,
            'Object "te"st_1" contain restricted character \'"\'.' . PHP_EOL
        );
    }

    public function testExtractEmptyDataWithRestrictedCharacterInColumnName(): void
    {
        $dataDir = __DIR__ . '/empty-data';
        $configuration = $this->getConfig($dataDir);
        $configuration['parameters']['outputTable'] = 'test_1';
        $configuration['parameters']['table'] = [
            'schema' => 'ex_teradata_test',
            'tableName' => 'test_1',
        ];
        $configuration['parameters']['columns'] = ['col"umn1'];
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            1,
            null,
            'Object "col"umn1" contain restricted character \'"\'.' . PHP_EOL
        );
    }

    public function testExtractColumn1FromBasicData(): void
    {
        $dataDir = __DIR__ . '/basic-data-export-one-column';
        $configuration = $this->getConfig($dataDir);
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            0,
            'Extracted table into: "out.c-main.test-1".' . PHP_EOL,
            null
        );
    }

    public function testExtractWithUserSql(): void
    {
        $dataDir = __DIR__ . '/aggregated-data';
        $configuration = $this->getConfig($dataDir);
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_2';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertAggregatedBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            0,
            'Extracted table into: "out.c-main.test-2".' . PHP_EOL,
            null
        );
    }

    public function testExtractFromNonExistingDatabase(): void
    {
        $dataDir = __DIR__ . '/empty-data';
        $configuration = $this->getConfig($dataDir);
        $configuration['parameters']['outputTable'] = 'invalid_database';
        $configuration['parameters']['table'] = [
            'schema' => 'invalid_database',
            'tableName' => 'test_1',
        ];
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            1,
            null,
            'Database "invalid_database" does not exist.' . PHP_EOL
        );
    }

    public function testExtractFromNonExistingTable(): void
    {
        $dataDir = __DIR__ . '/empty-data';
        $configuration = $this->getConfig($dataDir);
        $configuration['parameters']['outputTable'] = 'invalid_table';
        $configuration['parameters']['table'] = [
            'schema' => 'ex_teradata_test',
            'tableName' => 'invalid_table',
        ];
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);
        $this->insertBasicData($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            1,
            null,
            'Table "invalid_table" does not exist in database "ex_teradata_test".' . PHP_EOL
        );
    }

    public function testExtractEmptyTable(): void
    {
        $dataDir = __DIR__ . '/empty-table';
        $configuration = $this->getConfig($dataDir);
        $database = $configuration['parameters']['db']['database'];
        $table = 'test_1';

        $this->createDatabase($database);
        $this->createTable($database, $table);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            0,
            'Extracted table into: "out.c-main.test-1".' . PHP_EOL,
            null
        );
    }

    public function testExtractTableWithByteColumn(): void
    {
        $dataDir = __DIR__ . '/basic-data-byte-column';
        $configuration = $this->getConfig($dataDir, ['database' => 'DBC']);

        $this->runTestWithCustomConfiguration(
            $dataDir,
            $configuration,
            1,
            null,
            'You are probably trying to export one or more columns with data type "byte"'
            . ' which is not allowed.' . PHP_EOL
        );
    }
}



================================================
FILE: tests/functional/aggregated-data/config.json
================================================
{
  "parameters": {
    "query": "SELECT COUNT(*) AS \"count\", \"column2\" FROM \"ex_teradata_test\".\"test_2\" GROUP BY \"column2\"",
    "outputTable": "out.c-main.test-2",
    "incremental": false,
    "primaryKey": []
  }
}



================================================
FILE: tests/functional/aggregated-data/source/data/.gitkeep
================================================



================================================
FILE: tests/functional/basic-data/config.json
================================================
{
  "parameters": {
    "outputTable": "out.c-main.test-1",
    "incremental": false,
    "primaryKey": [],
    "table": {
      "schema": "ex_teradata_test",
      "tableName": "test_1"
    }
  }
}



================================================
FILE: tests/functional/basic-data/source/data/.gitkeep
================================================



================================================
FILE: tests/functional/basic-data-byte-column/config.json
================================================
{
  "parameters": {
    "outputTable": "out.c-main.test-1",
    "incremental": false,
    "primaryKey": [],
    "table": {
      "schema": "DBC",
      "tableName": "SessionInfo"
    },
    "columns": [
      "UserName",
      "AccountName",
      "LogonSequenceNo"
    ]
  }
}



================================================
FILE: tests/functional/basic-data-byte-column/source/data/.gitkeep
================================================



================================================
FILE: tests/functional/basic-data-czech-chars/config.json
================================================
{
  "parameters": {
    "outputTable": "out.c-main.test-1",
    "incremental": false,
    "primaryKey": [],
    "table": {
      "schema": "ex_teradata_test",
      "tableName": "czech_chars"
    }
  }
}



================================================
FILE: tests/functional/basic-data-czech-chars/source/data/.gitkeep
================================================



================================================
FILE: tests/functional/basic-data-escaping/config.json
================================================
{
  "parameters": {
    "outputTable": "out.c-main.test-1",
    "incremental": false,
    "primaryKey": [],
    "table": {
      "schema": "ex_teradata_test",
      "tableName": "escaping"
    }
  }
}



================================================
FILE: tests/functional/basic-data-escaping/source/data/.gitkeep
================================================



================================================
FILE: tests/functional/basic-data-export-one-column/config.json
================================================
{
  "parameters": {
    "outputTable": "out.c-main.test-1",
    "incremental": false,
    "primaryKey": [],
    "table": {
      "schema": "ex_teradata_test",
      "tableName": "test_1"
    },
    "columns": [
      "column1"
    ]
  }
}



================================================
FILE: tests/functional/basic-data-export-one-column/source/data/.gitkeep
================================================



================================================
FILE: tests/functional/empty-data/config.json
================================================
{
}



================================================
FILE: tests/functional/empty-data/source/data/.gitkeep
================================================



================================================
FILE: tests/functional/empty-table/config.json
================================================
{
  "parameters": {
    "outputTable": "out.c-main.test-1",
    "incremental": true,
    "primaryKey": ["column1", "column2"],
    "table": {
      "schema": "ex_teradata_test",
      "tableName": "test_1"
    }
  }
}



================================================
FILE: tests/functional/empty-table/source/data/.gitkeep
================================================



================================================
FILE: tests/functional/get-tables/config.json
================================================
{
  "action": "getTables",
  "parameters": {}
}



================================================
FILE: tests/functional/get-tables/source/data/.gitkeep
================================================



================================================
FILE: tests/phpunit/bootstrap.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/../../vendor/autoload.php';



================================================
FILE: tests/phpunit/ConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Tests\Unit;

use Keboola\ExTeradata\Config\CoreComponent\Config;
use Keboola\ExTeradata\Config\CoreComponent\ConfigDefinition;
use PHPUnit\Framework\TestCase;

class ConfigTest extends TestCase
{
    /** @var ConfigDefinition */
    private $configDefinition;

    public function setUp(): void
    {
        parent::setUp();

        $this->configDefinition = new ConfigDefinition();
    }

    public function testValidConfigWithDefinedQuery(): void
    {
        $parameters = [
            'parameters' => [
                'db' => [
                    'host' => 'hostname',
                    'user' => 'username',
                    '#password' => 'password',
                    'database' => 'database',
                ],
                'query' => 'SELECT a FROM b',
                'outputTable' => 'outputFile',
                'incremental' => false,
                'primaryKey' => [],
            ],
        ];

        $config = new Config(
            $parameters,
            $this->configDefinition
        );

        $this->assertEquals('hostname', $config->getHost());
        $this->assertEquals(1025, $config->getPort());
        $this->assertEquals('username', $config->getUser());
        $this->assertEquals('password', $config->getPassword());
        $this->assertEquals('SELECT a FROM b', $config->getQuery());
        $this->assertEquals('outputFile', $config->getOutputTable());
        $this->assertFalse($config->getIncremental());
        $this->assertEmpty($config->getPrimaryKey());
        $this->assertNull($config->getSchema());
        $this->assertNull($config->getTableName());
        $this->assertEmpty($config->getColumns());
    }

    public function testValidConfigWithDefinedTable(): void
    {
        $parameters = [
            'parameters' => [
                'db' => [
                    'host' => 'hostname',
                    'port' => 1100,
                    'user' => 'username',
                    '#password' => 'password',
                    'database' => 'database',
                ],
                'outputTable' => 'outputFile',
                'incremental' => true,
                'primaryKey' => ['column1'],
                'table' => [
                    'schema' => 'schema',
                    'tableName' => 'tableName',
                ],
            ],
        ];

        $config = new Config(
            $parameters,
            $this->configDefinition
        );

        $this->assertEquals('hostname', $config->getHost());
        $this->assertEquals(1100, $config->getPort());
        $this->assertEquals('username', $config->getUser());
        $this->assertEquals('password', $config->getPassword());
        $this->assertNull($config->getQuery());
        $this->assertEquals('outputFile', $config->getOutputTable());
        $this->assertTrue($config->getIncremental());
        $this->assertCount(1, $config->getPrimaryKey());
        $this->assertEquals('column1', $config->getPrimaryKey()[0]);
        $this->assertEquals('schema', $config->getSchema());
        $this->assertEquals('tableName', $config->getTableName());
        $this->assertEmpty($config->getColumns());
    }

    public function testValidConfigWithDefinedTableAndColumns(): void
    {
        $parameters = [
            'parameters' => [
                'db' => [
                    'host' => 'hostname',
                    'user' => 'username',
                    '#password' => 'password',
                    'database' => 'database',
                ],
                'outputTable' => 'outputFile',
                'incremental' => false,
                'primaryKey' => [
                    'column1',
                    'column2',
                ],
                'table' => [
                    'schema' => 'schema',
                    'tableName' => 'tableName',
                ],
                'columns' => [
                    'column1',
                    'column2',
                ],
            ],
        ];

        $config = new Config(
            $parameters,
            $this->configDefinition
        );

        $this->assertEquals('hostname', $config->getHost());
        $this->assertEquals('username', $config->getUser());
        $this->assertEquals('password', $config->getPassword());
        $this->assertNull($config->getQuery());
        $this->assertEquals('outputFile', $config->getOutputTable());
        $this->assertFalse($config->getIncremental());
        $this->assertCount(2, $config->getPrimaryKey());
        $this->assertEquals('column1', $config->getPrimaryKey()[0]);
        $this->assertEquals('column2', $config->getPrimaryKey()[1]);
        $this->assertEquals('schema', $config->getSchema());
        $this->assertEquals('tableName', $config->getTableName());

        $this->assertCount(2, $config->getColumns());
        $this->assertEquals('column1', $config->getColumns()[0]);
        $this->assertEquals('column2', $config->getColumns()[1]);
    }
}



================================================
FILE: tests/phpunit/ExceptionHandlerTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Tests\Unit;

use Dibi\DriverException;
use Keboola\Component\UserException;
use Keboola\ExTeradata\ExceptionHandler;
use PHPUnit\Framework\TestCase;

class ExceptionHandlerTest extends TestCase
{
    /** @var ExceptionHandler */
    private $exceptionHandler;

    public function setUp(): void
    {
        parent::setUp();

        $this->exceptionHandler = new ExceptionHandler();
    }

    public function testExceptionHandlerUnreachableNetwork(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException(
                'unixODBC][Teradata][WSock32 DLL] (424) WSA E NetUnreach: Network is unreachable 08S01'
            )
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals(
            'Network is unreachable.',
            $exception->getMessage()
        );
    }

    public function testExceptionHandlerServerNotAcceptingConnections(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException(
                '[unixODBC][Teradata][WSock32 DLL] (435) WSA E ConnRefused:'
                . ' The Teradata server is not accepting connections 08004'
            )
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals(
            'The Teradata server is not accepting connections.',
            $exception->getMessage()
        );
    }

    public function testExceptionHandlerNoResponseFromServer(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException(
                '[unixODBC][Teradata][WSock32 DLL] (434) WSA E TimedOut: No response'
                . ' received when attempting to connect to the Teradata server S1000'
            )
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals(
            'No response received when attempting to connect to the Teradata server.',
            $exception->getMessage()
        );
    }

    public function testExceptionHandlerCannotAssignRequestAddress(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException(
                '[unixODBC][Teradata][WSock32 DLL] (422) WSA E AddrNotAvail:'
                . ' Can\'t assign requested address 08S01'
            )
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals(
            'Cannot assign requested address.',
            $exception->getMessage()
        );
    }

    public function testExceptionHandlerInvalidHostThrowUserException(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException(
                '[unixODBC][Teradata][WSock32 DLL] (439) WSA E HostUnreach:'
                . ' The Teradata server can\'t currently be reached over this network 08001'
            )
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals(
            'The Teradata server can\'t currently be reached over this network.',
            $exception->getMessage()
        );
    }

    public function testExceptionHandlerInvalidCredentialsThrowUserException(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException(
                '[unixODBC][Teradata][ODBC Teradata Driver][Teradata Database] (210)'
                . ' The UserId, Password or Account is invalid. FailCode = -8017 28000'
            )
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals('The User or Password is invalid.', $exception->getMessage());
    }

    public function testExceptionHandlerNonExistingDatabaseThrowUserException(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException(
                '[Teradata][ODBC Teradata Driver][Teradata Database](-3802)Database'
                . ' \'invalid_database_name\' does not exist. S0002'
            )
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals('Database "invalid_database_name" does not exist.', $exception->getMessage());
    }

    public function testExceptionHandlerNotExistingTableThrowUserException(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException(
                '[Teradata][ODBC Teradata Driver][Teradata Database](-3807)Object'
                . ' \'database_name.invalid_table_name\' does not exist. S0002'
            )
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals(
            'Table "invalid_table_name" does not exist in database "database_name".',
            $exception->getMessage()
        );
    }

    public function testExceptionHandlerWithoutSelectAccessToTable(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException(
                '[Teradata][ODBC Teradata Driver][Teradata Database](-3523)'
                . 'The user does not have SELECT access to DBC.TVM. 37000'
            )
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals(
            'The user does not have "SELECT" access to "DBC.TVM".',
            $exception->getMessage()
        );
    }

    public function testExceptionHandlerInvalidParameters(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException(
                '[Teradata][ODBC Teradata Driver]Teradata DatabaseFunction \'TO_DATE\' called with an ' .
                'invalid number or type of parameters S1000'
            )
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals(
            'Teradata DatabaseFunction "TO_DATE" called with an ' .
            'invalid number or type of parameters.',
            $exception->getMessage()
        );
    }

    public function testExceptionHandlerInternalError(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException('[Teradata][ODBC Teradata Driver] (6) Internal Error (Exception). S1000')
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals(
            'Teradata Internal Error.',
            $exception->getMessage()
        );
    }

    public function testExceptionHandlerLogonsAreOnlyEnabledForUser(): void
    {
        $exception = $this->exceptionHandler->createException(
            new DriverException('[Teradata][ODBC Teradata Driver][Teradata Database] (210) Logons are only ' .
                'enabled for user DBC. FailCode = -3055 S1000')
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals(
            'Logons are only enabled for user DBC.',
            $exception->getMessage()
        );
    }

    public function testExceptionHandlerExportingBytesThrowUserException(): void
    {
        $exception = $this->exceptionHandler->createException(
            new \ErrorException('A non-numeric value encountered {}')
        );

        $this->assertInstanceOf(UserException::class, $exception);
        $this->assertEquals(
            'You are probably trying to export one or more columns with data type "byte" which is not allowed.',
            $exception->getMessage()
        );
    }

    public function testExceptionHandlerRuntimeExceptionIsPassedAbove(): void
    {
        $exception = $this->exceptionHandler->createException(new \RuntimeException('Some exception'));


        $this->assertInstanceOf(\RuntimeException::class, $exception);
        $this->assertEquals('Some exception', $exception->getMessage());
    }
}



================================================
FILE: tests/phpunit/ExtractorHelperTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Tests\Unit;

use Keboola\Component\UserException;
use Keboola\ExTeradata\ExtractorHelper;
use PHPUnit\Framework\TestCase;

class ExtractorHelperTest extends TestCase
{
    /** @var ExtractorHelper */
    private $extractorHelper;

    public function setUp(): void
    {
        $this->extractorHelper = new ExtractorHelper();
    }

    public function testValidateObjectWithIncorectStringThrowsuserException(): void
    {
        $this->expectException(UserException::class);
        $this->expectExceptionMessage('Object "bad"object" contain restricted character \'"\'.');

        $this->extractorHelper->validateObject('bad"object');
    }

    public function testGetExportSqlWithTableDefined(): void
    {
        $this->assertEquals(
            'SELECT * FROM "database_name"."table"',
            $this->extractorHelper->getExportSql('database_name', 'table', [])
        );
    }

    public function testGetExportSqlWithColumnsDefined(): void
    {
        $this->assertEquals(
            'SELECT "column1","column2" FROM "database_name"."table"',
            $this->extractorHelper->getExportSql(
                'database_name',
                'table',
                [
                    'column1',
                    'column2',
                ]
            )
        );
    }
}



================================================
FILE: tests/phpunit/ExtractorTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\ExTeradata\Tests\Unit;

use DG\BypassFinals;
use Dibi\Connection;
use Dibi\DriverException;
use Dibi\Result;
use Dibi\Row;
use Keboola\Component\Logger;
use Keboola\Component\UserException;
use Keboola\Csv\CsvWriter;
use Keboola\ExTeradata\ExceptionHandler;
use Keboola\ExTeradata\Extractor;
use Keboola\ExTeradata\Factories\CsvWriterFactory;
use Mockery\Adapter\Phpunit\MockeryTestCase;
use Mockery\MockInterface;

class ExtractorTest extends MockeryTestCase
{
    /** @var Connection|MockInterface */
    private $connectionMock;

    /** @var CsvWriterFactory|MockInterface */
    private $csvWriterFactoryMock;

    /** @var Extractor */
    private $extractor;

    public function setUp(): void
    {
        parent::setUp();

        BypassFinals::enable();
        $this->connectionMock = \Mockery::mock(Connection::class);
        $this->csvWriterFactoryMock = \Mockery::mock(CsvWriterFactory::class);
        $this->extractor = $extractor = new Extractor(
            $this->connectionMock,
            $this->csvWriterFactoryMock,
            new ExceptionHandler(),
            new Logger()
        );
    }

    public function testExtractTableFromNonExistingDatabaseThrowsUserException(): void
    {
        $this->connectionMock->shouldReceive('nativeQuery')
            ->once()
            ->with("SELECT * FROM database_name.table")
            ->andThrow(
                DriverException::class,
                '[Teradata][ODBC Teradata Driver][Teradata Database](-3802)Database'
                . ' \'database_name\' does not exist. S0002'
            );

        $this->expectException(UserException::class);
        $this->expectExceptionMessage('Database "database_name" does not exist.');

        $this->extractor->extractTable(
            'SELECT * FROM database_name.table',
            'table.csv'
        );
    }

    public function testExtractTableFromNonExistingTableThrowsUserException(): void
    {
        $this->connectionMock->shouldReceive('nativeQuery')
            ->once()
            ->with("SELECT * FROM database_name.table")
            ->andThrow(
                DriverException::class,
                '[Teradata][ODBC Teradata Driver][Teradata Database](-3807)Object'
                . ' \'database_name.table\' does not exist. S0002'
            );

        $this->expectException(UserException::class);
        $this->expectExceptionMessage('Table "table" does not exist in database "database_name".');

        $this->extractor->extractTable(
            'SELECT * FROM database_name.table',
            'table.csv'
        );
    }

    public function testExtractTableFetchFailsOnUnhandledExceptionThrowRuntimeException(): void
    {
        $csvWriterMock = \Mockery::mock(CsvWriter::class);
        $csvWriterMock->shouldReceive('writeRow')
            ->once()
            ->with(['column1', 'column2'])
            ->andReturnNull();

        $this->csvWriterFactoryMock->shouldReceive('create')
            ->once()
            ->withAnyArgs()
            ->andReturn($csvWriterMock);

        $getInfoResultMock = \Mockery::mock(\Dibi\Reflection\Result::class);
        $getInfoResultMock->shouldReceive('getColumnNames')
            ->once()
            ->withNoArgs()
            ->andReturn(['column1', 'column2']);

        $resultMock = \Mockery::mock(Result::class);
        $resultMock->shouldReceive('fetch')
            ->once()
            ->withNoArgs()
            ->andThrow(
                \InvalidArgumentException::class,
                'Invalid argument message.'
            );
        $resultMock->shouldReceive('getInfo')
            ->once()
            ->withNoArgs()
            ->andReturn($getInfoResultMock);

        $this->connectionMock->shouldReceive('nativeQuery')
            ->once()
            ->withAnyArgs()
            ->andReturn($resultMock);

        $this->expectException(\InvalidArgumentException::class);
        $this->expectExceptionMessage('Invalid argument message.');

        $this->extractor->extractTable(
            'SELECT * FROM database_name.table',
            'table.csv'
        );
    }

    public function testExtractTableWithEmptyResultSuccessfully(): void
    {
        $getInfoResultMock = \Mockery::mock(\Dibi\Reflection\Result::class);
        $getInfoResultMock->shouldReceive('getColumnNames')
            ->once()
            ->withNoArgs()
            ->andReturn(['column1', 'column2']);

        $resultMock = \Mockery::mock(Result::class);
        $resultMock->shouldReceive('fetch')
            ->once()
            ->withNoArgs()
            ->andReturn([]);
        $resultMock->shouldReceive('getInfo')
            ->once()
            ->withNoArgs()
            ->andReturn($getInfoResultMock);

        $csvWriterMock = \Mockery::mock(CsvWriter::class);
        $csvWriterMock->shouldReceive('writeRow')
            ->once()
            ->with(['column1', 'column2'])
            ->andReturnNull();

        $this->csvWriterFactoryMock->shouldReceive('create')
            ->once()
            ->withAnyArgs()
            ->andReturn($csvWriterMock);

        $this->connectionMock->shouldReceive('nativeQuery')
            ->once()
            ->with("SELECT * FROM database_name.table")
            ->andReturn($resultMock);

        $this->extractor->extractTable(
            'SELECT * FROM database_name.table',
            'table.csv'
        );
    }

    public function testExtractTableSuccessfully(): void
    {
        $rows = [
            new Row([
                'column1' => 'row1',
                'column2' => 1,
            ]),
            new Row([
                'column1' => 'row2',
                'column2' => 2,
            ]),
        ];

        $getInfoResultMock = \Mockery::mock(\Dibi\Reflection\Result::class);
        $getInfoResultMock->shouldReceive('getColumnNames')
            ->once()
            ->withNoArgs()
            ->andReturn(['column1', 'column2']);

        $resultMock = \Mockery::mock(Result::class);
        $resultMock->shouldReceive('fetch')
            ->times(3)
            ->withNoArgs()
            ->andReturnUsing(function () use (&$rows) {
                $row = current($rows);
                next($rows);
                return $row;
            });
        $resultMock->shouldReceive('getInfo')
            ->once()
            ->withNoArgs()
            ->andReturn($getInfoResultMock);

        $csvWriterMock = \Mockery::spy(CsvWriter::class);
        $csvWriterMock->shouldReceive('writeRow')
            ->times(3)
            ->withAnyArgs()
            ->andReturnNull();
        $this->csvWriterFactoryMock->shouldReceive('create')
            ->once()
            ->withAnyArgs()
            ->andReturn($csvWriterMock);

        $this->connectionMock->shouldReceive('nativeQuery')
            ->once()
            ->with("SELECT * FROM database_name.table")
            ->andReturn($resultMock);

        $this->extractor->extractTable(
            'SELECT * FROM database_name.table',
            'table.csv'
        );
    }
}



================================================
FILE: .github/workflows/push.yml
================================================
name: 'GitHub Actions'
'on':
  - push
concurrency: 'ci-${{ github.ref }}'
env:
  APP_IMAGE: keboola/ex_teradata
  KBC_DEVELOPERPORTAL_VENDOR: keboola
  KBC_DEVELOPERPORTAL_APP: keboola.ex-teradata
  KBC_DEVELOPERPORTAL_USERNAME: keboola+teradata_extractor_gha
  KBC_DEVELOPERPORTAL_PASSWORD: '${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}'

  AWS_ACCESS_KEY_ID: [REDACTED]
  AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'

  TERADATA_HOST: 100.200.30.40
  TERADATA_PORT: 1025
  TERADATA_USERNAME: user
  TERADATA_PASSWORD: '${{ secrets.TERADATA_PASSWORD }}'
  TERADATA_DATABASE: database_name

  DOCKERHUB_USER: keboolabot
  DOCKERHUB_TOKEN: '${{ secrets.DOCKERHUB_TOKEN }}'

  KBC_STORAGE_TOKEN: '${{ secrets.KBC_STORAGE_TOKEN }}'
  KBC_TEST_PROJECT_URL: ''
  KBC_TEST_PROJECT_CONFIGS: ''
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: '${{ steps.tag.outputs.app_image_tag }}'
      is_semantic_tag: '${{ steps.tag.outputs.is_semantic_tag }}'
    steps:
      -
        name: 'Check out the repo'
        uses: actions/checkout@v3
      -
        name: 'Print Docker version'
        run: 'docker -v'
      -
        name: 'Docker login'
        if: env.DOCKERHUB_TOKEN
        run: 'docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"'
      -
        name: 'Build image'
        run: |
          docker build \
          --build-arg AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} \
          --build-arg AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} \
          -t $APP_IMAGE \
          .
      -
        name: 'Set image tag'
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
      -
        name: 'Push image to ECR'
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
          app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
          username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
          password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
          tag: '${{ steps.tag.outputs.app_image_tag }}'
          push_latest: '${{ steps.tag.outputs.is_semantic_tag }}'
          source_image: '${{ env.APP_IMAGE}}'
  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: 'Check out the repo'
        uses: actions/checkout@v3
      -
        name: 'Pull image from ECR'
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
          app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
          username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
          password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
          tag: '${{ needs.build.outputs.app_image_tag }}'
          target_image: '${{ env.APP_IMAGE}}'
          tag_as_latest: true
      -
        name: 'Run tests'
        run: |
          docker run \
          -e TERADATA_HOST \
          -e TERADATA_PORT \
          -e TERADATA_DATABASE \
          -e TERADATA_SCHEMA \
          -e TERADATA_USERNAME \
          -e TERADATA_PASSWORD \
          ${{env.APP_IMAGE}} \
          composer ci
  tests-in-kbc:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: 'Run KBC test jobs'
        if: 'env.KBC_STORAGE_TOKEN && env.KBC_TEST_PROJECT_CONFIGS'
        uses: keboola/action-run-configs-parallel@master
        with:
          token: '${{ env.KBC_STORAGE_TOKEN }}'
          componentId: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
          tag: '${{ needs.build.outputs.app_image_tag }}'
          configs: '${{ env.KBC_TEST_PROJECT_CONFIGS }}'
  deploy:
    needs:
      - build
      - tests
      - tests-in-kbc
    runs-on: ubuntu-latest
    if: 'startsWith(github.ref, ''refs/tags/'') && needs.build.outputs.is_semantic_tag == ''true'''
    steps:
      -
        name: 'Set tag in the Developer Portal'
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
          app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
          username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
          password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
          tag: '${{ needs.build.outputs.app_image_tag }}'

