Directory structure:
└── keboola-component-ms-sql-2005/
    ├── README.md
    ├── composer.json
    ├── composer.lock
    ├── deploy.sh
    ├── docker-compose.yml
    ├── Dockerfile
    ├── phpcs.xml
    ├── phpstan.neon
    ├── phpunit.xml.dist
    ├── ssh-keys.env
    ├── wait-for-it.sh
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   └── sample-config/
    │       ├── config.json
    │       └── in/
    │           ├── state.json
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               ├── test.csv
    │               └── test.csv.manifest
    ├── docker/
    │   ├── composer-install.sh
    │   ├── php-prod.ini
    │   ├── mssql-ssl/
    │   │   └── Dockerfile
    │   ├── mssql-ssl-invalid-cn/
    │   │   └── Dockerfile
    │   └── xdebug/
    │       └── xdebug.ini.dist
    ├── mssql/
    │   └── freetds.conf
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── MSSQLApplication.php
    │   ├── run.php
    │   ├── Configuration/
    │   │   ├── MssqlExportConfig.php
    │   │   ├── MssqlTableNodesDecorator.php
    │   │   └── NodeDefinition/
    │   │       └── MssqlSslNode.php
    │   ├── Exception/
    │   │   ├── BcpAdapterException.php
    │   │   ├── BcpAdapterSkippedException.php
    │   │   └── PdoAdapterSkippedException.php
    │   ├── Extractor/
    │   │   ├── MSSQL.php
    │   │   ├── MssqlDataType.php
    │   │   ├── MSSQLPdoConnection.php
    │   │   ├── MSSQLQueryFactory.php
    │   │   ├── MssqlRetryFactory.php
    │   │   └── Adapters/
    │   │       ├── BcpExportAdapter.php
    │   │       ├── BcpQueryMetadata.php
    │   │       └── MSSQLPdoExportAdapter.php
    │   └── Metadata/
    │       ├── MssqlManifestSerializer.php
    │       ├── MssqlMetadataProvider.php
    │       └── MssqlSqlHelper.php
    ├── tests/
    │   ├── functional/
    │   │   ├── DatabaseManager.php
    │   │   ├── DatadirTest.php
    │   │   ├── PdoTestConnection.php
    │   │   ├── bcp-and-pdo-disabled/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── bcp-and-pdo-disabled-config-row/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── bcp-disabled/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── bcp-retry/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── expected-stdout
    │   │   ├── clause-with-single-quote/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── columns-ordering/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── different-quoting/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── error-incremental-fetching-advanced-query/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── error-incremental-fetching-fake-column/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── error-incremental-fetching-string-column/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── error-invalid-query/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── get-tables-action/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── get-tables-empty-table-name/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-datetime/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-datetime-with-state/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-datetime2/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-datetime2-with-state/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-decimal/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-decimal-with-state/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-empty-rows/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-int/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-int-with-limit/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-int-with-state/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-int-with-state-and-limit/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-null-cols/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-null-cols-state/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-smalldatetime/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-smalldatetime-with-state/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-timestamp/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-timestamp-with-state-1/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── incremental-fetching-timestamp-with-state-2/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── no-lock/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── no-lock-advanced-query-config-row/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── no-lock-config-row/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── numeric-default-values/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── pdo-fallback/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── pdo-fallback-disabled/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── pdo-fallback-disabled-config-row/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── pdo-fallback-simple-no-data/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── run-action/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── run-action-via-ssh-tunnel/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   └── setUp.php
    │   │   ├── simplified-pdo-fallback-query/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── small-datetime/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── ssl-invalid-cn-certificate/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── ssl-not-verify-cert-missing-certificate/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── ssl-not-verify-cert-valid-certificate/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── ssl-verify-cert-ignore-invalid-cn-and-ignore-invalid-certificate/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── ssl-verify-cert-ignore-invalid-cn-certificate/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── ssl-verify-cert-invalid-certificate/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── ssl-verify-cert-invalid-cn-certificate/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── ssl-verify-cert-missing-certificate/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── ssl-verify-cert-valid-certificate/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   ├── ssl-without-ca/
    │   │   │   ├── expected-code
    │   │   │   ├── expected-stderr
    │   │   │   ├── expected-stdout
    │   │   │   └── setUp.php
    │   │   └── test-connection-action/
    │   │       ├── expected-code
    │   │       ├── expected-stderr
    │   │       └── expected-stdout
    │   ├── phpunit/
    │   │   ├── DatatypeMappingTest.php
    │   │   ├── MssqlDataTypeTest.php
    │   │   ├── MSSQLPdoTestConnection.php
    │   │   ├── MSSQLRetryTest.php
    │   │   ├── MssqlSqlHelperTest.php
    │   │   ├── MSSQLTest.php
    │   │   ├── PerformanceTest.php
    │   │   ├── QueryFactoryTest.php
    │   │   └── Traits/
    │   │       └── ConfigTrait.php
    │   ├── ssl-certs/
    │   │   ├── ca.crt
    │   │   ├── ca.key
    │   │   ├── ca.srl
    │   │   ├── invalidCa.crt
    │   │   ├── invalidCa.key
    │   │   ├── invalidCNCa.crt
    │   │   ├── invalidCNCa.key
    │   │   ├── invalidCNCa.srl
    │   │   ├── mssql-invalidCn.crt
    │   │   ├── mssql-invalidCn.csr
    │   │   ├── mssql-invalidCn.key
    │   │   ├── mssql.crt
    │   │   ├── mssql.csr
    │   │   └── mssql.key
    │   └── traits/
    │       ├── AddConstraintTrait.php
    │       ├── CloseSshTunnelsTrait.php
    │       ├── CreateTableTrait.php
    │       ├── InsertRowsTrait.php
    │       ├── QuoteIdentifierTrait.php
    │       ├── QuoteTrait.php
    │       ├── RemoveAllTablesTrait.php
    │       └── Tables/
    │           ├── AutoIncrementTableTrait.php
    │           ├── NullableTableTrait.php
    │           ├── SalesTableTrait.php
    │           ├── SimpleTableTrait.php
    │           ├── SpecialTableTrait.php
    │           └── TimestampTableTrait.php
    └── .github/
        └── workflows/
            └── push.yml

================================================
FILE: README.md
================================================
# MS SQL DB Extractor

[![Build Status](https://travis-ci.com/keboola/db-extractor-mssql.svg?branch=master)](https://travis-ci.com/keboola/db-extractor-mssql)

## Extractor DB Account Setup

```
CREATE LOGIN tests_mssql_extractor WITH PASSWORD = '';
CREATE USER tests_mssql_extractor FOR LOGIN tests_mssql_extractor;
CREATE DATABASE tests_mssql_extractor;
USE tests_mssql_extractor;
CREATE SCHEMA tests;
CREATE TABLE tests.test (id text null, name text null);
INSERT INTO tests.test VALUES ('1', 'martin');
GRANT SELECT ON SCHEMA :: [tests] TO tests_mssql_extractor;
```

## Configuration

    {
      "db": {
        "driver": "mssql",
        "host": "HOST",
        "port": "PORT",
        "database": "DATABASE",
        "user": "USERNAME",
        "password": "PASSWORD",
        "ssh": {
          "enabled": true,
          "keys": {
            "private": "ENCRYPTED_PRIVATE_SSH_KEY",
            "public": "PUBLIC_SSH_KEY"
          },
          "sshHost": "PROXY_HOSTNAME"
        }
      },
      "tables": [
        {
          "name": "employees",
          "query": "SELECT * FROM employees",
          "outputTable": "in.c-main.employees",
          "incremental": false,
          "enabled": true,
          "primaryKey": null
        }
      ]
    }



================================================
FILE: composer.json
================================================
{
    "name": "keboola/db-extractor-mssql",
    "license": "MIT",
    "type": "project",
    "description": "Keboola Microsoft SQL DB Writer",
    "authors": [
        {
            "name": "keboola",
            "email": "devel@keboola.com"
        }
    ],
    "require": {
        "php": "^7.4",
        "ext-PDO": "*",
        "ext-json": "*",
        "ext-mbstring": "*",
        "keboola/csv": "^2.2.1",
        "keboola/datadir-tests": "^5.2",
        "keboola/db-extractor-common": "^14.5",
        "keboola/db-extractor-config": "^1.7.2",
        "keboola/db-extractor-table-format": "^3.1.7",
        "keboola/php-component": "^8.1.2",
        "keboola/php-datatypes": "^4.8",
        "symfony/config": "^5.0",
        "symfony/process": "^5.0"
    },
    "require-dev": {
      "keboola/coding-standard": ">=9.0",
        "phpstan/phpstan": "^0.12.14",
        "phpunit/phpunit": "^9.0"
    },
    "autoload": {
        "psr-4": {
            "Keboola\\DbExtractor\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Keboola\\DbExtractor\\Tests\\": "tests/phpunit/",
            "Keboola\\DbExtractor\\TraitTests\\": "tests/traits/",
            "Keboola\\DbExtractor\\FunctionalTests\\": "tests/functional/"
        }
    },
    "scripts": {
        "tests-phpunit": "phpunit --testsuite unit",
        "tests-datadir": "phpunit --testsuite functional",
        "tests-perf": "phpunit --testsuite perf",
        "tests": [
            "@tests-phpunit",
            "@tests-datadir",
            "@tests-perf"
        ],
        "phpstan": "phpstan analyse --no-progress --level=max ./src ./tests -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "build": [
            "@phpcs",
            "@phpstan",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-all --strict",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true
    }
}



================================================
FILE: composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "f19b06fb075fab0ad299901b4b342943",
    "packages": [
        {
            "name": "doctrine/instantiator",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/instantiator.git",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "require-dev": {
                "doctrine/coding-standard": "^8.0",
                "ext-pdo": "*",
                "ext-phar": "*",
                "phpbench/phpbench": "^0.13 || 1.0.0-alpha2",
                "phpstan/phpstan": "^0.12",
                "phpstan/phpstan-phpunit": "^0.12",
                "phpunit/phpunit": "^7.0 || ^8.0 || ^9.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com",
                    "homepage": "https://ocramius.github.io/"
                }
            ],
            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
            "keywords": [
                "constructor",
                "instantiate"
            ],
            "support": {
                "issues": "https://github.com/doctrine/instantiator/issues",
                "source": "https://github.com/doctrine/instantiator/tree/1.4.0"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-10T18:47:58+00:00"
        },
        {
            "name": "keboola/common-exceptions",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/common-exceptions.git",
                "reference": "fb3ac03b92e7db56f1f4e1952d232ef8640a18d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/common-exceptions/zipball/fb3ac03b92e7db56f1f4e1952d232ef8640a18d7",
                "reference": "fb3ac03b92e7db56f1f4e1952d232ef8640a18d7",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^1.0",
                "phpstan/phpstan-shim": "^0.10.6",
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\CommonExceptions\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Common exceptions shared between different applications",
            "support": {
                "source": "https://github.com/keboola/common-exceptions/tree/master"
            },
            "time": "2020-07-07T07:42:44+00:00"
        },
        {
            "name": "keboola/csv",
            "version": "2.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csv.git",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csv/zipball/eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "ext-json": "*",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Csv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola CSV reader and writer",
            "homepage": "http://keboola.com",
            "keywords": [
                "csv",
                "rfc4180"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csv/issues",
                "source": "https://github.com/keboola/php-csv/tree/master"
            },
            "time": "2020-07-28T09:27:05+00:00"
        },
        {
            "name": "keboola/datadir-tests",
            "version": "5.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/datadir-tests.git",
                "reference": "be02e9dc7869c4224cff6dd1b0cdc7937753b234"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/datadir-tests/zipball/be02e9dc7869c4224cff6dd1b0cdc7937753b234",
                "reference": "be02e9dc7869c4224cff6dd1b0cdc7937753b234",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/php-temp": "^2.0",
                "php": "^7.3",
                "phpunit/phpunit": "^9.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/process": "^5.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^9.0",
                "phpstan/phpstan": "^0.12.14"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DatadirTests\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Tool for functional testing of Keboola Connection components",
            "support": {
                "issues": "https://github.com/keboola/datadir-tests/issues",
                "source": "https://github.com/keboola/datadir-tests/tree/5.2.1"
            },
            "time": "2020-11-30T19:23:38+00:00"
        },
        {
            "name": "keboola/db-extractor-adapter",
            "version": "1.5.2",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/db-extractor-adapter.git",
                "reference": "ca7a74b14948ee72426ba5c0d6d96e2c7bdff0d4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/db-extractor-adapter/zipball/ca7a74b14948ee72426ba5c0d6d96e2c7bdff0d4",
                "reference": "ca7a74b14948ee72426ba5c0d6d96e2c7bdff0d4",
                "shasum": ""
            },
            "require": {
                "ext-iconv": "*",
                "keboola/common-exceptions": "^1.0",
                "keboola/csv": "^2.2",
                "keboola/db-extractor-config": "^1.4",
                "keboola/db-extractor-table-format": "^3.0",
                "keboola/retry": "^0.5",
                "php": ">=7.4",
                "psr/log": "^1.1"
            },
            "require-dev": {
                "ext-json": "*",
                "ihsw/toxiproxy-php-client": "^2.0",
                "keboola/coding-standard": ">=9.0",
                "keboola/php-temp": "^2.0",
                "phpstan/phpstan": "^0.12.2",
                "phpunit/phpunit": "^9.1"
            },
            "suggest": {
                "ext-odbc": "Needed to support ODBC connection",
                "ext-pdo": "Needed to support PDO connection"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DbExtractor\\Adapter\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Set of connection adapters for DB extractors.",
            "support": {
                "source": "https://github.com/keboola/db-extractor-adapter/tree/1.5.2"
            },
            "time": "2021-04-16T10:25:31+00:00"
        },
        {
            "name": "keboola/db-extractor-common",
            "version": "14.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/db-extractor-common.git",
                "reference": "ea82dfc87150f3292b2628158b1315ebe5ae7a23"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/db-extractor-common/zipball/ea82dfc87150f3292b2628158b1315ebe5ae7a23",
                "reference": "ea82dfc87150f3292b2628158b1315ebe5ae7a23",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "ext-pdo": "*",
                "keboola/common-exceptions": "^1.1",
                "keboola/csv": "^2.2",
                "keboola/db-extractor-adapter": "^1.5.1",
                "keboola/db-extractor-config": "^1.4",
                "keboola/db-extractor-ssh-tunnel": "^1.1",
                "keboola/db-extractor-table-format": "^3.2",
                "keboola/php-component": "^8.1",
                "keboola/php-datatypes": "^4.7",
                "keboola/php-utils": "^2.3||^3.0||^4.0",
                "keboola/retry": "^0.5",
                "monolog/monolog": "^2.0",
                "nette/utils": "^3.0",
                "php": ">=7.4",
                "phpunit/phpunit": "^9.1",
                "pimple/pimple": "^3.3",
                "psr/log": "^1.1"
            },
            "require-dev": {
                "ihsw/toxiproxy-php-client": "^2.0",
                "keboola/coding-standard": ">=9.0.0",
                "keboola/php-temp": "^2.0",
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpstan/phpstan": "^0.12.14",
                "symfony/debug": "^4.3"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DbExtractor\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Common library from Keboola Database Extractors",
            "support": {
                "issues": "https://github.com/keboola/db-extractor-common/issues",
                "source": "https://github.com/keboola/db-extractor-common/tree/14.5.0"
            },
            "time": "2021-04-23T06:55:30+00:00"
        },
        {
            "name": "keboola/db-extractor-config",
            "version": "1.7.2",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/db-extractor-config.git",
                "reference": "2f1b73c0f7defb5007306bb99585a6df6d89d7b4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/db-extractor-config/zipball/2f1b73c0f7defb5007306bb99585a6df6d89d7b4",
                "reference": "2f1b73c0f7defb5007306bb99585a6df6d89d7b4",
                "shasum": ""
            },
            "require": {
                "keboola/php-component": "^8.1",
                "php": ">=7.4",
                "symfony/config": "^5.0"
            },
            "require-dev": {
                "ext-json": "*",
                "keboola/coding-standard": ">=13.0",
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpstan/phpstan": "^0.12.14",
                "phpunit/phpunit": "^9.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DbExtractorConfig\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Config definition for database extractor",
            "support": {
                "source": "https://github.com/keboola/db-extractor-config/tree/1.7.2"
            },
            "time": "2021-11-02T11:27:47+00:00"
        },
        {
            "name": "keboola/db-extractor-ssh-tunnel",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/db-extractor-ssh-tunnel.git",
                "reference": "4fbfcd03c64065464efeb1b7ce6f9f34134020d6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/db-extractor-ssh-tunnel/zipball/4fbfcd03c64065464efeb1b7ce6f9f34134020d6",
                "reference": "4fbfcd03c64065464efeb1b7ce6f9f34134020d6",
                "shasum": ""
            },
            "require": {
                "keboola/retry": "^0.5",
                "keboola/ssh-tunnel": "^2.0",
                "psr/log": "^1.1"
            },
            "require-dev": {
                "keboola/coding-standard": ">=9.0.0",
                "monolog/monolog": "^2.0",
                "phpstan/phpstan": "^0.12.14",
                "phpunit/phpunit": "^9.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DbExtractorSSHTunnel\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create SSH tunnel for DB Extractors",
            "support": {
                "issues": "https://github.com/keboola/db-extractor-ssh-tunnel/issues",
                "source": "https://github.com/keboola/db-extractor-ssh-tunnel/tree/master"
            },
            "time": "2020-06-18T08:51:48+00:00"
        },
        {
            "name": "keboola/db-extractor-table-format",
            "version": "3.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/db-extractor-table-format.git",
                "reference": "5f0861845a53cbfb9fe21c7203e180000dea8720"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/db-extractor-table-format/zipball/5f0861845a53cbfb9fe21c7203e180000dea8720",
                "reference": "5f0861845a53cbfb9fe21c7203e180000dea8720",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "ext-mbstring": "*",
                "keboola/common-exceptions": "^1.0",
                "keboola/php-datatypes": "^4.7",
                "keboola/php-utils": "^4.1",
                "php": ">=7.4"
            },
            "require-dev": {
                "keboola/coding-standard": ">=9.0",
                "phpstan/phpstan": "^0.12.2",
                "phpunit/phpunit": "^9.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DbExtractor\\TableResultFormat\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "PHP class for formating table result",
            "support": {
                "source": "https://github.com/keboola/db-extractor-table-format/tree/3.2.0"
            },
            "time": "2021-04-22T05:32:51+00:00"
        },
        {
            "name": "keboola/php-component",
            "version": "8.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-component.git",
                "reference": "2791e6eb346dc25a3a82818fd8dbebddc8eeb79b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-component/zipball/2791e6eb346dc25a3a82818fd8dbebddc8eeb79b",
                "reference": "2791e6eb346dc25a3a82818fd8dbebddc8eeb79b",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/common-exceptions": "^1.0",
                "monolog/monolog": "^2.0",
                "php": "^7.3",
                "symfony/config": "^5.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/serializer": "^5.0"
            },
            "require-dev": {
                "devedge/sami-github": "^1.0",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^2.0",
                "phpstan/phpstan": "^0.12.14",
                "phpunit/phpunit": "^9.0"
            },
            "type": "project",
            "autoload": {
                "psr-4": {
                    "Keboola\\Component\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Helper classes for developing Keboola PHP components",
            "keywords": [
                "component",
                "docker",
                "keboola"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-component/issues",
                "source": "https://github.com/keboola/php-component/tree/8.3.0"
            },
            "time": "2021-03-12T08:12:05+00:00"
        },
        {
            "name": "keboola/php-datatypes",
            "version": "4.9.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-datatypes.git",
                "reference": "c70b78804e49472121a0f3604ef9740c8612beb6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-datatypes/zipball/c70b78804e49472121a0f3604ef9740c8612beb6",
                "reference": "c70b78804e49472121a0f3604ef9740c8612beb6",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "~0.4",
                "php-parallel-lint/php-parallel-lint": "^1.1",
                "phpstan/phpstan": "~0.9",
                "phpunit/phpunit": "^5.0",
                "squizlabs/php_codesniffer": "^2.6"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Datatype\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "PHP datatypes for databases",
            "support": {
                "issues": "https://github.com/keboola/php-datatypes/issues",
                "source": "https://github.com/keboola/php-datatypes/tree/4.9.0"
            },
            "time": "2020-11-11T10:55:41+00:00"
        },
        {
            "name": "keboola/php-temp",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/filesystem": ">2.8"
            },
            "require-dev": {
                "infection/infection": "^0.12",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^8.0",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0|^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Temp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Temp library handles application temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-temp/issues",
                "source": "https://github.com/keboola/php-temp/tree/2.0.1"
            },
            "time": "2019-04-26T07:18:24+00:00"
        },
        {
            "name": "keboola/php-utils",
            "version": "4.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-utils.git",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-utils/zipball/f5be83a50b5c4858f5698747e8a795048a89c382",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382",
                "shasum": ""
            },
            "require": {
                "keboola/sanitizer": "^0.1",
                "php": ">=5.6.0",
                "seld/jsonlint": "^1.4"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "~0.2",
                "phpunit/phpunit": "~5.0",
                "squizlabs/php_codesniffer": "~2.4"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/Keboola/Utils/jsonDecode.php",
                    "src/Keboola/Utils/sanitizeUtf8.php",
                    "src/Keboola/Utils/objectToArray.php",
                    "src/Keboola/Utils/formatDateTime.php",
                    "src/Keboola/Utils/replaceDates.php",
                    "src/Keboola/Utils/replaceDatesInArray.php",
                    "src/Keboola/Utils/buildUrl.php",
                    "src/Keboola/Utils/httpBuildUrl.php",
                    "src/Keboola/Utils/returnBytes.php",
                    "src/Keboola/Utils/camelize.php",
                    "src/Keboola/Utils/getDataFromPath.php",
                    "src/Keboola/Utils/isValidDateTimeString.php",
                    "src/Keboola/Utils/flattenArray.php",
                    "src/Keboola/Utils/arrayToObject.php",
                    "src/Keboola/Utils/isEmptyObject.php",
                    "src/Keboola/Utils/stripInvalidUtf16.php",
                    "src/Keboola/Utils/toAscii.php",
                    "src/Keboola/Utils/sanitizeColumnName.php",
                    "src/Keboola/Utils/formatBytes.php"
                ],
                "psr-0": {
                    "Keboola\\Utils": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Misc utility functions",
            "keywords": [
                "utility"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-utils/issues",
                "source": "https://github.com/keboola/php-utils/tree/master"
            },
            "time": "2019-10-04T20:55:45+00:00"
        },
        {
            "name": "keboola/retry",
            "version": "0.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/retry.git",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/retry/zipball/afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "psr/log": "^1.1"
            },
            "replace": {
                "vkartaviy/retry": "*"
            },
            "require-dev": {
                "keboola/coding-standard": "^7.0",
                "phpstan/phpstan-shim": "^0.10",
                "phpunit/phpunit": "7.*"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Retry\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola Dev",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Library for repeatable and retryable operations",
            "keywords": [
                "backoff",
                "proxy",
                "repeat",
                "retry"
            ],
            "support": {
                "issues": "https://github.com/keboola/retry/issues",
                "source": "https://github.com/keboola/retry/tree/0.5.0"
            },
            "time": "2020-01-31T14:20:00+00:00"
        },
        {
            "name": "keboola/sanitizer",
            "version": "0.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/sanitizer.git",
                "reference": "6edda00cd177409a33f180b8f12bdad89bf893c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/sanitizer/zipball/6edda00cd177409a33f180b8f12bdad89bf893c5",
                "reference": "6edda00cd177409a33f180b8f12bdad89bf893c5",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Utils\\Sanitizer\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Column name sanitizer",
            "support": {
                "issues": "https://github.com/keboola/sanitizer/issues",
                "source": "https://github.com/keboola/sanitizer/tree/0.1.0"
            },
            "time": "2019-01-11T10:21:17+00:00"
        },
        {
            "name": "keboola/ssh-tunnel",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/ssh-tunnel.git",
                "reference": "cd48c73efb22815e26b9f146775b4608478477da"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/ssh-tunnel/zipball/cd48c73efb22815e26b9f146775b4608478477da",
                "reference": "cd48c73efb22815e26b9f146775b4608478477da",
                "shasum": ""
            },
            "require": {
                "symfony/process": "^4.2|^5.0"
            },
            "require-dev": {
                "keboola/coding-standard": ">=9.0.0",
                "phpstan/phpstan": "^0.12.14",
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\": "src/Keboola/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Simple library for SSH tunneling",
            "support": {
                "issues": "https://github.com/keboola/ssh-tunnel/issues",
                "source": "https://github.com/keboola/ssh-tunnel/tree/master"
            },
            "time": "2020-04-23T10:25:32+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "1cb1cde8e8dd0f70cc0fe51354a59acad9302084"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/1cb1cde8e8dd0f70cc0fe51354a59acad9302084",
                "reference": "1cb1cde8e8dd0f70cc0fe51354a59acad9302084",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2",
                "psr/log": "^1.0.1"
            },
            "provide": {
                "psr/log-implementation": "1.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "elasticsearch/elasticsearch": "^7",
                "graylog2/gelf-php": "^1.4.2",
                "mongodb/mongodb": "^1.8",
                "php-amqplib/php-amqplib": "~2.4",
                "php-console/php-console": "^3.1.3",
                "phpspec/prophecy": "^1.6.1",
                "phpstan/phpstan": "^0.12.59",
                "phpunit/phpunit": "^8.5",
                "predis/predis": "^1.1",
                "rollbar/rollbar": "^1.3",
                "ruflin/elastica": ">=0.90 <7.0.1",
                "swiftmailer/swiftmailer": "^5.3|^6.0"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-mbstring": "Allow to work properly with unicode symbols",
                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "php-console/php-console": "Allow sending log messages to Google Chrome",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "https://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "https://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/monolog/issues",
                "source": "https://github.com/Seldaek/monolog/tree/2.2.0"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/monolog/monolog",
                    "type": "tidelift"
                }
            ],
            "time": "2020-12-14T13:15:25+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.10.2",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "776f831124e9c62e1a2c601ecc52e776d8bb7220"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/776f831124e9c62e1a2c601ecc52e776d8bb7220",
                "reference": "776f831124e9c62e1a2c601ecc52e776d8bb7220",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "replace": {
                "myclabs/deep-copy": "self.version"
            },
            "require-dev": {
                "doctrine/collections": "^1.0",
                "doctrine/common": "^2.6",
                "phpunit/phpunit": "^7.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                },
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "support": {
                "issues": "https://github.com/myclabs/DeepCopy/issues",
                "source": "https://github.com/myclabs/DeepCopy/tree/1.10.2"
            },
            "funding": [
                {
                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-13T09:40:50+00:00"
        },
        {
            "name": "nette/utils",
            "version": "v3.2.2",
            "source": {
                "type": "git",
                "url": "https://github.com/nette/utils.git",
                "reference": "967cfc4f9a1acd5f1058d76715a424c53343c20c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nette/utils/zipball/967cfc4f9a1acd5f1058d76715a424c53343c20c",
                "reference": "967cfc4f9a1acd5f1058d76715a424c53343c20c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2 <8.1"
            },
            "conflict": {
                "nette/di": "<3.0.6"
            },
            "require-dev": {
                "nette/tester": "~2.0",
                "phpstan/phpstan": "^0.12",
                "tracy/tracy": "^2.3"
            },
            "suggest": {
                "ext-gd": "to use Image",
                "ext-iconv": "to use Strings::webalize(), toAscii(), chr() and reverse()",
                "ext-intl": "to use Strings::webalize(), toAscii(), normalize() and compare()",
                "ext-json": "to use Nette\\Utils\\Json",
                "ext-mbstring": "to use Strings::lower() etc...",
                "ext-tokenizer": "to use Nette\\Utils\\Reflection::getUseStatements()",
                "ext-xml": "to use Strings::length() etc. when mbstring is not available"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause",
                "GPL-2.0-only",
                "GPL-3.0-only"
            ],
            "authors": [
                {
                    "name": "David Grudl",
                    "homepage": "https://davidgrudl.com"
                },
                {
                    "name": "Nette Community",
                    "homepage": "https://nette.org/contributors"
                }
            ],
            "description": "🛠  Nette Utils: lightweight utilities for string & array manipulation, image handling, safe JSON encoding/decoding, validation, slug or strong password generating etc.",
            "homepage": "https://nette.org",
            "keywords": [
                "array",
                "core",
                "datetime",
                "images",
                "json",
                "nette",
                "paginator",
                "password",
                "slugify",
                "string",
                "unicode",
                "utf-8",
                "utility",
                "validation"
            ],
            "support": {
                "issues": "https://github.com/nette/utils/issues",
                "source": "https://github.com/nette/utils/tree/v3.2.2"
            },
            "time": "2021-03-03T22:53:25+00:00"
        },
        {
            "name": "nikic/php-parser",
            "version": "v4.10.4",
            "source": {
                "type": "git",
                "url": "https://github.com/nikic/PHP-Parser.git",
                "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/c6d052fc58cb876152f89f532b95a8d7907e7f0e",
                "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e",
                "shasum": ""
            },
            "require": {
                "ext-tokenizer": "*",
                "php": ">=7.0"
            },
            "require-dev": {
                "ircmaxell/php-yacc": "^0.0.7",
                "phpunit/phpunit": "^6.5 || ^7.0 || ^8.0 || ^9.0"
            },
            "bin": [
                "bin/php-parse"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.9-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpParser\\": "lib/PhpParser"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Nikita Popov"
                }
            ],
            "description": "A PHP parser written in PHP",
            "keywords": [
                "parser",
                "php"
            ],
            "support": {
                "issues": "https://github.com/nikic/PHP-Parser/issues",
                "source": "https://github.com/nikic/PHP-Parser/tree/v4.10.4"
            },
            "time": "2020-12-20T10:01:03+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-phar": "*",
                "ext-xmlwriter": "*",
                "phar-io/version": "^3.0.1",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "support": {
                "issues": "https://github.com/phar-io/manifest/issues",
                "source": "https://github.com/phar-io/manifest/tree/master"
            },
            "time": "2020-06-27T14:33:11+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "3.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "bae7c545bef187884426f042434e561ab1ddb182"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/bae7c545bef187884426f042434e561ab1ddb182",
                "reference": "bae7c545bef187884426f042434e561ab1ddb182",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "support": {
                "issues": "https://github.com/phar-io/version/issues",
                "source": "https://github.com/phar-io/version/tree/3.1.0"
            },
            "time": "2021-02-23T14:00:09+00:00"
        },
        {
            "name": "phpdocumentor/reflection-common",
            "version": "2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionCommon.git",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-2.x": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jaap van Otterdijk",
                    "email": "opensource@ijaap.nl"
                }
            ],
            "description": "Common reflection classes used by phpdocumentor to reflect the code structure",
            "homepage": "http://www.phpdoc.org",
            "keywords": [
                "FQSEN",
                "phpDocumentor",
                "phpdoc",
                "reflection",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionCommon/issues",
                "source": "https://github.com/phpDocumentor/ReflectionCommon/tree/2.x"
            },
            "time": "2020-06-27T09:03:43+00:00"
        },
        {
            "name": "phpdocumentor/reflection-docblock",
            "version": "5.2.2",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/069a785b2141f5bcf49f3e353548dc1cce6df556",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556",
                "shasum": ""
            },
            "require": {
                "ext-filter": "*",
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.2",
                "phpdocumentor/type-resolver": "^1.3",
                "webmozart/assert": "^1.9.1"
            },
            "require-dev": {
                "mockery/mockery": "~1.3.2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                },
                {
                    "name": "Jaap van Otterdijk",
                    "email": "account@ijaap.nl"
                }
            ],
            "description": "With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.",
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionDocBlock/issues",
                "source": "https://github.com/phpDocumentor/ReflectionDocBlock/tree/master"
            },
            "time": "2020-09-03T19:13:55+00:00"
        },
        {
            "name": "phpdocumentor/type-resolver",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/TypeResolver.git",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.0"
            },
            "require-dev": {
                "ext-tokenizer": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-1.x": "1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                }
            ],
            "description": "A PSR-5 based resolver of Class names, Types and Structural Element Names",
            "support": {
                "issues": "https://github.com/phpDocumentor/TypeResolver/issues",
                "source": "https://github.com/phpDocumentor/TypeResolver/tree/1.4.0"
            },
            "time": "2020-09-17T18:55:26+00:00"
        },
        {
            "name": "phpspec/prophecy",
            "version": "1.13.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpspec/prophecy.git",
                "reference": "be1996ed8adc35c3fd795488a653f4b518be70ea"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpspec/prophecy/zipball/be1996ed8adc35c3fd795488a653f4b518be70ea",
                "reference": "be1996ed8adc35c3fd795488a653f4b518be70ea",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.2",
                "php": "^7.2 || ~8.0, <8.1",
                "phpdocumentor/reflection-docblock": "^5.2",
                "sebastian/comparator": "^3.0 || ^4.0",
                "sebastian/recursion-context": "^3.0 || ^4.0"
            },
            "require-dev": {
                "phpspec/phpspec": "^6.0",
                "phpunit/phpunit": "^8.0 || ^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.11.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Prophecy\\": "src/Prophecy"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Konstantin Kudryashov",
                    "email": "ever.zet@gmail.com",
                    "homepage": "http://everzet.com"
                },
                {
                    "name": "Marcello Duarte",
                    "email": "marcello.duarte@gmail.com"
                }
            ],
            "description": "Highly opinionated mocking framework for PHP 5.3+",
            "homepage": "https://github.com/phpspec/prophecy",
            "keywords": [
                "Double",
                "Dummy",
                "fake",
                "mock",
                "spy",
                "stub"
            ],
            "support": {
                "issues": "https://github.com/phpspec/prophecy/issues",
                "source": "https://github.com/phpspec/prophecy/tree/1.13.0"
            },
            "time": "2021-03-17T13:42:18+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "9.2.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "f6293e1b30a2354e8428e004689671b83871edde"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/f6293e1b30a2354e8428e004689671b83871edde",
                "reference": "f6293e1b30a2354e8428e004689671b83871edde",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-xmlwriter": "*",
                "nikic/php-parser": "^4.10.2",
                "php": ">=7.3",
                "phpunit/php-file-iterator": "^3.0.3",
                "phpunit/php-text-template": "^2.0.2",
                "sebastian/code-unit-reverse-lookup": "^2.0.2",
                "sebastian/complexity": "^2.0",
                "sebastian/environment": "^5.1.2",
                "sebastian/lines-of-code": "^1.0.3",
                "sebastian/version": "^3.0.1",
                "theseer/tokenizer": "^1.2.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcov": "*",
                "ext-xdebug": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2021-03-28T07:26:59+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "3.0.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/aa4be8575f26070b100fccb67faabb28f21f66f8",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:57:25+00:00"
        },
        {
            "name": "phpunit/php-invoker",
            "version": "3.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-invoker.git",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "ext-pcntl": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcntl": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Invoke callables with a timeout",
            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
            "keywords": [
                "process"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
                "source": "https://github.com/sebastianbergmann/php-invoker/tree/3.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:58:55+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
                "source": "https://github.com/sebastianbergmann/php-text-template/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T05:33:50+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "5.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-timer/issues",
                "source": "https://github.com/sebastianbergmann/php-timer/tree/5.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:16:10+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "9.5.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "c73c6737305e779771147af66c96ca6a7ed8a741"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/c73c6737305e779771147af66c96ca6a7ed8a741",
                "reference": "c73c6737305e779771147af66c96ca6a7ed8a741",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.3.1",
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "ext-xmlwriter": "*",
                "myclabs/deep-copy": "^1.10.1",
                "phar-io/manifest": "^2.0.1",
                "phar-io/version": "^3.0.2",
                "php": ">=7.3",
                "phpspec/prophecy": "^1.12.1",
                "phpunit/php-code-coverage": "^9.2.3",
                "phpunit/php-file-iterator": "^3.0.5",
                "phpunit/php-invoker": "^3.1.1",
                "phpunit/php-text-template": "^2.0.3",
                "phpunit/php-timer": "^5.0.2",
                "sebastian/cli-parser": "^1.0.1",
                "sebastian/code-unit": "^1.0.6",
                "sebastian/comparator": "^4.0.5",
                "sebastian/diff": "^4.0.3",
                "sebastian/environment": "^5.1.3",
                "sebastian/exporter": "^4.0.3",
                "sebastian/global-state": "^5.0.1",
                "sebastian/object-enumerator": "^4.0.3",
                "sebastian/resource-operations": "^3.0.3",
                "sebastian/type": "^2.3",
                "sebastian/version": "^3.0.2"
            },
            "require-dev": {
                "ext-pdo": "*",
                "phpspec/prophecy-phpunit": "^2.0.1"
            },
            "suggest": {
                "ext-soap": "*",
                "ext-xdebug": "*"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.5-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ],
                "files": [
                    "src/Framework/Assert/Functions.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                "source": "https://github.com/sebastianbergmann/phpunit/tree/9.5.4"
            },
            "funding": [
                {
                    "url": "https://phpunit.de/donate.html",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2021-03-23T07:16:29+00:00"
        },
        {
            "name": "pimple/pimple",
            "version": "v3.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/silexphp/Pimple.git",
                "reference": "86406047271859ffc13424a048541f4531f53601"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/silexphp/Pimple/zipball/86406047271859ffc13424a048541f4531f53601",
                "reference": "86406047271859ffc13424a048541f4531f53601",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "psr/container": "^1.1"
            },
            "require-dev": {
                "symfony/phpunit-bridge": "^5.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.4.x-dev"
                }
            },
            "autoload": {
                "psr-0": {
                    "Pimple": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                }
            ],
            "description": "Pimple, a simple Dependency Injection Container",
            "homepage": "https://pimple.symfony.com",
            "keywords": [
                "container",
                "dependency injection"
            ],
            "support": {
                "source": "https://github.com/silexphp/Pimple/tree/v3.4.0"
            },
            "time": "2021-03-06T08:28:00+00:00"
        },
        {
            "name": "psr/container",
            "version": "1.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/container.git",
                "reference": "8622567409010282b7aeebe4bb841fe98b58dcaf"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/container/zipball/8622567409010282b7aeebe4bb841fe98b58dcaf",
                "reference": "8622567409010282b7aeebe4bb841fe98b58dcaf",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Psr\\Container\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common Container Interface (PHP FIG PSR-11)",
            "homepage": "https://github.com/php-fig/container",
            "keywords": [
                "PSR-11",
                "container",
                "container-interface",
                "container-interop",
                "psr"
            ],
            "support": {
                "issues": "https://github.com/php-fig/container/issues",
                "source": "https://github.com/php-fig/container/tree/1.1.1"
            },
            "time": "2021-03-05T17:36:06+00:00"
        },
        {
            "name": "psr/log",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/0f73288fd15629204f9d42b7055f72dacbe811fc",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "Psr/Log/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "support": {
                "source": "https://github.com/php-fig/log/tree/1.1.3"
            },
            "time": "2020-03-23T09:12:05+00:00"
        },
        {
            "name": "sebastian/cli-parser",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/cli-parser.git",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for parsing CLI options",
            "homepage": "https://github.com/sebastianbergmann/cli-parser",
            "support": {
                "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
                "source": "https://github.com/sebastianbergmann/cli-parser/tree/1.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:08:49+00:00"
        },
        {
            "name": "sebastian/code-unit",
            "version": "1.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit.git",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the PHP code units",
            "homepage": "https://github.com/sebastianbergmann/code-unit",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit/issues",
                "source": "https://github.com/sebastianbergmann/code-unit/tree/1.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:08:54+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:30:19+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/55f4261989e546dc112258c7a75935a81a7ce382",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/diff": "^4.0",
                "sebastian/exporter": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/comparator/issues",
                "source": "https://github.com/sebastianbergmann/comparator/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:49:45+00:00"
        },
        {
            "name": "sebastian/complexity",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/complexity.git",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/739b35e53379900cc9ac327b2147867b8b6efd88",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.7",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for calculating the complexity of PHP code units",
            "homepage": "https://github.com/sebastianbergmann/complexity",
            "support": {
                "issues": "https://github.com/sebastianbergmann/complexity/issues",
                "source": "https://github.com/sebastianbergmann/complexity/tree/2.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:52:27+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3",
                "symfony/process": "^4.2 || ^5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/diff/issues",
                "source": "https://github.com/sebastianbergmann/diff/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:10:38+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "5.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/388b6ced16caa751030f6a69e588299fa09200ac",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-posix": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "http://www.github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/environment/issues",
                "source": "https://github.com/sebastianbergmann/environment/tree/5.1.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:52:38+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "4.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-mbstring": "*",
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "http://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/exporter/issues",
                "source": "https://github.com/sebastianbergmann/exporter/tree/4.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:24:23+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "5.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/a90ccbddffa067b51f574dea6eb25d5680839455",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-dom": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-uopz": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "http://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/global-state/issues",
                "source": "https://github.com/sebastianbergmann/global-state/tree/5.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:55:19+00:00"
        },
        {
            "name": "sebastian/lines-of-code",
            "version": "1.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/lines-of-code.git",
                "reference": "c1c2e997aa3146983ed888ad08b15470a2e22ecc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/c1c2e997aa3146983ed888ad08b15470a2e22ecc",
                "reference": "c1c2e997aa3146983ed888ad08b15470a2e22ecc",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.6",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for counting the lines of code in PHP source code",
            "homepage": "https://github.com/sebastianbergmann/lines-of-code",
            "support": {
                "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/1.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-11-28T06:42:11+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:12:34+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
                "source": "https://github.com/sebastianbergmann/object-reflector/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:14:26+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/cd9d8cf3c5804de4341c283ed787f099f5506172",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "http://www.github.com/sebastianbergmann/recursion-context",
            "support": {
                "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
                "source": "https://github.com/sebastianbergmann/recursion-context/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:17:30+00:00"
        },
        {
            "name": "sebastian/resource-operations",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/resource-operations.git",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides a list of PHP built-in functions that operate on resources",
            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
            "support": {
                "issues": "https://github.com/sebastianbergmann/resource-operations/issues",
                "source": "https://github.com/sebastianbergmann/resource-operations/tree/3.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:45:17+00:00"
        },
        {
            "name": "sebastian/type",
            "version": "2.3.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/type.git",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.3-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the types of the PHP type system",
            "homepage": "https://github.com/sebastianbergmann/type",
            "support": {
                "issues": "https://github.com/sebastianbergmann/type/issues",
                "source": "https://github.com/sebastianbergmann/type/tree/2.3.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:18:59+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "c6c1022351a901512170118436c764e473f6de8c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c",
                "reference": "c6c1022351a901512170118436c764e473f6de8c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "support": {
                "issues": "https://github.com/sebastianbergmann/version/issues",
                "source": "https://github.com/sebastianbergmann/version/tree/3.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:39:44+00:00"
        },
        {
            "name": "seld/jsonlint",
            "version": "1.8.3",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/jsonlint.git",
                "reference": "9ad6ce79c342fbd44df10ea95511a1b24dee5b57"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/jsonlint/zipball/9ad6ce79c342fbd44df10ea95511a1b24dee5b57",
                "reference": "9ad6ce79c342fbd44df10ea95511a1b24dee5b57",
                "shasum": ""
            },
            "require": {
                "php": "^5.3 || ^7.0 || ^8.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0"
            },
            "bin": [
                "bin/jsonlint"
            ],
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Seld\\JsonLint\\": "src/Seld/JsonLint/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "http://seld.be"
                }
            ],
            "description": "JSON Linter",
            "keywords": [
                "json",
                "linter",
                "parser",
                "validator"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/jsonlint/issues",
                "source": "https://github.com/Seldaek/jsonlint/tree/1.8.3"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/seld/jsonlint",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-11T09:19:24+00:00"
        },
        {
            "name": "symfony/config",
            "version": "v5.2.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/config.git",
                "reference": "212d54675bf203ff8aef7d8cee8eecfb72f4a263"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/config/zipball/212d54675bf203ff8aef7d8cee8eecfb72f4a263",
                "reference": "212d54675bf203ff8aef7d8cee8eecfb72f4a263",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/deprecation-contracts": "^2.1",
                "symfony/filesystem": "^4.4|^5.0",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-php80": "^1.15"
            },
            "conflict": {
                "symfony/finder": "<4.4"
            },
            "require-dev": {
                "symfony/event-dispatcher": "^4.4|^5.0",
                "symfony/finder": "^4.4|^5.0",
                "symfony/messenger": "^4.4|^5.0",
                "symfony/service-contracts": "^1.1|^2",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "symfony/yaml": "To use the yaml reference dumper"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Config\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Helps you find, load, combine, autofill and validate configuration values of any kind",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/config/tree/v5.2.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-02-23T23:58:19+00:00"
        },
        {
            "name": "symfony/deprecation-contracts",
            "version": "v2.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/deprecation-contracts.git",
                "reference": "5f38c8804a9e97d23e0c8d63341088cd8a22d627"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/5f38c8804a9e97d23e0c8d63341088cd8a22d627",
                "reference": "5f38c8804a9e97d23e0c8d63341088cd8a22d627",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "2.4-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "files": [
                    "function.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "A generic function and convention to trigger deprecation notices",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/deprecation-contracts/tree/v2.4.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-03-23T23:28:01+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v5.2.6",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "8c86a82f51658188119e62cff0a050a12d09836f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/8c86a82f51658188119e62cff0a050a12d09836f",
                "reference": "8c86a82f51658188119e62cff0a050a12d09836f",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-ctype": "~1.8"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides basic utilities for the filesystem",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/filesystem/tree/v5.2.6"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-03-28T14:30:26+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v5.2.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "0d639a0943822626290d169965804f79400e6a04"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/0d639a0943822626290d169965804f79400e6a04",
                "reference": "0d639a0943822626290d169965804f79400e6a04",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Finds files and directories via an intuitive fluent interface",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/finder/tree/v5.2.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-02-15T18:55:04+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.22.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "c6c942b1ac76c82448322025e084cadc56048b4e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/c6c942b1ac76c82448322025e084cadc56048b4e",
                "reference": "c6c942b1ac76c82448322025e084cadc56048b4e",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.22.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-07T16:49:33+00:00"
        },
        {
            "name": "symfony/polyfill-php80",
            "version": "v1.22.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php80.git",
                "reference": "dc3063ba22c2a1fd2f45ed856374d79114998f91"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/dc3063ba22c2a1fd2f45ed856374d79114998f91",
                "reference": "dc3063ba22c2a1fd2f45ed856374d79114998f91",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.22-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Php80\\": ""
                },
                "files": [
                    "bootstrap.php"
                ],
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ion Bazan",
                    "email": "ion.bazan@gmail.com"
                },
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php80/tree/v1.22.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-07T16:49:33+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v5.2.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "313a38f09c77fbcdc1d223e57d368cea76a2fd2f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/313a38f09c77fbcdc1d223e57d368cea76a2fd2f",
                "reference": "313a38f09c77fbcdc1d223e57d368cea76a2fd2f",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-php80": "^1.15"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Executes commands in sub-processes",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/process/tree/v5.2.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-01-27T10:15:41+00:00"
        },
        {
            "name": "symfony/serializer",
            "version": "v5.2.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/serializer.git",
                "reference": "a285f474a72397ccbd384900abc968ffcb511dda"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/serializer/zipball/a285f474a72397ccbd384900abc968ffcb511dda",
                "reference": "a285f474a72397ccbd384900abc968ffcb511dda",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-php80": "^1.15"
            },
            "conflict": {
                "phpdocumentor/reflection-docblock": "<3.2.2",
                "phpdocumentor/type-resolver": "<1.4.0",
                "symfony/dependency-injection": "<4.4",
                "symfony/property-access": "<4.4",
                "symfony/property-info": "<4.4",
                "symfony/yaml": "<4.4"
            },
            "require-dev": {
                "doctrine/annotations": "^1.10.4",
                "doctrine/cache": "~1.0",
                "phpdocumentor/reflection-docblock": "^3.2|^4.0|^5.0",
                "symfony/cache": "^4.4|^5.0",
                "symfony/config": "^4.4|^5.0",
                "symfony/dependency-injection": "^4.4|^5.0",
                "symfony/error-handler": "^4.4|^5.0",
                "symfony/filesystem": "^4.4|^5.0",
                "symfony/form": "^4.4|^5.0",
                "symfony/http-foundation": "^4.4|^5.0",
                "symfony/http-kernel": "^4.4|^5.0",
                "symfony/mime": "^4.4|^5.0",
                "symfony/property-access": "^4.4.9|^5.0.9",
                "symfony/property-info": "^4.4|^5.0",
                "symfony/uid": "^5.1",
                "symfony/validator": "^4.4|^5.0",
                "symfony/var-exporter": "^4.4|^5.0",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "doctrine/annotations": "For using the annotation mapping. You will also need doctrine/cache.",
                "doctrine/cache": "For using the default cached annotation reader and metadata cache.",
                "psr/cache-implementation": "For using the metadata cache.",
                "symfony/config": "For using the XML mapping loader.",
                "symfony/mime": "For using a MIME type guesser within the DataUriNormalizer.",
                "symfony/property-access": "For using the ObjectNormalizer.",
                "symfony/property-info": "To deserialize relations.",
                "symfony/var-exporter": "For using the metadata compiler.",
                "symfony/yaml": "For using the default YAML mapping loader."
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Serializer\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Handles serializing and deserializing data structures, including object graphs, into array structures or other formats like XML and JSON.",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/serializer/tree/v5.2.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2021-03-02T12:14:02+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/75a63c33a8577608444246075ea0af0d052e452a",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "support": {
                "issues": "https://github.com/theseer/tokenizer/issues",
                "source": "https://github.com/theseer/tokenizer/tree/master"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2020-07-12T23:59:07+00:00"
        },
        {
            "name": "webmozart/assert",
            "version": "1.10.0",
            "source": {
                "type": "git",
                "url": "https://github.com/webmozarts/assert.git",
                "reference": "6964c76c7804814a842473e0c8fd15bab0f18e25"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/webmozarts/assert/zipball/6964c76c7804814a842473e0c8fd15bab0f18e25",
                "reference": "6964c76c7804814a842473e0c8fd15bab0f18e25",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0",
                "symfony/polyfill-ctype": "^1.8"
            },
            "conflict": {
                "phpstan/phpstan": "<0.12.20",
                "vimeo/psalm": "<4.6.1 || 4.6.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^8.5.13"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.10-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Webmozart\\Assert\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Assertions to validate method input/output with nice error messages.",
            "keywords": [
                "assert",
                "check",
                "validate"
            ],
            "support": {
                "issues": "https://github.com/webmozarts/assert/issues",
                "source": "https://github.com/webmozarts/assert/tree/1.10.0"
            },
            "time": "2021-03-09T10:59:23+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "keboola/coding-standard",
            "version": "11.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "d7000bd2373b3cb4616ec96169e56739ea65d328"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/d7000bd2373b3cb4616ec96169e56739ea65d328",
                "reference": "d7000bd2373b3cb4616ec96169e56739ea65d328",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "^4.8.6",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "support": {
                "issues": "https://github.com/keboola/phpcs-standard/issues",
                "source": "https://github.com/keboola/phpcs-standard/tree/11.0.0"
            },
            "time": "2021-04-09T11:29:16+00:00"
        },
        {
            "name": "phpstan/phpstan",
            "version": "0.12.84",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan.git",
                "reference": "9c43f15da8798c8f30a4b099e6a94530a558cfd5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan/zipball/9c43f15da8798c8f30a4b099e6a94530a558cfd5",
                "reference": "9c43f15da8798c8f30a4b099e6a94530a558cfd5",
                "shasum": ""
            },
            "require": {
                "php": "^7.1|^8.0"
            },
            "conflict": {
                "phpstan/phpstan-shim": "*"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.12-dev"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan - PHP Static Analysis Tool",
            "support": {
                "issues": "https://github.com/phpstan/phpstan/issues",
                "source": "https://github.com/phpstan/phpstan/tree/0.12.84"
            },
            "funding": [
                {
                    "url": "https://github.com/ondrejmirtes",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/phpstan",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpstan/phpstan",
                    "type": "tidelift"
                }
            ],
            "time": "2021-04-19T17:10:54+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "4.8.7",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "shasum": ""
            },
            "require": {
                "php": "^7.1",
                "squizlabs/php_codesniffer": "^3.4.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "1.0.0",
                "phing/phing": "2.16.1",
                "phpstan/phpstan": "0.9.2",
                "phpstan/phpstan-phpunit": "0.9.4",
                "phpstan/phpstan-strict-rules": "0.9",
                "phpunit/phpunit": "7.5.1"
            },
            "type": "phpcodesniffer-standard",
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "support": {
                "issues": "https://github.com/slevomat/coding-standard/issues",
                "source": "https://github.com/slevomat/coding-standard/tree/4.8.7"
            },
            "time": "2019-01-03T13:15:50+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.6.0",
            "source": {
                "type": "git",
                "url": "https://github.com/squizlabs/PHP_CodeSniffer.git",
                "reference": "ffced0d2c8fa8e6cdc4d695a743271fab6c38625"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/ffced0d2c8fa8e6cdc4d695a743271fab6c38625",
                "reference": "ffced0d2c8fa8e6cdc4d695a743271fab6c38625",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0"
            },
            "bin": [
                "bin/phpcs",
                "bin/phpcbf"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "lead"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "https://github.com/squizlabs/PHP_CodeSniffer",
            "keywords": [
                "phpcs",
                "standards"
            ],
            "support": {
                "issues": "https://github.com/squizlabs/PHP_CodeSniffer/issues",
                "source": "https://github.com/squizlabs/PHP_CodeSniffer",
                "wiki": "https://github.com/squizlabs/PHP_CodeSniffer/wiki"
            },
            "time": "2021-04-09T00:54:41+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": "^7.4",
        "ext-pdo": "*",
        "ext-json": "*",
        "ext-mbstring": "*"
    },
    "platform-dev": [],
    "plugin-api-version": "2.1.0"
}



================================================
FILE: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
FILE: docker-compose.yml
================================================
version: "2"
services:
  app:
    build: .
    image: keboola/ex-db-mssql
    command: ["./wait-for-it.sh", "mssql:1433", "-t", "30", "--", "./vendor/bin/phpunit"]
    tty: true
    stdin_open: true
    env_file:
      - ssh-keys.env
    environment:
      MSSQL_DB_HOST: mssql
      MSSQL_DB_PORT: 1433
      MSSQL_DB_USER: sa
      MSSQL_DB_PASSWORD:
      MSSQL_DB_DATABASE: test
    links:
      - sshproxy
      - mssql

  dev:
    image: keboola/ex-db-mssql
    volumes:
      - .:/code
    command: ["./wait-for-it.sh", "mssql:1433", "-t", "30", "--", "./vendor/bin/phpunit"]
    tty: true
    stdin_open: true
    env_file:
      - ssh-keys.env
    environment:
      MSSQL_DB_HOST: mssql
      MSSQL_DB_PORT: 1433
      MSSQL_DB_USER: sa
      MSSQL_DB_PASSWORD:
      MSSQL_DB_DATABASE: test
    links:
      - sshproxy
      - mssql

  mssql:
    image: rsmoorthy/mssql
    ports:
      - "1433:1433"

  sshproxy:
    build: ./tests/env/sshproxy
    volumes:
      - ./tests/env/sshproxy:/code
    working_dir: /code
    ports:
      - "2222:22"
    links:
      - mssql


================================================
FILE: Dockerfile
================================================
FROM php:7.4-cli-buster

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

# Xdebug
#RUN pecl install xdebug \
#  && docker-php-ext-enable xdebug
#COPY docker/xdebug/xdebug.ini.dist /usr/local/etc/php/conf.d/xdebug.ini

# Install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    locales \
    unzip \
    ssh \
    apt-transport-https \
    wget \
    libxml2-dev \
    gnupg2 \
    unixodbc-dev \
    libgss3

RUN curl -sS ftp://ftp.freetds.org/pub/freetds/stable/freetds-patched.tar.gz > freetds-patched.tar.gz
RUN tar xzvf freetds-patched.tar.gz
RUN mkdir /tmp/freetds && mv freetds-*/* /tmp/freetds/

RUN cd /tmp/freetds && \
    ./configure --enable-msdblib --prefix=/usr/local && \
    make -j$(nproc) && \
    make install && \
      docker-php-ext-install pdo_dblib && \
      sed -i '$ d' /etc/apt/sources.list

# MSSQL
ADD mssql/freetds.conf /etc/freetds.conf

RUN echo "memory_limit = -1" >> /usr/local/etc/php/php.ini


RUN rm -r /var/lib/apt/lists/* \
    && sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
    && locale-gen \
    && chmod +x /tmp/composer-install.sh \
    && /tmp/composer-install.sh

RUN docker-php-ext-configure intl \
    && docker-php-ext-install intl

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# PDO mssql
RUN pecl install pdo_sqlsrv sqlsrv \
    && docker-php-ext-enable sqlsrv pdo_sqlsrv \
    && docker-php-ext-install xml

# Set path
ENV PATH $PATH:/opt/mssql-tools/bin

# Fix SSL configuration to be compatible with older servers
RUN \
    # https://wiki.debian.org/ContinuousIntegration/TriagingTips/openssl-1.1.1
    sed -i 's/CipherString\s*=.*/CipherString = DEFAULT@SECLEVEL=1/g' /etc/ssl/openssl.cnf \
    # https://stackoverflow.com/questions/53058362/openssl-v1-1-1-ssl-choose-client-version-unsupported-protocol
    && sed -i 's/MinProtocol\s*=.*/MinProtocol = TLSv1/g' /etc/ssl/openssl.cnf

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/

# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD php ./src/run.php



================================================
FILE: phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>



================================================
FILE: phpstan.neon
================================================
parameters:
    checkMissingIterableValueType: false
    ignoreErrors:
        - '#Cannot call method fetch\(\) on PDOStatement\|false\.#'
        - '#Cannot call method execute\(\) on PDOStatement\|false\.#'
        - '#function get_class expects object, Throwable\|null given.#'
        - '#Unreachable statement - code above always terminates.#'



================================================
FILE: phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         bootstrap="vendor/autoload.php">

    <testsuites>
        <testsuite name="unit">
            <directory>tests/phpunit</directory>
            <exclude>tests/phpunit/PerformanceTest.php</exclude>
        </testsuite>
        <testsuite name="functional">
            <directory>tests/functional</directory>
        </testsuite>
        <testsuite name="perf">
            <file>tests/phpunit/PerformanceTest.php</file>
        </testsuite>
    </testsuites>
</phpunit>



================================================
FILE: ssh-keys.env
================================================
MSSQL_DB_SSH_KEY_PRIVATE="-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAtrRqT7d6qyPxuEDiXj+5ANooQvVP3GONhjWbnnayqHDRhkAY\nL4xjUT9ZAnsV3miduSlLYvrRWz41a3besYagC4sFLqUmBbrGgFRA3MJeiizBgDh1\ng9F+4Xa2i98OAE8jUwb6MMnPWb7KJZTck1Kg1sTdlEk35PPV3fktp6AH6AlCXeHz\nBJgXgAKpWE2oxxikimHERqJMXIu3cml6BxEILHdIImViGQEzVJFk1d+m05xozMc+\nKSuixzYJUETTuBqcUCOQZonutIFXDiEAIZm606vW8HKC6ukhgTlDv1a+mZy3CPIe\nFudB0jVHlyrRTHjTIMw4EvMeDsNFyxKY7o0RoQIDAQABAoIBAHSvDoJw3K/2Gcch\n8TBeJAouSa5Ruzo2fkkrbYKrrfgzbSz/PDMJxtg5y9/wugu75pc9jz7cjt5mAXnr\nhdf88bPNina61GiuW13T8UTMAdLfOIlqBWs1XYIi7fywbOG3qQi6mQiVqo5XcgTE\naIbSK5ReUGEGzeKz8297VzQJ2WLPiNhv4vz2dc0GRF/m7EnBLMm3ZF3xi87o6DE0\nKhJdjnk4oSl+PWH4qD/QDBsLiswL/RyLxcITBQlxRCJGeflC8vWoFgFWLA3EgGUc\nAVCPwHj9sjGKg8rurG3RyOAEGFxsmXr00K0e7kxxj9g4o/pdaFEE7ukL302gNZmG\n3QofiW0CgYEA84rqFxC39r6KkUfkNZ4mfjTne77r3ye8UBTSPFmPFbnjnu7El25A\n9+xuDyLoDqIglidXkGR9MsP58znPeYQ3j9uYDRIIjOVWiw0f5Zxmi2HsTGp/jABV\n03WWQDq5H+c1htyp4b5sxYHSjJja/so3GX9z4UHsJ6kUIcniqjK9UnMCgYEAwAza\n4ifRpuisrhKhXUihw+qTLreRRwHCOoBfT7F8SljYPDONX30kGTnJVtef58HhP9aW\nhZpmgJ8wCibCyKv4QkHSX393MJjxOpDF26WXfLndd6Dc4edl7nly0Agixtj6qpHv\nJaw1J3c0/yfHGJopyBMQnoM1zKTYN3l/y+OLwpsCgYAkku4IvLgD1CWXH8bDzpZV\nSbihutBNWPhMxnO0IHb+ekYWriDT5PjYwqbcmw9iczKVmh7qTk0G/KtivYHM6/A0\nKHQzMkwabK6Mf1IU92Hm+LO13iB9c+dvtC72Qlte0SgWsrjIcAKBvrdR6fqpXNDd\ngWhzoaTHZ/rgACOMD8aixQKBgDXdJSLbAi0rAwuLhCCSt3QofYFT0PY2YxBfYtwK\nLo73niY8W0FV6uL8VyD5NwscUJ3EBNGR/X/Dpgii2GzJ9sY2iddo+7fwnW/MnQG+\nzt8Xjir4PhtJ+EfLXk1EiuR0hNGEPqu1Qe9Auud5c5jN3DwWRMoAiP1Nmqrsc9Bu\nkItTAoGAMiE+r2tKFj2MMsg3YSHNTdn8HnYzc9itBIJxbM4Nz/LIZRCrDHd9tAQx\nxUG0xkqnIeYYQxUeVoUik1D8/SiBxkPOSS/ApZbe1riEV7zCUNpsL61d7WFf+wXx\nYdFA7sjJoFhItY1yEx90q8IBVAcBU4hRE7i/27kfnCImVc3mK1A=\n-----END RSA PRIVATE KEY-----"
MSSQL_DB_SSH_KEY_PUBLIC="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC2tGpPt3qrI/G4QOJeP7kA2ihC9U/cY42GNZuedrKocNGGQBgvjGNRP1kCexXeaJ25KUti+tFbPjVrdt6xhqALiwUupSYFusaAVEDcwl6KLMGAOHWD0X7hdraL3w4ATyNTBvowyc9ZvsollNyTUqDWxN2USTfk89Xd+S2noAfoCUJd4fMEmBeAAqlYTajHGKSKYcRGokxci7dyaXoHEQgsd0giZWIZATNUkWTV36bTnGjMxz4pK6LHNglQRNO4GpxQI5Bmie60gVcOIQAhmbrTq9bwcoLq6SGBOUO/Vr6ZnLcI8h4W50HSNUeXKtFMeNMgzDgS8x4Ow0XLEpjujRGh miroslavcillik@Miroslavs-MacBook-Air.local"


================================================
FILE: wait-for-it.sh
================================================
#!/usr/bin/env bash
#   Use this script to test if a given TCP host/port are available
#   https://github.com/vishnubob/wait-for-it

cmdname=$(basename $0)

echoerr() { if [[ $QUIET -ne 1 ]]; then echo "$@" 1>&2; fi }

usage()
{
    cat << USAGE >&2
Usage:
    $cmdname host:port [-s] [-t timeout] [-- command args]
    -h HOST | --host=HOST       Host or IP under test
    -p PORT | --port=PORT       TCP port under test
                                Alternatively, you specify the host and port as host:port
    -s | --strict               Only execute subcommand if the test succeeds
    -q | --quiet                Don't output any status messages
    -t TIMEOUT | --timeout=TIMEOUT
                                Timeout in seconds, zero for no timeout
    -- COMMAND ARGS             Execute command with args after the test finishes
USAGE
    exit 1
}

wait_for()
{
    if [[ $TIMEOUT -gt 0 ]]; then
        echoerr "$cmdname: waiting $TIMEOUT seconds for $HOST:$PORT"
    else
        echoerr "$cmdname: waiting for $HOST:$PORT without a timeout"
    fi
    start_ts=$(date +%s)
    while :
    do
        if [[ $ISBUSY -eq 1 ]]; then
            nc -z $HOST $PORT
            result=$?
        else
            (echo > /dev/tcp/$HOST/$PORT) >/dev/null 2>&1
            result=$?
        fi
        if [[ $result -eq 0 ]]; then
            end_ts=$(date +%s)
            echoerr "$cmdname: $HOST:$PORT is available after $((end_ts - start_ts)) seconds"
            break
        fi
        sleep 1
    done
    return $result
}

wait_for_wrapper()
{
    # In order to support SIGINT during timeout: http://unix.stackexchange.com/a/57692
    if [[ $QUIET -eq 1 ]]; then
        timeout $BUSYTIMEFLAG $TIMEOUT $0 --quiet --child --host=$HOST --port=$PORT --timeout=$TIMEOUT &
    else
        timeout $BUSYTIMEFLAG $TIMEOUT $0 --child --host=$HOST --port=$PORT --timeout=$TIMEOUT &
    fi
    PID=$!
    trap "kill -INT -$PID" INT
    wait $PID
    RESULT=$?
    if [[ $RESULT -ne 0 ]]; then
        echoerr "$cmdname: timeout occurred after waiting $TIMEOUT seconds for $HOST:$PORT"
    fi
    return $RESULT
}

# process arguments
while [[ $# -gt 0 ]]
do
    case "$1" in
        *:* )
        hostport=(${1//:/ })
        HOST=${hostport[0]}
        PORT=${hostport[1]}
        shift 1
        ;;
        --child)
        CHILD=1
        shift 1
        ;;
        -q | --quiet)
        QUIET=1
        shift 1
        ;;
        -s | --strict)
        STRICT=1
        shift 1
        ;;
        -h)
        HOST="$2"
        if [[ $HOST == "" ]]; then break; fi
        shift 2
        ;;
        --host=*)
        HOST="${1#*=}"
        shift 1
        ;;
        -p)
        PORT="$2"
        if [[ $PORT == "" ]]; then break; fi
        shift 2
        ;;
        --port=*)
        PORT="${1#*=}"
        shift 1
        ;;
        -t)
        TIMEOUT="$2"
        if [[ $TIMEOUT == "" ]]; then break; fi
        shift 2
        ;;
        --timeout=*)
        TIMEOUT="${1#*=}"
        shift 1
        ;;
        --)
        shift
        CLI=("$@")
        break
        ;;
        --help)
        usage
        ;;
        *)
        echoerr "Unknown argument: $1"
        usage
        ;;
    esac
done

if [[ "$HOST" == "" || "$PORT" == "" ]]; then
    echoerr "Error: you need to provide a host and port to test."
    usage
fi

TIMEOUT=${TIMEOUT:-15}
STRICT=${STRICT:-0}
CHILD=${CHILD:-0}
QUIET=${QUIET:-0}

# check to see if timeout is from busybox?
# check to see if timeout is from busybox?
TIMEOUT_PATH=$(realpath $(which timeout))
if [[ $TIMEOUT_PATH =~ "busybox" ]]; then
        ISBUSY=1
        BUSYTIMEFLAG="-t"
else
        ISBUSY=0
        BUSYTIMEFLAG=""
fi

if [[ $CHILD -gt 0 ]]; then
    wait_for
    RESULT=$?
    exit $RESULT
else
    if [[ $TIMEOUT -gt 0 ]]; then
        wait_for_wrapper
        RESULT=$?
    else
        wait_for
        RESULT=$?
    fi
fi

if [[ $CLI != "" ]]; then
    if [[ $RESULT -ne 0 && $STRICT -eq 1 ]]; then
        echoerr "$cmdname: strict mode, refusing to execute subprocess"
        exit $RESULT
    fi
    exec "${CLI[@]}"
else
    exit $RESULT
fi



================================================
FILE: component_config/component_long_description.md
================================================
MSSQL long desc


================================================
FILE: component_config/component_short_description.md
================================================
MSSQL desc


================================================
FILE: component_config/configRowSchema.json
================================================
{}


================================================
FILE: component_config/configSchema.json
================================================
{}


================================================
FILE: component_config/configuration_description.md
================================================
Testing configuration description.


================================================
FILE: component_config/documentationUrl.md
================================================
[Empty file]


================================================
FILE: component_config/licenseUrl.md
================================================
[Empty file]


================================================
FILE: component_config/logger
================================================
gelf


================================================
FILE: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
FILE: component_config/sourceCodeUrl.md
================================================
[Empty file]


================================================
FILE: component_config/sample-config/config.json
================================================
{
    "parameters":   {
        "db": {
            "driver": "mssql",
            "host": "000.000.000.0000",
            "port": "1433",
            "database": "test",
            "user": "sa",
            "#password": ""
        },
        "tables": [
            {
                "name": "employees",
                "query": "SELECT * FROM employees",
                "outputTable": "in.c-main.employees",
                "incremental": false,
                "enabled": true,
                "primaryKey": null
            }
        ]
    },
    "image_parameters": []
}


================================================
FILE: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
FILE: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
FILE: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
FILE: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
FILE: docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT



================================================
FILE: docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1



================================================
FILE: docker/mssql-ssl/Dockerfile
================================================
FROM mcr.microsoft.com/mssql/server:2019-latest

USER root

COPY tests/ssl-certs/mssql.crt /etc/ssl/certs/mssql.crt
COPY tests/ssl-certs/mssql.key /etc/ssl/private/mssql.key

RUN chmod 600 /etc/ssl/certs/mssql.crt /etc/ssl/private/mssql.key

RUN /opt/mssql/bin/mssql-conf set network.tlscert /etc/ssl/certs/mssql.crt \
      && /opt/mssql/bin/mssql-conf set network.tlskey /etc/ssl/private/mssql.key \
      && /opt/mssql/bin/mssql-conf set network.tlsprotocols 1.2 \
      && /opt/mssql/bin/mssql-conf set network.forceencryption 1



================================================
FILE: docker/mssql-ssl-invalid-cn/Dockerfile
================================================
FROM mcr.microsoft.com/mssql/server:2019-latest

USER root

COPY tests/ssl-certs/mssql-invalidCn.crt /etc/ssl/certs/mssql.crt
COPY tests/ssl-certs/mssql-invalidCn.key /etc/ssl/private/mssql.key

RUN chmod 600 /etc/ssl/certs/mssql.crt /etc/ssl/private/mssql.key

RUN /opt/mssql/bin/mssql-conf set network.tlscert /etc/ssl/certs/mssql.crt \
      && /opt/mssql/bin/mssql-conf set network.tlskey /etc/ssl/private/mssql.key \
      && /opt/mssql/bin/mssql-conf set network.tlsprotocols 1.2 \
      && /opt/mssql/bin/mssql-conf set network.forceencryption 1



================================================
FILE: docker/xdebug/xdebug.ini.dist
================================================
xdebug.start_with_request = yes
xdebug.client_host = host.docker.internal
xdebug.mode = debug
xdebug.discover_client_host = 1
; uncomment in case of problems - will create xdebug log inside your project
;xdebug.log=/var/www/html/docker/xdebug/xdebug.log


================================================
FILE: mssql/freetds.conf
================================================
[global]
	# TDS protocol version
	tds version = 8.0

	# Whether to write a TDSDUMP file for diagnostic purposes
	# (setting this to /tmp is insecure on a multi-user system)
;	dump file = /tmp/freetds.log
;	debug flags = 0xffff

	# Command and connection timeouts
;	timeout = 10
;	connect timeout = 10

	# If you get out-of-memory errors, it may mean that your client
	# is trying to allocate a huge buffer for a TEXT field.
	# Try setting 'text size' to a more reasonable limit
	text size = 64512

	client charset = UTF-8


================================================
FILE: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
FILE: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
FILE: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
FILE: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
FILE: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
FILE: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi


================================================
FILE: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"


================================================
FILE: src/MSSQLApplication.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor;

use Keboola\DbExtractor\Configuration\MssqlExportConfig;
use Keboola\DbExtractor\Configuration\MssqlTableNodesDecorator;
use Keboola\DbExtractor\Configuration\NodeDefinition\MssqlSslNode;
use Keboola\DbExtractorConfig\Config;
use Keboola\DbExtractorConfig\Configuration\ActionConfigRowDefinition;
use Keboola\DbExtractorConfig\Configuration\ConfigDefinition;
use Keboola\DbExtractorConfig\Configuration\ConfigRowDefinition;
use Keboola\DbExtractorConfig\Configuration\ValueObject\ExportConfig;
use Psr\Log\LoggerInterface;

class MSSQLApplication extends Application
{
    public function __construct(array $config, LoggerInterface $logger, array $state, string $dataDir)
    {
        $config['parameters']['data_dir'] = $dataDir;
        $config['parameters']['extractor_class'] = 'MSSQL';

        parent::__construct($config, $logger, $state);
    }

    protected function buildConfig(array $config): void
    {
        if ($this->isRowConfiguration($config)) {
            if ($this['action'] === 'run') {
                $this->config = new Config(
                    $config,
                    new ConfigRowDefinition(
                        null,
                        null,
                        new MssqlSslNode(),
                        new MssqlTableNodesDecorator()
                    )
                );
            } else {
                $this->config = new Config(
                    $config,
                    new ActionConfigRowDefinition(null, null, new MssqlSslNode())
                );
            }
        } else {
            $this->config = new Config(
                $config,
                new ConfigDefinition(
                    null,
                    null,
                    new MssqlSslNode(),
                    new MssqlTableNodesDecorator()
                )
            );
        }
    }

    protected function createExportConfig(array $data): ExportConfig
    {
        return MssqlExportConfig::fromArray($data);
    }
}



================================================
FILE: src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\Exception\UserException;
use Keboola\Component\Logger;
use Keboola\Component\JsonHelper;
use Keboola\CommonExceptions\UserExceptionInterface;
use Keboola\DbExtractor\MSSQLApplication;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
$logger->setupAsyncActionLogging();

try {
    $dataFolder = getenv('KBC_DATADIR') === false ? '/data/' : (string) getenv('KBC_DATADIR');
    if (file_exists($dataFolder . '/config.json')) {
        $config = JsonHelper::readFile($dataFolder . '/config.json');
    } else {
        throw new UserException('Configuration file not found.');
    }

    // get the state
    $inputStateFile = $dataFolder . '/in/state.json';
    if (file_exists($inputStateFile)) {
        $inputState = JsonHelper::readFile($inputStateFile);
    } else {
        $inputState = [];
    }

    $app = new MSSQLApplication($config, $logger, $inputState, $dataFolder);
    $result = $app->run();

    if ($app['action'] !== 'run') {
        // Print sync action result
        echo JsonHelper::encode($result);
    } elseif (!empty($result['state'])) {
        // Write state if present
        $outputStateFile = $dataFolder . '/out/state.json';
        JsonHelper::writeFile($outputStateFile, $result['state']);
    }
    $logger->log('info', 'Extractor finished successfully.');
    exit(0);
} catch (UserExceptionInterface $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (\Throwable $e) {
    $logger->critical(
        get_class($e) . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => $e->getPrevious() ? get_class($e->getPrevious()) : '',
        ]
    );
    exit(2);
}



================================================
FILE: src/Configuration/MssqlExportConfig.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Configuration;

use Keboola\DbExtractorConfig\Configuration\ValueObject\ExportConfig;
use Keboola\DbExtractorConfig\Configuration\ValueObject\IncrementalFetchingConfig;
use Keboola\DbExtractorConfig\Configuration\ValueObject\InputTable;

class MssqlExportConfig extends ExportConfig
{
    private bool $noLock;

    private bool $disableBcp;

    private bool $disableFallback;

    private int $maxTriesBcp;

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null,
            $data['name'] ?? null,
            $data['query'],
            empty($data['query']) ? InputTable::fromArray($data) : null,
            $data['incremental'] ?? false,
            empty($data['query']) ? IncrementalFetchingConfig::fromArray($data) : null,
            $data['columns'],
            $data['outputTable'],
            $data['primaryKey'],
            $data['retries'],
            // Added nodes
            $data['nolock'] ?? false,
            $data['disableBcp'] ?? false,
            $data['disableFallback'] ?? false,
            $data['maxTriesBcp'] ?? 1
        );
    }

    public function __construct(
        ?int $configId,
        ?string $configName,
        ?string $query,
        ?InputTable $table,
        bool $incrementalLoading,
        ?IncrementalFetchingConfig $incrementalFetchingConfig,
        array $columns,
        string $outputTable,
        array $primaryKey,
        int $maxRetries,
        bool $noLock,
        bool $disableBcp,
        bool $disableFallback,
        int $maxTriesBcp
    ) {
        parent::__construct(
            $configId,
            $configName,
            $query,
            $table,
            $incrementalLoading,
            $incrementalFetchingConfig,
            $columns,
            $outputTable,
            $primaryKey,
            $maxRetries
        );
        $this->noLock = $noLock;
        $this->disableBcp = $disableBcp;
        $this->disableFallback = $disableFallback;
        $this->maxTriesBcp = $maxTriesBcp;
    }

    public function getNoLock(): bool
    {
        return $this->noLock;
    }

    public function isBcpDisabled(): bool
    {
        return $this->disableBcp;
    }

    public function isFallbackDisabled(): bool
    {
        return $this->disableFallback;
    }

    public function getMaxTriesBcp(): int
    {
        return $this->maxTriesBcp;
    }
}



================================================
FILE: src/Configuration/MssqlTableNodesDecorator.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Configuration;

use Keboola\DbExtractorConfig\Configuration\NodeDefinition\TableNodesDecorator;
use Symfony\Component\Config\Definition\Builder\NodeBuilder;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class MssqlTableNodesDecorator extends TableNodesDecorator
{
    public function validate(array $v): array
    {
        $v = parent::validate($v);
        $disableBcp = $v['disableBcp'] ?? false;
        $disableFallback = $v['disableFallback']  ?? false;

        if ($disableBcp && $disableFallback) {
            throw new InvalidConfigurationException('Can\'t disable both BCP and fallback to PDO');
        }

        return $v;
    }

    public function addNodes(NodeBuilder $builder): void
    {
        parent::addNodes($builder);
        $this->addAdvancedModeNode($builder);
        $this->addNoLockNode($builder);
        $this->addDisableBcpNode($builder);
        $this->addDisableFallbackNode($builder);
        $this->addMaxTriesBcpNode($builder);
    }

    protected function addAdvancedModeNode(NodeBuilder $builder): void
    {
        //Backwards compatibility with old configurations. Not used
        $builder->booleanNode('advancedMode')->end();
    }

    protected function addNoLockNode(NodeBuilder $builder): void
    {
        $builder->booleanNode('nolock')->defaultValue(false);
    }

    protected function addDisableBcpNode(NodeBuilder $builder): void
    {
        $builder->booleanNode('disableBcp')->defaultFalse();
    }

    protected function addDisableFallbackNode(NodeBuilder $builder): void
    {
        $builder->booleanNode('disableFallback')->defaultFalse();
    }

    protected function addMaxTriesBcpNode(NodeBuilder $builder): void
    {
        $builder->integerNode('maxTriesBcp')->defaultValue(1);
    }
}



================================================
FILE: src/Configuration/NodeDefinition/MssqlSslNode.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Configuration\NodeDefinition;

use Keboola\DbExtractorConfig\Configuration\NodeDefinition\SslNode;
use Symfony\Component\Config\Definition\Builder\NodeBuilder;

class MssqlSslNode extends SslNode
{
    protected function addCertAndKeyNode(NodeBuilder $nodeBuilder): void
    {
        // not supported
    }

    protected function addCipherNode(NodeBuilder $nodeBuilder): void
    {
        // not supported
    }
}



================================================
FILE: src/Exception/BcpAdapterException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Exception;

class BcpAdapterException extends ApplicationException
{

}



================================================
FILE: src/Exception/BcpAdapterSkippedException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Exception;

use Keboola\DbExtractor\Adapter\Exception\AdapterSkippedException;

class BcpAdapterSkippedException extends UserException implements AdapterSkippedException
{

}



================================================
FILE: src/Exception/PdoAdapterSkippedException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Exception;

use Keboola\DbExtractor\Adapter\Exception\AdapterSkippedException;

class PdoAdapterSkippedException extends UserException implements AdapterSkippedException
{

}



================================================
FILE: src/Extractor/MSSQL.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Extractor;

use Keboola\DbExtractor\Adapter\ExportAdapter;
use Keboola\DbExtractor\Adapter\FallbackExportAdapter;
use Keboola\DbExtractor\Adapter\Metadata\MetadataProvider;
use Keboola\DbExtractor\Adapter\ResultWriter\DefaultResultWriter;
use Keboola\DbExtractor\Extractor\Adapters\BcpExportAdapter;
use Keboola\DbExtractor\Manifest\DefaultManifestGenerator;
use Keboola\DbExtractor\Manifest\ManifestGenerator;
use Keboola\DbExtractor\Metadata\MssqlMetadataProvider;
use Keboola\DbExtractorConfig\Configuration\ValueObject\DatabaseConfig;
use Keboola\DbExtractor\TableResultFormat\Exception\ColumnNotFoundException;
use Keboola\DbExtractor\Metadata\MssqlManifestSerializer;
use Keboola\DbExtractorConfig\Configuration\ValueObject\ExportConfig;
use Keboola\DbExtractor\Extractor\Adapters\MSSQLPdoExportAdapter;
use Symfony\Component\Process\Process;

class MSSQL extends BaseExtractor
{
    protected MetadataProvider $metadataProvider;

    private MSSQLPdoConnection $connection;

    private ?MSSQLQueryFactory $queryFactory = null;

    public function createMetadataProvider(): MssqlMetadataProvider
    {
        return new MssqlMetadataProvider($this->connection);
    }

    protected function createManifestGenerator(): ManifestGenerator
    {
        return new DefaultManifestGenerator(
            $this->getMetadataProvider(),
            new MssqlManifestSerializer()
        );
    }

    public function getQueryFactory(): MSSQLQueryFactory
    {
        if (!$this->queryFactory) {
            $this->queryFactory = new MSSQLQueryFactory(
                $this->state,
                $this->createMetadataProvider()
            );
        }
        return $this->queryFactory;
    }

    protected function createExportAdapter(): ExportAdapter
    {
        $adapters = [];

        $adapters[] = new BcpExportAdapter(
            $this->logger,
            $this->connection,
            $this->createMetadataProvider(),
            $this->getDatabaseConfig(),
            $this->getQueryFactory()
        );

        $adapters[] = new MSSQLPdoExportAdapter(
            $this->logger,
            $this->connection,
            $this->getQueryFactory(),
            new DefaultResultWriter($this->state),
            $this->dataDir,
            $this->state
        );

        return new FallbackExportAdapter($this->logger, $adapters);
    }

    public function createConnection(DatabaseConfig $databaseConfig): void
    {
        $this->saveSslCertificate($databaseConfig);
        $this->connection = new MSSQLPdoConnection($this->logger, $databaseConfig);
    }

    public function testConnection(): void
    {
        $this->connection->testConnection();
    }

    public function getMaxOfIncrementalFetchingColumn(ExportConfig $exportConfig): ?string
    {
        $result = $this->connection->query(sprintf(
            $this->getQueryFactory()->getIncrementalFetchingType() === MssqlDataType::INCREMENT_TYPE_BINARY ?
                'SELECT CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), MAX(%s)), 1) %s FROM %s.%s' :
                'SELECT MAX(%s) %s FROM %s.%s',
            $this->connection->quoteIdentifier($exportConfig->getIncrementalFetchingColumn()),
            $this->connection->quoteIdentifier($exportConfig->getIncrementalFetchingColumn()),
            $this->connection->quoteIdentifier($exportConfig->getTable()->getSchema()),
            $this->connection->quoteIdentifier($exportConfig->getTable()->getName())
        ), $exportConfig->getMaxRetries())->fetchAll();

        return count($result) > 0 ? $result[0][$exportConfig->getIncrementalFetchingColumn()] : null;
    }

    public function validateIncrementalFetching(ExportConfig $exportConfig): void
    {
        try {
            $column = $this->createMetadataProvider()
               ->getTable($exportConfig->getTable())
               ->getColumns()
               ->getByName($exportConfig->getIncrementalFetchingColumn());
        } catch (ColumnNotFoundException $e) {
            throw new ColumnNotFoundException(sprintf(
                'Column "%s" specified for incremental fetching was not found.',
                $exportConfig->getIncrementalFetchingColumn(),
            ), 0, $e);
        }

        $this
            ->getQueryFactory()
            ->setIncrementalFetchingType(
                MssqlDataType::getIncrementalFetchingType($column->getName(), $column->getType())
            )
        ;
    }

    private function saveSslCertificate(DatabaseConfig $databaseConfig): void
    {
        if ($databaseConfig->hasSSLConnection() && $databaseConfig->getSslConnectionConfig()->hasCa()) {
            file_put_contents(
                '/usr/local/share/ca-certificates/mssql.crt',
                $databaseConfig->getSslConnectionConfig()->getCa()
            );
            Process::fromShellCommandline('update-ca-certificates')->mustRun();
        }
    }
}



================================================
FILE: src/Extractor/MssqlDataType.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Extractor;

use Keboola\Datatype\Definition\GenericStorage;
use Keboola\DbExtractor\Exception\UserException;

class MssqlDataType extends GenericStorage
{
    public const INCREMENT_TYPE_BINARY = 'binary';
    public const INCREMENT_TYPE_DATETIME = 'datetime';
    public const INCREMENT_TYPE_NUMERIC = 'numeric';
    public const INCREMENT_TYPE_QUOTABLE = 'quotable';

    public const DATATYPE_KEYS = ['type', 'length', 'nullable', 'default', 'format'];

    public const DATE_TYPES = ['date'];

    public const TIMESTAMP_TYPES = [
        'datetime', 'datetime2', 'smalldatetime', 'datetimeoffset',
    ];

    public const FLOATING_POINT_TYPES = [
        'real', 'float',
    ];

    public const BOOLEAN_TYPES = ['bit'];

    public const INTEGER_TYPES = [
        'integer', 'int', 'smallint', 'tinyint', 'bigint',
    ];

    public const FIXED_NUMERIC_TYPES = [
        'numeric', 'decimal', 'money', 'smallmoney',
    ];

    public static function getNumericTypes(): array
    {
        return array_merge(
            MssqlDataType::INTEGER_TYPES,
            MssqlDataType::FLOATING_POINT_TYPES,
            MssqlDataType::FIXED_NUMERIC_TYPES
        );
    }

    public static function getIncrementalFetchingType(string $columnName, string $dataType): string
    {
        if (in_array($dataType, MssqlDataType::getNumericTypes())) {
            return self::INCREMENT_TYPE_NUMERIC;
        }
        if ($dataType === 'timestamp') {
            return self::INCREMENT_TYPE_BINARY;
        }
        if ($dataType === 'smalldatetime') {
            return self::INCREMENT_TYPE_QUOTABLE;
        }
        if (in_array($dataType, MssqlDataType::TIMESTAMP_TYPES)) {
            return self::INCREMENT_TYPE_DATETIME;
        }
        throw new UserException(
            sprintf(
                'Column "%s" specified for incremental fetching is not numeric or datetime.',
                $columnName
            )
        );
    }

    public function getBasetype(): string
    {
        $type = strtolower($this->type);
        $baseType = 'STRING';
        if (in_array($type, self::DATE_TYPES)) {
            $baseType = 'DATE';
        }
        if (in_array($type, self::TIMESTAMP_TYPES)) {
            $baseType = 'TIMESTAMP';
        }
        if (in_array($type, self::INTEGER_TYPES)) {
            $baseType = 'INTEGER';
        }
        if (in_array($type, self::FIXED_NUMERIC_TYPES)) {
            $baseType = 'NUMERIC';
        }
        if (in_array($type, self::FLOATING_POINT_TYPES)) {
            $baseType = 'FLOAT';
        }
        if (in_array($type, self::BOOLEAN_TYPES)) {
            $baseType = 'BOOLEAN';
        }
        return $baseType;
    }
}



================================================
FILE: src/Extractor/MSSQLPdoConnection.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Extractor;

use Keboola\DbExtractor\Adapter\Exception\DeadConnectionException;
use Keboola\DbExtractor\Adapter\PDO\PdoConnection;
use Keboola\DbExtractor\Adapter\PDO\PdoQueryResult;
use Keboola\DbExtractor\Adapter\ValueObject\QueryResult;
use Keboola\DbExtractorConfig\Configuration\ValueObject\DatabaseConfig;
use PDO;
use PDOStatement;
use Psr\Log\LoggerInterface;
use Throwable;
use Keboola\DbExtractor\DbRetryProxy;
use Keboola\DbExtractor\Exception\UserException;
use \PDOException;

class MSSQLPdoConnection extends PdoConnection
{
    private DatabaseConfig $databaseConfig;

    private ?int $serverVersion = null;

    public function __construct(
        LoggerInterface $logger,
        DatabaseConfig $databaseConfig,
        int $connectMaxRetries = self::CONNECT_DEFAULT_MAX_RETRIES
    ) {
        $this->logger = $logger;
        $this->databaseConfig = $databaseConfig;

        $this->connectMaxRetries = max($connectMaxRetries, 1);
        $this->connectWithRetry();
    }

    public function testConnection(): void
    {
        $this->pdo->query('SELECT GETDATE() AS CurrentDateTime')->execute();
    }

    public function quoteIdentifier(string $str): string
    {
        return "[{$str}]";
    }

    public function prepare(string $statement, array $driver_options = []): PDOStatement
    {
        return $this->pdo->prepare($statement, $driver_options);
    }

    public function getServerVersion(): int
    {
        if (!$this->serverVersion) {
            $this->serverVersion = $this->fetchServerVersion();
        }
        return $this->serverVersion;
    }

    private function fetchServerVersion(): int
    {
        // Get the MSSQL Server version (note, 2008 is version 10.*)
        $res = $this->pdo->query("SELECT SERVERPROPERTY('ProductVersion') AS version;");

        $versionResult = $res->fetch(PDO::FETCH_ASSOC);
        if (!isset($versionResult['version'])) {
            throw new UserException('Unable to get SQL Server Version Information');
        }

        $versionString = $versionResult['version'];
        $versionParts = explode('.', $versionString);
        $this->logger->info(sprintf('Found database server version: %s', $versionString));

        return (int) $versionParts[0];
    }

    public function tryReconnect(): void
    {
        try {
            $this->isAlive();
        } catch (DeadConnectionException $e) {
            $reconnectionRetryProxy = MssqlRetryFactory::createProxy($this->logger, DbRetryProxy::DEFAULT_MAX_TRIES);
            try {
                $reconnectionRetryProxy->call(function (): void {
                    $this->connect();
                });
            } catch (Throwable $reconnectException) {
                throw new UserException(
                    'Unable to reconnect to the database: ' . $reconnectException->getMessage(),
                    (int) $reconnectException->getCode(),
                    $reconnectException
                );
            }
        }
    }

    public function connect(): void
    {
        $host = $this->databaseConfig->getHost();
        $host .= $this->databaseConfig->hasPort() ? ':' . $this->databaseConfig->getPort() : '';
        $options['host'] = $host;
        $options['dbname'] = $this->databaseConfig->getDatabase();
        $options['version'] = "8.0";
        if ($this->databaseConfig->hasSSLConnection()) {
            $options['Encrypt'] = 'true';
            $options['TrustServerCertificate'] =
                $this->databaseConfig->getSslConnectionConfig()->isVerifyServerCert() ? 'false' : 'true';
        }

        // ms sql doesn't support options
        try {
            $this->pdo = $this->createPdoInstance($options);
        } catch (PDOException $e) {
            if (strpos($e->getMessage(), 'certificate verify failed:subject name does not match host name') &&
                $this->databaseConfig->hasSSLConnection() &&
                $this->databaseConfig->getSslConnectionConfig()->isIgnoreCertificateCn()
            ) {
                $this->logger->warning($e->getMessage());

                $options['TrustServerCertificate'] = 'true';

                $this->pdo = $this->createPdoInstance($options);
            } else {
                throw new UserException($e->getMessage(), 0, $e);
            }
        }
        $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        if ($this->databaseConfig->hasSSLConnection()) {
            $status = $this->pdo->query(
                'SELECT session_id, encrypt_option FROM sys.dm_exec_connections WHERE session_id = @@SPID'
            )->fetch();
            if ($status['encrypt_option'] === 'FALSE') {
                throw new UserException(sprintf('Connection is not encrypted'));
            } else {
                $this->logger->info('Using SSL connection');
            }
        }
    }

    private function createPdoInstance(array $options): PDO
    {
        $dsn = sprintf('dblib:%s', implode(';', array_map(function ($key, $item) {
            return sprintf('%s=%s', $key, $item);
        }, array_keys($options), $options)));

        $this->logger->info("Connecting to DSN '" . $dsn . "'");

        return new PDO($dsn, $this->databaseConfig->getUsername(), $this->databaseConfig->getPassword());
    }

    public function query(string $query, int $maxRetries = self::DEFAULT_MAX_RETRIES, array $values = []): QueryResult
    {
        return $this->callWithRetry(
            $maxRetries,
            function () use ($query, $values) {
                return $this->queryReconnectOnError($query, $values);
            }
        );
    }

    protected function queryReconnectOnError(string $query, array $values = []): QueryResult
    {
        try {
            return $this->doQuery($query, $values);
        } catch (Throwable $e) {
            try {
                // Reconnect
                $this->connect();
            } catch (Throwable $e) {
            }
            throw $e;
        }
    }

    protected function doQuery(string $query, array $values = []): QueryResult
    {
        /** @var PDOStatement $stmt */
        $stmt = $this->pdo->prepare($query);
        $stmt->execute($values);
        $queryMetadata = $this->getQueryMetadata($query, $stmt);
        return new PdoQueryResult($query, $queryMetadata, $stmt);
    }
}



================================================
FILE: src/Extractor/MSSQLQueryFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Extractor;

use InvalidArgumentException;
use Keboola\DbExtractor\Adapter\Connection\DbConnection;
use Keboola\DbExtractor\Configuration\MssqlExportConfig;
use Keboola\DbExtractor\Exception\ApplicationException;
use Keboola\DbExtractor\Metadata\MssqlMetadataProvider;
use Keboola\DbExtractor\TableResultFormat\Metadata\ValueObject\Column;
use Keboola\DbExtractorConfig\Configuration\ValueObject\ExportConfig;
use \Keboola\DbExtractor\Adapter\Query\QueryFactory;
use LogicException;

class MSSQLQueryFactory implements QueryFactory
{
    public const ESCAPING_TYPE_BCP = 'BCP';
    public const ESCAPING_TYPE_PDO = 'PDO';

    protected string $format;

    protected array $state;

    protected MssqlMetadataProvider $metadataProvider;

    protected string $incrementalFetchingType;

    public function __construct(array $state, MssqlMetadataProvider $metadataProvider)
    {
        $this->state = $state;
        $this->metadataProvider = $metadataProvider;
    }

    public function setFormat(string $format): self
    {
        $this->format = $format;
        return $this;
    }

    public function setIncrementalFetchingType(string $incrementalFetchingType): self
    {
        $this->incrementalFetchingType = $incrementalFetchingType;
        return $this;
    }

    public function getIncrementalFetchingType(): string
    {
        return $this->incrementalFetchingType;
    }


    public function create(ExportConfig $exportConfig, DbConnection $connection): string
    {
        if (!($exportConfig instanceof MssqlExportConfig)) {
            throw new ApplicationException();
        }

        $sql = [];
        $sql[] = 'SELECT';

        if ($exportConfig->hasIncrementalFetchingLimit()) {
            $sql[] = sprintf('TOP %d', $exportConfig->getIncrementalFetchingLimit());
        }

        $sql[] = sprintf(
            '%s FROM %s.%s',
            $this->getColumnsForSelect($exportConfig, $connection),
            $connection->quoteIdentifier($exportConfig->getTable()->getSchema()),
            $connection->quoteIdentifier($exportConfig->getTable()->getName())
        );

        if ($exportConfig->getNoLock()) {
            $sql[] = 'WITH(NOLOCK)';
        }

        if ($exportConfig->isIncrementalFetching() && isset($this->state['lastFetchedRow'])) {
            if (isset($this->state['lastFetchedRow'])) {
                $sql[] = sprintf(
                    'WHERE %s >= %s',
                    $connection->quoteIdentifier($exportConfig->getIncrementalFetchingColumn()),
                    $this->shouldQuoteComparison($this->incrementalFetchingType)
                        ? $connection->quote($this->state['lastFetchedRow'])
                        : $this->state['lastFetchedRow']
                );
            }
        }

        if ($exportConfig->hasIncrementalFetchingLimit()) {
            $sql[] = sprintf(
                'ORDER BY %s',
                $connection->quoteIdentifier($exportConfig->getIncrementalFetchingColumn())
            );
        }

        return implode(' ', $sql);
    }


    public function columnToBcpSql(Column $column, DbConnection $connection): string
    {
        // BCP exports CSV data without surrounding double quotes,
        // ... so double quotes are added in SQL

        $datatype = $this->getColumnDatatype($column);
        $escapedColumnName = $connection->quoteIdentifier($column->getName());
        $colStr = $escapedColumnName;

        if ($datatype->getType() === 'timestamp') {
            $colStr = sprintf('CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), %s), 1)', $colStr);
        } elseif ($datatype->getBasetype() === 'STRING') {
            if ($datatype->getType() === 'text'
                || $datatype->getType() === 'ntext'
                || $datatype->getType() === 'xml'
            ) {
                $colStr = sprintf('CAST(%s as nvarchar(max))', $colStr);
            }
            $colStr = sprintf('REPLACE(%s, char(34), char(34) + char(34))', $colStr);
            if ($datatype->isNullable()) {
                $colStr = sprintf("COALESCE(%s,'')", $colStr);
            }
            $colStr = sprintf('char(34) + %s + char(34)', $colStr);
        } elseif ($datatype->getBasetype() === 'TIMESTAMP'
            && strtoupper($datatype->getType()) !== 'SMALLDATETIME'
        ) {
            $colStr = sprintf('CONVERT(DATETIME2(0),%s)', $colStr);
        }
        if ($colStr !== $escapedColumnName) {
            return $colStr . ' AS ' . $escapedColumnName;
        }
        return $colStr;
    }

    public function columnToPdoSql(Column $column, DbConnection $connection): string
    {
        $datatype = $this->getColumnDatatype($column);
        $escapedColumnName = $connection->quoteIdentifier($column->getName());
        $colStr = $escapedColumnName;

        if ($datatype->getType() === 'timestamp') {
            $colStr = sprintf('CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), %s), 1)', $colStr);
        } else {
            if ($datatype->getType() === 'text'
                || $datatype->getType() === 'ntext'
                || $datatype->getType() === 'xml'
            ) {
                $colStr = sprintf('CAST(%s as nvarchar(max))', $colStr);
            }
        }
        if ($colStr !== $escapedColumnName) {
            return $colStr . ' AS ' . $escapedColumnName;
        }
        return $colStr;
    }


    private function getColumnDatatype(Column $column): MssqlDataType
    {
        return new MssqlDataType(
            $column->getType(),
            [
                'type' => $column->getType(),
                'length' => $column->hasLength() ? $column->getLength() : null,
                'nullable' => $column->hasNullable() ? $column->isNullable() : null,
                'default' => $column->hasDefault() ? (string) $column->getDefault() : null,
            ]
        );
    }

    private function getColumnsForSelect(ExportConfig $exportConfig, DbConnection $connection): string
    {
        $columns = $this->metadataProvider->getTable($exportConfig->getTable())->getColumns();
        // Map column names (from config or all) to metadata objects, and then format them for SELECT.
        $columnNames = $exportConfig->hasColumns() ? $exportConfig->getColumns() : $columns->getNames();
        if ($this->format === self::ESCAPING_TYPE_BCP) {
            return implode(', ', array_map(
                fn (string $name) => $this->columnToBcpSql($columns->getByName($name), $connection),
                $columnNames
            ));
        } elseif ($this->format === self::ESCAPING_TYPE_PDO) {
            return implode(', ', array_map(
                fn (string $name) => $this->columnToPdoSql($columns->getByName($name), $connection),
                $columnNames
            ));
        }

        throw new LogicException(sprintf('Unexpected format: "%s"', $this->format));
    }

    private function shouldQuoteComparison(?string $type): bool
    {
        if ($type === null) {
            throw new InvalidArgumentException(
                'Incremental fetching type should be set if calling "shouldQuoteComparison".'
            );
        }

        if ($type === MssqlDataType::INCREMENT_TYPE_NUMERIC || $type === MssqlDataType::INCREMENT_TYPE_BINARY) {
            return false;
        }
        return true;
    }
}



================================================
FILE: src/Extractor/MssqlRetryFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Extractor;

use Psr\Log\LoggerInterface;
use Retry\BackOff\ExponentialBackOffPolicy;
use Retry\Policy\CallableRetryPolicy;
use Retry\RetryProxy;
use Throwable;

class MssqlRetryFactory
{
    public static function createProxy(
        LoggerInterface $logger,
        int $maxTries,
        ?int $timeout = null,
        ?array $expectedExceptions = null
    ): RetryProxy {
        $timeout = $timeout ?? 15 * 60 * 1000; // default timeout, 15 min
        $expectedExceptions = $expectedExceptions ?? ['PDOException', 'ErrorException'];

        // Retry inverval 1s -> 2s -> 4s -> ... 60s
        $backOffPolicy = new ExponentialBackOffPolicy(1000, 2, 60000);

        // Retry policy
        // We use by default "simple retry", see $maxTries
        // For problematic error we use "timeout retry", see $timeout (more time is needed)
        $exceptions = [];
        $start = microtime(true);
        $canRetry = function (Throwable $e) use (&$exceptions, $start, $maxTries, $expectedExceptions, $timeout) {
            $ms = (microtime(true) - $start) * 1000;

            // canRetry callback is called multiple times, so we count each unique exception
            if (!in_array($e, $exceptions, true)) {
                $exceptions[] = $e;
            }

            // Simple retry by default
            if (count($exceptions) < $maxTries && self::shouldRetryForException($e, $expectedExceptions)) {
                return true;
            }

            // Timeout retry for problematic error "error was encountered during handshakes before login ..."
            $longRetryMsg = 'error was encountered during handshakes before login.';
            if ($ms <= $timeout && strpos($e->getMessage(), $longRetryMsg) !== false) {
                return true;
            }

            return false;
        };
        $retryPolicy = new CallableRetryPolicy($canRetry, 30);

        return new RetryProxy($retryPolicy, $backOffPolicy, $logger);
    }

    private static function shouldRetryForException(Throwable $e, array $expectedExceptions): bool
    {
        foreach ($expectedExceptions as $class) {
            if (is_a($e, $class)) {
                return true;
            }
        }

        return false;
    }
}



================================================
FILE: src/Extractor/Adapters/BcpExportAdapter.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Extractor\Adapters;

use Keboola\DbExtractor\Adapter\ExportAdapter;
use Keboola\DbExtractor\Adapter\Metadata\MetadataProvider;
use Keboola\DbExtractor\Adapter\ValueObject\ExportResult;
use Keboola\DbExtractor\Exception\BcpAdapterSkippedException;
use Keboola\DbExtractor\Exception\InvalidArgumentException;
use Keboola\DbExtractor\Exception\UserException;
use Keboola\DbExtractor\Extractor\MSSQLQueryFactory;
use Keboola\DbExtractorConfig\Configuration\ValueObject\DatabaseConfig;
use Retry\BackOff\ExponentialBackOffPolicy;
use Retry\Policy\SimpleRetryPolicy;
use Retry\RetryProxy;
use Throwable;
use Psr\Log\LoggerInterface;
use Keboola\Csv\CsvReader;
use Keboola\DbExtractor\Configuration\MssqlExportConfig;
use Keboola\DbExtractorConfig\Configuration\ValueObject\ExportConfig;
use Keboola\DbExtractor\Exception\ApplicationException;
use Keboola\DbExtractor\Exception\BcpAdapterException;
use Keboola\DbExtractor\Extractor\MssqlDataType;
use Keboola\DbExtractor\Extractor\MSSQLPdoConnection;
use Symfony\Component\Process\Process;

class BcpExportAdapter implements ExportAdapter
{
    protected MSSQLQueryFactory $simpleQueryFactory;

    private MSSQLPdoConnection $connection;

    private MetadataProvider $metadataProvider;

    private DatabaseConfig $databaseConfig;

    private LoggerInterface $logger;

    public function __construct(
        LoggerInterface $logger,
        MSSQLPdoConnection $connection,
        MetadataProvider $metadataProvider,
        DatabaseConfig $databaseConfig,
        MSSQLQueryFactory $queryFactory
    ) {
        $this->logger = $logger;
        $this->connection = $connection;
        $this->metadataProvider = $metadataProvider;
        $this->databaseConfig = $databaseConfig;
        $this->simpleQueryFactory = $queryFactory;
    }

    public function getName(): string
    {
        return 'BCP';
    }

    public function export(ExportConfig $exportConfig, string $csvFilePath): ExportResult
    {
        if (!$exportConfig instanceof MssqlExportConfig) {
            throw new InvalidArgumentException('PgsqlExportConfig expected.');
        }

        if ($exportConfig->isBcpDisabled()) {
            throw new BcpAdapterSkippedException('Disabled in configuration.');
        }

        if ($exportConfig->hasQuery() && $this->connection->getServerVersion() < 11) {
            throw new BcpAdapterSkippedException(
                'BCP is not supported for advanced queries in sql server 2008 or less.'
            );
        }

        $query = $exportConfig->hasQuery() ? $exportConfig->getQuery() : $this->createSimpleQuery($exportConfig);

        $retryProxy = $this->createRetryProxy($exportConfig->getMaxTriesBcp());
        try {
            $exportResult = $retryProxy->call(function () use ($exportConfig, $query, $csvFilePath) {
                return $this->doExport(
                    $exportConfig,
                    $query,
                    $csvFilePath
                );
            });
            if ($exportResult->getRowsCount() > 0 && $exportConfig->hasQuery()) {
                $this->stripNullBytesInEmptyFields($csvFilePath);
            }
            return $exportResult;
        } catch (BcpAdapterException $pdoError) {
            @unlink($csvFilePath);
            throw new UserException($pdoError->getMessage());
        }
    }

    protected function createSimpleQuery(ExportConfig $exportConfig): string
    {
        return $this
            ->simpleQueryFactory
            ->setFormat(MSSQLQueryFactory::ESCAPING_TYPE_BCP)
            ->create($exportConfig, $this->connection);
    }

    private function getLastDatetimeValue(ExportConfig $exportConfig, array $lastRow): string
    {
        $whereClause = '';
        $whereValues = [];

        $tableColumns =  $this->metadataProvider->getTable($exportConfig->getTable())->getColumns();
        $columnNames = $exportConfig->hasColumns() ?
            $exportConfig->getColumns() :
            $tableColumns->getNames();

        foreach ($columnNames as $key => $name) {
            $column = $tableColumns->getByName($name);
            if (strtoupper($column->getType()) === 'TIMESTAMP') {
                continue;
            }
            if ($whereClause !== '') {
                $whereClause .= ' AND ';
            }

            // COALESCE note: NULL is exported as empty string to $lastRow, so
            // ... COALESCE is required, because NULL = "" -> false
            // ... COALESCE(NULL, "") = "" -> true
            if (in_array(strtoupper($column->getType()), ['DATETIME', 'DATETIME2'])) {
                $whereClause .=
                    'COALESCE(CONVERT(DATETIME2(0), ' .
                    $this->connection->quoteIdentifier($column->getName()) .
                    '), \'\') = ?';
            } else {
                $whereClause .= 'COALESCE(' . $this->connection->quoteIdentifier($column->getName()) . ', \'\') = ?';
            }

            $whereValues[] = $lastRow[$key];
        }

        $query = sprintf(
            'SELECT %s FROM %s.%s WHERE %s;',
            $this->connection->quoteIdentifier($exportConfig->getIncrementalFetchingColumn()),
            $this->connection->quoteIdentifier($exportConfig->getTable()->getSchema()),
            $this->connection->quoteIdentifier($exportConfig->getTable()->getName()),
            $whereClause
        );

        $result = $this->connection->query($query, $exportConfig->getMaxRetries(), $whereValues)->fetchAll();

        if (count($result) > 0) {
            return $result[0][$exportConfig->getIncrementalFetchingColumn()];
        }

        throw new BcpAdapterException('Fetching last datetime value returned no results.');
    }

    private function getLastValue(ExportConfig $exportConfig, array $lastRow): string
    {
        $columnNames = $exportConfig->hasColumns() ?
            $exportConfig->getColumns() :
            $this->metadataProvider
            ->getTable($exportConfig->getTable())
            ->getColumns()
            ->getNames();

        foreach ($columnNames as $key => $name) {
            if ($name === $exportConfig->getIncrementalFetchingColumn()) {
                return $lastRow[$key];
            }
        }

        throw new BcpAdapterException('Fetching last id value returned no results.');
    }

    private function doExport(MssqlExportConfig $exportConfig, string $query, string $filename): ExportResult
    {
        $process = Process::fromShellCommandline($this->createBcpCommand($filename, $query));
        $process->setTimeout(null);
        $process->run();

        if (!$process->isSuccessful()) {
            throw new BcpAdapterException(sprintf(
                "Export process failed. Output: %s. \n\n Error Output: %s.",
                $process->getOutput(),
                $process->getErrorOutput()
            ));
        }

        try {
            return $this->processOutputCsv($exportConfig, $filename, $query, $process);
        } catch (BcpAdapterException $e) {
            throw $e;
        } catch (Throwable $e) {
            throw new BcpAdapterException(
                'The BCP command produced an invalid csv: ' . $e->getMessage(),
                0,
                $e
            );
        }
    }

    private function stripNullBytesInEmptyFields(string $fileName): void
    {
        // this will replace null byte column values in the file
        // this is here because BCP will output null bytes for empty strings
        // this can occur in advanced queries where the column isn't sanitized
        $nullAtStart = 's/^\x00,/,/g';
        $nullAtEnd = 's/,\x00$/,/g';
        $nullInTheMiddle = 's/,\x00,/,,/g';
        $sedCommand = sprintf('sed -e \'%s;%s;%s\' -i %s', $nullAtStart, $nullInTheMiddle, $nullAtEnd, $fileName);

        $process = Process::fromShellCommandline($sedCommand);
        $process->setTimeout(3600);
        $process->run();
        if ($process->getExitCode() !== 0 || !empty($process->getErrorOutput())) {
            throw new ApplicationException(
                sprintf('Error Stripping Nulls: %s', $process->getErrorOutput())
            );
        }
    }

    private function processOutputCsv(
        MssqlExportConfig $exportConfig,
        string $filename,
        string $query,
        Process $process
    ): ExportResult {
        $outputFile = new CsvReader($filename);
        $numRows = 0;
        $lastFetchedRow = null;
        $colCount = $outputFile->getColumnsCount();
        while ($outputFile->valid()) {
            if (count($outputFile->current()) !== $colCount) {
                $lineNumber = $numRows + 1;

                throw new BcpAdapterException('The BCP command produced an invalid csv.', 0, null, [
                    'currentLineNumber' => $lineNumber,
                    'currentLine' => $outputFile->current(),
                    'bcpErrorOutput' => mb_convert_encoding($process->getErrorOutput(), 'UTF-8', 'UTF-8'),
                ]);
            }
            $lastRow = $outputFile->current();
            $outputFile->next();
            if (!$outputFile->valid()) {
                $lastFetchedRow = $lastRow;
            }
            $numRows++;
        }

        $lastFetchedRowMaxValue = null;

        // Find max value only if BaseExtractor::canFetchMaxIncrementalValueSeparately == false
        if (!$exportConfig->hasQuery() &&
            $exportConfig->isIncrementalFetching() &&
            $exportConfig->hasIncrementalFetchingLimit() &&
            $lastFetchedRow
        ) {
            if ($this->simpleQueryFactory->getIncrementalFetchingType() === MssqlDataType::INCREMENT_TYPE_DATETIME) {
                $lastFetchedRowMaxValue = $this->getLastDatetimeValue($exportConfig, $lastFetchedRow);
            } else {
                $lastFetchedRowMaxValue = $this->getLastValue($exportConfig, $lastFetchedRow);
            }
        }

        return new ExportResult(
            $filename,
            $numRows,
            new BcpQueryMetadata($this->connection, $query),
            false,
            $lastFetchedRowMaxValue ?? null
        );
    }

    private function createBcpCommand(string $filename, string $query): string
    {
        $serverName = $this->databaseConfig->getHost();
        $serverName .= $this->databaseConfig->hasPort() ? ',' . $this->databaseConfig->getPort() : '';

        $cmd = sprintf(
            'bcp %s queryout %s -S %s -U %s -P %s -d %s -q -k -b 50000 -m 1 -t "," -r "\n" -c',
            escapeshellarg($query),
            escapeshellarg($filename),
            escapeshellarg($serverName),
            escapeshellarg($this->databaseConfig->getUsername()),
            escapeshellarg($this->databaseConfig->getPassword()),
            escapeshellarg($this->databaseConfig->getDatabase())
        );

        $commandForLogger = preg_replace('/-P.*-d/', '-P ***** -d', $cmd);
        $commandForLogger = preg_replace(
            '/queryout.*\/([a-z\-._]+\.csv).*-S/',
            'queryout \'${1}\' -S',
            (string) $commandForLogger
        );

        $this->logger->info(sprintf(
            'Executing BCP command: %s',
            $commandForLogger
        ));
        return $cmd;
    }

    private function createRetryProxy(int $maxTries): RetryProxy
    {
        $retryPolicy = new SimpleRetryPolicy($maxTries, [BcpAdapterException::class]);
        $backoffPolicy = new ExponentialBackOffPolicy(1000);
        return new RetryProxy($retryPolicy, $backoffPolicy, $this->logger);
    }
}



================================================
FILE: src/Extractor/Adapters/BcpQueryMetadata.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Extractor\Adapters;

use Keboola\DbExtractor\Adapter\ValueObject\QueryMetadata;
use Keboola\DbExtractor\Exception\BcpAdapterException;
use Keboola\DbExtractor\Extractor\MSSQLPdoConnection;
use Keboola\DbExtractor\TableResultFormat\Metadata\Builder\ColumnBuilder;
use Keboola\DbExtractor\TableResultFormat\Metadata\ValueObject\ColumnCollection;
use Throwable;

class BcpQueryMetadata implements QueryMetadata
{
    private MSSQLPdoConnection $connection;

    private string $query;

    public function __construct(MSSQLPdoConnection $connection, string $query)
    {
        $this->connection = $connection;
        $this->query = $query;
    }

    public function getColumns(): ColumnCollection
    {
        // This will only work if the server is >= sql server 2012
        $sql = sprintf(
            "EXEC sp_describe_first_result_set N'%s', null, 0;",
            rtrim(trim(str_replace("'", "''", $this->query)), ';')
        );
        try {
            $result = $this->connection->query($sql)->fetchAll();
            $columns = [];
            foreach ($result as $columnMetadata) {
                $builder = ColumnBuilder::create();
                $builder->setName($columnMetadata['name']);
                $builder->setType($columnMetadata['system_type_name']);
                $columns[] = $builder->build();
            }
            return new ColumnCollection($columns);
        } catch (Throwable $e) {
            throw new BcpAdapterException(
                sprintf('DB query "%s" failed: %s', $sql, $e->getMessage()),
                0,
                $e
            );
        }
    }
}



================================================
FILE: src/Extractor/Adapters/MSSQLPdoExportAdapter.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Extractor\Adapters;

use Keboola\DbExtractor\Adapter\PDO\PdoExportAdapter;
use Keboola\DbExtractor\Adapter\Query\QueryFactory;
use Keboola\DbExtractor\Adapter\ResultWriter\DefaultResultWriter;
use Keboola\DbExtractor\Adapter\ValueObject\ExportResult;
use Keboola\DbExtractor\Configuration\MssqlExportConfig;
use Keboola\DbExtractor\Exception\InvalidArgumentException;
use Keboola\DbExtractor\Exception\PdoAdapterSkippedException;
use Keboola\DbExtractor\Extractor\MSSQLQueryFactory;
use Psr\Log\LoggerInterface;
use Keboola\DbExtractor\Extractor\MSSQLPdoConnection;
use Keboola\DbExtractorConfig\Configuration\ValueObject\ExportConfig;

class MSSQLPdoExportAdapter extends PdoExportAdapter
{
    /** @var MSSQLQueryFactory $simpleQueryFactory */
    protected QueryFactory $simpleQueryFactory;

    public function __construct(
        LoggerInterface $logger,
        MSSQLPdoConnection $connection,
        MSSQLQueryFactory $queryFactory,
        DefaultResultWriter $resultWriter,
        string $dataDir,
        array $state
    ) {
        parent::__construct($logger, $connection, $queryFactory, $resultWriter, $dataDir, $state);
    }

    public function export(ExportConfig $exportConfig, string $csvFilePath): ExportResult
    {
        if (!$exportConfig instanceof MssqlExportConfig) {
            throw new InvalidArgumentException('PgsqlExportConfig expected.');
        }

        if ($exportConfig->isFallbackDisabled()) {
            throw new PdoAdapterSkippedException('Disabled in configuration.');
        }
        return parent::export($exportConfig, $csvFilePath);
    }

    protected function createSimpleQuery(ExportConfig $exportConfig): string
    {
        return $this
            ->simpleQueryFactory
            ->setFormat(MSSQLQueryFactory::ESCAPING_TYPE_PDO)
            ->create($exportConfig, $this->connection)
        ;
    }
}



================================================
FILE: src/Metadata/MssqlManifestSerializer.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Metadata;

use Keboola\Datatype\Definition\Common;
use Keboola\DbExtractor\Extractor\MssqlDataType;
use Keboola\DbExtractor\TableResultFormat\Metadata\Manifest\DefaultManifestSerializer;
use Keboola\DbExtractor\TableResultFormat\Metadata\ValueObject\Column;

class MssqlManifestSerializer extends DefaultManifestSerializer
{
    protected function columnToDatatype(Column $column, array $options): Common
    {
        return new MssqlDataType($column->getType(), $options);
    }
}



================================================
FILE: src/Metadata/MssqlMetadataProvider.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Metadata;

use Keboola\DbExtractor\Adapter\Metadata\MetadataProvider;
use Keboola\DbExtractor\Extractor\MSSQLPdoConnection;
use Keboola\DbExtractor\TableResultFormat\Exception\InvalidStateException;
use Keboola\DbExtractor\TableResultFormat\Metadata\Builder\ColumnBuilder;
use Keboola\DbExtractor\TableResultFormat\Metadata\Builder\MetadataBuilder;
use Keboola\DbExtractor\TableResultFormat\Metadata\Builder\TableBuilder;
use Keboola\DbExtractor\TableResultFormat\Metadata\ValueObject\Table;
use Keboola\DbExtractor\TableResultFormat\Metadata\ValueObject\TableCollection;
use Keboola\DbExtractorConfig\Configuration\ValueObject\InputTable;

class MssqlMetadataProvider implements MetadataProvider
{
    private const MAX_RETRIES = 5;

    private MSSQLPdoConnection $pdo;

    /** @var TableCollection[] */
    private array $cache = [];

    public function __construct(MSSQLPdoConnection $pdo)
    {
        $this->pdo = $pdo;
    }

    public function getTable(InputTable $table): Table
    {
        return $this
            ->listTables([$table])
            ->getByNameAndSchema($table->getName(), $table->getSchema());
    }

    /**
     * @param array|InputTable[] $whitelist
     * @param bool $loadColumns if false, columns metadata are NOT loaded, useful if there are a lot of tables
     */
    public function listTables(array $whitelist = [], bool $loadColumns = true): TableCollection
    {
        // Return cached value if present
        $cacheKey = md5(serialize(func_get_args()));
        if (isset($this->cache[$cacheKey])) {
            return $this->cache[$cacheKey];
        }

        /** @var TableBuilder[] $tableBuilders */
        $tableBuilders = [];

        /** @var ColumnBuilder[] $columnBuilders */
        $columnBuilders = [];

        $builder = MetadataBuilder::create();
        $tablesSql = MssqlSqlHelper::getTablesSql($whitelist, $this->pdo);
        $tables = $this->pdo->query($tablesSql, self::MAX_RETRIES)->fetchAll();
        foreach ($tables as $data) {
            $tableId = $data['TABLE_SCHEMA'] . '.' . $data['TABLE_NAME'];
            $tableBuilder = $this->processTable($data, $builder);
            $tableBuilders[$tableId] = $tableBuilder;

            if (!$loadColumns) {
                $tableBuilder->setColumnsNotExpected();
            }
        }

        if ($loadColumns) {
            $columnsSql = $whitelist ?
                MssqlSqlHelper::getColumnsSqlComplex($whitelist, $this->pdo) :
                MssqlSqlHelper::getColumnsSqlQuick();

            $columns = $this->pdo->query($columnsSql, self::MAX_RETRIES)->fetchAll();
            foreach ($columns as $data) {
                $tableId = $data['TABLE_SCHEMA'] . '.' . $data['TABLE_NAME'];
                $columnId = $data['COLUMN_NAME'] . '.' . $tableId;
                $tableBuilder = $tableBuilders[$tableId];

                // When "getColumnsSqlComplex" is used,
                // then one column can be present multiple times in result if has multiple constraints,
                // so column builder is reused
                if (isset($columnBuilders[$columnId])) {
                    $columnBuilder = $columnBuilders[$columnId];
                } else {
                    $columnBuilder = $tableBuilder->addColumn();
                    $columnBuilders[$columnId] = $columnBuilder;
                }

                $this->processColumn($data, $columnBuilder);
            }
        }

        return $builder->build();
    }

    private function processTable(array $data, MetadataBuilder $builder): TableBuilder
    {
        return $builder
            ->addTable()
            ->setName($data['TABLE_NAME'], false)
            ->setCatalog($data['TABLE_CATALOG'])
            ->setSchema($data['TABLE_SCHEMA'])
            ->setType($data['TABLE_TYPE']);
    }

    private function processColumn(array $data, ColumnBuilder $columnBuilder): ColumnBuilder
    {
        $columnBuilder = $columnBuilder
            ->setName($data['COLUMN_NAME'], false)
            ->setOrdinalPosition((int) $data['ORDINAL_POSITION']);

        // Type and length
        if (isset($data['DATA_TYPE'])) {
            $columnBuilder
                ->setType($data['DATA_TYPE'])
                ->setLength(MssqlSqlHelper::getFieldLength($data));
        } else {
            $columnBuilder->setType('USER_DEFINED_TYPE');
        }

        // Nullable
        if (isset($data['IS_NULLABLE'])) {
            $columnBuilder->setNullable($data['IS_NULLABLE'] === 'YES' || $data['IS_NULLABLE'] === '1');
        }

        // Default
        if (isset($data['COLUMN_DEFAULT'])) {
            $columnBuilder->setDefault(
                MssqlSqlHelper::getDefaultValue(
                    isset($data['DATA_TYPE']) ? $data['DATA_TYPE'] : 'USER_DEFINED_TYPE',
                    $data['COLUMN_DEFAULT']
                )
            );
        }

        // Primary key
        if (isset($data['pk_name'])) {
            $columnBuilder->setPrimaryKey(true);
        }

        // Unique key
        if (isset($data['uk_name'])) {
            $columnBuilder->setUniqueKey(true);
        }

        // Foreign key
        if (isset($data['fk_name'])) {
            try {
                $columnBuilder
                    ->addForeignKey()
                    ->setName($data['fk_name'])
                    ->setRefSchema($data['REFERENCED_SCHEMA_NAME'])
                    ->setRefTable($data['REFERENCED_TABLE_NAME'])
                    ->setRefColumn($data['REFERENCED_COLUMN_NAME']);
            } catch (InvalidStateException $e) {
                // FK is already set
            }
        }

        // Auto increment
        if (isset($data['is_identity'])) {
            $columnBuilder->setAutoIncrement(true);
        }

        return $columnBuilder;
    }
}



================================================
FILE: src/Metadata/MssqlSqlHelper.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Metadata;

use Keboola\DbExtractor\Extractor\MSSQLPdoConnection;
use Keboola\DbExtractorConfig\Configuration\ValueObject\InputTable;

class MssqlSqlHelper
{
    /**
     * @param array|InputTable[] $whitelist
     */
    public static function getTablesSql(array $whitelist, MSSQLPdoConnection $pdo): string
    {
        // Note: type='U' user generated objects only
        $sql = [];
        $sql[] = "
            SELECT [ist].* FROM [INFORMATION_SCHEMA].[TABLES] as [ist]
            INNER JOIN [dbo].[sysobjects] AS [so] ON [ist].[TABLE_NAME] = [so].[name]
            WHERE ([so].[type]='U' OR [so].[type]='V')
        ";

        if (!empty($whitelist)) {
            $sql[] = sprintf(
                'AND TABLE_NAME IN (%s) AND TABLE_SCHEMA IN (%s)',
                implode(',', array_map(
                    fn (InputTable $table) => $pdo->quote($table->getName()),
                    $whitelist
                )),
                implode(',', array_map(
                    fn (InputTable $table) => $pdo->quote($table->getSchema()),
                    $whitelist
                )),
            );
        }

        $sql[] = 'ORDER BY [TABLE_SCHEMA], [TABLE_NAME]';

        return implode(' ', $sql);
    }

    public static function getColumnsSqlQuick(): string
    {
        return "
            SELECT 
              OBJECT_SCHEMA_NAME ([sys].[columns].[object_id]) AS [TABLE_SCHEMA],
              OBJECT_NAME([sys].[columns].[object_id]) as [TABLE_NAME],
              [sys].[columns].[column_id] AS [COLUMN_ID],
              [sys].[columns].[column_id] AS [ORDINAL_POSITION],
              [sys].[columns].[name] AS [COLUMN_NAME],
              TYPE_NAME([sys].[columns].[system_type_id]) AS [DATA_TYPE],
              [sys].[columns].[is_nullable] AS [IS_NULLABLE],
              [sys].[columns].[precision] AS [NUMERIC_PRECISION],
              [sys].[columns].[scale] AS [NUMERIC_SCALE],
              [sys].[columns].[max_length] AS [CHARACTER_MAXIMUM_LENGTH],
              [pks].[index_name] AS [pk_name],
              [pks].[is_identity] AS [is_identity]
            FROM [sys].[columns] 
            LEFT JOIN
              (
                SELECT [i].[name] AS [index_name],
                    [is_identity],
                    [c].[column_id] AS [columnid],
                    [c].[object_id] AS [objectid]
                FROM [sys].[indexes] AS [i]  
                INNER JOIN [sys].[index_columns] AS [ic]   
                    ON [i].[object_id] = [ic].[object_id] AND [i].[index_id] = [ic].[index_id]  
                INNER JOIN [sys].[columns] AS [c]   
                    ON [ic].[object_id] = [c].[object_id] AND [c].[column_id] = [ic].[column_id]  
                WHERE [i].[is_primary_key] = 1
              ) [pks] 
            ON [pks].[objectid] = [sys].[columns].[object_id] AND [pks].[columnid] = [sys].[columns].[column_id]
            INNER JOIN [sys].[objects] AS [so] ON [sys].[columns].[object_id] = [so].[object_id]
            WHERE ([so].[type]='U' OR [so].[type]='V')
            ORDER BY [TABLE_SCHEMA], [TABLE_NAME], [ORDINAL_POSITION]
        ";
    }

    /**
     * @param array|InputTable[] $whitelist
     */
    public static function getColumnsSqlComplex(array $whitelist, MSSQLPdoConnection $pdo): string
    {
        // @codingStandardsIgnoreStart
        $sql = "
            SELECT [c].*,  
              [chk].[CHECK_CLAUSE], 
              [fk_name],
              [chk_name],
              [pk_name],
              [uk_name],
              [FK_REFS].[REFERENCED_COLUMN_NAME], 
              [FK_REFS].[REFERENCED_TABLE_NAME],
              [FK_REFS].[REFERENCED_SCHEMA_NAME]
            FROM [INFORMATION_SCHEMA].[COLUMNS] AS [c] 
            LEFT JOIN (
                SELECT  
                     [KCU1].[CONSTRAINT_NAME] AS [fk_name] 
                    ,[KCU1].[CONSTRAINT_SCHEMA] AS [FK_SCHEMA_NAME]
                    ,[KCU1].[TABLE_NAME] AS [FK_TABLE_NAME] 
                    ,[KCU1].[COLUMN_NAME] AS [FK_COLUMN_NAME] 
                    ,[KCU1].[ORDINAL_POSITION] AS [FK_ORDINAL_POSITION] 
                    ,[KCU2].[CONSTRAINT_NAME] AS [REFERENCED_CONSTRAINT_NAME] 
                    ,[KCU2].[CONSTRAINT_SCHEMA] AS [REFERENCED_SCHEMA_NAME]
                    ,[KCU2].[TABLE_NAME] AS [REFERENCED_TABLE_NAME] 
                    ,[KCU2].[COLUMN_NAME] AS [REFERENCED_COLUMN_NAME] 
                    ,[KCU2].[ORDINAL_POSITION] AS [REFERENCED_ORDINAL_POSITION]
                FROM [INFORMATION_SCHEMA].[REFERENTIAL_CONSTRAINTS] AS [RC] 
                INNER JOIN [INFORMATION_SCHEMA].[KEY_COLUMN_USAGE] AS [KCU1] 
                    ON [KCU1].[CONSTRAINT_CATALOG] = [RC].[CONSTRAINT_CATALOG]  
                    AND [KCU1].[CONSTRAINT_SCHEMA] = [RC].[CONSTRAINT_SCHEMA] 
                    AND [KCU1].[CONSTRAINT_NAME] = [RC].[CONSTRAINT_NAME] 
                INNER JOIN [INFORMATION_SCHEMA].[KEY_COLUMN_USAGE] AS [KCU2] 
                    ON [KCU2].[CONSTRAINT_CATALOG] = [RC].[UNIQUE_CONSTRAINT_CATALOG]  
                    AND [KCU2].[CONSTRAINT_SCHEMA] = [RC].[UNIQUE_CONSTRAINT_SCHEMA] 
                    AND [KCU2].[CONSTRAINT_NAME] = [RC].[UNIQUE_CONSTRAINT_NAME] 
                    AND [KCU2].[ORDINAL_POSITION] = [KCU1].[ORDINAL_POSITION] 
            ) AS [FK_REFS]
            ON [FK_REFS].[FK_TABLE_NAME] = [c].[TABLE_NAME] AND [FK_REFS].[FK_COLUMN_NAME] = [c].[COLUMN_NAME]
            LEFT JOIN (
                SELECT [tc2].[CONSTRAINT_TYPE], [tc2].[TABLE_NAME], [ccu2].[COLUMN_NAME], [ccu2].[CONSTRAINT_NAME] as [chk_name], [CHK].[CHECK_CLAUSE] 
                FROM [INFORMATION_SCHEMA].[CONSTRAINT_COLUMN_USAGE] AS [ccu2] 
                JOIN [INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] AS [tc2] 
                ON [ccu2].[TABLE_NAME] = [tc2].[TABLE_NAME]
                JOIN (
                  SELECT * FROM [INFORMATION_SCHEMA].[CHECK_CONSTRAINTS] 
                ) AS [CHK] 
                ON [CHK].[CONSTRAINT_NAME] = [ccu2].[CONSTRAINT_NAME]
                WHERE [CONSTRAINT_TYPE] = 'CHECK'
            ) AS [chk]
            ON [chk].[TABLE_NAME] = [c].[TABLE_NAME] AND [chk].[COLUMN_NAME] = [c].[COLUMN_NAME]
            LEFT JOIN (
                SELECT [tc].[CONSTRAINT_TYPE], [tc].[TABLE_NAME], [ccu].[COLUMN_NAME], [ccu].[CONSTRAINT_NAME] as [pk_name]
                FROM [INFORMATION_SCHEMA].[KEY_COLUMN_USAGE] AS [ccu]
                JOIN [INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] AS [tc]
                ON [ccu].[CONSTRAINT_NAME] = [tc].[CONSTRAINT_NAME] AND  [ccu].[TABLE_NAME] = [tc].[TABLE_NAME] AND [CONSTRAINT_TYPE] = 'PRIMARY KEY' 
            ) AS [pk]
            ON [pk].[TABLE_NAME] = [c].[TABLE_NAME] AND [pk].[COLUMN_NAME] = [c].[COLUMN_NAME]
            LEFT JOIN (
                SELECT [tc].[CONSTRAINT_TYPE], [ccu].[TABLE_NAME], [ccu].[COLUMN_NAME], [ccu].[CONSTRAINT_NAME] as [uk_name]
                FROM [INFORMATION_SCHEMA].[KEY_COLUMN_USAGE] AS [ccu]
                JOIN [INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] AS [tc]
                ON [ccu].[CONSTRAINT_NAME] = [tc].[CONSTRAINT_NAME] AND [ccu].[TABLE_NAME] = [tc].[TABLE_NAME] AND [CONSTRAINT_TYPE] = 'UNIQUE' 
            ) AS [uk]  
            ON [uk].[TABLE_NAME] = [c].[TABLE_NAME] AND [uk].[COLUMN_NAME] = [c].[COLUMN_NAME]
            WHERE [c].[TABLE_NAME] IN (%s) AND [c].[TABLE_SCHEMA] IN (%s)
            ORDER BY [c].[TABLE_SCHEMA], [c].[TABLE_NAME], [ORDINAL_POSITION]
        ";
        // @codingStandardsIgnoreEnd

        return sprintf(
            $sql,
            implode(',', array_map(
                fn(InputTable $table) => $pdo->quote($table->getName()),
                $whitelist
            )),
            implode(',', array_map(
                fn (InputTable $table) => $pdo->quote($table->getSchema()),
                $whitelist
            ))
        );
    }

    public static function getFieldLength(array $data): ?string
    {
        $dateTimeTypes = ['datetimeoffset', 'datetime2', 'datetime', 'time', 'smalldatetime', 'date'];
        if (in_array($data['DATA_TYPE'], $dateTimeTypes)) {
            return null;
        }

        if ($data['NUMERIC_PRECISION'] > 0) {
            if ($data['NUMERIC_SCALE'] > 0) {
                return strval($data['NUMERIC_PRECISION']) . ',' . strval($data['NUMERIC_SCALE']);
            } else {
                return strval($data['NUMERIC_PRECISION']);
            }
        }

        switch ($data['CHARACTER_MAXIMUM_LENGTH']) {
            case '16':
                // most likely TEXT column
                if ($data['DATA_TYPE'] === 'text') {
                    return null;
                } else {
                    return strval($data['CHARACTER_MAXIMUM_LENGTH']);
                }
            case '-1':
                // this is returned for max, ex: nvarchar(max), we will treat it as unspecified
                return null;
            default:
                return strval($data['CHARACTER_MAXIMUM_LENGTH']);
        }
    }



    public static function getDefaultValue(string $dataType, string $defaultValue): string
    {
        switch (strtolower($dataType)) {
            case 'int':
            case 'bigint':
            case 'smallint':
            case 'tinyint':
            case 'decimal':
            case 'numeric':
            case 'float':
                preg_match('/\(\((.+)\)\)/', $defaultValue, $match);
                if (isset($match[1])) {
                    return $match[1];
                }
                return $defaultValue;
            default:
                return $defaultValue;
        }
    }
}



================================================
FILE: tests/functional/DatabaseManager.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\FunctionalTests;

use Keboola\DbExtractor\TraitTests\Tables\AutoIncrementTableTrait;
use Keboola\DbExtractor\TraitTests\Tables\NullableTableTrait;
use Keboola\DbExtractor\TraitTests\Tables\SalesTableTrait;
use Keboola\DbExtractor\TraitTests\Tables\SimpleTableTrait;
use Keboola\DbExtractor\TraitTests\Tables\SpecialTableTrait;
use Keboola\DbExtractor\TraitTests\Tables\TimestampTableTrait;
use \PDO;

class DatabaseManager
{
    use SimpleTableTrait;
    use AutoIncrementTableTrait;
    use SalesTableTrait;
    use SpecialTableTrait;
    use TimestampTableTrait;
    use NullableTableTrait;

    protected PDO $connection;

    public function __construct(PDO $connection)
    {
        $this->connection = $connection;
    }
}



================================================
FILE: tests/functional/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\FunctionalTests;

use Keboola\DatadirTests\DatadirTestCase;
use Keboola\DbExtractor\TraitTests\CloseSshTunnelsTrait;
use Keboola\DbExtractor\TraitTests\RemoveAllTablesTrait;
use PDO;
use RuntimeException;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;
use \Throwable;

class DatadirTest extends DatadirTestCase
{
    use RemoveAllTablesTrait;
    use CloseSshTunnelsTrait;

    protected PDO $connection;

    protected string $testProjectDir;

    protected string $testTempDir;

    public function getConnection(): PDO
    {
        return $this->connection;
    }

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass();

        putenv('SSH_PRIVATE_KEY=' . (string) file_get_contents('/root/.ssh/id_rsa'));
        putenv('SSH_PUBLIC_KEY=' . (string) file_get_contents('/root/.ssh/id_rsa.pub'));
    }

    public function assertDirectoryContentsSame(string $expected, string $actual): void
    {
        $this->prettifyAllManifests($actual);
        $this->replaceTimestampValues($actual);
        parent::assertDirectoryContentsSame($expected, $actual);
    }

    protected function modifyConfigJsonContent(string $content): string
    {
        $config = json_decode($content, true, 512, JSON_THROW_ON_ERROR);

        if (!empty($config['parameters']['db']['ssl']['ca'])) {
            $config['parameters']['db']['ssl']['ca'] = file_get_contents(
                sprintf(
                    '%s/ssl/certs/%s',
                    $this->temp->getTmpFolder(),
                    $config['parameters']['db']['ssl']['ca']
                )
            );
        }

        return parent::modifyConfigJsonContent((string) json_encode($config));
    }

    protected function setUp(): void
    {
        parent::setUp();

        // Test dir, eg. "/code/tests/functional/full-load-ok"
        $this->testProjectDir = $this->getTestFileDir() . '/' . $this->dataName();
        $this->testTempDir = $this->temp->getTmpFolder();

        $configContent = file_get_contents($this->testProjectDir . '/source/data/config.json');

        $config = json_decode((string) $configContent, true);
        preg_match('/%env\(string:([A-Z_]+)\)%/', $config['parameters']['db']['host'], $hostEnv);

        $this->connection = PdoTestConnection::createConnection(
            (string) getenv($hostEnv[1])
        );
        $this->removeAllTables();
        $this->closeSshTunnels();

        // Load setUp.php file - used to init database state
        $setUpPhpFile = $this->testProjectDir . '/setUp.php';
        if (file_exists($setUpPhpFile)) {
            // Get callback from file and check it
            $initCallback = require $setUpPhpFile;
            if (!is_callable($initCallback)) {
                throw new RuntimeException(sprintf('File "%s" must return callback!', $setUpPhpFile));
            }

            // Invoke callback
            $initCallback($this);
        }
    }

    protected function tearDown(): void
    {
        parent::tearDown();
        $fs = new Filesystem();
        if ($fs->exists('/usr/local/share/ca-certificates/mssql.crt')) {
            $fs->remove('/usr/local/share/ca-certificates/mssql.crt');
            Process::fromShellCommandline('update-ca-certificates --fresh')->mustRun();
        }
    }

    protected function prettifyAllManifests(string $actual): void
    {
        foreach ($this->findManifests($actual . '/tables') as $file) {
            $this->prettifyJsonFile((string) $file->getRealPath());
        }
    }

    protected function prettifyJsonFile(string $path): void
    {
        $json = (string) file_get_contents($path);
        try {
            file_put_contents($path, (string) json_encode(json_decode($json), JSON_PRETTY_PRINT));
        } catch (Throwable $e) {
            // If a problem occurs, preserve the original contents
            file_put_contents($path, $json);
        }
    }

    protected function findManifests(string $dir): Finder
    {
        $finder = new Finder();
        return $finder->files()->in($dir)->name(['~.*\.manifest~']);
    }

    protected function replaceTimestampValues(string $actual): void
    {
        // In CSV
        // Eg. 0x00000000000176DD -> 0x<<RANDOM>>
        $finder = new Finder();
        $files = $finder->files()->in($actual)->name(['~.csv~']);
        foreach ($files as $file) {
            $data = (string) file_get_contents((string) $file->getRealPath());
            $data = preg_replace('~0x[0-9A-F]{16}~', '0x<<RANDOM>>', $data);
            file_put_contents((string) $file->getRealPath(), $data);
        }

        // IN state.json
        $stateJsonPath = $actual . '/state.json';
        if (file_exists($stateJsonPath)) {
            $data = (string) file_get_contents($stateJsonPath);
            $data = preg_replace('~0x[0-9A-F]{16}~', '0x<<RANDOM>>', $data);
            file_put_contents($stateJsonPath, $data);
        }
    }
}



================================================
FILE: tests/functional/PdoTestConnection.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\FunctionalTests;

use PDO;
use PDOException;
use Keboola\DbExtractorConfig\Configuration\ValueObject\DatabaseConfig;

class PdoTestConnection
{
    public static function getDbConfigArray(): array
    {
        return [
            'host' => (string) getenv('MSSQL_DB_HOST'),
            'port' => (string) getenv('MSSQL_DB_PORT'),
            'user' => (string) getenv('MSSQL_DB_USER'),
            '#password' => (string) getenv('MSSQL_DB_PASSWORD'),
            'database' => (string) getenv('MSSQL_DB_DATABASE'),
        ];
    }

    public static function createDbConfig(?string $dbHost = null): DatabaseConfig
    {
        $dbConfig = self::getDbConfigArray();
        if ($dbHost) {
            $dbConfig['host'] = $dbHost;
        }
        return DatabaseConfig::fromArray($dbConfig);
    }

    public static function createConnection(?string $dbHost = null): PDO
    {
        $dbConfig = self::createDbConfig($dbHost);

        $host = $dbConfig->getHost();
        $host .= $dbConfig->hasPort() ? ',' . $dbConfig->getPort() : '';
        $dsn['Server'] = $host;
        if ($dbConfig->hasSSLConnection()) {
            $dsn['Encrypt'] = 'true';
            $dsn['TrustServerCertificate'] =
                $dbConfig->getSslConnectionConfig()->isVerifyServerCert() ? 'false' : 'true';
        }

        // ms sql doesn't support options
        try {
            $pdo = self::createPdoInstance($dbConfig, $dsn);
        } catch (PDOException $e) {
            if (strpos($e->getMessage(), 'certificate verify failed:subject name does not match host name') &&
                $dbConfig->hasSSLConnection() &&
                $dbConfig->getSslConnectionConfig()->isIgnoreCertificateCn()
            ) {
                $dsn['TrustServerCertificate'] = 'true';

                $pdo = self::createPdoInstance($dbConfig, $dsn);
            } else {
                throw $e;
            }
        }

        $pdo->exec('USE master');
        $pdo->exec(sprintf("
            IF NOT EXISTS(select * from sys.databases where name='%s') 
            CREATE DATABASE %s
        ", $dbConfig->getDatabase(), $dbConfig->getDatabase()));
        $pdo->exec(sprintf('USE %s', $dbConfig->getDatabase()));

        return $pdo;
    }

    private static function createPdoInstance(DatabaseConfig $dbConfig, array $dsn): PDO
    {
        $dsn = sprintf('sqlsrv:%s', implode(';', array_map(function ($key, $item) {
            return sprintf('%s=%s', $key, $item);
        }, array_keys($dsn), $dsn)));

        return new PDO($dsn, $dbConfig->getUsername(), $dbConfig->getPassword(), [
            PDO::ATTR_ERRMODE  => PDO::ERRMODE_EXCEPTION,
        ]);
    }
}



================================================
FILE: tests/functional/bcp-and-pdo-disabled/expected-code
================================================
1



================================================
FILE: tests/functional/bcp-and-pdo-disabled/expected-stdout
================================================
[Empty file]


================================================
FILE: tests/functional/bcp-and-pdo-disabled/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/bcp-and-pdo-disabled-config-row/expected-code
================================================
1



================================================
FILE: tests/functional/bcp-and-pdo-disabled-config-row/expected-stdout
================================================
[Empty file]


================================================
FILE: tests/functional/bcp-and-pdo-disabled-config-row/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/bcp-disabled/expected-code
================================================
0



================================================
FILE: tests/functional/bcp-disabled/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/bcp-disabled/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "special" to "in.c-main.special".
Exporting by "BCP" adapter.
Adapter "BCP" skipped: Disabled in configuration.
Exporting by "PDO" adapter.
Exported "7" rows to "in.c-main.special".
Extractor finished successfully.



================================================
FILE: tests/functional/bcp-disabled/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/bcp-retry/expected-code
================================================
1



================================================
FILE: tests/functional/bcp-retry/expected-stderr
================================================
Export by "BCP" adapter failed: Export process failed. Output:  Starting copy... SQLState = S1000, NativeError = 0 Error = [Microsoft][ODBC Driver 17 for SQL Server]Unable to resolve column level collations SQLState = S0002, NativeError = 208 Error = [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid object name 'unexistsTable'.  BCP copy out failed .    Error Output: .
Export by "PDO" adapter failed: [in.c-main.sales]: DB query failed: SQLSTATE[42S02]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid object name 'unexistsTable'. Tried 5 times.
[in.c-main.sales]: DB query failed: SQLSTATE[42S02]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid object name 'unexistsTable'. Tried 5 times.



================================================
FILE: tests/functional/bcp-retry/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "sales" to "in.c-main.sales".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT * FROM unexistsTable' queryout 'in.c-main.sales.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Export process failed. Output:  Starting copy... SQLState = S1000, NativeError = 0 Error = [Microsoft][ODBC Driver 17 for SQL Server]Unable to resolve column level collations SQLState = S0002, NativeError = 208 Error = [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid object name 'unexistsTable'.  BCP copy out failed .    Error Output: .. Retrying... [1x]
Executing BCP command: bcp 'SELECT * FROM unexistsTable' queryout 'in.c-main.sales.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Export process failed. Output:  Starting copy... SQLState = S1000, NativeError = 0 Error = [Microsoft][ODBC Driver 17 for SQL Server]Unable to resolve column level collations SQLState = S0002, NativeError = 208 Error = [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid object name 'unexistsTable'.  BCP copy out failed .    Error Output: .. Retrying... [2x]
Executing BCP command: bcp 'SELECT * FROM unexistsTable' queryout 'in.c-main.sales.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exporting by "PDO" adapter.
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
SQLSTATE[42S02]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid object name 'unexistsTable'.. Retrying... [1x]
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
SQLSTATE[42S02]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid object name 'unexistsTable'.. Retrying... [2x]
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
SQLSTATE[42S02]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid object name 'unexistsTable'.. Retrying... [3x]
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
SQLSTATE[42S02]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid object name 'unexistsTable'.. Retrying... [4x]
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'



================================================
FILE: tests/functional/clause-with-single-quote/expected-code
================================================
0



================================================
FILE: tests/functional/clause-with-single-quote/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/clause-with-single-quote/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "special" to "in.c-main.special".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT TOP 5 "usergender", "sku" FROM "sales" WHERE "usergender" LIKE '\''male'\''' queryout 'in.c-main.special.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exported "5" rows to "in.c-main.special".
Extractor finished successfully.



================================================
FILE: tests/functional/clause-with-single-quote/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);
};



================================================
FILE: tests/functional/columns-ordering/expected-code
================================================
0



================================================
FILE: tests/functional/columns-ordering/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/columns-ordering/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/different-quoting/expected-code
================================================
0



================================================
FILE: tests/functional/different-quoting/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/different-quoting/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "special" to "in.c-main.special".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT usergender, [sku]  FROM sales WHERE "usergender" LIKE '\''male'\''' queryout 'in.c-main.special.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exported "40" rows to "in.c-main.special".
Extractor finished successfully.



================================================
FILE: tests/functional/different-quoting/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);
};



================================================
FILE: tests/functional/error-incremental-fetching-advanced-query/expected-code
================================================
1



================================================
FILE: tests/functional/error-incremental-fetching-advanced-query/expected-stderr
================================================
The "incrementalFetchingColumn" is configured, but incremental fetching is not supported for custom query.



================================================
FILE: tests/functional/error-incremental-fetching-advanced-query/expected-stdout
================================================
[Empty file]


================================================
FILE: tests/functional/error-incremental-fetching-advanced-query/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/error-incremental-fetching-fake-column/expected-code
================================================
1



================================================
FILE: tests/functional/error-incremental-fetching-fake-column/expected-stderr
================================================
Column "fakeCol" specified for incremental fetching was not found.



================================================
FILE: tests/functional/error-incremental-fetching-fake-column/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'



================================================
FILE: tests/functional/error-incremental-fetching-fake-column/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/error-incremental-fetching-string-column/expected-code
================================================
1



================================================
FILE: tests/functional/error-incremental-fetching-string-column/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'



================================================
FILE: tests/functional/error-incremental-fetching-string-column/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/error-invalid-query/expected-code
================================================
1



================================================
FILE: tests/functional/error-invalid-query/expected-stderr
================================================
Export by "BCP" adapter failed: Export process failed. Output:  Starting copy... SQLState = S1000, NativeError = 0 Error = [Microsoft][ODBC Driver 17 for SQL Server]Unable to resolve column level collations SQLState = S0022, NativeError = 207 Error = [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'SOMETHING'.  BCP copy out failed .    Error Output: .
Export by "PDO" adapter failed: [in.c-main.special]: DB query failed: SQLSTATE[42S22]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'SOMETHING'. Tried 5 times.
[in.c-main.special]: DB query failed: SQLSTATE[42S22]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'SOMETHING'. Tried 5 times.



================================================
FILE: tests/functional/error-invalid-query/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "special" to "in.c-main.special".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT SOMETHING INVALID FROM "dbo"."special"' queryout 'in.c-main.special.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exporting by "PDO" adapter.
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
SQLSTATE[42S22]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'SOMETHING'.. Retrying... [1x]
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
SQLSTATE[42S22]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'SOMETHING'.. Retrying... [2x]
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
SQLSTATE[42S22]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'SOMETHING'.. Retrying... [3x]
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
SQLSTATE[42S22]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Invalid column name 'SOMETHING'.. Retrying... [4x]
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'



================================================
FILE: tests/functional/error-invalid-query/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/get-tables-action/expected-code
================================================
0



================================================
FILE: tests/functional/get-tables-action/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/get-tables-action/expected-stdout
================================================
{"tables":[{"name":"sales","schema":"dbo","columns":[{"name":"usergender","type":"text","primaryKey":false},{"name":"usercity","type":"text","primaryKey":false},{"name":"usersentiment","type":"text","primaryKey":false},{"name":"zipcode","type":"text","primaryKey":false},{"name":"sku","type":"text","primaryKey":false},{"name":"createdat","type":"varchar","primaryKey":false},{"name":"category","type":"text","primaryKey":false},{"name":"price","type":"text","primaryKey":false},{"name":"county","type":"text","primaryKey":false},{"name":"countycode","type":"text","primaryKey":false},{"name":"userstate","type":"text","primaryKey":false},{"name":"categorygroup","type":"text","primaryKey":false}]},{"name":"simple","schema":"dbo","columns":[{"name":"id","type":"int","primaryKey":false},{"name":"name","type":"varchar","primaryKey":false}]},{"name":"special","schema":"dbo","columns":[{"name":"col1","type":"text","primaryKey":false},{"name":"col2","type":"text","primaryKey":false}]}],"status":"success"}



================================================
FILE: tests/functional/get-tables-action/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // sales table
    $manager->createSalesTable();

    // special table
    $manager->createSpecialTable();
};



================================================
FILE: tests/functional/get-tables-empty-table-name/expected-code
================================================
0



================================================
FILE: tests/functional/get-tables-empty-table-name/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/get-tables-empty-table-name/expected-stdout
================================================
{"tables":[{"name":" ","schema":"dbo","columns":[{"name":"ID","type":"int","primaryKey":false}]}],"status":"success"}



================================================
FILE: tests/functional/get-tables-empty-table-name/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    $columns = [
        'ID' => 'INT NULL',
    ];

    // create table with empty name
    $manager->createTable(' ', $columns);
};



================================================
FILE: tests/functional/incremental-fetching-datetime/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-datetime/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-datetime/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/incremental-fetching-datetime-with-state/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-datetime-with-state/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-datetime-with-state/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/incremental-fetching-datetime2/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-datetime2/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-datetime2/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());
    $manager->createAITable('datetime2-table', 'datetime2');
    $manager->generateAIRows('datetime2-table');
    $manager->addAIConstraint('datetime2-table');
};



================================================
FILE: tests/functional/incremental-fetching-datetime2-with-state/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-datetime2-with-state/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-datetime2-with-state/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());
    $manager->createAITable('datetime2-table', 'datetime2');
    $manager->generateAIRows('datetime2-table');
    $manager->addAIConstraint('datetime2-table');
};



================================================
FILE: tests/functional/incremental-fetching-decimal/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-decimal/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-decimal/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/incremental-fetching-decimal-with-state/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-decimal-with-state/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-decimal-with-state/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/incremental-fetching-empty-rows/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-empty-rows/expected-stderr
================================================
Query result set is empty. Exported "0" rows to "in.c-main.auto-increment-timestamp".



================================================
FILE: tests/functional/incremental-fetching-empty-rows/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
};



================================================
FILE: tests/functional/incremental-fetching-int/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-int/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-int/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/incremental-fetching-int-with-limit/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-int-with-limit/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-int-with-limit/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/incremental-fetching-int-with-state/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-int-with-state/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-int-with-state/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/incremental-fetching-int-with-state-and-limit/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-int-with-state-and-limit/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-int-with-state-and-limit/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/incremental-fetching-null-cols/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-null-cols/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-null-cols/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());
    $manager->createNullableTable();
    $manager->generateNullableTableRows();
};



================================================
FILE: tests/functional/incremental-fetching-null-cols-state/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-null-cols-state/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-null-cols-state/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());
    $manager->createNullableTable();
    $manager->generateNullableTableRows();
};



================================================
FILE: tests/functional/incremental-fetching-smalldatetime/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-smalldatetime/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-smalldatetime/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/incremental-fetching-smalldatetime-with-state/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-smalldatetime-with-state/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-smalldatetime-with-state/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/incremental-fetching-timestamp/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-timestamp/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-timestamp/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createTimestampTable();
    $manager->generateTimestampRows();
};



================================================
FILE: tests/functional/incremental-fetching-timestamp-with-state-1/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-timestamp-with-state-1/expected-stderr
================================================
Query result set is empty. Exported "0" rows to "in.c-main.timestamp".



================================================
FILE: tests/functional/incremental-fetching-timestamp-with-state-1/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Timestamp table
    $manager->createTimestampTable();
    $manager->generateTimestampRows();
};



================================================
FILE: tests/functional/incremental-fetching-timestamp-with-state-2/expected-code
================================================
0



================================================
FILE: tests/functional/incremental-fetching-timestamp-with-state-2/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/incremental-fetching-timestamp-with-state-2/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createTimestampTable();
    $manager->generateTimestampRows();
};



================================================
FILE: tests/functional/no-lock/expected-code
================================================
0



================================================
FILE: tests/functional/no-lock/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/no-lock/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/no-lock-advanced-query-config-row/expected-code
================================================
0



================================================
FILE: tests/functional/no-lock-advanced-query-config-row/expected-stderr
================================================
Export by "BCP" adapter failed: The BCP command produced an invalid csv.



================================================
FILE: tests/functional/no-lock-advanced-query-config-row/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/no-lock-config-row/expected-code
================================================
0



================================================
FILE: tests/functional/no-lock-config-row/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/no-lock-config-row/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();
};



================================================
FILE: tests/functional/numeric-default-values/expected-code
================================================
0



================================================
FILE: tests/functional/numeric-default-values/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/numeric-default-values/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "simple" to "in.c-main.simple".
Exporting by "BCP" adapter.
Executing BCP command: bcp 'SELECT [int], [decimal], [float] FROM [dbo].[simple]' queryout 'in.c-main.simple.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exported "1" rows to "in.c-main.simple".
Extractor finished successfully.



================================================
FILE: tests/functional/numeric-default-values/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createTable('simple', [
        'int' => 'INT DEFAULT 123',
        'decimal' => 'DECIMAL DEFAULT 123.45',
        'float' => 'FLOAT DEFAULT 987.65',
    ]);

    $manager->insertRows(
        'simple',
        ['int', 'decimal', 'float'],
        [[1, 123, 987]]
    );
};



================================================
FILE: tests/functional/pdo-fallback/expected-code
================================================
0



================================================
FILE: tests/functional/pdo-fallback/expected-stderr
================================================
Export by "BCP" adapter failed: The BCP command produced an invalid csv.



================================================
FILE: tests/functional/pdo-fallback/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "special" to "in.c-main.special".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT *  FROM "special";' queryout 'in.c-main.special.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exporting by "PDO" adapter.
Exported "7" rows to "in.c-main.special".
Extractor finished successfully.



================================================
FILE: tests/functional/pdo-fallback/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/pdo-fallback-disabled/expected-code
================================================
1



================================================
FILE: tests/functional/pdo-fallback-disabled/expected-stderr
================================================
Export by "BCP" adapter failed: The BCP command produced an invalid csv.
Disabled in configuration.



================================================
FILE: tests/functional/pdo-fallback-disabled/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "special" to "in.c-main.special".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT *  FROM "special";' queryout 'in.c-main.special.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exporting by "PDO" adapter.
Adapter "PDO" skipped: Disabled in configuration.



================================================
FILE: tests/functional/pdo-fallback-disabled/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/pdo-fallback-disabled-config-row/expected-code
================================================
1



================================================
FILE: tests/functional/pdo-fallback-disabled-config-row/expected-stderr
================================================
Export by "BCP" adapter failed: The BCP command produced an invalid csv.
Disabled in configuration.



================================================
FILE: tests/functional/pdo-fallback-disabled-config-row/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "special" to "in.c-main.special".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT *  FROM "special";' queryout 'in.c-main.special.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exporting by "PDO" adapter.
Adapter "PDO" skipped: Disabled in configuration.



================================================
FILE: tests/functional/pdo-fallback-disabled-config-row/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/pdo-fallback-simple-no-data/expected-code
================================================
0



================================================
FILE: tests/functional/pdo-fallback-simple-no-data/expected-stderr
================================================
Query result set is empty. Exported "0" rows to "in.c-main.special".



================================================
FILE: tests/functional/pdo-fallback-simple-no-data/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "special" to "in.c-main.special".
Exporting by "BCP" adapter.
Executing BCP command: bcp 'SELECT [id], char(34) + COALESCE(REPLACE([name], char(34), char(34) + char(34)),'\'''\'') + char(34) AS [name] FROM [dbo].[simple]' queryout 'in.c-main.special.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Extractor finished successfully.



================================================
FILE: tests/functional/pdo-fallback-simple-no-data/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple table
    $manager->createSimpleTable();
};



================================================
FILE: tests/functional/run-action/expected-code
================================================
0



================================================
FILE: tests/functional/run-action/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/run-action/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/run-action-via-ssh-tunnel/expected-code
================================================
0



================================================
FILE: tests/functional/run-action-via-ssh-tunnel/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/run-action-via-ssh-tunnel/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/simplified-pdo-fallback-query/expected-code
================================================
0



================================================
FILE: tests/functional/simplified-pdo-fallback-query/expected-stderr
================================================
Export by "BCP" adapter failed: Export process failed. Output:  Starting copy... SQLState = S1000, NativeError = 0 Error = [Microsoft][ODBC Driver 17 for SQL Server]Unable to resolve column level collations SQLState = 37000, NativeError = 8116 Error = [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Argument data type sql_variant is invalid for argument 1 of replace function.  BCP copy out failed .    Error Output: .



================================================
FILE: tests/functional/simplified-pdo-fallback-query/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "pdo test" to "in.c-main.pdo_test".
Exporting by "BCP" adapter.
Executing BCP command: bcp 'SELECT [ID], char(34) + COALESCE(REPLACE([PROB_COL], char(34), char(34) + char(34)),'\'''\'') + char(34) AS [PROB_COL] FROM [dbo].[PDO_TEST]' queryout 'in.c-main.pdo_test.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exporting by "PDO" adapter.
Exported "2" rows to "in.c-main.pdo_test".
Extractor finished successfully.



================================================
FILE: tests/functional/simplified-pdo-fallback-query/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // custom table
    $columns = [
        'ID' => 'INT NULL',
        'PROB_COL' => 'sql_variant DEFAULT null',
    ];
    $manager->createTable('PDO_TEST', $columns);
    $manager->insertRows(
        'PDO_TEST',
        ['ID', 'PROB_COL'],
        [
            ['', 'GETDATE()'],
            ['', null],
        ]
    );
};



================================================
FILE: tests/functional/small-datetime/expected-code
================================================
0



================================================
FILE: tests/functional/small-datetime/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/small-datetime/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql,1433;Database=test'
Exporting "pdo test" to "in.c-main.pdo_test".
Exporting by "BCP" adapter.
Executing BCP command: bcp 'SELECT [ID], [SMALLDATE] FROM [dbo].[SMALLDATETIME_TEST]' queryout 'in.c-main.pdo_test.csv' -S 'mssql,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exported "2" rows to "in.c-main.pdo_test".
Extractor finished successfully.



================================================
FILE: tests/functional/small-datetime/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // custom table
    $columns = [
        'ID' => 'INT NULL',
        'SMALLDATE' => 'SMALLDATETIME NOT NULL',
    ];
    $manager->createTable('SMALLDATETIME_TEST', $columns);
    $manager->insertRows(
        'SMALLDATETIME_TEST',
        ['ID', 'SMALLDATE'],
        [
            [1, 'GETDATE()'],
            [2, 'GETDATE()'],
        ]
    );
};



================================================
FILE: tests/functional/ssl-invalid-cn-certificate/expected-code
================================================
1



================================================
FILE: tests/functional/ssl-invalid-cn-certificate/expected-stderr
================================================
Error connecting to DB: SQLSTATE[08001]: [Microsoft][ODBC Driver 17 for SQL Server]SSL Provider: [error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed:subject name does not match host name]



================================================
FILE: tests/functional/ssl-invalid-cn-certificate/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql-ssl-invalid-cn,1433;Database=test;Encrypt=true;TrustServerCertificate=false'



================================================
FILE: tests/functional/ssl-invalid-cn-certificate/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/ssl-not-verify-cert-missing-certificate/expected-code
================================================
0



================================================
FILE: tests/functional/ssl-not-verify-cert-missing-certificate/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/ssl-not-verify-cert-missing-certificate/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql-ssl,1433;Database=test;Encrypt=true;TrustServerCertificate=true'
Using SSL connection
Exporting "sales" to "in.c-main.sales".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT * FROM sales' queryout 'in.c-main.sales.csv' -S 'mssql-ssl,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exported "100" rows to "in.c-main.sales".
Extractor finished successfully.



================================================
FILE: tests/functional/ssl-not-verify-cert-missing-certificate/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/ssl-not-verify-cert-valid-certificate/expected-code
================================================
0



================================================
FILE: tests/functional/ssl-not-verify-cert-valid-certificate/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/ssl-not-verify-cert-valid-certificate/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql-ssl,1433;Database=test;Encrypt=true;TrustServerCertificate=true'
Using SSL connection
Exporting "sales" to "in.c-main.sales".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT * FROM sales' queryout 'in.c-main.sales.csv' -S 'mssql-ssl,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exported "100" rows to "in.c-main.sales".
Extractor finished successfully.



================================================
FILE: tests/functional/ssl-not-verify-cert-valid-certificate/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/ssl-verify-cert-ignore-invalid-cn-and-ignore-invalid-certificate/expected-code
================================================
1



================================================
FILE: tests/functional/ssl-verify-cert-ignore-invalid-cn-and-ignore-invalid-certificate/expected-stderr
================================================
Error connecting to DB: SQLSTATE[08001]: [Microsoft][ODBC Driver 17 for SQL Server]SSL Provider: [error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed:unable to get local issuer certificate]



================================================
FILE: tests/functional/ssl-verify-cert-ignore-invalid-cn-and-ignore-invalid-certificate/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql-ssl-invalid-cn,1433;Database=test;Encrypt=true;TrustServerCertificate=false'



================================================
FILE: tests/functional/ssl-verify-cert-ignore-invalid-cn-and-ignore-invalid-certificate/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/ssl-verify-cert-ignore-invalid-cn-certificate/expected-code
================================================
0



================================================
FILE: tests/functional/ssl-verify-cert-ignore-invalid-cn-certificate/expected-stderr
================================================
SQLSTATE[08001]: [Microsoft][ODBC Driver 17 for SQL Server]SSL Provider: [error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed:subject name does not match host name]



================================================
FILE: tests/functional/ssl-verify-cert-ignore-invalid-cn-certificate/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql-ssl-invalid-cn,1433;Database=test;Encrypt=true;TrustServerCertificate=false'
Connecting to DSN 'sqlsrv:Server=mssql-ssl-invalid-cn,1433;Database=test;Encrypt=true;TrustServerCertificate=true'
Using SSL connection
Exporting "sales" to "in.c-main.sales".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT * FROM sales' queryout 'in.c-main.sales.csv' -S 'mssql-ssl-invalid-cn,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exported "100" rows to "in.c-main.sales".
Extractor finished successfully.




================================================
FILE: tests/functional/ssl-verify-cert-ignore-invalid-cn-certificate/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/ssl-verify-cert-invalid-certificate/expected-code
================================================
1



================================================
FILE: tests/functional/ssl-verify-cert-invalid-certificate/expected-stderr
================================================
Error connecting to DB: SQLSTATE[08001]: [Microsoft][ODBC Driver 17 for SQL Server]SSL Provider: [error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed:unable to get local issuer certificate]



================================================
FILE: tests/functional/ssl-verify-cert-invalid-certificate/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql-ssl,1433;Database=test;Encrypt=true;TrustServerCertificate=false'



================================================
FILE: tests/functional/ssl-verify-cert-invalid-certificate/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/ssl-verify-cert-invalid-cn-certificate/expected-code
================================================
0



================================================
FILE: tests/functional/ssl-verify-cert-invalid-cn-certificate/expected-stderr
================================================
SQLSTATE[08001]: [Microsoft][ODBC Driver 17 for SQL Server]SSL Provider: [error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed:subject name does not match host name]



================================================
FILE: tests/functional/ssl-verify-cert-invalid-cn-certificate/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql-ssl-invalid-cn,1433;Database=test;Encrypt=true;TrustServerCertificate=false'
Connecting to DSN 'sqlsrv:Server=mssql-ssl-invalid-cn,1433;Database=test;Encrypt=true;TrustServerCertificate=true'
Using SSL connection
Exporting "sales" to "in.c-main.sales".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT * FROM sales' queryout 'in.c-main.sales.csv' -S 'mssql-ssl-invalid-cn,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exported "100" rows to "in.c-main.sales".
Extractor finished successfully.



================================================
FILE: tests/functional/ssl-verify-cert-invalid-cn-certificate/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/ssl-verify-cert-missing-certificate/expected-code
================================================
1



================================================
FILE: tests/functional/ssl-verify-cert-missing-certificate/expected-stderr
================================================
Error connecting to DB: SQLSTATE[08001]: [Microsoft][ODBC Driver 17 for SQL Server]SSL Provider: [error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed:unable to get local issuer certificate]



================================================
FILE: tests/functional/ssl-verify-cert-missing-certificate/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql-ssl,1433;Database=test;Encrypt=true;TrustServerCertificate=false'



================================================
FILE: tests/functional/ssl-verify-cert-missing-certificate/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/ssl-verify-cert-valid-certificate/expected-code
================================================
0



================================================
FILE: tests/functional/ssl-verify-cert-valid-certificate/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/ssl-verify-cert-valid-certificate/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql-ssl,1433;Database=test;Encrypt=true;TrustServerCertificate=false'
Using SSL connection
Exporting "sales" to "in.c-main.sales".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT * FROM sales' queryout 'in.c-main.sales.csv' -S 'mssql-ssl,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exported "100" rows to "in.c-main.sales".
Extractor finished successfully.



================================================
FILE: tests/functional/ssl-verify-cert-valid-certificate/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/ssl-without-ca/expected-code
================================================
0



================================================
FILE: tests/functional/ssl-without-ca/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/ssl-without-ca/expected-stdout
================================================
Connecting to DSN 'sqlsrv:Server=mssql-ssl,1433;Database=test;Encrypt=true;TrustServerCertificate=true'
Using SSL connection
Exporting "sales" to "in.c-main.sales".
Exporting by "BCP" adapter.
Found database server version: 15.%d.%d.%d
Executing BCP command: bcp 'SELECT TOP 3 * FROM sales' queryout 'in.c-main.sales.csv' -S 'mssql-ssl,1433' -U 'sa' -P ***** -d 'test' -q -k -b 50000 -m 1 -t "," -r "\n" -c
Exported "3" rows to "in.c-main.sales".
Extractor finished successfully.



================================================
FILE: tests/functional/ssl-without-ca/setUp.php
================================================
<?php

declare(strict_types=1);

use Keboola\DbExtractor\FunctionalTests\DatadirTest;
use Keboola\DbExtractor\FunctionalTests\DatabaseManager;

return function (DatadirTest $test): void {
    $manager = new DatabaseManager($test->getConnection());

    // simple empty table
    $manager->createSimpleTable();

    // Auto increment table
    $manager->createAITable();
    $manager->generateAIRows();
    $manager->addAIConstraint();

    // sales table
    $manager->createSalesTable();
    $manager->generateSalesRows();
    $manager->addSalesConstraint('sales', ['createdat']);

    // second sales table with foreign key
    $manager->createSalesTable('sales2');
    $manager->generateSalesRows('sales2');
    $manager->addSalesConstraint('sales2');

    // special table
    $manager->createSpecialTable();
    $manager->generateSpecialRows();
};



================================================
FILE: tests/functional/test-connection-action/expected-code
================================================
0



================================================
FILE: tests/functional/test-connection-action/expected-stderr
================================================
[Empty file]


================================================
FILE: tests/functional/test-connection-action/expected-stdout
================================================
{"status":"success"}



================================================
FILE: tests/phpunit/DatatypeMappingTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Tests;

use Keboola\DbExtractor\Extractor\MssqlDataType;
use PHPUnit\Framework\TestCase;

class DatatypeMappingTest extends TestCase
{
    /**
     * @dataProvider columnMetadataProvider
     * @param array $testColumn
     * @param array $expectedMetadtata
     */
    public function testDatatypeMapping(array $testColumn, array $expectedMetadtata): void
    {
        $datatype = new MssqlDataType(
            $testColumn['type'],
            array_intersect_key($testColumn, array_flip(MssqlDataType::DATATYPE_KEYS))
        );
        $datatypeMetadata = $datatype->toMetadata();
        $this->assertEquals($expectedMetadtata, $datatypeMetadata);
    }

    public function columnMetadataProvider(): array
    {
        return [
            // integer column
            [
                [
                    'name' => 'some int',
                    'sanitizedName' => 'some_int',
                    'type' => 'int',
                    'length' => 10,
                    'nullable' => false,
                    'ordinalPosition' => 1,
                    'primaryKey' => true,
                    'primaryKeyName' => 'PK_AUTOINC',
                ],
                [
                    [
                        'key' => 'KBC.datatype.type',
                        'value' => 'int',
                    ],
                    [
                        'key' => 'KBC.datatype.nullable',
                        'value' => false,
                    ],
                    [
                        'key' => 'KBC.datatype.basetype',
                        'value' => 'INTEGER',
                    ],
                    [
                        'key' => 'KBC.datatype.length',
                        'value' => 10,
                    ],
                ],
            ],
            // timestamp column
            [
                [
                    'name' => 'some timestamp',
                    'sanitizedName' => 'some_timestamp',
                    'type' => 'timestamp',
                    'length' => null,
                    'nullable' => false,
                    'ordinalPosition' => 1,
                ],
                [
                    [
                        'key' => 'KBC.datatype.type',
                        'value' => 'timestamp',
                    ],
                    [
                        'key' => 'KBC.datatype.nullable',
                        'value' => false,
                    ],
                    [
                        'key' => 'KBC.datatype.basetype',
                        'value' => 'STRING',
                    ],
                ],
            ],
            // bit column
            [
                [
                    'name' => 'some bit',
                    'sanitizedName' => 'some_bit',
                    'type' => 'bit',
                    'length' => null,
                    'nullable' => false,
                    'ordinalPosition' => 1,
                ],
                [
                    [
                        'key' => 'KBC.datatype.type',
                        'value' => 'bit',
                    ],
                    [
                        'key' => 'KBC.datatype.nullable',
                        'value' => false,
                    ],
                    [
                        'key' => 'KBC.datatype.basetype',
                        'value' => 'BOOLEAN',
                    ],
                ],
            ],
            // xml column
            [
                [
                    'name' => 'some xml',
                    'sanitizedName' => 'some_xml',
                    'type' => 'xml',
                    'length' => null,
                    'nullable' => false,
                    'ordinalPosition' => 1,
                ],
                [
                    [
                        'key' => 'KBC.datatype.type',
                        'value' => 'xml',
                    ],
                    [
                        'key' => 'KBC.datatype.nullable',
                        'value' => false,
                    ],
                    [
                        'key' => 'KBC.datatype.basetype',
                        'value' => 'STRING',
                    ],
                ],
            ],
        ];
    }
}



================================================
FILE: tests/phpunit/MssqlDataTypeTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Tests;

use Keboola\DbExtractor\Exception\UserException;
use Keboola\DbExtractor\Extractor\MssqlDataType;
use PHPUnit\Framework\TestCase;

class MssqlDataTypeTest extends TestCase
{
    /**
     * @dataProvider columnDataTypeProvider
     */
    public function testIncrementalFetchingType(array $column, string $expectedType): void
    {
        $this->assertEquals(MssqlDataType::getIncrementalFetchingType($column['name'], $column['type']), $expectedType);
    }


    public function columnDataTypeProvider(): array
    {
        return [
            'integer' => [
                ['name' => 'intColumn', 'type' => 'integer'],
                MssqlDataType::INCREMENT_TYPE_NUMERIC,
            ],
            'decimal' => [
                ['name' => 'decColumn', 'type' => 'decimal'],
                MssqlDataType::INCREMENT_TYPE_NUMERIC,
            ],
            'money' => [
                ['name' => 'moneyColumn', 'type' => 'money'],
                MssqlDataType::INCREMENT_TYPE_NUMERIC,
            ],
            'smalldatetime' => [
                ['name' => 'smalldatetimeColumn', 'type' => 'smalldatetime'],
                MssqlDataType::INCREMENT_TYPE_QUOTABLE,
            ],
            'float' => [
                ['name' => 'floatCol', 'type' => 'float'],
                MssqlDataType::INCREMENT_TYPE_NUMERIC,
            ],
            'datetime' => [
                ['name' => 'datetimeColumn', 'type' => 'datetime'],
                MssqlDataType::INCREMENT_TYPE_DATETIME,
            ],
            'datetime2' => [
                ['name' => 'datetime2Column', 'type' => 'datetime2'],
                MssqlDataType::INCREMENT_TYPE_DATETIME,
            ],
            'timestamp' => [
                ['name' => 'lastUpdate', 'type' => 'timestamp'],
                MssqlDataType::INCREMENT_TYPE_BINARY,
            ],
        ];
    }

    public function testInvalidIncrementalFetchingType(): void
    {
        $this->expectException(UserException::class);
        MssqlDataType::getIncrementalFetchingType('varcharColumn', 'varchar');
    }
}



================================================
FILE: tests/phpunit/MSSQLPdoTestConnection.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Tests;;

use PDO;
use PDOException;
use Keboola\DbExtractorConfig\Configuration\ValueObject\DatabaseConfig;

class MSSQLPdoTestConnection
{
    public static function getDbConfigArray(): array
    {
        return [
            'host' => (string) getenv('MSSQL_DB_HOST'),
            'port' => (string) getenv('MSSQL_DB_PORT'),
            'user' => (string) getenv('MSSQL_DB_USER'),
            '#password' => (string) getenv('MSSQL_DB_PASSWORD'),
            'database' => (string) getenv('MSSQL_DB_DATABASE'),
        ];
    }

    public static function createDbConfig(?string $dbHost = null): DatabaseConfig
    {
        $dbConfig = self::getDbConfigArray();
        if ($dbHost) {
            $dbConfig['host'] = $dbHost;
        }
        return DatabaseConfig::fromArray($dbConfig);
    }

    public static function createConnection(?string $dbHost = null): PDO
    {
        $dbConfig = self::createDbConfig($dbHost);

        $host = $dbConfig->getHost();
        $host .= $dbConfig->hasPort() ? ':' . $dbConfig->getPort() : '';
        $dsn['host'] = $host;
        if ($dbConfig->hasSSLConnection()) {
            $dsn['Encrypt'] = 'true';
            $dsn['TrustServerCertificate'] =
                $dbConfig->getSslConnectionConfig()->isVerifyServerCert() ? 'false' : 'true';
        }

        // ms sql doesn't support options
        try {
            $pdo = self::createPdoInstance($dbConfig, $dsn);
        } catch (PDOException $e) {
            if (strpos($e->getMessage(), 'certificate verify failed:subject name does not match host name') &&
                $dbConfig->hasSSLConnection() &&
                $dbConfig->getSslConnectionConfig()->isIgnoreCertificateCn()
            ) {
                $dsn['TrustServerCertificate'] = 'true';

                $pdo = self::createPdoInstance($dbConfig, $dsn);
            } else {
                throw $e;
            }
        }

        $pdo->exec('USE master');
        $pdo->exec(sprintf("
            IF NOT EXISTS(select * from master.dbo.sysdatabases where name='%s') 
            CREATE DATABASE %s
        ", $dbConfig->getDatabase(), $dbConfig->getDatabase()));
        $pdo->exec(sprintf('USE %s', $dbConfig->getDatabase()));

        return $pdo;
    }

    private static function createPdoInstance(DatabaseConfig $dbConfig, array $dsn): PDO
    {
        $dsn = sprintf('dblib:%s', implode(';', array_map(function ($key, $item) {
            return sprintf('%s=%s', $key, $item);
        }, array_keys($dsn), $dsn)));

        return new PDO($dsn, $dbConfig->getUsername(), $dbConfig->getPassword(), [
            PDO::ATTR_ERRMODE  => PDO::ERRMODE_EXCEPTION,
        ]);
    }
}



================================================
FILE: tests/phpunit/MSSQLRetryTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Tests;

use Keboola\DbExtractor\Extractor\MssqlRetryFactory;
use PDOException;
use PHPUnit\Framework\TestCase;
use Psr\Log\Test\TestLogger;
use RuntimeException;

class MSSQLRetryTest extends TestCase
{
    public function testNoRetry(): void
    {
        $logger = new TestLogger();
        $proxy = MssqlRetryFactory::createProxy($logger, 3);

        try {
            $proxy->call(function (): void {
                // Runtime exception is not in default expected exception's classse
                throw new RuntimeException('Error!');
            });
            $this->fail('Expected RuntimeException.');
        } catch (RuntimeException $e) {
            // ok
        }

        $this->assertCount(0, $logger->records);
    }

    public function testSimpleRetry(): void
    {
        $logger = new TestLogger();
        $timeout = 15 * 60 * 1000; // not used, 15 min
        $maxTries = 4;
        $proxy = MssqlRetryFactory::createProxy($logger, $maxTries, $timeout, [PDOException::class]);

        $realTries = 0;
        try {
            $proxy->call(function () use (&$realTries): void {
                $realTries++;
                throw new PDOException('Error!');
            });
            $this->fail('Expected PdoException.');
        } catch (PDOException $e) {
            // ok
        }

        $this->assertSame($realTries, $maxTries);
        $this->assertTrue($logger->hasInfoThatContains('Error!. Retrying... [1x]'));
        $this->assertTrue($logger->hasInfoThatContains('Error!. Retrying... [2x]'));
        $this->assertTrue($logger->hasInfoThatContains('Error!. Retrying... [3x]'));
        $this->assertFalse($logger->hasInfoThatContains('Error!. Retrying... [4x]'));
    }

    public function testTimeoutRetryForProblematicError(): void
    {
        $logger = new TestLogger();
        $timeout = 5 * 1000; // 5s
        $maxTries = 1;
        $proxy = MssqlRetryFactory::createProxy($logger, $maxTries, $timeout, [PDOException::class]);

        $realTries = 0;
        $start = microtime(true);
        try {
            $proxy->call(function () use (&$realTries): void {
                $realTries++;
                throw new PDOException(
                    'Client unable to establish connection because ' .
                    'an error was encountered during handshakes before login.'
                );
            });
            $this->fail('Expected RuntimeException.');
        } catch (PDOException $e) {
            // ok
        }
        $end = microtime(true);
        $durationMs = ($end - $start) * 1000;

        // Proxy method is called 3x and retry takes 7 seconds (1s+2s+4s)
        //     exception
        //     [0s < 5s timeout] -> sleep 1s -> [1s < 5s timeout] -> retry
        //     exception
        //     [1s < 5s timeout] -> sleep 2s -> [3s < 5s timeout] -> retry
        //     exception
        //     [3s < 5s timeout] -> sleep 4s -> [7s > 5s timeout] -> NOT retry
        $this->assertSame(3, $realTries);
        $this->assertCount(3, $logger->records);
        $this->assertGreaterThanOrEqual(7000, $durationMs);
        $this->assertLessThan(8000, $durationMs);
    }
}



================================================
FILE: tests/phpunit/MssqlSqlHelperTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Tests;

use Generator;
use Keboola\DbExtractor\Metadata\MssqlSqlHelper;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

class MssqlSqlHelperTest extends TestCase
{

    /**
     * @dataProvider getDefaultValueProvider
     */
    public function testGetDefaultValue(string $dataType, string $defaultValue, string $expectedDefaultValue): void
    {
        $newDefaultValue = MssqlSqlHelper::getDefaultValue($dataType, $defaultValue);

        Assert::assertEquals($expectedDefaultValue, $newDefaultValue);
    }

    public function getDefaultValueProvider(): Generator
    {
        yield 'int with bracket' => [
            'int',
            '((12345))',
            '12345',
        ];

        yield 'int without bracket' => [
            'int',
            '12345',
            '12345',
        ];
        yield 'decimal with bracket' => [
            'decimal',
            '((123.45))',
            '123.45',
        ];

        yield 'decimal without bracket' => [
            'decimal',
            '123.45',
            '123.45',
        ];

        yield 'string with bracket' => [
            'varchar',
            '((12345))',
            '((12345))',
        ];

        yield 'string without bracket' => [
            'varchar',
            '12345',
            '12345',
        ];
    }
}



================================================
FILE: tests/phpunit/MSSQLTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Tests;

use Keboola\Csv\CsvReader;
use Keboola\DbExtractor\Adapter\Exception\UserRetriedException;
use Keboola\DbExtractor\Exception\UserException;
use Keboola\DbExtractor\Extractor\MSSQLPdoConnection;
use Keboola\DbExtractor\Metadata\MssqlManifestSerializer;
use Keboola\DbExtractor\Metadata\MssqlMetadataProvider;
use Keboola\DbExtractor\MSSQLApplication;
use Keboola\DbExtractor\Tests\Traits\ConfigTrait;
use Keboola\DbExtractor\TraitTests\CloseSshTunnelsTrait;
use Keboola\DbExtractor\TraitTests\RemoveAllTablesTrait;
use Keboola\DbExtractor\TraitTests\Tables\AutoIncrementTableTrait;
use Keboola\DbExtractor\TraitTests\Tables\SalesTableTrait;
use Keboola\DbExtractor\TraitTests\Tables\SimpleTableTrait;
use Keboola\DbExtractor\TraitTests\Tables\SpecialTableTrait;
use Keboola\DbExtractorConfig\Configuration\ValueObject\DatabaseConfig;
use Keboola\DbExtractorConfig\Configuration\ValueObject\InputTable;
use Monolog\Logger;
use PHPUnit\Framework\TestCase;
use Psr\Log\NullLogger;
use \PDO;

class MSSQLTest extends TestCase
{
    use ConfigTrait;
    use SalesTableTrait;
    use SpecialTableTrait;
    use AutoIncrementTableTrait;
    use SimpleTableTrait;
    use RemoveAllTablesTrait;
    use CloseSshTunnelsTrait;

    private string $dataDir = __DIR__ . '/data';

    protected PDO $connection;

    protected function setUp(): void
    {
        $this->connection = MSSQLPdoTestConnection::createConnection();
        $this->removeAllTables();
        $this->closeSshTunnels();
    }

    public function testCredentialsWrongDb(): void
    {
        $config = $this->getConfig();
        $config['parameters']['db']['database'] = 'nonExistentDb';
        $config['action'] = 'testConnection';
        $config['parameters']['tables'] = [];

        $app = $this->createApplication($config);
        try {
            $app->run();
            $this->fail('Must raise exception');
        } catch (UserException $e) {
            $this->assertStringContainsString(
                'Cannot open database "nonExistentDb" requested by the login.',
                $e->getMessage()
            );
        }
    }

    public function testRunWithoutTables(): void
    {
        $config = $this->getConfig();

        $config['parameters']['tables'] = [];

        $app = $this->createApplication($config);
        $result = $app->run();

        $this->assertArrayHasKey('status', $result);
        $this->assertEquals('success', $result['status']);
    }

    public function testRunNoRows(): void
    {
        $this->createSalesTable();
        $this->generateSalesRows();

        $salesManifestFile = $this->dataDir . '/out/tables/in.c-main.sales.csv.manifest';
        $salesDataFile = $this->dataDir . '/out/tables/in.c-main.sales.csv';
        @unlink($salesDataFile);
        @unlink($salesManifestFile);

        $config = $this->getConfig();
        unset($config['parameters']['tables'][1]);
        unset($config['parameters']['tables'][2]);
        unset($config['parameters']['tables'][3]);

        $config['parameters']['tables'][0]['query'] = "SELECT * FROM sales WHERE usergender LIKE 'undefined'";

        $app = $this->createApplication($config);
        $result = $app->run();

        $this->assertArrayHasKey('status', $result);
        $this->assertEquals('success', $result['status']);

        $this->assertFileExists($salesManifestFile);
        $this->assertFileExists($salesDataFile);
    }

    /**
     * @dataProvider configProvider
     */
    public function testRunConfig(array $config): void
    {
        $this->createSalesTable();
        $this->createAITable();
        $this->createSpecialTable();
        $this->generateSalesRows();
        $this->generateAIRows();
        $this->generateSpecialRows();
        $this->addAIConstraint();

        $result = $this->createApplication($config)->run();
        if (array_key_exists('tables', $config['parameters'])) {
            $this->checkTablesResult($result);
        } else {
            $this->checkRowResult($result);
        }
    }

    public function testCredentialsWithSSH(): void
    {
        $config = $this->getConfig();
        $config['action'] = 'testConnection';

        $config['parameters']['db']['ssh'] = [
            'enabled' => true,
            'keys' => [
                '#private' => $this->getPrivateKey(),
                'public' => $this->getPublicKey(),
            ],
            'user' => 'root',
            'sshHost' => 'sshproxy',
            'remoteHost' => 'mssql',
            'remotePort' => '1433',
            'localPort' => '1235',
        ];

        $config['parameters']['tables'] = [];

        $app = $this->createApplication($config);
        $result = $app->run();

        $this->assertArrayHasKey('status', $result);
        $this->assertEquals('success', $result['status']);
    }

    public function testXMLtoNVarchar(): void
    {
        $this->connection->exec('CREATE TABLE [XML_TEST] ([ID] INT NOT NULL, [XML_COL] XML NULL);');
        $this->connection->exec(
            'INSERT INTO [XML_TEST] ' .
            "VALUES (1, '<test>some test xml </test>'), (2, null), (3, '<test>some test xml </test>')"
        );
        $config = $this->getConfig();
        unset($config['parameters']['tables'][1]);
        unset($config['parameters']['tables'][2]);
        unset($config['parameters']['tables'][3]);
        unset($config['parameters']['tables'][0]['query']);
        $config['parameters']['tables'][0]['table'] = ['tableName' => 'XML_TEST', 'schema' => 'dbo'];
        $config['parameters']['tables'][0]['outputTable'] = 'in.c-main.xml_test';

        $result = $this->createApplication($config)->run();

        $this->assertEquals('success', $result['status']);
    }

    public function testStripNulls(): void
    {
        $this->connection->exec(
            'CREATE TABLE [NULL_TEST] ' .
            "([ID] VARCHAR(5) NULL, [NULL_COL] NVARCHAR(10) DEFAULT '', [col2] VARCHAR(55));"
        );
        $this->connection->exec(
            "INSERT INTO [NULL_TEST] VALUES
            ('', '', 'test with ' + CHAR(0) + ' inside'),
            ('', '', ''),
            ('3', '', 'test')"
        );
        $config = $this->getConfig();
        unset($config['parameters']['tables'][1]);
        unset($config['parameters']['tables'][2]);
        unset($config['parameters']['tables'][3]);
        unset($config['parameters']['tables'][0]['table']);
        $config['parameters']['tables'][0]['query'] = 'SELECT * FROM [NULL_TEST]';
        $config['parameters']['tables'][0]['outputTable'] = 'in.c-main.null_test';

        $result = $this->createApplication($config)->run();

        $outputData = iterator_to_array(new CsvReader($this->dataDir . '/out/tables/in.c-main.null_test.csv'));

        $this->assertStringNotContainsString(chr(0), $outputData[0][0]);
        $this->assertStringNotContainsString(chr(0), $outputData[0][1]);
        $this->assertEquals('test with ' . chr(0) . ' inside', $outputData[0][2]);
        $this->assertStringNotContainsString(chr(0), $outputData[1][0]);
        $this->assertStringNotContainsString(chr(0), $outputData[1][1]);
        $this->assertStringNotContainsString(chr(0), $outputData[1][2]);
        $this->assertStringNotContainsString(chr(0), $outputData[2][1]);
        $this->assertEquals('success', $result['status']);
    }

    public function testMultipleSelectStatements(): void
    {
        $this->createSalesTable();
        $this->generateSalesRows();

        $config = $this->getConfig();
        unset($config['parameters']['tables'][1]);
        unset($config['parameters']['tables'][2]);
        unset($config['parameters']['tables'][3]);
        unset($config['parameters']['tables'][0]['table']);
        $config['parameters']['tables'][0]['query'] =
            'SELECT usergender INTO #temptable ' .
            "FROM sales WHERE usergender LIKE 'undefined';  " .
            'SELECT * FRoM sales WHERE usergender IN (SELECT * FROM #temptable);';
        $config['parameters']['tables'][0]['name'] = 'multipleselect_test';
        $config['parameters']['tables'][0]['outputTable'] = 'in.c-main.multipleselect_test';

        $this->expectException(UserRetriedException::class);
        $this->expectExceptionMessage(
            '[in.c-main.multipleselect_test]: DB query failed: SQLSTATE[IMSSP]: ' .
            'The active result for the query contains no fields. Tried 5 times.'
        );
        $this->createApplication($config)->run();
    }

    /**
     * @dataProvider configProvider
     */
    public function testManifestMetadata(array $config): void
    {
        $this->createSalesTable();
        $this->createSalesTable('sales2');
        $this->createAITable();
        $this->createSpecialTable();
        $this->generateSalesRows();
        $this->generateSalesRows('sales2');
        $this->generateAIRows();
        $this->generateSpecialRows();
        $this->addAIConstraint();
        $this->addSalesConstraint('sales', ['createdat']);
        $this->addSalesConstraint('sales2');

        // second sales table with foreign key
        $isConfigRow = !isset($config['parameters']['tables']);

        $tableParams = ($isConfigRow) ? $config['parameters'] : $config['parameters']['tables'][0];
        unset($tableParams['query']);
        $tableParams['name'] = 'sales2';
        $tableParams['outputTable'] = 'in.c-main.sales2';
        $tableParams['primaryKey'] = ['createdat'];
        $tableParams['table'] = [
            'tableName' => 'sales2',
            'schema' => 'dbo',
        ];
        if ($isConfigRow) {
            $config['parameters'] = $tableParams;
        } else {
            $config['parameters']['tables'][0] = $tableParams;
            unset($config['parameters']['tables'][1]);
            unset($config['parameters']['tables'][2]);
            unset($config['parameters']['tables'][3]);
        }

        $result = $this->createApplication($config)->run();

        $importedTable = ($isConfigRow) ? $result['imported']['outputTable'] : $result['imported'][0]['outputTable'];

        $outputManifest = json_decode(
            (string) file_get_contents($this->dataDir . '/out/tables/' . $importedTable . '.csv.manifest'),
            true
        );

        $this->assertArrayHasKey('destination', $outputManifest);
        $this->assertArrayHasKey('incremental', $outputManifest);
        $this->assertArrayHasKey('metadata', $outputManifest);

        $this->assertArrayHasKey('column_metadata', $outputManifest);
        $this->assertCount(12, $outputManifest['column_metadata']);

        $expectedColumnMetadata = [
            'usergender' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'text',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '2147483647',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'usergender',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'usergender',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 1,
                ],
            ],
            'usercity' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'text',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '2147483647',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'usercity',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'usercity',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 2,
                ],
            ],
            'usersentiment' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'text',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '2147483647',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'usersentiment',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'usersentiment',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 3,
                ],
            ],
            'zipcode' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'text',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '2147483647',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'zipcode',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'zipcode',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 4,
                ],
            ],
            'sku' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'text',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '2147483647',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'sku',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'sku',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 5,
                ],
            ],
            'createdat' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'varchar',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '64',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'createdat',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'createdat',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 6,
                ],
                [
                    'key' => 'KBC.foreignKey',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.foreignKeyName',
                    'value' => 'FK_sales_sales2',
                ],
                [
                    'key' => 'KBC.foreignKeyRefSchema',
                    'value' => 'dbo',
                ],
                [
                    'key' => 'KBC.foreignKeyRefTable',
                    'value' => 'sales',
                ],
                [
                    'key' => 'KBC.foreignKeyRefColumn',
                    'value' => 'createdat',
                ],
            ],
            'category' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'text',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '2147483647',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'category',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'category',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 7,
                ],
            ],
            'price' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'text',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '2147483647',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'price',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'price',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 8,
                ],
            ],
            'county' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'text',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '2147483647',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'county',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'county',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 9,
                ],
            ],
            'countycode' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'text',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '2147483647',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'countycode',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'countycode',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 10,
                ],
            ],
            'userstate' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'text',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '2147483647',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'userstate',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'userstate',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 11,
                ],
            ],
            'categorygroup' => [
                [
                    'key' => 'KBC.datatype.type',
                    'value' => 'text',
                ],
                [
                    'key' => 'KBC.datatype.nullable',
                    'value' => true,
                ],
                [
                    'key' => 'KBC.datatype.basetype',
                    'value' => 'STRING',
                ],
                [
                    'key' => 'KBC.datatype.length',
                    'value' => '2147483647',
                ],
                [
                    'key' => 'KBC.sourceName',
                    'value' => 'categorygroup',
                ],
                [
                    'key' => 'KBC.sanitizedName',
                    'value' => 'categorygroup',
                ],
                [
                    'key' => 'KBC.primaryKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.uniqueKey',
                    'value' => false,
                ],
                [
                    'key' => 'KBC.ordinalPosition',
                    'value' => 12,
                ],
            ],
        ];

        $this->assertEquals($expectedColumnMetadata, $outputManifest['column_metadata']);
    }

    public function testMultipleConstraintsGetTables(): void
    {
        $this->createSimpleTable();
        $this->addSimpleConstraint();

        // Column with multiple constraints must be present in metadata only once.
        $this->connection->exec('ALTER TABLE [simple] ADD CONSTRAINT c1 UNIQUE ([name]);');
        $this->connection->exec('ALTER TABLE [simple] ADD CONSTRAINT c2 CHECK (LEN([name]) > 0);');
        $this->connection->exec('ALTER TABLE [simple] ADD CONSTRAINT c3 CHECK (LEN([name]) > 1);');
        $this->connection->exec('ALTER TABLE [simple] ADD CONSTRAINT c4 CHECK (LEN([name]) > 2);');

        $config = $this->getConfig();
        $config['action'] = 'getTables';
        $result = $this->createApplication($config)->run();
        $tables = array_values(array_filter($result['tables'], fn(array $table) => $table['name'] === 'simple'));
        $this->assertSame(
            [
                [
                    'name' => 'simple',
                    'schema' => 'dbo',
                    'columns' =>
                        [
                            [
                                'name' => 'id',
                                'type' => 'int',
                                'primaryKey' => true,
                            ],
                            [
                                'name' => 'name',
                                'type' => 'varchar',
                                'primaryKey' => false,
                            ],
                        ],
                ],
            ],
            $tables
        );
    }

    public function testMultipleConstraintsManifest(): void
    {
        $this->createSimpleTable();
        $this->addSimpleConstraint();

        // Column with multiple constraints must be present in metadata only once.
        $this->connection->exec('ALTER TABLE [simple] ADD CONSTRAINT c1 UNIQUE ([name]);');
        $this->connection->exec('ALTER TABLE [simple] ADD CONSTRAINT c2 CHECK (LEN([name]) > 0);');
        $this->connection->exec('ALTER TABLE [simple] ADD CONSTRAINT c3 CHECK (LEN([name]) > 1);');
        $this->connection->exec('ALTER TABLE [simple] ADD CONSTRAINT c4 CHECK (LEN([name]) > 2);');

        $dbConfig = DatabaseConfig::fromArray($this->getConfig()['parameters']['db']);
        $conn = new MSSQLPdoConnection(new NullLogger(), $dbConfig);
        $metadataProvider = new MssqlMetadataProvider($conn);
        $serializer = new MssqlManifestSerializer();

        $table = new InputTable('simple', 'dbo');
        $columns = $metadataProvider->getTable($table)->getColumns();

        $this->assertSame(['id', 'name'], $columns->getNames());
        $this->assertSame([
            [
                'key' => 'KBC.datatype.type',
                'value' => 'int',
            ],
            [
                'key' => 'KBC.datatype.nullable',
                'value' => false,
            ],
            [
                'key' => 'KBC.datatype.basetype',
                'value' => 'INTEGER',
            ],
            [
                'key' => 'KBC.datatype.length',
                'value' => '10',
            ],
            [
                'key' => 'KBC.sourceName',
                'value' => 'id',
            ],
            [
                'key' => 'KBC.sanitizedName',
                'value' => 'id',
            ],
            [
                'key' => 'KBC.primaryKey',
                'value' => true,
            ],
            [
                'key' => 'KBC.uniqueKey',
                'value' => false,
            ],
            [
                'key' => 'KBC.ordinalPosition',
                'value' => 1,
            ],
        ], $serializer->serializeColumn($columns->getByName('id')));
        $this->assertSame([
            [
                'key' => 'KBC.datatype.type',
                'value' => 'varchar',
            ],
            [
                'key' => 'KBC.datatype.nullable',
                'value' => true,
            ],
            [
                'key' => 'KBC.datatype.basetype',
                'value' => 'STRING',
            ],
            [
                'key' => 'KBC.datatype.length',
                'value' => '100',
            ],
            [
                'key' => 'KBC.sourceName',
                'value' => 'name',
            ],
            [
                'key' => 'KBC.sanitizedName',
                'value' => 'name',
            ],
            [
                'key' => 'KBC.primaryKey',
                'value' => false,
            ],
            [
                'key' => 'KBC.uniqueKey',
                'value' => true,
            ],
            [
                'key' => 'KBC.ordinalPosition',
                'value' => 2,
            ],
        ], $serializer->serializeColumn($columns->getByName('name')));
    }

    public function configProvider(): array
    {
        return [
            [
                $this->getConfig(),
            ],
            [
                $this->getRowConfig(),
            ],
        ];
    }

    private function createApplication(array $config, array $state = []): MSSQLApplication
    {
        $logger = new Logger('ex-db-mssql-tests');
        $app = new MSSQLApplication($config, $logger, $state, $this->dataDir);
        return $app;
    }

    private function getPrivateKey(): string
    {
        return (string) file_get_contents('/root/.ssh/id_rsa');
    }

    private function getPublicKey(): string
    {
        return (string) file_get_contents('/root/.ssh/id_rsa.pub');
    }

    private function checkRowResult(array $result): void
    {
        $this->assertEquals('success', $result['status']);
        $this->assertEquals(
            [
                'outputTable' => 'in.c-main.special',
                'rows' => 7,
            ],
            $result['imported']
        );

        $specialManifest = $this->dataDir . '/out/tables/' . $result['imported']['outputTable'] . '.csv.manifest';
        $manifest = json_decode((string) file_get_contents($specialManifest), true);
        $this->assertEquals(
            [
                'destination' => 'in.c-main.special',
                'incremental' => false,
                'metadata' =>
                    [
                        [
                            'key' => 'KBC.name',
                            'value' => 'special',
                        ],
                        [
                            'key' => 'KBC.sanitizedName',
                            'value' => 'special',
                        ],
                        [
                            'key' => 'KBC.schema',
                            'value' => 'dbo',
                        ],
                        [
                            'key' => 'KBC.catalog',
                            'value' => 'test',
                        ],
                        [
                            'key' => 'KBC.type',
                            'value' => 'BASE TABLE',
                        ],
                    ],
                'column_metadata' =>
                    [
                        'col1' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'text',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'STRING',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '2147483647',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'col1',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'col1',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => '1',
                                ],
                            ],
                        'col2' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'text',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'STRING',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '2147483647',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'col2',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'col2',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => '2',
                                ],
                            ],
                    ],
                'columns' =>
                    [
                        'col1',
                        'col2',
                    ],
            ],
            $manifest
        );
    }

    private function checkTablesResult(array $result): void
    {
        $this->assertEquals('success', $result['status']);
        $this->assertEquals(
            [
                [
                    'outputTable' => 'in.c-main.sales',
                    'rows' => 100,
                ],
                [
                    'outputTable' => 'in.c-main.tablecolumns',
                    'rows' => 100,
                ],
                [
                    'outputTable' => 'in.c-main.auto-increment-timestamp',
                    'rows' => 6,
                ],
                [
                    'outputTable' => 'in.c-main.special',
                    'rows' => 7,
                ],
            ],
            $result['imported']
        );

        $salesManifestFile = $this->dataDir . '/out/tables/' . $result['imported'][0]['outputTable'] . '.csv.manifest';
        $manifest = json_decode((string) file_get_contents($salesManifestFile), true);
        $this->assertEquals(
            [
                'destination' => 'in.c-main.sales',
                'incremental' => false,
                'columns' =>
                    [
                        'usergender',
                        'usercity',
                        'usersentiment',
                        'zipcode',
                        'sku',
                        'createdat',
                        'category',
                        'price',
                        'county',
                        'countycode',
                        'userstate',
                        'categorygroup',
                    ],
            ],
            $manifest
        );

        $tableColumnsManifest =
            $this->dataDir . '/out/tables/' . $result['imported'][1]['outputTable'] . '.csv.manifest';
        $manifest = json_decode((string) file_get_contents($tableColumnsManifest), true);
        $this->assertEquals(
            [
                'destination' => 'in.c-main.tablecolumns',
                'incremental' => false,
                'metadata' =>
                    [
                        [
                            'key' => 'KBC.name',
                            'value' => 'sales',
                        ],
                        [
                            'key' => 'KBC.sanitizedName',
                            'value' => 'sales',
                        ],
                        [
                            'key' => 'KBC.schema',
                            'value' => 'dbo',
                        ],
                        [
                            'key' => 'KBC.catalog',
                            'value' => 'test',
                        ],
                        [
                            'key' => 'KBC.type',
                            'value' => 'BASE TABLE',
                        ],
                    ],
                'column_metadata' =>
                    [
                        'usergender' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'text',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'STRING',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '2147483647',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'usergender',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'usergender',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => 1,
                                ],
                            ],
                        'usercity' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'text',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'STRING',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '2147483647',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'usercity',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'usercity',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => 2,
                                ],
                            ],
                        'usersentiment' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'text',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'STRING',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '2147483647',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'usersentiment',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'usersentiment',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => 3,
                                ],
                            ],
                        'zipcode' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'text',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'STRING',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '2147483647',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'zipcode',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'zipcode',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => 4,
                                ],
                            ],
                    ],
                'columns' =>
                    [
                        'usergender',
                        'usercity',
                        'usersentiment',
                        'zipcode',
                    ],
            ],
            $manifest
        );

        $weirdManifest = $this->dataDir . '/out/tables/' . $result['imported'][2]['outputTable'] . '.csv.manifest';
        $manifest = json_decode((string) file_get_contents($weirdManifest), true);
        // assert the timestamp column has the correct date format
        $outputData = iterator_to_array(
            new CsvReader($this->dataDir . '/out/tables/' . $result['imported'][2]['outputTable'] . '.csv')
        );
        $this->assertEquals(1, (int) $outputData[0][2]);
        $this->assertEquals('1.10', $outputData[0][3]);
        $firstTimestamp = $outputData[0][5];
        // there should be no decimal separator present (it should be cast to datetime2(0) which does not include ms)
        $this->assertEquals(1, preg_match('/^\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d$/', $firstTimestamp));
        $this->assertEquals(
            [
                'destination' => 'in.c-main.auto-increment-timestamp',
                'incremental' => false,
                'primary_key' =>
                    [
                        'Weir_d_I_D',
                    ],
                'metadata' =>
                    [
                        [
                            'key' => 'KBC.name',
                            'value' => 'auto Increment Timestamp',
                        ],
                        [
                            'key' => 'KBC.sanitizedName',
                            'value' => 'auto_Increment_Timestamp',
                        ],
                        [
                            'key' => 'KBC.schema',
                            'value' => 'dbo',
                        ],
                        [
                            'key' => 'KBC.catalog',
                            'value' => 'test',
                        ],
                        [
                            'key' => 'KBC.type',
                            'value' => 'BASE TABLE',
                        ],
                    ],
                'column_metadata' =>
                    [
                        'Weir_d_I_D' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'int',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'INTEGER',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '10',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => '_Weir%d I-D',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'Weir_d_I_D',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => 1,
                                ],
                            ],
                        'Weir_d_Na_me' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'varchar',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'STRING',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '55',
                                ],
                                [
                                    'key' => 'KBC.datatype.default',
                                    'value' => '(\'mario\')',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'Weir%d Na-me',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'Weir_d_Na_me',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => 2,
                                ],
                            ],
                        'someInteger' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'int',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'INTEGER',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '10',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'someInteger',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'someInteger',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => 3,
                                ],
                            ],
                        'someDecimal' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'decimal',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'NUMERIC',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '10,2',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'someDecimal',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'someDecimal',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => 4,
                                ],
                            ],
                        'type' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'varchar',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'STRING',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '55',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'type',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'type',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => 5,
                                ],
                            ],
                        'smalldatetime' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'smalldatetime',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'TIMESTAMP',
                                ],
                                [
                                    'key' => 'KBC.datatype.default',
                                    'value' => '(NULL)',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'smalldatetime',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'smalldatetime',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => 6,
                                ],
                            ],
                        'datetime' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'datetime',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'TIMESTAMP',
                                ],
                                [
                                    'key' => 'KBC.datatype.default',
                                    'value' => '(getdate())',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'datetime',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'datetime',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => 7,
                                ],
                            ],
                    ],
                'columns' =>
                    [
                        'Weir_d_I_D',
                        'Weir_d_Na_me',
                        'someInteger',
                        'someDecimal',
                        'type',
                        'smalldatetime',
                        'datetime',
                    ],
            ],
            $manifest
        );

        $specialManifest = $this->dataDir . '/out/tables/' . $result['imported'][3]['outputTable'] . '.csv.manifest';
        $manifest = json_decode((string) file_get_contents($specialManifest), true);
        $this->assertEquals(
            [
                'destination' => 'in.c-main.special',
                'incremental' => false,
                'metadata' =>
                    [
                        [
                            'key' => 'KBC.name',
                            'value' => 'special',
                        ],
                        [
                            'key' => 'KBC.sanitizedName',
                            'value' => 'special',
                        ],
                        [
                            'key' => 'KBC.schema',
                            'value' => 'dbo',
                        ],
                        [
                            'key' => 'KBC.catalog',
                            'value' => 'test',
                        ],
                        [
                            'key' => 'KBC.type',
                            'value' => 'BASE TABLE',
                        ],
                    ],
                'column_metadata' =>
                    [
                        'col1' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'text',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'STRING',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '2147483647',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'col1',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'col1',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => '1',
                                ],
                            ],
                        'col2' =>
                            [
                                [
                                    'key' => 'KBC.datatype.type',
                                    'value' => 'text',
                                ],
                                [
                                    'key' => 'KBC.datatype.nullable',
                                    'value' => true,
                                ],
                                [
                                    'key' => 'KBC.datatype.basetype',
                                    'value' => 'STRING',
                                ],
                                [
                                    'key' => 'KBC.datatype.length',
                                    'value' => '2147483647',
                                ],
                                [
                                    'key' => 'KBC.sourceName',
                                    'value' => 'col2',
                                ],
                                [
                                    'key' => 'KBC.sanitizedName',
                                    'value' => 'col2',
                                ],
                                [
                                    'key' => 'KBC.primaryKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.uniqueKey',
                                    'value' => false,
                                ],
                                [
                                    'key' => 'KBC.ordinalPosition',
                                    'value' => '2',
                                ],
                            ],
                    ],
                'columns' =>
                    [
                        'col1',
                        'col2',
                    ],
            ],
            $manifest
        );
    }
}



================================================
FILE: tests/phpunit/PerformanceTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Tests;

use Keboola\DbExtractor\FunctionalTests\PdoTestConnection;
use Keboola\DbExtractor\MSSQLApplication;
use Keboola\DbExtractor\Tests\Traits\ConfigTrait;
use Keboola\DbExtractor\TraitTests\RemoveAllTablesTrait;
use Monolog\Logger;
use PHPUnit\Framework\TestCase;
use \PDO;

class PerformanceTest extends TestCase
{
    public const NUMBER_OF_SCHEMAS = 5;
    public const NUMBER_OF_TABLES_PER_SCHEMA = 100;

    use ConfigTrait;
    use RemoveAllTablesTrait;

    protected string $dataDir = __DIR__ . '/data';

    protected PDO $connection;

    protected function setUp(): void
    {
        $this->connection = PdoTestConnection::createConnection();
    }

    protected function tearDown(): void
    {
        parent::tearDown();
        $this->cleanupTestSchemas();
    }

    private function cleanupTestSchemas(): void
    {
        $this->removeAllTables();
        for ($schemaCount = 0; $schemaCount < self::NUMBER_OF_SCHEMAS; $schemaCount++) {
            $this->connection->exec(sprintf('DROP SCHEMA IF EXISTS [testschema_%d]', $schemaCount));
        }
    }

    public function testThousandsOfTablesGetTables(): void
    {
        // $this->markTestSkipped("No need to run this test every time.");
        $testStartTime = time();
        $numberOfColumnsPerTable = 50;
        $maxRunTime = 10;

        // gen columns
        $columnsSql = '';
        for ($columnCount = 0; $columnCount < $numberOfColumnsPerTable; $columnCount++) {
            $columnsSql .= sprintf(", [col_%d] VARCHAR(50) NOT NULL DEFAULT ''", $columnCount);
        }

        for ($schemaCount = 0; $schemaCount < self::NUMBER_OF_SCHEMAS; $schemaCount++) {
            $this->connection->exec(sprintf('CREATE SCHEMA [testschema_%d]', $schemaCount));
            for ($tableCount = 0; $tableCount < self::NUMBER_OF_TABLES_PER_SCHEMA; $tableCount++) {
                $this->connection->exec(
                    sprintf(
                        'CREATE TABLE [testschema_%d].[testtable_%d] ' .
                        '([ID] INT IDENTITY(1,1) NOT NULL%s, CONSTRAINT pk_%d_%d PRIMARY KEY ([ID]))',
                        $schemaCount,
                        $tableCount,
                        $columnsSql,
                        $schemaCount,
                        $tableCount
                    )
                );
            }
        }

        $dbBuildTime = time() - $testStartTime;
        echo "\nTest DB built in  " . $dbBuildTime . " seconds.\n";

        $config = $this->getConfig();
        $config['action'] = 'getTables';

        $logger = new Logger('ex-db-mssql-tests');
        $app = new MSSQLApplication($config, $logger, [], $this->dataDir);

        $jobStartTime = time();
        $result = $app->run();
        $this->assertEquals('success', $result['status']);
        $runTime = time() - $jobStartTime;

        $this->assertLessThan($maxRunTime, $runTime);

        echo "\nThe tables were fetched in " . $runTime . " seconds.\n";
        $entireTime = time() - $testStartTime;
        echo "\nComplete test finished in  " . $entireTime . " seconds.\n";
    }
}



================================================
FILE: tests/phpunit/QueryFactoryTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Tests;

use Keboola\DbExtractor\Adapter\Metadata\MetadataProvider;
use Keboola\DbExtractor\Configuration\MssqlExportConfig;
use Keboola\DbExtractor\Extractor\MssqlDataType;
use Keboola\DbExtractor\Extractor\MSSQLPdoConnection;
use Keboola\DbExtractor\Extractor\MSSQLQueryFactory;
use Keboola\DbExtractor\FunctionalTests\PdoTestConnection;
use Keboola\DbExtractor\Metadata\MssqlMetadataProvider;
use Keboola\DbExtractor\TableResultFormat\Metadata\Builder\ColumnBuilder;
use Keboola\DbExtractor\TableResultFormat\Metadata\Builder\TableBuilder;
use Keboola\DbExtractor\Tests\Traits\ConfigTrait;
use Keboola\DbExtractorConfig\Configuration\ValueObject\DatabaseConfig;
use Monolog\Logger;
use PHPUnit\Framework\TestCase;

class QueryFactoryTest extends TestCase
{
    use ConfigTrait;

    /**
     * @dataProvider simpleTableColumnsDataProvider
     */
    public function testGetSimplifiedPdoQuery(
        array $params,
        ?array $columnsMetadata,
        array $state,
        string $expected
    ): void {
        $params['db'] = PdoTestConnection::getDbConfigArray();
        $params['query'] = $params['query'] ?? null;
        $params['columns'] = [];
        $params['outputTable'] = 'output';
        $params['primaryKey'] = [];
        $params['retries'] = 3;

        $incrementalFetchingType = $this->getIncrementalFetchingType($params, $columnsMetadata);

        $logger = new Logger('mssql-extractor-test');
        $pdo = new MSSQLPdoConnection($logger, DatabaseConfig::fromArray($params['db']));

        $queryFactory = $this->createQueryFactory($pdo, $state, $columnsMetadata);
        $queryFactory->setFormat(MSSQLQueryFactory::ESCAPING_TYPE_PDO);
        if ($incrementalFetchingType) {
            $queryFactory->setIncrementalFetchingType($incrementalFetchingType);
        }

        $exportConfig = MssqlExportConfig::fromArray($params);

        $query = $queryFactory->create(
            $exportConfig,
            $pdo
        );
        $this->assertEquals($expected, $query);
    }

    /**
     * @dataProvider bcpTableColumnsDataProvider
     */
    public function testGetBCPQuery(array $params, ?array $columnsMetadata, array $state, string $expected): void
    {
        $params['db'] = PdoTestConnection::getDbConfigArray();
        $params['query'] = $params['query'] ?? null;
        $params['columns'] = [];
        $params['outputTable'] = 'output';
        $params['primaryKey'] = [];
        $params['retries'] = 3;

        $logger = new Logger('mssql-extractor-test');
        $pdo = new MSSQLPdoConnection($logger, DatabaseConfig::fromArray($params['db']));

        $incrementalFetchingType = $this->getIncrementalFetchingType($params, $columnsMetadata);

        $queryFactory = $this->createQueryFactory($pdo, $state, $columnsMetadata);
        $queryFactory->setFormat(MSSQLQueryFactory::ESCAPING_TYPE_BCP);
        if ($incrementalFetchingType) {
            $queryFactory->setIncrementalFetchingType($incrementalFetchingType);
        }

        $exportConfig = MssqlExportConfig::fromArray($params);
        $query = $queryFactory->create(
            $exportConfig,
            $pdo
        );
        $this->assertEquals($expected, $query);
    }

    /**
     * @dataProvider columnTypeProvider
     */
    public function testColumnCasting(array $columnData, array $expectedSql): void
    {
        $logger = new Logger('mssql-extractor-test');
        $pdo = new MSSQLPdoConnection($logger, DatabaseConfig::fromArray(PdoTestConnection::getDbConfigArray()));

        $queryFactory = $this->createQueryFactory($pdo, []);

        $column = ColumnBuilder::create()
            ->setName($columnData['name'])
            ->setType($columnData['type'])
            ->build();
        $this->assertEquals($expectedSql['bcp'], $queryFactory->columnToBcpSql($column, $pdo));
        $this->assertEquals($expectedSql['pdo'], $queryFactory->columnToPdoSql($column, $pdo));
    }

    public function columnTypeProvider(): array
    {
        // @codingStandardsIgnoreStart
        return [
            'timestamp column' => [
                [
                    'name' => 'timestampCol',
                    'type' => 'timestamp',
                    'basetype' => 'STRING',
                ],
                [
                    'pdo' => 'CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), [timestampCol]), 1) AS [timestampCol]',
                    'bcp' => 'CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), [timestampCol]), 1) AS [timestampCol]',
                ],
            ],
            'xml column' => [
                [
                    'name' => 'xmlCol',
                    'type' => 'xml',
                    'basetype' => 'STRING',
                ],
                [
                    'pdo' => 'CAST([xmlCol] as nvarchar(max)) AS [xmlCol]',
                    'bcp' =>
                        'char(34) + ' .
                        'COALESCE(REPLACE(CAST([xmlCol] as nvarchar(max)), char(34), char(34) + char(34)),\'\') ' .
                        '+ char(34) AS [xmlCol]',
                ],
            ],
            'text column' => [
                [
                    'name' => 'textCol',
                    'type' => 'text',
                    'basetype' => 'STRING',
                ],
                [
                    'pdo' => 'CAST([textCol] as nvarchar(max)) AS [textCol]',
                    'bcp' =>
                        'char(34) + ' .
                        'COALESCE(REPLACE(CAST([textCol] as nvarchar(max)), char(34), char(34) + char(34)),\'\') ' .
                        '+ char(34) AS [textCol]',
                ],
            ],
            'int column' => [
                [
                    'name' => 'intCol',
                    'type' => 'int',
                    'basetype' => 'INTEGER',
                ],
                [
                    'pdo' => '[intCol]',
                    'bcp' => '[intCol]',
                ],
            ],
            'nvarchar column' => [
                [
                    'name' => 'nvarCol',
                    'type' => 'nvarchar',
                    'basetype' => 'STRING',
                ],
                [
                    'pdo' => '[nvarCol]',
                    'bcp' =>
                        'char(34) + ' .
                        'COALESCE(REPLACE([nvarCol], char(34), char(34) + char(34)),\'\') ' .
                        '+ char(34) AS [nvarCol]',
                ],
            ],
            'datetime column' => [
                [
                    'name' => 'datetimeCol',
                    'type' => 'datetime',
                    'basetype' => 'TIMESTAMP',
                ],
                [
                    'pdo' => '[datetimeCol]',
                    'bcp' => 'CONVERT(DATETIME2(0),[datetimeCol]) AS [datetimeCol]',
                ],
            ],
            'smalldatetime column' => [
                [
                    'name' => 'smalldatetimeCol',
                    'type' => 'smalldatetime',
                    'basetype' => 'TIMESTAMP',
                ],
                [
                    'pdo' => '[smalldatetimeCol]',
                    'bcp' => '[smalldatetimeCol]',
                ],
            ],
            'money column' => [
                [
                    'name' => 'moneyCol',
                    'type' => 'money',
                    'basetype' => 'NUMERIC',
                ],
                [
                    'pdo' => '[moneyCol]',
                    'bcp' => '[moneyCol]',
                ],
            ],
        ];
        // @codingStandardsIgnoreEnd
    }

    public function simpleTableColumnsDataProvider(): array
    {
        // @codingStandardsIgnoreStart
        return [
            'simple table with 2 columns selected' => [
                [
                    'table' => [
                        'tableName' => 'test',
                        'schema' => 'testSchema',
                    ],
                ],
                [
                    [
                        'name' => 'col1',
                        'type' => 'varchar',
                        'length' => '21474',
                    ],
                    [
                        'name' => 'col2',
                        'type' => 'nvarchar',
                        'length' => '2147',
                    ],
                ],
                [],
                'SELECT [col1], [col2] FROM [testSchema].[test]',
            ],
            'simple table with text column and xml column selected' => [
                [
                    'table' => [
                        'tableName' => 'test',
                        'schema' => 'testSchema',
                    ],
                ],
                [
                    [
                        'name' => 'col1',
                        'type' => 'text',
                        'length' => '21474',
                    ],
                    [
                        'name' => 'col2',
                        'type' => 'xml',
                        'length' => '2147',
                    ],
                ],
                [],
                'SELECT CAST([col1] as nvarchar(max)) AS [col1], CAST([col2] as nvarchar(max)) AS [col2] ' .
                'FROM [testSchema].[test]',
            ],
            'test simplePDO query with limit and datetime column but no state' => [
                [
                    'table' => [
                        'tableName' => 'auto Increment Timestamp',
                        'schema' => 'dbo',
                    ],
                    'incrementalFetchingLimit' => 10,
                    'incrementalFetchingColumn' => 'datetime',
                ],
                $this->getColumnMetadataForIncrementalFetchingTests(),
                [],
                'SELECT TOP 10 [_Weir%d I-D], [Weir%d Na-me], [someInteger], [someDecimal], [type], [smalldatetime], ' .
                '[datetime], CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), [timestamp]), 1) AS [timestamp] ' .
                'FROM [dbo].[auto Increment Timestamp] ORDER BY [datetime]',
            ],
            'test simplePDO query with limit and idp column and previos state' => [
                [
                    'table' => [
                        'tableName' => 'auto Increment Timestamp',
                        'schema' => 'dbo',
                    ],
                    'incrementalFetchingLimit' => 10,
                    'incrementalFetchingColumn' => '_Weir%d I-D',
                ],
                $this->getColumnMetadataForIncrementalFetchingTests(),
                [
                    'lastFetchedRow' => 4,
                ],
                'SELECT TOP 10 [_Weir%d I-D], [Weir%d Na-me], [someInteger], [someDecimal], [type], ' .
                '[smalldatetime], [datetime], CONVERT(NVARCHAR(MAX), ' .
                'CONVERT(BINARY(8), [timestamp]), 1) AS [timestamp] ' .
                'FROM [dbo].[auto Increment Timestamp] WHERE [_Weir%d I-D] >= 4 ORDER BY [_Weir%d I-D]',
            ],
            'test simplePDO query datetime column but no state and no limit' => [
                [
                    'table' => [
                        'tableName' => 'auto Increment Timestamp',
                        'schema' => 'dbo',
                    ],
                    'incrementalFetchingLimit' => null,
                    'incrementalFetchingColumn' => 'datetime',
                ],
                $this->getColumnMetadataForIncrementalFetchingTests(),
                [],
                'SELECT [_Weir%d I-D], [Weir%d Na-me], [someInteger], [someDecimal], [type], [smalldatetime], ' .
                '[datetime], CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), [timestamp]), 1) AS [timestamp] ' .
                'FROM [dbo].[auto Increment Timestamp]',
            ],
            'test simplePDO query id column and previos state and no limit' => [
                [
                    'table' => [
                        'tableName' => 'auto Increment Timestamp',
                        'schema' => 'dbo',
                    ],
                    'incrementalFetchingLimit' => null,
                    'incrementalFetchingColumn' => '_Weir%d I-D',
                ],
                $this->getColumnMetadataForIncrementalFetchingTests(),
                [
                    'lastFetchedRow' => 4,
                ],
                'SELECT [_Weir%d I-D], [Weir%d Na-me], [someInteger], [someDecimal], [type], [smalldatetime], ' .
                '[datetime], CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), [timestamp]), 1) AS [timestamp] ' .
                'FROM [dbo].[auto Increment Timestamp] WHERE [_Weir%d I-D] >= 4',
            ],
            'test simplePDO query datetime column and previos state and limit' => [
                [
                    'table' => [
                        'tableName' => 'auto Increment Timestamp',
                        'schema' => 'dbo',
                    ],
                    'incrementalFetchingLimit' => 1000,
                    'incrementalFetchingColumn' => 'datetime',
                ],
                $this->getColumnMetadataForIncrementalFetchingTests(),
                [
                    'lastFetchedRow' => '2018-10-26 10:52:32',
                ],
                'SELECT TOP 1000 [_Weir%d I-D], [Weir%d Na-me], [someInteger], [someDecimal], [type], ' .
                '[smalldatetime], [datetime], CONVERT(NVARCHAR(MAX), ' .
                'CONVERT(BINARY(8), [timestamp]), 1) AS [timestamp] ' .
                "FROM [dbo].[auto Increment Timestamp] WHERE [datetime] >= '2018-10-26 10:52:32' ORDER BY [datetime]",
            ],
            'test simplePDO query datetime column and previos state and limit and NOLOCK' => [
                [
                    'table' => [
                        'tableName' => 'auto Increment Timestamp',
                        'schema' => 'dbo',
                    ],
                    'nolock' => true,
                    'incrementalFetchingLimit' => 1000,
                    'incrementalFetchingColumn' => 'datetime',
                ],
                $this->getColumnMetadataForIncrementalFetchingTests(),
                [
                    'lastFetchedRow' => '2018-10-26 10:52:32',
                ],
                'SELECT TOP 1000 [_Weir%d I-D], [Weir%d Na-me], [someInteger], [someDecimal], [type], ' .
                '[smalldatetime], [datetime], CONVERT(NVARCHAR(MAX), ' .
                'CONVERT(BINARY(8), [timestamp]), 1) AS [timestamp] ' .
                'FROM [dbo].[auto Increment Timestamp] WITH(NOLOCK) ' .
                "WHERE [datetime] >= '2018-10-26 10:52:32' ORDER BY [datetime]",
            ],
        ];
        // @codingStandardsIgnoreEnd
    }

    public function bcpTableColumnsDataProvider(): array
    {
        // @codingStandardsIgnoreStart
        return [
            'simple table select with all columns' => [
                [
                    'table' => [
                        'tableName' => 'test',
                        'schema' => 'testSchema',
                    ],
                ],
                [
                    [
                        'name' => 'col1',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 1,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                    [
                        'name' => 'col2',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 2,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                ],
                [],
                'SELECT ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col1] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col1], ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col2] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col2] ' .
                'FROM [testSchema].[test]',
            ],
            'simple table with 1 columns selected' => [
                [
                    'table' => [
                        'tableName' => 'test',
                        'schema' => 'testSchema',
                    ],
                ],
                [
                    [
                        'name' => 'col1',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 1,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                ],
                [],
                'SELECT ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col1] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col1] ' .
                'FROM [testSchema].[test]',
            ],
            'test query with limit and datetime column but no state' => [
                [
                    'table' => [
                        'tableName' => 'auto Increment Timestamp',
                        'schema' => 'dbo',
                    ],
                    'incrementalFetchingLimit' => 10,
                    'incrementalFetchingColumn' => 'datetime',
                ],
                [
                    [
                        'name' => 'col1',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 1,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                    [
                        'name' => 'col2',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 2,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                    [
                        'name' => 'datetime',
                        'type' => 'datetime',
                        'length' => null,
                        'nullable' => false,
                        'ordinalPosition' => 3,
                        'primaryKey' => false,
                    ],
                ],
                [],
                'SELECT TOP 10 ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col1] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col1], ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col2] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col2], ' .
                'CONVERT(DATETIME2(0),[datetime]) AS [datetime] ' .
                'FROM [dbo].[auto Increment Timestamp] ORDER BY [datetime]',
            ],
            'test query with limit and idp column and previos state' => [
                [
                    'table' => [
                        'tableName' => 'auto Increment Timestamp',
                        'schema' => 'dbo',
                    ],
                    'incrementalFetchingLimit' => 10,
                    'incrementalFetchingColumn' => '_Weir%d I-D',
                ],
                [
                    [
                        'name' => '_Weir%d I-D',
                        'type' => 'int',
                        'length' => '10',
                        'nullable' => false,
                        'ordinalPosition' => 1,
                        'primaryKey' => true,
                        'primaryKeyName' => 'PK_AUTOINC',
                        'autoIncrement' => true,
                    ],
                    [
                        'name' => 'col1',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 2,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                    [
                        'name' => 'col2',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 3,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                ],
                [
                    'lastFetchedRow' => 4,
                ],
                'SELECT TOP 10 [_Weir%d I-D], ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col1] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col1], ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col2] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col2] ' .
                'FROM [dbo].[auto Increment Timestamp] WHERE [_Weir%d I-D] >= 4 ORDER BY [_Weir%d I-D]',
            ],
            'test query datetime column but no state and no limit' => [
                [
                    'table' => [
                        'tableName' => 'auto Increment Timestamp',
                        'schema' => 'dbo',
                    ],
                    'incrementalFetchingLimit' => null,
                    'incrementalFetchingColumn' => 'datetime',
                ],
                [
                    [
                        'name' => 'col1',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 1,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                    [
                        'name' => 'col2',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 2,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                    [
                        'name' => 'datetime',
                        'type' => 'datetime',
                        'length' => null,
                        'nullable' => false,
                        'ordinalPosition' => 3,
                        'primaryKey' => false,
                    ],
                ],
                [],
                'SELECT ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col1] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col1], ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col2] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col2], ' .
                'CONVERT(DATETIME2(0),[datetime]) AS [datetime] ' .
                'FROM [dbo].[auto Increment Timestamp]',
            ],
            'test simplePDO query id column and previos state and no limit' => [
                [
                    'table' => [
                        'tableName' => 'auto Increment Timestamp',
                        'schema' => 'dbo',
                    ],
                    'incrementalFetchingLimit' => null,
                    'incrementalFetchingColumn' => '_Weir%d I-D',
                ],
                [
                    [
                        'name' => '_Weir%d I-D',
                        'type' => 'int',
                        'length' => '10',
                        'nullable' => false,
                        'ordinalPosition' => 1,
                        'primaryKey' => true,
                        'primaryKeyName' => 'PK_AUTOINC',
                        'autoIncrement' => true,
                    ],
                    [
                        'name' => 'col1',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 2,
                        'primaryKey' => false,
                        'default' => null,
                    ],

                    [
                        'name' => 'col2',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 3,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                ],
                [
                    'lastFetchedRow' => 4,
                ],
                'SELECT [_Weir%d I-D], ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col1] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col1], ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col2] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col2] ' .
                'FROM [dbo].[auto Increment Timestamp] WHERE [_Weir%d I-D] >= 4',
            ],
            'test query with NOLOCK' => [
                [
                    'table' => [
                        'tableName' => 'auto Increment Timestamp',
                        'schema' => 'dbo',
                    ],
                    'nolock' => true,
                    'incrementalFetchingLimit' => null,
                    'incrementalFetchingColumn' => '_Weir%d I-D',
                ],
                [
                    [
                        'name' => '_Weir%d I-D',
                        'type' => 'int',
                        'length' => '10',
                        'nullable' => false,
                        'ordinalPosition' => 1,
                        'primaryKey' => true,
                        'primaryKeyName' => 'PK_AUTOINC',
                        'autoIncrement' => true,
                    ],
                    [
                        'name' => 'col1',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 2,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                    [
                        'name' => 'col2',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 3,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                ],
                [
                    'lastFetchedRow' => 4,
                ],
                'SELECT [_Weir%d I-D], ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col1] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col1], ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col2] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col2] ' .
                'FROM [dbo].[auto Increment Timestamp] WITH(NOLOCK) WHERE [_Weir%d I-D] >= 4',
            ],
            'test query with timestamp datatype column' => [
                [
                    'table' => [
                        'tableName' => 'test',
                        'schema' => 'testSchema',
                    ],
                ],
                [
                    [
                        'name' => 'col1',
                        'type' => 'text',
                        'length' => '2147483647',
                        'nullable' => true,
                        'ordinalPosition' => 1,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                    [
                        'name' => 'timestampCol',
                        'type' => 'timestamp',
                        'length' => null,
                        'nullable' => true,
                        'ordinalPosition' => 2,
                        'primaryKey' => false,
                        'default' => null,
                    ],
                ],
                [],
                'SELECT ' .
                'char(34) + ' .
                "COALESCE(REPLACE(CAST([col1] as nvarchar(max)), char(34), char(34) + char(34)),'') " .
                '+ char(34) AS [col1], ' .
                'CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), [timestampCol]), 1) AS [timestampCol] ' .
                'FROM [testSchema].[test]',
            ],
        ];
        // @codingStandardsIgnoreEnd
    }

    private function getColumnMetadataForIncrementalFetchingTests(): array
    {
        return [
            0 =>
                [
                    'name' => '_Weir%d I-D',
                    'type' => 'int',
                    'length' => '10',
                    'nullable' => false,
                    'ordinalPosition' => 1,
                    'primaryKey' => true,
                    'primaryKeyName' => 'PK_AUTOINC',
                    'autoIncrement' => true,
                ],
            1 =>
                [
                    'name' => 'Weir%d Na-me',
                    'type' => 'varchar',
                    'length' => '55',
                    'nullable' => false,
                    'ordinalPosition' => 2,
                    'primaryKey' => false,
                ],
            2 =>
                [
                    'name' => 'someInteger',
                    'type' => 'int',
                    'length' => '10',
                    'nullable' => true,
                    'ordinalPosition' => 3,
                    'primaryKey' => false,
                ],
            3 =>
                [
                    'name' => 'someDecimal',
                    'type' => 'decimal',
                    'length' => '10,2',
                    'nullable' => true,
                    'ordinalPosition' => 4,
                    'primaryKey' => false,
                ],
            4 =>
                [
                    'name' => 'type',
                    'type' => 'varchar',
                    'length' => '55',
                    'nullable' => true,
                    'ordinalPosition' => 5,
                    'primaryKey' => false,
                ],
            5 =>
                [
                    'name' => 'smalldatetime',
                    'type' => 'smalldatetime',
                    'length' => null,
                    'nullable' => false,
                    'ordinalPosition' => 6,
                    'primaryKey' => false,
                ],
            6 =>
                [
                    'name' => 'datetime',
                    'type' => 'datetime',
                    'length' => null,
                    'nullable' => false,
                    'ordinalPosition' => 7,
                    'primaryKey' => false,
                ],
            7 =>
                [
                    'name' => 'timestamp',
                    'type' => 'timestamp',
                    'length' => '8',
                    'nullable' => false,
                    'ordinalPosition' => 8,
                    'primaryKey' => false,
                ],
        ];
    }

    private function getIncrementalFetchingType(array $params, ?array $columnsMetadata): ?string
    {
        if (isset($params['incrementalFetchingColumn'])) {
            $incFetchingCol = $params['incrementalFetchingColumn'];
            $columns = array_filter($columnsMetadata ?? [], fn(array $data) => $data['name'] === $incFetchingCol);
            if (empty($columns)) {
                throw new \LogicException(
                    sprintf('Column "%s" not found in test metadata.', $incFetchingCol)
                );
            }
            $column = array_pop($columns);
            return MssqlDataType::getIncrementalFetchingType($incFetchingCol, $column['type']);
        }

        return null;
    }

    protected function createQueryFactory(
        MSSQLPdoConnection $pdo,
        array $state,
        ?array $columnsMetadata = null
    ): MSSQLQueryFactory {
        if ($columnsMetadata === null) {
            $metadataProvider = new MssqlMetadataProvider($pdo);
        } else {
            $tableBuilder = TableBuilder::create()
                ->setName('mocked')
                ->setType('mocked');

            foreach ($columnsMetadata as $data) {
                $tableBuilder
                    ->addColumn()
                    ->setName($data['name'])
                    ->setType($data['type'])
                    ->setLength($data['length'] ?? null);
            }

            $tableMetadata = $tableBuilder->build();
            $metadataProviderMock = $this->createMock(MssqlMetadataProvider::class);
            $metadataProviderMock
                ->method('getTable')
                ->willReturn($tableMetadata);
            /** @var MssqlMetadataProvider $metadataProvider */
            $metadataProvider = $metadataProviderMock;
        }

        return new MSSQLQueryFactory($state, $metadataProvider);
    }
}



================================================
FILE: tests/phpunit/Traits/ConfigTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\Tests\Traits;

use Keboola\DbExtractor\FunctionalTests\PdoTestConnection;

trait ConfigTrait
{
    private function getConfig(): array
    {
        $configTemplate = <<<JSON
{
  "parameters": {
    "db": %s,
    "tables": [
      {
        "id": 1,
        "name": "sales",
        "query": "SELECT * FROM sales",
        "outputTable": "in.c-main.sales",
        "incremental": false,
        "primaryKey": null,
        "enabled": true
      },
      {
        "id": 2,
        "enabled": true,
        "name": "tablecolumns",
        "outputTable": "in.c-main.tablecolumns",
        "incremental": false,
        "primaryKey": null,
        "table": {
          "schema": "dbo",
          "tableName": "sales"
        },
        "columns": [
          "usergender",
          "usercity",
          "usersentiment",
          "zipcode"
        ]
      },
      {
        "id": 3,
        "enabled": true,
        "name": "auto-increment-timestamp",
        "outputTable": "in.c-main.auto-increment-timestamp",
        "incremental": false,
        "primaryKey": ["_Weir%%d I-D"],
        "table": {
          "schema": "dbo",
          "tableName": "auto Increment Timestamp"
        }
      },
      {
        "id": 4,
        "enabled": true,
        "name": "special",
        "outputTable": "in.c-main.special",
        "incremental": false,
        "primaryKey": null,
        "table": {
          "schema": "dbo",
          "tableName": "special"
        }
      }
    ]
  }
}
JSON;
        return json_decode(
            sprintf($configTemplate, json_encode(PdoTestConnection::getDbConfigArray())),
            true
        );
    }

    public function getRowConfig(): array
    {
        $configTemplate = <<<JSON
{
  "parameters": {
    "db": %s,
    "name": "special",
    "outputTable": "in.c-main.special",
    "incremental": false,
    "primaryKey": null,
    "table": {
      "schema": "dbo",
      "tableName": "special"
    }
  }
}
JSON;
        return json_decode(
            sprintf($configTemplate, json_encode(PdoTestConnection::getDbConfigArray())),
            true
        );
    }
}



================================================
FILE: tests/ssl-certs/ca.crt
================================================
-----BEGIN CERTIFICATE-----
MIIFKDCCAxACCQDqo/o7am1i1zANBgkqhkiG9w0BAQsFADBWMQswCQYDVQQGEwJj
ejEQMA4GA1UECAwHY3plY2hpYTEPMA0GA1UEBwwGcHJhZ3VlMRAwDgYDVQQKDAdr
ZWJvb2xhMRIwEAYDVQQDDAltc3NxbC1zc2wwHhcNMjAwNzI5MDU1MDI2WhcNMjMw
NTE5MDU1MDI2WjBWMQswCQYDVQQGEwJjejEQMA4GA1UECAwHY3plY2hpYTEPMA0G
A1UEBwwGcHJhZ3VlMRAwDgYDVQQKDAdrZWJvb2xhMRIwEAYDVQQDDAltc3NxbC1z
c2wwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDXXrYSqesT+bLcgB+l
m6vEtN+jYfCPPy5Ch1fcrbJg4Bx+dFw7Zl9h8FXUCtdYOvpqibHSGmjPEbt4RJCz
FTtWDNnA22Le0DdAJPV2r/FcPlhhq2tTUyVYx2QwnK7yL+jn+LJxZvykf0zUQEle
qiyiHS3A02TyOAftIcKQazyUV3hrzKwDpr5BxZ3wHIegdeT0oDLSPgYEUflYagv1
PgWWUMyRdTGrfHyz7uEox50jMKMKEe4S7MmOE6j4OypUo4oIe0RNQw7IljFxWkPd
cPwjngW1w3m92ykDwmf+h3NqjvD56gqIiQlEw/G4K8kS1xwU4eu7Ndf0TniUgvFx
7ziIVR+NVbUPx8t+qeCTccVZIVYtTqZHpwQOqtNqQzMGtKKQAob4qu9C/YyQ9fR0
sytHKwptWjeeuShii6/30qJYKogARHbnwRXB5/KG2vKAhegIltiGl8kkud+vfV4s
8IwgAnATprx8+ORoV5//RRPvYlvbcgK4MrrxLqize7K4myVdGdAMjqFLIDlWkWjf
iW2gyxqPEM0AeKDSNQDdQnwqL6C3JfoKfiZUyabAbN/vNstPUF2R7mVfu6peRTS1
luAU65PPo/0JcgrOa2PLeBo0k9T8Fze5Y6+e2gGfNnY2+Sryst0MsriIedgm6X0Q
Q42nEAhRpUoeszXtqGnqpDGRbQIDAQABMA0GCSqGSIb3DQEBCwUAA4ICAQCtAm2T
kVCK0v9ylLCjaFIXxyn1F0m6Hgkgc8JpmBjDFt+muK/xq9gX+3It5cB2UMRqcerL
wY0nGoxE7eNo/v8UHGF/Jb4eGW0i52LuciXyxqtN9RAhYFUGO/Zuq5VGhzKHy/O1
Muq1gdFRNiozUUsBv0V8EnYhqeSGd4rdzoU9EXndkayZDu4VZexIygPWumHfdEE/
jPAgcucAVSJOkx61gkiAvVuD5JQaOu1Dr3cXY+leLbZBR0b+9CCoK+2LjMkt5HEU
9ifvfnxpmgxdrLyOTC3Z7I2CgE8V1vkjTv0RdSSxgWKi40fKDapcouk4yemTTGxd
seV0A9pjzw87gjYw0nnGYXab5jhALgYbWdeSURMZ/DkLbG34K4d/PTOJuV/iKuYl
rI2CRjk8b3/7fqfFi38+u+ovkts1jxr+5i2wU4vQisHDszfVpdp5ubNkwVTHsOvP
9QgiJXkVmJwJcWKuz9vgxNkBf2xWso6y8IDrUbyPf4V34w3eKbeq8uc5rXGss8m3
AtOM7jvkCqE/X07DXnrp1HiCqN4ng/L1szog70WXePkShLxhYEgGkMrnCTpoerqA
bgWP4CC32vHK8aC9GRtIjX8K49RF2F18P/WuzfyI4H2vVnuOkhvObMx0I4PGhLR1
PY3OLUpyy95BUYGj4VVNcX2GpMQF9CSywsFQJg==
-----END CERTIFICATE-----



================================================
FILE: tests/ssl-certs/ca.key
================================================
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,D37C414D0BB814D8

pdrBpbh0zt/oH8DZof5r1E+zvPCAuLLuWwxh6y/HAQxQxmGOLBh1mwrviGfbyAp6
IBASWO4rTBTzTs9DLXjQJi9MLksb/P689dp7oOYVR74wuLj3cDpFGWgdBDy0Ttd5
4b98vb2B1V7NiWqzvqzq9cZwZkNuxA8r5b2YMUWfGu4Bey1mooLnGPEucS779lZ4
QszpR6Q3EH0bIKuzeDdgqQhypWVjiULzmG0bB07ue9sXZqcJlDvEC8Ov4X1vV2xc
03nxKxMC266PoE+dROwVhJ60FJH1XYbDVrxXooduq3K7fBu10dqxoSL3Tfz2ptAb
PguLgZY6CCc8HY9DYgowNPC/Ot9zYvwcvN8AwLL7bOeW8jrptOSBq15xy0ZblsRt
AoKc6tHQidY47u0+hiv7Pvs6X5b/UY0P/YsTOuQUhcxaYxA3/OovrO1TfmM/9hNt
CtGJu3Rqs+8KBhp2I+870/HwbS6V2sZ0OuDTtghQ8rndU/xFp6y32F9ZXcypVJw6
rZvgqlkkvWaAwXHka/LoNw2cBNloKdydiccJlP8O2Oe4Jy4VrNPE7sLOFcSwNpjC
OBYCqPpcPXSSY/pA9i/bPxA7JQPsjwpCwvrzNRIG7lKMR0QxEL3jYv3nnPws1iCK
RVjQ9hwNsgTfD6HKvCYlWFnFh84DM9R4sYZxwOvIGzRuUhHUAlm0RhMguxH0k7GM
uG6cRLMcG1v9SygEgOWpihG6musUsByZ8y+fSN2Lvt0M6Y8gD4e1DvTEu2/IHu6Y
NHk4MAbackqstK89A//tPuU2fpJqZOyKTHDVdBidnq36lkQn4lfG24wrzjPgy8AU
l5PWV7VN/ulfNSMjHNjG9q7bmxwNFVtEqT6+If8b+F61oGHHkf1CJJF5yJN5S2Tz
X0uk+XDfw29y4yAKp4DeVrcbocgfhw+xYmpV72dmlfu/N4u4LgFDW62zjfidFkKb
tYaK2tGh8RRIXKyJ+O8stxShSntAo9Hq+8l5kIzIElA0NCPnB84SESNZuqRLx0IB
HRI7OPCOEbE1tbtcKHH73ZsurPgWkaNu+HkBJBpd0UWKw/AdjqksLGswMJjgJoja
BPs75jccRuhz+tm1Cg01cgITtiXk1/tkR3PMlRrxBhxqYcXmykg5vpdDouKscPfR
SVOB3DV2CSTeqJ3moSdAxrvyns+RJoYKcNTSRLHKvdMGAEeBPIP7dC7rOVn2CXQw
pVEStD5MEA1ktw/TBRrUiNqz+mPfJ4SFlDFv+Dc7pDOx8/Adg1vaRGKuQJeUg3uV
WhXbpUrMXOMgbXDkLktv0EZhieXu4vrRJv6xpTXNHv2O16m3fFISWOQBYoChbRjI
YeMuqV3HleTi+xoPpTr3mH+58jkNxqDymPdhSQMaZXY34DmdLR26ksAVBXml1APh
qq93D2BTM+STF2kQDRkn5exGyIrAqlDk48cFGt/i84ggkclFH5D7i/0ejcl8aD4a
yyQBdTtahsF9/5Ozw+6/jQ6L8s+tKOKXeOEfRmC+xoYhOxx8ANsuBJMFCyvS6oCo
pUmS6YMc+m/0NeAbN2KZhqxN2FGPLSzQRpdYy8VvMmbAj0JHuSUzssl7hFSxUiAN
zOM/0AE5pZ07oDxY0DklrjZCCRcCiY9lA0PgOVbGjiWnuFe+htqusg85jDBE/2xA
s5X+vJUZtXxaJovkoFPhytL1vvi5JudY0wD7yfnrFSH2OGTSLf69fjD08ncWWj6t
m/Hq+EPDQQx7Uw2nArb1X0sxHfkouYgfRfXJvslfcybrMpPXHsvkHHQ4Lr5e8K6y
n4FNtHxlvfFYe/9cCdbqVv3n65Zgk6aFdLuSRBx0RuT6b/BoSuW9azfQSRr/C4qs
XRK0hOowCTZezw0vw5DGh9Q8+GPxSMIUCVdT20ZhLIbebuLJvEg0J2j4lAsQgU2w
GY+dfaqt+0FGKjqeDZtzH9FYglOFqU9RCppv45rG/80kcD1bn8nn/FYmGagt6ODy
YFSF7S7hINu0rFuiC0WLC7tZYjdGcoUCs11VnBk/sS7Tx5K7U6XMaeghMyOiCR5m
78gy39DfZ0ZCvj+ay7r5kjz7+Kz1+20PZAB45Uscw25DOg2neP/dlKAyJGdl6Nc0
1OpINOpxo9v4COp73O9fA4rRO92CvEntE3oKaZmhNEHVBH3MJJUCV+U6Dou9Mcif
C0dftl0DgnFJ9A8M10etA9Fw3+FsfJL0f6o9Z1tqUxvOZVO2Wg/77gLfnC/Wc1l6
/LuZFGPaohCYpiCBsJevsZ4KhVK0Qrf/LCXXH4Y9ZELEh6qF89wKirfuO1RWZ3ET
UAesv+iLEy3ZwHPfUJod6wETzGNm3t6QEDogPZ79GZE9NtxurlmaVtQbtT8HhZrG
H6pt4EVCcZyVF/43ASSssRewcvLxbVSsVSSJIBRFKSNp7lwpFe8Lei55JAShF5xO
EnCuHyMGmDrVT44X5sHhNfWoz4dfTkZjPQsOyUwBLTWWteAfKMNEbngTXFWse/1A
uZ2snvIHrBXuJ9zaW/oLVlqqJnG0lwMKyXCcjxCSpYABlbSxsLKjV4sRXTL2IDY1
jOoWc7EBAmRHB2Mhzg3G7Nwo808TwYr6l+2UMMLeeEbLnnYp4xePAoQ2NMdfd8B+
8cg20qGe+EIi5XSZpqekAy6z2urAy59v1n+zjIKIZvDJqITlrtfYpK8IukL3gHYq
0t5wo/qpymleyvEohqV6qghHFUj+jR42H0w3eQp7S5e2rtOlkK4ejbUFEoNILele
nzE/vFmCrPA4Z7a+y7yXh9zfbYt30eVPL8nEx+8jjW+LqMB8HMw8xvN50dAXe2TB
LsajJC8l4BPUCvcSfpJsBDbBUziG6LhG1z1xBlD5nOr6tF6fRnc5LprQhE4uiCbX
CtlXHBrgWSgBfLASQrd5XLC0MAIuXwhFUNlOUwt/iaGKpSyE7KAVdKZfr0oErkTj
psqs2Jruk5IPLaBEq6zPZMRRkEnkPVSlLf10x/ePROEI1w0DJSPcmzWyVTtC63Aa
UA+sXNrfiqm2MQVln6u1zs3QQ1tqypOphfsSVmf7xltg/aCu6ONUkn4tZm1NlUQJ
tTrKTXyTqP0ZU4/Qh8Id8wiWV8+GyJeIQsQqm7fnSLxy9IyL3f1SbzGxK6OllI2N
-----END RSA PRIVATE KEY-----



================================================
FILE: tests/ssl-certs/ca.srl
================================================
F008C06AD7CBB868



================================================
FILE: tests/ssl-certs/invalidCa.crt
================================================
-----BEGIN CERTIFICATE-----
MIIFkDCCA3gCCQCda115dhITITANBgkqhkiG9w0BAQsFADCBiTELMAkGA1UEBhMC
Q1oxFzAVBgNVBAgMDkN6ZWNoIHJlcHVibGljMQ8wDQYDVQQHDAZQcmFndWUxEDAO
BgNVBAoMB0tlYm9vbGExFTATBgNVBAMMDGludmFsaWRNc3NxbDEnMCUGCSqGSIb3
DQEJARYYb25kcmVqLmpvZGFzQGtlYm9vbGEuY29tMB4XDTIwMDcyODA5MjYyMFoX
DTIzMDUxODA5MjYyMFowgYkxCzAJBgNVBAYTAkNaMRcwFQYDVQQIDA5DemVjaCBy
ZXB1YmxpYzEPMA0GA1UEBwwGUHJhZ3VlMRAwDgYDVQQKDAdLZWJvb2xhMRUwEwYD
VQQDDAxpbnZhbGlkTXNzcWwxJzAlBgkqhkiG9w0BCQEWGG9uZHJlai5qb2Rhc0Br
ZWJvb2xhLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKp7+QF1
esO5K9rbw7LOO6b92TjnWPHA732dIJQN9Qg3NrfjhYU7LilYV96go/jTyXpnbgrd
hMjOHY2kj4fjydrvN5Z3JcqP80znjtymzbRl56LF6UFdM1fnQ0UvtzblLaZSDjsU
4Ynr+4rJ/NPDOc8RcGeYHmywtzIJkKqvAnPNyZxuQy1hKWRovOEjkxG5APH9SC9k
WIEKYPKwIh7sINab3TGsMKwS1wxjQu4wT4UbRilL2EEaSzlTTDc76ACcZjzwqBM8
08z0FNtrbvES8c+/rXZG/JcZqgzsuqueys+YMbcTrgsORv/ZbbyudIHEJvXwFnyV
dv7AYnKDkpXa4S9URTz8QixDCTwgCjmk8Pu/fQ0ap0yOhyzC95z0pcypvhqsBcjK
NvQtf0EiFBq7CldJxXCV1p082NRh4ZQTcAj9bL2G9AneSuaDiWaTORKqQ+4qV/LH
DCadFlO+aW8atDjRp9KJ7JgvA5q/fHG8rux6liRY3p8vIHt+zNA7PxMXnNBmJjKl
4uNpLO4WlX2o/l7VLhPI9OLm95SZa6NkSUsbxnWH8cKb6KZEJKolULhXhzyZapXj
lGM4peF91hdpjeJfBAaMDKlMAd/sNvDhzBp1CG7qRW264wTnZU8Vq0+gABGXd3PE
yUPDEX8HQ60nFHM98pgxzyol/4nZmGozBC+LAgMBAAEwDQYJKoZIhvcNAQELBQAD
ggIBAHhN13Gc4O6ij3b3qdBGZsm391eWDJw7dBSPdob2ZcVcV7em9dsPBRe01dzx
Ny0zQAsqQiHZG/iIrpAKzEESB5RgETIy+ZMi1CkfA+UZJXVzXE6RiW+LlxrSU8ip
VzYoh2EajVdx6rkWLpukZiBSnlr7NMN9ozMZBLZe08JwDUe2Duafvus5B9WAUzww
V3vaNUI1GD4M7gOZSgNC2N79qX3NGwe5YfGrb7xrcKMqNJBX1JdGX3qVGPnPKf1Y
dYUNcYBVEGpiiziLoffk/4nfge1J3VF54o9/zR074WtqI+atMyV6b1c+HdnC7PEL
ooNf6c5sI6dErNM9orhLHuHTBoLtu8tdwlrfQ5LOjCmxha9QmsS6JqhpFNTLAjfk
N5fpskS0EuH/jxMCiYYsZeUr6vMzbiBHlJkhA/OUxYBs3PnfDxJZ9C8Qcvzs7Kd4
I1APhi/eiThteH+/5WSWrk4uTYwwqqc9CGsB4vj76AsBAkkeJ2wU0RrWxQNSIJvn
agFpu1A7HcZXLqltj6CJtOw+OAI82xEtAu1Fdb5p9hmoF+JFqWNGMOw9VYWhi+5v
nA4pUsZK6Pa3ce47hnU15QQvAS17M01FQyjLQK60xJyDiOda7baqk7xmtkZ6ZuTm
E5ndo0X2mhV8gpiitJi5/ThDLcbD4RfGPTrWZXnTaoiobGVY
-----END CERTIFICATE-----



================================================
FILE: tests/ssl-certs/invalidCa.key
================================================
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,427CDB51977F0D3C

XJCs1XULSs3eknKQiq6jIxXpALAvy/FLHy/1RsewAb3dyTsXwF1yh/O7fgSNVq9b
NahXUAlw20bxsaYWskbhza/8CHLeTwWnpgnnohIcpQe9smrcVKRtJwYwRLwxk6Qk
P0p4jEk2vpjJ+lCSBLOrJ3CKoqMCXwC8HggZGgNA0O3M6P3qZw58HfgAFKXLm/Qd
AA2sHqkuj9CLCwhKDx71EIGJabkwgCpHS4RoVS1TUmKMWK/Uhl6WTscIYHjy/Gpi
X6DQ96tCBNeh2EzNLay0eJVLyrRCYwr2yOULvJa0i4eI5OstnvVKvS7LGUbeX+Wz
A08/kubw9Wi+SzUcxNR/mdfWxaLONPv2QF4P2qH5o1TBAjB2I0hSwPezU9jHKVWz
vLoXVyIMPgo9j4NuehZTW/vuUzEx3GtXRzktQVjFCw693I3blIX4CVDYHmaqq5R3
sI1gJ1YNNWKMWbEZajkCLWG/LGgNt6uR0kZnxvoumMdESrcTF0+zO8YzDtOILU6Z
pOmgPKZKXDBu1oZwk5Dfaa6NbsYhvEKSt8Hhn8UgSOAOqNmzBcn78xodhQWf7U24
dMvla+3DtbFIms6O1d5J43gYmtAC+YgOGiZGWh6pjoIFi1Rk5S83b3aKWiP4ItSL
mPm9kelTmhs8ZAMUMynAYM+/Py6w8/YSNk0hChZUG+qnvp/5nACKdXyGhOka16ed
6QXDs+eI/5r89lfYAvgrOqveztR0X21fLnfeWMKNshe9YUiO3auhMjBBtZjNjBDK
LgNhK4+1GMJ7DLx3B/ymjMg/zQh+R9/l4Dag+05/O3tWvYXTJ/ZQvG71y9JY9kwf
i0aLP2gcDq1Xy/DZL0W+2Tly+zrR7TlVeI21C+RxOd1T5jOUmmQBO476ssyQJDrT
ilGZrtikDiD5InqGe7q3BHc8xCt9jbP5vh/dRWDF/N4ttaP1VpX4typuqmkjzsD4
RlmnBlWznj9a83tGS6sUDyQf/p5rjrGpYGiFF/yjkQyiBvxGO1+daO1/14Ggn7M2
K52NeVp5bRK+g7fElKsLnSpdfTcNIDHqk43tPqmY7qJCDqns+IZXgSlWTGm80xbG
9Xd1OVP/uAvYZNVeauR1LL/oEhTOqQXldVNQkHo3P2ffu3NmhL7UH5RvgNTnKv+6
lxdOi5hqhfCx85PTXAgPtcRQSZ/w3Z1t0qkDGzq+JSMrb32P2UVGZdBnztPW76aV
Qrr2550o2Vt7PR95F/BKizUjibSxIf4g/9eihrvvx3/YGU5HF1E75iC1GTMcKPve
c1VYn9dS4i93/eEwy+gBeTzcToJQuHzou542O4WyeBHijU+6X3eqDSEZ4vXFvKCs
4NJBXpUEGn9IUPTK8eQbDXMpl5WmomyzZBxwM0z+Fxj1ysdyT+zXSLwYwCv0ieM9
BQHPp+mkdm4xDllJa5GNXq97OFpcSBTgbLpHF/2tY7+aMFTkmDkv3IG2Cay+Uepq
kKkPPSYLmdEuGRzxeCixiv7UNpU+B/QqhxdQkVtI2KcsyJ4hy5mJvA+yoeNncJVO
Zjt7FE0bdalzmKJJpUxPSI7LaffHiScwjnTS/oTHuzuDXm6+eoRB/9dTyO/7611E
Wl9TrISMDmkEHsyGYK356wJhPzn8a6ICZA/YQLaMt02smbUGHwFq8ZH7Uh+Xy+B9
/B++pu8kq2qrF8/Ae2uXHjYwkocyGfZiEaiDG9hDLyTsNeXvhDsLGbp5CF53FBsd
LuQaNbqKeKAZTRF7teb8+uRVLJ+YzdRgxD7gG2UaCKPNJu62DoQ14YOozc1fZNiM
xGETRE4c8MokvO4icb3kmSKtZEGch+CE0SHyeehra5EXWBrbLSlNByB7VzKpB9Gj
/B58G2DJe21XsrZB4BbL2j8vDcvCyj3ktSMK5MuipFxTxeGZpJxF9dzFvV9XMlgu
awINVp6AmPifAM5TxcCK+JiJnhXWwtEz7tWdGPhP9kO+puW5aA/wwsHD9eBjd/O+
qCyXz7ppyoz8m1qAG9toIKoW/UCu/3B5di8sYn1LDLx100MRlr1GpGLQ1TdxBsM9
H26H84sWMKhOkRuGQ6BL3QOXb/+DVnwxDx4PKUf1NHUWujpXaqMsXUTmGDcZLNUw
1R5EyyIujvBE5Q8PlANxoAo1jAQ+e7rzSZwBHnRjEM/NbNzELtjcyicnnH8fXN6H
TqTFFuMIwQCrQ9TqwyZkHrDOe78ERo2ph3wCTkyoRYi7+8SZMwBMNKa5sR1RUpYh
mcYPHGkJTtvgEMCfW/PGRzJY0hsWkq8SerenZePd/XEjbYGx3GqVZ90CjaQs6Rub
+Ut8J3J50PXpbPKz3lBiKwPyBOa3rqpFaQK27/J6INGHvS1MWkUP1IvS8zSFV9H9
YJv+PGFfSc3ykC2TQdmyPq6hH/S6jVm4hCNFOWc89+SA6nlHDt02liFSQscG5HzK
qZt5vfMkstiUMXb8RuaFBrdLIzmXh6EN0yt0Yo7lnLceFf3F4yFdXgt57bVRoDXp
tPmkHk1MfFnPneRrsWLo+yMXXI33DqOyfrQB2W0Lh4BvrRk6owNUycyIeaTYIK3s
UKV+KlfPZPDovSrKWaHJyu2MlO/35m4QkQRiWv2/2I3I1u7Um8pT2BFhPwufn2qf
BfosroN/fAdnt2UPq1PX4OqOsTcFDfz7Ym53rPrblGtXsaeBOEpq670pvs3OxkvK
kENYwzqPrTNV2zeGiZqu9nUfAbu5wI2tx3ywxrnSHFt70DJqM1xan5eYluLWNd0Z
x6bwA/dq0phPdN/XxCI/FBpcHkPY27ZpNEyySIfsyFTt7BwC+ipwM7TKEcTHTFUO
o+P15m1NJihvcedmp9lpS+06ies/1yDjuuWujz+OA9A0tEteZucgYaWnmnX5yjqU
gOZL9FLx3Ht/XGLvO4u3qaQuuNBcFhLzYusJfE9yBAah+4x2jo81t+DhWun3/F0P
o6TYKtcP0HIQq1JH1krDeKDLTouPnKGIGUfvZ9ggEFT5XEcEk1VXLok5dfyyY9pB
2fMYg/yNsiUMP/e4WFGe0q2bqLhCBXZKzyMG3c4zNiLOaAgagy0ZcESSurBJmAYf
j+AIwtCokZP9UIt+6oHtGPKpKfhZA2vtjBHdCsfbMhea7eW5Jpsd6dIpUAzNuQsr
-----END RSA PRIVATE KEY-----



================================================
FILE: tests/ssl-certs/invalidCNCa.crt
================================================
-----BEGIN CERTIFICATE-----
MIIFFzCCAv+gAwIBAgIULnnMqcbWf2LsscAojN/ihaXb+eQwDQYJKoZIhvcNAQEL
BQAwGzEZMBcGA1UEAwwQbXNzcWwtaW52YWxpZC1jbjAeFw0yMDA3MjkwODQ5MzRa
Fw0yMzA1MTkwODQ5MzRaMBsxGTAXBgNVBAMMEG1zc3FsLWludmFsaWQtY24wggIi
MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDX6bxLv/xXp5fN/S1bAUdqKugi
rsKJHYqy7E8RYP38HAXd+0VW0RrJmZXXWLgt9MHRyO39nX9TEtUxRxnF4qbb70i9
YWQlV7tCl8dSMD9wQWRPfQlgid6sllq/H1GG5kn0qbZMv36QysrILG1+Kn5hpLBn
6Lb2VXFZdP5KqgfHT93glgJxr7xzN+63Q5k6W9xDkDL2Rakh3vDYJFXMFplP2JMl
bphEYTNyELdaqXSCMTaI8Ao8cqgfzakQk+0YqdSuWPBqxDYcq/BIKmcS+CE5z//J
4zPCqoFlbnKvxHtHtVcLnlSctILtU3L4YWbSfBT85R3za7l+WUfQ5jUOLoX61o3X
UJbcKpZY+N5b5S+91kKzeVkqJAJ3siDxlXy2Q73ZKVhXyqzBNYQ8yzFUjLQB54Co
haJXY4SfebadwHEBJV7CBLJV4/VGVd4URkT6qg+zaZfc+94nuhEgl0JKU3R5FgPp
0IZlBujdDugP7byILu7RCBzh4eAQploAKWY+DjKrxuj+9u6ASCrVbXqz5/5Q9gNd
jaWCSwmurvjFN8ipRiiAuDiT5+VJkqA6kN7s18nOt9xatKjqbU5D/l7B6Te2t9VI
XE+AmTtlEm8xmm6EnPDwxvkyK2zq9p+4e4WCxVFpb9Tu6BBqC58Oq/j2A0Ro8+0w
L+fi0EXPa4tPkouXYwIDAQABo1MwUTAdBgNVHQ4EFgQUkpXiTz76Y1IoSLs8QZFS
h0fYMgMwHwYDVR0jBBgwFoAUkpXiTz76Y1IoSLs8QZFSh0fYMgMwDwYDVR0TAQH/
BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAHzPzrE1wNASY/Wrpu+TGEmUTgBAW
1WeaJNKHbWYpyF3MF9WStBgq5u5P1RPE0BOk6OAAhNEui/g1TY4bo9UbA38+FhtK
5sH0XFsoVWHu3Jf/j7QYlIZLILRBSFhq7mzJ35YqpWWgdwAUTssyF+zMmxhEmJ6X
hdcs21Ylpg5ykAFOFY7eA9m14BiOpBi5HU/K3RqZYLREKhHrVcyO4De6sqtP38Cm
KuIR+5PxYzLimuQkASUdDaLGQMS+w9MIJqxVLT/GREOF41fdTtA+GdKPmDfQ7dHa
qdvuXAKPxYGnzM/YCB4/PAr7Sny5lp4tX21b7CuMJ4WPa9zcLPBX5+zBKD4HT+zC
lrbBDCbSF3NVUq2poTPhm9WHAh9liWXvE9v5qGDUjSs01pGHgU0fzIFIKJUkHAJB
QOhFejNn3bg/prlAFoov8RwNU3s3HHHZQUk7D3MkGUcewc5AmkvXenag9DhuPCjo
GU4RE494OLlDZ2L41bb7HVUS9pqI87j9NaTwTKOogVOh5G20fII9DzXmAhBRjGYg
JBYc+UdjCS5qNCxWl5+SPJ8JgFCb3ywoLUgbaMtuBPKDsOlVmEUE2Wu/3ahqVdwj
4afYYtbJfz8xzxpd96MACO3fVq2UTUZyC3juosweUAsTeFQhaQ2aWGYUGV3l5VN/
SOAvnwf/yxZbBMM=
-----END CERTIFICATE-----



================================================
FILE: tests/ssl-certs/invalidCNCa.key
================================================
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,C6239224B0FAFB5E

NifDEjCEbzqsp+gT6wZ66zs+fGEnL7lQuOSbSKk/Efm+KIpMgQLVnmfRjnME9ub1
D/LO77W13b7pA8b9lwQdmBKegm9OAp+Zh0gAwDzc0uwkowASE2XXPqlmmT3R/NcZ
DxwfGE+/Ys4pEzTZMn4FJEzlpV6RSXGqkhyKt3Z1aMiHpjmFc4bZKNsFA53qW1qW
4cf8espj+A4XKhHG1DoX1JPmRZwHqsVTuXgBwk3RslRhn8+b78CLQ7k2fpwJr+2K
7yqhkwY5oQF9yJJDlyOy09WfrPtlp3zo2HaUoROi5UjW6JSKgQnOIBgibGUaRu3v
3tRjiIZWPU/D0awPeVpT5oWj/qCneD/UnlVeKNC/dHprzOxsQHwOVhZqAvmZWF5L
irV5bUPUaOOWN+WcTPwocYSgdDBAu2F9WTNCHMt1JjmkAnhgb+4Fi8OD90wMFko+
63+NBptMlH4ItpPxUDL8u/V0x/G5unXSaoW6Rv66902j0WZCFPaoBvx6bsmB+r3U
2tJlZM7UHfl1xa1DMVOo23BrSGqkkxd9VXMTN3iO8hYBVQY3MlPkoDLMPiFW8KiG
TLr3MYcSO6SqbyrDGXJSS4XiH+IbDd23xBxppy21ueUrTEIg4jP6sYqVw8hbvo6E
syuSwP5rGyTFlBYGR496UOVeHhz03oQMpia//FWEcXcb7qZKdmw9hrLee0iGJoJn
Egaram5uT3aYU54buMUmfuoR6X7z8lkqmpc6n7cacpvylirWSE0Rp/l7Y768o1mL
AIGsCOGui7iW00zveM8ANbmofOvbwVYPFsqTrlCNT+jciQs6EeoGx4J6mG+Sk9bt
67lAR1WrCLcqf00iPS8W7gI5UTvtKWKL+Gzrhei8n4CsTmoCN5KWRZOeVdGMsiyV
Wp4kzTXZM/z/+idvBcdnNfLJ5TStwoT+3hUVbnwW1pRq5LdtACPOFAESt4+fgAOV
o+I2fgsh2KI+29QXC7OWOwmXkPxOQ2QGLCdcvHE02tcmpMJJzXUG0K4Zmm6qPwBF
0M63nL/0iLWDWlIBM/1VpEgXmfsuw1mKVzQimYsmnkcVHb87FUxW6havKFRaXBvJ
HDJaszcI0FPn6xi97hTGNLNCDuYsu3bB4952ICmrXyca5UUV9+lSvdJ6clElno7h
f7QJER8Ldqwh70G4q5BqQ8DlBD3gqYxZP57u6FvudHnpBAKf/GvdM+8WU/PYdu+g
WS8d+GEU1RLwQjxRDJBXju0BS+XkUSbh/p3f3wx2KZKwaEYDlrf8y2cqH0qhqgov
u11tv0kF0iDbcZhfTfoR4Z/7NHej7+Ct5H8TgE91mP3SE0fWKKkAxA8VkyIyFgnL
IPfxczpV2og3xyqZlq4tFq8uOSkM5frGFcKsiKC+kU36WdF+cTRwV6JW4YC5jZKQ
ozaMt/zTqjZtyog9dYWdg5PWWR5o074kok9dFrPapGtQPNi/vdSmNaNCeCN/VuLb
BN+qIRC36xeEECQV+MB3jTuDPVvaY9nUUxBPEMGMYfYcS5/E/MD0Id9FJ3uKSj+k
XdYM1YStOrl56B1HGV6a1zl3lXUMc8e9dWiRw0YvaqnZylo/KXYGCeXuLj8jBA+k
ReMuSmNugcv8tWAOt8nhD4HPjS7zR0zaNdpz9RzmRVUQJXQX9eZZnt/mDZSHiGMF
BYVXIHX4FOahO9lvMM/Pu/dORRzoYAk+vhQxE464iAf1RK33q0L4ulWPb+iPO4BK
gJ2lenRQ2PjRv9spc/gGn8D/DZg6GYW7iKFI8BnI3plkBic1yLuqEHD5e0HF7Ouw
JDH2GyyGHbz3qHXcDs5foY/bMtrwSpnGbn9JHVm1udqdowDqtjSw1QxB1Qbb63e6
SJr0cQirpAPSinsWE2+vEMLTNuEsDInJjzOUE+5ET6KLtlGBwPS+lGS5gVl4Yy45
e0qHURKq6KPwny+SRfctW67Vs3NsWNE4ey6SpHNUNUJT0jEVcI93X7aUZAlmH1AS
q8zGQ2m5d6tHky+qbNHHcYmGq7KBYz9Xa5PGTE1GU7a3n1XhKYQTQGXIApLE537w
vpTnxJ7EqSMRS1q+SeT+BmgX/47UdEYhBOtnhDC/ZlujS5a4ImRntSyJEvbxBtpa
7sHRHR4aXuxrl9H+zDJIw/qM7mGM/wsKG+pc8+sg0/KvQNu37Ub1l0j9Q1HTMJTy
QFpYYgEDKF+tMRwxgbdnWb2GZt8LnEbHT8MPElucpxO6JH7lf23cheR15G4MjI3r
d5lbKnVWUVLuCqgebLdm9aEhAEmvMaHrEemGV3Sl3Rjzl+CYgZ4atn6/3TqQYVro
Pc+Kl6aV1XNgWy2gDHMb/5NcLC9pXJ0DozaSxOmLhurAqw/tXbj2u0QeI5u969z3
mT5QYoczqPz5wg2o+EgQ8QWx3hB4YCG+z0UStu6LtYwCI77nda3vNJss1JHOcfge
bwdPqp4ybiH+WjF+4QFzwc2Wbg0g56tP+7ObhjBPxybHZpidRZlgZVEoqpVCddmc
ytowf0hvlSa31CKGhsX9xjcT5qkHblyhr3Jq7cXII4n7qvSPBOXrNOQD2skAyomn
vGCFjpUVXyLBiZonwbuAjXXlMPaOcSTINx3WRn4TgjnfBgH1m+epyR6dQUVnTKfk
G20m+ghEvqvY1Ja7qrDB/o9v0Pqhc7TF+YjKsLtnSReCwrsaMmVeM7WZrw+M64YO
MhhpKXF1KKWE7L/ANLbvOF3k3IpTOKqvNCtQmRy+3/XaZ9+sfz1BqU3HpUQ/CSP+
THY5M4Uy6xT1SBnshg9KusfLBhDjp38WtGcV7Oc900PNpRhU1li727YRkOahlt/x
bcrU5o3KrL5T+5FcxXt3VuhfhRCeeELxu6t9wVbUtfP10kRRqWCRuU4A5pmfxQ3P
EEOWgeWrzcFiES/KNiUTg4TocZ28CzdO2jnfBKrQeJvtZsDokwSjb/uRv5GK72Iq
LlOy5UfrLm4waqNuPRvu7go4B0CItjL1YSShx+vryoC5QLVKwuxzSZVDjGfPyTvu
s2AKcMAZu8eoMIfpXOnzU9Xp5sYFyo7JbmAzHQ1f71r4BF029Mjxep3tho0Qm+Sl
r5e4CGXATciZv0+AZl8sXm/r/yx/bONzq1NxWwxTtZUwloOQ7qsAWIQPOBNbeoyE
-----END RSA PRIVATE KEY-----



================================================
FILE: tests/ssl-certs/invalidCNCa.srl
================================================
EBE5C82414D840AC



================================================
FILE: tests/ssl-certs/mssql-invalidCn.crt
================================================
-----BEGIN CERTIFICATE-----
MIIDsTCCAZkCCQDr5cgkFNhArDANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQDDBBt
c3NxbC1pbnZhbGlkLWNuMB4XDTIwMDczMDEwNTcwNFoXDTIxMTIxMjEwNTcwNFow
GjEYMBYGA1UEAwwPbXNzcWwtaW52YWxpZENuMIIBIjANBgkqhkiG9w0BAQEFAAOC
AQ8AMIIBCgKCAQEA2cd88lNMtSzHR+W+5Nkw2ZG3QhJqoN0VR7VKQivHeDJMJcIN
PP25u8WoSiRwH1UKXZUODeHeoXfhyAW/EeqDiRW6uUJjXPjma4ae0boDKqzrtUyY
9iNsjTSTu9suocEiqmhHbmM1WRgcLcgQmHfIPw7ZqrNnYtG6wGOU5ALbznESvogR
zJrGOeDuzc18FqROrWcl5nXjbSAgS2RR2/AYGApmZzcDaQ78PVOuxD5gmCtk5Fd9
XDO2mzB1zqR3wE/d0XAeBrkVEOTBDwPtXuMb9D5qnqSJ3DoIu3gDRhD/UPP98Tx9
N1huh0ucisaL3VQulDXbBLUYmArHiy4o/Ce1wwIDAQABMA0GCSqGSIb3DQEBCwUA
A4ICAQB6mzkMHIzRRMXv3zG295IInRCFT2kU8qUglcAZCKarIbeDM1Zio+Y6t9kM
aPpM8F4mT+kDq2WhJrLeyFljpuJGdsagJ1sm0QN6OdWQ4XJDjv467frGhXKdypoY
mwOBLpvBQKvPjZCqd3B4/evc02YAyEYCQCwD0qfG8f3VSqRNroLnZcdUzb98p7O2
69zOZ5cZdXO/Y+oWuUEgtGlmLZptXBXj0r850fMXsERztqlsmfifuo/+ISti914P
ce4+kL8uKAR/hj+++yQgqZC1cleMzhE0oIjovLKYq92scDMPfm3Gaqabgcdu4sv3
ziocqBjIZ4ni2o+uWNp5omjf+yqE/FEQl/fo3x61NUY5gz/B9lYJIsnEexUR40fx
MoVio2aqY4BE2gI3uTGtSIWVuHvnTKv+o7JLcW+xkD5cuL7KYOKGvgZrfFiY/sPC
TjZr107PlYCMKe5AYvEHYFXHCG1JdrqlQDS55LWWRxqfVjhLtFrNsn7uWVs8jiBK
MShzFY98+3dfedulFpkxrzh+nU0OmozxIabz4j//138PF3NWciLOtqQHrsubAcwJ
0DL0nNRzXzlkIAA5vShqZ5Tl2UU5NXOosm//snTs1FjcGKNrnseapGg4rF6PnYiG
9lasHd1VSexH2XnTgup8P1hdLaCf5SM5J7k5iE3UyosfG+xEiw==
-----END CERTIFICATE-----



================================================
FILE: tests/ssl-certs/mssql-invalidCn.csr
================================================
-----BEGIN CERTIFICATE REQUEST-----
MIICXzCCAUcCAQAwGjEYMBYGA1UEAwwPbXNzcWwtaW52YWxpZENuMIIBIjANBgkq
hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2cd88lNMtSzHR+W+5Nkw2ZG3QhJqoN0V
R7VKQivHeDJMJcINPP25u8WoSiRwH1UKXZUODeHeoXfhyAW/EeqDiRW6uUJjXPjm
a4ae0boDKqzrtUyY9iNsjTSTu9suocEiqmhHbmM1WRgcLcgQmHfIPw7ZqrNnYtG6
wGOU5ALbznESvogRzJrGOeDuzc18FqROrWcl5nXjbSAgS2RR2/AYGApmZzcDaQ78
PVOuxD5gmCtk5Fd9XDO2mzB1zqR3wE/d0XAeBrkVEOTBDwPtXuMb9D5qnqSJ3DoI
u3gDRhD/UPP98Tx9N1huh0ucisaL3VQulDXbBLUYmArHiy4o/Ce1wwIDAQABoAAw
DQYJKoZIhvcNAQELBQADggEBAJCXSTEkseJJpgnixKhKI9JHkIqVemeiRUGqIokG
MxWdbuCr6gXQSHpRincfcM8yQ8OwfCwqWfZaaId6wFKzCcVZCd8jy9Cgyhl/WZMz
2MYJ4nldAHW/jG6pjci8UYin0wRkoOZJa2V+Mvvi8XQC7+MLIlit0n677i+k8E8N
uas83CbdLi0Yt2PnMJp1/OakqLbv+IL3jLa5tzOixL3iIN7AM56qLINBEpUuMX6+
DkOZ92ujZdYYDoPPnUrqzbJujjCuxrFrHbpAsMQhHAlK4H3Xrfr+i5f9fhilBDEj
/VSL5PXPA4XgQsS/jN5idEY7mftuefgAmoTYtHjWFhZ8C6A=
-----END CERTIFICATE REQUEST-----



================================================
FILE: tests/ssl-certs/mssql-invalidCn.key
================================================
-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEA2cd88lNMtSzHR+W+5Nkw2ZG3QhJqoN0VR7VKQivHeDJMJcIN
PP25u8WoSiRwH1UKXZUODeHeoXfhyAW/EeqDiRW6uUJjXPjma4ae0boDKqzrtUyY
9iNsjTSTu9suocEiqmhHbmM1WRgcLcgQmHfIPw7ZqrNnYtG6wGOU5ALbznESvogR
zJrGOeDuzc18FqROrWcl5nXjbSAgS2RR2/AYGApmZzcDaQ78PVOuxD5gmCtk5Fd9
XDO2mzB1zqR3wE/d0XAeBrkVEOTBDwPtXuMb9D5qnqSJ3DoIu3gDRhD/UPP98Tx9
N1huh0ucisaL3VQulDXbBLUYmArHiy4o/Ce1wwIDAQABAoIBAENp5DyjGoiu3tVb
whbXQK7o04CpcMZxCYhUDzOil7GWaEn74tsxc5AzpF+nHeolCftkC6CyfZcgJA0l
8jqajLMfvdhhO57pEXLRjlI/sYFBXAmYN3ViC9U+JEkvlSTPQ2rastnx7e6xbu+h
EboQwjT65NhZhrRpVdT+PnXCiMZDWiHsSizt7Sxx1L+WUxPJ9jZDO8chFOyIjAmz
FsneBNQNOz1Fm/02DPLMvIUPBtJX4S9xKIJS7iQoh2HpmMlE43ao6hzGxiY7rnvf
NKQnTysUPl58uMI2YdEzPsqPJ31+GBaNFyKAg3hncjGALN4ddVXNMnJKxa2jwMxB
jxVp67ECgYEA8SibbhHg90fWuiaQkooqX/WP4uFaArRnQhWA2GmbH8nbImoLC07G
AHQaojlTMsr9Jknqa/A4EPy/DCxDNeH/GBHXlcaucDtIYcBKMTBkuEGBILR83dgo
AFBe6aNuNv+IV+74NgIWY/HCBoN/99QCSaNKBdiA4Cv1tGSV//l0PusCgYEA5y6L
fDq7GB4uR93aCOFM2FeKT6WcVnX//l991eF4Gtet+yiokKexM4Ac4SlRKqEk9oUY
gmFaMdOcVdrZjqf+w/ZU+TGBik8yPPbm2pazjIP375ENODaBqNKcOTKbFZaQlt7h
igFPcWd0RxxBnUhL+6OmHCxT0Ywt7bXW/4UXnokCgYBj3jEfz/+d5/4gcMAGL3mE
66h+iFxCKntofocxF+rJq0o4YjnYoPKWVX6CF8NAkZdsN8gAkyZkwoZLgDkFI2YE
jb79o52xlJtQ/9S5shTDyTy0UoozRMSr/JyRnMCTvha0c54On6auFPwIvoRMGVwp
KpoI+bPFIe9KmS0VKDTfqQKBgFfT5QYjQeUdwjNnY2gwQAOI7nDn2Ac4+TJokOPq
rrhz7BMZFUEvlDCeoVohWka5xdMqKW+PELcRT7mGVVTPGgjU0t+BIVesUse6fWXa
Dwh5Mn5/Ouh6PLQon1VTlnuTIgdPUZwed1H8Hb7OS1c3mjZVq8vUQ1u+x8whYzbc
F2cRAoGAJKGe5q39JCCFN42xCGnTRFPjUL3dMotkPz4+Zkilluezk0y3DtqF5mwr
pryiXZ2hwhvhwDLwiTaSA9EC3m4JIJSZjC0EE2Vua1nZmlWO5o9sUJHhz+b2IYQt
pA8FMg4lCQ7CLdlTiOdPEP1MHRhuc8xhltIHQMRz2EMf2+9utOo=
-----END RSA PRIVATE KEY-----



================================================
FILE: tests/ssl-certs/mssql.crt
================================================
-----BEGIN CERTIFICATE-----
MIID6DCCAdACCQDwCMBq18u4aDANBgkqhkiG9w0BAQsFADBWMQswCQYDVQQGEwJj
ejEQMA4GA1UECAwHY3plY2hpYTEPMA0GA1UEBwwGcHJhZ3VlMRAwDgYDVQQKDAdr
ZWJvb2xhMRIwEAYDVQQDDAltc3NxbC1zc2wwIBcNMjEwMTA2MDg1MTQ0WhgPMjE1
NzExMjkwODUxNDRaMBQxEjAQBgNVBAMMCW1zc3FsLXNzbDCCASIwDQYJKoZIhvcN
AQEBBQADggEPADCCAQoCggEBAMrlF5i1RC/8FrtXiiBPTXNQH89qZiIdj/wD99la
faPV+663c0NxBcDPn9RSJHCFp2gE+emxdOkS+BbY/Vv89TaQXKMCvRGJwtAKfsku
6oMcXXyTSD4tgYy5Ln9v+X8ikfy/RISVWawMbjvFrXNljXU7mNuYfcd/5PEpcxGw
vJhhakDxOzuBNyMV6H1QNFQS6OdUhjit0XqyF4R4+vM2ZGcVSJy6VaKfImr6XOw5
rMP5qcJCMh2zXZVZFv/7vluWQsHnpuQxjSYAIWfPzAMis15rqh1dOjPX7dG2Ml8V
HZpEuyy/CmOa2VTmmKAfAqgxCRVVh9g5kb+PUG9TVaAeW7UCAwEAATANBgkqhkiG
9w0BAQsFAAOCAgEAK7fe5aa+pMKsaOFZQb8j34yDOB0iSE59J4NBTNJCkGQCOC0T
FQRarvcYSZJ2jVHzx6sF2Gd5lrxbLqn0eC9S53DHOJqaxjySi3iYBmAKt0c3s71K
A1aXmNjiTPn++H+wNv5whGqv1KNOWqEfXFzgZsn8EvAmWZ5z4RW0gN55QW0K+MQ7
YWlMDNQkGiXNcEZjMFmalvdjoavo6o0MAo9rQ5y/ZH/SSIcFPloF2K1AeYmpgWu5
3esMxB+eaJqY1A2vtmUuV4AxiWyHdvcUstcHZb6gHXl4wOsGbUq5f3wG3U2r3W7i
uvQLZQFzKIfNvwlVvyQpf9PfqjYpHc6gVfkinGZ/05jZeyyRvE1ia8i8F0wcLm27
NZFNXYcpq2A2/2dFKrHgjoX+HKPMNyKeP1Fr89JDAKCykVMli3l0W5DmN1eV/YKE
plOF+tv0vPwKY1bSM5ObbLqGqmHoTq6eo+6FCLDsVa3ZyCMIY7xiOBEC6zb3c7Mp
PULDrr5J+7fCDdMQgNY+TWaXl9OdfD/bFoQ+hD3ga//ePLzvRA2VR7lKgfkbrVwO
1hFnE/7eAhw25gOzgn8Ef5EHDcuB/wLRYOj00qi0fFv2rWMyEIStf4L+8GjZDSIg
cjhVdWA0m72aEbjz6zvrNiuR/kZKJiWt9jODMb/g+M+zBJyBzz+aTxpk+HI=
-----END CERTIFICATE-----



================================================
FILE: tests/ssl-certs/mssql.csr
================================================
-----BEGIN CERTIFICATE REQUEST-----
MIICWTCCAUECAQAwFDESMBAGA1UEAwwJbXNzcWwtc3NsMIIBIjANBgkqhkiG9w0B
AQEFAAOCAQ8AMIIBCgKCAQEAyuUXmLVEL/wWu1eKIE9Nc1Afz2pmIh2P/AP32Vp9
o9X7rrdzQ3EFwM+f1FIkcIWnaAT56bF06RL4Ftj9W/z1NpBcowK9EYnC0Ap+yS7q
gxxdfJNIPi2BjLkuf2/5fyKR/L9EhJVZrAxuO8Wtc2WNdTuY25h9x3/k8SlzEbC8
mGFqQPE7O4E3IxXofVA0VBLo51SGOK3RerIXhHj68zZkZxVInLpVop8iavpc7Dms
w/mpwkIyHbNdlVkW//u+W5ZCweem5DGNJgAhZ8/MAyKzXmuqHV06M9ft0bYyXxUd
mkS7LL8KY5rZVOaYoB8CqDEJFVWH2DmRv49Qb1NVoB5btQIDAQABoAAwDQYJKoZI
hvcNAQELBQADggEBAMiwxQvIixtBH47gvXFEosa6r6CRF0QS5GHR9W3ff754u6oM
9cAKutwMfpgPSXZ8R5BwAsQddJGSPMrEh/m+U3dx8i8v3LzpLMBX+RKFDXlhqBbJ
f3McQ0mS+io9/Anyavpzp2WrPXbI+OMGqdmrLmE/SlqDkkEX/Fs/I7vLuG3q90N8
h7E+yBN94ahdzAvCS/uaU9TY5m0q79OQf/fBE32A1rYGrvzesdH/03yO7doK1Uy0
29VOGl95HbuVm82DyNnmEENKNmk0VNn9JYpyt/lUK+UldH7SFxxLVCLFTg6nIUlU
RLe6UMwwjqzgx9aTXlAi+Zz577XCsn510Sn5yNI=
-----END CERTIFICATE REQUEST-----



================================================
FILE: tests/ssl-certs/mssql.key
================================================
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAyuUXmLVEL/wWu1eKIE9Nc1Afz2pmIh2P/AP32Vp9o9X7rrdz
Q3EFwM+f1FIkcIWnaAT56bF06RL4Ftj9W/z1NpBcowK9EYnC0Ap+yS7qgxxdfJNI
Pi2BjLkuf2/5fyKR/L9EhJVZrAxuO8Wtc2WNdTuY25h9x3/k8SlzEbC8mGFqQPE7
O4E3IxXofVA0VBLo51SGOK3RerIXhHj68zZkZxVInLpVop8iavpc7Dmsw/mpwkIy
HbNdlVkW//u+W5ZCweem5DGNJgAhZ8/MAyKzXmuqHV06M9ft0bYyXxUdmkS7LL8K
Y5rZVOaYoB8CqDEJFVWH2DmRv49Qb1NVoB5btQIDAQABAoIBAQCC8x0pqERcG/2n
6DXz6Hr6Y8pEGk3U0vOtGfqLRAY3CdKozyoLaxTlfpuPc3ylSv3i+uM5WxkznNSW
GnJbPoYdM0s2wnu4qAseLsfpnOgqutHzpzNHPiOQ6awDAAgtb+h9Eg1s7N+1VUiI
N2tdQTvtYAumH2N+sSLYK4Ji9oiiZ4byq39LTpD0JpzXzJT4cLcpOjBV7BGEBPB3
YhOoOqJdtnZGc2pibOWOnETn0q5DFau7El028AHoosFSkr4qt+dzqetGrAOEt47n
xRNUXPeJl1zzmetZoa9AjskIoz7BbqDubkNLhEFiCwc48fg0MIUPdpd5kIHFBJnN
0vtHqfp5AoGBAOYe3auC8vNf4OydU6/0im21aYHze2HoWoA4CyWXeHB53xtVx4/l
FKDZLPJIiZC2aaaMkg8MeusC8t158leepMMrO/bfOaBVygyf+VFtMfn+tFuYOU0X
zYOB2bROT89EaFnd62FbnmXJFs7nAJwUagOIrwWgzqu/nw/oN4U47HJLAoGBAOG2
Z0PO47i2dqUxBJxC7o/JBglqAS+GlfmiYWVN55nj+6CE+WBgpITdbtWPByQdteID
sgw66dXQQwlyvdoiZ1LN3xP2pBNNL0TBU14L5dShSxOHUFs9ZQl5SHGTuoZEQJ20
ExDXbNx6of0YXNEucg1O/eLSgG/AvPjXgKmwT6n/AoGAbpljHK2BKutn5RDwSd8U
MQpBvU1SfYn5BSrqYJTeM+C/FBo0IbqOIYh/i6rFQyIIwR1KjaUH5q+yHjQf/3Cl
64958Hr07VSOGWdBopsCrA54jJUq5RyNj6j3AyuoPAu6w4ZfPJmWFYGCTsrDhkBh
e3VT+TaCXhVo03JeTM9BBOUCgYBK6HRBBsqApN2fWTNEgNoXkgmU2j9mfG4NmRxl
uIMiiY0a6sawe6JeDfcYnQ0rqUiRp9RRRsQQF7wHyLLFUCGmU3izcWlmlnkXgmme
jqhJ9vWpl4DNpwR/Lmcienqu0Lv5GqgxMK2KRpC4JHu5WIa1b//GZUIG1Jpio3Kp
3j+yFQKBgHxIczO7nw5zzrxqkpPuEZ7D+013ysV7d8Lyjkc3Iu+KVgLZtHr+CQ1y
gXKFfEBOSIGPFZoRT0yYWBHNyMGLS2hoiEY91YvVrSfZhJa9u/jNxp2mdW4y2yDL
GvN3NogC+2bCsRRQRnMNavH57Z3tfdv3mCpAG/ScGp1frU0N6y4q
-----END RSA PRIVATE KEY-----



================================================
FILE: tests/traits/AddConstraintTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests;

use PDO;

trait AddConstraintTrait
{
    use QuoteIdentifierTrait;

    protected PDO $connection;

    public function addConstraint(
        string $tableName,
        string $name,
        string $type,
        string $value,
        ?string $reference = null
    ): void {
        $sql = sprintf(
            'ALTER TABLE %s ADD CONSTRAINT %s %s (%s)',
            $this->quoteIdentifier($tableName),
            $name,
            $type,
            $value
        );

        if ($reference) {
            $sql = sprintf('%s REFERENCES %s', $sql, $reference);
        }

        $this->connection->query($sql);
    }
}



================================================
FILE: tests/traits/CloseSshTunnelsTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests;

use Symfony\Component\Process\Process;

trait CloseSshTunnelsTrait
{
    protected function closeSshTunnels(): void
    {
        # Close SSH tunnel if created
        $process = new Process(['sh', '-c', 'pgrep ssh | xargs -r kill']);
        $process->mustRun();
    }
}



================================================
FILE: tests/traits/CreateTableTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests;

use PDO;

trait CreateTableTrait
{
    use QuoteIdentifierTrait;

    protected Pdo $connection;

    public function createTable(string $tableName, array $columns): void
    {
        // Generate columns statement
        $columnsSql = [];
        foreach ($columns as $name => $sqlDef) {
            $columnsSql[] = $this->quoteIdentifier($name) . ' ' . $sqlDef;
        }

        // Create table
        $this->connection->prepare(sprintf(
            'CREATE TABLE %s (%s)',
            $this->quoteIdentifier($tableName),
            implode(', ', $columnsSql)
        ))->execute();
    }
}



================================================
FILE: tests/traits/InsertRowsTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests;

use Keboola\DbExtractor\Exception\UserException;
use Throwable;
use PDO;

trait InsertRowsTrait
{
    use QuoteTrait;
    use QuoteIdentifierTrait;

    protected PDO $connection;

    public function insertRows(string $tableName, array $columns, array $rows): void
    {
        // Generate columns statement
        $columnsSql = [];
        foreach ($columns as $name) {
            $columnsSql[] = $this->quoteIdentifier($name);
        }

        // Generate values statement
        $valuesSql = [];
        foreach ($rows as $row) {
            $valuesSql[] =
                '(' .
                implode(
                    ', ',
                    array_map(function ($value) {
                        if ($value === null) {
                            return 'NULL';
                        }
                        if ($value === 'GETDATE()') {
                            return $value;
                        }
                        return $this->quote((string) $value);
                    }, $row)
                ) .
                ')';
        }

        foreach ($valuesSql as $values) {
            try {
                $this->connection->query(sprintf(
                    'INSERT INTO %s (%s) VALUES %s',
                    $this->quoteIdentifier($tableName),
                    implode(', ', $columnsSql),
                    $values
                ));
            } catch (Throwable $e) {
                throw new UserException($e->getMessage(), (int) $e->getCode(), $e);
            }
        }
    }
}



================================================
FILE: tests/traits/QuoteIdentifierTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests;

trait QuoteIdentifierTrait
{

    public function quoteIdentifier(string $str): string
    {
        return sprintf('[%s]', $str);
    }
}



================================================
FILE: tests/traits/QuoteTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests;

trait QuoteTrait
{

    public function quote(string $str): string
    {
        return sprintf("'%s'", $str);
    }
}



================================================
FILE: tests/traits/RemoveAllTablesTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests;

use PDO;

trait RemoveAllTablesTrait
{
    use QuoteIdentifierTrait;

    protected PDO $connection;

    protected function removeAllTables(): void
    {
        $this->removeAllFkConstraints();

        // Delete all tables, except sys tables
        $sql = 'SELECT * FROM information_schema.tables';
        /** @var \PDOStatement $stmt */
        $stmt = $this->connection->query($sql);
        /** @var array $tables */
        $tables = $stmt->fetchAll(PDO::FETCH_ASSOC);
        foreach ($tables as $table) {
            if (strpos($table['TABLE_NAME'], 'sys') === false) {
                $this->connection->query(sprintf(
                    'DROP TABLE %s.%s',
                    $this->quoteIdentifier($table['TABLE_SCHEMA']),
                    $this->quoteIdentifier($table['TABLE_NAME'])
                ));
            }
        }
    }

    protected function removeAllFkConstraints(): void
    {
        $sql = 'SELECT * FROM information_schema.table_constraints WHERE CONSTRAINT_TYPE = \'FOREIGN KEY\'';
        /** @var \PDOStatement $stmt */
        $stmt = $this->connection->query($sql);
        /** @var array $tables */
        $tables = $stmt->fetchAll(PDO::FETCH_ASSOC);
        foreach ($tables as $table) {
            $this->connection->query(sprintf(
                'ALTER TABLE %s.%s DROP CONSTRAINT %s',
                $this->quoteIdentifier($table['TABLE_SCHEMA']),
                $this->quoteIdentifier($table['TABLE_NAME']),
                $this->quoteIdentifier($table['CONSTRAINT_NAME'])
            ));
        }
    }
}



================================================
FILE: tests/traits/Tables/AutoIncrementTableTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests\Tables;

use Keboola\DbExtractor\TraitTests\AddConstraintTrait;
use Keboola\DbExtractor\TraitTests\CreateTableTrait;
use Keboola\DbExtractor\TraitTests\InsertRowsTrait;

trait AutoIncrementTableTrait
{
    use CreateTableTrait;
    use InsertRowsTrait;
    use AddConstraintTrait;

    public function createAITable(string $name = 'auto Increment Timestamp', string $datetimeType = 'DATETIME'): void
    {
        $this->createTable($name, $this->getAIColumns($datetimeType));
    }

    public function generateAIRows(string $tableName = 'auto Increment Timestamp'): void
    {
        $data = $this->getAIRows();
        $this->insertRows($tableName, $data['columns'], $data['data']);
    }

    public function addAIConstraint(string $tableName = 'auto Increment Timestamp'): void
    {
        $this->addConstraint($tableName, 'PK_AUTOINC', 'PRIMARY KEY', '"_Weir%d I-D"');
        $this->addConstraint($tableName, 'UNI_KEY_1', 'UNIQUE', '"Weir%d Na-me", Type');
        $this->addConstraint(
            $tableName,
            'CHK_ID_CONTSTRAINT',
            'CHECK',
            '"_Weir%d I-D" > 0 AND "_Weir%d I-D" < 20'
        );
    }

    private function getAIRows(): array
    {
        return [
            'columns' => ['Weir%d Na-me', 'type', 'someInteger', 'someDecimal', 'smalldatetime', 'datetime'],
            'data' => [
                ['mario', 'plumber', 1, 1.1, '2012-01-10 10:00', '2021-01-05 13:43:11.000'],
                ['luigi', 'plumber', 2, 2.2, '2012-01-10 10:05', '2021-01-05 13:43:12.123'],
                ['toad', 'mushroom', 3, 3.3, '2012-01-10 10:10', '2021-01-05 13:43:13.456'],
                ['princess', 'royalty', 4, 4.4, '2012-01-10 10:15', '2021-01-05 13:43:14.489'],
                ['wario', 'badguy', 5, 5.5, '2012-01-10 10:25', '2021-01-05 13:43:15.234'],
                ['yoshi', 'horse?', 6, 6.6, '2012-01-10 10:25', '2021-01-05 13:43:27.123'],
            ],
        ];
    }

    private function getAIColumns(string $datetimeType = 'DATETIME'): array
    {
        return [
            '_Weir%d I-D' => 'INT IDENTITY(1,1) NOT NULL',
            'Weir%d Na-me' => 'VARCHAR(55) NOT NULL DEFAULT \'mario\'',
            'someInteger' => 'INT',
            'someDecimal' => 'DECIMAL(10,2)',
            'type' => 'VARCHAR(55) NULL',
            'smalldatetime' => 'SMALLDATETIME DEFAULT NULL',
            'datetime' => "$datetimeType NOT NULL DEFAULT GETDATE()",
        ];
    }
}



================================================
FILE: tests/traits/Tables/NullableTableTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests\Tables;

use Keboola\DbExtractor\TraitTests\AddConstraintTrait;
use Keboola\DbExtractor\TraitTests\CreateTableTrait;
use Keboola\DbExtractor\TraitTests\InsertRowsTrait;

trait NullableTableTrait
{
    use CreateTableTrait;
    use InsertRowsTrait;
    use AddConstraintTrait;

    public function createNullableTable(string $name = 'datetime_with_nulls'): void
    {
        $this->createTable($name, $this->getNullableTableColumns());
    }

    public function generateNullableTableRows(string $tableName = 'datetime_with_nulls'): void
    {
        $data = $this->getNullableTableRows();
        $this->insertRows($tableName, $data['columns'], $data['data']);
    }

    private function getNullableTableRows(): array
    {
        return [
            'columns' => ['id', 'name', 'smalldatetime', 'datetime1', 'datetime2'],
            'data' => [
                [1, 'luigi', '2012-01-10 10:05', '2021-01-05 13:43:12.123', '2021-01-05 13:43:12.123'],
                [2, 'toad', '2012-01-10 10:10', '2021-01-05 13:43:13.456', '2021-01-05 13:43:13.456'],
                [null, null, null, null, '2021-01-05 13:43:14.489'],
            ],
        ];
    }

    private function getNullableTableColumns(string $datetimeType = 'DATETIME'): array
    {
        return [
            'id' => 'INT DEFAULT NULL',
            'name' => 'VARCHAR(55) DEFAULT NULL',
            'smalldatetime' => 'SMALLDATETIME DEFAULT NULL',
            'datetime1' => "$datetimeType DEFAULT NULL",
            'datetime2' => "$datetimeType DEFAULT NULL",
        ];
    }
}



================================================
FILE: tests/traits/Tables/SalesTableTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests\Tables;

use Keboola\DbExtractor\TraitTests\AddConstraintTrait;
use Keboola\DbExtractor\TraitTests\CreateTableTrait;
use Keboola\DbExtractor\TraitTests\InsertRowsTrait;

trait SalesTableTrait
{
    use CreateTableTrait;
    use InsertRowsTrait;
    use AddConstraintTrait;

    public function createSalesTable(string $name = 'sales'): void
    {
        $this->createTable($name, $this->getSalesColumns());
    }

    public function generateSalesRows(string $tableName = 'sales'): void
    {
        $data = $this->getSalesRows();
        $this->insertRows($tableName, $data['columns'], $data['data']);
    }

    public function addSalesConstraint(string $tableName = 'sales', array $primaryKey = []): void
    {
        if ($primaryKey) {
            $this->addConstraint(
                $tableName,
                'PK_' . $tableName,
                'PRIMARY KEY',
                implode(', ', $primaryKey)
            );
        }

        if ($tableName === 'sales2') {
            $this->addConstraint(
                $tableName,
                'FK_sales_sales2',
                'FOREIGN KEY',
                'createdat',
                'sales(createdat)'
            );
        }
    }

    private function getSalesRows(): array
    {
        // phpcs:disable Generic.Files.LineLength
        return [
            'columns' => ['usergender','usercity','usersentiment','zipcode','sku','createdat','category','price','county','countycode','userstate','categorygroup'],
            'data' => [
                ['Female','Mize','-1','39153','ZD111318','2013-09-23 22:38:29','Cameras','708','Smith','28129','Mississippi','Electronics'],
                ['Male','The Lakes','1','89124','ZD111402','2013-09-23 22:38:30','Televisions','1546','Clark','32003','Nevada','Electronics'],
                ['Male','Baldwin','1','21020','ZD111483','2013-09-23 22:38:31','Loose Stones','1262','Baltimore','24005','Maryland','Jewelry'],
                ['Female','Archbald','1','18501','ZD111395','2013-09-23 22:38:32','Stereo','104','Lackawanna','42069','Pennsylvania','Electronics'],
                ['Male','Berea','0','44127','ZD111451','2013-09-23 22:38:33','Earings','1007','Cuyahoga','39035','Ohio','Jewelry'],
                ['Male','Baldwin','0','21219','ZD111471','2013-09-23 22:38:34','Jewelry Boxes','103','Baltimore','24005','Maryland','Jewelry'],
                ['Male','Phoenix','1','85083','ZD111228','2013-09-23 22:38:35','Reference','18','Maricopa','04013','Arizona','Books'],
                ['Female','Martinsburg','-1','25428','ZD111340','2013-09-23 22:38:36','Dvd/Vcr Players','197','Berkeley','54003','West Virginia','Electronics'],
                ['Male','Los Angeles','0','91328','ZD111595','2013-09-23 22:38:37','Maternity','67','Los Angeles','06037','California','Women'],
                ['Female','Bolton','1','28455','ZD111577','2013-09-23 22:38:38','Dresses','61','Columbus','37047','North Carolina','Women'],
                ['Female','Cranford','-1','07974','ZD111274','2013-09-23 22:38:39','Sports','17','Union','34039','New Jersey','Books'],
                ['Female','Troy','1','48359','ZD111146','2013-09-23 22:38:40','Cooking','6','Oakland','26125','Michigan','Books'],
                ['Female','East Mansfield','1','02764','ZD111542','2013-09-23 22:38:41','Pants','99','Bristol','25005','Massachusetts','Men'],
                ['Male','Bixby','0','74156','ZD111603','2013-09-23 22:38:42','Maternity','65','Tulsa','40143','Oklahoma','Women'],
                ['Female','Buena Park','0','92806','ZD111450','2013-09-23 22:38:43','Earings','1808','Orange','06059','California','Jewelry'],
                ['Male','Annapolis Junction','0','21029','ZD111548','2013-09-23 22:38:44','Pants','52','Howard','24027','Maryland','Men'],
                ['Male','Bellarthur','-1','27837','ZD111577','2013-09-23 22:38:45','Dresses','61','Pitt','37147','North Carolina','Women'],
                ['Male','Longmont','1','80615','ZD111438','2013-09-23 22:38:46','Diamonds','1057','Weld','08123','Colorado','Jewelry'],
                ['Female','Allenton','0','63126','ZD111296','2013-09-23 22:38:47','Audio','909','St. Louis','29189','Missouri','Electronics'],
                ['Female','Red Creek','-1','14551','ZD111287','2013-09-23 22:38:48','Audio','542','Wayne','36117','New York','Electronics'],
                ['Male','Knightstown','-1','47351','ZD111532','2013-09-23 22:38:49','Accessories','68','Henry','18065','Indiana','Men'],
                ['Female','Kimball','0','56372','ZD111535','2013-09-23 22:38:50','Accessories','69','Stearns','27145','Minnesota','Men'],
                ['Female','Brighton','1','48836','ZD111227','2013-09-23 22:38:51','Reference','12','Livingston','26093','Michigan','Books'],
                ['Female','Coloma','-1','96155','ZD111113','2013-09-23 22:38:52','Arts','11','El Dorado','06017','California','Books'],
                ['Male','Basehor','0','66027','ZD111391','2013-09-23 22:38:53','Stereo','125','Leavenworth','20103','Kansas','Electronics'],
                ['Male','Alma Center','0','54643','ZD111232','2013-09-23 22:38:54','Romance','14','Jackson','55053','Wisconsin','Books'],
                ['Female','Monroe','0','71291','ZD111431','2013-09-23 22:38:55','Diamonds','1763','Ouachita','22073','Louisiana','Jewelry'],
                ['Male','Arlington Heights','0','60630','ZD111287','2013-09-23 22:38:56','Audio','542','Cook','17031','Illinois','Electronics'],
                ['Male','Englewood','1','34231','ZD111135','2013-09-23 22:38:57','Computers','20','Sarasota','12115','Florida','Books'],
                ['Female','Allen Park','1','48210','ZD111201','2013-09-23 22:38:58','Mystery','11','Wayne','26163','Michigan','Books'],
                ['Female','Los Angeles','1','91328','ZD111423','2013-09-23 22:38:59','Bracelets','1540','Los Angeles','06037','California','Jewelry'],
                ['Female','Los Angeles','-1','91386','ZD111512','2013-09-23 22:39:00','Rings','2717','Los Angeles','06037','California','Jewelry'],
                ['Male','Charlottesville','1','22940','ZD111374','2013-09-23 22:39:01','Portable','105','Albemarle','51003','Virginia','Electronics'],
                ['Female','Los Angeles','0','92119','ZD111455','2013-09-23 22:39:02','Gold','1987','San Diego County','06073','California','Jewelry'],
                ['Female','Bay Pines','0','33755','ZD111605','2013-09-23 22:39:03','Maternity','76','Pinellas County','12103','Florida','Women'],
                ['Female','Cornelius','1','28289','ZD111243','2013-09-23 22:39:04','Science','12','Mecklenburg','37119','North Carolina','Books'],
                ['Male','Clifton','1','07506','ZD111185','2013-09-23 22:39:05','History','6','Passaic','34031','New Jersey','Books'],
                ['Female','Corona','-1','92518','ZD111281','2013-09-23 22:39:06','Travel','6','Riverside','06065','California','Books'],
                ['Male','Edgard','-1','70049','ZD111253','2013-09-23 22:39:07','Science','19','St. John the Baptist','22095','Louisiana','Books'],
                ['Female','Durham','0','18951','ZD111238','2013-09-23 22:39:08','Romance','10','Bucks','42017','Pennsylvania','Books'],
                ['Male','Copperas Cove','-1','76558','ZD111184','2013-09-23 22:39:09','History','14','Coryell','48099','Texas','Books'],
                ['Female','Brookville','0','45403','ZD111161','2013-09-23 22:39:10','Entertainments','11','Montgomery','39113','Ohio','Books'],
                ['Male','Los Angeles','0','90034','ZD111455','2013-09-23 22:39:11','Gold','1987','Los Angeles','06037','California','Jewelry'],
                ['Male','Arkansas City','0','72379','ZD111118','2013-09-23 22:39:12','Arts','9','Desha','05041','Arkansas','Books'],
                ['Female','Edgewood','1','52042','ZD111451','2013-09-24 08:27:31','Earings','1007','Clayton','19043','Iowa','Jewelry'],
                ['Male','Eastwood','-1','40285','ZD111426','2013-09-24 08:27:34','Bracelets','202','Jefferson','21111','Kentucky','Jewelry'],
                ['Female','Catoosa','1','74015','ZD111500','2013-09-24 08:27:35','Pendants','1989','Rogers','40131','Oklahoma','Jewelry'],
                ['Female','Roy','1','84402','ZD111392','2013-09-24 08:27:36','Stereo','160','Weber','49057','Utah','Electronics'],
                ['Female','Los Angeles','-1','91507','ZD111524','2013-09-24 08:27:37','Womens Watch','2818','Los Angeles','06037','California','Jewelry'],
                ['Female','Lightfoot','-1','23694','ZD111407','2013-09-24 08:27:38','Televisions','592','York','51199','Virginia','Electronics'],
                ['Female','Butler','0','16046','ZD111436','2013-09-24 08:27:39','Diamonds','1813','Butler','42019','Pennsylvania','Jewelry'],
                ['Male','Ludlow','-1','61880','ZD111424','2013-09-24 08:27:40','Bracelets','1903','Champaign','17019','Illinois','Jewelry'],
                ['Female','Los Angeles','0','92038','ZD111303','2013-09-24 08:27:41','Camcorders','612','San Diego County','06073','California','Electronics'],
                ['Female','Cornelius','0','28217','ZD111138','2013-09-24 08:27:42','Computers','19','Mecklenburg','37119','North Carolina','Books'],
                ['Male','Allenton','0','63132','ZD111180','2013-09-24 08:27:43','History','14','St. Louis','29189','Missouri','Books'],
                ['Female','Hattiesburg','0','39402','ZD111266','2013-09-24 08:27:44','Sports','13','Forrest County','28035','Mississippi','Books'],
                ['Male','Nantucket','1','02564','ZD111292','2013-09-24 08:27:45','Audio','544','Nantucket','25019','Massachusetts','Electronics'],
                ['Female','Dania','0','33309','ZD111278','2013-09-24 08:27:46','Travel','9','Broward','12011','Florida','Books'],
                ['Female','Jamaica','-1','14215','ZD111127','2013-09-24 08:27:47','Business','15','Erie County','36029','New York','Books'],
                ['Female','Bend','0','97707','ZD111183','2013-09-24 08:27:48','History','11','Deschutes','41017','Oregon','Books'],
                ['Female','Dania','-1','33326','ZD111518','2013-09-24 08:27:49','Womens Watch','1586','Broward','12011','Florida','Jewelry'],
                ['Male','Dania','-1','33339','ZD111142','2013-09-24 08:27:50','Computers','11','Broward','12011','Florida','Books'],
                ['Female','West Palm Beach','0','33454','ZD111308','2013-09-24 08:27:51','Camcorders','565','Palm Beach','12099','Florida','Electronics'],
                ['Male','Batesburg','-1','29169','ZD111369','2013-09-24 08:27:52','Portable','123','Lexington','45063','South Carolina','Electronics'],
                ['Female','Atlas','0','48458','ZD111316','2013-09-24 08:27:53','Cameras','913','Genesee','26049','Michigan','Electronics'],
                ['Female','Andale','1','67202','ZD111364','2013-09-24 08:27:55','Portable','196','Sedgwick','20173','Kansas','Electronics'],
                ['Female','Discovery Bay','-1','94507','ZD111458','2013-09-24 08:27:56','Gold','749','Contra Costa County','06013','California','Jewelry'],
                ['Female','Monroe','0','71294','ZD111598','2013-09-24 08:27:57','Maternity','78','Ouachita','22073','Louisiana','Women'],
                ['Female','Bass','-1','72628','ZD111329','2013-09-24 08:27:58','Disk Drives','113','Newton County','05101','Arkansas','Electronics'],
                ['Male','Baldwin City','-1','66046','ZD111316','2013-09-24 08:27:59','Cameras','913','Douglas','20045','Kansas','Electronics'],
                ['Female','Centreville','-1','22109','ZD111181','2013-09-24 08:28:00','History','13','Fairfax','51059','Virginia','Books'],
                ['Male','Allenton','-1','63127','ZD111592','2013-09-24 08:28:01','Fragrances','71','St. Louis','29189','Missouri','Women'],
                ['Female','Okemos','1','48911','ZD111331','2013-09-24 08:28:02','Dvd/Vcr Players','104','Ingham','26065','Michigan','Electronics'],
                ['Female','Denver','0','80219','ZD111177','2013-09-24 08:28:03','History','20','Denver','08031','Colorado','Books'],
                ['Male','Gainesville','1','32606','ZD111167','2013-09-24 08:28:04','Fiction','12','Alachua','12001','Florida','Books'],
                ['Female','Troy','0','48086','ZD111478','2013-09-24 08:28:05','Loose Stones','570','Oakland','26125','Michigan','Jewelry'],
                ['Female','Bay Minette','-1','36550','ZD111425','2013-09-24 08:28:06','Bracelets','870','Baldwin','01003','Alabama','Jewelry'],
                ['Female','Arab','1','35957','ZD111236','2013-09-24 08:28:07','Romance','6','Marshall','01095','Alabama','Books'],
                ['Male','Hialeah','0','33128','ZD111190','2013-09-24 08:28:08','Home Repair','13','Miami-Dade','12086','Florida','Books'],
                ['Female','Sacramento','1','95887','ZD111605','2013-09-24 08:28:09','Maternity','76','Sacramento','06067','California','Women'],
                ['Male','McHenry','-1','62034','ZD111246','2013-09-24 08:28:10','Science','11','Madison County','17119','Illinois','Books'],
                ['Female','Philadelphia','-1','19128','ZD111400','2013-09-24 08:28:11','Televisions','1883','Philadelphia','42101','Pennsylvania','Electronics'],
                ['Female','Bradley','0','93923','ZD111166','2013-09-24 08:28:12','Fiction','15','Monterey','06053','California','Books'],
                ['Female','Gering','-1','69358','ZD111528','2013-09-24 08:28:13','Womens Watch','1165','Scotts Bluff','31157','Nebraska','Jewelry'],
                ['Female','Los Angeles','0','90223','ZD111164','2013-09-24 08:28:14','Entertainments','10','Los Angeles','06037','California','Books'],
                ['Female','Amboy','1','98686','ZD111196','2013-09-24 08:28:15','Home Repair','20','Clark','53011','Washington','Books'],
                ['Female','Barberville','1','32724','ZD111118','2013-09-24 08:28:16','Arts','9','Volusia','12127','Florida','Books'],
                ['Male','Carrollton','0','76258','ZD111394','2013-09-24 08:28:17','Stereo','110','Denton','48121','Texas','Electronics'],
                ['Female','Saint Charles','-1','63303','ZD111292','2013-09-24 08:28:18','Audio','544','St. Charles','29183','Missouri','Electronics'],
                ['Female','Bairdford','-1','15270','ZD111141','2013-09-24 08:28:19','Computers','18','Allegheny','42003','Pennsylvania','Books'],
                ['Male','Glen Oaks','0','11447','ZD111331','2013-09-24 08:28:20','Dvd/Vcr Players','104','Queens','36081','New York','Electronics'],
                ['Female','Addison','1','75015','ZD111338','2013-09-24 08:28:21','Dvd/Vcr Players','180','Dallas','48113','Texas','Electronics'],
                ['Male','Bible School Park','1','13777','ZD111460','2013-09-24 08:28:22','Gold','728','Broome','36007','New York','Jewelry'],
                ['Male','Jersey','1','30025','ZD111313','2013-09-24 08:28:23','Cameras','523','Walton','13297','Georgia','Electronics'],
                ['Male','Hanna','-1','46346','ZD111446','2013-09-24 08:28:24','Earings','313','LaPorte','18091','Indiana','Jewelry'],
                ['Male','Saint Paul','1','55375','ZD111466','2013-09-24 08:28:25','Jewelry Boxes','186','Hennepin','27053','Minnesota','Jewelry'],
                ['Female','Glen Oaks','1','11366','ZD111178','2013-09-24 08:28:26','History','9','Queens','36081','New York','Books'],
                ['Male','Alexandria','-1','17260','ZD111560','2013-09-24 08:28:27','Shirts','67','Huntingdon','42061','Pennsylvania','Men'],
                ['Male','Los Angeles','0','92124','ZD111132','2013-09-24 08:28:28','Business','12','San Diego County','06073','California','Books'],
                ['usergender','usercity','','zipcode','sku','createdat','category','','county','countycode','userstate','group'],
            ],
        ];
        // phpcs:enable
    }

    private function getSalesColumns(): array
    {
        return [
            'usergender' => 'text NULL',
            'usercity' => 'text NULL',
            'usersentiment' => 'text NULL',
            'zipcode' => 'text NULL',
            'sku' => 'text NULL',
            'createdat' => 'varchar(64) NOT NULL',
            'category' => 'text NULL',
            'price' => 'text NULL',
            'county' => 'text NULL',
            'countycode' => 'text NULL',
            'userstate' => 'text NULL',
            'categorygroup' => 'text NULL',
        ];
    }
}



================================================
FILE: tests/traits/Tables/SimpleTableTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests\Tables;

use Keboola\DbExtractor\TraitTests\CreateTableTrait;

trait SimpleTableTrait
{
    use CreateTableTrait;

    public function createSimpleTable(string $name = 'simple'): void
    {
        $this->createTable($name, $this->getSimpleColumns());
    }

    public function addSimpleConstraint(string $tableName = 'simple'): void
    {
        $this->addConstraint($tableName, 'PK_AUTOINC', 'PRIMARY KEY', 'id');
    }

    protected function getSimpleColumns(): array
    {
        return [
            'id' => 'INT NOT NULL',
            'name' => 'VARCHAR(100)',
        ];
    }
}



================================================
FILE: tests/traits/Tables/SpecialTableTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests\Tables;

use Keboola\DbExtractor\TraitTests\CreateTableTrait;
use Keboola\DbExtractor\TraitTests\InsertRowsTrait;

trait SpecialTableTrait
{
    use CreateTableTrait;
    use InsertRowsTrait;

    public function createSpecialTable(string $name = 'special'): void
    {
        $this->createTable($name, $this->getSpecialColumns());
    }

    public function generateSpecialRows(string $tableName = 'special'): void
    {
        $data = $this->getSpecialRows();
        $this->insertRows($tableName, $data['columns'], $data['data']);
    }

    private function getSpecialRows(): array
    {
        return [
            'columns' => ['col1', 'col2'],
            'data' => [
                ['column with backslash \ inside', 'column with backslash and enclosure \"'],
                ['column with enclosure ", and comma inside text', 'second column enclosure in text "'],
                ['column with \n \t \\\\', 'second col'],
                ['columns with
new line', 'columns with 	tab'],
                ['first','something with

double new line'],
                ['line with enclosure','second column'],
                ['unicode characters','ľščťžýáíéúäôň'],
            ],
        ];
    }

    protected function getSpecialColumns(): array
    {
        return [
            'col1' => 'text null',
            'col2' => 'text null',
        ];
    }
}



================================================
FILE: tests/traits/Tables/TimestampTableTrait.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\DbExtractor\TraitTests\Tables;

use Keboola\DbExtractor\TraitTests\AddConstraintTrait;
use Keboola\DbExtractor\TraitTests\CreateTableTrait;
use Keboola\DbExtractor\TraitTests\InsertRowsTrait;

trait TimestampTableTrait
{
    use CreateTableTrait;
    use InsertRowsTrait;
    use AddConstraintTrait;

    public function createTimestampTable(string $name = 'timestamp_test'): void
    {
        $this->createTable($name, $this->getTimestampColumns());
    }

    public function generateTimestampRows(string $tableName = 'timestamp_test'): void
    {
        $data = $this->getTimestampRows();
        $this->insertRows($tableName, $data['columns'], $data['data']);
    }

    private function getTimestampRows(): array
    {
        return [
            'columns' => [
                'id',
            ],
            // timestamp is generated value, so it is not present in insert statements
            'data' => [
                [1],
                [2],
                [3],
            ],
        ];
    }

    private function getTimestampColumns(): array
    {
        return [
            'id' => 'INT NOT NULL',
            // timestamp is very special type, it is row version
            'timestamp' => 'TIMESTAMP NOT NULL',
        ];
    }
}



================================================
FILE: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-ms-sql-2005" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

