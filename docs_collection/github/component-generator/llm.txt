Directory structure:
└── keboola-component-generator/
    ├── README.md
    ├── application.php
    ├── composer.json
    ├── composer.lock
    ├── deploy.sh
    ├── Dockerfile
    ├── LICENSE
    ├── phpcs.xml
    ├── phpstan.neon
    ├── .dockerignore
    ├── docker/
    │   └── composer-install.sh
    ├── src/
    │   ├── CommandHelper.php
    │   ├── GenerateCommand.php
    │   ├── ProcessDecorator.php
    │   ├── SetupCI.php
    │   ├── Credentials/
    │   │   ├── DeveloperPortalCredentials.php
    │   │   └── DockerhubCredentials.php
    │   └── Exception/
    │       └── FailedException.php
    ├── templates/
    │   ├── bitbucket-deploy/
    │   │   └── .gitkeep
    │   ├── gitlab-deploy/
    │   │   └── .gitkeep
    │   ├── php-component/
    │   │   ├── README.md
    │   │   ├── composer.json
    │   │   ├── docker-compose.yml
    │   │   ├── Dockerfile
    │   │   ├── phpcs.xml
    │   │   ├── phpstan.neon
    │   │   ├── phpunit.xml.dist
    │   │   ├── .dockerignore
    │   │   ├── docker/
    │   │   │   ├── composer-install.sh
    │   │   │   └── php-prod.ini
    │   │   ├── src/
    │   │   │   ├── Component.php
    │   │   │   ├── Config.php
    │   │   │   ├── ConfigDefinition.php
    │   │   │   └── run.php
    │   │   └── tests/
    │   │       ├── functional/
    │   │       │   ├── DatadirTest.php
    │   │       │   └── empty-app/
    │   │       │       └── source/
    │   │       │           └── data/
    │   │       │               └── config.json
    │   │       └── phpunit/
    │   │           └── bootstrap.php
    │   ├── php-simple/
    │   │   ├── Dockerfile
    │   │   └── main.php
    │   ├── python-simple/
    │   │   ├── Dockerfile
    │   │   └── main.py
    │   ├── python-tests/
    │   │   ├── docker-compose.yml
    │   │   ├── Dockerfile
    │   │   ├── TEMPLATE.md
    │   │   ├── src/
    │   │   │   ├── main.py
    │   │   │   └── my_component.py
    │   │   └── tests/
    │   │       ├── __init__.py
    │   │       ├── test_run.py
    │   │       └── data/
    │   │           └── 00/
    │   │               ├── config.json
    │   │               ├── destination.csv
    │   │               ├── _sample_out/
    │   │               │   └── tables/
    │   │               │       └── destination.csv
    │   │               └── in/
    │   │                   └── tables/
    │   │                       └── source.csv
    │   ├── r-simple/
    │   │   ├── Dockerfile
    │   │   └── main.R
    │   └── r-tests/
    │       ├── DESCRIPTION
    │       ├── docker-compose.yml
    │       ├── Dockerfile
    │       ├── LICENSE
    │       ├── main.R
    │       ├── NAMESPACE
    │       ├── TEMPLATE.md
    │       ├── .Rbuildignore
    │       ├── R/
    │       │   └── myApp.R
    │       └── tests/
    │           ├── config_template.R
    │           ├── tests.sh
    │           ├── testthat.R
    │           ├── data/
    │           │   ├── config.json
    │           │   └── in/
    │           │       └── tables/
    │           │           └── source.csv
    │           └── testthat/
    │               └── test_main.R
    ├── templates-ci/
    │   ├── bitbucket-deploy/
    │   │   └── bitbucket-pipelines/
    │   │       ├── bitbucket-pipelines.yml
    │   │       └── deploy.sh
    │   ├── common/
    │   │   └── github-actions/
    │   │       └── .github/
    │   │           └── workflows/
    │   │               └── push.yml
    │   ├── gitlab-deploy/
    │   │   └── gitlab-ci/
    │   │       ├── deploy.sh
    │   │       └── .gitlab-ci.yml
    │   ├── php-component/
    │   │   └── github-actions/
    │   │       └── .github/
    │   │           └── workflows/
    │   │               └── push.yml
    │   ├── python-tests/
    │   │   └── github-actions/
    │   │       └── .github/
    │   │           └── workflows/
    │   │               └── push.yml
    │   └── r-tests/
    │       └── github-actions/
    │           └── .github/
    │               └── workflows/
    │                   └── push.yml
    ├── templates-common/
    │   └── .dockerignore
    └── .github/
        └── workflows/
            └── push.yml

================================================
FILE: README.md
================================================
# Keboola Component Skeleton Generator
This tool generates a skeleton for a new [Keboola Connection](https://connection.keboola.com/) component. 
See the [Development Guide](https://developers.keboola.com/extend/component/) for more details.

This tool is working on a checked out **GitHub repository** and sets `GitHub Actions` deployment. 
See the documentation for working with 
[Bitbucket](https://developers.keboola.com/extend/component/deployment/#bitbucket-integration) or 
[Gitlab](https://developers.keboola.com/extend/component/deployment/#gitlab-integration) repository.
You need [Docker](https://www.docker.com/) to run this tool.

If you don't need setting up CI integration, you may simply copy the files from `templates-ci` directories.
In that case don't forget to run `git update-index --chmod=+x deploy.sh` to make the deployment scripts executable.

## Running
Before you run this tool, you should have created a **new component and** a **new service account**
in the [Developer Portal](https://components.keboola.com/). See our 
[Component Tutorial](https://developers.keboola.com/extend/component/tutorial/) for more detailed instructions.
Before you start, you should have:

- vendor ID and component ID
- service account username and password 
 
Run:

	docker run --rm -i -t --volume=/path/to/repository/:/code/ quay.io/keboola/component-generator

The path `/path/to/repository/` is expected to contain an empty [GitHub](https://github.com/) repository.

Options:
- `--setup-only` -- only run setup of `GitHub Actions` deployment
- `--update` -- use to update existing repository, will ask about each file before copying

Pass options in the command line like this:

	docker run --rm -i -t --volume=/path/to/repository/:/code/ quay.io/keboola/component-generator --setup-only

Setup of `GitHub Actions` deployment does the following:

- enable building of the repository
- build only if .github/workflows/push.yml is present
- github token must have repo/public_repo scope
- set `KBC_DEVELOPERPORTAL_PASSWORD` secret

## Development
To run the component generator locally on a local repository, you need to map two volumes, e.g.:

```
docker build . -t component-generator-dev
docker run --rm -it -v /path/to/genrator/:/init-code/ -v /path/to/repository/:/code/ --entrypoint=/bin/bash component-generator-dev
```

Then run the generator with `php /init-code/application.php`. The generator assumes that its code is located 
in the `/init-code/` directory and the repository to be initialized is located in the `/code/` directory.

## License

MIT licensed, see [LICENSE](./LICENSE) file.



================================================
FILE: application.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/vendor/autoload.php';

use Keboola\AppSkeleton\GenerateCommand;
use Symfony\Component\Console\Application;

try {
    $application = new Application();
    $command = new GenerateCommand();
    $application->add($command);
    $application->setDefaultCommand($command->getName(), true);
    $application->run();
} catch (Throwable $e) {
    echo 'An error occurred ' . $e->getMessage();
}



================================================
FILE: composer.json
================================================
{
    "name": "keboola/component-generator",
    "type": "project",
    "description": "KBC Application Component Generator",
    "authors": [
        {
            "name": "Keboola",
            "email": "devel@keboola.com"
        }
    ],	
    "require": {
        "php": "^7.4",
        "symfony/process": "^4.0",
        "symfony/finder": "^4.0",
        "symfony/console": "^4.0",
        "symfony/filesystem": "^4.0",
        "symfony/yaml": "^4.0",
        "keboola/php-temp": "^2.0"
    },
    "minimum-stability": "stable",
    "autoload": {
        "psr-4": {
            "Keboola\\AppSkeleton\\": "src/",
            "Keboola\\AppSkeleton\\Tests\\": "Tests/"
        }
    },
    "scripts": {
        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php ."
    },
    "require-dev": {
        "phpstan/phpstan": "^0.12.96",
        "keboola/coding-standard": "^13.0"
    }
}



================================================
FILE: composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "5466d0f831369a57fcbb8e9e4c1721d1",
    "packages": [
        {
            "name": "keboola/php-temp",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/filesystem": ">2.8"
            },
            "require-dev": {
                "infection/infection": "^0.12",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^8.0",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0|^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Temp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Temp library handles application temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "time": "2019-04-26T07:18:24+00:00"
        },
        {
            "name": "symfony/console",
            "version": "v4.0.9",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/console.git",
                "reference": "3e820bc2c520a87ca209ad8fa961c97f42e0b4ae"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/console/zipball/3e820bc2c520a87ca209ad8fa961c97f42e0b4ae",
                "reference": "3e820bc2c520a87ca209ad8fa961c97f42e0b4ae",
                "shasum": ""
            },
            "require": {
                "php": "^7.1.3",
                "symfony/polyfill-mbstring": "~1.0"
            },
            "conflict": {
                "symfony/dependency-injection": "<3.4",
                "symfony/process": "<3.3"
            },
            "require-dev": {
                "psr/log": "~1.0",
                "symfony/config": "~3.4|~4.0",
                "symfony/dependency-injection": "~3.4|~4.0",
                "symfony/event-dispatcher": "~3.4|~4.0",
                "symfony/lock": "~3.4|~4.0",
                "symfony/process": "~3.4|~4.0"
            },
            "suggest": {
                "psr/log-implementation": "For using the console logger",
                "symfony/event-dispatcher": "",
                "symfony/lock": "",
                "symfony/process": ""
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Console\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Console Component",
            "homepage": "https://symfony.com",
            "time": "2018-04-30T01:23:47+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v4.0.9",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "5d2d655b2c72fc4d9bf7e9bf14f72a447b940f21"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/5d2d655b2c72fc4d9bf7e9bf14f72a447b940f21",
                "reference": "5d2d655b2c72fc4d9bf7e9bf14f72a447b940f21",
                "shasum": ""
            },
            "require": {
                "php": "^7.1.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Filesystem Component",
            "homepage": "https://symfony.com",
            "time": "2018-02-22T10:50:29+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v4.0.9",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "ca27c02b7a3fef4828c998c2ff9ba7aae1641c49"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/ca27c02b7a3fef4828c998c2ff9ba7aae1641c49",
                "reference": "ca27c02b7a3fef4828c998c2ff9ba7aae1641c49",
                "shasum": ""
            },
            "require": {
                "php": "^7.1.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Finder Component",
            "homepage": "https://symfony.com",
            "time": "2018-04-04T05:10:37+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.23.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "46cd95797e9df938fdd2b03693b5fca5e64b01ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/46cd95797e9df938fdd2b03693b5fca5e64b01ce",
                "reference": "46cd95797e9df938fdd2b03693b5fca5e64b01ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.23-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "time": "2021-02-19T12:13:01+00:00"
        },
        {
            "name": "symfony/polyfill-mbstring",
            "version": "v1.8.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-mbstring.git",
                "reference": "3296adf6a6454a050679cde90f95350ad604b171"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/3296adf6a6454a050679cde90f95350ad604b171",
                "reference": "3296adf6a6454a050679cde90f95350ad604b171",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.3"
            },
            "suggest": {
                "ext-mbstring": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.8-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Mbstring\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for the Mbstring extension",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "mbstring",
                "polyfill",
                "portable",
                "shim"
            ],
            "time": "2018-04-26T10:06:28+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v4.0.9",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "d7dc1ee5dfe9f732cb1bba7310f5b99f2b7a6d25"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/d7dc1ee5dfe9f732cb1bba7310f5b99f2b7a6d25",
                "reference": "d7dc1ee5dfe9f732cb1bba7310f5b99f2b7a6d25",
                "shasum": ""
            },
            "require": {
                "php": "^7.1.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Process Component",
            "homepage": "https://symfony.com",
            "time": "2018-04-03T05:24:00+00:00"
        },
        {
            "name": "symfony/yaml",
            "version": "v4.4.29",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/yaml.git",
                "reference": "3abcc4db06d4e776825eaa3ed8ad924d5bc7432a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/yaml/zipball/3abcc4db06d4e776825eaa3ed8ad924d5bc7432a",
                "reference": "3abcc4db06d4e776825eaa3ed8ad924d5bc7432a",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1.3",
                "symfony/polyfill-ctype": "~1.8"
            },
            "conflict": {
                "symfony/console": "<3.4"
            },
            "require-dev": {
                "symfony/console": "^3.4|^4.0|^5.0"
            },
            "suggest": {
                "symfony/console": "For validating YAML files using the lint command"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Yaml\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Loads and dumps YAML files",
            "homepage": "https://symfony.com",
            "time": "2021-07-27T16:19:30+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "dealerdirect/phpcodesniffer-composer-installer",
            "version": "v0.7.1",
            "source": {
                "type": "git",
                "url": "https://github.com/Dealerdirect/phpcodesniffer-composer-installer.git",
                "reference": "fe390591e0241955f22eb9ba327d137e501c771c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Dealerdirect/phpcodesniffer-composer-installer/zipball/fe390591e0241955f22eb9ba327d137e501c771c",
                "reference": "fe390591e0241955f22eb9ba327d137e501c771c",
                "shasum": ""
            },
            "require": {
                "composer-plugin-api": "^1.0 || ^2.0",
                "php": ">=5.3",
                "squizlabs/php_codesniffer": "^2.0 || ^3.0 || ^4.0"
            },
            "require-dev": {
                "composer/composer": "*",
                "phpcompatibility/php-compatibility": "^9.0",
                "sensiolabs/security-checker": "^4.1.0"
            },
            "type": "composer-plugin",
            "extra": {
                "class": "Dealerdirect\\Composer\\Plugin\\Installers\\PHPCodeSniffer\\Plugin"
            },
            "autoload": {
                "psr-4": {
                    "Dealerdirect\\Composer\\Plugin\\Installers\\PHPCodeSniffer\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Franck Nijhof",
                    "email": "franck.nijhof@dealerdirect.com",
                    "homepage": "http://www.frenck.nl",
                    "role": "Developer / IT Manager"
                }
            ],
            "description": "PHP_CodeSniffer Standards Composer Installer Plugin",
            "homepage": "http://www.dealerdirect.com",
            "keywords": [
                "PHPCodeSniffer",
                "PHP_CodeSniffer",
                "code quality",
                "codesniffer",
                "composer",
                "installer",
                "phpcs",
                "plugin",
                "qa",
                "quality",
                "standard",
                "standards",
                "style guide",
                "stylecheck",
                "tests"
            ],
            "time": "2020-12-07T18:04:37+00:00"
        },
        {
            "name": "keboola/coding-standard",
            "version": "13.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "58db809123c6ef066e7327a9bbeef8d05d431fa2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/58db809123c6ef066e7327a9bbeef8d05d431fa2",
                "reference": "58db809123c6ef066e7327a9bbeef8d05d431fa2",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "^7",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "time": "2021-07-25T10:54:36+00:00"
        },
        {
            "name": "phpstan/phpdoc-parser",
            "version": "0.5.5",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpdoc-parser.git",
                "reference": "ea0b17460ec38e20d7eb64e7ec49b5d44af5d28c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpdoc-parser/zipball/ea0b17460ec38e20d7eb64e7ec49b5d44af5d28c",
                "reference": "ea0b17460ec38e20d7eb64e7ec49b5d44af5d28c",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "require-dev": {
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpstan/extension-installer": "^1.0",
                "phpstan/phpstan": "^0.12.87",
                "phpstan/phpstan-strict-rules": "^0.12.5",
                "phpunit/phpunit": "^9.5",
                "symfony/process": "^5.2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.5-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PHPStan\\PhpDocParser\\": [
                        "src/"
                    ]
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPDoc parser with support for nullable, intersection and generic types",
            "time": "2021-06-11T13:24:46+00:00"
        },
        {
            "name": "phpstan/phpstan",
            "version": "0.12.96",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan.git",
                "reference": "a98bdc51318f20fcae8c953d266f81a70254917f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan/zipball/a98bdc51318f20fcae8c953d266f81a70254917f",
                "reference": "a98bdc51318f20fcae8c953d266f81a70254917f",
                "shasum": ""
            },
            "require": {
                "php": "^7.1|^8.0"
            },
            "conflict": {
                "phpstan/phpstan-shim": "*"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.12-dev"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan - PHP Static Analysis Tool",
            "time": "2021-08-21T11:55:13+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "7.0.13",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "122a9bf9a4a2195f74100f47dfb8375982f43cc9"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/122a9bf9a4a2195f74100f47dfb8375982f43cc9",
                "reference": "122a9bf9a4a2195f74100f47dfb8375982f43cc9",
                "shasum": ""
            },
            "require": {
                "dealerdirect/phpcodesniffer-composer-installer": "^0.6.2 || ^0.7",
                "php": "^7.1 || ^8.0",
                "phpstan/phpdoc-parser": "0.5.1 - 0.5.5",
                "squizlabs/php_codesniffer": "^3.6.0"
            },
            "require-dev": {
                "phing/phing": "2.16.4",
                "php-parallel-lint/php-parallel-lint": "1.3.0",
                "phpstan/phpstan": "0.12.93",
                "phpstan/phpstan-deprecation-rules": "0.12.6",
                "phpstan/phpstan-phpunit": "0.12.21",
                "phpstan/phpstan-strict-rules": "0.12.10",
                "phpunit/phpunit": "7.5.20|8.5.5|9.5.7"
            },
            "type": "phpcodesniffer-standard",
            "extra": {
                "branch-alias": {
                    "dev-master": "7.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "time": "2021-07-29T14:30:22+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.6.0",
            "source": {
                "type": "git",
                "url": "https://github.com/squizlabs/PHP_CodeSniffer.git",
                "reference": "ffced0d2c8fa8e6cdc4d695a743271fab6c38625"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/ffced0d2c8fa8e6cdc4d695a743271fab6c38625",
                "reference": "ffced0d2c8fa8e6cdc4d695a743271fab6c38625",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0"
            },
            "bin": [
                "bin/phpcs",
                "bin/phpcbf"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "lead"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "https://github.com/squizlabs/PHP_CodeSniffer",
            "keywords": [
                "phpcs",
                "standards"
            ],
            "time": "2021-04-09T00:54:41+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": "^7.4"
    },
    "platform-dev": []
}



================================================
FILE: deploy.sh
================================================
#!/bin/bash
set -e

GITHUB_TAG=${GITHUB_REF/refs\/tags\//}

# deploy to Quay public repository
docker login -u="${QUAY_USERNAME}" -p="${QUAY_PASSWORD}" quay.io
docker tag component-generator quay.io/${APP_IMAGE}:${GITHUB_TAG}
docker tag component-generator quay.io/${APP_IMAGE}:latest
docker images
docker push quay.io/${APP_IMAGE}:${GITHUB_TAG}
docker push quay.io/${APP_IMAGE}:latest



================================================
FILE: Dockerfile
================================================
FROM php:7.4-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        automake \
        git \
        locales \
        libltdl-dev \
        libtool \
        gpg \
        ruby \
        ruby-dev \
        unzip \
        wget \
    && sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
    && locale-gen \
    && chmod +x /tmp/composer-install.sh \
    && /tmp/composer-install.sh

# Install GitHub CLI
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null

RUN apt-get update \
    && apt-get install -y --no-install-recommends gh \
    && rm -rf /var/lib/apt/lists/*

RUN git config --global user.email "devel@keboola.com" \
    && git config --global user.name "Keboola Genesis"

COPY . /init-code/
WORKDIR /init-code/

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /init-code/
# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader
# copy rest of the app
COPY . /init-code/
# run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

WORKDIR /code/
ENTRYPOINT ["php", "/init-code/application.php"]
CMD []



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) Keboola :(){:|:&};: s.r.o.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml">
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification"/>
    </rule>
</ruleset>



================================================
FILE: phpstan.neon
================================================
parameters:
    checkMissingIterableValueType: false
    ignoreErrors:



================================================
FILE: .dockerignore
================================================
vendor
*/*/vendor
.git



================================================
FILE: docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT



================================================
FILE: src/CommandHelper.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AppSkeleton;

use Keboola\AppSkeleton\Credentials\DeveloperPortalCredentials;
use Keboola\AppSkeleton\Credentials\DockerhubCredentials;
use Keboola\AppSkeleton\Exception\FailedException;
use RuntimeException;
use Symfony\Component\Console\Helper\QuestionHelper;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Finder\SplFileInfo;
use Symfony\Component\Process\Process;

class CommandHelper
{
    private InputInterface $input;

    private OutputInterface $output;

    private QuestionHelper $questionHelper;

    public function __construct(InputInterface $input, OutputInterface $output, QuestionHelper $questionHelper)
    {
        $this->input = $input;
        $this->output = $output;
        $this->questionHelper = $questionHelper;
    }

    public function getGithubToken(): string
    {
        $this->output->writeln('Github login');
        // Use CLI option if present
        $cliToken = $this->input->getOption('github-token');
        if ($cliToken) {
            $this->output->writeln('Using GitHub API token from the command line.');
            return $cliToken;
        }

        // Request token from user
        $this->output->writeln('Please provide a GitHub token from the https://github.com/settings/tokens');

        $question = new Question('GitHub token:');
        $this->setQuestionValidator($question, 'GitHub token');
        $githubToken = $this->questionHelper->ask($this->input, $this->output, $question);

        // Remove previous line and replace token with *****
        if ($this->output->isDecorated()) {
            $this->output->write("\x1B[1A\x1B[2K");
            $this->output->writeln('GitHub token: *****');
        }

        return $githubToken;
    }

    public function getDeveloperPortalCredentials(): DeveloperPortalCredentials
    {
        $this->output->writeln('Developer Portal credentials');

        $question = new Question('Please enter <info>vendor id</info>: ');
        $this->setQuestionValidator($question, 'vendor id');
        $vendor = $this->questionHelper->ask($this->input, $this->output, $question);

        $question = new Question(
            'Please enter <info>component id</info> (including vendor id, e.g. keboola.ex-gmail): '
        );
        $this->setQuestionValidator($question, 'component id');

        $componentId = $this->questionHelper->ask($this->input, $this->output, $question);

        $question = new Question('Please enter service <info>account name</info>: ');
        $this->setQuestionValidator($question, 'account name');
        $serviceName = $this->questionHelper->ask($this->input, $this->output, $question);

        $question = new Question('Please enter service <info>account password</info>: ');
        $this->setQuestionValidator($question, 'account password');
        $servicePassword = $this->questionHelper->ask($this->input, $this->output, $question);

        // Remove previous line and replace password with *****
        if ($this->output->isDecorated()) {
            $this->output->write("\x1B[1A\x1B[2K");
            $this->output->writeln('Please enter service <info>account password</info>:  *****');
        }

        return new DeveloperPortalCredentials($vendor, $componentId, $serviceName, $servicePassword);
    }

    public function getDockerhubCredentials(): DockerhubCredentials
    {
        $this->output->writeln('Dockerhub credentials');

        $question = new Question('Please enter <info>Dockerhub username</info> (keep empty for skip): ');
        $user = $this->questionHelper->ask($this->input, $this->output, $question);

        $password = null;
        if ($user) {
            $question = new Question('Please enter <info>Dockerhub password</info>: ');
            $this->setQuestionValidator($question, 'Dockerhub password');
            $password = $this->questionHelper->ask($this->input, $this->output, $question);

            // Remove previous line and replace password with *****
            if ($this->output->isDecorated()) {
                $this->output->write("\x1B[1A\x1B[2K");
                $this->output->writeln('Please enter <info>Dockerhub password</info>: *****');
            }
        }

        return new DockerhubCredentials($user, $password);
    }

    public function getRepository(): string
    {
        $process = (new Process('git config --get remote.origin.url'));
        $process->run();
        $url = $process->getOutput();
        if ($process->getExitCode() !== 0) {
            throw new FailedException(
                'The <info>/code/</info> directory does not seem to be a checked out git repository.'
            );
        }
        if (!preg_match('#github\.com[:/](.*?)(?:\.git)?$#', $url, $matches)) {
            throw new FailedException(
                'The <info>/code/</info> directory does not seem to be a Github repository.'
            );
        }

        $this->output->write('The current repository is: <info>' . $process->getOutput() . '</info>');
        $question = new ConfirmationQuestion('Is this correct? ', true);
        if (!$this->questionHelper->ask($this->input, $this->output, $question)) {
            throw new FailedException();
        }
        return $matches[1];
    }

    public function checkRepositoryIfEmpty(): void
    {
        $finder = new Finder();
        $files = $finder->files()->in('/code/')->notName('README.md');
        if (!$this->input->getOption('update') && $files->count()) {
            $question = new ConfirmationQuestion(
                'The repository does not seem to be empty, do you want to continue? ',
                true
            );
            if (!$this->questionHelper->ask($this->input, $this->output, $question)) {
                throw new FailedException();
            }
        }
    }

    public function chooseTemplate(): string
    {
        $dirs = [];
        $finder = new Finder();
        foreach ($finder->directories()->in('/init-code/templates/')->sortByName()->depth(0) as $dir) {
            /** @var SplFileInfo $dir */
            $dirs[] = $dir->getBasename();
        }
        $question = new ChoiceQuestion('Choose a template:', $dirs);
        $question->setErrorMessage('Template %s is invalid.');

        $template = $this->questionHelper->ask($this->input, $this->output, $question);

        $this->output->writeln('You have wisely chosen <info>' . $template . '</info> template.');

        return $template;
    }

    public function chooseCiTemplate(string $template): string
    {
        $dirs = [];
        $finder = new Finder();
        $templateDir = '/init-code/templates-ci/' . $template;
        if (!is_dir($templateDir)) {
            $templateDir = '/init-code/templates-ci/common/';
        }
        foreach ($finder->directories()->in($templateDir)->sortByName()->depth(0) as $dir) {
            /** @var SplFileInfo $dir */
            $dirs[] = $dir->getBasename();
        }

        if (count($dirs) === 1) {
            return (string) current($dirs);
        }

        $question = new ChoiceQuestion('Choose a template:', $dirs);
        $question->setErrorMessage('Template %s is invalid.');

        $template = $this->questionHelper->ask($this->input, $this->output, $question);

        $this->output->writeln('You have wisely chosen <info>' . $template . '</info> CI template.');

        return $template;
    }

    public function copyTemplateFiles(string $template): void
    {
        $this->output->writeln('Copying common files.');
        $this->copyFiles('/init-code/templates-common/');

        $this->output->writeln('Copying template files.');
        $this->copyFiles('/init-code/templates/' . $template);
    }

    public function copyFiles(string $sourceDir): void
    {
        $fs = new Filesystem();
        $finder = new Finder();
        /** @var SplFileInfo $directory */
        foreach ($finder->files()->in($sourceDir)->directories() as $directory) {
            $fs->mkdir($directory->getRelativePathname());
        }
        $finder = new Finder();
        foreach ($finder->files()->in($sourceDir)->ignoreDotFiles(false) as $file) {
            if ($this->input->getOption('update')) {
                $question = new ConfirmationQuestion(
                    'Copy (and overwrite) file <info>' . $file->getRelativePathname() . '</info> ? ',
                    true
                );
                if (!$this->questionHelper->ask($this->input, $this->output, $question)) {
                    continue;
                }
            }
            $fs->copy($file->getPathname(), '/code/' . $file->getRelativePathname(), true);
        }
    }

    public function createGitCommit(): void
    {
        $this->output->writeln('Adding to git.');
        ProcessDecorator::run('git add /code/', $this->output);
        if (file_exists('/code/deploy.sh')) {
            $this->output->writeln('Setting permissions.');
            ProcessDecorator::run('git update-index --chmod=+x /code/deploy.sh', $this->output);
        }
        $process = new Process('git status --short');
        $process->mustRun();
        if ($process->getOutput()) {
            if (!$this->input->getOption('update')) {
                $this->output->writeln('Creating initial commit.');
                ProcessDecorator::run('git commit -m "Initial import"', $this->output);
            } else {
                $this->output->writeln('Creating update commit.');
                ProcessDecorator::run('git commit -m "Skeleton updated"', $this->output);
            }
        } else {
            $this->output->writeln('No modifications');
        }
    }

    public function createGitTag(): void
    {
        $this->output->writeln('Repository configured, adding tag to trigger deploy.');
        $process = new Process('git tag');
        $process->mustRun();
        $tags = $process->getOutput();
        if (!$tags) {
            ProcessDecorator::run('git tag 0.1.0', $this->output);
        } else {
            $tags = explode("\n", trim($tags));
            $tag = $tags[count($tags) - 1];
            $elms = explode('.', $tag);
            if (count($elms) === 3) {
                $elms[2]++;
                ProcessDecorator::run('git tag ' . implode('.', $elms), $this->output);
            } else {
                $this->output->writeln('Don\'t know how to tag based on <info>$tag</info>, create a new git tag.');
            }
        }
    }

    private function setQuestionValidator(Question $question, string $type): void
    {
        $question->setValidator(function ($v) use ($type) {
            if (empty($v)) {
                throw new RuntimeException(sprintf('Please fill in "%s".', $type));
            }

            return $v;
        });
    }
}



================================================
FILE: src/GenerateCommand.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AppSkeleton;

use Keboola\AppSkeleton\Exception\FailedException;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class GenerateCommand extends Command
{
    protected function configure(): void
    {
        $this->setName('skeleton:generate')
        ->setDescription('Creates a new application skeleton.')
        ->setHelp(
            'This command allows you to initialize an empty git repository with a skeleton '
            . 'of Keboola Connection application in the chosen language.'
        )
        ->addOption('setup-only', 's', InputOption::VALUE_NONE, 'Only setup deployment')
        ->addOption('update', 'u', InputOption::VALUE_NONE, 'Update skeleton')
        ->addOption('github-token', 't', InputOption::VALUE_OPTIONAL, 'GitHub API token');
    }

    protected function execute(InputInterface $input, OutputInterface $output): void
    {
        $commandHelper = new CommandHelper(
            $input,
            $output,
            $this->getHelper('question')
        );
        try {
            chdir('/code/');
            $output->writeln('<info>Hi.</info>');

            $repository = $commandHelper->getRepository();

            $template = 'common';
            if (!$input->getOption('setup-only')) {
                $commandHelper->checkRepositoryIfEmpty();

                $template = $commandHelper->chooseTemplate();

                $commandHelper->copyTemplateFiles($template);
            }

            $ciTemplate = $commandHelper->chooseCiTemplate($template);
            $output->writeln('Copying CI template files.');
            $ciTemplateDir = '/init-code/templates-ci/' . $template . '/'. $ciTemplate;
            if (!is_dir($ciTemplateDir)) {
                $ciTemplateDir = '/init-code/templates-ci/common/' . $ciTemplate;
            }
            $commandHelper->copyFiles($ciTemplateDir);

            $developerPortalCredentials = $commandHelper->getDeveloperPortalCredentials();

            $githubToken = $commandHelper->getGithubToken();

            switch ($ciTemplate) {
                case SetupCI::CI_GH_ACTIONS:
                    $dockerhubCredentials = $commandHelper->getDockerhubCredentials();
                    SetupCI::setupGHActions(
                        $output,
                        $repository,
                        $dockerhubCredentials,
                        $developerPortalCredentials,
                        $githubToken
                    );
                    break;
            }

            $commandHelper->createGitCommit();
        } catch (FailedException $e) {
            $output->writeln($e->getMessage());
            return;
        }

        $commandHelper->createGitTag();

        $output->writeln(
            'Verify what I have done and do <info>git push</info> to deploy the application '
            . 'or <info>git reset --hard origin/master</info> to rollback all changes.'
        );
    }
}



================================================
FILE: src/ProcessDecorator.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AppSkeleton;

use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Process;

class ProcessDecorator
{
    public static function run(string $commandLine, OutputInterface $output): void
    {
        $output->writeln('Executing command: <info>' . $commandLine . '</info>');
        $process = new Process($commandLine);
        $process->mustRun();
        $output->writeln($process->getOutput());
    }
}



================================================
FILE: src/SetupCI.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AppSkeleton;

use Keboola\AppSkeleton\Credentials\DeveloperPortalCredentials;
use Keboola\AppSkeleton\Credentials\DockerhubCredentials;
use Keboola\Temp\Temp;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;
use Symfony\Component\Yaml\Yaml;

class SetupCI
{
    public const CI_GH_ACTIONS = 'github-actions';

    public static function setupGHActions(
        OutputInterface $output,
        string $repository,
        DockerhubCredentials $dockerhubCredentials,
        DeveloperPortalCredentials $developerPortalCredentials,
        string $githubToken
    ): void {
        $output->writeln('Setting up GitHub Actions integration.');

        $tmpFile = (new Temp())->createFile('token');
        file_put_contents($tmpFile->getPathname(), $githubToken);

        (new Process('gh auth login --with-token < ' . $tmpFile->getPathname()))->mustRun();

        $process = new Process(
            sprintf(
                'gh secret set KBC_DEVELOPERPORTAL_PASSWORD -b%s -R %s',
                $developerPortalCredentials->getServiceAccountPassword(),
                $repository
            )
        );
        $process->mustRun();

        if ($dockerhubCredentials->getUser() !== null) {
            $process = new Process(
                sprintf(
                    'gh secret set DOCKERHUB_TOKEN -b%s -R %s',
                    $dockerhubCredentials->getPassword(),
                    $repository
                )
            );
            $process->mustRun();
        }

        $output->writeln('Repository secret "KBC_DEVELOPERPORTAL_PASSWORD" has been created.');

        $finder = new Finder();
        $files = $finder->in('/code/.github/workflows/')->files();
        foreach ($files as $file) {
            $config = Yaml::parse(file_get_contents($file->getPathname()));
            array_walk_recursive(
                $config,
                function (&$value) use ($developerPortalCredentials, $dockerhubCredentials): void {
                    if (is_string($value) && preg_match('{{env\((?P<env>.*)\)}}', $value, $m)) {
                        $value = self::convertEnv($m['env'], $developerPortalCredentials, $dockerhubCredentials);
                    }
                }
            );
            file_put_contents(
                $file->getPathname(),
                Yaml::dump($config, 10, 4, Yaml::DUMP_MULTI_LINE_LITERAL_BLOCK)
            );
        }
    }

    private static function convertEnv(
        string $env,
        DeveloperPortalCredentials $developerPortalCredentials,
        DockerhubCredentials $dockerhubCredentials
    ): string {
        switch ($env) {
            case 'KBC_DEVELOPERPORTAL_APP':
                return $developerPortalCredentials->getComponentId();
            case 'KBC_DEVELOPERPORTAL_USERNAME':
                return $developerPortalCredentials->getServiceAccountName();
            case 'KBC_DEVELOPERPORTAL_VENDOR':
                return $developerPortalCredentials->getVendorId();
            case 'DOCKERHUB_USER':
                return (string) $dockerhubCredentials->getUser();
            default:
                return $env;
        }
    }
}



================================================
FILE: src/Credentials/DeveloperPortalCredentials.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AppSkeleton\Credentials;

class DeveloperPortalCredentials
{
    private string $vendorId;

    private string $componentId;

    private string $serviceAccountName;

    private string $serviceAccountPassword;

    public function __construct(
        string $vendorId,
        string $componentId,
        string $serviceAccountName,
        string $serviceAccountPassword
    ) {
        $this->vendorId = $vendorId;
        $this->componentId = $componentId;
        $this->serviceAccountName = $serviceAccountName;
        $this->serviceAccountPassword = $serviceAccountPassword;
    }

    public function getVendorId(): string
    {
        return $this->vendorId;
    }

    public function getComponentId(): string
    {
        return $this->componentId;
    }

    public function getServiceAccountName(): string
    {
        return $this->serviceAccountName;
    }

    public function getServiceAccountPassword(): string
    {
        return $this->serviceAccountPassword;
    }
}



================================================
FILE: src/Credentials/DockerhubCredentials.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AppSkeleton\Credentials;

class DockerhubCredentials
{
    private ?string $user;

    private ?string $password;

    public function __construct(?string $user = null, ?string $password = null)
    {
        $this->user = $user;
        $this->password = $password;
    }

    public function getUser(): ?string
    {
        return $this->user;
    }

    public function getPassword(): ?string
    {
        return $this->password;
    }
}



================================================
FILE: src/Exception/FailedException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AppSkeleton\Exception;

use Exception;

class FailedException extends Exception
{

}



================================================
FILE: templates/bitbucket-deploy/.gitkeep
================================================



================================================
FILE: templates/gitlab-deploy/.gitkeep
================================================



================================================
FILE: templates/php-component/README.md
================================================
# my-component

> Fill in description

# Usage

> fill in usage instructions

## Development
 
Clone this repository and init the workspace with following command:

```
git clone https://github.com/keboola/my-component
cd my-component
docker-compose build
docker-compose run --rm dev composer install --no-scripts
```

Run the test suite using this command:

```
docker-compose run --rm dev composer tests
```
 
# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 



================================================
FILE: templates/php-component/composer.json
================================================
{
    "name": "keboola/my-component",
    "description": "MyComponent description",
    "license": "MIT",
    "require": {
        "php": "^8.1",
        "keboola/php-component": "^9.0"
    },
    "require-dev": {
        "php-parallel-lint/php-parallel-lint": "^1.3",
        "keboola/coding-standard": ">=7.0.2",
        "keboola/datadir-tests": "^5.3",
        "keboola/php-temp": "^2.0",
        "phpstan/phpstan": "^1.4",
        "phpunit/phpunit": "^9.5",
        "symfony/process": "^5.0"
    },
    "autoload": {
        "psr-4": {
            "MyComponent\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "MyComponent\\Tests\\": "tests/phpunit/",
            "MyComponent\\FunctionalTests\\": "tests/functional/"
        }
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests-datadir": "phpunit tests/functional",
        "tests": [
            "@tests-phpunit",
            "@tests-datadir"
        ],

        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "build": [
            "@phplint",
            "@phpcs",
            "@phpstan",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true,
        "allow-plugins": {
            "dealerdirect/phpcodesniffer-composer-installer": true
        }
    }
}



================================================
FILE: templates/php-component/docker-compose.yml
================================================
version: '3'
services:
  dev:
    build: .
    volumes:
      - ./:/code
      - ./data:/data



================================================
FILE: templates/php-component/Dockerfile
================================================
FROM php:8-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update && apt-get install -y --no-install-recommends \
        git \
        locales \
        unzip \
	&& rm -r /var/lib/apt/lists/* \
	&& sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
	&& locale-gen \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/

# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD ["php", "/code/src/run.php"]



================================================
FILE: templates/php-component/phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>



================================================
FILE: templates/php-component/phpstan.neon
================================================
parameters:
    ignoreErrors:
        - '#Cannot call method end\(\) on Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface\|null.#'



================================================
FILE: templates/php-component/phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         bootstrap="tests/phpunit/bootstrap.php">
    <testsuite name="Main Test Suite">
        <directory>tests/phpunit</directory>
    </testsuite>
</phpunit>



================================================
FILE: templates/php-component/.dockerignore
================================================
vendor/



================================================
FILE: templates/php-component/docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT



================================================
FILE: templates/php-component/docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1



================================================
FILE: templates/php-component/src/Component.php
================================================
<?php

declare(strict_types=1);

namespace MyComponent;

use Keboola\Component\BaseComponent;

class Component extends BaseComponent
{
    protected function run(): void
    {
        // @TODO implement
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        return ConfigDefinition::class;
    }
}



================================================
FILE: templates/php-component/src/Config.php
================================================
<?php

declare(strict_types=1);

namespace MyComponent;

use Keboola\Component\Config\BaseConfig;

class Config extends BaseConfig
{
    // @todo implement your custom getters
    public function getFoo(): string
    {
        return $this->getStringValue(['parameters', 'foo']);
    }
}



================================================
FILE: templates/php-component/src/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace MyComponent;

use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;

class ConfigDefinition extends BaseConfigDefinition
{
    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();
        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->children()
                ->scalarNode('foo')
                    ->defaultValue('baz')
                ->end()
            ->end()
        ;
        // @formatter:on
        return $parametersNode;
    }
}



================================================
FILE: templates/php-component/src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\Component\Logger;
use Keboola\Component\UserException;
use MyComponent\Component;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
try {
    $app = new Component($logger);
    $app->execute();
    exit(0);
} catch (UserException $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (Throwable $e) {
    $logger->critical(
        get_class($e) . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => is_object($e->getPrevious()) ? get_class($e->getPrevious()) : '',
        ],
    );
    exit(2);
}



================================================
FILE: templates/php-component/tests/functional/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace MyComponent\FunctionalTests;

use Keboola\DatadirTests\DatadirTestCase;

class DatadirTest extends DatadirTestCase
{
}



================================================
FILE: templates/php-component/tests/functional/empty-app/source/data/config.json
================================================
{
}



================================================
FILE: templates/php-component/tests/phpunit/bootstrap.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/../../vendor/autoload.php';



================================================
FILE: templates/php-simple/Dockerfile
================================================
FROM php:8-cli

COPY . /code/
WORKDIR /data/
CMD ["php", "/code/main.php"]



================================================
FILE: templates/php-simple/main.php
================================================
<?php

declare(strict_types=1);

echo 'Hello world from PHP';



================================================
FILE: templates/python-simple/Dockerfile
================================================
FROM quay.io/keboola/docker-custom-python:latest

COPY . /code/
WORKDIR /data/
CMD ["python", "-u", "/code/main.py"]



================================================
FILE: templates/python-simple/main.py
================================================

print("Hello world from python")



================================================
FILE: templates/python-tests/docker-compose.yml
================================================
version: '2'
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data



================================================
FILE: templates/python-tests/Dockerfile
================================================
FROM python:3.6-alpine
RUN apk add --no-cache git \
    && git config --global url.https://github.com/.insteadOf git://github.com/ \
    && pip3 install --no-cache-dir --upgrade pytest flake8 \
	&& pip3 install --no-cache-dir --upgrade --force-reinstall git+git://github.com/keboola/python-docker-application.git@2.0.1

WORKDIR /code

COPY . /code/

# Run the application
CMD python3 -u ./src/main.py



================================================
FILE: templates/python-tests/TEMPLATE.md
================================================
# My Component

## Run locally

	docker-compose run --rm dev

## Run tests
	
	docker-compose run --rm dev python -m unittest discover


================================================
FILE: templates/python-tests/src/main.py
================================================
import my_component
import os
import sys
import traceback

try:
    datadir = os.environ.get('KBC_DATADIR') or '/data/'
    my_component.run(datadir)
except ValueError as err:
    print(err, file=sys.stderr)
    sys.exit(1)
except Exception as err:
    print(err, file=sys.stderr)
    traceback.print_exc(file=sys.stderr)
    sys.exit(2)



================================================
FILE: templates/python-tests/src/my_component.py
================================================
import csv

from keboola import docker


def run(datadir):
    cfg = docker.Config(datadir)
    parameters = cfg.get_parameters()
    print("Hello World!")
    print(parameters)
    in_file = datadir + '/in/tables/source.csv'
    out_file = datadir + '/out/tables/destination.csv'
    with open(in_file, mode='rt', encoding='utf-8') as in_file, \
            open(out_file, mode='wt', encoding='utf-8') as out_file:
        lazy_lines = (line.replace('\0', '') for line in in_file)
        reader = csv.DictReader(lazy_lines, dialect='kbc')
        writer = csv.DictWriter(out_file, dialect='kbc',
                                fieldnames=reader.fieldnames)
        writer.writeheader()
        for row in reader:
            writer.writerow({'id': int(row['id']) * 42,
                             'sound': row['sound'] + 'ping'})



================================================
FILE: templates/python-tests/tests/__init__.py
================================================
__all__ = ['my_component']



================================================
FILE: templates/python-tests/tests/test_run.py
================================================
import filecmp
import unittest
from src.my_component import run


class MyComponentTestCase(unittest.TestCase):
    def test_run_00(self):
        base = '/code/tests/data/00/'
        run(base)
        result = filecmp.cmp(base + "out/tables/destination.csv",
                             base + "_sample_out/tables/destination.csv",
                             False)
        self.assertTrue(result)



================================================
FILE: templates/python-tests/tests/data/00/config.json
================================================
{
  "storage": {
    "input": {
      "tables": [{
        "source": "in.c-main.source",
        "destination": "source.csv"
      }]
    },
    "output": {
      "tables": [{
        "source": "destination.csv",
        "destination": "out.c-main.destination"
      }]
    }
  },
  "parameters": {
    "foo": "bar"
  }
}


================================================
FILE: templates/python-tests/tests/data/00/destination.csv
================================================
id,sound
42,Booping
84,Mooping



================================================
FILE: templates/python-tests/tests/data/00/_sample_out/tables/destination.csv
================================================
id,sound
42,Booping
84,Mooping



================================================
FILE: templates/python-tests/tests/data/00/in/tables/source.csv
================================================
id,sound
1,"Boo"
2,"Moo"



================================================
FILE: templates/r-simple/Dockerfile
================================================
FROM quay.io/keboola/docker-custom-r:latest

COPY . /code/
WORKDIR /data/
CMD ["Rscript", "/code/main.R"]



================================================
FILE: templates/r-simple/main.R
================================================

print("Hello world from R");


================================================
FILE: templates/r-tests/DESCRIPTION
================================================
Package: my.component
Type: Package
Title: Some Title
Version: 0.0.1
Date: 2016-05-02
Author: Me
Maintainer: Me <me@example.com>
Description: Some Description
License: MIT + file LICENSE
LazyData: TRUE
Suggests:
    testthat
Depends:
    methods,
    keboola.r.docker.application
RoxygenNote: 5.0.1



================================================
FILE: templates/r-tests/docker-compose.yml
================================================
version: '2'
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data



================================================
FILE: templates/r-tests/Dockerfile
================================================
FROM quay.io/keboola/docker-custom-r:latest

COPY . /code/
WORKDIR /code/
CMD ["Rscript", "/code/main.R"]



================================================
FILE: templates/r-tests/LICENSE
================================================
YEAR: 2015
COPYRIGHT HOLDER: Me


================================================
FILE: templates/r-tests/main.R
================================================
devtools::load_all('/code/')
library(my.component)
app <- CustomApplicationExample$new(Sys.getenv("KBC_DATADIR"))
app$run()



================================================
FILE: templates/r-tests/NAMESPACE
================================================
# Generated by roxygen2: do not edit by hand

export(CustomApplicationExample)
exportClasses(CustomApplicationExample)
import(keboola.r.docker.application)
import(methods)



================================================
FILE: templates/r-tests/TEMPLATE.md
================================================
# My Component

## Run locally

	docker-compose run --rm dev

## Run tests
	
	docker-compose run --rm dev /src/tests.sh



================================================
FILE: templates/r-tests/.Rbuildignore
================================================
^.*\.Rproj$
^\.Rproj\.user$
^main\.R$
^Dockerfile$
^docker-compose\.yml$


================================================
FILE: templates/r-tests/R/myApp.R
================================================
#' Example custom KBC application in R
#' @import methods
#' @import keboola.r.docker.application
#' @export CustomApplicationExample
#' @exportClass CustomApplicationExample
CustomApplicationExample <- setRefClass(
    'CustomApplicationExample',
    contains = c("DockerApplication"),
    fields = list(),
    methods = list(
        run = function() {
            "Main application run function."

            # intialize application
            readConfig()

            # read input
            data <- read.csv(file = file.path(dataDir, "in/tables/source.csv"));

            # do something clever
            data['double_number'] <- data['number'] * getParameters()$multiplier

            # write output
            write.csv(data, file = file.path(dataDir, "out/tables/result.csv"), row.names = FALSE)
        }
    )
)



================================================
FILE: templates/r-tests/tests/config_template.R
================================================
# Rename this file to config.R and use it to override environment variables for testing

KBC_DATADIR <- "/whatever/dir/i/like/to/work/in"



================================================
FILE: templates/r-tests/tests/tests.sh
================================================
#!/bin/sh
set -e

R CMD build /code/
R CMD check --as-cran --no-manual /code/



================================================
FILE: templates/r-tests/tests/testthat.R
================================================
library(testthat)

KBC_DATADIR <- '/data/'

# override with config if any
if (file.exists("config.R")) {
  source("config.R")
}

# override with environment if any
if (nchar(Sys.getenv("KBC_DATADIR")) > 0) {
  KBC_DATADIR <- Sys.getenv("KBC_DATADIR")
}

test_check("my.component")



================================================
FILE: templates/r-tests/tests/data/config.json
================================================
{
    "storage": {
        "input": {
            "tables": [
                {
                    "source": "in.c-main.test",
                    "destination": "source.csv",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq"
                }
            ]
        },
        "output": {
            "tables": [
                {
                    "source": "result.csv",
                    "destination": "out.c-main.test",
                    "incremental": false,
                    "primary_key": [],
                    "delete_where_values": [],
                    "delete_where_operator": "eq"
                }
            ]
        }
    },
    "parameters": {
        "multiplier": 2
    }
}


================================================
FILE: templates/r-tests/tests/data/in/tables/source.csv
================================================
"id","number"
1,10
2,20
3,30
4,40



================================================
FILE: templates/r-tests/tests/testthat/test_main.R
================================================
test_that("basic run", {
    # source data are prepared in tests directory

    # run the actual application
    app <- CustomApplicationExample$new(KBC_DATADIR)
    app$run()

    # verify the results
    dfResult <- read.csv(file = file.path(KBC_DATADIR, 'out/tables/result.csv'), stringsAsFactors = FALSE)
    expect_equal(
      data.frame(
        id = c(1, 2, 3, 4),
        number = c(10, 20, 30, 40),
        double_number = c(20, 40, 60, 80),
        stringsAsFactors = FALSE
      ),
      dfResult
    )
})



================================================
FILE: templates-ci/bitbucket-deploy/bitbucket-pipelines/bitbucket-pipelines.yml
================================================
options:
  docker: true

pipelines:
  default:
    - step:
        script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images

  tags:
    '*':
      - step:
          script:
          - export APP_IMAGE=keboola-component
          - docker build . --tag=$APP_IMAGE
          - docker images
          - ./deploy.sh



================================================
FILE: templates-ci/bitbucket-deploy/bitbucket-pipelines/deploy.sh
================================================
#!/bin/sh
set -e

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${BITBUCKET_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${BITBUCKET_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${BITBUCKET_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${BITBUCKET_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${BITBUCKET_TAG} is not allowed."
fi



================================================
FILE: templates-ci/common/github-actions/.github/workflows/push.yml
================================================
name: GitHub Actions
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # Name of the image in the ECR
  APP_IMAGE: keboola-component

  # Developer portal login
  KBC_DEVELOPERPORTAL_VENDOR: "{{env(KBC_DEVELOPERPORTAL_VENDOR)}}"
  KBC_DEVELOPERPORTAL_APP: "{{env(KBC_DEVELOPERPORTAL_APP)}}"
  KBC_DEVELOPERPORTAL_USERNAME: "{{env(KBC_DEVELOPERPORTAL_USERNAME)}}"
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # DockerHub login
  DOCKERHUB_USER: "{{env(DOCKERHUB_USER)}}"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test KBC project
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }}
  KBC_TEST_PROJECT_URL: ""
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Print Docker version
        run: docker -v
      -
        name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"
      -
        name: Build image
        run: docker build -t $APP_IMAGE .
      -
        name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
      -
        name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ steps.tag.outputs.app_image_tag }}
          push_latest: ${{ steps.tag.outputs.is_semantic_tag }}
          source_image: ${{ env.APP_IMAGE}}

  tests:
    needs: build
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix: ...
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.APP_IMAGE}}
          tag_as_latest: true
      -
        name: Run tests
        run: echo "Here run your test tools."

  tests-in-kbc:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Run KBC test jobs
        if: env.KBC_STORAGE_TOKEN && env.KBC_TEST_PROJECT_CONFIGS
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ env.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    needs:
      - build
      - tests
      - tests-in-kbc
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.build.outputs.is_semantic_tag == 'true'
    steps:
      -
        name: Set tag in the Deloper Portal
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}




================================================
FILE: templates-ci/gitlab-deploy/gitlab-ci/deploy.sh
================================================
#!/bin/sh
set -e

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${CI_COMMIT_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${CI_COMMIT_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${CI_COMMIT_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${CI_COMMIT_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${CI_COMMIT_TAG} is not allowed."
fi



================================================
FILE: templates-ci/gitlab-deploy/gitlab-ci/.gitlab-ci.yml
================================================
image: docker:latest

variables:
  DOCKER_DRIVER: overlay2
  APP_IMAGE: keboola-component

services:
- docker:dind

before_script:
- docker info

build-component:
  stage: build
  script:
    - docker build . --tag=$APP_IMAGE

deploy-component:
  stage: deploy
  script:
    - docker build . --tag=$APP_IMAGE
    - pwd
    - ls -la
    - export    
    - ./deploy.sh
  only:
    - tags



================================================
FILE: templates-ci/php-component/github-actions/.github/workflows/push.yml
================================================
name: GitHub Actions
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # Name of the image in the ECR
  APP_IMAGE: keboola-component

  # Developer portal login
  KBC_DEVELOPERPORTAL_VENDOR: "{{env(KBC_DEVELOPERPORTAL_VENDOR)}}"
  KBC_DEVELOPERPORTAL_APP: "{{env(KBC_DEVELOPERPORTAL_APP)}}"
  KBC_DEVELOPERPORTAL_USERNAME: "{{env(KBC_DEVELOPERPORTAL_USERNAME)}}"
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # DockerHub login
  DOCKERHUB_USER: "{{env(DOCKERHUB_USER)}}"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test KBC project
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }}
  KBC_TEST_PROJECT_URL: ""
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Print Docker version
        run: docker -v
      -
        name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"
      -
        name: Build image
        run: docker build -t $APP_IMAGE .
      -
        name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
      -
        name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ steps.tag.outputs.app_image_tag }}
          push_latest: ${{ steps.tag.outputs.is_semantic_tag }}
          source_image: ${{ env.APP_IMAGE}}

  tests:
    needs: build
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix: ...
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.APP_IMAGE}}
          tag_as_latest: true
      -
        name: Run tests
        run: docker run ${{env.APP_IMAGE}} composer ci

  tests-in-kbc:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Run KBC test jobs
        if: env.KBC_STORAGE_TOKEN && env.KBC_TEST_PROJECT_CONFIGS
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ env.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    needs:
      - build
      - tests
      - tests-in-kbc
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.build.outputs.is_semantic_tag == 'true'
    steps:
      -
        name: Set tag in the Developer Portal
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}




================================================
FILE: templates-ci/python-tests/github-actions/.github/workflows/push.yml
================================================
name: GitHub Actions
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # Name of the image in the ECR
  APP_IMAGE: keboola-component

  # Developer portal login
  KBC_DEVELOPERPORTAL_VENDOR: "{{env(KBC_DEVELOPERPORTAL_VENDOR)}}"
  KBC_DEVELOPERPORTAL_APP: "{{env(KBC_DEVELOPERPORTAL_APP)}}"
  KBC_DEVELOPERPORTAL_USERNAME: "{{env(KBC_DEVELOPERPORTAL_USERNAME)}}"
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # DockerHub login
  DOCKERHUB_USER: "{{env(DOCKERHUB_USER)}}"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test KBC project
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }}
  KBC_TEST_PROJECT_URL: ""
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Print Docker version
        run: docker -v
      -
        name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"
      -
        name: Build image
        run: docker build -t $APP_IMAGE .
      -
        name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
      -
        name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ steps.tag.outputs.app_image_tag }}
          push_latest: ${{ steps.tag.outputs.is_semantic_tag }}
          source_image: ${{ env.APP_IMAGE}}

  tests:
    needs: build
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix: ...
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.APP_IMAGE}}
          tag_as_latest: true
      -
        name: Run tests
        run: |
          docker run ${{env.APP_IMAGE}} flake8
          docker run ${{env.APP_IMAGE}} python -m unittest discover

  tests-in-kbc:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Run KBC test jobs
        if: env.KBC_STORAGE_TOKEN && env.KBC_TEST_PROJECT_CONFIGS
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ env.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    needs:
      - build
      - tests
      - tests-in-kbc
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.build.outputs.is_semantic_tag == 'true'
    steps:
      -
        name: Set tag in the Deloper Portal
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}




================================================
FILE: templates-ci/r-tests/github-actions/.github/workflows/push.yml
================================================
name: GitHub Actions
on: [ push ]
concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # Name of the image in the ECR
  APP_IMAGE: keboola-component

  # Developer portal login
  KBC_DEVELOPERPORTAL_VENDOR: "{{env(KBC_DEVELOPERPORTAL_VENDOR)}}"
  KBC_DEVELOPERPORTAL_APP: "{{env(KBC_DEVELOPERPORTAL_APP)}}"
  KBC_DEVELOPERPORTAL_USERNAME: "{{env(KBC_DEVELOPERPORTAL_USERNAME)}}"
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # DockerHub login
  DOCKERHUB_USER: "{{env(DOCKERHUB_USER)}}"
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Test KBC project
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }}
  KBC_TEST_PROJECT_URL: ""
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Print Docker version
        run: docker -v
      -
        name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"
      -
        name: Build image
        run: docker build -t $APP_IMAGE .
      -
        name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
      -
        name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ steps.tag.outputs.app_image_tag }}
          push_latest: ${{ steps.tag.outputs.is_semantic_tag }}
          source_image: ${{ env.APP_IMAGE}}

  tests:
    needs: build
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix: ...
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Pull image from ECR
        uses: keboola/action-pull-from-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          target_image: ${{ env.APP_IMAGE}}
          tag_as_latest: true
      -
        name: Run tests
        run: docker run -e KBC_DATADIR=/code/tests/data/ ${{env.APP_IMAGE}} /code/tests/tests.sh

  tests-in-kbc:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Run KBC test jobs
        if: env.KBC_STORAGE_TOKEN && env.KBC_TEST_PROJECT_CONFIGS
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ env.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.build.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    needs:
      - build
      - tests
      - tests-in-kbc
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.build.outputs.is_semantic_tag == 'true'
    steps:
      -
        name: Set tag in the Deloper Portal
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.build.outputs.app_image_tag }}




================================================
FILE: templates-common/.dockerignore
================================================
vendor
.git



================================================
FILE: .github/workflows/push.yml
================================================
name: GitHub Actions
on: [push]
env:
  AWS_ACCESS_KEY_ID: "[REDACTED]"
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  APP_IMAGE: keboola/component-generator

  QUAY_USERNAME: "keboola+gh_actions_component_generator"
  QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}

jobs:
  PHPTests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Print Docker version
        run: |
          docker -v
      
      - name: PHP Component
        run: |
          docker build ./templates/php-component --tag=template-php-component
          docker run --rm template-php-component composer ci

      - name: PHP Simple
        run: |
          docker build ./templates/php-simple --tag=php-simple

  PythonTests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Print Docker version
        run: |
          docker -v

      - name: Python tests
        run: |
          docker build ./templates/python-tests --tag=template-python-tests
          docker run template-python-tests flake8
          docker run template-python-tests python -m unittest discover

      - name: Python Simple
        run: |
          docker build ./templates/python-simple --tag=python-simple

  RTests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Print Docker version
        run: |
          docker -v

      - name: R tests
        run: |
          docker build ./templates/r-tests --tag=template-r-tests
          docker run -e KBC_DATADIR=/code/tests/data/ template-r-tests /code/tests/tests.sh

      - name: R Simple
        run: |
          docker build ./templates/r-simple --tag=r-simple

  Deploy:
    runs-on: ubuntu-latest
    outputs:
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
    needs:
      - PHPTests
      - PythonTests
      - RTests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Print Docker version
        run: |
          docker -v

      - name: Build
        run: docker build . --tag=component-generator

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT

      - name: Deploy
        if: startsWith(github.ref, 'refs/tags/') && steps.tag.outputs.is_semantic_tag == 'true'
        run: ./deploy.sh

